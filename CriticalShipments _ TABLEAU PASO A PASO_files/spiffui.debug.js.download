/*! BEGIN SpiffUI */
// BEGIN iScroll
// Include iScroll inline here since it's so small
/*! iScroll v5.0.6 ~ (c) 2008-2013 Matteo Spinelli ~ http://cubiq.org/license */
var IScroll = (function (window, document, Math) {
var rAF = window.requestAnimationFrame	||
	window.webkitRequestAnimationFrame	||
	window.mozRequestAnimationFrame		||
	window.oRequestAnimationFrame		||
	window.msRequestAnimationFrame		||
	function (callback) { window.setTimeout(callback, 1000 / 60); };

var utils = (function () {
	var me = {};

	var _elementStyle = document.createElement('div').style;
	var _vendor = (function () {
		var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
			transform,
			i = 0,
			l = vendors.length;

		for ( ; i < l; i++ ) {
			transform = vendors[i] + 'ransform';
			if ( transform in _elementStyle ) return vendors[i].substr(0, vendors[i].length-1);
		}

		return false;
	})();

	function _prefixStyle (style) {
		if ( _vendor === false ) return false;
		if ( _vendor === '' ) return style;
		return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
	}

	me.getTime = Date.now || function getTime () { return new Date().getTime(); };

	me.extend = function (target, obj) {
		for ( var i in obj ) {
			target[i] = obj[i];
		}
	};

	me.addEvent = function (el, type, fn, capture) {
		el.addEventListener(type, fn, !!capture);
	};

	me.removeEvent = function (el, type, fn, capture) {
		el.removeEventListener(type, fn, !!capture);
	};

	me.momentum = function (current, start, time, lowerMargin, wrapperSize) {
		var distance = current - start,
			speed = Math.abs(distance) / time,
			destination,
			duration,
			deceleration = 0.0006;

		destination = current + ( speed * speed ) / ( 2 * deceleration ) * ( distance < 0 ? -1 : 1 );
		duration = speed / deceleration;

		if ( destination < lowerMargin ) {
			destination = wrapperSize ? lowerMargin - ( wrapperSize / 2.5 * ( speed / 8 ) ) : lowerMargin;
			distance = Math.abs(destination - current);
			duration = distance / speed;
		} else if ( destination > 0 ) {
			destination = wrapperSize ? wrapperSize / 2.5 * ( speed / 8 ) : 0;
			distance = Math.abs(current) + destination;
			duration = distance / speed;
		}

		return {
			destination: Math.round(destination),
			duration: duration
		};
	};

	var _transform = _prefixStyle('transform');

	me.extend(me, {
		hasTransform: _transform !== false,
		hasPerspective: _prefixStyle('perspective') in _elementStyle,
		hasTouch: 'ontouchstart' in window,
		hasPointer: navigator.msPointerEnabled,
		hasTransition: _prefixStyle('transition') in _elementStyle
	});

	me.isAndroidBrowser = /Android/.test(window.navigator.appVersion) && /Version\/\d/.test(window.navigator.appVersion);

	me.extend(me.style = {}, {
		transform: _transform,
		transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
		transitionDuration: _prefixStyle('transitionDuration'),
		transformOrigin: _prefixStyle('transformOrigin')
	});

	me.hasClass = function (e, c) {
		var re = new RegExp("(^|\\s)" + c + "(\\s|$)");
		return re.test(e.className);
	};

	me.addClass = function (e, c) {
		if ( me.hasClass(e, c) ) {
			return;
		}

		var newclass = e.className.split(' ');
		newclass.push(c);
		e.className = newclass.join(' ');
	};

	me.removeClass = function (e, c) {
		if ( !me.hasClass(e, c) ) {
			return;
		}

		var re = new RegExp("(^|\\s)" + c + "(\\s|$)", 'g');
		e.className = e.className.replace(re, ' ');
	};

	me.offset = function (el) {
		var left = -el.offsetLeft,
			top = -el.offsetTop;

		// jshint -W084
		while (el = el.offsetParent) {
			left -= el.offsetLeft;
			top -= el.offsetTop;
		}
		// jshint +W084

		return {
			left: left,
			top: top
		};
	};

	me.preventDefaultException = function (el, exceptions) {
		for ( var i in exceptions ) {
			if ( exceptions[i].test(el[i]) ) {
				return true;
			}
		}

		return false;
	};

	me.extend(me.eventType = {}, {
		touchstart: 1,
		touchmove: 1,
		touchend: 1,

		mousedown: 2,
		mousemove: 2,
		mouseup: 2,

		MSPointerDown: 3,
		MSPointerMove: 3,
		MSPointerUp: 3
	});

	me.extend(me.ease = {}, {
		quadratic: {
			style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
			fn: function (k) {
				return k * ( 2 - k );
			}
		},
		circular: {
			style: 'cubic-bezier(0.1, 0.57, 0.1, 1)',	// Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
			fn: function (k) {
				return Math.sqrt( 1 - ( --k * k ) );
			}
		},
		back: {
			style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
			fn: function (k) {
				var b = 4;
				return ( k = k - 1 ) * k * ( ( b + 1 ) * k + b ) + 1;
			}
		},
		bounce: {
			style: '',
			fn: function (k) {
				if ( ( k /= 1 ) < ( 1 / 2.75 ) ) {
					return 7.5625 * k * k;
				} else if ( k < ( 2 / 2.75 ) ) {
					return 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;
				} else if ( k < ( 2.5 / 2.75 ) ) {
					return 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;
				} else {
					return 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;
				}
			}
		},
		elastic: {
			style: '',
			fn: function (k) {
				var f = 0.22,
					e = 0.4;

				if ( k === 0 ) { return 0; }
				if ( k == 1 ) { return 1; }

				return ( e * Math.pow( 2, - 10 * k ) * Math.sin( ( k - f / 4 ) * ( 2 * Math.PI ) / f ) + 1 );
			}
		}
	});

	me.tap = function (e, eventName) {
		var ev = document.createEvent('Event');
		ev.initEvent(eventName, true, true);
		ev.pageX = e.pageX;
		ev.pageY = e.pageY;
		e.target.dispatchEvent(ev);
	};

	me.click = function (e) {
		var target = e.target,
			ev;

		if (target.tagName != 'SELECT' && target.tagName != 'INPUT' && target.tagName != 'TEXTAREA') {
			ev = document.createEvent('MouseEvents');
			ev.initMouseEvent('click', true, true, e.view, 1,
				target.screenX, target.screenY, target.clientX, target.clientY,
				e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,
				0, null);

			ev._constructed = true;
			target.dispatchEvent(ev);
		}
	};

	return me;
})();

function IScroll (el, options) {
	this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;
	this.scroller = this.wrapper.children[0];
	this.scrollerStyle = this.scroller.style;		// cache style for better performance

	this.options = {

		resizeIndicator: true,

		mouseWheelSpeed: 20,

		snapThreshold: 0.334,

// INSERT POINT: OPTIONS 

		startX: 0,
		startY: 0,
		scrollY: true,
		directionLockThreshold: 5,
		momentum: true,

		bounce: true,
		bounceTime: 600,
		bounceEasing: '',

		preventDefault: true,
		preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ },

		HWCompositing: true,
		useTransition: true,
		useTransform: true
	};

	for ( var i in options ) {
		this.options[i] = options[i];
	}

	// Normalize options
	this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';

	this.options.useTransition = utils.hasTransition && this.options.useTransition;
	this.options.useTransform = utils.hasTransform && this.options.useTransform;

	this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;
	this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;

	// If you want eventPassthrough I have to lock one of the axes
	this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;
	this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;

	// With eventPassthrough we also need lockDirection mechanism
	this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
	this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;

	this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;

	this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;

	if ( this.options.tap === true ) {
		this.options.tap = 'tap';
	}

	this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;

// INSERT POINT: NORMALIZATION

	// Some defaults	
	this.x = 0;
	this.y = 0;
	this.directionX = 0;
	this.directionY = 0;
	this._events = {};

// INSERT POINT: DEFAULTS

	this._init();
	this.refresh();

	this.scrollTo(this.options.startX, this.options.startY);
	this.enable();
}

IScroll.prototype = {
	version: '5.0.6',

	_init: function () {
		this._initEvents();

		if ( this.options.scrollbars || this.options.indicators ) {
			this._initIndicators();
		}

		if ( this.options.mouseWheel ) {
			this._initWheel();
		}

		if ( this.options.snap ) {
			this._initSnap();
		}

		if ( this.options.keyBindings ) {
			this._initKeys();
		}

// INSERT POINT: _init

	},

	destroy: function () {
		this._initEvents(true);

		this._execEvent('destroy');
	},

	_transitionEnd: function (e) {
		if ( e.target != this.scroller ) {
			return;
		}

		this._transitionTime(0);
		if ( !this.resetPosition(this.options.bounceTime) ) {
			this._execEvent('scrollEnd');
		}
	},

	_start: function (e) {
		// React to left mouse button only
		if ( utils.eventType[e.type] != 1 ) {
			if ( e.button !== 0 ) {
				return;
			}
		}

		if ( !this.enabled || (this.initiated && utils.eventType[e.type] !== this.initiated) ) {
			return;
		}

		if ( this.options.preventDefault && !utils.isAndroidBrowser && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
			e.preventDefault();		// This seems to break default Android browser
		}

		var point = e.touches ? e.touches[0] : e,
			pos;

		this.initiated	= utils.eventType[e.type];
		this.moved		= false;
		this.distX		= 0;
		this.distY		= 0;
		this.directionX = 0;
		this.directionY = 0;
		this.directionLocked = 0;

		this._transitionTime();

		this.isAnimating = false;
		this.startTime = utils.getTime();

		if ( this.options.useTransition && this.isInTransition ) {
			pos = this.getComputedPosition();

			this._translate(Math.round(pos.x), Math.round(pos.y));
			this._execEvent('scrollEnd');
			this.isInTransition = false;
		}

		this.startX    = this.x;
		this.startY    = this.y;
		this.absStartX = this.x;
		this.absStartY = this.y;
		this.pointX    = point.pageX;
		this.pointY    = point.pageY;

		this._execEvent('beforeScrollStart');
	},

	_move: function (e) {
		if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
			return;
		}

		if ( this.options.preventDefault ) {	// increases performance on Android? TODO: check!
			e.preventDefault();
		}

		var point		= e.touches ? e.touches[0] : e,
			deltaX		= point.pageX - this.pointX,
			deltaY		= point.pageY - this.pointY,
			timestamp	= utils.getTime(),
			newX, newY,
			absDistX, absDistY;

		this.pointX		= point.pageX;
		this.pointY		= point.pageY;

		this.distX		+= deltaX;
		this.distY		+= deltaY;
		absDistX		= Math.abs(this.distX);
		absDistY		= Math.abs(this.distY);

		// We need to move at least 10 pixels for the scrolling to initiate
		if ( timestamp - this.endTime > 300 && (absDistX < 10 && absDistY < 10) ) {
			return;
		}

		// If you are scrolling in one direction lock the other
		if ( !this.directionLocked && !this.options.freeScroll ) {
			if ( absDistX > absDistY + this.options.directionLockThreshold ) {
				this.directionLocked = 'h';		// lock horizontally
			} else if ( absDistY >= absDistX + this.options.directionLockThreshold ) {
				this.directionLocked = 'v';		// lock vertically
			} else {
				this.directionLocked = 'n';		// no lock
			}
		}

		if ( this.directionLocked == 'h' ) {
			if ( this.options.eventPassthrough == 'vertical' ) {
				e.preventDefault();
			} else if ( this.options.eventPassthrough == 'horizontal' ) {
				this.initiated = false;
				return;
			}

			deltaY = 0;
		} else if ( this.directionLocked == 'v' ) {
			if ( this.options.eventPassthrough == 'horizontal' ) {
				e.preventDefault();
			} else if ( this.options.eventPassthrough == 'vertical' ) {
				this.initiated = false;
				return;
			}

			deltaX = 0;
		}

		deltaX = this.hasHorizontalScroll ? deltaX : 0;
		deltaY = this.hasVerticalScroll ? deltaY : 0;

		newX = this.x + deltaX;
		newY = this.y + deltaY;

		// Slow down if outside of the boundaries
		if ( newX > 0 || newX < this.maxScrollX ) {
			newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
		}
		if ( newY > 0 || newY < this.maxScrollY ) {
			newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
		}

		this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
		this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;

		if ( !this.moved ) {
			this._execEvent('scrollStart');
		}

		this.moved = true;

		this._translate(newX, newY);

/* REPLACE START: _move */

		if ( timestamp - this.startTime > 300 ) {
			this.startTime = timestamp;
			this.startX = this.x;
			this.startY = this.y;
		}

		this._execEvent('scroll');
/* REPLACE END: _move */

	},

	_end: function (e) {
		if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
			return;
		}

		if ( this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
			e.preventDefault();
		}

		var point = e.changedTouches ? e.changedTouches[0] : e,
			momentumX,
			momentumY,
			duration = utils.getTime() - this.startTime,
			newX = Math.round(this.x),
			newY = Math.round(this.y),
			distanceX = Math.abs(newX - this.startX),
			distanceY = Math.abs(newY - this.startY),
			time = 0,
			easing = '';

		this.scrollTo(newX, newY);	// ensures that the last position is rounded

		this.isInTransition = 0;
		this.initiated = 0;
		this.endTime = utils.getTime();

		// reset if we are outside of the boundaries
		if ( this.resetPosition(this.options.bounceTime) ) {
			return;
		}

		// we scrolled less than 10 pixels
		if ( !this.moved ) {
			if ( this.options.tap ) {
				utils.tap(e, this.options.tap);
			}

			if ( this.options.click ) {
				utils.click(e);
			}

			return;
		}

		if ( this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100 ) {
			this._execEvent('flick');
			return;
		}

		// start momentum animation if needed
		if ( this.options.momentum && duration < 300 ) {
			momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0) : { destination: newX, duration: 0 };
			momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0) : { destination: newY, duration: 0 };
			newX = momentumX.destination;
			newY = momentumY.destination;
			time = Math.max(momentumX.duration, momentumY.duration);
			this.isInTransition = 1;
		}


		if ( this.options.snap ) {
			var snap = this._nearestSnap(newX, newY);
			this.currentPage = snap;
			time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(newX - snap.x), 1000),
						Math.min(Math.abs(newY - snap.y), 1000)
					), 300);
			newX = snap.x;
			newY = snap.y;

			this.directionX = 0;
			this.directionY = 0;
			easing = this.options.bounceEasing;
		}

// INSERT POINT: _end

		if ( newX != this.x || newY != this.y ) {
			// change easing function when scroller goes out of the boundaries
			if ( newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY ) {
				easing = utils.ease.quadratic;
			}

			this.scrollTo(newX, newY, time, easing);
			return;
		}

		this._execEvent('scrollEnd');
	},

	_resize: function () {
		var that = this;

		clearTimeout(this.resizeTimeout);

		this.resizeTimeout = setTimeout(function () {
			that.refresh();
		}, this.options.resizePolling);
	},

	resetPosition: function (time) {
		var x = this.x,
			y = this.y;

		time = time || 0;

		if ( !this.hasHorizontalScroll || this.x > 0 ) {
			x = 0;
		} else if ( this.x < this.maxScrollX ) {
			x = this.maxScrollX;
		}

		if ( !this.hasVerticalScroll || this.y > 0 ) {
			y = 0;
		} else if ( this.y < this.maxScrollY ) {
			y = this.maxScrollY;
		}

		if ( x == this.x && y == this.y ) {
			return false;
		}

		this.scrollTo(x, y, time, this.options.bounceEasing);

		return true;
	},

	disable: function () {
		this.enabled = false;
	},

	enable: function () {
		this.enabled = true;
	},

	refresh: function () {
		var rf = this.wrapper.offsetHeight;		// Force reflow

		this.wrapperWidth	= this.wrapper.clientWidth;
		this.wrapperHeight	= this.wrapper.clientHeight;

/* REPLACE START: refresh */

		this.scrollerWidth	= this.scroller.offsetWidth;
		this.scrollerHeight	= this.scroller.offsetHeight;

/* REPLACE END: refresh */

		this.maxScrollX		= this.wrapperWidth - this.scrollerWidth;
		this.maxScrollY		= this.wrapperHeight - this.scrollerHeight;

		this.hasHorizontalScroll	= this.options.scrollX && this.maxScrollX < 0;
		this.hasVerticalScroll		= this.options.scrollY && this.maxScrollY < 0;

		if ( !this.hasHorizontalScroll ) {
			this.maxScrollX = 0;
			this.scrollerWidth = this.wrapperWidth;
		}

		if ( !this.hasVerticalScroll ) {
			this.maxScrollY = 0;
			this.scrollerHeight = this.wrapperHeight;
		}

		this.endTime = 0;
		this.directionX = 0;
		this.directionY = 0;

		this.wrapperOffset = utils.offset(this.wrapper);

		this._execEvent('refresh');

		this.resetPosition();

// INSERT POINT: _refresh

	},

	on: function (type, fn) {
		if ( !this._events[type] ) {
			this._events[type] = [];
		}

		this._events[type].push(fn);
	},

	_execEvent: function (type) {
		if ( !this._events[type] ) {
			return;
		}

		var i = 0,
			l = this._events[type].length;

		if ( !l ) {
			return;
		}

		for ( ; i < l; i++ ) {
			this._events[type][i].call(this);
		}
	},

	scrollBy: function (x, y, time, easing) {
		x = this.x + x;
		y = this.y + y;
		time = time || 0;

		this.scrollTo(x, y, time, easing);
	},

	scrollTo: function (x, y, time, easing) {
		easing = easing || utils.ease.circular;

		if ( !time || (this.options.useTransition && easing.style) ) {
			this._transitionTimingFunction(easing.style);
			this._transitionTime(time);
			this._translate(x, y);
		} else {
			this._animate(x, y, time, easing.fn);
		}
		this._execEvent('scroll');
	},

	scrollToElement: function (el, time, offsetX, offsetY, easing) {
		el = el.nodeType ? el : this.scroller.querySelector(el);

		if ( !el ) {
			return;
		}

		var pos = utils.offset(el);

		pos.left -= this.wrapperOffset.left;
		pos.top  -= this.wrapperOffset.top;

		// if offsetX/Y are true we center the element to the screen
		if ( offsetX === true ) {
			offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
		}
		if ( offsetY === true ) {
			offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
		}

		pos.left -= offsetX || 0;
		pos.top  -= offsetY || 0;

		pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
		pos.top  = pos.top  > 0 ? 0 : pos.top  < this.maxScrollY ? this.maxScrollY : pos.top;

		time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x-pos.left), Math.abs(this.y-pos.top)) : time;

		this.scrollTo(pos.left, pos.top, time, easing);
	},

	_transitionTime: function (time) {
		time = time || 0;
		this.scrollerStyle[utils.style.transitionDuration] = time + 'ms';


		if ( this.indicators ) {
			for ( var i = this.indicators.length; i--; ) {
				this.indicators[i].transitionTime(time);
			}
		}


// INSERT POINT: _transitionTime

	},

	_transitionTimingFunction: function (easing) {
		this.scrollerStyle[utils.style.transitionTimingFunction] = easing;


		if ( this.indicators ) {
			for ( var i = this.indicators.length; i--; ) {
				this.indicators[i].transitionTimingFunction(easing);
			}
		}


// INSERT POINT: _transitionTimingFunction

	},

	_translate: function (x, y) {
		if ( this.options.useTransform ) {

/* REPLACE START: _translate */

			this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;

/* REPLACE END: _translate */

		} else {
			x = Math.round(x);
			y = Math.round(y);
			this.scrollerStyle.left = x + 'px';
			this.scrollerStyle.top = y + 'px';
		}

		this.x = x;
		this.y = y;


	if ( this.indicators ) {
		for ( var i = this.indicators.length; i--; ) {
			this.indicators[i].updatePosition();
		}
	}


// INSERT POINT: _translate

	},

	_initEvents: function (remove) {
		var eventType = remove ? utils.removeEvent : utils.addEvent,
			target = this.options.bindToWrapper ? this.wrapper : window;

		eventType(window, 'orientationchange', this);
		eventType(window, 'resize', this);

		if ( this.options.click ) {
			eventType(this.wrapper, 'click', this, true);
		}

		if ( !this.options.disableMouse ) {
			eventType(this.wrapper, 'mousedown', this);
			eventType(target, 'mousemove', this);
			eventType(target, 'mousecancel', this);
			eventType(target, 'mouseup', this);
		}

		if ( utils.hasPointer && !this.options.disablePointer ) {
			if (window.PointerEvent) {
				eventType(this.wrapper, 'pointerdown', this);
				eventType(target, 'pointermove', this);
				eventType(target, 'pointercancel', this);
				eventType(target, 'pointerup', this);
				}
			else if (window.MSPointerEvent) {
				eventType(this.wrapper, 'MSPointerDown', this);
				eventType(target, 'MSPointerMove', this);
				eventType(target, 'MSPointerCancel', this);
				eventType(target, 'MSPointerUp', this);
			}
		}

		if ( utils.hasTouch && !this.options.disableTouch ) {
			eventType(this.wrapper, 'touchstart', this);
			eventType(target, 'touchmove', this);
			eventType(target, 'touchcancel', this);
			eventType(target, 'touchend', this);
		}

		eventType(this.scroller, 'transitionend', this);
		eventType(this.scroller, 'webkitTransitionEnd', this);
		eventType(this.scroller, 'oTransitionEnd', this);
		eventType(this.scroller, 'MSTransitionEnd', this);
	},

	getComputedPosition: function () {
		var matrix = window.getComputedStyle(this.scroller, null),
			x, y;

		if ( this.options.useTransform ) {
			matrix = matrix[utils.style.transform].split(')')[0].split(', ');
			x = +(matrix[12] || matrix[4]);
			y = +(matrix[13] || matrix[5]);
		} else {
			x = +matrix.left.replace(/[^-\d]/g, '');
			y = +matrix.top.replace(/[^-\d]/g, '');
		}

		return { x: x, y: y };
	},

	_initIndicators: function () {
		var interactive = this.options.interactiveScrollbars,
			defaultScrollbars = typeof this.options.scrollbars != 'object',
			customStyle = typeof this.options.scrollbars != 'string',
			indicators = [],
			indicator;

		this.indicators = [];

		if ( this.options.scrollbars ) {
			// Vertical scrollbar
			if ( this.options.scrollY ) {
				indicator = {
					el: createDefaultScrollbar('v', interactive, this.options.scrollbars),
					interactive: interactive,
					defaultScrollbars: true,
					customStyle: customStyle,
					resize: this.options.resizeIndicator,
					listenX: false
				};

				this.wrapper.appendChild(indicator.el);
				indicators.push(indicator);
			}

			// Horizontal scrollbar
			if ( this.options.scrollX ) {
				indicator = {
					el: createDefaultScrollbar('h', interactive, this.options.scrollbars),
					interactive: interactive,
					defaultScrollbars: true,
					customStyle: customStyle,
					resize: this.options.resizeIndicator,
					listenY: false
				};

				this.wrapper.appendChild(indicator.el);
				indicators.push(indicator);
			}
		}

		if ( this.options.indicators ) {
			// works fine for arrays and non-arrays
			indicators = indicators.concat(this.options.indicators);
		}

		for ( var i = indicators.length; i--; ) {
			this.indicators[i] = new Indicator(this, indicators[i]);
		}

		this.on('refresh', function () {
			if ( this.indicators ) {
				for ( var i = this.indicators.length; i--; ) {
					this.indicators[i].refresh();
				}
			}
		});

		this.on('destroy', function () {
			if ( this.indicators ) {
				for ( var i = this.indicators.length; i--; ) {
					this.indicators[i].destroy();
				}
			}

			delete this.indicators;
		});
	},

	_initWheel: function () {
		utils.addEvent(this.wrapper, 'mousewheel', this);
		utils.addEvent(this.wrapper, 'DOMMouseScroll', this);

		this.on('destroy', function () {
			utils.removeEvent(this.wrapper, 'mousewheel', this);
			utils.removeEvent(this.wrapper, 'DOMMouseScroll', this);
		});
	},

	_wheel: function (e) {
		if ( !this.enabled ) {
			return;
		}

		var wheelDeltaX, wheelDeltaY,
			newX, newY,
			that = this;

		// Execute the scrollEnd event after 400ms the wheel stopped scrolling
		clearTimeout(this.wheelTimeout);
		this.wheelTimeout = setTimeout(function () {
			that._execEvent('scrollEnd');
		}, 400);

		if ( 'wheelDeltaX' in e ) {
			wheelDeltaX = e.wheelDeltaX / 120;
			wheelDeltaY = e.wheelDeltaY / 120;
		} else if ( 'wheelDelta' in e ) {
			wheelDeltaX = wheelDeltaY = e.wheelDelta / 120;
			// Scroll just one direction instead of diagonally, in case of both scroll directions active.
			if (e.shiftKey) {
				wheelDeltaY = 0;
			} else {
				wheelDeltaX = 0;
			}
		} else if ( 'detail' in e ) {
			wheelDeltaX = wheelDeltaY = -e.detail / 3;
			// Scroll just one direction instead of diagonally, in case of both scroll directions active.
			if (e.shiftKey) {
				wheelDeltaY = 0;
			} else {
				wheelDeltaX = 0;
			}
		} else {
			return;
		}

		wheelDeltaX *= this.options.mouseWheelSpeed;
		wheelDeltaY *= this.options.mouseWheelSpeed;

		if ( !this.hasVerticalScroll ) {
			wheelDeltaX = wheelDeltaY;
			wheelDeltaY = 0;
		}

		if ( this.options.snap ) {
			newX = this.currentPage.pageX;
			newY = this.currentPage.pageY;

			if ( wheelDeltaX > 0 ) {
				newX--;
			} else if ( wheelDeltaX < 0 ) {
				newX++;
			}

			if ( wheelDeltaY > 0 ) {
				newY--;
			} else if ( wheelDeltaY < 0 ) {
				newY++;
			}

			this.goToPage(newX, newY);

			return;
		}

		newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX * this.options.invertWheelDirection : 0);
		newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY * this.options.invertWheelDirection : 0);

		if ( newX > 0 ) {
			newX = 0;
		} else if ( newX < this.maxScrollX ) {
			newX = this.maxScrollX;
		}

		if ( newY > 0 ) {
			newY = 0;
		} else if ( newY < this.maxScrollY ) {
			newY = this.maxScrollY;
		}

		if (newX !== this.x || newY !== this.y) {
			e.preventDefault();
		}
		this.scrollTo(newX, newY, 0);

// INSERT POINT: _wheel
	},

	_initSnap: function () {
		this.currentPage = {};

		if ( typeof this.options.snap == 'string' ) {
			this.options.snap = this.scroller.querySelectorAll(this.options.snap);
		}

		this.on('refresh', function () {
			var i = 0, l,
				m = 0, n,
				cx, cy,
				x = 0, y,
				stepX = this.options.snapStepX || this.wrapperWidth,
				stepY = this.options.snapStepY || this.wrapperHeight,
				el;

			this.pages = [];

			if ( !this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight ) {
				return;
			}

			if ( this.options.snap === true ) {
				cx = Math.round( stepX / 2 );
				cy = Math.round( stepY / 2 );

				while ( x > -this.scrollerWidth ) {
					this.pages[i] = [];
					l = 0;
					y = 0;

					while ( y > -this.scrollerHeight ) {
						this.pages[i][l] = {
							x: Math.max(x, this.maxScrollX),
							y: Math.max(y, this.maxScrollY),
							width: stepX,
							height: stepY,
							cx: x - cx,
							cy: y - cy
						};

						y -= stepY;
						l++;
					}

					x -= stepX;
					i++;
				}
			} else {
				el = this.options.snap;
				l = el.length;
				n = -1;

				for ( ; i < l; i++ ) {
					if ( i === 0 || el[i].offsetLeft <= el[i-1].offsetLeft ) {
						m = 0;
						n++;
					}

					if ( !this.pages[m] ) {
						this.pages[m] = [];
					}

					x = Math.max(-el[i].offsetLeft, this.maxScrollX);
					y = Math.max(-el[i].offsetTop, this.maxScrollY);
					cx = x - Math.round(el[i].offsetWidth / 2);
					cy = y - Math.round(el[i].offsetHeight / 2);

					this.pages[m][n] = {
						x: x,
						y: y,
						width: el[i].offsetWidth,
						height: el[i].offsetHeight,
						cx: cx,
						cy: cy
					};

					if ( x > this.maxScrollX ) {
						m++;
					}
				}
			}

			this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);

			// Update snap threshold if needed
			if ( this.options.snapThreshold % 1 === 0 ) {
				this.snapThresholdX = this.options.snapThreshold;
				this.snapThresholdY = this.options.snapThreshold;
			} else {
				this.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);
				this.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);
			}
		});

		this.on('flick', function () {
			var time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(this.x - this.startX), 1000),
						Math.min(Math.abs(this.y - this.startY), 1000)
					), 300);

			this.goToPage(
				this.currentPage.pageX + this.directionX,
				this.currentPage.pageY + this.directionY,
				time
			);
		});
	},

	_nearestSnap: function (x, y) {
		if ( !this.pages.length ) {
			return { x: 0, y: 0, pageX: 0, pageY: 0 };
		}

		var i = 0,
			l = this.pages.length,
			m = 0;

		// Check if we exceeded the snap threshold
		if ( Math.abs(x - this.absStartX) < this.snapThresholdX &&
			Math.abs(y - this.absStartY) < this.snapThresholdY ) {
			return this.currentPage;
		}

		if ( x > 0 ) {
			x = 0;
		} else if ( x < this.maxScrollX ) {
			x = this.maxScrollX;
		}

		if ( y > 0 ) {
			y = 0;
		} else if ( y < this.maxScrollY ) {
			y = this.maxScrollY;
		}

		for ( ; i < l; i++ ) {
			if ( x >= this.pages[i][0].cx ) {
				x = this.pages[i][0].x;
				break;
			}
		}

		l = this.pages[i].length;

		for ( ; m < l; m++ ) {
			if ( y >= this.pages[0][m].cy ) {
				y = this.pages[0][m].y;
				break;
			}
		}

		if ( i == this.currentPage.pageX ) {
			i += this.directionX;

			if ( i < 0 ) {
				i = 0;
			} else if ( i >= this.pages.length ) {
				i = this.pages.length - 1;
			}

			x = this.pages[i][0].x;
		}

		if ( m == this.currentPage.pageY ) {
			m += this.directionY;

			if ( m < 0 ) {
				m = 0;
			} else if ( m >= this.pages[0].length ) {
				m = this.pages[0].length - 1;
			}

			y = this.pages[0][m].y;
		}

		return {
			x: x,
			y: y,
			pageX: i,
			pageY: m
		};
	},

	goToPage: function (x, y, time, easing) {
		easing = easing || this.options.bounceEasing;

		if ( x >= this.pages.length ) {
			x = this.pages.length - 1;
		} else if ( x < 0 ) {
			x = 0;
		}

		if ( y >= this.pages[x].length ) {
			y = this.pages[x].length - 1;
		} else if ( y < 0 ) {
			y = 0;
		}

		var posX = this.pages[x][y].x,
			posY = this.pages[x][y].y;

		time = time === undefined ? this.options.snapSpeed || Math.max(
			Math.max(
				Math.min(Math.abs(posX - this.x), 1000),
				Math.min(Math.abs(posY - this.y), 1000)
			), 300) : time;

		this.currentPage = {
			x: posX,
			y: posY,
			pageX: x,
			pageY: y
		};

		this.scrollTo(posX, posY, time, easing);
	},

	next: function (time, easing) {
		var x = this.currentPage.pageX,
			y = this.currentPage.pageY;

		x++;

		if ( x >= this.pages.length && this.hasVerticalScroll ) {
			x = 0;
			y++;
		}

		this.goToPage(x, y, time, easing);
	},

	prev: function (time, easing) {
		var x = this.currentPage.pageX,
			y = this.currentPage.pageY;

		x--;

		if ( x < 0 && this.hasVerticalScroll ) {
			x = 0;
			y--;
		}

		this.goToPage(x, y, time, easing);
	},

	_initKeys: function (e) {
		// default key bindings
		var keys = {
			pageUp: 33,
			pageDown: 34,
			end: 35,
			home: 36,
			left: 37,
			up: 38,
			right: 39,
			down: 40
		};
		var i;

		// if you give me characters I give you keycode
		if ( typeof this.options.keyBindings == 'object' ) {
			for ( i in this.options.keyBindings ) {
				if ( typeof this.options.keyBindings[i] == 'string' ) {
					this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);
				}
			}
		} else {
			this.options.keyBindings = {};
		}

		for ( i in keys ) {
			this.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];
		}

		utils.addEvent(window, 'keydown', this);

		this.on('destroy', function () {
			utils.removeEvent(window, 'keydown', this);
		});
	},

	_key: function (e) {
		if ( !this.enabled ) {
			return;
		}

		var snap = this.options.snap,	// we are using this alot, better to cache it
			newX = snap ? this.currentPage.pageX : this.x,
			newY = snap ? this.currentPage.pageY : this.y,
			now = utils.getTime(),
			prevTime = this.keyTime || 0,
			acceleration = 0.250,
			pos;

		if ( this.options.useTransition && this.isInTransition ) {
			pos = this.getComputedPosition();

			this._translate(Math.round(pos.x), Math.round(pos.y));
			this.isInTransition = false;
		}

		this.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;

		switch ( e.keyCode ) {
			case this.options.keyBindings.pageUp:
				if ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {
					newX += snap ? 1 : this.wrapperWidth;
				} else {
					newY += snap ? 1 : this.wrapperHeight;
				}
				break;
			case this.options.keyBindings.pageDown:
				if ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {
					newX -= snap ? 1 : this.wrapperWidth;
				} else {
					newY -= snap ? 1 : this.wrapperHeight;
				}
				break;
			case this.options.keyBindings.end:
				newX = snap ? this.pages.length-1 : this.maxScrollX;
				newY = snap ? this.pages[0].length-1 : this.maxScrollY;
				break;
			case this.options.keyBindings.home:
				newX = 0;
				newY = 0;
				break;
			case this.options.keyBindings.left:
				newX += snap ? -1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.up:
				newY += snap ? 1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.right:
				newX -= snap ? -1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.down:
				newY -= snap ? 1 : 5 + this.keyAcceleration>>0;
				break;
			default:
				return;
		}

		if ( snap ) {
			this.goToPage(newX, newY);
			return;
		}

		if ( newX > 0 ) {
			newX = 0;
			this.keyAcceleration = 0;
		} else if ( newX < this.maxScrollX ) {
			newX = this.maxScrollX;
			this.keyAcceleration = 0;
		}

		if ( newY > 0 ) {
			newY = 0;
			this.keyAcceleration = 0;
		} else if ( newY < this.maxScrollY ) {
			newY = this.maxScrollY;
			this.keyAcceleration = 0;
		}

		this.scrollTo(newX, newY, 0);

		this.keyTime = now;
	},

	_animate: function (destX, destY, duration, easingFn) {
		var that = this,
			startX = this.x,
			startY = this.y,
			startTime = utils.getTime(),
			destTime = startTime + duration;

		function step () {
			var now = utils.getTime(),
				newX, newY,
				easing;

			if ( now >= destTime ) {
				that.isAnimating = false;
				that._translate(destX, destY);

				if ( !that.resetPosition(that.options.bounceTime) ) {
					that._execEvent('scrollEnd');
				}

				return;
			}

			now = ( now - startTime ) / duration;
			easing = easingFn(now);
			newX = ( destX - startX ) * easing + startX;
			newY = ( destY - startY ) * easing + startY;
			that._translate(newX, newY);

			if ( that.isAnimating ) {
				rAF(step);
			}
		}

		this.isAnimating = true;
		step();
	},
	handleEvent: function (e) {
		// Tableau: Hack for using MSPointer events
		// We only want to use pointerType != mouse
		if ((e.type == 'MSPointerDown' || e.type == 'MSPointerMove' 
			|| e.type == 'MSPointerCancel' || e.type == 'MSPointerUp'
			|| e.type == 'pointerdown' || e.type == 'pointermove' 
			|| e.type == 'pointercancel' || e.type == 'pointerup')
			&& (e.pointerType == "mouse" || e.pointerType == 4))
			return;
		//End hack

		switch ( e.type ) {
			case 'touchstart':
			case 'MSPointerDown':
			case 'pointerdown':
			case 'mousedown':
				this._start(e);
				break;
			case 'touchmove':
			case 'MSPointerMove':
			case 'pointermove':
			case 'mousemove':
				this._move(e);
				break;
			case 'touchend':
			case 'MSPointerUp':
			case 'pointerup':
			case 'mouseup':
			case 'touchcancel':
			case 'MSPointerCancel':
			case 'pointercancel':
			case 'mousecancel':
				this._end(e);
				break;
			case 'orientationchange':
			case 'resize':
				this._resize();
				break;
			case 'transitionend':
			case 'webkitTransitionEnd':
			case 'oTransitionEnd':
			case 'MSTransitionEnd':
				this._transitionEnd(e);
				break;
			case 'DOMMouseScroll':
			case 'mousewheel':
				this._wheel(e);
				break;
			case 'keydown':
				this._key(e);
				break;
			case 'click':
				if ( !e._constructed ) {
					e.preventDefault();
					e.stopPropagation();
				}
				break;
		}
	}
};
function createDefaultScrollbar (direction, interactive, type) {
	var scrollbar = document.createElement('div'),
		indicator = document.createElement('div');

	if ( type === true ) {
		scrollbar.style.cssText = 'position:absolute;z-index:9999';
		indicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';
	}

	indicator.className = 'iScrollIndicator';

	if ( direction == 'h' ) {
		if ( type === true ) {
			scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';
			indicator.style.height = '100%';
		}
		scrollbar.className = 'iScrollHorizontalScrollbar';
	} else {
		if ( type === true ) {
			scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';
			indicator.style.width = '100%';
		}
		scrollbar.className = 'iScrollVerticalScrollbar';
	}

	if ( !interactive ) {
		scrollbar.style.pointerEvents = 'none';
	}

	scrollbar.appendChild(indicator);

	return scrollbar;
}

function Indicator (scroller, options) {
	this.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;
	this.indicator = this.wrapper.children[0];
	this.indicatorStyle = this.indicator.style;
	this.scroller = scroller;

	this.options = {
		listenX: true,
		listenY: true,
		interactive: false,
		resize: true,
		defaultScrollbars: false,
		speedRatioX: 0,
		speedRatioY: 0
	};

	for ( var i in options ) {
		this.options[i] = options[i];
	}

	this.sizeRatioX = 1;
	this.sizeRatioY = 1;
	this.maxPosX = 0;
	this.maxPosY = 0;

	if ( this.options.interactive ) {
		if ( !this.options.disableTouch ) {
			utils.addEvent(this.indicator, 'touchstart', this);
			utils.addEvent(window, 'touchend', this);
		}
		if ( !this.options.disablePointer ) {
			if (window.PointerEvent)
			{
				utils.addEvent(this.indicator, 'pointerdown', this);
				utils.addEvent(window, 'pointerup', this);
			}
			else if (window.MSPointerEvent) {
				utils.addEvent(this.indicator, 'MSPointerDown', this);
				utils.addEvent(window, 'MSPointerUp', this);
			}
		}
		if ( !this.options.disableMouse ) {
			utils.addEvent(this.indicator, 'mousedown', this);
			utils.addEvent(window, 'mouseup', this);
		}
	}
}

Indicator.prototype = {
	handleEvent: function (e) {
		switch ( e.type ) {
			case 'touchstart':
			case 'MSPointerDown':
			case 'pointerdown':
			case 'mousedown':
				this._start(e);
				break;
			case 'touchmove':
			case 'MSPointerMove':
			case 'pointermove':
			case 'mousemove':
				this._move(e);
				break;
			case 'touchend':
			case 'MSPointerUp':
			case 'pointerup':
			case 'mouseup':
			case 'touchcancel':
			case 'MSPointerCancel':
			case 'pointercancel':
			case 'mousecancel':
				this._end(e);
				break;
		}
	},

	destroy: function () {
		if ( this.options.interactive ) {
			utils.removeEvent(this.indicator, 'touchstart', this);
			utils.removeEvent(this.indicator, 'MSPointerDown', this);
			utils.removeEvent(this.indicator, 'pointerdown', this);
			utils.removeEvent(this.indicator, 'mousedown', this);

			utils.removeEvent(window, 'touchmove', this);
			utils.removeEvent(window, 'MSPointerMove', this);
			utils.removeEvent(window, 'pointermove', this);
			utils.removeEvent(window, 'mousemove', this);

			utils.removeEvent(window, 'touchend', this);
			utils.removeEvent(window, 'MSPointerUp', this);
			utils.removeEvent(window, 'pointerup', this);
			utils.removeEvent(window, 'mouseup', this);
		}

		if ( this.options.defaultScrollbars ) {
			this.wrapper.parentNode.removeChild(this.wrapper);
		}
	},

	_start: function (e) {
		var point = e.touches ? e.touches[0] : e;

		e.preventDefault();
		e.stopPropagation();

		this.transitionTime(0);

		this.initiated = true;
		this.moved = false;
		this.lastPointX	= point.pageX;
		this.lastPointY	= point.pageY;

		this.startTime	= utils.getTime();

		if ( !this.options.disableTouch ) {
			utils.addEvent(window, 'touchmove', this);
		}
		if (!this.options.disablePointer) {
			if (window.PointerEvent)
			{
				utils.addEvent(window, 'pointermove', this);
			}
			else if (window.MSPointerEvent)
			{
				utils.addEvent(window, 'MSPointerMove', this);
			}
		}
		if ( !this.options.disableMouse ) {
			utils.addEvent(window, 'mousemove', this);
		}

		this.scroller._execEvent('beforeScrollStart');
	},

	_move: function (e) {
		var point = e.touches ? e.touches[0] : e,
			deltaX, deltaY,
			newX, newY,
			timestamp = utils.getTime();

		if ( !this.moved ) {
			this.scroller._execEvent('scrollStart');
		}

		this.moved = true;

		deltaX = point.pageX - this.lastPointX;
		this.lastPointX = point.pageX;

		deltaY = point.pageY - this.lastPointY;
		this.lastPointY = point.pageY;

		newX = this.x + deltaX;
		newY = this.y + deltaY;

		this._pos(newX, newY);

		e.preventDefault();
		e.stopPropagation();
	},

	_end: function (e) {
		if ( !this.initiated ) {
			return;
		}

		this.initiated = false;

		e.preventDefault();
		e.stopPropagation();

		utils.removeEvent(window, 'touchmove', this);
		utils.removeEvent(window, 'MSPointerMove', this);
		utils.removeEvent(window, 'pointermove', this);
		utils.removeEvent(window, 'mousemove', this);

		if ( this.scroller.options.snap ) {
			var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);

			var time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(this.scroller.x - snap.x), 1000),
						Math.min(Math.abs(this.scroller.y - snap.y), 1000)
					), 300);

			if ( this.scroller.x != snap.x || this.scroller.y != snap.y ) {
				this.scroller.directionX = 0;
				this.scroller.directionY = 0;
				this.scroller.currentPage = snap;
				this.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);
			}
		}

		if ( this.moved ) {
			this.scroller._execEvent('scrollEnd');
		}
	},

	transitionTime: function (time) {
		time = time || 0;
		this.indicatorStyle[utils.style.transitionDuration] = time + 'ms';
	},

	transitionTimingFunction: function (easing) {
		this.indicatorStyle[utils.style.transitionTimingFunction] = easing;
	},

	refresh: function () {
		this.transitionTime(0);

		if ( this.options.listenX && !this.options.listenY ) {
			this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';
		} else if ( this.options.listenY && !this.options.listenX ) {
			this.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';
		} else {
			this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';
		}

		if ( this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll ) {
			utils.addClass(this.wrapper, 'iScrollBothScrollbars');
			utils.removeClass(this.wrapper, 'iScrollLoneScrollbar');

			if ( this.options.defaultScrollbars && this.options.customStyle ) {
				if ( this.options.listenX ) {
					this.wrapper.style.right = '8px';
				} else {
					this.wrapper.style.bottom = '8px';
				}
			}
		} else {
			utils.removeClass(this.wrapper, 'iScrollBothScrollbars');
			utils.addClass(this.wrapper, 'iScrollLoneScrollbar');

			if ( this.options.defaultScrollbars && this.options.customStyle ) {
				if ( this.options.listenX ) {
					this.wrapper.style.right = '2px';
				} else {
					this.wrapper.style.bottom = '2px';
				}
			}
		}

		var r = this.wrapper.offsetHeight;	// force refresh

		if ( this.options.listenX ) {
			this.wrapperWidth = this.wrapper.clientWidth;
			if ( this.options.resize ) {
				this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);
				this.indicatorStyle.width = this.indicatorWidth + 'px';
			} else {
				this.indicatorWidth = this.indicator.clientWidth;
			}
			this.maxPosX = this.wrapperWidth - this.indicatorWidth;
			this.sizeRatioX = this.options.speedRatioX || (this.scroller.maxScrollX && (this.maxPosX / this.scroller.maxScrollX));	
		}

		if ( this.options.listenY ) {
			this.wrapperHeight = this.wrapper.clientHeight;
			if ( this.options.resize ) {
				this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);
				this.indicatorStyle.height = this.indicatorHeight + 'px';
			} else {
				this.indicatorHeight = this.indicator.clientHeight;
			}

			this.maxPosY = this.wrapperHeight - this.indicatorHeight;
			this.sizeRatioY = this.options.speedRatioY || (this.scroller.maxScrollY && (this.maxPosY / this.scroller.maxScrollY));
		}

		this.updatePosition();
	},

	updatePosition: function () {
		var x = Math.round(this.sizeRatioX * this.scroller.x) || 0,
			y = Math.round(this.sizeRatioY * this.scroller.y) || 0;

		if ( !this.options.ignoreBoundaries ) {
			if ( x < 0 ) {
				x = 0;
			} else if ( x > this.maxPosX ) {
				x = this.maxPosX;
			}

			if ( y < 0 ) {
				y = 0;
			} else if ( y > this.maxPosY ) {
				y = this.maxPosY;
			}		
		}

		this.x = x;
		this.y = y;

		if ( this.scroller.options.useTransform ) {
			this.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;
		} else {
			this.indicatorStyle.left = x + 'px';
			this.indicatorStyle.top = y + 'px';
		}
	},

	_pos: function (x, y) {
		if ( x < 0 ) {
			x = 0;
		} else if ( x > this.maxPosX ) {
			x = this.maxPosX;
		}

		if ( y < 0 ) {
			y = 0;
		} else if ( y > this.maxPosY ) {
			y = this.maxPosY;
		}

		x = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;
		y = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;

		this.scroller.scrollTo(x, y);
	}
};

IScroll.ease = utils.ease;

return IScroll;

})(window, document, Math);
// END iScroll

// BEGIN reactjs
// Include reactjs inline here. It's not small, but we want to limit the number of file fetching.
/** @license React v16.5.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.React = factory());
}(this, (function () { 'use strict';

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.5.2';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_PLACEHOLDER_TYPE = hasSymbol ? Symbol.for('react.placeholder') : 0xead1;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

// Exports ReactDOM.createRoot


// Experimental error-boundary API that can recover from errors within a single
// render phase

// Suspense
var enableSuspense = false;
// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:


// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.


// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


// Warn about legacy context API


// Gather advanced timing metrics for Profiler subtrees.


// Trace which interactions trigger each commit.
var enableSchedulerTracing = true;

// Only used in www builds.


// Only used in www builds.


// React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function () {};

{
  validateFormat = function (format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error = void 0;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

// Relying on the `invariant()` implementation lets us
// preserve the format and params in the www builds.

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }
    if (condition) {
      return;
    }
    if (typeof console !== 'undefined') {
      var _args$map = args.map(function (item) {
        return '' + item;
      }),
          a = _args$map[0],
          b = _args$map[1],
          c = _args$map[2],
          d = _args$map[3],
          e = _args$map[4],
          f = _args$map[5],
          g = _args$map[6],
          h = _args$map[7];

      var message = 'Warning: ' + format;

      // We intentionally don't use spread (or .apply) because it breaks IE9:
      // https://github.com/facebook/react/issues/13610
      switch (args.length) {
        case 0:
          console.error(message);
          break;
        case 1:
          console.error(message, a);
          break;
        case 2:
          console.error(message, a, b);
          break;
        case 3:
          console.error(message, a, b, c);
          break;
        case 4:
          console.error(message, a, b, c, d);
          break;
        case 5:
          console.error(message, a, b, c, d, e);
          break;
        case 6:
          console.error(message, a, b, c, d, e, f);
          break;
        case 7:
          console.error(message, a, b, c, d, e, f, g);
          break;
        case 8:
          console.error(message, a, b, c, d, e, f, g, h);
          break;
        default:
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
      }
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var _message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(_message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + '.' + callerName;
    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }
    warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};
{
  Object.freeze(emptyObject);
}

/**
 * Base class helpers for the updating state of a component.
 */
function Component(props, context, updater) {
  this.props = props;
  this.context = context;
  // If a component has string refs, we will assign a different object later.
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
Component.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
        return undefined;
      }
    });
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}
ComponentDummy.prototype = Component.prototype;

/**
 * Convenience component with default shallow equality check for sCU.
 */
function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  // If a component has string refs, we will assign a different object later.
  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent;
// Avoid an extra prototype jump for these methods.
objectAssign(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };
  {
    Object.seal(refObject);
  }
  return refObject;
}

/* eslint-disable no-var */

// TODO: Currently there's only a single priority level, Deferred. Will add
// additional priorities.
var DEFERRED_TIMEOUT = 5000;

// Callbacks are stored as a circular, doubly linked list.
var firstCallbackNode = null;

var isPerformingWork = false;

var isHostCallbackScheduled = false;

var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

var timeRemaining;
if (hasNativePerformanceNow) {
  timeRemaining = function () {
    // We assume that if we have a performance timer that the rAF callback
    // gets a performance timer value. Not sure if this is always true.
    var remaining = getFrameDeadline() - performance.now();
    return remaining > 0 ? remaining : 0;
  };
} else {
  timeRemaining = function () {
    // Fallback to Date.now()
    var remaining = getFrameDeadline() - Date.now();
    return remaining > 0 ? remaining : 0;
  };
}

var deadlineObject = {
  timeRemaining: timeRemaining,
  didTimeout: false
};

function ensureHostCallbackIsScheduled() {
  if (isPerformingWork) {
    // Don't schedule work yet; wait until the next time we yield.
    return;
  }
  // Schedule the host callback using the earliest timeout in the list.
  var timesOutAt = firstCallbackNode.timesOutAt;
  if (!isHostCallbackScheduled) {
    isHostCallbackScheduled = true;
  } else {
    // Cancel the existing host callback.
    cancelCallback();
  }
  requestCallback(flushWork, timesOutAt);
}

function flushFirstCallback(node) {
  var flushedNode = firstCallbackNode;

  // Remove the node from the list before calling the callback. That way the
  // list is in a consistent state even if the callback throws.
  var next = firstCallbackNode.next;
  if (firstCallbackNode === next) {
    // This is the last callback in the list.
    firstCallbackNode = null;
    next = null;
  } else {
    var previous = firstCallbackNode.previous;
    firstCallbackNode = previous.next = next;
    next.previous = previous;
  }

  flushedNode.next = flushedNode.previous = null;

  // Now it's safe to call the callback.
  var callback = flushedNode.callback;
  callback(deadlineObject);
}

function flushWork(didTimeout) {
  isPerformingWork = true;
  deadlineObject.didTimeout = didTimeout;
  try {
    if (didTimeout) {
      // Flush all the timed out callbacks without yielding.
      while (firstCallbackNode !== null) {
        // Read the current time. Flush all the callbacks that expire at or
        // earlier than that time. Then read the current time again and repeat.
        // This optimizes for as few performance.now calls as possible.
        var currentTime = getCurrentTime();
        if (firstCallbackNode.timesOutAt <= currentTime) {
          do {
            flushFirstCallback();
          } while (firstCallbackNode !== null && firstCallbackNode.timesOutAt <= currentTime);
          continue;
        }
        break;
      }
    } else {
      // Keep flushing callbacks until we run out of time in the frame.
      if (firstCallbackNode !== null) {
        do {
          flushFirstCallback();
        } while (firstCallbackNode !== null && getFrameDeadline() - getCurrentTime() > 0);
      }
    }
  } finally {
    isPerformingWork = false;
    if (firstCallbackNode !== null) {
      // There's still work remaining. Request another callback.
      ensureHostCallbackIsScheduled(firstCallbackNode);
    } else {
      isHostCallbackScheduled = false;
    }
  }
}

function unstable_scheduleWork(callback, options) {
  var currentTime = getCurrentTime();

  var timesOutAt;
  if (options !== undefined && options !== null && options.timeout !== null && options.timeout !== undefined) {
    // Check for an explicit timeout
    timesOutAt = currentTime + options.timeout;
  } else {
    // Compute an absolute timeout using the default constant.
    timesOutAt = currentTime + DEFERRED_TIMEOUT;
  }

  var newNode = {
    callback: callback,
    timesOutAt: timesOutAt,
    next: null,
    previous: null
  };

  // Insert the new callback into the list, sorted by its timeout.
  if (firstCallbackNode === null) {
    // This is the first callback in the list.
    firstCallbackNode = newNode.next = newNode.previous = newNode;
    ensureHostCallbackIsScheduled(firstCallbackNode);
  } else {
    var next = null;
    var node = firstCallbackNode;
    do {
      if (node.timesOutAt > timesOutAt) {
        // The new callback times out before this one.
        next = node;
        break;
      }
      node = node.next;
    } while (node !== firstCallbackNode);

    if (next === null) {
      // No callback with a later timeout was found, which means the new
      // callback has the latest timeout in the list.
      next = firstCallbackNode;
    } else if (next === firstCallbackNode) {
      // The new callback has the earliest timeout in the entire list.
      firstCallbackNode = newNode;
      ensureHostCallbackIsScheduled(firstCallbackNode);
    }

    var previous = next.previous;
    previous.next = next.previous = newNode;
    newNode.next = next;
    newNode.previous = previous;
  }

  return newNode;
}

function unstable_cancelScheduledWork(callbackNode) {
  var next = callbackNode.next;
  if (next === null) {
    // Already cancelled.
    return;
  }

  if (next === callbackNode) {
    // This is the only scheduled callback. Clear the list.
    firstCallbackNode = null;
  } else {
    // Remove the callback from its position in the list.
    if (callbackNode === firstCallbackNode) {
      firstCallbackNode = next;
    }
    var previous = callbackNode.previous;
    previous.next = next;
    next.previous = previous;
  }

  callbackNode.next = callbackNode.previous = null;
}

// The remaining code is essentially a polyfill for requestIdleCallback. It
// works by scheduling a requestAnimationFrame, storing the time for the start
// of the frame, then scheduling a postMessage which gets scheduled after paint.
// Within the postMessage handler do as much work as possible until time + frame
// rate. By separating the idle call into a separate event tick we ensure that
// layout, paint and other browser work is counted against the available time.
// The frame rate is dynamically adjusted.

// We capture a local reference to any global, in case it gets polyfilled after
// this module is initially evaluated. We want to be using a
// consistent implementation.
var localDate = Date;

// This initialization code may run even on server environments if a component
// just imports ReactDOM (e.g. for findDOMNode). Some environments might not
// have setTimeout or clearTimeout. However, we always expect them to be defined
// on the client. https://github.com/facebook/react/pull/13088
var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;

// We don't expect either of these to necessarily be defined, but we will error
// later if they are missing on the client.
var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;

var getCurrentTime;

// requestAnimationFrame does not run when the tab is in the background. If
// we're backgrounded we prefer for that work to happen so that the page
// continues to load in the background. So we also schedule a 'setTimeout' as
// a fallback.
// TODO: Need a better heuristic for backgrounded work.
var ANIMATION_FRAME_TIMEOUT = 100;
var rAFID;
var rAFTimeoutID;
var requestAnimationFrameWithTimeout = function (callback) {
  // schedule rAF and also a setTimeout
  rAFID = localRequestAnimationFrame(function (timestamp) {
    // cancel the setTimeout
    localClearTimeout(rAFTimeoutID);
    callback(timestamp);
  });
  rAFTimeoutID = localSetTimeout(function () {
    // cancel the requestAnimationFrame
    localCancelAnimationFrame(rAFID);
    callback(getCurrentTime());
  }, ANIMATION_FRAME_TIMEOUT);
};

if (hasNativePerformanceNow) {
  var Performance = performance;
  getCurrentTime = function () {
    return Performance.now();
  };
} else {
  getCurrentTime = function () {
    return localDate.now();
  };
}

var requestCallback;
var cancelCallback;
var getFrameDeadline;

if (typeof window === 'undefined') {
  // If this accidentally gets imported in a non-browser environment, fallback
  // to a naive implementation.
  var timeoutID = -1;
  requestCallback = function (callback, absoluteTimeout) {
    timeoutID = setTimeout(callback, 0, true);
  };
  cancelCallback = function () {
    clearTimeout(timeoutID);
  };
  getFrameDeadline = function () {
    return 0;
  };
} else if (window._schedMock) {
  // Dynamic injection, only for testing purposes.
  var impl = window._schedMock;
  requestCallback = impl[0];
  cancelCallback = impl[1];
  getFrameDeadline = impl[2];
} else {
  if (typeof console !== 'undefined') {
    if (typeof localRequestAnimationFrame !== 'function') {
      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
    if (typeof localCancelAnimationFrame !== 'function') {
      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  var scheduledCallback = null;
  var isIdleScheduled = false;
  var timeoutTime = -1;

  var isAnimationFrameScheduled = false;

  var isPerformingIdleWork = false;

  var frameDeadline = 0;
  // We start out assuming that we run at 30fps but then the heuristic tracking
  // will adjust this value to a faster fps if we get more frequent animation
  // frames.
  var previousFrameTime = 33;
  var activeFrameTime = 33;

  getFrameDeadline = function () {
    return frameDeadline;
  };

  // We use the postMessage trick to defer idle work until after the repaint.
  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
  var idleTick = function (event) {
    if (event.source !== window || event.data !== messageKey) {
      return;
    }

    isIdleScheduled = false;

    var currentTime = getCurrentTime();

    var didTimeout = false;
    if (frameDeadline - currentTime <= 0) {
      // There's no time left in this idle period. Check if the callback has
      // a timeout and whether it's been exceeded.
      if (timeoutTime !== -1 && timeoutTime <= currentTime) {
        // Exceeded the timeout. Invoke the callback even though there's no
        // time left.
        didTimeout = true;
      } else {
        // No timeout.
        if (!isAnimationFrameScheduled) {
          // Schedule another animation callback so we retry later.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
        // Exit without invoking the callback.
        return;
      }
    }

    timeoutTime = -1;
    var callback = scheduledCallback;
    scheduledCallback = null;
    if (callback !== null) {
      isPerformingIdleWork = true;
      try {
        callback(didTimeout);
      } finally {
        isPerformingIdleWork = false;
      }
    }
  };
  // Assumes that we have addEventListener in this environment. Might need
  // something better for old IE.
  window.addEventListener('message', idleTick, false);

  var animationTick = function (rafTime) {
    isAnimationFrameScheduled = false;
    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
      if (nextFrameTime < 8) {
        // Defensive coding. We don't support higher frame rates than 120hz.
        // If we get lower than that, it is probably a bug.
        nextFrameTime = 8;
      }
      // If one frame goes long, then the next one can be short to catch up.
      // If two frames are short in a row, then that's an indication that we
      // actually have a higher frame rate than what we're currently optimizing.
      // We adjust our heuristic dynamically accordingly. For example, if we're
      // running on 120hz display or 90hz VR display.
      // Take the max of the two in case one of them was an anomaly due to
      // missed frame deadlines.
      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
    } else {
      previousFrameTime = nextFrameTime;
    }
    frameDeadline = rafTime + activeFrameTime;
    if (!isIdleScheduled) {
      isIdleScheduled = true;
      window.postMessage(messageKey, '*');
    }
  };

  requestCallback = function (callback, absoluteTimeout) {
    scheduledCallback = callback;
    timeoutTime = absoluteTimeout;
    if (isPerformingIdleWork) {
      // If we're already performing idle work, an error must have been thrown.
      // Don't wait for the next frame. Continue working ASAP, in a new event.
      window.postMessage(messageKey, '*');
    } else if (!isAnimationFrameScheduled) {
      // If rAF didn't already schedule one, we need to schedule a frame.
      // TODO: If this rAF doesn't materialize because the browser throttles, we
      // might want to still have setTimeout trigger rIC as a backup to ensure
      // that we keep performing work.
      isAnimationFrameScheduled = true;
      requestAnimationFrameWithTimeout(animationTick);
    }
  };

  cancelCallback = function () {
    scheduledCallback = null;
    isIdleScheduled = false;
    timeoutTime = -1;
  };
}

var DEFAULT_THREAD_ID = 0;

// Counters used to generate unique IDs.
var interactionIDCounter = 0;
var threadIDCounter = 0;

// Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.
var interactionsRef = null;

// Listener(s) to notify when interactions begin and end.
var subscriberRef = null;

if (enableSchedulerTracing) {
  interactionsRef = {
    current: new Set()
  };
  subscriberRef = {
    current: null
  };
}

function unstable_clear(callback) {
  if (!enableSchedulerTracing) {
    return callback();
  }

  var prevInteractions = interactionsRef.current;
  interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    interactionsRef.current = prevInteractions;
  }
}

function unstable_getCurrent() {
  if (!enableSchedulerTracing) {
    return null;
  } else {
    return interactionsRef.current;
  }
}

function unstable_getThreadID() {
  return ++threadIDCounter;
}

function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback();
  }

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };

  var prevInteractions = interactionsRef.current;

  // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.
  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  interactionsRef.current = interactions;

  var subscriber = subscriberRef.current;
  var returnValue = void 0;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--;

          // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.
          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}

function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback;
  }

  var wrappedInteractions = interactionsRef.current;

  var subscriber = subscriberRef.current;
  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  }

  // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.
  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });

  var hasRun = false;

  function wrapped() {
    var prevInteractions = interactionsRef.current;
    interactionsRef.current = wrappedInteractions;

    subscriber = subscriberRef.current;

    try {
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true;

        // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.
        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;
if (enableSchedulerTracing) {
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}

function unstable_unsubscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null,
  currentDispatcher: null
};

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';
  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');
    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);
        if (match) {
          var pathBeforeSlash = match[1];
          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }
    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }
  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

var Resolved = 1;




function refineResolvedThenable(thenable) {
  return thenable._reactStatus === Resolved ? thenable._reactResult : null;
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }
  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }
  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }
  if (typeof type === 'string') {
    return type;
  }
  switch (type) {
    case REACT_ASYNC_MODE_TYPE:
      return 'AsyncMode';
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';
    case REACT_PORTAL_TYPE:
      return 'Portal';
    case REACT_PROFILER_TYPE:
      return 'Profiler';
    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';
    case REACT_PLACEHOLDER_TYPE:
      return 'Placeholder';
  }
  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';
      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';
      case REACT_FORWARD_REF_TYPE:
        var renderFn = type.render;
        var functionName = renderFn.displayName || renderFn.name || '';
        return type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
    }
    if (typeof type.then === 'function') {
      var thenable = type;
      var resolvedThenable = refineResolvedThenable(thenable);
      if (resolvedThenable) {
        return getComponentName(resolvedThenable);
      }
    }
  }
  return null;
}

var ReactDebugCurrentFrame = {};

var currentlyValidatingElement = null;

function setCurrentlyValidatingElement(element) {
  {
    currentlyValidatingElement = element;
  }
}

{
  // Stack implementation injected by the current renderer.
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = '';

    // Add an extra top frame while an element is being validated
    if (currentlyValidatingElement) {
      var name = getComponentName(currentlyValidatingElement.type);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
    }

    // Delegate to the injected renderer-specific implementation
    var impl = ReactDebugCurrentFrame.getCurrentStack;
    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

var ReactSharedInternals = {
  ReactCurrentOwner: ReactCurrentOwner,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: objectAssign
};

{
  // Re-export the schedule API(s) for UMD bundles.
  // This avoids introducing a dependency on a new UMD global in a minor update,
  // Since that would be a breaking change (e.g. for all existing CodeSandboxes).
  // This re-export is only required for UMD bundles;
  // CJS bundles use the shared NPM package.
  objectAssign(ReactSharedInternals, {
    Schedule: {
      unstable_cancelScheduledWork: unstable_cancelScheduledWork,
      unstable_now: getCurrentTime,
      unstable_scheduleWork: unstable_scheduleWork
    },
    ScheduleTracing: {
      __interactionsRef: interactionsRef,
      __subscriberRef: subscriberRef,
      unstable_clear: unstable_clear,
      unstable_getCurrent: unstable_getCurrent,
      unstable_getThreadID: unstable_getThreadID,
      unstable_subscribe: unstable_subscribe,
      unstable_trace: unstable_trace,
      unstable_unsubscribe: unstable_unsubscribe,
      unstable_wrap: unstable_wrap
    }
  });
}

{
  objectAssign(ReactSharedInternals, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();
    // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown = void 0;
var specialPropRefWarningShown = void 0;

function hasValidRef(config) {
  {
    if (hasOwnProperty$1.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty$1.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    });
    // self and source are DEV only properties.
    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    });
    // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.
    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */
function createElement(type, config, children) {
  var propName = void 0;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }
      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}

/**
 * Return a function that produces ReactElements of a given type.
 * See https://reactjs.org/docs/react-api.html#createfactory
 */


function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
}

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */
function cloneElement(element, config, children) {
  !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;

  var propName = void 0;

  // Original props are copied
  var props = objectAssign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps = void 0;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}

/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */
function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */
function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];
function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;
  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;
      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }
    }
  }

  if (invokeCallback) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child = void 0;
  var nextName = void 0;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (typeof iteratorFn === 'function') {
      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step = void 0;
      var ii = 0;
      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';
      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }
      var childrenString = '' + children;
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
      return c;
    });
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children) {
  return traverseAllChildren(children, function () {
    return null;
  }, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
    return child;
  });
  return result;
}

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
  return children;
}

function readContext(context, observedBits) {
  var dispatcher = ReactCurrentOwner.currentDispatcher;
  !(dispatcher !== null) ? invariant(false, 'Context.unstable_read(): Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0;
  return dispatcher.readContext(context, observedBits);
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // These are circular
    Provider: null,
    Consumer: null,
    unstable_read: null
  };

  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  context.Consumer = context;
  context.unstable_read = readContext.bind(null, context);

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function lazy(ctor) {
  var thenable = null;
  return {
    then: function (resolve, reject) {
      if (thenable === null) {
        // Lazily create thenable by wrapping in an extra thenable.
        thenable = ctor();
        ctor = null;
      }
      return thenable.then(resolve, reject);
    },

    // React uses these fields to store the result.
    _reactStatus: -1,
    _reactResult: null
  };
}

function forwardRef(render) {
  {
    if (typeof render !== 'function') {
      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      !(
      // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
    }

    if (render != null) {
      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' ||
  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_PLACEHOLDER_TYPE || typeof type === 'object' && type !== null && (typeof type.then === 'function' || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning$1 = function() {};

{
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};

  printWarning$1 = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning$1(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );

        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning$1(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

var checkPropTypes_1 = checkPropTypes;

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

var propTypesMisspellWarningShown = void 0;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);
    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
  }

  setCurrentlyValidatingElement(element);
  {
    warning$1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
  }
  setCurrentlyValidatingElement(null);
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step = void 0;
        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var type = element.type;
  var name = void 0,
      propTypes = void 0;
  if (typeof type === 'function') {
    // Class or functional component
    name = type.displayName || type.name;
    propTypes = type.propTypes;
  } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
    // ForwardRef
    var functionName = type.render.displayName || type.render.name || '';
    name = type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
    propTypes = type.propTypes;
  } else {
    return;
  }
  if (propTypes) {
    setCurrentlyValidatingElement(element);
    checkPropTypes_1(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
    setCurrentlyValidatingElement(null);
  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
    propTypesMisspellWarningShown = true;
    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
  }
  if (typeof type.getDefaultProps === 'function') {
    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */
function validateFragmentProps(fragment) {
  setCurrentlyValidatingElement(fragment);

  var keys = Object.keys(fragment.props);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (key !== 'children' && key !== 'key') {
      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
      break;
    }
  }

  if (fragment.ref !== null) {
    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
  }

  setCurrentlyValidatingElement(null);
}

function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type);

  // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.
  if (!validType) {
    var info = '';
    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendum(props);
    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString = void 0;
    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
  }

  var element = createElement.apply(this, arguments);

  // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.
  if (element == null) {
    return element;
  }

  // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)
  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}

function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;
  // Legacy hook: remove it
  {
    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}

function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);
  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }
  validatePropTypes(newElement);
  return newElement;
}

var React = {
  Children: {
    map: mapChildren,
    forEach: forEachChildren,
    count: countChildren,
    toArray: toArray,
    only: onlyChild
  },

  createRef: createRef,
  Component: Component,
  PureComponent: PureComponent,

  createContext: createContext,
  forwardRef: forwardRef,

  Fragment: REACT_FRAGMENT_TYPE,
  StrictMode: REACT_STRICT_MODE_TYPE,
  unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
  unstable_Profiler: REACT_PROFILER_TYPE,

  createElement: createElementWithValidation,
  cloneElement: cloneElementWithValidation,
  createFactory: createFactoryWithValidation,
  isValidElement: isValidElement,

  version: ReactVersion,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
};

if (enableSuspense) {
  React.Placeholder = REACT_PLACEHOLDER_TYPE;
  React.lazy = lazy;
}



var React$2 = Object.freeze({
	default: React
});

var React$3 = ( React$2 && React ) || React$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var react = React$3.default || React$3;

return react;

})));
/** @license React v16.5.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global.ReactDOM = factory(global.React));
}(this, (function (React) { 'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function () {};

{
  validateFormat = function (format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error = void 0;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

// Relying on the `invariant()` implementation lets us
// preserve the format and params in the www builds.

!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);
  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // untintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!

  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
      var evt = document.createEvent('Event');

      // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.
      var didError = true;

      // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.
      var windowEvent = window.event;

      // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false);

        // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.
        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      }

      // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.
      var error = void 0;
      // Use this to track whether the error event is ever called.
      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;
        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }
        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {
              // Ignore.
            }
          }
        }
      }

      // Create a fake event type.
      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

      // Attach our event handlers
      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false);

      // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }
        this.onError(error);
      }

      // Remove our event listeners
      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

// Used by Fiber to simulate a try-catch.
var hasError = false;
var caughtError = null;

// Used by event system to capture/rethrow the first error.
var hasRethrowError = false;
var rethrowError = null;

var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};

/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */
function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}

/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */
function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);
  if (hasError) {
    var error = clearCaughtError();
    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}

/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */
function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}

function hasCaughtError() {
  return hasError;
}

function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
  }
}

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
    if (plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
  eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */
var plugins = [];

/**
 * Mapping from event name to dispatch config
 */
var eventNameDispatchConfigs = {};

/**
 * Mapping from registration name to plugin module
 */
var registrationNameModules = {};

/**
 * Mapping from registration name to event name
 */
var registrationNameDependencies = {};

/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */
var possibleRegistrationNames = {};
// Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */
function injectEventPluginOrder(injectedEventPluginOrder) {
  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
  // Clone the ordering so it cannot be dynamically mutated.
  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}

/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */
function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;
  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }
    var pluginModule = injectedNamesToPlugins[pluginName];
    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }
  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }
    if (condition) {
      return;
    }
    if (typeof console !== 'undefined') {
      var _args$map = args.map(function (item) {
        return '' + item;
      }),
          a = _args$map[0],
          b = _args$map[1],
          c = _args$map[2],
          d = _args$map[3],
          e = _args$map[4],
          f = _args$map[5],
          g = _args$map[6],
          h = _args$map[7];

      var message = 'Warning: ' + format;

      // We intentionally don't use spread (or .apply) because it breaks IE9:
      // https://github.com/facebook/react/issues/13610
      switch (args.length) {
        case 0:
          console.error(message);
          break;
        case 1:
          console.error(message, a);
          break;
        case 2:
          console.error(message, a, b);
          break;
        case 3:
          console.error(message, a, b, c);
          break;
        case 4:
          console.error(message, a, b, c, d);
          break;
        case 5:
          console.error(message, a, b, c, d, e);
          break;
        case 6:
          console.error(message, a, b, c, d, e, f);
          break;
        case 7:
          console.error(message, a, b, c, d, e, f, g);
          break;
        case 8:
          console.error(message, a, b, c, d, e, f, g, h);
          break;
        default:
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
      }
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var _message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(_message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;

function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
  getInstanceFromNode = getInstanceFromNodeImpl;
  getNodeFromInstance = getNodeFromInstanceImpl;
  {
    !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
  }
}

var validateEventDispatches = void 0;
{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */


/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */
var injection = {
  /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */
  injectEventPluginOrder: injectEventPluginOrder,

  /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */
  injectEventPluginsByName: injectEventPluginsByName
};

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */
function getListener(inst, registrationName) {
  var listener = void 0;

  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon
  var stateNode = inst.stateNode;
  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }
  var props = getFiberCurrentPropsFromNode(stateNode);
  if (!props) {
    // Work in progress.
    return null;
  }
  listener = props[registrationName];
  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }
  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
  return listener;
}

/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */
function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = null;
  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];
    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }
  return events;
}

function runEventsInBatch(events, simulated) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  }

  // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.
  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  if (simulated) {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
  } else {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
  }
  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
  // This would be a good time to rethrow if any of the event handlers threw.
  rethrowCaughtError();
}

function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
  runEventsInBatch(events, false);
}

var FunctionalComponent = 0;
var FunctionalComponentLazy = 1;
var ClassComponent = 2;
var ClassComponentLazy = 3;
var IndeterminateComponent = 4; // Before we know whether it is functional or class
var HostRoot = 5; // Root of a host tree. Could be nested inside another node.
var HostPortal = 6; // A subtree. Could be an entry point to a different renderer.
var HostComponent = 7;
var HostText = 8;
var Fragment = 9;
var Mode = 10;
var ContextConsumer = 11;
var ContextProvider = 12;
var ForwardRef = 13;
var ForwardRefLazy = 14;
var Profiler = 15;
var PlaceholderComponent = 16;

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  while (!node[internalInstanceKey]) {
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var inst = node[internalInstanceKey];
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber, this will always be the deepest root.
    return inst;
  }

  return null;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey];
  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      return inst;
    } else {
      return null;
    }
  }
  return null;
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  }

  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  invariant(false, 'getNodeFromInstance: Invalid argument.');
}

function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}

function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

function getParent(inst) {
  do {
    inst = inst.return;
    // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);
  if (inst) {
    return inst;
  }
  return null;
}

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }
    instA = getParent(instA);
    instB = getParent(instB);
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */


/**
 * Return the parent instance of the passed-in instance.
 */


/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }
  var i = void 0;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (true) {
    if (!from) {
      break;
    }
    if (from === common) {
      break;
    }
    var alternate = from.alternate;
    if (alternate !== null && alternate === common) {
      break;
    }
    pathFrom.push(from);
    from = getParent(from);
  }
  var pathTo = [];
  while (true) {
    if (!to) {
      break;
    }
    if (to === common) {
      break;
    }
    var _alternate = to.alternate;
    if (_alternate !== null && _alternate === common) {
      break;
    }
    pathTo.push(to);
    to = getParent(to);
  }
  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  {
    !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}



function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

// Do not uses the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)

function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}

function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */
var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');

// List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */

var root = null;
var startText = null;
var fallbackText = null;

function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}

function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}

function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start = void 0;
  var startValue = startText;
  var startLength = startValue.length;
  var end = void 0;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;
  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}

function getText() {
  if ('value' in root) {
    return root.value;
  }
  return root.textContent;
}

var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var _assign = ReactInternals.assign;

/* eslint valid-typeof: 0 */

var EVENT_POOL_SIZE = 10;

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
}

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
    delete this.isDefaultPrevented;
    delete this.isPropagationStopped;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = functionThatReturnsTrue;
  } else {
    this.isDefaultPrevented = functionThatReturnsFalse;
  }
  this.isPropagationStopped = functionThatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = functionThatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = functionThatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = functionThatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: functionThatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }
    this.dispatchConfig = null;
    this._targetInst = null;
    this.nativeEvent = null;
    this.isDefaultPrevented = functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    this._dispatchListeners = null;
    this._dispatchInstances = null;
    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 */
SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }
  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);

  return Class;
};

addEventPoolingTo(SyntheticEvent);

/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;
  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }
  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;
  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
  event.destructor();
  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var SyntheticCompositionEvent = SyntheticEvent.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var SyntheticInputEvent = SyntheticEvent.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes.compositionStart;
    case TOP_COMPOSITION_END:
      return eventTypes.compositionEnd;
    case TOP_COMPOSITION_UPDATE:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
}

// Track the current IME composition status, if any.
var isComposing = false;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType = void 0;
  var fallbackData = void 0;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);
    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }
      return null;
    case TOP_COMPOSITION_END:
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars = void 0;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

// Use to restore controlled state after a change event has fired.

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);
  if (!internalInstance) {
    // Unmounted
    return;
  }
  !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
  restoreImpl(internalInstance.stateNode, internalInstance.type, props);
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}

function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}

function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}

function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }
  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;

  restoreStateOfTarget(target);
  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.

// Defaults
var _batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};
var _interactiveUpdatesImpl = function (fn, a, b) {
  return fn(a, b);
};
var _flushInteractiveUpdatesImpl = function () {};

var isBatching = false;
function batchedUpdates(fn, bookkeeping) {
  if (isBatching) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }
  isBatching = true;
  try {
    return _batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    // Here we wait until all updates have propagated, which is important
    // when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    // Then we restore state of any controlled component.
    isBatching = false;
    var controlledComponentsHavePendingUpdates = needsStateRestore();
    if (controlledComponentsHavePendingUpdates) {
      // If a controlled event was fired, we may need to restore the state of
      // the DOM node back to the controlled value. This is necessary when React
      // bails out of the update without touching the DOM.
      _flushInteractiveUpdatesImpl();
      restoreStateIfNeeded();
    }
  }
}

function interactiveUpdates(fn, a, b) {
  return _interactiveUpdatesImpl(fn, a, b);
}



function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
  _batchedUpdatesImpl = batchedUpdatesImpl;
  _interactiveUpdatesImpl = interactiveUpdatesImpl;
  _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
}

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * HTML nodeType values that represent the type of the node
 */

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';
  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  var currentValue = '' + node[valueField];

  // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)
  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }
  var get = descriptor.get,
      set = descriptor.set;

  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  });
  // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768
  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });

  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  }

  // TODO: Once it's just Fiber we can move this to node._wrapperState
  node._valueTracker = trackValueOnNode(node);
}

function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node);
  // if there is no tracker at this point it's unlikely
  // that trying again will succeed
  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);
  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }
  return false;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';
  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');
    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);
        if (match) {
          var pathBeforeSlash = match[1];
          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }
    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }
  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_PLACEHOLDER_TYPE = hasSymbol ? Symbol.for('react.placeholder') : 0xead1;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function getResultFromResolvedThenable(thenable) {
  return thenable._reactResult;
}

function refineResolvedThenable(thenable) {
  return thenable._reactStatus === Resolved ? thenable._reactResult : null;
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }
  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }
  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }
  if (typeof type === 'string') {
    return type;
  }
  switch (type) {
    case REACT_ASYNC_MODE_TYPE:
      return 'AsyncMode';
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';
    case REACT_PORTAL_TYPE:
      return 'Portal';
    case REACT_PROFILER_TYPE:
      return 'Profiler';
    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';
    case REACT_PLACEHOLDER_TYPE:
      return 'Placeholder';
  }
  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';
      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';
      case REACT_FORWARD_REF_TYPE:
        var renderFn = type.render;
        var functionName = renderFn.displayName || renderFn.name || '';
        return type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
    }
    if (typeof type.then === 'function') {
      var thenable = type;
      var resolvedThenable = refineResolvedThenable(thenable);
      if (resolvedThenable) {
        return getComponentName(resolvedThenable);
      }
    }
  }
  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case IndeterminateComponent:
    case FunctionalComponent:
    case FunctionalComponentLazy:
    case ClassComponent:
    case ClassComponentLazy:
    case HostComponent:
    case Mode:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;
      if (owner) {
        ownerName = getComponentName(owner.type);
      }
      return describeComponentFrame(name, source, ownerName);
    default:
      return '';
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;
  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);
  return info;
}

var current = null;
var phase = null;

function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }
    var owner = current._debugOwner;
    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }
  return null;
}

function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    }
    // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.
    return getStackByFiberInDevAndProd(current);
  }
  return '';
}

function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    phase = null;
  }
}

function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    phase = null;
  }
}

function setCurrentPhase(lifeCyclePhase) {
  {
    phase = lifeCyclePhase;
  }
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();
    // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0;

// A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.
var STRING = 1;

// A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.
var BOOLEANISH_STRING = 2;

// A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
var BOOLEAN = 3;

// An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.
var OVERLOADED_BOOLEAN = 4;

// An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.
var NUMERIC = 5;

// An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.
var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */
var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';


var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }
  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  {
    warning$1(false, 'Invalid attribute name: `%s`', attributeName);
  }
  return false;
}

function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }
  if (isCustomComponentTag) {
    return false;
  }
  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }
  return false;
}

function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }
  switch (typeof value) {
    case 'function':
    // $FlowIssue symbol is perfectly valid here
    case 'symbol':
      // eslint-disable-line
      return true;
    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }
    default:
      return false;
  }
}

function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }
  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }
  if (isCustomComponentTag) {
    return false;
  }
  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;
      case OVERLOADED_BOOLEAN:
        return value === false;
      case NUMERIC:
        return isNaN(value);
      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }
  return false;
}

function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
}

// When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.
var properties = {};

// These props are reserved by React. They shouldn't be written to the DOM.
['children', 'dangerouslySetInnerHTML',
// TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.
[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];

  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null);
} // attributeNamespace
);

// These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.
['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML boolean attributes.
['allowFullScreen', 'async',
// Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
// Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.
['checked',
// Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.
['capture', 'download'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that must be positive numbers.
['cols', 'rows', 'size', 'span'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that must be numbers.
['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

var CAMELIZE = /[\-\:]([a-z])/g;
var capitalize = function (token) {
  return token[1].toUpperCase();
};

// This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scrapping the MDN documentation.
['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null);
} // attributeNamespace
);

// String SVG attributes with the xlink namespace.
['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink');
});

// String SVG attributes with the xml namespace.
['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace');
});

// Special case: this attribute exists both in HTML and SVG.
// Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
// its React `tabIndex` name, like we do for attributes that exist only in HTML.
properties.tabIndex = new PropertyInfoRecord('tabIndex', STRING, false, // mustUseProperty
'tabindex', // attributeName
null);

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;

      return node[propertyName];
    } else {
      var attributeName = propertyInfo.attributeName;

      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);
          if (value === '') {
            return true;
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }
          if (value === '' + expected) {
            return expected;
          }
          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }
        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        }
        // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.
        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */
function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }
    var value = node.getAttribute(name);
    if (value === '' + expected) {
      return expected;
    }
    return value;
  }
}

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */
function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);
  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }
  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  }
  // If the prop isn't in the special list, treat it as a simple attribute.
  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;
      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName, '' + value);
      }
    }
    return;
  }
  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;

      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }
    return;
  }
  // The rest are treated as attributes with special cases.
  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;

    var attributeValue = void 0;
    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      attributeValue = '' + value;
    }
    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}

function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;
    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

{
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );

        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

var checkPropTypes_1 = checkPropTypes;

var ReactDebugCurrentFrame$1 = null;

var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };

  var propTypes = {
    value: function (props, propName, componentName) {
      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };

  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
    checkPropTypes_1(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
  };
}

// Exports ReactDOM.createRoot
var enableUserTimingAPI = true;

// Experimental error-boundary API that can recover from errors within a single
// render phase
var enableGetDerivedStateFromCatch = false;
// Suspense
var enableSuspense = false;
// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
var debugRenderPhaseSideEffects = false;

// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:
var debugRenderPhaseSideEffectsForStrictMode = true;

// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.
var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;

// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
var warnAboutDeprecatedLifecycles = false;

// Warn about legacy context API
var warnAboutLegacyContextAPI = false;

// Gather advanced timing metrics for Profiler subtrees.
var enableProfilerTimer = true;

// Trace which interactions trigger each commit.
var enableSchedulerTracing = true;

// Only used in www builds.


// Only used in www builds.


// React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties
var disableInputAttributeSyncing = false;

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}

function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnCheckedDefaultChecked = true;
    }
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;

  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}

function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;
  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}

function updateWrapper(element, props) {
  var node = element;
  {
    var _controlled = isControlled(props);

    if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
      warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnUncontrolledToControlled = true;
    }
    if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
      warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);

  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' ||
      // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the value attribute, React only assigns a new value
    // whenever the defaultValue React prop has changed. When not present,
    // React does nothing
    if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  } else {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the attribute is directly
    // controllable from the defaultValue React property. It needs to be
    // updated as new props come in.
    if (props.defaultChecked == null) {
      node.removeAttribute('checked');
    } else {
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}

function postMountWrapper(element, props, isHydrating) {
  var node = element;

  // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.
  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset';

    // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872
    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var _initialValue = toString(node._wrapperState.initialValue);

    // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.
    if (!isHydrating) {
      if (disableInputAttributeSyncing) {
        var value = getToStringValue(props.value);

        // When not syncing the value attribute, the value property points
        // directly to the React prop. Only assign it if it exists.
        if (value != null) {
          // Always assign on buttons so that it is possible to assign an
          // empty string to clear button text.
          //
          // Otherwise, do not re-assign the value property if is empty. This
          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
          // prematurely marking required inputs as invalid. Equality is compared
          // to the current value in case the browser provided value is not an
          // empty string.
          if (isButton || value !== node.value) {
            node.value = toString(value);
          }
        }
      } else {
        // When syncing the value attribute, the value property should use
        // the the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (_initialValue !== node.value) {
          node.value = _initialValue;
        }
      }
    }

    if (disableInputAttributeSyncing) {
      // When not syncing the value attribute, assign the value attribute
      // directly from the defaultValue React property (when present)
      var defaultValue = getToStringValue(props.defaultValue);
      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    } else {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = _initialValue;
    }
  }

  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.
  var name = node.name;
  if (name !== '') {
    node.name = '';
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the checked property
    // never gets assigned. It must be manually set. We don't want
    // to do this when hydrating so that existing user input isn't
    // modified
    if (!isHydrating) {
      updateChecked(element, props);
    }

    // Only assign the checked attribute if it is defined. This saves
    // a DOM write when controlling the checked attribute isn't needed
    // (text inputs, submit/reset)
    if (props.hasOwnProperty('defaultChecked')) {
      node.defaultChecked = !node.defaultChecked;
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, both the the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}

function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

      // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set
      updateValueIfChanged(otherNode);

      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      updateWrapper(otherNode, otherProps);
    }
  }
}

// In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253
function setDefaultValue(node, type, value) {
  if (
  // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change';
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event, false);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);
  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  if (!disableInputAttributeSyncing) {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes$1,

  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    var getTargetInstFunc = void 0,
        handleEventFunc = void 0;
    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

var SyntheticUIEvent = SyntheticEvent.extend({
  view: null,
  detail: null
});

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

var previousScreenX = 0;
var previousScreenY = 0;
// Use flags to signal movementX/Y has already been set
var isMovementXSet = false;
var isMovementYSet = false;

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    var screenX = previousScreenX;
    previousScreenX = event.screenX;

    if (!isMovementXSet) {
      isMovementXSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenX - screenX : 0;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    }

    var screenY = previousScreenY;
    previousScreenY = event.screenY;

    if (!isMovementYSet) {
      isMovementYSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenY - screenY : 0;
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */
var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
});

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win = void 0;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from = void 0;
    var to = void 0;
    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface = void 0,
        leaveEventType = void 0,
        enterEventType = void 0,
        eventTypePrefix = void 0;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$2.mouseLeave;
      enterEventType = eventTypes$2.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$2.pointerLeave;
      enterEventType = eventTypes$2.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);

    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

/*eslint-disable no-self-compare */

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */


function get(key) {
  return key._reactInternalFiber;
}

function has(key) {
  return key._reactInternalFiber !== undefined;
}

function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect = /*              */0;
var PerformedWork = /*         */1;

// You can change the rest (and add more).
var Placement = /*             */2;
var Update = /*                */4;
var PlacementAndUpdate = /*    */6;
var Deletion = /*              */8;
var ContentReset = /*          */16;
var Callback = /*              */32;
var DidCapture = /*            */64;
var Ref = /*                   */128;
var Snapshot = /*              */256;

// Update & Callback & Ref & Snapshot
var LifecycleEffectMask = /*   */420;

// Union of all host effects
var HostEffectMask = /*        */511;

var Incomplete = /*            */512;
var ShouldCapture = /*         */1024;

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;

var MOUNTING = 1;
var MOUNTED = 2;
var UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
  var node = fiber;
  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    if ((node.effectTag & Placement) !== NoEffect) {
      return MOUNTING;
    }
    while (node.return) {
      node = node.return;
      if ((node.effectTag & Placement) !== NoEffect) {
        return MOUNTING;
      }
    }
  } else {
    while (node.return) {
      node = node.return;
    }
  }
  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return MOUNTED;
  }
  // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.
  return UNMOUNTED;
}

function isFiberMounted(fiber) {
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function isMounted(component) {
  {
    var owner = ReactCurrentOwner$1.current;
    if (owner !== null && (owner.tag === ClassComponent || owner.tag === ClassComponentLazy)) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);
  if (!fiber) {
    return false;
  }
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function assertIsMounted(fiber) {
  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;
  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var state = isFiberMountedImpl(fiber);
    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    if (state === MOUNTING) {
      return null;
    }
    return fiber;
  }
  // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.
  var a = fiber;
  var b = alternate;
  while (true) {
    var parentA = a.return;
    var parentB = parentA ? parentA.alternate : null;
    if (!parentA || !parentB) {
      // We're at the root.
      break;
    }

    // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.
    if (parentA.child === parentB.child) {
      var child = parentA.child;
      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }
        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }
        child = child.sibling;
      }
      // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.
      invariant(false, 'Unable to find node on an unmounted component.');
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;
      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }
        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }
        _child = _child.sibling;
      }
      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;
        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }
          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }
          _child = _child.sibling;
        }
        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
      }
    }

    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  }
  // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.
  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  }
  // Otherwise B has to be current branch.
  return alternate;
}

function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}

function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var SyntheticAnimationEvent = SyntheticEvent.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var SyntheticClipboardEvent = SyntheticEvent.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode = void 0;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.
  if (charCode === 10) {
    charCode = 13;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var SyntheticTransitionEvent = SyntheticEvent.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },

  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];

var eventTypes$4 = {};
var topLevelEventsToDispatchConfig = {};

function addEventTypeNameToConfig(_ref, isInteractive) {
  var topEvent = _ref[0],
      event = _ref[1];

  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent],
    isInteractive: isInteractive
  };
  eventTypes$4[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
}

interactiveEventTypeNames.forEach(function (eventTuple) {
  addEventTypeNameToConfig(eventTuple, true);
});
nonInteractiveEventTypeNames.forEach(function (eventTuple) {
  addEventTypeNameToConfig(eventTuple, false);
});

// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];

var SimpleEventPlugin = {
  eventTypes: eventTypes$4,

  isInteractiveTopLevelEventType: function (topLevelType) {
    var config = topLevelEventsToDispatchConfig[topLevelType];
    return config !== undefined && config.isInteractive === true;
  },


  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor = void 0;
    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;
      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case TOP_AUX_CLICK:
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP:
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;
      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;
      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;
      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;
      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;
      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;
      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;
      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;
      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;
      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        }
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
    }
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;


var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findRootContainerNode(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst.return) {
    inst = inst.return;
  }
  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }
  return inst.stateNode.containerInfo;
}

// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }
  return {
    topLevelType: topLevelType,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;
  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    if (!ancestor) {
      bookKeeping.ancestors.push(ancestor);
      break;
    }
    var root = findRootContainerNode(ancestor);
    if (!root) {
      break;
    }
    bookKeeping.ancestors.push(ancestor);
    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// TODO: can we stop exporting these?
var _enabled = true;

function setEnabled(enabled) {
  _enabled = !!enabled;
}

function isEnabled() {
  return _enabled;
}

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapBubbledEvent(topLevelType, element) {
  if (!element) {
    return null;
  }
  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

  addEventBubbleListener(element, getRawEventName(topLevelType),
  // Check if interactive and wrap in interactiveUpdates
  dispatch.bind(null, topLevelType));
}

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapCapturedEvent(topLevelType, element) {
  if (!element) {
    return null;
  }
  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

  addEventCaptureListener(element, getRawEventName(topLevelType),
  // Check if interactive and wrap in interactiveUpdates
  dispatch.bind(null, topLevelType));
}

function dispatchInteractiveEvent(topLevelType, nativeEvent) {
  interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
}

function dispatchEvent(topLevelType, nativeEvent) {
  if (!_enabled) {
    return;
  }

  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
    // If we get an event (ex: img onload) before committing that
    // component's mount, ignore it for now (that is, treat it as if it was an
    // event on a non-React tree). We might also consider queueing events and
    // dispatching them after the mount.
    targetInst = null;
  }

  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var reactTopListenersCounter = 0;

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */
function listenTo(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      switch (dependency) {
        case TOP_SCROLL:
          trapCapturedEvent(TOP_SCROLL, mountAt);
          break;
        case TOP_FOCUS:
        case TOP_BLUR:
          trapCapturedEvent(TOP_FOCUS, mountAt);
          trapCapturedEvent(TOP_BLUR, mountAt);
          // We set the flag for a single dependency later in this function,
          // but this ensures we mark both as attached rather than just one.
          isListening[TOP_BLUR] = true;
          isListening[TOP_FOCUS] = true;
          break;
        case TOP_CANCEL:
        case TOP_CLOSE:
          if (isEventSupported(getRawEventName(dependency))) {
            trapCapturedEvent(dependency, mountAt);
          }
          break;
        case TOP_INVALID:
        case TOP_SUBMIT:
        case TOP_RESET:
          // We listen to them on the target DOM elements.
          // Some of them bubble so we don't want them to fire twice.
          break;
        default:
          // By default, listen on the top level to all non-media events.
          // Media events don't bubble so adding the listener wouldn't do anything.
          var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
          if (!isMediaEvent) {
            trapBubbledEvent(dependency, mountAt);
          }
          break;
      }
      isListening[dependency] = true;
    }
  }
}

function isListeningToAllDependencies(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];
  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      return false;
    }
  }
  return true;
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */
function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;

  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset;

  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */
function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }
      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      }
      // Moving from `node` to its first child `next`.
      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }
      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }
      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }
      if ((next = node.nextSibling) !== null) {
        break;
      }
      node = parentNode;
      parentNode = node.parentNode;
    }

    // Moving from `node` to its next sibling `next`.
    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window;
  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }
    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();
  while (element instanceof win.HTMLIFrameElement) {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute
    try {
      win = element.contentDocument.defaultView;
    } catch (e) {
      return element;
    }
    element = getActiveElement(win.document);
  }
  return element;
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */
function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}

function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
  };
}

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */
function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;
  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    }

    // Focusing a node can change the scroll position, which is undesirable
    var ancestors = [];
    var ancestor = priorFocusedElem;
    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */
function getSelection$1(input) {
  var selection = void 0;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || { start: 0, end: 0 };
}

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */
function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */
function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement$1);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;

    accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes$3,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var doc = getEventTargetDocument(nativeEventTarget);
    // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.
    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }
        break;
      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;
      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
      case TOP_DRAG_END:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */
injection.injectEventPluginOrder(DOMEventPluginOrder);
setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);

/**
 * Some important event plugins included by default (without having to require
 * them).
 */
injection.injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    content += child;
    // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration codepath too.
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  {
    // This mirrors the codepath above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }
        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }
        if (typeof child.type !== 'string') {
          return;
        }
        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;
          warning$1(false, 'Only strings and numbers are supported as <option> children.');
        }
      });
    }

    // TODO: Remove support for `selected` in <option>.
    if (props.selected != null && !didWarnSelectedSetOnOption) {
      warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
      didWarnSelectedSetOnOption = true;
    }
  }
}

function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}

function getHostProps$1(element, props) {
  var hostProps = _assign({ children: undefined }, props);
  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue$1 = void 0;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();
  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 */
function checkSelectPropTypes(props) {
  ReactControlledValuePropTypes.checkPropTypes('select', props);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
    } else if (!props.multiple && isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};
    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }
    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }
      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));
    var defaultSelected = null;
    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;
        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }
        return;
      }
      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }
    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}

function initWrapperState$1(element, props) {
  var node = element;
  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValueDefaultValue$1 = true;
    }
  }
}

function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}

function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;

  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}

function restoreControlledState$2(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

function getHostProps$3(element, props) {
  var node = element;
  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

  // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.
  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}

function initWrapperState$2(element, props) {
  var node = element;
  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props);
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value;

  // Only bother fetching default value if we're going to use it
  if (initialValue == null) {
    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      {
        warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }
      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
        children = children[0];
      }

      defaultValue = children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}

function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);
  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value);
    // To avoid side effects (such as losing text selection), only set value if changed
    if (newValue !== node.value) {
      node.value = newValue;
    }
    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }
  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}

function postMountWrapper$3(element, props) {
  var node = element;
  // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.
  var textContent = node.textContent;

  // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
  if (textContent === node._wrapperState.initialValue) {
    node.value = textContent;
  }
}

function restoreControlledState$3(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

var Namespaces = {
  html: HTML_NAMESPACE$1,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
};

// Assumes there is no parent namespace.
function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;
    case 'math':
      return MATH_NAMESPACE;
    default:
      return HTML_NAMESPACE$1;
  }
}

function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }
  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE$1;
  }
  // By default, pass namespace below.
  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer = void 0;

/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node

  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */
function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported style property %s. Did you mean %s?', name,
    // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;
    warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */
function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + hyphenateStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

        delimiter = ';';
      }
    }
    return serialized || null;
  }
}

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */
function setValueForStyles(node, styles) {
  var style = node.style;
  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }
    var isCustomProperty = styleName.indexOf('--') === 0;
    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }
    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
    if (styleName === 'float') {
      styleName = 'cssFloat';
    }
    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// TODO: We can remove this if we add invariantWithStack()
// or add stack by default to invariants where possible.
var HTML$1 = '__html';

var ReactDebugCurrentFrame$2 = null;
{
  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
}

function assertValidProps(tag, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
  }
  {
    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }
  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;
    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',

  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0, // state
  'aria-details': 0,
  'aria-disabled': 0, // state
  'aria-hidden': 0, // state
  'aria-invalid': 0, // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
    return true;
  }

  if (rARIACamel.test(name)) {
    var ariaName = 'aria-' + name.slice(4).toLowerCase();
    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (correctName == null) {
      warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
      warnedProperties[name] = true;
      return true;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== correctName) {
      warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
      warnedProperties[name] = true;
      return true;
    }
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  var invalidProps = [];

  for (var key in props) {
    var isValid = validateProperty(type, key);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  } else if (invalidProps.length > 1) {
    warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;

function validateProperties$1(type, props) {
  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
    return;
  }

  if (props != null && props.value === null && !didWarnValueNull) {
    didWarnValueNull = true;
    if (type === 'select' && props.multiple) {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
    } else {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();
    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
      warnedProperties$1[name] = true;
      return true;
    }

    // We can't rely on the event system being injected on the server.
    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }
      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
      if (registrationName != null) {
        warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
        warnedProperties$1[name] = true;
        return true;
      }
      if (EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Let the ARIA attribute hook validate ARIA attributes
    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

    // Known attributes should match the casing specified in the property config.
    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];
      if (standardName !== name) {
        warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Now that we've validated casing, do not validate
    // data types for reserved props
    if (isReserved) {
      return true;
    }

    // Warn when a known attribute is a bad type
    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    }

    // Warn when passing the strings 'false' or 'true' into a boolean prop
    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  var unknownProps = [];
  for (var key in props) {
    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');
  if (unknownProps.length === 1) {
    warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  } else if (unknownProps.length > 1) {
    warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnUnknownProperties(type, props, canUseEventSystem);
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnInvalidHydration = false;
var didWarnShadyDOM = false;

var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML = '__html';

var HTML_NAMESPACE = Namespaces.html;


var warnedUnknownTags = void 0;
var suppressHydrationWarning = void 0;

var validatePropertiesInDevelopment = void 0;
var warnForTextDifference = void 0;
var warnForPropDifference = void 0;
var warnForExtraAttributes = void 0;
var warnForInvalidEventListener = void 0;
var canDiffStyleForHydrationWarning = void 0;

var normalizeMarkupForTextOrAttribute = void 0;
var normalizeHTML = void 0;

{
  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, /* canUseEventSystem */true);
  };

  // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807
  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

  // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.
  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
    if (normalizedServerText === normalizedClientText) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
    if (normalizedServerValue === normalizedClientValue) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });
    warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  };

  // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.
  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  listenTo(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = nextProps[propKey];
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      // Relies on `updateStylesByID` not mutating `styleUpdates`.
      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // We polyfill it separately on the client during commit.
      // We could have excluded it in the property list instead of
      // adding a special case here, but then it wouldn't be emitted
      // on server rendering (but we *do* want to emit it in SSR).
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];
    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag = void 0;

  // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.
  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement = void 0;
  var namespaceURI = parentNamespace;
  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }
  if (namespaceURI === HTML_NAMESPACE) {
    {
      isCustomComponentTag = isCustomComponent(type, props);
      // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.
      !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');
      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.
      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, { is: props.is });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type);
      // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
      // attribute on `select`s needs to be added before `option`s are inserted. This prevents
      // a bug where the `select` does not scroll to the correct option because singular
      // `select` elements automatically pick the first item.
      // See https://github.com/facebook/react/issues/13222
      if (type === 'select' && props.multiple) {
        var node = domElement;
        node.multiple = true;
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;
        warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}

function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}

function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);
  {
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  var props = void 0;
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }
      props = rawProps;
      break;
    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;
    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;
    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;
    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    default:
      props = rawProps;
  }

  assertValidProps(tag, props);

  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;
    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;
    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }
}

// Calculate the diff between the two objects.
function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;

  var lastProps = void 0;
  var nextProps = void 0;
  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;
    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;
      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  assertValidProps(tag, nextProps);

  var propKey = void 0;
  var styleName = void 0;
  var styleUpdates = null;
  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }
    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];
      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }
          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
      // Noop. This is handled by the clear text mechanism.
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // Noop. It doesn't work on updates anyway.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }
  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = '';
          }
        }
        // Update styles that changed since `lastProp`.
        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }
          updatePayload.push(propKey, styleUpdates);
        }
        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      var lastHtml = lastProp ? lastProp[HTML] : undefined;
      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
        }
      } else {
        // TODO: It might be too late to clear this if we have children
        // inserted already.
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }
  if (styleUpdates) {
    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }
  return updatePayload;
}

// Apply the diff.
function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
  // Apply the diff.
  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

  // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.
  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;
    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;
    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();
    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }
    return possibleStandardNames[lowerCasedName] || null;
  }
  return null;
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag = void 0;
  var extraAttributeNames = void 0;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }
      break;
    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;
    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;
    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;
    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;
    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();
      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;
        case 'checked':
          break;
        case 'selected':
          break;
        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;
  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = rawProps[propKey];
    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (true &&
    // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);
      if (suppressHydrationWarning) {
        // Don't bother comparing. We're ignoring all these warnings.
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
      // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
        // Noop
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML] : undefined;
        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');
          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;
        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;
          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }
          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);
            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true;
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(standardName);
            }
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);
          }
          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;
    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  return updatePayload;
}

function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}

function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}

function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}

function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}

function restoreControlledState$1(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;
    case 'textarea':
      restoreControlledState$3(domElement, props);
      return;
    case 'select':
      restoreControlledState$2(domElement, props);
      return;
  }
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var validateDOMNesting = function () {};
var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;
    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackInDev();

    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
    if (didWarn[warnKey]) {
      return;
    }
    didWarn[warnKey] = true;

    var tagDisplayName = childTag;
    var whitespaceInfo = '';
    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';
      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
      }
      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
    } else {
      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
    }
  };
}

var ReactInternals$1 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var _ReactInternals$Sched = ReactInternals$1.Schedule;
var unstable_cancelScheduledWork = _ReactInternals$Sched.unstable_cancelScheduledWork;
var unstable_now = _ReactInternals$Sched.unstable_now;
var unstable_scheduleWork = _ReactInternals$Sched.unstable_scheduleWork;

// Renderers that don't support persistence
// can re-export everything from this module.

function shim() {
  invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
}

// Persistence (when unsupported)
var supportsPersistence = false;
var cloneInstance = shim;
var createContainerChildSet = shim;
var appendChildToContainerChildSet = shim;
var finalizeContainerChildren = shim;
var replaceContainerChildren = shim;

var SUPPRESS_HYDRATION_WARNING = void 0;
{
  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
}

var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }
  return false;
}

function getRootHostContext(rootContainerInstance) {
  var type = void 0;
  var namespace = void 0;
  var nodeType = rootContainerInstance.nodeType;
  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }
    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }
  {
    var validatedTag = type.toLowerCase();
    var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return { namespace: namespace, ancestorInfo: _ancestorInfo };
  }
  return namespace;
}

function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
  }
  var parentNamespace = parentHostContext;
  return getChildNamespace(parentNamespace, type);
}

function getPublicInstance(instance) {
  return instance;
}

function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}

function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  selectionInformation = null;
  setEnabled(eventsEnabled);
  eventsEnabled = null;
}

function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace = void 0;
  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);
    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
    parentNamespace = hostContextDev.namespace;
  }
  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}

function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}

function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}

function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;
    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }
  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}

function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}

function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}

function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }
  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}

var isPrimaryRenderer = true;
var scheduleTimeout = setTimeout;
var cancelTimeout = clearTimeout;
var noTimeout = -1;

// -------------------
//     Mutation
// -------------------

var supportsMutation = true;

function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}

function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps);
  // Apply the diff to the DOM node.
  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}

function resetTextContent(domElement) {
  setTextContent(domElement, '');
}

function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}

function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}

function appendChildToContainer(container, child) {
  var parentNode = void 0;
  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  }
  // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that containers have inline onclick defined.
  // https://github.com/facebook/react/issues/11918
  if (parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}

function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}

function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}

function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}

// -------------------
//     Hydration
// -------------------

var supportsHydration = true;

function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  }
  // This has now been refined to an element node.
  return instance;
}

function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  }
  // This has now been refined to a text node.
  return instance;
}

function getNextHydratableSibling(instance) {
  var node = instance.nextSibling;
  // Skip non-hydratable nodes.
  while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
    node = node.nextSibling;
  }
  return node;
}

function getFirstHydratableChild(parentInstance) {
  var next = parentInstance.firstChild;
  // Skip non-hydratable nodes.
  while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
    next = next.nextSibling;
  }
  return next;
}

function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance);
  // TODO: Possibly defer this until the commit phase where all the events
  // get attached.
  updateFiberProps(instance, props);
  var parentNamespace = void 0;
  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }
  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}

function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}

function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}

function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}

function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}

function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}

function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type, props);
  }
}

function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}

function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedElement(parentInstance, type, props);
  }
}

function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = '\u269B';
var warningEmoji = '\u26D4';
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber = null;
// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase = null;
var currentPhaseFiber = null;
// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
var isWaitingForCallback = false;
// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + ' ' + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
  var suffix = warning ? ' Warning: ' + warning : '';
  return '' + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);
  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {}
  // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.

  // Clear marks immediately to avoid growing buffer.
  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + ' (#' + debugID + ')';
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
  } else {
    // Composite component methods.
    return componentName + '.' + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }
  labelsInCurrentCommit.add(label);

  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;
    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }
  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;
  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }
    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }
  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}

function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }
    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}

function startRequestCallbackTimer() {
  if (enableUserTimingAPI) {
    if (supportsUserTiming && !isWaitingForCallback) {
      isWaitingForCallback = true;
      beginMark('(Waiting for async callback...)');
    }
  }
}

function stopRequestCallbackTimer(didExpire, expirationTime) {
  if (enableUserTimingAPI) {
    if (supportsUserTiming) {
      isWaitingForCallback = false;
      var warning = didExpire ? 'React was blocked by main thread' : null;
      endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
    }
  }
}

function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, this is the fiber to unwind from.
    currentFiber = fiber;
    if (!beginFiberMark(fiber, null)) {
      return;
    }
    fiber._debugIsCurrentlyTiming = true;
  }
}

function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.
    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}

function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber.return;
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}

function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber.return;
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    var warning = 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}

function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    clearPendingPhaseMeasurement();
    if (!beginFiberMark(fiber, phase)) {
      return;
    }
    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}

function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }
    currentPhase = null;
    currentPhaseFiber = null;
  }
}

function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;
    if (!supportsUserTiming) {
      return;
    }
    commitCountInCurrentWorkLoop = 0;
    // This is top level call.
    // Any other measurements are performed within.
    beginMark('(React Tree Reconciliation)');
    // Resume any measurements that were in progress during the last loop.
    resumeTimers();
  }
}

function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var warning = null;
    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = 'An update to ' + componentName + ' interrupted the previous render';
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }
    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
    // Pause any measurements until the next loop.
    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}

function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}

function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;
    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }
    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();

    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}

function startCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}

function stopCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
  }
}

function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}

function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
  }
}

function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}

function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];

var fiberStack = void 0;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      warningWithoutStack$1(false, 'Unexpected pop.');
    }
    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];

  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;

  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

function checkThatStackIsEmpty() {
  {
    if (index !== -1) {
      warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
    }
  }
}

function resetStackAfterFatalErrorInDev() {
  {
    index = -1;
    valueStack.length = 0;
    fiberStack.length = 0;
  }
}

var warnedAboutMissingGetChildContext = void 0;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};
{
  Object.freeze(emptyContextObject);
}

// A cursor to the current merged context object on the stack.
var contextStackCursor = createCursor(emptyContextObject);
// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor = createCursor(false);
// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  if (didPushOwnContextIfProvider && isContextProvider(Component)) {
    // If the fiber is a context provider itself, when we read its context
    // we may have already pushed its own child context on the stack. A context
    // provider should not "see" its own child context. Therefore we read the
    // previous (parent) context instead for a context provider.
    return previousContext;
  }
  return contextStackCursor.current;
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  var instance = workInProgress.stateNode;
  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

function getMaskedContext(workInProgress, unmaskedContext) {
  var type = workInProgress.type;
  var contextTypes = type.contextTypes;
  if (!contextTypes) {
    return emptyContextObject;
  }

  // Avoid recreating masked context unless unmasked context has changed.
  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
  // This may trigger infinite loops if componentWillReceiveProps calls setState.
  var instance = workInProgress.stateNode;
  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
    return instance.__reactInternalMemoizedMaskedChildContext;
  }

  var context = {};
  for (var key in contextTypes) {
    context[key] = unmaskedContext[key];
  }

  {
    var name = getComponentName(type) || 'Unknown';
    checkPropTypes_1(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // Context is created before the class component is instantiated so check for instance.
  if (instance) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return context;
}

function hasContextChanged() {
  return didPerformWorkStackCursor.current;
}

function isContextProvider(type) {
  var childContextTypes = type.childContextTypes;
  return childContextTypes !== null && childContextTypes !== undefined;
}

function popContext(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function popTopLevelContextObject(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function pushTopLevelContextObject(fiber, context, didChange) {
  !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  push(contextStackCursor, context, fiber);
  push(didPerformWorkStackCursor, didChange, fiber);
}

function processChildContext(fiber, type, parentContext) {
  var instance = fiber.stateNode;
  var childContextTypes = type.childContextTypes;

  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
  if (typeof instance.getChildContext !== 'function') {
    {
      var componentName = getComponentName(type) || 'Unknown';

      if (!warnedAboutMissingGetChildContext[componentName]) {
        warnedAboutMissingGetChildContext[componentName] = true;
        warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
      }
    }
    return parentContext;
  }

  var childContext = void 0;
  {
    setCurrentPhase('getChildContext');
  }
  startPhaseTimer(fiber, 'getChildContext');
  childContext = instance.getChildContext();
  stopPhaseTimer();
  {
    setCurrentPhase(null);
  }
  for (var contextKey in childContext) {
    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
  }
  {
    var name = getComponentName(type) || 'Unknown';
    checkPropTypes_1(childContextTypes, childContext, 'child context', name,
    // In practice, there is one case in which we won't get a stack. It's when
    // somebody calls unstable_renderSubtreeIntoContainer() and we process
    // context from the parent component instance. The stack will be missing
    // because it's outside of the reconciliation, and so the pointer has not
    // been set. This is rare and doesn't matter. We'll also remove that API.
    getCurrentFiberStackInDev);
  }

  return _assign({}, parentContext, childContext);
}

function pushContextProvider(workInProgress) {
  var instance = workInProgress.stateNode;
  // We push the context as early as possible to ensure stack integrity.
  // If the instance does not exist yet, we will push null at first,
  // and replace it on the stack later when invalidating the context.
  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;

  // Remember the parent context so we can merge with it later.
  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
  previousContext = contextStackCursor.current;
  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

  return true;
}

function invalidateContextProvider(workInProgress, type, didChange) {
  var instance = workInProgress.stateNode;
  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  if (didChange) {
    // Merge parent and own context.
    // Skip this if we're not updating due to sCU.
    // This avoids unnecessarily recomputing memoized values.
    var mergedContext = processChildContext(workInProgress, type, previousContext);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

    // Replace the old (or empty) context with the new one.
    // It is important to unwind the context in the reverse order.
    pop(didPerformWorkStackCursor, workInProgress);
    pop(contextStackCursor, workInProgress);
    // Now push the new context and mark that it has changed.
    push(contextStackCursor, mergedContext, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  } else {
    pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }
}

function findCurrentUnmaskedContext(fiber) {
  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
  // makes sense elsewhere
  !(isFiberMounted(fiber) && (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy)) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  var node = fiber;
  do {
    switch (node.tag) {
      case HostRoot:
        return node.stateNode.context;
      case ClassComponent:
        {
          var Component = node.type;
          if (isContextProvider(Component)) {
            return node.stateNode.__reactInternalMemoizedMergedChildContext;
          }
          break;
        }
      case ClassComponentLazy:
        {
          var _Component = getResultFromResolvedThenable(node.type);
          if (isContextProvider(_Component)) {
            return node.stateNode.__reactInternalMemoizedMergedChildContext;
          }
          break;
        }
    }
    node = node.return;
  } while (node !== null);
  invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;

function catchErrors(fn) {
  return function (arg) {
    try {
      return fn(arg);
    } catch (err) {
      if (true && !hasLoggedError) {
        hasLoggedError = true;
        warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
      }
    }
  };
}

var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }
  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }
  if (!hook.supportsFiber) {
    {
      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    }
    // DevTools exists, even though it doesn't support Fiber.
    return true;
  }
  try {
    var rendererID = hook.inject(internals);
    // We have successfully injected, so now it is safe to set up hooks.
    onCommitFiberRoot = catchErrors(function (root) {
      return hook.onCommitFiberRoot(rendererID, root);
    });
    onCommitFiberUnmount = catchErrors(function (fiber) {
      return hook.onCommitFiberUnmount(rendererID, fiber);
    });
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
    }
  }
  // DevTools exists
  return true;
}

function onCommitRoot(root) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root);
  }
}

function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var maxSigned31BitInt = 1073741823;

var NoWork = 0;
var Sync = 1;
var Never = maxSigned31BitInt;

var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = 2;

// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
}

function expirationTimeToMs(expirationTime) {
  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET + ceiling(currentTime - MAGIC_NUMBER_OFFSET + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
}

var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;

function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}

// We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.
var HIGH_PRIORITY_EXPIRATION = 500;
var HIGH_PRIORITY_BATCH_SIZE = 100;

function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}

var NoContext = 0;
var AsyncMode = 1;
var StrictMode = 2;
var ProfileMode = 4;

var hasBadMapPolyfill = void 0;

{
  hasBadMapPolyfill = false;
  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]);
    // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.
    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.


var debugCounter = void 0;

{
  debugCounter = 1;
}

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.type = null;
  this.stateNode = null;

  // Fiber
  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;

  this.ref = null;

  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.firstContextDependency = null;

  this.mode = mode;

  // Effects
  this.effectTag = NoEffect;
  this.nextEffect = null;

  this.firstEffect = null;
  this.lastEffect = null;

  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;

  this.alternate = null;

  if (enableProfilerTimer) {
    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  }

  {
    this._debugID = debugCounter++;
    this._debugSource = null;
    this._debugOwner = null;
    this._debugIsCurrentlyTiming = false;
    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
}

// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function resolveLazyComponentTag(fiber, Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponentLazy : FunctionalComponentLazy;
  } else if (Component !== undefined && Component !== null && Component.$$typeof) {
    return ForwardRefLazy;
  }
  return IndeterminateComponent;
}

// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;
  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps;

    // We already have an alternate.
    // Reset the effect tag.
    workInProgress.effectTag = NoEffect;

    // The effect list is no longer valid.
    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    if (enableProfilerTimer) {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  // Don't touching the subtree's expiration time, which has not changed.
  workInProgress.childExpirationTime = current.childExpirationTime;
  if (pendingProps !== current.pendingProps) {
    // This fiber has new props.
    workInProgress.expirationTime = expirationTime;
  } else {
    // This fiber's props have not changed.
    workInProgress.expirationTime = current.expirationTime;
  }

  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.firstContextDependency = current.firstContextDependency;

  // These will be overridden during the parent's reconciliation
  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  if (enableProfilerTimer) {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  return workInProgress;
}

function createHostRootFiber(isAsync) {
  var mode = isAsync ? AsyncMode | StrictMode : NoContext;

  if (enableProfilerTimer && isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}

function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;
  {
    owner = element._owner;
  }

  var fiber = void 0;
  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;

  var fiberTag = void 0;
  if (typeof type === 'function') {
    fiberTag = shouldConstruct(type) ? ClassComponent : IndeterminateComponent;
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
      case REACT_ASYNC_MODE_TYPE:
        fiberTag = Mode;
        mode |= AsyncMode | StrictMode;
        break;
      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;
      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
      case REACT_PLACEHOLDER_TYPE:
        fiberTag = PlaceholderComponent;
        break;
      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;
              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;
              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;
                break getTag;
              default:
                {
                  if (typeof type.then === 'function') {
                    fiberTag = IndeterminateComponent;
                    break getTag;
                  }
                }
            }
          }
          var info = '';
          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }
            var ownerName = owner ? getComponentName(owner.type) : null;
            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }
          invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.type = type;
  fiber.expirationTime = expirationTime;

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}

function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;

  return fiber;
}

function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoContext);
  fiber.type = 'DELETED';
  return fiber;
}

function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null, // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
}

// Used for stashing WIP properties to replay failed work in DEV.
function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoContext);
  }

  // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.

  target.tag = source.tag;
  target.key = source.key;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.firstContextDependency = source.firstContextDependency;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;
  if (enableProfilerTimer) {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }
  target._debugID = source._debugID;
  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  return target;
}

var ReactInternals$2 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var _ReactInternals$Sched$1 = ReactInternals$2.ScheduleTracing;
var __interactionsRef = _ReactInternals$Sched$1.__interactionsRef;
var __subscriberRef = _ReactInternals$Sched$1.__subscriberRef;
var unstable_clear = _ReactInternals$Sched$1.unstable_clear;
var unstable_getCurrent = _ReactInternals$Sched$1.unstable_getCurrent;
var unstable_getThreadID = _ReactInternals$Sched$1.unstable_getThreadID;
var unstable_subscribe = _ReactInternals$Sched$1.unstable_subscribe;
var unstable_trace = _ReactInternals$Sched$1.unstable_trace;
var unstable_unsubscribe = _ReactInternals$Sched$1.unstable_unsubscribe;
var unstable_wrap = _ReactInternals$Sched$1.unstable_wrap;

/* eslint-disable no-use-before-define */
// TODO: This should be lifted into the renderer.


// The following attributes are only used by interaction tracing builds.
// They enable interactions to be associated with their async work,
// And expose interaction metadata to the React DevTools Profiler plugin.
// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.


// Exported FiberRoot type includes all properties,
// To avoid requiring potentially error-prone :any casts throughout the project.
// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
// The types are defined separately within this file to ensure they stay in sync.
// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)

/* eslint-enable no-use-before-define */

function createFiberRoot(containerInfo, isAsync, hydrate) {
  // Cyclic construction. This cheats the type system right now because
  // stateNode is any.
  var uninitializedFiber = createHostRootFiber(isAsync);

  var root = void 0;
  if (enableSchedulerTracing) {
    root = {
      current: uninitializedFiber,
      containerInfo: containerInfo,
      pendingChildren: null,

      earliestPendingTime: NoWork,
      latestPendingTime: NoWork,
      earliestSuspendedTime: NoWork,
      latestSuspendedTime: NoWork,
      latestPingedTime: NoWork,

      didError: false,

      pendingCommitExpirationTime: NoWork,
      finishedWork: null,
      timeoutHandle: noTimeout,
      context: null,
      pendingContext: null,
      hydrate: hydrate,
      nextExpirationTimeToWorkOn: NoWork,
      expirationTime: NoWork,
      firstBatch: null,
      nextScheduledRoot: null,

      interactionThreadID: unstable_getThreadID(),
      memoizedInteractions: new Set(),
      pendingInteractionMap: new Map()
    };
  } else {
    root = {
      current: uninitializedFiber,
      containerInfo: containerInfo,
      pendingChildren: null,

      earliestPendingTime: NoWork,
      latestPendingTime: NoWork,
      earliestSuspendedTime: NoWork,
      latestSuspendedTime: NoWork,
      latestPingedTime: NoWork,

      didError: false,

      pendingCommitExpirationTime: NoWork,
      finishedWork: null,
      timeoutHandle: noTimeout,
      context: null,
      pendingContext: null,
      hydrate: hydrate,
      nextExpirationTimeToWorkOn: NoWork,
      expirationTime: NoWork,
      firstBatch: null,
      nextScheduledRoot: null
    };
  }

  uninitializedFiber.stateNode = root;

  // The reason for the way the Flow types are structured in this file,
  // Is to avoid needing :any casts everywhere interaction tracing fields are used.
  // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
  // $FlowFixMe Remove this :any cast and replace it with something better.
  return root;
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning$1 = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning$1.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

var ReactStrictModeWarnings = {
  discardPendingWarnings: function () {},
  flushPendingDeprecationWarnings: function () {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordDeprecationWarnings: function (fiber, instance) {},
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {}
};

{
  var LIFECYCLE_SUGGESTIONS = {
    UNSAFE_componentWillMount: 'componentDidMount',
    UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
    UNSAFE_componentWillUpdate: 'componentDidUpdate'
  };

  var pendingComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUnsafeLifecycleWarnings = new Map();
  var pendingLegacyContextWarning = new Map();

  // Tracks components we have already warned about.
  var didWarnAboutDeprecatedLifecycles = new Set();
  var didWarnAboutUnsafeLifecycles = new Set();
  var didWarnAboutLegacyContext = new Set();

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUnsafeLifecycleWarnings = new Map();
    pendingLegacyContextWarning = new Map();
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
      var lifecyclesWarningMesages = [];

      Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
        var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
        if (lifecycleWarnings.length > 0) {
          var componentNames = new Set();
          lifecycleWarnings.forEach(function (fiber) {
            componentNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });

          var formatted = lifecycle.replace('UNSAFE_', '');
          var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
          var sortedComponentNames = setToSortedString(componentNames);

          lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
        }
      });

      if (lifecyclesWarningMesages.length > 0) {
        var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

        warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\n\n'));
      }
    });

    pendingUnsafeLifecycleWarnings = new Map();
  };

  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;

    var node = fiber;
    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }
      node = node.return;
    }

    return maybeStrictRoot;
  };

  ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
    if (pendingComponentWillMountWarnings.length > 0) {
      var uniqueNames = new Set();
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var sortedNames = setToSortedString(uniqueNames);

      lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);

      pendingComponentWillMountWarnings = [];
    }

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      var _uniqueNames = new Set();
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        _uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var _sortedNames = setToSortedString(_uniqueNames);

      lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);

      pendingComponentWillReceivePropsWarnings = [];
    }

    if (pendingComponentWillUpdateWarnings.length > 0) {
      var _uniqueNames2 = new Set();
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        _uniqueNames2.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var _sortedNames2 = setToSortedString(_uniqueNames2);

      lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);

      pendingComponentWillUpdateWarnings = [];
    }
  };

  ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
      return;
    }

    // Don't warn about react-lifecycles-compat polyfilled components.
    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }
    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }
    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);
    if (strictRoot === null) {
      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    }

    // Dedup strategy: Warn once per component.
    // This is difficult to track any other way since component names
    // are often vague and are likely to collide between 3rd party libraries.
    // An expand property is probably okay to use here since it's DEV-only,
    // and will only be set in the event of serious warnings.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    var warningsForRoot = void 0;
    if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
      warningsForRoot = {
        UNSAFE_componentWillMount: [],
        UNSAFE_componentWillReceiveProps: [],
        UNSAFE_componentWillUpdate: []
      };

      pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
    } else {
      warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
    }

    var unsafeLifecycles = [];
    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillMount');
    }
    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
    }
    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillUpdate');
    }

    if (unsafeLifecycles.length > 0) {
      unsafeLifecycles.forEach(function (lifecycle) {
        warningsForRoot[lifecycle].push(fiber);
      });
    }
  };

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);
    if (strictRoot === null) {
      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    }

    // Dedup strategy: Warn once per component.
    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }
      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });

      var sortedNames = setToSortedString(uniqueNames);
      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
    });
  };
}

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};

var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

// TODO: Offscreen updates should never suspend. However, a promise that
// suspended inside an offscreen subtree should be able to ping at the priority
// of the outer render.

function markPendingPriorityLevel(root, expirationTime) {
  // If there's a gap between completing a failed root and retrying it,
  // additional updates may be scheduled. Clear `didError`, in case the update
  // is sufficient to fix the error.
  root.didError = false;

  // Update the latest and earliest pending times
  var earliestPendingTime = root.earliestPendingTime;
  if (earliestPendingTime === NoWork) {
    // No other pending updates.
    root.earliestPendingTime = root.latestPendingTime = expirationTime;
  } else {
    if (earliestPendingTime > expirationTime) {
      // This is the earliest pending update.
      root.earliestPendingTime = expirationTime;
    } else {
      var latestPendingTime = root.latestPendingTime;
      if (latestPendingTime < expirationTime) {
        // This is the latest pending update
        root.latestPendingTime = expirationTime;
      }
    }
  }
  findNextExpirationTimeToWorkOn(expirationTime, root);
}

function markCommittedPriorityLevels(root, earliestRemainingTime) {
  root.didError = false;

  if (earliestRemainingTime === NoWork) {
    // Fast path. There's no remaining work. Clear everything.
    root.earliestPendingTime = NoWork;
    root.latestPendingTime = NoWork;
    root.earliestSuspendedTime = NoWork;
    root.latestSuspendedTime = NoWork;
    root.latestPingedTime = NoWork;
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  // Let's see if the previous latest known pending level was just flushed.
  var latestPendingTime = root.latestPendingTime;
  if (latestPendingTime !== NoWork) {
    if (latestPendingTime < earliestRemainingTime) {
      // We've flushed all the known pending levels.
      root.earliestPendingTime = root.latestPendingTime = NoWork;
    } else {
      var earliestPendingTime = root.earliestPendingTime;
      if (earliestPendingTime < earliestRemainingTime) {
        // We've flushed the earliest known pending level. Set this to the
        // latest pending time.
        root.earliestPendingTime = root.latestPendingTime;
      }
    }
  }

  // Now let's handle the earliest remaining level in the whole tree. We need to
  // decide whether to treat it as a pending level or as suspended. Check
  // it falls within the range of known suspended levels.

  var earliestSuspendedTime = root.earliestSuspendedTime;
  if (earliestSuspendedTime === NoWork) {
    // There's no suspended work. Treat the earliest remaining level as a
    // pending level.
    markPendingPriorityLevel(root, earliestRemainingTime);
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  var latestSuspendedTime = root.latestSuspendedTime;
  if (earliestRemainingTime > latestSuspendedTime) {
    // The earliest remaining level is later than all the suspended work. That
    // means we've flushed all the suspended work.
    root.earliestSuspendedTime = NoWork;
    root.latestSuspendedTime = NoWork;
    root.latestPingedTime = NoWork;

    // There's no suspended work. Treat the earliest remaining level as a
    // pending level.
    markPendingPriorityLevel(root, earliestRemainingTime);
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  if (earliestRemainingTime < earliestSuspendedTime) {
    // The earliest remaining time is earlier than all the suspended work.
    // Treat it as a pending update.
    markPendingPriorityLevel(root, earliestRemainingTime);
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  // The earliest remaining time falls within the range of known suspended
  // levels. We should treat this as suspended work.
  findNextExpirationTimeToWorkOn(NoWork, root);
}

function hasLowerPriorityWork(root, erroredExpirationTime) {
  var latestPendingTime = root.latestPendingTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  var latestPingedTime = root.latestPingedTime;
  return latestPendingTime !== NoWork && latestPendingTime > erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime > erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime > erroredExpirationTime;
}

function isPriorityLevelSuspended(root, expirationTime) {
  var earliestSuspendedTime = root.earliestSuspendedTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  return earliestSuspendedTime !== NoWork && expirationTime >= earliestSuspendedTime && expirationTime <= latestSuspendedTime;
}

function markSuspendedPriorityLevel(root, suspendedTime) {
  root.didError = false;
  clearPing(root, suspendedTime);

  // First, check the known pending levels and update them if needed.
  var earliestPendingTime = root.earliestPendingTime;
  var latestPendingTime = root.latestPendingTime;
  if (earliestPendingTime === suspendedTime) {
    if (latestPendingTime === suspendedTime) {
      // Both known pending levels were suspended. Clear them.
      root.earliestPendingTime = root.latestPendingTime = NoWork;
    } else {
      // The earliest pending level was suspended. Clear by setting it to the
      // latest pending level.
      root.earliestPendingTime = latestPendingTime;
    }
  } else if (latestPendingTime === suspendedTime) {
    // The latest pending level was suspended. Clear by setting it to the
    // latest pending level.
    root.latestPendingTime = earliestPendingTime;
  }

  // Finally, update the known suspended levels.
  var earliestSuspendedTime = root.earliestSuspendedTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  if (earliestSuspendedTime === NoWork) {
    // No other suspended levels.
    root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
  } else {
    if (earliestSuspendedTime > suspendedTime) {
      // This is the earliest suspended level.
      root.earliestSuspendedTime = suspendedTime;
    } else if (latestSuspendedTime < suspendedTime) {
      // This is the latest suspended level
      root.latestSuspendedTime = suspendedTime;
    }
  }

  findNextExpirationTimeToWorkOn(suspendedTime, root);
}

function markPingedPriorityLevel(root, pingedTime) {
  root.didError = false;

  // TODO: When we add back resuming, we need to ensure the progressed work
  // is thrown out and not reused during the restarted render. One way to
  // invalidate the progressed work is to restart at expirationTime + 1.
  var latestPingedTime = root.latestPingedTime;
  if (latestPingedTime === NoWork || latestPingedTime < pingedTime) {
    root.latestPingedTime = pingedTime;
  }
  findNextExpirationTimeToWorkOn(pingedTime, root);
}

function clearPing(root, completedTime) {
  // TODO: Track whether the root was pinged during the render phase. If so,
  // we need to make sure we don't lose track of it.
  var latestPingedTime = root.latestPingedTime;
  if (latestPingedTime !== NoWork && latestPingedTime <= completedTime) {
    root.latestPingedTime = NoWork;
  }
}

function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
  var earliestExpirationTime = renderExpirationTime;

  var earliestPendingTime = root.earliestPendingTime;
  var earliestSuspendedTime = root.earliestSuspendedTime;
  if (earliestExpirationTime === NoWork || earliestPendingTime !== NoWork && earliestPendingTime < earliestExpirationTime) {
    earliestExpirationTime = earliestPendingTime;
  }
  if (earliestExpirationTime === NoWork || earliestSuspendedTime !== NoWork && earliestSuspendedTime < earliestExpirationTime) {
    earliestExpirationTime = earliestSuspendedTime;
  }
  return earliestExpirationTime;
}

function didExpireAtExpirationTime(root, currentTime) {
  var expirationTime = root.expirationTime;
  if (expirationTime !== NoWork && currentTime >= expirationTime) {
    // The root has expired. Flush all work up to the current time.
    root.nextExpirationTimeToWorkOn = currentTime;
  }
}

function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
  var earliestSuspendedTime = root.earliestSuspendedTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  var earliestPendingTime = root.earliestPendingTime;
  var latestPingedTime = root.latestPingedTime;

  // Work on the earliest pending time. Failing that, work on the latest
  // pinged time.
  var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime;

  // If there is no pending or pinged work, check if there's suspended work
  // that's lower priority than what we just completed.
  if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime > completedExpirationTime)) {
    // The lowest priority suspended work is the work most likely to be
    // committed next. Let's start rendering it again, so that if it times out,
    // it's ready to commit.
    nextExpirationTimeToWorkOn = latestSuspendedTime;
  }

  var expirationTime = nextExpirationTimeToWorkOn;
  if (expirationTime !== NoWork && earliestSuspendedTime !== NoWork && earliestSuspendedTime < expirationTime) {
    // Expire using the earliest known expiration time.
    expirationTime = earliestSuspendedTime;
  }

  root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
  root.expirationTime = expirationTime;
}

// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which is
// can be mutated and processed asynchronously before it is committed — a form
// of double buffering. If a work-in-progress render is discarded before
// finishing, we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3;

// Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.
var hasForceUpdate = false;

var didWarnUpdateInsideUpdate = void 0;
var currentlyProcessingQueue = void 0;
var resetCurrentlyProcessingQueue = void 0;
{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
  resetCurrentlyProcessingQueue = function () {
    currentlyProcessingQueue = null;
  };
}

function createUpdateQueue(baseState) {
  var queue = {
    baseState: baseState,
    firstUpdate: null,
    lastUpdate: null,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function cloneUpdateQueue(currentQueue) {
  var queue = {
    baseState: currentQueue.baseState,
    firstUpdate: currentQueue.firstUpdate,
    lastUpdate: currentQueue.lastUpdate,

    // TODO: With resuming, if we bail out and resuse the child tree, we should
    // keep these effects.
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,

    firstEffect: null,
    lastEffect: null,

    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function createUpdate(expirationTime) {
  return {
    expirationTime: expirationTime,

    tag: UpdateState,
    payload: null,
    callback: null,

    next: null,
    nextEffect: null
  };
}

function appendUpdateToQueue(queue, update) {
  // Append the update to the end of the list.
  if (queue.lastUpdate === null) {
    // Queue is empty
    queue.firstUpdate = queue.lastUpdate = update;
  } else {
    queue.lastUpdate.next = update;
    queue.lastUpdate = update;
  }
}

function enqueueUpdate(fiber, update) {
  // Update queues are created lazily.
  var alternate = fiber.alternate;
  var queue1 = void 0;
  var queue2 = void 0;
  if (alternate === null) {
    // There's only one fiber.
    queue1 = fiber.updateQueue;
    queue2 = null;
    if (queue1 === null) {
      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
    }
  } else {
    // There are two owners.
    queue1 = fiber.updateQueue;
    queue2 = alternate.updateQueue;
    if (queue1 === null) {
      if (queue2 === null) {
        // Neither fiber has an update queue. Create new ones.
        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
      } else {
        // Only one fiber has an update queue. Clone to create a new one.
        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
      }
    } else {
      if (queue2 === null) {
        // Only one fiber has an update queue. Clone to create a new one.
        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
      } else {
        // Both owners have an update queue.
      }
    }
  }
  if (queue2 === null || queue1 === queue2) {
    // There's only a single queue.
    appendUpdateToQueue(queue1, update);
  } else {
    // There are two queues. We need to append the update to both queues,
    // while accounting for the persistent structure of the list — we don't
    // want the same update to be added multiple times.
    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
      // One of the queues is not empty. We must add the update to both queues.
      appendUpdateToQueue(queue1, update);
      appendUpdateToQueue(queue2, update);
    } else {
      // Both queues are non-empty. The last update is the same in both lists,
      // because of structural sharing. So, only append to one of the lists.
      appendUpdateToQueue(queue1, update);
      // But we still need to update the `lastUpdate` pointer of queue2.
      queue2.lastUpdate = update;
    }
  }

  {
    if ((fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }
}

function enqueueCapturedUpdate(workInProgress, update) {
  // Captured updates go into a separate list, and only on the work-in-
  // progress queue.
  var workInProgressQueue = workInProgress.updateQueue;
  if (workInProgressQueue === null) {
    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
  } else {
    // TODO: I put this here rather than createWorkInProgress so that we don't
    // clone the queue unnecessarily. There's probably a better way to
    // structure this.
    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
  }

  // Append the update to the end of the list.
  if (workInProgressQueue.lastCapturedUpdate === null) {
    // This is the first render phase update
    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
  } else {
    workInProgressQueue.lastCapturedUpdate.next = update;
    workInProgressQueue.lastCapturedUpdate = update;
  }
}

function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
  var current = workInProgress.alternate;
  if (current !== null) {
    // If the work-in-progress queue is equal to the current queue,
    // we need to clone it first.
    if (queue === current.updateQueue) {
      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
    }
  }
  return queue;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var _payload = update.payload;
        if (typeof _payload === 'function') {
          // Updater function
          {
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }
          return _payload.call(instance, prevState, nextProps);
        }
        // State object
        return _payload;
      }
    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough
    case UpdateState:
      {
        var _payload2 = update.payload;
        var partialState = void 0;
        if (typeof _payload2 === 'function') {
          // Updater function
          {
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload2.call(instance, prevState, nextProps);
            }
          }
          partialState = _payload2.call(instance, prevState, nextProps);
        } else {
          // Partial state object
          partialState = _payload2;
        }
        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        }
        // Merge the partial state and the previous state.
        return _assign({}, prevState, partialState);
      }
    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }
  return prevState;
}

function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
  hasForceUpdate = false;

  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

  {
    currentlyProcessingQueue = queue;
  }

  // These values may change as we process the queue.
  var newBaseState = queue.baseState;
  var newFirstUpdate = null;
  var newExpirationTime = NoWork;

  // Iterate through the list of updates to compute the result.
  var update = queue.firstUpdate;
  var resultState = newBaseState;
  while (update !== null) {
    var updateExpirationTime = update.expirationTime;
    if (updateExpirationTime > renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstUpdate === null) {
        // This is the first skipped update. It will be the first update in
        // the new list.
        newFirstUpdate = update;
        // Since this is the first update that was skipped, the current result
        // is the new base state.
        newBaseState = resultState;
      }
      // Since this update will remain in the list, update the remaining
      // expiration time.
      if (newExpirationTime === NoWork || newExpirationTime > updateExpirationTime) {
        newExpirationTime = updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback = update.callback;
      if (_callback !== null) {
        workInProgress.effectTag |= Callback;
        // Set this to null, in case it was mutated during an aborted render.
        update.nextEffect = null;
        if (queue.lastEffect === null) {
          queue.firstEffect = queue.lastEffect = update;
        } else {
          queue.lastEffect.nextEffect = update;
          queue.lastEffect = update;
        }
      }
    }
    // Continue to the next update.
    update = update.next;
  }

  // Separately, iterate though the list of captured updates.
  var newFirstCapturedUpdate = null;
  update = queue.firstCapturedUpdate;
  while (update !== null) {
    var _updateExpirationTime = update.expirationTime;
    if (_updateExpirationTime > renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstCapturedUpdate === null) {
        // This is the first skipped captured update. It will be the first
        // update in the new list.
        newFirstCapturedUpdate = update;
        // If this is the first update that was skipped, the current result is
        // the new base state.
        if (newFirstUpdate === null) {
          newBaseState = resultState;
        }
      }
      // Since this update will remain in the list, update the remaining
      // expiration time.
      if (newExpirationTime === NoWork || newExpirationTime > _updateExpirationTime) {
        newExpirationTime = _updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback2 = update.callback;
      if (_callback2 !== null) {
        workInProgress.effectTag |= Callback;
        // Set this to null, in case it was mutated during an aborted render.
        update.nextEffect = null;
        if (queue.lastCapturedEffect === null) {
          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
        } else {
          queue.lastCapturedEffect.nextEffect = update;
          queue.lastCapturedEffect = update;
        }
      }
    }
    update = update.next;
  }

  if (newFirstUpdate === null) {
    queue.lastUpdate = null;
  }
  if (newFirstCapturedUpdate === null) {
    queue.lastCapturedUpdate = null;
  } else {
    workInProgress.effectTag |= Callback;
  }
  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
    // We processed every update, without skipping. That means the new base
    // state is the same as the result state.
    newBaseState = resultState;
  }

  queue.baseState = newBaseState;
  queue.firstUpdate = newFirstUpdate;
  queue.firstCapturedUpdate = newFirstCapturedUpdate;

  // Set the remaining expiration time to be whatever is remaining in the queue.
  // This should be fine because the only two other things that contribute to
  // expiration time are props and context. We're already in the middle of the
  // begin phase by the time we start processing the queue, so we've already
  // dealt with the props. Context in components that specify
  // shouldComponentUpdate is tricky; but we'll have to account for
  // that regardless.
  workInProgress.expirationTime = newExpirationTime;
  workInProgress.memoizedState = resultState;

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}

function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}

function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
  // If the finished render included captured updates, and there are still
  // lower priority updates left over, we need to keep the captured updates
  // in the queue so that they are rebased and not dropped once we process the
  // queue again at the lower priority.
  if (finishedQueue.firstCapturedUpdate !== null) {
    // Join the captured update list to the end of the normal list.
    if (finishedQueue.lastUpdate !== null) {
      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
    }
    // Clear the list of captured updates.
    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
  }

  // Commit the effects
  commitUpdateEffects(finishedQueue.firstEffect, instance);
  finishedQueue.firstEffect = finishedQueue.lastEffect = null;

  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
}

function commitUpdateEffects(effect, instance) {
  while (effect !== null) {
    var _callback3 = effect.callback;
    if (_callback3 !== null) {
      effect.callback = null;
      callCallback(_callback3, instance);
    }
    effect = effect.nextEffect;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

var valueCursor = createCursor(null);

var rendererSigil = void 0;
{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;

function resetContextDependences() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
}

function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    push(valueCursor, context._currentValue, providerFiber);

    context._currentValue = nextValue;
    {
      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer = rendererSigil;
    }
  } else {
    push(valueCursor, context._currentValue2, providerFiber);

    context._currentValue2 = nextValue;
    {
      !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer2 = rendererSigil;
    }
  }
}

function popProvider(providerFiber) {
  var currentValue = valueCursor.current;

  pop(valueCursor, providerFiber);

  var context = providerFiber.type._context;
  if (isPrimaryRenderer) {
    context._currentValue = currentValue;
  } else {
    context._currentValue2 = currentValue;
  }
}

function calculateChangedBits(context, newValue, oldValue) {
  // Use Object.is to compare the new context value to the old value. Inlined
  // Object.is polyfill.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare
  ) {
      // No change
      return 0;
    } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;

    {
      !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
    }
    return changedBits | 0;
  }
}

function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;
  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }
  while (fiber !== null) {
    var nextFiber = void 0;

    // Visit this fiber.
    var dependency = fiber.firstContextDependency;
    if (dependency !== null) {
      do {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.

          if (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime);
            update.tag = ForceUpdate;
            // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.
            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime === NoWork || fiber.expirationTime > renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
            alternate.expirationTime = renderExpirationTime;
          }
          // Update the child expiration time of all the ancestors, including
          // the alternates.
          var node = fiber.return;
          while (node !== null) {
            alternate = node.alternate;
            if (node.childExpirationTime === NoWork || node.childExpirationTime > renderExpirationTime) {
              node.childExpirationTime = renderExpirationTime;
              if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > renderExpirationTime)) {
                alternate.childExpirationTime = renderExpirationTime;
              }
            } else if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > renderExpirationTime)) {
              alternate.childExpirationTime = renderExpirationTime;
            } else {
              // Neither alternate was updated, which means the rest of the
              // ancestor path already has sufficient priority.
              break;
            }
            node = node.return;
          }
        }
        nextFiber = fiber.child;
        dependency = dependency.next;
      } while (dependency !== null);
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;
      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }
        var sibling = nextFiber.sibling;
        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        }
        // No more siblings. Traverse up.
        nextFiber = nextFiber.return;
      }
    }
    fiber = nextFiber;
  }
}

function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  // Reset the work-in-progress list
  workInProgress.firstContextDependency = null;
}

function readContext(context, observedBits) {
  if (lastContextWithAllBitsObserved === context) {
    // Nothing to do. We already observe everything in this context.
  } else if (observedBits === false || observedBits === 0) {
    // Do not observe any updates.
  } else {
    var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
    if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = maxSigned31BitInt;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      !(currentlyRenderingFiber !== null) ? invariant(false, 'Context.unstable_read(): Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0;
      // This is the first dependency in the list
      currentlyRenderingFiber.firstContextDependency = lastContextDependency = contextItem;
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }
  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
}

var NO_CONTEXT = {};

var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber);
  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);

  // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.
  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance);
  // Now that we know this function doesn't throw, replace it.
  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type, rootInstance);

  // Don't push this Fiber's context unless it's unique.
  if (context === nextContext) {
    return;
  }

  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {
  if (!enableProfilerTimer) {
    return;
  }
  commitTime = unstable_now();
}

function startProfilerTimer(fiber) {
  if (!enableProfilerTimer) {
    return;
  }

  profilerStartTime = unstable_now();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = unstable_now();
  }
}

function stopProfilerTimerIfRunning(fiber) {
  if (!enableProfilerTimer) {
    return;
  }
  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
  if (!enableProfilerTimer) {
    return;
  }

  if (profilerStartTime >= 0) {
    var elapsedTime = unstable_now() - profilerStartTime;
    fiber.actualDuration += elapsedTime;
    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }
    profilerStartTime = -1;
  }
}

var fakeInternalInstance = {};
var isArray = Array.isArray;

// React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.
var emptyRefsObject = new React.Component().refs;

var didWarnAboutStateAssignmentForComponent = void 0;
var didWarnAboutUninitializedState = void 0;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
var didWarnAboutUndefinedDerivedState = void 0;
var warnOnUndefinedDerivedState = void 0;
var warnOnInvalidCallback$1 = void 0;
var didWarnAboutDirectlyAssigningPropsToState = void 0;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();

  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback$1 = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }
    var key = callerName + '_' + callback;
    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);
      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';
      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);
        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  };

  // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.
  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  }
  // Merge the partial state and the previous state.
  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState;

  // Once the update queue is empty, persist the derived state onto the
  // base state.
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
    updateQueue.baseState = memoizedState;
  }
}

var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.payload = payload;
    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'setState');
      }
      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'replaceState');
      }
      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'forceUpdate');
      }
      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext) {
  var instance = workInProgress.stateNode;
  if (typeof instance.shouldComponentUpdate === 'function') {
    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextLegacyContext);
    stopPhaseTimer();

    {
      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;
  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
    var noInstancePropTypes = !instance.propTypes;
    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
    var noInstanceContextTypes = !instance.contextTypes;
    !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;
    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }
    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
    var hasMutatedProps = instance.props !== newProps;
    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
    var noInstanceDefaultProps = !instance.defaultProps;
    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromCatch !== 'function';
    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromCatch() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
    var _state = instance.state;
    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
    }
    if (typeof instance.getChildContext === 'function') {
      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance;
  // The instance needs access to the fiber so that it can schedule updates
  set(instance, workInProgress);
  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
  var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
  var contextTypes = ctor.contextTypes;
  var isContextConsumer = contextTypes !== null && contextTypes !== undefined;
  var context = isContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;

  // Instantiate twice to help detect side-effects.
  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';
      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);
        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    }

    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.
    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;
      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }
      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }
      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }
      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';
        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
        }
      }
    }
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.
  if (isContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }
  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }
    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');
  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextLegacyContext);
  }
  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextLegacyContext);
  }
  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';
      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);
        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }
    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

// Invokes the mount life-cycles on a previously never rendered instance.
function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);

  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  instance.context = getMaskedContext(workInProgress, unmaskedContext);

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';
      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);

      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
    }
  }

  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  }

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance);
    // If we had additional state updates during this life-cycle, let's
    // process them now.
    updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
      instance.state = workInProgress.memoizedState;
    }
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;

  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;

  var oldContext = instance.context;
  var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
  var nextLegacyContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

  // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextLegacyContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();

  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }
  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }
      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
      stopPhaseTimer();
    }
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.
    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  }

  // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.
  instance.props = newProps;
  instance.state = newState;
  instance.context = nextLegacyContext;

  return shouldUpdate;
}

// Invokes the update life-cycles and returns false if it shouldn't rerender.
function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;

  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;

  var oldContext = instance.context;
  var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
  var nextLegacyContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

  // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextLegacyContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();

  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }
    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');
      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextLegacyContext);
      }
      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextLegacyContext);
      }
      stopPhaseTimer();
    }
    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.
    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  }

  // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.
  instance.props = newProps;
  instance.state = newState;
  instance.context = nextLegacyContext;

  return shouldUpdate;
}

var didWarnAboutMaps = void 0;
var didWarnAboutGenerators = void 0;
var didWarnAboutStringRefInStrictMode = void 0;
var ownerHasKeyUseWarning = void 0;
var ownerHasFunctionTypeWarning = void 0;
var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefInStrictMode = {};

  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }
    if (!child._store || child._store.validated || child.key != null) {
      return;
    }
    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    child._store.validated = true;

    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();
    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    warning$1(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current$$1, element) {
  var mixedRef = element.ref;
  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      if (returnFiber.mode & StrictMode) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (!didWarnAboutStringRefInStrictMode[componentName]) {
          warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          didWarnAboutStringRefInStrictMode[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst = void 0;
      if (owner) {
        var ownerFiber = owner;
        !(ownerFiber.tag === ClassComponent || ownerFiber.tag === ClassComponentLazy) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
        inst = ownerFiber.stateNode;
      }
      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
      var stringRef = '' + mixedRef;
      // Check if previous string ref matches new string ref
      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
        return current$$1.ref;
      }
      var ref = function (value) {
        var refs = inst.refs;
        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }
        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };
      ref._stringRef = stringRef;
      return ref;
    } else {
      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
    }
  }
  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';
    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }
    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
}

// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }
    // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.
    var last = returnFiber.lastEffect;
    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    }

    // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.
    var childToDelete = currentFirstChild;
    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }
    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    var existingChildren = new Map();

    var existingChild = currentFirstChild;
    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }
      existingChild = existingChild.sibling;
    }
    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;
    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }
    var current$$1 = newFiber.alternate;
    if (current$$1 !== null) {
      var oldIndex = current$$1.index;
      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }
    return newFiber;
  }

  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current$$1, element, expirationTime) {
    if (current$$1 !== null && current$$1.type === element.type) {
      // Move based on index
      var existing = useFiber(current$$1, element.props, expirationTime);
      existing.ref = coerceRef(returnFiber, current$$1, element);
      existing.return = returnFiber;
      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }
      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
      created.ref = coerceRef(returnFiber, current$$1, element);
      created.return = returnFiber;
      return created;
    }
  }

  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, portal.children || [], expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
    if (current$$1 === null || current$$1.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, fragment, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }
        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.

    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }
      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }
              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }
            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }
        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;
        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  /**
   * Warns if there is a duplicate or missing key
   */
  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }
      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;
          if (typeof key !== 'string') {
            break;
          }
          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }
          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }
          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
          break;
        default:
          break;
      }
    }
    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from boths ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.

    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.

    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.

    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.

    {
      // First, validate keys.
      var knownKeys = null;
      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
        if (!_newFiber) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }
        previousNewFiber = _newFiber;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
      if (_newFiber2) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }
        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.

    var iteratorFn = getIteratorFn(newChildrenIterable);
    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' &&
      // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
        didWarnAboutGenerators = true;
      }

      // Warn about using Maps as children
      if (newChildrenIterable.entries === iteratorFn) {
        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
        didWarnAboutMaps = true;
      }

      // First, validate keys.
      // We'll get a different iterator later for the main pass.
      var _newChildren = iteratorFn.call(newChildrenIterable);
      if (_newChildren) {
        var knownKeys = null;
        var _step = _newChildren.next();
        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);
    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    var step = newChildren.next();
    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (!oldFiber) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
        if (_newFiber3 === null) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }
        previousNewFiber = _newFiber3;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }
        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
    // The existing first child is not a text node so we need to create one
    // and delete the existing ones.
    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, child, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.
  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.

    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    }

    // Handle object types
    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }
    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
        case ClassComponentLazy:
          {
            {
              var instance = returnFiber.stateNode;
              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough
        case FunctionalComponent:
          {
            var Component = returnFiber.type;
            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
          }
      }
    }

    // Remaining cases are all treated as empty.
    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);

function cloneChildFibers(current$$1, workInProgress) {
  !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;

  newChild.return = workInProgress;
  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild.return = workInProgress;
  }
  newChild.sibling = null;
}

// The deepest Fiber on the stack involved in a hydration context.
// This may have been an insertion or a hydration.
var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;
      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion;

  // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.
  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag |= Placement;
  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;
          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type, props);
              break;
            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
          }
          break;
        }
      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;
          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
              break;
            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;
          }
          break;
        }
      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type, props);
        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }
        return false;
      }
    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);
        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }
        return false;
      }
    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }
  var nextInstance = nextHydratableInstance;
  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }
  var firstAttemptedInstance = nextInstance;
  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }
    // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.
    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }
  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
  if (!supportsHydration) {
    invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
  }

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
  // TODO: Type this specific to this type of component.
  fiber.updateQueue = updatePayload;
  // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.
  if (updatePayload !== null) {
    return true;
  }
  return false;
}

function prepareToHydrateHostTextInstance(fiber) {
  if (!supportsHydration) {
    invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
  }

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;
      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }
          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }
  return shouldUpdate;
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;
  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
    parent = parent.return;
  }
  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }
  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }
  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type;

  // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.
  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;
    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);
  nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  return true;
}

function resetHydrationState() {
  if (!supportsHydration) {
    return;
  }

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

function readLazyComponentType(thenable) {
  var status = thenable._reactStatus;
  switch (status) {
    case Resolved:
      var Component = thenable._reactResult;
      return Component;
    case Rejected:
      throw thenable._reactResult;
    case Pending:
      throw thenable;
    default:
      {
        thenable._reactStatus = Pending;
        thenable.then(function (resolvedValue) {
          if (thenable._reactStatus === Pending) {
            thenable._reactStatus = Resolved;
            if (typeof resolvedValue === 'object' && resolvedValue !== null) {
              // If the `default` property is not empty, assume it's the result
              // of an async import() and use that. Otherwise, use the
              // resolved value itself.
              var defaultExport = resolvedValue.default;
              resolvedValue = defaultExport !== undefined && defaultExport !== null ? defaultExport : resolvedValue;
            } else {
              resolvedValue = resolvedValue;
            }
            thenable._reactResult = resolvedValue;
          }
        }, function (error) {
          if (thenable._reactStatus === Pending) {
            thenable._reactStatus = Rejected;
            thenable._reactResult = error;
          }
        });
        throw thenable;
      }
  }
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

var didWarnAboutBadClass = void 0;
var didWarnAboutGetDerivedStateOnFunctionalComponent = void 0;
var didWarnAboutStatelessRefs = void 0;

{
  didWarnAboutBadClass = {};
  didWarnAboutGetDerivedStateOnFunctionalComponent = {};
  didWarnAboutStatelessRefs = {};
}

function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  if (current$$1 === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.

    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }
}

function updateForwardRef(current$$1, workInProgress, type, nextProps, renderExpirationTime) {
  var render = type.render;
  var ref = workInProgress.ref;
  if (hasContextChanged()) {
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else if (workInProgress.memoizedProps === nextProps) {
    var currentRef = current$$1 !== null ? current$$1.ref : null;
    if (ref === currentRef) {
      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }
  }

  var nextChildren = void 0;
  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = render(nextProps, ref);
    setCurrentPhase(null);
  }

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function updateFragment(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextChildren);
  return workInProgress.child;
}

function updateMode(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextChildren);
  return workInProgress.child;
}

function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
  if (enableProfilerTimer) {
    workInProgress.effectTag |= Update;
  }
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function markRef(current$$1, workInProgress) {
  var ref = workInProgress.ref;
  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionalComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
  var context = getMaskedContext(workInProgress, unmaskedContext);

  var nextChildren = void 0;
  prepareToReadContext(workInProgress, renderExpirationTime);
  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = Component(nextProps, context);
    setCurrentPhase(null);
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.
  var hasContext = void 0;
  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }
  prepareToReadContext(workInProgress, renderExpirationTime);

  var shouldUpdate = void 0;
  if (current$$1 === null) {
    if (workInProgress.stateNode === null) {
      // In the initial pass we might need to construct the instance.
      constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      shouldUpdate = true;
    } else {
      // In a resume, we'll already have an instance we can reuse.
      shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    }
  } else {
    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }
  return finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
}

function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current$$1, workInProgress);

  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode;

  // Rerender
  ReactCurrentOwner$3.current = workInProgress;
  var nextChildren = void 0;
  if (didCaptureError && (!enableGetDerivedStateFromCatch || typeof Component.getDerivedStateFromCatch !== 'function')) {
    // If we captured an error, but getDerivedStateFrom catch is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    if (enableProfilerTimer) {
      stopProfilerTimerIfRunning(workInProgress);
    }
  } else {
    {
      setCurrentPhase('render');
      nextChildren = instance.render();
      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        instance.render();
      }
      setCurrentPhase(null);
    }
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  if (current$$1 !== null && didCaptureError) {
    // If we're recovering from an error, reconcile twice: first to delete
    // all the existing children.
    reconcileChildren(current$$1, workInProgress, null, renderExpirationTime);
    workInProgress.child = null;
    // Now we can continue reconciling like normal. This has the effect of
    // remounting all children regardless of whether their their
    // identity matches.
  }
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  // Memoize props and state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.
  memoizeState(workInProgress, instance.state);
  memoizeProps(workInProgress, instance.props);

  // The context might have changed so we need to recalculate it.
  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;
  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }
  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;
  !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState;
  // Caution: React DevTools currently depends on this property
  // being called "element".
  var nextChildren = nextState.element;
  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }
  var root = workInProgress.stateNode;
  if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.

    // This is a bit of a hack. We track the host root as a placement to
    // know that we're currently in a mounting state. That way isMounted
    // works as expected. We must reset this before committing.
    // TODO: Delete this when we delete isMounted and findDOMNode.
    workInProgress.effectTag |= Placement;

    // Ensure that children mount into this root without tracking
    // side-effects. This ensures that we don't store Placement effects on
    // nodes that will be hydrated.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }
  return workInProgress.child;
}

function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;

  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also have access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current$$1, workInProgress);

  // Check the host config to see if the children are offscreen/hidden.
  if (renderExpirationTime !== Never && workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps)) {
    // Schedule this fiber to re-render at offscreen priority. Then bailout.
    workInProgress.expirationTime = Never;
    workInProgress.memoizedProps = nextProps;
    return null;
  }

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function updateHostText(current$$1, workInProgress) {
  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }
  var nextProps = workInProgress.pendingProps;
  memoizeProps(workInProgress, nextProps);
  // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.
  return null;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);
    var defaultProps = Component.defaultProps;
    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
    return props;
  }
  return baseProps;
}

function mountIndeterminateComponent(current$$1, workInProgress, Component, renderExpirationTime) {
  !(current$$1 === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  var props = workInProgress.pendingProps;
  if (typeof Component === 'object' && Component !== null && typeof Component.then === 'function') {
    Component = readLazyComponentType(Component);
    var resolvedTag = workInProgress.tag = resolveLazyComponentTag(workInProgress, Component);
    var resolvedProps = resolveDefaultProps(Component, props);
    switch (resolvedTag) {
      case FunctionalComponentLazy:
        {
          return updateFunctionalComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);
        }
      case ClassComponentLazy:
        {
          return updateClassComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);
        }
      case ForwardRefLazy:
        {
          return updateForwardRef(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);
        }
      default:
        {
          // This message intentionally doesn't metion ForwardRef because the
          // fact that it's a separate type of work is an implementation detail.
          invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.', Component);
        }
    }
  }

  var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
  var context = getMaskedContext(workInProgress, unmaskedContext);

  prepareToReadContext(workInProgress, renderExpirationTime);

  var value = void 0;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    ReactCurrentOwner$3.current = workInProgress;
    value = Component(props, context);
  }
  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    // Proceed under the assumption that this is a class instance
    workInProgress.tag = ClassComponent;

    // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.
    var hasContext = false;
    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(current$$1, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a functional component
    workInProgress.tag = FunctionalComponent;
    {
      if (Component) {
        !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
      }
      if (workInProgress.ref !== null) {
        var info = '';
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          info += '\n\nCheck the render method of `' + ownerName + '`.';
        }

        var warningKey = ownerName || workInProgress._debugID || '';
        var debugSource = workInProgress._debugSource;
        if (debugSource) {
          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
        }
        if (!didWarnAboutStatelessRefs[warningKey]) {
          didWarnAboutStatelessRefs[warningKey] = true;
          warning$1(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s', info);
        }
      }

      if (typeof Component.getDerivedStateFromProps === 'function') {
        var _componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName]) {
          warningWithoutStack$1(false, '%s: Stateless functional components do not support getDerivedStateFromProps.', _componentName);
          didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName] = true;
        }
      }
    }
    reconcileChildren(current$$1, workInProgress, value, renderExpirationTime);
    memoizeProps(workInProgress, props);
    return workInProgress.child;
  }
}

function updatePlaceholderComponent(current$$1, workInProgress, renderExpirationTime) {
  if (enableSuspense) {
    var nextProps = workInProgress.pendingProps;

    // Check if we already attempted to render the normal state. If we did,
    // and we timed out, render the placeholder state.
    var alreadyCaptured = (workInProgress.effectTag & DidCapture) === NoEffect;

    var nextDidTimeout = void 0;
    if (current$$1 !== null && workInProgress.updateQueue !== null) {
      // We're outside strict mode. Something inside this Placeholder boundary
      // suspended during the last commit. Switch to the placholder.
      workInProgress.updateQueue = null;
      nextDidTimeout = true;
      // If we're recovering from an error, reconcile twice: first to delete
      // all the existing children.
      reconcileChildren(current$$1, workInProgress, null, renderExpirationTime);
      current$$1.child = null;
      // Now we can continue reconciling like normal. This has the effect of
      // remounting all children regardless of whether their their
      // identity matches.
    } else {
      nextDidTimeout = !alreadyCaptured;
    }

    if ((workInProgress.mode & StrictMode) !== NoEffect) {
      if (nextDidTimeout) {
        // If the timed-out view commits, schedule an update effect to record
        // the committed time.
        workInProgress.effectTag |= Update;
      } else {
        // The state node points to the time at which placeholder timed out.
        // We can clear it once we switch back to the normal children.
        workInProgress.stateNode = null;
      }
    }

    // If the `children` prop is a function, treat it like a render prop.
    // TODO: This is temporary until we finalize a lower level API.
    var children = nextProps.children;
    var nextChildren = void 0;
    if (typeof children === 'function') {
      nextChildren = children(nextDidTimeout);
    } else {
      nextChildren = nextDidTimeout ? nextProps.fallback : children;
    }

    workInProgress.memoizedProps = nextProps;
    workInProgress.memoizedState = nextDidTimeout;
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    return workInProgress.child;
  } else {
    return null;
  }
}

function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;
  if (current$$1 === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    memoizeProps(workInProgress, nextChildren);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    memoizeProps(workInProgress, nextChildren);
  }
  return workInProgress.child;
}

function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;

  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;

  var newValue = newProps.value;
  workInProgress.memoizedProps = newProps;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes_1(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);
    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
  var context = workInProgress.type;
  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren = void 0;
  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    newChildren = render(newValue);
    setCurrentPhase(null);
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  workInProgress.memoizedProps = newProps;
  return workInProgress.child;
}

/*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */

function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current$$1 !== null) {
    // Reuse previous context list
    workInProgress.firstContextDependency = current$$1.firstContextDependency;
  }

  if (enableProfilerTimer) {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning(workInProgress);
  }

  // Check if the children have any pending work.
  var childExpirationTime = workInProgress.childExpirationTime;
  if (childExpirationTime === NoWork || childExpirationTime > renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current$$1, workInProgress);
    return workInProgress.child;
  }
}

// TODO: Delete memoizeProps/State and move to reconcile/bailout instead
function memoizeProps(workInProgress, nextProps) {
  workInProgress.memoizedProps = nextProps;
}

function memoizeState(workInProgress, nextState) {
  workInProgress.memoizedState = nextState;
  // Don't reset the updateQueue, in case there are pending updates. Resetting
  // is handled by processUpdateQueue.
}

function beginWork(current$$1, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;
  if (!hasContextChanged() && (updateExpirationTime === NoWork || updateExpirationTime > renderExpirationTime)) {
    // This fiber does not have any pending work. Bailout without entering
    // the begin phase. There's still some bookkeeping we that needs to be done
    // in this optimized path, mostly pushing stuff onto the stack.
    switch (workInProgress.tag) {
      case HostRoot:
        pushHostRootContext(workInProgress);
        resetHydrationState();
        break;
      case HostComponent:
        pushHostContext(workInProgress);
        break;
      case ClassComponent:
        {
          var Component = workInProgress.type;
          if (isContextProvider(Component)) {
            pushContextProvider(workInProgress);
          }
          break;
        }
      case ClassComponentLazy:
        {
          var thenable = workInProgress.type;
          var _Component = getResultFromResolvedThenable(thenable);
          if (isContextProvider(_Component)) {
            pushContextProvider(workInProgress);
          }
          break;
        }
      case HostPortal:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
      case ContextProvider:
        {
          var newValue = workInProgress.memoizedProps.value;
          pushProvider(workInProgress, newValue);
          break;
        }
      case Profiler:
        if (enableProfilerTimer) {
          workInProgress.effectTag |= Update;
        }
        break;
    }
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  // Before entering the begin phase, clear the expiration time.
  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        var _Component3 = workInProgress.type;
        return mountIndeterminateComponent(current$$1, workInProgress, _Component3, renderExpirationTime);
      }
    case FunctionalComponent:
      {
        var _Component4 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;
        return updateFunctionalComponent(current$$1, workInProgress, _Component4, _unresolvedProps, renderExpirationTime);
      }
    case FunctionalComponentLazy:
      {
        var _thenable2 = workInProgress.type;
        var _Component5 = getResultFromResolvedThenable(_thenable2);
        var _unresolvedProps2 = workInProgress.pendingProps;
        var _child = updateFunctionalComponent(current$$1, workInProgress, _Component5, resolveDefaultProps(_Component5, _unresolvedProps2), renderExpirationTime);
        workInProgress.memoizedProps = _unresolvedProps2;
        return _child;
      }
    case ClassComponent:
      {
        var _Component6 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps;
        return updateClassComponent(current$$1, workInProgress, _Component6, _unresolvedProps3, renderExpirationTime);
      }
    case ClassComponentLazy:
      {
        var _thenable3 = workInProgress.type;
        var _Component7 = getResultFromResolvedThenable(_thenable3);
        var _unresolvedProps4 = workInProgress.pendingProps;
        var _child2 = updateClassComponent(current$$1, workInProgress, _Component7, resolveDefaultProps(_Component7, _unresolvedProps4), renderExpirationTime);
        workInProgress.memoizedProps = _unresolvedProps4;
        return _child2;
      }
    case HostRoot:
      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
    case HostComponent:
      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
    case HostText:
      return updateHostText(current$$1, workInProgress);
    case PlaceholderComponent:
      return updatePlaceholderComponent(current$$1, workInProgress, renderExpirationTime);
    case HostPortal:
      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
    case ForwardRef:
      {
        var type = workInProgress.type;
        return updateForwardRef(current$$1, workInProgress, type, workInProgress.pendingProps, renderExpirationTime);
      }
    case ForwardRefLazy:
      var _thenable = workInProgress.type;
      var _Component2 = getResultFromResolvedThenable(_thenable);
      var unresolvedProps = workInProgress.pendingProps;
      var child = updateForwardRef(current$$1, workInProgress, _Component2, resolveDefaultProps(_Component2, unresolvedProps), renderExpirationTime);
      workInProgress.memoizedProps = unresolvedProps;
      return child;
    case Fragment:
      return updateFragment(current$$1, workInProgress, renderExpirationTime);
    case Mode:
      return updateMode(current$$1, workInProgress, renderExpirationTime);
    case Profiler:
      return updateProfiler(current$$1, workInProgress, renderExpirationTime);
    case ContextProvider:
      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
    case ContextConsumer:
      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
    default:
      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

function appendAllChildren(parent, workInProgress) {
  // We only have the top Fiber that was created but we need recurse down its
  // children to find all the terminal nodes.
  var node = workInProgress.child;
  while (node !== null) {
    if (node.tag === HostComponent || node.tag === HostText) {
      appendInitialChild(parent, node.stateNode);
    } else if (node.tag === HostPortal) {
      // If we have a portal child, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === workInProgress) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

var updateHostContainer = void 0;
var updateHostComponent$1 = void 0;
var updateHostText$1 = void 0;
if (supportsMutation) {
  // Mutation mode

  updateHostContainer = function (workInProgress) {
    // Noop
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;
    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    }

    // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.
    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.
    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    // TODO: Type this specific to this type of component.
    workInProgress.updateQueue = updatePayload;
    // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.
    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
} else if (supportsPersistence) {
  // Persistent host tree mode

  // An unfortunate fork of appendAllChildren because we have two different parent types.
  var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendChildToContainerChildSet(containerChildSet, node.stateNode);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };
  updateHostContainer = function (workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    var childrenUnchanged = workInProgress.firstEffect === null;
    if (childrenUnchanged) {
      // No changes, just reuse the existing instance.
    } else {
      var container = portalOrRoot.containerInfo;
      var newChildSet = createContainerChildSet(container);
      // If children might have changed, we have to add them all to the set.
      appendAllChildrenToContainer(newChildSet, workInProgress);
      portalOrRoot.pendingChildren = newChildSet;
      // Schedule an update on the container to swap out the container.
      markUpdate(workInProgress);
      finalizeContainerChildren(container, newChildSet);
    }
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    var currentInstance = current.stateNode;
    var oldProps = current.memoizedProps;
    // If there are no effects associated with this node, then none of our children had any updates.
    // This guarantees that we can reuse all of them.
    var childrenUnchanged = workInProgress.firstEffect === null;
    if (childrenUnchanged && oldProps === newProps) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }
    var recyclableInstance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    var updatePayload = null;
    if (oldProps !== newProps) {
      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    }
    if (childrenUnchanged && updatePayload === null) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }
    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
      markUpdate(workInProgress);
    }
    workInProgress.stateNode = newInstance;
    if (childrenUnchanged) {
      // If there are no other effects in this tree, we need to flag this node as having one.
      // Even though we're not going to use it for anything.
      // Otherwise parents won't know that there are new children to propagate upwards.
      markUpdate(workInProgress);
    } else {
      // If children might have changed, we have to add them all to the set.
      appendAllChildren(newInstance, workInProgress);
    }
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    if (oldText !== newText) {
      // If the text content differs, we'll create a new text instance for it.
      var rootContainerInstance = getRootHostContainer();
      var currentHostContext = getHostContext();
      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
      // We'll have to mark it as having an effect, even though we won't use the effect for anything.
      // This lets the parents know that at least one of their children has changed.
      markUpdate(workInProgress);
    }
  };
} else {
  // No host operations
  updateHostContainer = function (workInProgress) {
    // Noop
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // Noop
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // Noop
  };
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case FunctionalComponent:
    case FunctionalComponentLazy:
      break;
    case ClassComponent:
      {
        var Component = workInProgress.type;
        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }
        break;
      }
    case ClassComponentLazy:
      {
        var _Component = getResultFromResolvedThenable(workInProgress.type);
        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }
        break;
      }
    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;
        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }
        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          popHydrationState(workInProgress);
          // This resets the hacky state to fix isMounted before committing.
          // TODO: Delete this when we delete isMounted and findDOMNode.
          workInProgress.effectTag &= ~Placement;
        }
        updateHostContainer(workInProgress);
        break;
      }
    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;
        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            // This can happen when we abort work.
            break;
          }

          var currentHostContext = getHostContext();
          // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on we want to add then top->down or
          // bottom->up. Top->down is faster in IE11.
          var wasHydrated = popHydrationState(workInProgress);
          if (wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node needs to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

            appendAllChildren(instance, workInProgress);

            // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.
            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress);
            }
            workInProgress.stateNode = instance;
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }
        break;
      }
    case HostText:
      {
        var newText = newProps;
        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps;
          // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.
          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            // This can happen when we abort work.
          }
          var _rootContainerInstance = getRootHostContainer();
          var _currentHostContext = getHostContext();
          var _wasHydrated = popHydrationState(workInProgress);
          if (_wasHydrated) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }
        break;
      }
    case ForwardRef:
    case ForwardRefLazy:
      break;
    case PlaceholderComponent:
      break;
    case Fragment:
      break;
    case Mode:
      break;
    case Profiler:
      break;
    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      break;
    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      break;
    case ContextConsumer:
      break;
    // Error cases
    case IndeterminateComponent:
      invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
    // eslint-disable-next-line no-fallthrough
    default:
      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
  }

  return null;
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError) {
  return true;
}

function logCapturedError(capturedError) {
  var logError = showErrorDialog(capturedError);

  // Allow injected showErrorDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.
  if (logError === false) {
    return;
  }

  var error = capturedError.error;
  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry;

    // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      }
      // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.
      console.error(error);
      // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

    var errorBoundaryMessage = void 0;
    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
      } else {
        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }
    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

    // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
    console.error(combinedMessage);
  }
}

var emptyObject = {};

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;
  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current$$1, instance) {
  startPhaseTimer(current$$1, 'componentWillUnmount');
  instance.props = current$$1.memoizedProps;
  instance.state = current$$1.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
};

// Capture errors so they don't interrupt unmounting.
function safelyCallComponentWillUnmount(current$$1, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current$$1, unmountError);
    }
  }
}

function safelyDetachRef(current$$1) {
  var ref = current$$1.ref;
  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);
        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current$$1, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
  switch (finishedWork.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current$$1 !== null) {
            var prevProps = current$$1.memoizedProps;
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode;
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            var snapshot = instance.getSnapshotBeforeUpdate(prevProps, prevState);
            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);
                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }
            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }
        return;
      }
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
      // Nothing to do for these component types
      return;
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        var instance = finishedWork.stateNode;
        if (finishedWork.effectTag & Update) {
          if (current$$1 === null) {
            startPhaseTimer(finishedWork, 'componentDidMount');
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = current$$1.memoizedProps;
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate');
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }
        var updateQueue = finishedWork.updateQueue;
        if (updateQueue !== null) {
          instance.props = finishedWork.memoizedProps;
          instance.state = finishedWork.memoizedState;
          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
        }
        return;
      }
    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;
        if (_updateQueue !== null) {
          var _instance = null;
          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;
              case ClassComponent:
              case ClassComponentLazy:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }
          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
        }
        return;
      }
    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode;

        // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.
        if (current$$1 === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props, finishedWork);
        }

        return;
      }
    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }
    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }
    case Profiler:
      {
        if (enableProfilerTimer) {
          var onRender = finishedWork.memoizedProps.onRender;

          if (enableSchedulerTracing) {
            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
          } else {
            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
          }
        }
        return;
      }
    case PlaceholderComponent:
      {
        if (enableSuspense) {
          if ((finishedWork.mode & StrictMode) === NoEffect) {
            // In loose mode, a placeholder times out by scheduling a synchronous
            // update in the commit phase. Use `updateQueue` field to signal that
            // the Timeout needs to switch to the placeholder. We don't need an
            // entire queue. Any non-null value works.
            // $FlowFixMe - Intentionally using a value other than an UpdateQueue.
            finishedWork.updateQueue = emptyObject;
            scheduleWork(finishedWork, Sync);
          } else {
            // In strict mode, the Update effect is used to record the time at
            // which the placeholder timed out.
            var currentTime = requestCurrentTime();
            finishedWork.stateNode = { timedOutAt: currentTime };
          }
        }
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;
  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse = void 0;
    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;
      default:
        instanceToUse = instance;
    }
    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current$$1) {
  var currentRef = current$$1.ref;
  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
}

// User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay
function commitUnmount(current$$1) {
  onCommitUnmount(current$$1);

  switch (current$$1.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        safelyDetachRef(current$$1);
        var instance = current$$1.stateNode;
        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current$$1, instance);
        }
        return;
      }
    case HostComponent:
      {
        safelyDetachRef(current$$1);
        return;
      }
    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        if (supportsMutation) {
          unmountHostComponents(current$$1);
        } else if (supportsPersistence) {
          emptyPortalContainer(current$$1);
        }
        return;
      }
  }
}

function commitNestedUnmounts(root) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  var node = root;
  while (true) {
    commitUnmount(node);
    // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.
    if (node.child !== null && (
    // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
    !supportsMutation || node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === root) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current$$1) {
  // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.
  current$$1.return = null;
  current$$1.child = null;
  if (current$$1.alternate) {
    current$$1.alternate.child = null;
    current$$1.alternate.return = null;
  }
}

function emptyPortalContainer(current$$1) {
  if (!supportsPersistence) {
    return;
  }

  var portal = current$$1.stateNode;
  var containerInfo = portal.containerInfo;

  var emptyChildSet = createContainerChildSet(containerInfo);
  replaceContainerChildren(containerInfo, emptyChildSet);
}

function commitContainer(finishedWork) {
  if (!supportsPersistence) {
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        return;
      }
    case HostComponent:
      {
        return;
      }
    case HostText:
      {
        return;
      }
    case HostRoot:
    case HostPortal:
      {
        var portalOrRoot = finishedWork.stateNode;
        var containerInfo = portalOrRoot.containerInfo,
            _pendingChildren = portalOrRoot.pendingChildren;

        replaceContainerChildren(containerInfo, _pendingChildren);
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;
  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }
    parent = parent.return;
  }
  invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  var node = fiber;
  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
    while (node.tag !== HostComponent && node.tag !== HostText) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      }
      // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.
      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    }
    // Check if this host node is stable or about to be placed.
    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {
  if (!supportsMutation) {
    return;
  }

  // Recursively insert all host nodes into the parent.
  var parentFiber = getHostParentFiber(finishedWork);

  // Note: these two variables *must* always be updated together.
  var parent = void 0;
  var isContainer = void 0;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentFiber.stateNode;
      isContainer = false;
      break;
    case HostRoot:
      parent = parentFiber.stateNode.containerInfo;
      isContainer = true;
      break;
    case HostPortal:
      parent = parentFiber.stateNode.containerInfo;
      isContainer = true;
      break;
    default:
      invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
  }
  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent);
    // Clear ContentReset from the effect tag
    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork);
  // We only have the top Fiber that was inserted but we need recurse down its
  // children to find all the terminal nodes.
  var node = finishedWork;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      if (before) {
        if (isContainer) {
          insertInContainerBefore(parent, node.stateNode, before);
        } else {
          insertBefore(parent, node.stateNode, before);
        }
      } else {
        if (isContainer) {
          appendChildToContainer(parent, node.stateNode);
        } else {
          appendChild(parent, node.stateNode);
        }
      }
    } else if (node.tag === HostPortal) {
      // If the insertion itself is a portal, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === finishedWork) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function unmountHostComponents(current$$1) {
  // We only have the top Fiber that was deleted but we need recurse down its
  var node = current$$1;

  // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.
  var currentParentIsValid = false;

  // Note: these two variables *must* always be updated together.
  var currentParent = void 0;
  var currentParentIsContainer = void 0;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;
      findParent: while (true) {
        !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        switch (parent.tag) {
          case HostComponent:
            currentParent = parent.stateNode;
            currentParentIsContainer = false;
            break findParent;
          case HostRoot:
            currentParent = parent.stateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;
          case HostPortal:
            currentParent = parent.stateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;
        }
        parent = parent.return;
      }
      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(node);
      // After all the children have unmounted, it is now safe to remove the
      // node from the tree.
      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      }
      // Don't visit children because we already visited them.
    } else if (node.tag === HostPortal) {
      // When we go into a portal, it becomes the parent to remove from.
      // We will reassign it back when we pop the portal on the way up.
      currentParent = node.stateNode.containerInfo;
      currentParentIsContainer = true;
      // Visit children because portals might contain host components.
      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(node);
      // Visit children because we may find more host components below.
      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }
    if (node === current$$1) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === current$$1) {
        return;
      }
      node = node.return;
      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(current$$1) {
  if (supportsMutation) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(current$$1);
  } else {
    // Detach refs and call componentWillUnmount() on the whole subtree.
    commitNestedUnmounts(current$$1);
  }
  detachFiber(current$$1);
}

function commitWork(current$$1, finishedWork) {
  if (!supportsMutation) {
    commitContainer(finishedWork);
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        return;
      }
    case HostComponent:
      {
        var instance = finishedWork.stateNode;
        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps;
          // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.
          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
          var type = finishedWork.type;
          // TODO: Type the updateQueue to be specific to host components.
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
          }
        }
        return;
      }
    case HostText:
      {
        !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps;
        // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.
        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }
    case HostRoot:
      {
        return;
      }
    case Profiler:
      {
        return;
      }
    case PlaceholderComponent:
      {
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitResetTextContent(current$$1) {
  if (!supportsMutation) {
    return;
  }
  resetTextContent(current$$1.stateNode);
}

function NoopComponent() {
  return null;
}

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime);
  // Unmount the root by rendering null.
  update.tag = CaptureUpdate;
  // Caution: React DevTools currently depends on this property
  // being called "element".
  update.payload = { element: null };
  var error = errorInfo.value;
  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };
  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime);
  update.tag = CaptureUpdate;
  var getDerivedStateFromCatch = fiber.type.getDerivedStateFromCatch;
  if (enableGetDerivedStateFromCatch && typeof getDerivedStateFromCatch === 'function') {
    var error = errorInfo.value;
    update.payload = function () {
      return getDerivedStateFromCatch(error);
    };
  }

  var inst = fiber.stateNode;
  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      if (!enableGetDerivedStateFromCatch || getDerivedStateFromCatch !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromCatch is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this);
      }
      var error = errorInfo.value;
      var stack = errorInfo.stack;
      logError(fiber, errorInfo);
      this.componentDidCatch(error, {
        componentStack: stack !== null ? stack : ''
      });
    };
  }
  return update;
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete;
  // Its effect list is no longer valid.
  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (enableSuspense && value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;

    // Find the earliest timeout threshold of all the placeholders in the
    // ancestor path. We could avoid this traversal by storing the thresholds on
    // the stack, but we choose not to because we only hit this path if we're
    // IO-bound (i.e. if something suspends). Whereas the stack is used even in
    // the non-IO- bound case.
    var _workInProgress = returnFiber;
    var earliestTimeoutMs = -1;
    var startTimeMs = -1;
    do {
      if (_workInProgress.tag === PlaceholderComponent) {
        var current = _workInProgress.alternate;
        if (current !== null && current.memoizedState === true && current.stateNode !== null) {
          // Reached a placeholder that already timed out. Each timed out
          // placeholder acts as the root of a new suspense boundary.

          // Use the time at which the placeholder timed out as the start time
          // for the current render.
          var timedOutAt = current.stateNode.timedOutAt;
          startTimeMs = expirationTimeToMs(timedOutAt);

          // Do not search any further.
          break;
        }
        var timeoutPropMs = _workInProgress.pendingProps.delayMs;
        if (typeof timeoutPropMs === 'number') {
          if (timeoutPropMs <= 0) {
            earliestTimeoutMs = 0;
          } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
            earliestTimeoutMs = timeoutPropMs;
          }
        }
      }
      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null);

    // Schedule the nearest Placeholder to re-render the timed out view.
    _workInProgress = returnFiber;
    do {
      if (_workInProgress.tag === PlaceholderComponent) {
        var didTimeout = _workInProgress.memoizedState;
        if (!didTimeout) {
          // Found the nearest boundary.

          // If the boundary is not in async mode, we should not suspend, and
          // likewise, when the promise resolves, we should ping synchronously.
          var pingTime = (_workInProgress.mode & AsyncMode) === NoEffect ? Sync : renderExpirationTime;

          // Attach a listener to the promise to "ping" the root and retry.
          var onResolveOrReject = retrySuspendedRoot.bind(null, root, _workInProgress, pingTime);
          thenable.then(onResolveOrReject, onResolveOrReject);

          // If the boundary is outside of strict mode, we should *not* suspend
          // the commit. Pretend as if the suspended component rendered null and
          // keep rendering. In the commit phase, we'll schedule a subsequent
          // synchronous update to re-render the Placeholder.
          //
          // Note: It doesn't matter whether the component that suspended was
          // inside a strict mode tree. If the Placeholder is outside of it, we
          // should *not* suspend the commit.
          if ((_workInProgress.mode & StrictMode) === NoEffect) {
            _workInProgress.effectTag |= Update;

            // Unmount the source fiber's children
            var nextChildren = null;
            reconcileChildren(sourceFiber.alternate, sourceFiber, nextChildren, renderExpirationTime);
            sourceFiber.effectTag &= ~Incomplete;
            if (sourceFiber.tag === IndeterminateComponent) {
              // Let's just assume it's a functional component. This fiber will
              // be unmounted in the immediate next commit, anyway.
              sourceFiber.tag = FunctionalComponent;
            }

            if (sourceFiber.tag === ClassComponent || sourceFiber.tag === ClassComponentLazy) {
              // We're going to commit this fiber even though it didn't
              // complete. But we shouldn't call any lifecycle methods or
              // callbacks. Remove all lifecycle effect tags.
              sourceFiber.effectTag &= ~LifecycleEffectMask;
              if (sourceFiber.alternate === null) {
                // We're about to mount a class component that doesn't have an
                // instance. Turn this into a dummy functional component instead,
                // to prevent type errors. This is a bit weird but it's an edge
                // case and we're about to synchronously delete this
                // component, anyway.
                sourceFiber.tag = FunctionalComponent;
                sourceFiber.type = NoopComponent;
              }
            }

            // Exit without suspending.
            return;
          }

          // Confirmed that the boundary is in a strict mode tree. Continue with
          // the normal suspend path.

          var absoluteTimeoutMs = void 0;
          if (earliestTimeoutMs === -1) {
            // If no explicit threshold is given, default to an abitrarily large
            // value. The actual size doesn't matter because the threshold for the
            // whole tree will be clamped to the expiration time.
            absoluteTimeoutMs = maxSigned31BitInt;
          } else {
            if (startTimeMs === -1) {
              // This suspend happened outside of any already timed-out
              // placeholders. We don't know exactly when the update was scheduled,
              // but we can infer an approximate start time from the expiration
              // time. First, find the earliest uncommitted expiration time in the
              // tree, including work that is suspended. Then subtract the offset
              // used to compute an async update's expiration time. This will cause
              // high priority (interactive) work to expire earlier than necessary,
              // but we can account for this by adjusting for the Just Noticeable
              // Difference.
              var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
              var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
              startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
            }
            absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
          }

          // Mark the earliest timeout in the suspended fiber's ancestor path.
          // After completing the root, we'll take the largest of all the
          // suspended fiber's timeouts and use it to compute a timeout for the
          // whole tree.
          renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);

          _workInProgress.effectTag |= ShouldCapture;
          _workInProgress.expirationTime = renderExpirationTime;
          return;
        }
        // This boundary already captured during this render. Continue to the
        // next boundary.
      }
      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null);
    // No boundary was found. Fallthrough to error mode.
    value = new Error('An update was suspended, but no placeholder UI was provided.');
  }

  // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.
  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;
  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;
          var update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
          enqueueCapturedUpdate(workInProgress, update);
          return;
        }
      case ClassComponent:
      case ClassComponentLazy:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;
        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromCatch === 'function' && enableGetDerivedStateFromCatch || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;
          // Schedule the error boundary to re-render using updated state
          var _update = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }
        break;
      default:
        break;
    }
    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;
        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }
        var effectTag = workInProgress.effectTag;
        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case ClassComponentLazy:
      {
        var _Component = workInProgress.type._reactResult;
        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }
        var _effectTag = workInProgress.effectTag;
        if (_effectTag & ShouldCapture) {
          workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag2 = workInProgress.effectTag;
        !((_effectTag2 & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
        workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
        return workInProgress;
      }
    case HostComponent:
      {
        popHostContext(workInProgress);
        return null;
      }
    case PlaceholderComponent:
      {
        var _effectTag3 = workInProgress.effectTag;
        if (_effectTag3 & ShouldCapture) {
          workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case HostPortal:
      popHostContainer(workInProgress);
      return null;
    case ContextProvider:
      popProvider(workInProgress);
      return null;
    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;
        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }
        break;
      }
    case ClassComponentLazy:
      {
        var _childContextTypes = interruptedWork.type._reactResult.childContextTypes;
        if (_childContextTypes !== null && _childContextTypes !== undefined) {
          popContext(interruptedWork);
        }
        break;
      }
    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }
    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }
    case HostPortal:
      popHostContainer(interruptedWork);
      break;
    case ContextProvider:
      popProvider(interruptedWork);
      break;
    default:
      break;
  }
}

var Dispatcher = {
  readContext: readContext
};

var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;


var didWarnAboutStateTransition = void 0;
var didWarnSetStateChildContext = void 0;
var warnAboutUpdateOnUnmounted = void 0;
var warnAboutInvalidUpdates = void 0;

if (enableSchedulerTracing) {
  // Provide explicit error message when production+profiling bundle of e.g. react-dom
  // is used with production (non-profiling) bundle of schedule/tracing
  !(__interactionsRef != null && __interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `schedule/tracing` module with `schedule/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
}

{
  didWarnAboutStateTransition = false;
  didWarnSetStateChildContext = false;
  var didWarnStateUpdateForUnmountedComponent = {};

  warnAboutUpdateOnUnmounted = function (fiber) {
    // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.
    var componentName = getComponentName(fiber.type) || 'ReactClass';
    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
      return;
    }
    warningWithoutStack$1(false, "Can't call setState (or forceUpdate) on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in the ' + 'componentWillUnmount method.%s', getStackByFiberInDevAndProd(fiber));
    didWarnStateUpdateForUnmountedComponent[componentName] = true;
  };

  warnAboutInvalidUpdates = function (instance) {
    switch (phase) {
      case 'getChildContext':
        if (didWarnSetStateChildContext) {
          return;
        }
        warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
        didWarnSetStateChildContext = true;
        break;
      case 'render':
        if (didWarnAboutStateTransition) {
          return;
        }
        warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
        didWarnAboutStateTransition = true;
        break;
    }
  };
}

// Used to ensure computeUniqueAsyncExpiration is monotonically increasing.
var lastUniqueAsyncExpiration = 0;

// Represents the expiration time that incoming updates should use. (If this
// is NoWork, use the default strategy: async updates in async mode, sync
// updates in sync mode.)
var expirationContext = NoWork;

var isWorking = false;

// The next work in progress fiber that we're currently working on.
var nextUnitOfWork = null;
var nextRoot = null;
// The time at which we're currently rendering work.
var nextRenderExpirationTime = NoWork;
var nextLatestAbsoluteTimeoutMs = -1;
var nextRenderDidError = false;

// The next fiber with an effect that we're currently committing.
var nextEffect = null;

var isCommitting$1 = false;

var legacyErrorBoundariesThatAlreadyFailed = null;

// Used for performance tracking.
var interruptedBy = null;

// Do not decrement interaction counts in the event of suspense timeouts.
// This would lead to prematurely calling the interaction-complete hook.
var suspenseDidTimeout = false;

var stashedWorkInProgressProperties = void 0;
var replayUnitOfWork = void 0;
var isReplayingFailedUnitOfWork = void 0;
var originalReplayError = void 0;
var rethrowOriginalError = void 0;
if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
  stashedWorkInProgressProperties = null;
  isReplayingFailedUnitOfWork = false;
  originalReplayError = null;
  replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
      // Don't replay promises. Treat everything else like an error.
      // TODO: Need to figure out a different strategy if/when we add
      // support for catching other types.
      return;
    }

    // Restore the original state of the work-in-progress
    if (stashedWorkInProgressProperties === null) {
      // This should never happen. Don't throw because this code is DEV-only.
      warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
      return;
    }
    assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

    switch (failedUnitOfWork.tag) {
      case HostRoot:
        popHostContainer(failedUnitOfWork);
        popTopLevelContextObject(failedUnitOfWork);
        break;
      case HostComponent:
        popHostContext(failedUnitOfWork);
        break;
      case ClassComponent:
        {
          var Component = failedUnitOfWork.type;
          if (isContextProvider(Component)) {
            popContext(failedUnitOfWork);
          }
          break;
        }
      case ClassComponentLazy:
        {
          var _Component = getResultFromResolvedThenable(failedUnitOfWork.type);
          if (isContextProvider(_Component)) {
            popContext(failedUnitOfWork);
          }
          break;
        }
      case HostPortal:
        popHostContainer(failedUnitOfWork);
        break;
      case ContextProvider:
        popProvider(failedUnitOfWork);
        break;
    }
    // Replay the begin phase.
    isReplayingFailedUnitOfWork = true;
    originalReplayError = thrownValue;
    invokeGuardedCallback(null, workLoop, null, isYieldy);
    isReplayingFailedUnitOfWork = false;
    originalReplayError = null;
    if (hasCaughtError()) {
      var replayError = clearCaughtError();
      if (replayError != null && thrownValue != null) {
        try {
          // Reading the expando property is intentionally
          // inside `try` because it might be a getter or Proxy.
          if (replayError._suppressLogging) {
            // Also suppress logging for the original error.
            thrownValue._suppressLogging = true;
          }
        } catch (inner) {
          // Ignore.
        }
      }
    } else {
      // If the begin phase did not fail the second time, set this pointer
      // back to the original value.
      nextUnitOfWork = failedUnitOfWork;
    }
  };
  rethrowOriginalError = function () {
    throw originalReplayError;
  };
}

function resetStack() {
  if (nextUnitOfWork !== null) {
    var interruptedWork = nextUnitOfWork.return;
    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
    checkThatStackIsEmpty();
  }

  nextRoot = null;
  nextRenderExpirationTime = NoWork;
  nextLatestAbsoluteTimeoutMs = -1;
  nextRenderDidError = false;
  nextUnitOfWork = null;
}

function commitAllHostEffects() {
  while (nextEffect !== null) {
    {
      setCurrentFiber(nextEffect);
    }
    recordEffect();

    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current$$1 = nextEffect.alternate;
      if (current$$1 !== null) {
        commitDetachRef(current$$1);
      }
    }

    // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every
    // possible bitmap value, we remove the secondary effects from the
    // effect tag and switch on that value.
    var primaryEffectTag = effectTag & (Placement | Update | Deletion);
    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect);
          // Clear the "placement" from effect tag so that we know that this is inserted, before
          // any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted
          // does and isMounted is deprecated anyway so we should be able
          // to kill this.
          nextEffect.effectTag &= ~Placement;
          break;
        }
      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect);
          // Clear the "placement" from effect tag so that we know that this is inserted, before
          // any life-cycles like componentDidMount gets called.
          nextEffect.effectTag &= ~Placement;

          // Update
          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }
      case Update:
        {
          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }
      case Deletion:
        {
          commitDeletion(nextEffect);
          break;
        }
    }
    nextEffect = nextEffect.nextEffect;
  }

  {
    resetCurrentFiber();
  }
}

function commitBeforeMutationLifecycles() {
  while (nextEffect !== null) {
    {
      setCurrentFiber(nextEffect);
    }

    var effectTag = nextEffect.effectTag;
    if (effectTag & Snapshot) {
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current$$1, nextEffect);
    }

    // Don't cleanup effects yet;
    // This will be done by commitAllLifeCycles()
    nextEffect = nextEffect.nextEffect;
  }

  {
    resetCurrentFiber();
  }
}

function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
  {
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.flushPendingDeprecationWarnings();
    }

    if (warnAboutLegacyContextAPI) {
      ReactStrictModeWarnings.flushLegacyContextWarning();
    }
  }
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    var next = nextEffect.nextEffect;
    // Ensure that we clean these up so that we don't accidentally keep them.
    // I'm not actually sure this matters because we can't reset firstEffect
    // and lastEffect since they're on every node, not just the effectful
    // ones. So we have to clean everything as we reuse nodes anyway.
    nextEffect.nextEffect = null;
    // Ensure that we reset the effectTag here so that we can rely on effect
    // tags to reason about the current life-cycle.
    nextEffect = next;
  }
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}

function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function commitRoot(root, finishedWork) {
  isWorking = true;
  isCommitting$1 = true;
  startCommitTimer();

  !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var committedExpirationTime = root.pendingCommitExpirationTime;
  !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  root.pendingCommitExpirationTime = NoWork;

  // Update the pending priority levels to account for the work that we are
  // about to commit. This needs to happen before calling the lifecycles, since
  // they may schedule additional updates.
  var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
  var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
  var earliestRemainingTimeBeforeCommit = updateExpirationTimeBeforeCommit === NoWork || childExpirationTimeBeforeCommit !== NoWork && childExpirationTimeBeforeCommit < updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
  markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);

  var prevInteractions = null;
  var committedInteractions = enableSchedulerTracing ? [] : null;
  if (enableSchedulerTracing) {
    // Restore any pending interactions at this point,
    // So that cascading work triggered during the render phase will be accounted for.
    prevInteractions = __interactionsRef.current;
    __interactionsRef.current = root.memoizedInteractions;

    // We are potentially finished with the current batch of interactions.
    // So we should clear them out of the pending interaction map.
    // We do this at the start of commit in case cascading work is scheduled by commit phase lifecycles.
    // In that event, interaction data may be added back into the pending map for a future commit.
    // We also store the interactions we are about to commit so that we can notify subscribers after we're done.
    // These are stored as an Array rather than a Set,
    // Because the same interaction may be pending for multiple expiration times,
    // In which case it's important that we decrement the count the right number of times after finishing.
    root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      if (scheduledExpirationTime <= committedExpirationTime) {
        committedInteractions.push.apply(committedInteractions, Array.from(scheduledInteractions));
        root.pendingInteractionMap.delete(scheduledExpirationTime);
      }
    });
  }

  // Reset this to null before calling lifecycles
  ReactCurrentOwner$2.current = null;

  var firstEffect = void 0;
  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if
    // it had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  prepareForCommit(root.containerInfo);

  // Invoke instances of getSnapshotBeforeUpdate before mutation.
  nextEffect = firstEffect;
  startCommitSnapshotEffectsTimer();
  while (nextEffect !== null) {
    var didError = false;
    var error = void 0;
    {
      invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);
      if (hasCaughtError()) {
        didError = true;
        error = clearCaughtError();
      }
    }
    if (didError) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, error);
      // Clean-up
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }
  stopCommitSnapshotEffectsTimer();

  if (enableProfilerTimer) {
    // Mark the current commit time to be shared by all Profilers in this batch.
    // This enables them to be grouped later.
    recordCommitTime();
  }

  // Commit all the side-effects within a tree. We'll do this in two passes.
  // The first pass performs all the host insertions, updates, deletions and
  // ref unmounts.
  nextEffect = firstEffect;
  startCommitHostEffectsTimer();
  while (nextEffect !== null) {
    var _didError = false;
    var _error = void 0;
    {
      invokeGuardedCallback(null, commitAllHostEffects, null);
      if (hasCaughtError()) {
        _didError = true;
        _error = clearCaughtError();
      }
    }
    if (_didError) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, _error);
      // Clean-up
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }
  stopCommitHostEffectsTimer();

  resetAfterCommit(root.containerInfo);

  // The work-in-progress tree is now the current tree. This must come after
  // the first pass of the commit phase, so that the previous tree is still
  // current during componentWillUnmount, but before the second pass, so that
  // the finished work is current during componentDidMount/Update.
  root.current = finishedWork;

  // In the second pass we'll perform all life-cycles and ref callbacks.
  // Life-cycles happen as a separate pass so that all placements, updates,
  // and deletions in the entire tree have already been invoked.
  // This pass also triggers any renderer-specific initial effects.
  nextEffect = firstEffect;
  startCommitLifeCyclesTimer();
  while (nextEffect !== null) {
    var _didError2 = false;
    var _error2 = void 0;
    {
      invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);
      if (hasCaughtError()) {
        _didError2 = true;
        _error2 = clearCaughtError();
      }
    }
    if (_didError2) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, _error2);
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }

  isCommitting$1 = false;
  isWorking = false;
  stopCommitLifeCyclesTimer();
  stopCommitTimer();
  onCommitRoot(finishedWork.stateNode);
  if (true && ReactFiberInstrumentation_1.debugTool) {
    ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
  }

  var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
  var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
  var earliestRemainingTimeAfterCommit = updateExpirationTimeAfterCommit === NoWork || childExpirationTimeAfterCommit !== NoWork && childExpirationTimeAfterCommit < updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;
  if (earliestRemainingTimeAfterCommit === NoWork) {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }
  onCommit(root, earliestRemainingTimeAfterCommit);

  if (enableSchedulerTracing) {
    __interactionsRef.current = prevInteractions;

    var subscriber = void 0;

    try {
      subscriber = __subscriberRef.current;
      if (subscriber !== null && root.memoizedInteractions.size > 0) {
        var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
        subscriber.onWorkStopped(root.memoizedInteractions, threadID);
      }
    } catch (error) {
      // It's not safe for commitRoot() to throw.
      // Store the error for now and we'll re-throw in finishRendering().
      if (!hasUnhandledError) {
        hasUnhandledError = true;
        unhandledError = error;
      }
    } finally {
      // Don't update interaction counts if we're frozen due to suspense.
      // In this case, we can skip the completed-work check entirely.
      if (!suspenseDidTimeout) {
        // Now that we're done, check the completed batch of interactions.
        // If no more work is outstanding for a given interaction,
        // We need to notify the subscribers that it's finished.
        committedInteractions.forEach(function (interaction) {
          interaction.__count--;
          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // It's not safe for commitRoot() to throw.
              // Store the error for now and we'll re-throw in finishRendering().
              if (!hasUnhandledError) {
                hasUnhandledError = true;
                unhandledError = error;
              }
            }
          }
        });
      }
    }
  }
}

function resetChildExpirationTime(workInProgress, renderTime) {
  if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork;

  // Bubble up the earliest expiration time.
  if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
    // We're in profiling mode.
    // Let's use this same traversal to update the render durations.
    var actualDuration = workInProgress.actualDuration;
    var treeBaseDuration = workInProgress.selfBaseDuration;

    // When a fiber is cloned, its actualDuration is reset to 0.
    // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration.
    // If the fiber has not been cloned though, (meaning no work was done),
    // Then this value will reflect the amount of time spent working on a previous render.
    // In that case it should not bubble.
    // We determine whether it was cloned by comparing the child pointer.
    var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;

    var child = workInProgress.child;
    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;
      if (newChildExpirationTime === NoWork || childUpdateExpirationTime !== NoWork && childUpdateExpirationTime < newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }
      if (newChildExpirationTime === NoWork || childChildExpirationTime !== NoWork && childChildExpirationTime < newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }
      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }
      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }
    workInProgress.actualDuration = actualDuration;
    workInProgress.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = workInProgress.child;
    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;
      if (newChildExpirationTime === NoWork || _childUpdateExpirationTime !== NoWork && _childUpdateExpirationTime < newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }
      if (newChildExpirationTime === NoWork || _childChildExpirationTime !== NoWork && _childChildExpirationTime < newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }
      _child = _child.sibling;
    }
  }

  workInProgress.childExpirationTime = newChildExpirationTime;
}

function completeUnitOfWork(workInProgress) {
  // Attempt to complete the current unit of work, then move to the
  // next sibling. If there are no more siblings, return to the
  // parent fiber.
  while (true) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current$$1 = workInProgress.alternate;
    {
      setCurrentFiber(workInProgress);
    }

    var returnFiber = workInProgress.return;
    var siblingFiber = workInProgress.sibling;

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      // This fiber completed.
      if (enableProfilerTimer) {
        if (workInProgress.mode & ProfileMode) {
          startProfilerTimer(workInProgress);
        }

        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);

        if (workInProgress.mode & ProfileMode) {
          // Update render duration assuming we didn't error.
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
        }
      } else {
        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
      }
      var next = nextUnitOfWork;
      stopWorkTimer(workInProgress);
      resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
      {
        resetCurrentFiber();
      }

      if (next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        return next;
      }

      if (returnFiber !== null &&
      // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }
        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }
          returnFiber.lastEffect = workInProgress.lastEffect;
        }

        // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if
        // needed, by doing multiple passes over the effect list. We don't want
        // to schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.
        var effectTag = workInProgress.effectTag;
        // Skip both NoWork and PerformedWork tags when creating the effect list.
        // PerformedWork effect is read by React DevTools but shouldn't be committed.
        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }
          returnFiber.lastEffect = workInProgress;
        }
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        // We've reached the root.
        return null;
      }
    } else {
      if (workInProgress.mode & ProfileMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress, nextRenderExpirationTime);
      // Because this fiber did not complete, don't reset its expiration time.
      if (workInProgress.effectTag & DidCapture) {
        // Restarting an error boundary
        stopFailedWorkTimer(workInProgress);
      } else {
        stopWorkTimer(workInProgress);
      }

      {
        resetCurrentFiber();
      }

      if (_next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }

        if (enableProfilerTimer) {
          // Include the time spent working on failed children before continuing.
          if (_next.mode & ProfileMode) {
            var actualDuration = _next.actualDuration;
            var child = _next.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            _next.actualDuration = actualDuration;
          }
        }

        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        return null;
      }
    }
  }

  // Without this explicit null return Flow complains of invalid return type
  // TODO Remove the above while(true) loop
  // eslint-disable-next-line no-unreachable
  return null;
}

function performUnitOfWork(workInProgress) {
  // The current, flushed, state of this fiber is the alternate.
  // Ideally nothing should rely on this, but relying on it here
  // means that we don't need an additional field on the work in
  // progress.
  var current$$1 = workInProgress.alternate;

  // See if beginning this work spawns more work.
  startWorkTimer(workInProgress);
  {
    setCurrentFiber(workInProgress);
  }

  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
    stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
  }

  var next = void 0;
  if (enableProfilerTimer) {
    if (workInProgress.mode & ProfileMode) {
      startProfilerTimer(workInProgress);
    }

    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);

    if (workInProgress.mode & ProfileMode) {
      // Record the render duration assuming we didn't bailout (or error).
      stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
    }
  } else {
    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
  }

  {
    resetCurrentFiber();
    if (isReplayingFailedUnitOfWork) {
      // Currently replaying a failed unit of work. This should be unreachable,
      // because the render phase is meant to be idempotent, and it should
      // have thrown again. Since it didn't, rethrow the original error, so
      // React's internal stack is not misaligned.
      rethrowOriginalError();
    }
  }
  if (true && ReactFiberInstrumentation_1.debugTool) {
    ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
  }

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(workInProgress);
  }

  ReactCurrentOwner$2.current = null;

  return next;
}

function workLoop(isYieldy) {
  if (!isYieldy) {
    // Flush work without yielding
    while (nextUnitOfWork !== null) {
      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    }
  } else {
    // Flush asynchronous work until the deadline runs out of time.
    while (nextUnitOfWork !== null && !shouldYield()) {
      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    }
  }
}

function renderRoot(root, isYieldy, isExpired) {
  !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  isWorking = true;
  ReactCurrentOwner$2.currentDispatcher = Dispatcher;

  var expirationTime = root.nextExpirationTimeToWorkOn;

  var prevInteractions = null;
  if (enableSchedulerTracing) {
    // We're about to start new traced work.
    // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
    prevInteractions = __interactionsRef.current;
    __interactionsRef.current = root.memoizedInteractions;
  }

  // Check if we're starting from a fresh stack, or if we're resuming from
  // previously yielded work.
  if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
    // Reset the stack and start working from the root.
    resetStack();
    nextRoot = root;
    nextRenderExpirationTime = expirationTime;
    nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
    root.pendingCommitExpirationTime = NoWork;

    if (enableSchedulerTracing) {
      // Determine which interactions this batch of work currently includes,
      // So that we can accurately attribute time spent working on it,
      var interactions = new Set();
      root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
        if (scheduledExpirationTime <= expirationTime) {
          scheduledInteractions.forEach(function (interaction) {
            return interactions.add(interaction);
          });
        }
      });

      // Store the current set of interactions on the FiberRoot for a few reasons:
      // We can re-use it in hot functions like renderRoot() without having to recalculate it.
      // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
      // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
      root.memoizedInteractions = interactions;

      if (interactions.size > 0) {
        var subscriber = __subscriberRef.current;
        if (subscriber !== null) {
          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            // Work thrown by an interaction tracing subscriber should be rethrown,
            // But only once it's safe (to avoid leaveing the scheduler in an invalid state).
            // Store the error for now and we'll re-throw in finishRendering().
            if (!hasUnhandledError) {
              hasUnhandledError = true;
              unhandledError = error;
            }
          }
        }
      }
    }
  }

  var didFatal = false;

  startWorkLoopTimer(nextUnitOfWork);

  do {
    try {
      workLoop(isYieldy);
    } catch (thrownValue) {
      if (nextUnitOfWork === null) {
        // This is a fatal error.
        didFatal = true;
        onUncaughtError(thrownValue);
      } else {
        {
          // Reset global debug state
          // We assume this is defined in DEV
          resetCurrentlyProcessingQueue();
        }

        var failedUnitOfWork = nextUnitOfWork;
        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
          replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
        }

        // TODO: we already know this isn't true in some cases.
        // At least this shows a nicer error message until we figure out the cause.
        // https://github.com/facebook/react/issues/12449#issuecomment-386727431
        !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;

        var sourceFiber = nextUnitOfWork;
        var returnFiber = sourceFiber.return;
        if (returnFiber === null) {
          // This is the root. The root could capture its own errors. However,
          // we don't know if it errors before or after we pushed the host
          // context. This information is needed to avoid a stack mismatch.
          // Because we're not sure, treat this as a fatal error. We could track
          // which phase it fails in, but doesn't seem worth it. At least
          // for now.
          didFatal = true;
          onUncaughtError(thrownValue);
        } else {
          throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
          nextUnitOfWork = completeUnitOfWork(sourceFiber);
          continue;
        }
      }
    }
    break;
  } while (true);

  if (enableSchedulerTracing) {
    // Traced work is done for now; restore the previous interactions.
    __interactionsRef.current = prevInteractions;
  }

  // We're done performing work. Time to clean up.
  isWorking = false;
  ReactCurrentOwner$2.currentDispatcher = null;
  resetContextDependences();

  // Yield back to main thread.
  if (didFatal) {
    var _didCompleteRoot = false;
    stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
    interruptedBy = null;
    // There was a fatal error.
    {
      resetStackAfterFatalErrorInDev();
    }
    // `nextRoot` points to the in-progress root. A non-null value indicates
    // that we're in the middle of an async render. Set it to null to indicate
    // there's no more work to be done in the current batch.
    nextRoot = null;
    onFatal(root);
    return;
  }

  if (nextUnitOfWork !== null) {
    // There's still remaining async work in this tree, but we ran out of time
    // in the current frame. Yield back to the renderer. Unless we're
    // interrupted by a higher priority update, we'll continue later from where
    // we left off.
    var _didCompleteRoot2 = false;
    stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
    interruptedBy = null;
    onYield(root);
    return;
  }

  // We completed the whole tree.
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  var rootWorkInProgress = root.current.alternate;
  !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  // `nextRoot` points to the in-progress root. A non-null value indicates
  // that we're in the middle of an async render. Set it to null to indicate
  // there's no more work to be done in the current batch.
  nextRoot = null;
  interruptedBy = null;

  if (nextRenderDidError) {
    // There was an error
    if (hasLowerPriorityWork(root, expirationTime)) {
      // There's lower priority work. If so, it may have the effect of fixing
      // the exception that was just thrown. Exit without committing. This is
      // similar to a suspend, but without a timeout because we're not waiting
      // for a promise to resolve. React will restart at the lower
      // priority level.
      markSuspendedPriorityLevel(root, expirationTime);
      var suspendedExpirationTime = expirationTime;
      var rootExpirationTime = root.expirationTime;
      onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
      );
      return;
    } else if (
    // There's no lower priority work, but we're rendering asynchronously.
    // Synchronsouly attempt to render the same level one more time. This is
    // similar to a suspend, but without a timeout because we're not waiting
    // for a promise to resolve.
    !root.didError && !isExpired) {
      root.didError = true;
      var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;
      var _rootExpirationTime = root.expirationTime = Sync;
      onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
      );
      return;
    }
  }

  if (enableSuspense && !isExpired && nextLatestAbsoluteTimeoutMs !== -1) {
    // The tree was suspended.
    var _suspendedExpirationTime2 = expirationTime;
    markSuspendedPriorityLevel(root, _suspendedExpirationTime2);

    // Find the earliest uncommitted expiration time in the tree, including
    // work that is suspended. The timeout threshold cannot be longer than
    // the overall expiration.
    var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
    var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
    if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
      nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
    }

    // Subtract the current time from the absolute timeout to get the number
    // of milliseconds until the timeout. In other words, convert an absolute
    // timestamp to a relative time. This is the value that is passed
    // to `setTimeout`.
    var currentTimeMs = expirationTimeToMs(requestCurrentTime());
    var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
    msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout;

    // TODO: Account for the Just Noticeable Difference

    var _rootExpirationTime2 = root.expirationTime;
    onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
    return;
  }

  // Ready to commit.
  onComplete(root, rootWorkInProgress, expirationTime);
}

function dispatch(sourceFiber, value, expirationTime) {
  !(!isWorking || isCommitting$1) ? invariant(false, 'dispatch: Cannot dispatch during the render phase.') : void 0;

  var fiber = sourceFiber.return;
  while (fiber !== null) {
    switch (fiber.tag) {
      case ClassComponent:
      case ClassComponentLazy:
        var ctor = fiber.type;
        var instance = fiber.stateNode;
        if (typeof ctor.getDerivedStateFromCatch === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
          var errorInfo = createCapturedValue(value, sourceFiber);
          var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
          return;
        }
        break;
      case HostRoot:
        {
          var _errorInfo = createCapturedValue(value, sourceFiber);
          var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
          enqueueUpdate(fiber, _update);
          scheduleWork(fiber, expirationTime);
          return;
        }
    }
    fiber = fiber.return;
  }

  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    var rootFiber = sourceFiber;
    var _errorInfo2 = createCapturedValue(value, rootFiber);
    var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
    enqueueUpdate(rootFiber, _update2);
    scheduleWork(rootFiber, expirationTime);
  }
}

function captureCommitPhaseError(fiber, error) {
  return dispatch(fiber, error, Sync);
}

function computeThreadID(expirationTime, interactionThreadID) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + interactionThreadID;
}

// Creates a unique async expiration time.
function computeUniqueAsyncExpiration() {
  var currentTime = requestCurrentTime();
  var result = computeAsyncExpiration(currentTime);
  if (result <= lastUniqueAsyncExpiration) {
    // Since we assume the current time monotonically increases, we only hit
    // this branch when computeUniqueAsyncExpiration is fired multiple times
    // within a 200ms window (or whatever the async bucket size is).
    result = lastUniqueAsyncExpiration + 1;
  }
  lastUniqueAsyncExpiration = result;
  return lastUniqueAsyncExpiration;
}

function computeExpirationForFiber(currentTime, fiber) {
  var expirationTime = void 0;
  if (expirationContext !== NoWork) {
    // An explicit expiration context was set;
    expirationTime = expirationContext;
  } else if (isWorking) {
    if (isCommitting$1) {
      // Updates that occur during the commit phase should have sync priority
      // by default.
      expirationTime = Sync;
    } else {
      // Updates during the render phase should expire at the same time as
      // the work that is being rendered.
      expirationTime = nextRenderExpirationTime;
    }
  } else {
    // No explicit expiration context was set, and we're not currently
    // performing work. Calculate a new expiration time.
    if (fiber.mode & AsyncMode) {
      if (isBatchingInteractiveUpdates) {
        // This is an interactive update
        expirationTime = computeInteractiveExpiration(currentTime);
      } else {
        // This is an async update
        expirationTime = computeAsyncExpiration(currentTime);
      }
      // If we're in the middle of rendering a tree, do not update at the same
      // expiration time that is already rendering.
      if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
        expirationTime += 1;
      }
    } else {
      // This is a sync update
      expirationTime = Sync;
    }
  }
  if (isBatchingInteractiveUpdates) {
    // This is an interactive update. Keep track of the lowest pending
    // interactive expiration time. This allows us to synchronously flush
    // all interactive updates when needed.
    if (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime > lowestPriorityPendingInteractiveExpirationTime) {
      lowestPriorityPendingInteractiveExpirationTime = expirationTime;
    }
  }
  return expirationTime;
}

function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
  // Schedule the timeout.
  if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
    nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
  }
}

function renderDidError() {
  nextRenderDidError = true;
}

function retrySuspendedRoot(root, fiber, suspendedTime) {
  if (enableSuspense) {
    var retryTime = void 0;

    if (isPriorityLevelSuspended(root, suspendedTime)) {
      // Ping at the original level
      retryTime = suspendedTime;
      markPingedPriorityLevel(root, retryTime);
    } else {
      // Placeholder already timed out. Compute a new expiration time
      var currentTime = requestCurrentTime();
      retryTime = computeExpirationForFiber(currentTime, fiber);
      markPendingPriorityLevel(root, retryTime);
    }

    scheduleWorkToRoot(fiber, retryTime);
    var rootExpirationTime = root.expirationTime;
    if (rootExpirationTime !== NoWork) {
      if (enableSchedulerTracing) {
        // Restore previous interactions so that new work is associated with them.
        var prevInteractions = __interactionsRef.current;
        __interactionsRef.current = root.memoizedInteractions;
        // Because suspense timeouts do not decrement the interaction count,
        // Continued suspense work should also not increment the count.
        storeInteractionsForExpirationTime(root, rootExpirationTime, false);
        requestWork(root, rootExpirationTime);
        __interactionsRef.current = prevInteractions;
      } else {
        requestWork(root, rootExpirationTime);
      }
    }
  }
}

function scheduleWorkToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime === NoWork || fiber.expirationTime > expirationTime) {
    fiber.expirationTime = expirationTime;
  }
  var alternate = fiber.alternate;
  if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > expirationTime)) {
    alternate.expirationTime = expirationTime;
  }
  // Walk the parent path to the root and update the child expiration time.
  var node = fiber.return;
  if (node === null && fiber.tag === HostRoot) {
    return fiber.stateNode;
  }
  while (node !== null) {
    alternate = node.alternate;
    if (node.childExpirationTime === NoWork || node.childExpirationTime > expirationTime) {
      node.childExpirationTime = expirationTime;
      if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > expirationTime)) {
        alternate.childExpirationTime = expirationTime;
      }
    } else if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > expirationTime)) {
      alternate.childExpirationTime = expirationTime;
    }
    if (node.return === null && node.tag === HostRoot) {
      return node.stateNode;
    }
    node = node.return;
  }
  return null;
}

function storeInteractionsForExpirationTime(root, expirationTime, updateInteractionCounts) {
  if (!enableSchedulerTracing) {
    return;
  }

  var interactions = __interactionsRef.current;
  if (interactions.size > 0) {
    var pendingInteractions = root.pendingInteractionMap.get(expirationTime);
    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (updateInteractionCounts && !pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      root.pendingInteractionMap.set(expirationTime, new Set(interactions));

      // Update the pending async work count for the current interactions.
      if (updateInteractionCounts) {
        interactions.forEach(function (interaction) {
          interaction.__count++;
        });
      }
    }

    var subscriber = __subscriberRef.current;
    if (subscriber !== null) {
      var threadID = computeThreadID(expirationTime, root.interactionThreadID);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function scheduleWork(fiber, expirationTime) {
  recordScheduleUpdate();

  {
    if (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) {
      var instance = fiber.stateNode;
      warnAboutInvalidUpdates(instance);
    }
  }

  var root = scheduleWorkToRoot(fiber, expirationTime);
  if (root === null) {
    if (true && (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy)) {
      warnAboutUpdateOnUnmounted(fiber);
    }
    return;
  }

  if (enableSchedulerTracing) {
    storeInteractionsForExpirationTime(root, expirationTime, true);
  }

  if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime < nextRenderExpirationTime) {
    // This is an interruption. (Used for performance tracking.)
    interruptedBy = fiber;
    resetStack();
  }
  markPendingPriorityLevel(root, expirationTime);
  if (
  // If we're in the render phase, we don't need to schedule this root
  // for an update, because we'll do it before we exit...
  !isWorking || isCommitting$1 ||
  // ...unless this is a different root than the one we're rendering.
  nextRoot !== root) {
    var rootExpirationTime = root.expirationTime;
    requestWork(root, rootExpirationTime);
  }
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    // Reset this back to zero so subsequent updates don't throw.
    nestedUpdateCount = 0;
    invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
  }
}

function syncUpdates(fn, a, b, c, d) {
  var previousExpirationContext = expirationContext;
  expirationContext = Sync;
  try {
    return fn(a, b, c, d);
  } finally {
    expirationContext = previousExpirationContext;
  }
}

// TODO: Everything below this is written as if it has been lifted to the
// renderers. I'll do this in a follow-up.

// Linked-list of roots
var firstScheduledRoot = null;
var lastScheduledRoot = null;

var callbackExpirationTime = NoWork;
var callbackID = void 0;
var isRendering = false;
var nextFlushedRoot = null;
var nextFlushedExpirationTime = NoWork;
var lowestPriorityPendingInteractiveExpirationTime = NoWork;
var deadlineDidExpire = false;
var hasUnhandledError = false;
var unhandledError = null;
var deadline = null;

var isBatchingUpdates = false;
var isUnbatchingUpdates = false;
var isBatchingInteractiveUpdates = false;

var completedBatches = null;

var originalStartTimeMs = unstable_now();
var currentRendererTime = msToExpirationTime(originalStartTimeMs);
var currentSchedulerTime = currentRendererTime;

// Use these to prevent an infinite loop of nested updates
var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var lastCommittedRootDuringThisBatch = null;

var timeHeuristicForUnitOfWork = 1;

function recomputeCurrentRendererTime() {
  var currentTimeMs = unstable_now() - originalStartTimeMs;
  currentRendererTime = msToExpirationTime(currentTimeMs);
}

function scheduleCallbackWithExpirationTime(root, expirationTime) {
  if (callbackExpirationTime !== NoWork) {
    // A callback is already scheduled. Check its expiration time (timeout).
    if (expirationTime > callbackExpirationTime) {
      // Existing callback has sufficient timeout. Exit.
      return;
    } else {
      if (callbackID !== null) {
        // Existing callback has insufficient timeout. Cancel and schedule a
        // new one.
        unstable_cancelScheduledWork(callbackID);
      }
    }
    // The request callback timer is already running. Don't start a new one.
  } else {
    startRequestCallbackTimer();
  }

  callbackExpirationTime = expirationTime;
  var currentMs = unstable_now() - originalStartTimeMs;
  var expirationTimeMs = expirationTimeToMs(expirationTime);
  var timeout = expirationTimeMs - currentMs;
  callbackID = unstable_scheduleWork(performAsyncWork, { timeout: timeout });
}

// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
// onYield is called upon exiting. We use these in lieu of returning a tuple.
// I've also chosen not to inline them into renderRoot because these will
// eventually be lifted into the renderer.
function onFatal(root) {
  root.finishedWork = null;
}

function onComplete(root, finishedWork, expirationTime) {
  root.pendingCommitExpirationTime = expirationTime;
  root.finishedWork = finishedWork;
}

function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
  root.expirationTime = rootExpirationTime;
  if (enableSuspense && msUntilTimeout === 0 && !shouldYield()) {
    // Don't wait an additional tick. Commit the tree immediately.
    root.pendingCommitExpirationTime = suspendedExpirationTime;
    root.finishedWork = finishedWork;
  } else if (msUntilTimeout > 0) {
    // Wait `msUntilTimeout` milliseconds before committing.
    root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
  }
}

function onYield(root) {
  root.finishedWork = null;
}

function onTimeout(root, finishedWork, suspendedExpirationTime) {
  if (enableSuspense) {
    // The root timed out. Commit it.
    root.pendingCommitExpirationTime = suspendedExpirationTime;
    root.finishedWork = finishedWork;
    // Read the current time before entering the commit phase. We can be
    // certain this won't cause tearing related to batching of event updates
    // because we're at the top of a timer event.
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;

    if (enableSchedulerTracing) {
      // Don't update pending interaction counts for suspense timeouts,
      // Because we know we still need to do more work in this case.
      suspenseDidTimeout = true;
      flushRoot(root, suspendedExpirationTime);
      suspenseDidTimeout = false;
    } else {
      flushRoot(root, suspendedExpirationTime);
    }
  }
}

function onCommit(root, expirationTime) {
  root.expirationTime = expirationTime;
  root.finishedWork = null;
}

function requestCurrentTime() {
  // requestCurrentTime is called by the scheduler to compute an expiration
  // time.
  //
  // Expiration times are computed by adding to the current time (the start
  // time). However, if two updates are scheduled within the same event, we
  // should treat their start times as simultaneous, even if the actual clock
  // time has advanced between the first and second call.

  // In other words, because expiration times determine how updates are batched,
  // we want all updates of like priority that occur within the same event to
  // receive the same expiration time. Otherwise we get tearing.
  //
  // We keep track of two separate times: the current "renderer" time and the
  // current "scheduler" time. The renderer time can be updated whenever; it
  // only exists to minimize the calls performance.now.
  //
  // But the scheduler time can only be updated if there's no pending work, or
  // if we know for certain that we're not in the middle of an event.

  if (isRendering) {
    // We're already rendering. Return the most recently read time.
    return currentSchedulerTime;
  }
  // Check if there's pending work.
  findHighestPriorityRoot();
  if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
    // If there's no pending work, or if the pending work is offscreen, we can
    // read the current time without risk of tearing.
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;
    return currentSchedulerTime;
  }
  // There's already pending work. We might be in the middle of a browser
  // event. If we were to read the current time, it could cause multiple updates
  // within the same event to receive different expiration times, leading to
  // tearing. Return the last read time. During the next idle callback, the
  // time will be updated.
  return currentSchedulerTime;
}

// requestWork is called by the scheduler whenever a root receives an update.
// It's up to the renderer to call renderRoot at some point in the future.
function requestWork(root, expirationTime) {
  addRootToSchedule(root, expirationTime);
  if (isRendering) {
    // Prevent reentrancy. Remaining work will be scheduled at the end of
    // the currently rendering batch.
    return;
  }

  if (isBatchingUpdates) {
    // Flush work at the end of the batch.
    if (isUnbatchingUpdates) {
      // ...unless we're inside unbatchedUpdates, in which case we should
      // flush it now.
      nextFlushedRoot = root;
      nextFlushedExpirationTime = Sync;
      performWorkOnRoot(root, Sync, true);
    }
    return;
  }

  // TODO: Get rid of Sync and use current time?
  if (expirationTime === Sync) {
    performSyncWork();
  } else {
    scheduleCallbackWithExpirationTime(root, expirationTime);
  }
}

function addRootToSchedule(root, expirationTime) {
  // Add the root to the schedule.
  // Check if this root is already part of the schedule.
  if (root.nextScheduledRoot === null) {
    // This root is not already scheduled. Add it.
    root.expirationTime = expirationTime;
    if (lastScheduledRoot === null) {
      firstScheduledRoot = lastScheduledRoot = root;
      root.nextScheduledRoot = root;
    } else {
      lastScheduledRoot.nextScheduledRoot = root;
      lastScheduledRoot = root;
      lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
    }
  } else {
    // This root is already scheduled, but its priority may have increased.
    var remainingExpirationTime = root.expirationTime;
    if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
      // Update the priority.
      root.expirationTime = expirationTime;
    }
  }
}

function findHighestPriorityRoot() {
  var highestPriorityWork = NoWork;
  var highestPriorityRoot = null;
  if (lastScheduledRoot !== null) {
    var previousScheduledRoot = lastScheduledRoot;
    var root = firstScheduledRoot;
    while (root !== null) {
      var remainingExpirationTime = root.expirationTime;
      if (remainingExpirationTime === NoWork) {
        // This root no longer has work. Remove it from the scheduler.

        // TODO: This check is redudant, but Flow is confused by the branch
        // below where we set lastScheduledRoot to null, even though we break
        // from the loop right after.
        !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        if (root === root.nextScheduledRoot) {
          // This is the only root in the list.
          root.nextScheduledRoot = null;
          firstScheduledRoot = lastScheduledRoot = null;
          break;
        } else if (root === firstScheduledRoot) {
          // This is the first root in the list.
          var next = root.nextScheduledRoot;
          firstScheduledRoot = next;
          lastScheduledRoot.nextScheduledRoot = next;
          root.nextScheduledRoot = null;
        } else if (root === lastScheduledRoot) {
          // This is the last root in the list.
          lastScheduledRoot = previousScheduledRoot;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
          root.nextScheduledRoot = null;
          break;
        } else {
          previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
          root.nextScheduledRoot = null;
        }
        root = previousScheduledRoot.nextScheduledRoot;
      } else {
        if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
          // Update the priority, if it's higher
          highestPriorityWork = remainingExpirationTime;
          highestPriorityRoot = root;
        }
        if (root === lastScheduledRoot) {
          break;
        }
        if (highestPriorityWork === Sync) {
          // Sync is highest priority by definition so
          // we can stop searching.
          break;
        }
        previousScheduledRoot = root;
        root = root.nextScheduledRoot;
      }
    }
  }

  nextFlushedRoot = highestPriorityRoot;
  nextFlushedExpirationTime = highestPriorityWork;
}

function performAsyncWork(dl) {
  if (dl.didTimeout) {
    // The callback timed out. That means at least one update has expired.
    // Iterate through the root schedule. If they contain expired work, set
    // the next render expiration time to the current time. This has the effect
    // of flushing all expired work in a single batch, instead of flushing each
    // level one at a time.
    if (firstScheduledRoot !== null) {
      recomputeCurrentRendererTime();
      var root = firstScheduledRoot;
      do {
        didExpireAtExpirationTime(root, currentRendererTime);
        // The root schedule is circular, so this is never null.
        root = root.nextScheduledRoot;
      } while (root !== firstScheduledRoot);
    }
  }
  performWork(NoWork, dl);
}

function performSyncWork() {
  performWork(Sync, null);
}

function performWork(minExpirationTime, dl) {
  deadline = dl;

  // Keep working on roots until there's no more work, or until we reach
  // the deadline.
  findHighestPriorityRoot();

  if (deadline !== null) {
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;

    if (enableUserTimingAPI) {
      var didExpire = nextFlushedExpirationTime < currentRendererTime;
      var timeout = expirationTimeToMs(nextFlushedExpirationTime);
      stopRequestCallbackTimer(didExpire, timeout);
    }

    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || currentRendererTime >= nextFlushedExpirationTime)) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime >= nextFlushedExpirationTime);
      findHighestPriorityRoot();
      recomputeCurrentRendererTime();
      currentSchedulerTime = currentRendererTime;
    }
  } else {
    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime)) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, true);
      findHighestPriorityRoot();
    }
  }

  // We're done flushing work. Either we ran out of time in this callback,
  // or there's no more work left with sufficient priority.

  // If we're inside a callback, set this to false since we just completed it.
  if (deadline !== null) {
    callbackExpirationTime = NoWork;
    callbackID = null;
  }
  // If there's work left over, schedule a new callback.
  if (nextFlushedExpirationTime !== NoWork) {
    scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
  }

  // Clean-up.
  deadline = null;
  deadlineDidExpire = false;

  finishRendering();
}

function flushRoot(root, expirationTime) {
  !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
  // Perform work on root as if the given expiration time is the current time.
  // This has the effect of synchronously flushing all work up to and
  // including the given time.
  nextFlushedRoot = root;
  nextFlushedExpirationTime = expirationTime;
  performWorkOnRoot(root, expirationTime, true);
  // Flush any sync work that was scheduled by lifecycles
  performSyncWork();
}

function finishRendering() {
  nestedUpdateCount = 0;
  lastCommittedRootDuringThisBatch = null;

  if (completedBatches !== null) {
    var batches = completedBatches;
    completedBatches = null;
    for (var i = 0; i < batches.length; i++) {
      var batch = batches[i];
      try {
        batch._onComplete();
      } catch (error) {
        if (!hasUnhandledError) {
          hasUnhandledError = true;
          unhandledError = error;
        }
      }
    }
  }

  if (hasUnhandledError) {
    var error = unhandledError;
    unhandledError = null;
    hasUnhandledError = false;
    throw error;
  }
}

function performWorkOnRoot(root, expirationTime, isExpired) {
  !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  isRendering = true;

  // Check if this is async work or sync/expired work.
  if (deadline === null || isExpired) {
    // Flush work without yielding.
    // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
    // may want to perform some work without yielding, but also without
    // requiring the root to complete (by triggering placeholders).

    var finishedWork = root.finishedWork;
    if (finishedWork !== null) {
      // This root is already complete. We can commit it.
      completeRoot(root, finishedWork, expirationTime);
    } else {
      root.finishedWork = null;
      // If this root previously suspended, clear its existing timeout, since
      // we're about to try rendering again.
      var timeoutHandle = root.timeoutHandle;
      if (enableSuspense && timeoutHandle !== noTimeout) {
        root.timeoutHandle = noTimeout;
        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
        cancelTimeout(timeoutHandle);
      }
      var isYieldy = false;
      renderRoot(root, isYieldy, isExpired);
      finishedWork = root.finishedWork;
      if (finishedWork !== null) {
        // We've completed the root. Commit it.
        completeRoot(root, finishedWork, expirationTime);
      }
    }
  } else {
    // Flush async work.
    var _finishedWork = root.finishedWork;
    if (_finishedWork !== null) {
      // This root is already complete. We can commit it.
      completeRoot(root, _finishedWork, expirationTime);
    } else {
      root.finishedWork = null;
      // If this root previously suspended, clear its existing timeout, since
      // we're about to try rendering again.
      var _timeoutHandle = root.timeoutHandle;
      if (enableSuspense && _timeoutHandle !== noTimeout) {
        root.timeoutHandle = noTimeout;
        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
        cancelTimeout(_timeoutHandle);
      }
      var _isYieldy = true;
      renderRoot(root, _isYieldy, isExpired);
      _finishedWork = root.finishedWork;
      if (_finishedWork !== null) {
        // We've completed the root. Check the deadline one more time
        // before committing.
        if (!shouldYield()) {
          // Still time left. Commit the root.
          completeRoot(root, _finishedWork, expirationTime);
        } else {
          // There's no time left. Mark this root as complete. We'll come
          // back and commit it later.
          root.finishedWork = _finishedWork;
        }
      }
    }
  }

  isRendering = false;
}

function completeRoot(root, finishedWork, expirationTime) {
  // Check if there's a batch that matches this expiration time.
  var firstBatch = root.firstBatch;
  if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
    if (completedBatches === null) {
      completedBatches = [firstBatch];
    } else {
      completedBatches.push(firstBatch);
    }
    if (firstBatch._defer) {
      // This root is blocked from committing by a batch. Unschedule it until
      // we receive another update.
      root.finishedWork = finishedWork;
      root.expirationTime = NoWork;
      return;
    }
  }

  // Commit the root.
  root.finishedWork = null;

  // Check if this is a nested update (a sync update scheduled during the
  // commit phase).
  if (root === lastCommittedRootDuringThisBatch) {
    // If the next root is the same as the previous root, this is a nested
    // update. To prevent an infinite loop, increment the nested update count.
    nestedUpdateCount++;
  } else {
    // Reset whenever we switch roots.
    lastCommittedRootDuringThisBatch = root;
    nestedUpdateCount = 0;
  }
  commitRoot(root, finishedWork);
}

// When working on async work, the reconciler asks the renderer if it should
// yield execution. For DOM, we implement this with requestIdleCallback.
function shouldYield() {
  if (deadlineDidExpire) {
    return true;
  }
  if (deadline === null || deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
    // Disregard deadline.didTimeout. Only expired work should be flushed
    // during a timeout. This path is only hit for non-expired work.
    return false;
  }
  deadlineDidExpire = true;
  return true;
}

function onUncaughtError(error) {
  !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  // Unschedule this root so we don't work on it again until there's
  // another update.
  nextFlushedRoot.expirationTime = NoWork;
  if (!hasUnhandledError) {
    hasUnhandledError = true;
    unhandledError = error;
  }
}

// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function batchedUpdates$1(fn, a) {
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    return fn(a);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function unbatchedUpdates(fn, a) {
  if (isBatchingUpdates && !isUnbatchingUpdates) {
    isUnbatchingUpdates = true;
    try {
      return fn(a);
    } finally {
      isUnbatchingUpdates = false;
    }
  }
  return fn(a);
}

// TODO: Batching should be implemented at the renderer level, not within
// the reconciler.
function flushSync(fn, a) {
  !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    return syncUpdates(fn, a);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    performSyncWork();
  }
}

function interactiveUpdates$1(fn, a, b) {
  if (isBatchingInteractiveUpdates) {
    return fn(a, b);
  }
  // If there are any pending interactive updates, synchronously flush them.
  // This needs to happen before we read any handlers, because the effect of
  // the previous event may influence which handlers are called during
  // this event.
  if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
    // Synchronously flush pending interactive updates.
    performWork(lowestPriorityPendingInteractiveExpirationTime, null);
    lowestPriorityPendingInteractiveExpirationTime = NoWork;
  }
  var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingInteractiveUpdates = true;
  isBatchingUpdates = true;
  try {
    return fn(a, b);
  } finally {
    isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

function flushInteractiveUpdates$1() {
  if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
    // Synchronously flush pending interactive updates.
    performWork(lowestPriorityPendingInteractiveExpirationTime, null);
    lowestPriorityPendingInteractiveExpirationTime = NoWork;
  }
}

function flushControlled(fn) {
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    syncUpdates(fn);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

// 0 is PROD, 1 is DEV.
// Might add PROFILE later.


var didWarnAboutNestedUpdates = void 0;

{
  didWarnAboutNestedUpdates = false;
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;
    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  } else if (fiber.tag === ClassComponentLazy) {
    var _Component = getResultFromResolvedThenable(fiber.type);
    if (isContextProvider(_Component)) {
      return processChildContext(fiber, _Component, parentContext);
    }
  }

  return parentContext;
}

function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
  {
    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;
      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime);
  // Caution: React DevTools currently depends on this property
  // being called "element".
  update.payload = { element: element };

  callback = callback === undefined ? null : callback;
  if (callback !== null) {
    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
    update.callback = callback;
  }
  enqueueUpdate(current$$1, update);

  scheduleWork(current$$1, expirationTime);
  return expirationTime;
}

function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
  // TODO: If this is a nested container, this won't be the root.
  var current$$1 = container.current;

  {
    if (ReactFiberInstrumentation_1.debugTool) {
      if (current$$1.alternate === null) {
        ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
      } else if (element === null) {
        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
      } else {
        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
      }
    }
  }

  var context = getContextForSubtree(parentComponent);
  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  return scheduleRootUpdate(current$$1, element, expirationTime, callback);
}

function findHostInstance(component) {
  var fiber = get(component);
  if (fiber === undefined) {
    if (typeof component.render === 'function') {
      invariant(false, 'Unable to find node on an unmounted component.');
    } else {
      invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
    }
  }
  var hostFiber = findCurrentHostFiber(fiber);
  if (hostFiber === null) {
    return null;
  }
  return hostFiber.stateNode;
}

function createContainer(containerInfo, isAsync, hydrate) {
  return createFiberRoot(containerInfo, isAsync, hydrate);
}

function updateContainer(element, container, parentComponent, callback) {
  var current$$1 = container.current;
  var currentTime = requestCurrentTime();
  var expirationTime = computeExpirationForFiber(currentTime, current$$1);
  return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
}

function getPublicRootInstance(container) {
  var containerFiber = container.current;
  if (!containerFiber.child) {
    return null;
  }
  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);
    default:
      return containerFiber.child.stateNode;
  }
}

function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
  if (hostFiber === null) {
    return null;
  }
  return hostFiber.stateNode;
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

  return injectInternals(_assign({}, devToolsConfig, {
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }
      return findFiberByHostInstance(instance);
    }
  }));
}

// This file intentionally does *not* have the Flow annotation.
// Don't add it. See `./inline-typed.js` for an explanation.

function createPortal$1(children, containerInfo,
// TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.5.2';

// TODO: This type is shared between the reconciler and ReactDOM, but will
// eventually be lifted out to the renderer.
var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

var topLevelUpdateWarnings = void 0;
var warnOnInvalidCallback = void 0;
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' ||
  // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
  // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }

  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
      if (hostInstance) {
        !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
  };

  warnOnInvalidCallback = function (callback, callerName) {
    !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
  };
}

setRestoreImplementation(restoreControlledState$1);

/* eslint-disable no-use-before-define */

/* eslint-enable no-use-before-define */

function ReactBatch(root) {
  var expirationTime = computeUniqueAsyncExpiration();
  this._expirationTime = expirationTime;
  this._root = root;
  this._next = null;
  this._callbacks = null;
  this._didComplete = false;
  this._hasChildren = false;
  this._children = null;
  this._defer = true;
}
ReactBatch.prototype.render = function (children) {
  !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
  this._hasChildren = true;
  this._children = children;
  var internalRoot = this._root._internalRoot;
  var expirationTime = this._expirationTime;
  var work = new ReactWork();
  updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
  return work;
};
ReactBatch.prototype.then = function (onComplete) {
  if (this._didComplete) {
    onComplete();
    return;
  }
  var callbacks = this._callbacks;
  if (callbacks === null) {
    callbacks = this._callbacks = [];
  }
  callbacks.push(onComplete);
};
ReactBatch.prototype.commit = function () {
  var internalRoot = this._root._internalRoot;
  var firstBatch = internalRoot.firstBatch;
  !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

  if (!this._hasChildren) {
    // This batch is empty. Return.
    this._next = null;
    this._defer = false;
    return;
  }

  var expirationTime = this._expirationTime;

  // Ensure this is the first batch in the list.
  if (firstBatch !== this) {
    // This batch is not the earliest batch. We need to move it to the front.
    // Update its expiration time to be the expiration time of the earliest
    // batch, so that we can flush it without flushing the other batches.
    if (this._hasChildren) {
      expirationTime = this._expirationTime = firstBatch._expirationTime;
      // Rendering this batch again ensures its children will be the final state
      // when we flush (updates are processed in insertion order: last
      // update wins).
      // TODO: This forces a restart. Should we print a warning?
      this.render(this._children);
    }

    // Remove the batch from the list.
    var previous = null;
    var batch = firstBatch;
    while (batch !== this) {
      previous = batch;
      batch = batch._next;
    }
    !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
    previous._next = batch._next;

    // Add it to the front.
    this._next = firstBatch;
    firstBatch = internalRoot.firstBatch = this;
  }

  // Synchronously flush all the work up to this batch's expiration time.
  this._defer = false;
  flushRoot(internalRoot, expirationTime);

  // Pop the batch from the list.
  var next = this._next;
  this._next = null;
  firstBatch = internalRoot.firstBatch = next;

  // Append the next earliest batch's children to the update queue.
  if (firstBatch !== null && firstBatch._hasChildren) {
    firstBatch.render(firstBatch._children);
  }
};
ReactBatch.prototype._onComplete = function () {
  if (this._didComplete) {
    return;
  }
  this._didComplete = true;
  var callbacks = this._callbacks;
  if (callbacks === null) {
    return;
  }
  // TODO: Error handling.
  for (var i = 0; i < callbacks.length; i++) {
    var _callback = callbacks[i];
    _callback();
  }
};

function ReactWork() {
  this._callbacks = null;
  this._didCommit = false;
  // TODO: Avoid need to bind by replacing callbacks in the update queue with
  // list of Work objects.
  this._onCommit = this._onCommit.bind(this);
}
ReactWork.prototype.then = function (onCommit) {
  if (this._didCommit) {
    onCommit();
    return;
  }
  var callbacks = this._callbacks;
  if (callbacks === null) {
    callbacks = this._callbacks = [];
  }
  callbacks.push(onCommit);
};
ReactWork.prototype._onCommit = function () {
  if (this._didCommit) {
    return;
  }
  this._didCommit = true;
  var callbacks = this._callbacks;
  if (callbacks === null) {
    return;
  }
  // TODO: Error handling.
  for (var i = 0; i < callbacks.length; i++) {
    var _callback2 = callbacks[i];
    !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
    _callback2();
  }
};

function ReactRoot(container, isAsync, hydrate) {
  var root = createContainer(container, isAsync, hydrate);
  this._internalRoot = root;
}
ReactRoot.prototype.render = function (children, callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(children, root, null, work._onCommit);
  return work;
};
ReactRoot.prototype.unmount = function (callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(null, root, null, work._onCommit);
  return work;
};
ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(children, root, parentComponent, work._onCommit);
  return work;
};
ReactRoot.prototype.createBatch = function () {
  var batch = new ReactBatch(this);
  var expirationTime = batch._expirationTime;

  var internalRoot = this._internalRoot;
  var firstBatch = internalRoot.firstBatch;
  if (firstBatch === null) {
    internalRoot.firstBatch = batch;
    batch._next = null;
  } else {
    // Insert sorted by expiration time then insertion order
    var insertAfter = null;
    var insertBefore = firstBatch;
    while (insertBefore !== null && insertBefore._expirationTime <= expirationTime) {
      insertAfter = insertBefore;
      insertBefore = insertBefore._next;
    }
    batch._next = insertBefore;
    if (insertAfter !== null) {
      insertAfter._next = batch;
    }
  }

  return batch;
};

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);

var warnedAboutHydrateAPI = false;

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
  // First clear any existing content.
  if (!shouldHydrate) {
    var warned = false;
    var rootSibling = void 0;
    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;
          warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }
      container.removeChild(rootSibling);
    }
  }
  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;
      lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }
  // Legacy roots are not async by default.
  var isAsync = false;
  return new ReactRoot(container, isAsync, shouldHydrate);
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  // TODO: Ensure all entry points contain this check
  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

  {
    topLevelUpdateWarnings(container);
  }

  // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.
  var root = container._reactRootContainer;
  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    if (typeof callback === 'function') {
      var originalCallback = callback;
      callback = function () {
        var instance = getPublicRootInstance(root._internalRoot);
        originalCallback.call(instance);
      };
    }
    // Initial mount should not be batched.
    unbatchedUpdates(function () {
      if (parentComponent != null) {
        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
      } else {
        root.render(children, callback);
      }
    });
  } else {
    if (typeof callback === 'function') {
      var _originalCallback = callback;
      callback = function () {
        var instance = getPublicRootInstance(root._internalRoot);
        _originalCallback.call(instance);
      };
    }
    // Update
    if (parentComponent != null) {
      root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
    } else {
      root.render(children, callback);
    }
  }
  return getPublicRootInstance(root._internalRoot);
}

function createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
  // TODO: pass ReactDOM portal implementation as third argument
  return createPortal$1(children, container, null, key);
}

var ReactDOM = {
  createPortal: createPortal,

  findDOMNode: function (componentOrElement) {
    {
      var owner = ReactCurrentOwner.current;
      if (owner !== null && owner.stateNode !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
        !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }

    return findHostInstance(componentOrElement);
  },
  hydrate: function (element, container, callback) {
    // TODO: throw or warn if we couldn't hydrate?
    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
  },
  render: function (element, container, callback) {
    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
  },
  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  },
  unmountComponentAtNode: function (container) {
    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
        !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
      }

      // Unmount should not be batched.
      unbatchedUpdates(function () {
        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
          container._reactRootContainer = null;
        });
      });
      // If you call unmountComponentAtNode twice in quick succession, you'll
      // get `true` twice. That's probably fine?
      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

        // Check if the container itself is a React root node.
        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

        !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
  },


  // Temporary alias since we already shipped React 16 RC with it.
  // TODO: remove in React 17.
  unstable_createPortal: function () {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;
      lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
    return createPortal.apply(undefined, arguments);
  },


  unstable_batchedUpdates: batchedUpdates$1,

  unstable_interactiveUpdates: interactiveUpdates$1,

  flushSync: flushSync,

  unstable_flushControlled: flushControlled,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    // Keep in sync with ReactDOMUnstableNativeDependencies.js
    // and ReactTestUtils.js. This is an array for better minification.
    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
  }
};

ReactDOM.unstable_createRoot = function createRoot(container, options) {
  !isValidContainer(container) ? invariant(false, 'unstable_createRoot(...): Target container is not a DOM element.') : void 0;
  var hydrate = options != null && options.hydrate === true;
  return new ReactRoot(container, true, hydrate);
};

var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType: 1,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol;
      // Don't warn in exotic cases like chrome-extension://.
      if (/^(https?|file):$/.test(protocol)) {
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}



var ReactDOM$2 = Object.freeze({
	default: ReactDOM
});

var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom = ReactDOM$3.default || ReactDOM$3;

return reactDom;

})));

// END reactjs

// BEGIN SharedWidgets
// SpiffUI depends on SharedWidgets being loaded first, and SharedWidgets depends on React being loaded first.
// As long as we inline react in spiff-ui we must also inline shared-widgets
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define("SharedWidgets", ["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["SharedWidgets"] = factory(require("react"), require("react-dom"));
	else
		root["SharedWidgets"] = factory(root["React"], root["ReactDOM"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_9__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 36);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["__extends"] = __extends;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (immutable) */ __webpack_exports__["__rest"] = __rest;
/* harmony export (immutable) */ __webpack_exports__["__decorate"] = __decorate;
/* harmony export (immutable) */ __webpack_exports__["__param"] = __param;
/* harmony export (immutable) */ __webpack_exports__["__metadata"] = __metadata;
/* harmony export (immutable) */ __webpack_exports__["__awaiter"] = __awaiter;
/* harmony export (immutable) */ __webpack_exports__["__generator"] = __generator;
/* harmony export (immutable) */ __webpack_exports__["__exportStar"] = __exportStar;
/* harmony export (immutable) */ __webpack_exports__["__values"] = __values;
/* harmony export (immutable) */ __webpack_exports__["__read"] = __read;
/* harmony export (immutable) */ __webpack_exports__["__spread"] = __spread;
/* harmony export (immutable) */ __webpack_exports__["__await"] = __await;
/* harmony export (immutable) */ __webpack_exports__["__asyncGenerator"] = __asyncGenerator;
/* harmony export (immutable) */ __webpack_exports__["__asyncDelegator"] = __asyncDelegator;
/* harmony export (immutable) */ __webpack_exports__["__asyncValues"] = __asyncValues;
/* harmony export (immutable) */ __webpack_exports__["__makeTemplateObject"] = __makeTemplateObject;
/* harmony export (immutable) */ __webpack_exports__["__importStar"] = __importStar;
/* harmony export (immutable) */ __webpack_exports__["__importDefault"] = __importDefault;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// tslint:disable:deprecation
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
// If you have any questions about this file, message #dev-shared-widgets
var SpacingUnit = 6;
var SizingUnit = SpacingUnit;
// order matters
var graysPreset = [
    '#000000', '#1B1B1B', '#333333', '#555555', '#666666', '#898989',
    '#FFFFFF', '#F5F5F5', '#E6E6E6', '#D4D4D4', '#C0C0C0', '#B4B4B4'
];
// order matters
var darkPreset = [
    '#F28E2B', '#F9A655', '#FFBE7D', '#B07AA1', '#C290B4', '#D4A6C8',
    '#B6992D', '#D3B348', '#F1CE63', '#D37295', '#E799B3', '#FABFD2',
    '#59A14F', '#72B966', '#8CD17D', '#E15759', '#F17B79', '#FF9D9A',
    '#499894', '#69AAA5', '#86BCB6', '#9D7660', '#BA9582', '#D7B5A6',
    '#4E79A7', '#75A1C7', '#A0CBE8', '#79706E', '#998F8C', '#BAB0AC',
    '#606B76', '#818B91', '#A7ACAD', '#76B7B2', '#FF9DA7', '#EDC948'
];
// order matters
var lightPreset = [
    '#EFEBE8', '#F5F1F0', '#F9F8F7', '#F0EAE8', '#F5F0EF', '#FAF5F4',
    '#F5EDDC', '#FAF4E7', '#FEFAF1', '#E9EBE0', '#F0F1E8', '#F7F7F0',
    '#EBEBEB', '#F2F2F2', '#F9F9F9', '#DFE7E8', '#E9F0F1', '#F2F9F9',
    '#F3EBF3', '#F7F1F6', '#FBF7FB', '#E2E6F0', '#E9EDF5', '#F0F3FA',
    '#E6ECF0', '#EEF1F3', '#F2F6F7', '#DDEBF0', '#E7F1F5', '#F0F7FA',
    '#DFEDEB', '#E9F3F2', '#F3FAF9', '#E8EDDA', '#EFF3E3', '#F7FAF0',
    '#F5EAD7', '#F6EEE3', '#FAF5F0', '#F9E9E0', '#F9EEE8', '#F9F3EF'
];
// order matters
var maestroFlowPreset = [
    '#4F6980', '#3D7FA6', '#8BC2CA', '#499893',
    '#62AEA1', '#7DC4AE', '#638B66', '#86AF6A',
    '#C3BB3D', '#EFC637', '#F6A035', '#F37941',
    '#F59A9A', '#CD677F', '#C497B7', '#845578',
    '#B9AA98', '#7E756D', '#9EB0A5', '#B56252'
];
// TODO: Semantic names - https://mytableau.tableaucorp.com/display/devft/Browser+Font+Reconciliation
var FontSizes = {
    XXLarge: 24,
    XLarge: 18,
    Large: 13,
    Default: 12,
    Small: 11,
    Tiny: 10
};
var FontColors = {
    PrimaryDark: 'rgba(0, 0, 0, 0.9)',
    Primary: 'rgba(0, 0, 0, 0.8)',
    PrimaryMedium: 'rgba(0, 0, 0, 0.7)',
    PrimaryLight: 'rgba(0, 0, 0, 0.6)',
    Secondary: 'rgba(0, 0, 0, 0.56)',
    Disabled: 'rgba(0, 0, 0, 0.35)',
    InvertedPrimary: 'rgb(255, 255, 255)',
    InvertedSecondary: 'rgba(255, 255, 255, 0.56)',
    InvertedDisabled: 'rgba(255, 255, 255, 0.35)',
};
var GreyColors = {
    Grey250: 'rgb(250, 250, 250)',
    Grey245: 'rgb(245, 245, 245)',
    Grey235: 'rgb(235, 235, 235)',
    Grey230: 'rgb(230, 230, 230)',
    Grey225: 'rgb(225, 225, 225)',
    Grey212: 'rgb(212, 212, 212)',
    Grey203: 'rgb(203, 203, 203)',
    Grey180: 'rgb(180, 180, 180)',
    Grey180Disabled: 'rgba(180, 180, 180, 0.35)',
    Grey102: 'rgb(102, 102, 102)',
    Grey51: 'rgb(51, 51, 51)',
    Grey51Disabled: 'rgba(51, 51, 51, 0.2)',
};
var SemanticColors = {
    White: 'rgb(255, 255, 255)',
    WhiteTransparent: 'rgba(255, 255, 255, 0.25)',
    WhiteDisabled: 'rgba(255, 255, 255, 0.35)',
    WhiteTransparentLine: 'rgba(255, 255, 255, 0.5)',
    WhiteTransparentLineHover: 'rgba(255, 255, 255, 0.8)',
    Black: 'rgb(0, 0, 0)',
    Transparent: 'rgba(0, 0, 0, 0)',
    ActionLight: 'rgb(235, 143, 80)',
    ActionDark: 'rgb(209, 107, 54)',
    AttentionLight: 'rgb(235, 68, 84)',
    AttentionDark: 'rgb(201, 58, 71)',
    AttentionDarkDisabled: 'rgba(201, 58, 71, 0.35)',
    Continuous: 'rgb(0, 177, 128)',
    ContinuousDark: 'rgb(0, 151, 104)',
    Discrete: 'rgb(73, 150, 178)',
    DiscreteDark: 'rgb(54, 126,156)',
    GoLight: 'rgb(45, 204, 151)',
    GoDark: 'rgb(47, 163, 125)',
    GoDarkDisabled: 'rgba(47, 163, 125, 0.35)',
    Shaded: 'rgba(0, 0, 0, 0.07)',
    ApplicationBlue: 'rgb(34, 38, 54)',
    DesktopBlue: 'rgb(53, 92, 128)',
    ServerBlue: 'rgb(42, 87, 117)',
    OnlineBlue: 'rgb(40, 94, 127)',
    OpaqueGlass: GreyColors.Grey245,
    Focus: 'rgb(52, 152, 219)',
    L1: GreyColors.Grey250,
    L2: GreyColors.Grey245,
    L2_5: GreyColors.Grey235,
    L3: GreyColors.Grey230,
    L4: GreyColors.Grey225,
    L5: GreyColors.Grey212,
    L6: GreyColors.Grey203,
    L7: GreyColors.Grey180,
    L8: GreyColors.Grey102,
    L9: GreyColors.Grey51,
    L9Disabled: GreyColors.Grey51Disabled,
    F1: GreyColors.Grey250,
    F2: GreyColors.Grey245,
    F2_5: GreyColors.Grey235,
    F3: GreyColors.Grey230,
    F4: GreyColors.Grey225,
    F5: GreyColors.Grey212,
    F6: GreyColors.Grey203,
    F7: GreyColors.Grey180,
    F7Disabled: GreyColors.Grey180Disabled,
    F8: GreyColors.Grey102,
    F9: GreyColors.Grey51
};
var TabStyles = {
    Colors: SemanticColors,
    Shadow: {
        Standard: '1px 1px 2px 0px rgba(0, 0, 0, 0.15)',
    },
    Spacing: {
        SmallSpace: SpacingUnit / 2,
        DefaultSpace: SpacingUnit,
        MediumSpace: SpacingUnit * 2,
        LargeSpace: SpacingUnit * 3,
        ExtraLargeSpace: SpacingUnit * 4,
    },
    Sizing: {
        BaseUnit: SizingUnit,
        RowHeight: 24,
        ButtonMinWidth: SizingUnit * 15,
        BorderWidth: 1,
        ButtonBorderWidth: 2,
        BorderRadius: 1,
        SelectionBorderWidth: SizingUnit / 2,
        ListRowHeight: 20
    },
    Typography: {
        FontFamily: 'inherit',
        Sizing: FontSizes,
        Color: FontColors
    },
    Opacity: {
        ClearGlass: 0.01,
        Disabled: 0.35,
        OpaqueGlass: 0.33,
    },
    ColorPickerPresets: {
        Dark: graysPreset.concat(darkPreset),
        Light: graysPreset.concat(lightPreset),
        MaestroFlowColors: maestroFlowPreset,
    }
};
exports.TabStyles = TabStyles;
/**
 * Have to override the object rather than just set TabStyles.
 */
var overrideTabStyles = function (overridingTabStyles) {
    TabStyles.Colors = tslib_1.__assign({}, TabStyles.Colors, overridingTabStyles.Colors);
    TabStyles.Opacity = tslib_1.__assign({}, TabStyles.Opacity, overridingTabStyles.Opacity);
    TabStyles.Shadow = tslib_1.__assign({}, TabStyles.Shadow, overridingTabStyles.Shadow);
    TabStyles.Sizing = tslib_1.__assign({}, TabStyles.Sizing, overridingTabStyles.Sizing);
    TabStyles.Spacing = tslib_1.__assign({}, TabStyles.Spacing, overridingTabStyles.Spacing);
    if (overridingTabStyles.Typography) {
        TabStyles.Typography.FontFamily = overridingTabStyles.Typography.FontFamily ?
            overridingTabStyles.Typography.FontFamily : TabStyles.Typography.FontFamily;
        TabStyles.Typography.Color = tslib_1.__assign({}, TabStyles.Typography.Color, overridingTabStyles.Typography.Color);
        TabStyles.Typography.Sizing = tslib_1.__assign({}, TabStyles.Typography.Sizing, overridingTabStyles.Typography.Sizing);
    }
};
exports.overrideTabStyles = overrideTabStyles;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
============= Helpers for building functional/declarative view expressions =============
*/
Object.defineProperty(exports, "__esModule", { value: true });
function conditional(condition, content) {
    return condition ? content : undefined;
}
exports.conditional = conditional;
function testId() {
    var parts = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        parts[_i] = arguments[_i];
    }
    return parts.join('-');
}
exports.testId = testId;
function isAlphabeticChar(char) {
    return char && /^[a-z0-9]$/i.test(char);
}
exports.isAlphabeticChar = isAlphabeticChar;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var react_1 = __webpack_require__(0);
var PreventUserSelect_1 = __webpack_require__(12);
var BlockStyle = {
    boxSizing: 'border-box',
    position: 'relative',
    margin: 0,
    padding: 0,
    lineHeight: 'normal'
};
var Block = /** @class */ (function (_super) {
    tslib_1.__extends(Block, _super);
    function Block() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Block.prototype.render = function () {
        return react_1.createElement('div', tslib_1.__assign({}, this.props, { style: tslib_1.__assign({}, BlockStyle, this.props.style) }));
    };
    return Block;
}(React.Component));
exports.Block = Block;
var InlineBlock = /** @class */ (function (_super) {
    tslib_1.__extends(InlineBlock, _super);
    function InlineBlock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InlineBlock.prototype.render = function () {
        return react_1.createElement('div', tslib_1.__assign({}, this.props, { style: tslib_1.__assign({}, BlockStyle, { display: 'inline-block' }, this.props.style) }));
    };
    return InlineBlock;
}(React.Component));
exports.InlineBlock = InlineBlock;
var Img = /** @class */ (function (_super) {
    tslib_1.__extends(Img, _super);
    function Img() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Img.prototype.render = function () {
        return react_1.createElement('img', tslib_1.__assign({}, this.props, { role: this.props.role || 'presentation', style: tslib_1.__assign({}, PreventUserSelect_1.PreventUserSelectSansCursor, { flexShrink: 0 }, this.props.style) }));
    };
    return Img;
}(React.Component));
exports.Img = Img;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var WidgetManager_1 = __webpack_require__(48);
/**
 * DynamicThemeComponent registers itself to the WidgetManager on mount
 * and unregisters on willUnmount.
 */
var DynamicThemeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicThemeComponent, _super);
    function DynamicThemeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DynamicThemeComponent.prototype.componentDidMount = function () {
        WidgetManager_1.WidgetManager.registerWidget(this);
    };
    DynamicThemeComponent.prototype.componentWillUnmount = function () {
        WidgetManager_1.WidgetManager.unregisterWidget(this);
    };
    return DynamicThemeComponent;
}(React.Component));
exports.DynamicThemeComponent = DynamicThemeComponent;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TabStyles_1 = __webpack_require__(2);
var CheckBox_1 = __webpack_require__(95);
var CheckBoxMixed_1 = __webpack_require__(96);
var Clear_1 = __webpack_require__(97);
var CloseButton_1 = __webpack_require__(98);
var Expando_1 = __webpack_require__(99);
var IconDropdownArrow_1 = __webpack_require__(100);
var MenuItemArrow_1 = __webpack_require__(101);
var MenuItemCheck_1 = __webpack_require__(102);
var LineAndTextDropdownArrow_1 = __webpack_require__(103);
var OutlineDropdownArrow_1 = __webpack_require__(104);
var RadioButton_1 = __webpack_require__(105);
var Search_1 = __webpack_require__(106);
var SliderHandle_1 = __webpack_require__(107);
var SliderLeftHandle_1 = __webpack_require__(108);
var SliderRightHandle_1 = __webpack_require__(109);
var StepperDown_1 = __webpack_require__(110);
var StepperUp_1 = __webpack_require__(111);
var StepperLeft_1 = __webpack_require__(112);
var StepperRight_1 = __webpack_require__(113);
/**
 * For now, here's how to update these:
 * 1) Get the appropriate SVG file from Visual Design.
 * 2) Paste it into https://jakearchibald.github.io/svgomg/ with the default options, copy the minified code out.
 * 3) Paste that into https://www.base64encode.org/ and click "Encode".
 * 4) Ensure the <svg> element has `class="$state$"` and a <style> block for defining interactivity.
 * 5) Save to the resources/ folder and follow the pattern you see in here for other icons.
 */
var svgDataUriRegExp = /^data\:image\/svg\+xml/;
function encodeSvg(svg) {
    return svgDataUriRegExp.test(svg) ? svg : "data:image/svg+xml;base64," + btoa(svg);
}
exports.encodeSvg = encodeSvg;
// Enable for TFS 799296 - "Add *.svg Resources Back and Update Code Playground"
// function decodeSvg(encodedSvg: string): string {
//   return svgDataUriRegExp.test(encodedSvg) ? atob(encodedSvg.substr(26)) : encodedSvg;
// }
function formatSvg(svgImport, state) {
    if (state === void 0) { state = {}; }
    // tslint:disable-next-line:no-any
    var classList = Object.keys(state).filter(function (key) { return !!state[key]; }).join(' ');
    // FIXME need a different webpack loader to get rid of this, TFSID 793075
    return encodeSvg(svgImport.replace('$state$', classList));
}
exports.CloseButtonIcon = {
    height: 14,
    width: 14,
    icon: function (state) { return formatSvg(CloseButton_1.CloseButtonSvg, state); },
};
exports.CheckBoxIcon = {
    height: 16,
    width: 16,
    padding: 1,
    icon: function (state) { return formatSvg(CheckBox_1.CheckBoxSvg, state); },
};
exports.CheckBoxMixedIcon = {
    height: 16,
    width: 16,
    padding: 1,
    icon: function (state) { return formatSvg(CheckBoxMixed_1.CheckBoxMixedSvg, state); },
};
exports.OutlineDropdownArrowIcon = {
    height: 18,
    width: 18,
    icon: function (state) { return formatSvg(OutlineDropdownArrow_1.OutlineDropdownArrowSvg, state); },
};
exports.LineAndTextDropdownArrowIcon = {
    height: 20,
    width: 16,
    icon: function (state) { return formatSvg(LineAndTextDropdownArrow_1.LineAndTextDropdownArrowSvg, state); },
};
exports.IconDropdownArrowIcon = {
    height: 5,
    width: 7,
    icon: function (state) { return formatSvg(IconDropdownArrow_1.IconDropdownArrowSvg, state); },
};
exports.MenuItemArrowIcon = {
    height: 18,
    width: 18,
    icon: function (state) { return formatSvg(MenuItemArrow_1.MenuItemArrowSvg, state); },
};
exports.MenuItemCheckIcon = {
    width: 10,
    height: 10,
    icon: function (state) { return formatSvg(MenuItemCheck_1.MenuItemCheckSvg, state); },
    checkedItemPaddingLeft: TabStyles_1.TabStyles.Spacing.DefaultSpace * 2 + 10,
};
exports.RadioButtonIcon = {
    height: 16,
    width: 16,
    padding: 1,
    icon: function (state) { return formatSvg(RadioButton_1.RadioButtonSvg, state); },
};
exports.StepperUpIcon = {
    height: 11,
    width: 18,
    icon: function (state) { return formatSvg(StepperUp_1.StepperUpSvg, state); },
};
exports.StepperDownIcon = {
    height: 11,
    width: 18,
    icon: function (state) { return formatSvg(StepperDown_1.StepperDownSvg, state); },
};
exports.TextFieldClearIcon = {
    height: 12,
    width: 12,
    icon: function (state) { return formatSvg(Clear_1.ClearSvg, state); },
};
exports.SearchIcon = {
    height: 12,
    width: 12,
    icon: function (state) { return formatSvg(Search_1.SearchSvg, state); },
};
exports.SliderHandleIcon = {
    height: 20,
    width: 20,
    icon: function (state) { return formatSvg(SliderHandle_1.SliderHandleSvg, state); },
};
exports.SliderLeftHandleIcon = {
    height: 20,
    width: 20,
    icon: function (state) { return formatSvg(SliderLeftHandle_1.SliderLeftHandleSvg, state); },
    artworkOffsetFromRightSide: 4,
};
exports.SliderRightHandleIcon = {
    height: 20,
    width: 20,
    icon: function (state) { return formatSvg(SliderRightHandle_1.SliderRightHandleSvg, state); },
    artworkOffsetFromLeftSide: 2,
};
exports.ExpandoIcon = {
    height: 13,
    width: 13,
    icon: function (state) { return formatSvg(Expando_1.ExpandoSvg, state); },
};
exports.ToastCloseButtonIcon = {
    height: 14,
    width: 14,
    icon: function (type) {
        // tslint:disable-next-line:no-any
        var iconState = {};
        iconState[type] = true;
        return formatSvg(CloseButton_1.CloseButtonSvg, iconState);
    },
};
exports.StepperLeftIcon = {
    height: 22,
    width: 18,
    icon: function (state) { return formatSvg(StepperLeft_1.StepperLeftSvg, state); },
};
exports.StepperRightIcon = {
    height: 22,
    width: 18,
    icon: function (state) { return formatSvg(StepperRight_1.StepperRightSvg, state); },
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var BrowserDetection_1 = __webpack_require__(18);
var id = Date.now(); // TFSID 872587 don't start from 0 because Chrome assumes same-id is same-field
function generateId() {
    return "tab-shared-widget-" + id++;
}
exports.generateId = generateId;
/** setTimeout around node.focus, with some safety checks */
function timeoutFocus(node) {
    window.setTimeout(function () {
        if (node && window.document.body.contains(node)) {
            node.focus();
        }
    });
}
exports.timeoutFocus = timeoutFocus;
function detectScrollbarWidth() {
    var div = document.createElement('div');
    div.className = 'scrollbarMeasurement';
    tslib_1.__assign(div.style, {
        width: '100px',
        height: '100px',
        overflowY: 'scroll',
        position: 'absolute',
        visibility: 'hidden',
        border: 'none'
    });
    document.body.appendChild(div);
    var scrollbarWidth = div.offsetWidth - div.clientWidth;
    document.body.removeChild(div);
    return scrollbarWidth;
}
exports.detectScrollbarWidth = detectScrollbarWidth;
function isElementOverflownX(element) {
    return element.clientWidth < element.scrollWidth;
}
exports.isElementOverflownX = isElementOverflownX;
function closest(element, selector) {
    if (element.closest) {
        return element.closest(selector);
    }
    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
    if (!matches) {
        return null;
    }
    var node = element;
    while (node) {
        if (matches.call(node, selector)) {
            return node;
        }
        node = node.parentElement;
    }
    return null;
}
exports.closest = closest;
function findBlurRelatedTarget(e) {
    if (BrowserDetection_1.isIE) {
        // Blur doesn't have relatedTarget in IE11: https://github.com/facebook/react/issues/3751
        return (e.relatedTarget || document.activeElement);
    }
    else {
        return e.relatedTarget;
    }
}
exports.findBlurRelatedTarget = findBlurRelatedTarget;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var PointerEvents_1 = __webpack_require__(13);
var ReactHelpers_1 = __webpack_require__(27);
var GlobalPointerUpListener_1 = __webpack_require__(80);
/**
 * This returns a combined styling with style as it's base. Depending upon the state of the component it assigns
 * onto it the hover, focus, and active styling while overwriting in that order. If disabled, the
 * hover/active/focus styles do not get assigned, but the disabled styling gets assigned.
 */
function resolveInteractiveStyles(style, component) {
    var _a = component.props, disabled = _a.disabled, interactiveStyles = _a.interactiveStyles;
    if (!interactiveStyles) {
        return style;
    }
    return tslib_1.__assign({}, style, (component.state.hover && !disabled && interactiveStyles.hover), (component.state.focus && !disabled && interactiveStyles.focus), (component.state.active && !disabled && interactiveStyles.active), (disabled && interactiveStyles.disabled));
}
/**
 * We must add the pointerUp styling events to the window instead of the element so that the
 * user can mouse down on the element, move off it, mouseUp, and the element can be
 * made to have inactive styling.
 */
var attachPointerUpListener = function (component) {
    var handlePointerUp = function () {
        if (!component.interactiveIsMounted) {
            return;
        }
        component.setState({ active: false });
        if (component.props.handleActive) {
            component.props.handleActive(false);
        }
        component.removePointerUpListener();
        component.removePointerUpListener = undefined;
    };
    component.removePointerUpListener = GlobalPointerUpListener_1.GlobalPointerUpListener.subscribe(handlePointerUp);
};
function renderInteractiveComponent(component, domElement) {
    var _a = component.props, disabled = _a.disabled, pointerDown = _a.pointerDown;
    var pointerEventProps = disabled ? {} : {
        pointerDown: ReactHelpers_1.mergeEventHandlers(pointerDown, function () {
            if (!component.interactiveIsMounted) {
                return;
            }
            component.setState({ active: true });
            if (component.props.handleActive) {
                component.props.handleActive(true);
            }
            if (!component.removePointerUpListener) {
                attachPointerUpListener(component);
            }
        })
    };
    var _b = domElement.props, onMouseOver = _b.onMouseOver, onMouseOut = _b.onMouseOut, onKeyDown = _b.onKeyDown, onKeyUp = _b.onKeyUp, onFocus = _b.onFocus, onBlur = _b.onBlur;
    var domEventProps = disabled ? {} : {
        onMouseOver: ReactHelpers_1.mergeEventHandlers(onMouseOver, function () {
            if (!component.interactiveIsMounted) {
                return;
            }
            component.setState({ hover: true });
            if (component.props.handleHover) {
                component.props.handleHover(true);
            }
        }),
        onMouseOut: ReactHelpers_1.mergeEventHandlers(onMouseOut, function () {
            if (!component.interactiveIsMounted) {
                return;
            }
            component.setState({ hover: false });
            if (component.props.handleHover) {
                component.props.handleHover(false);
            }
        }),
        onKeyDown: ReactHelpers_1.mergeEventHandlers(onKeyDown, function (e) {
            if (!component.interactiveIsMounted) {
                return;
            }
            if (e.key === ' ' || e.key === 'Enter') {
                component.setState({ active: true });
                if (component.props.handleActive) {
                    component.props.handleActive(true);
                }
            }
        }),
        onKeyUp: ReactHelpers_1.mergeEventHandlers(onKeyUp, function (e) {
            if (!component.interactiveIsMounted) {
                return;
            }
            if (e.key === ' ' || e.key === 'Enter') {
                component.setState({ active: false });
                if (component.props.handleActive) {
                    component.props.handleActive(false);
                }
            }
        }),
        onFocus: ReactHelpers_1.mergeEventHandlers(onFocus, function () {
            if (!component.interactiveIsMounted) {
                return;
            }
            component.setState({ focus: true });
            if (component.props.handleFocus) {
                component.props.handleFocus(true);
            }
        }),
        onBlur: ReactHelpers_1.mergeEventHandlers(onBlur, function () {
            if (!component.interactiveIsMounted) {
                return;
            }
            component.setState({ focus: false });
            if (component.props.handleFocus) {
                component.props.handleFocus(false);
            }
        }),
    };
    var resolvedStyles = resolveInteractiveStyles(domElement.props.style, component);
    var resolvedProps = tslib_1.__assign({ style: resolvedStyles, disabled: disabled }, domEventProps);
    var resolvedPointerEventProps = tslib_1.__assign({}, component.props, pointerEventProps);
    return (React.createElement(PointerEvents_1.PointerEventWrapper, tslib_1.__assign({}, resolvedPointerEventProps), React.cloneElement(domElement, resolvedProps)));
}
/**
 * Wrap a DOM component to give it interactive styles and pointer events. All events from the PointerEventWrapper can also be used here.
 * Example that attaches a click to a div and gives different styling on hover:
 *
 *    const interactiveProps = {
 *      pointerClick: () => console.log('click'),
 *      interactiveStyles: {
 *        hover: { color: 'salmon' }
 *      }
 *    };
 *
 *    // DOM attributes should go straight to the DOM element
 *    const domProps = {
 *      style: { color: 'fallow' },
 *      onBlur: () => console.log('blur')
 *    };
 *
 *    <InteractiveDomWrapper {...props}>
 *      <div {...domProps} />
 *    </InteractiveDomWrapper>
 *
 * When using, you can only have one child and it must render its props to a DOM component.
 * If there is not exactly one child an exception will be thrown.
 */
var InteractiveDomWrapper = /** @class */ (function (_super) {
    tslib_1.__extends(InteractiveDomWrapper, _super);
    function InteractiveDomWrapper(props) {
        var _this = _super.call(this, props) || this;
        _this.state = tslib_1.__assign({}, _this.state, { hover: false, active: false, focus: false });
        _this.interactiveIsMounted = true;
        return _this;
    }
    InteractiveDomWrapper.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.disabled && nextProps.disabled !== this.props.disabled) {
            this.setState({ active: false, focus: false, hover: false });
        }
    };
    InteractiveDomWrapper.prototype.componentWillUnmount = function () {
        this.interactiveIsMounted = false;
        if (this.removePointerUpListener) {
            this.removePointerUpListener();
        }
    };
    InteractiveDomWrapper.prototype.render = function () {
        // reuse the child. It could be anything - div, ul, button, etc.
        return renderInteractiveComponent(this, React.Children.only(this.props.children));
    };
    return InteractiveDomWrapper;
}(React.Component));
exports.InteractiveDomWrapper = InteractiveDomWrapper;
/**
 * Higher order component providing CSS :pseudo classes behavior and pointer events. All events from the PointerEventWrapper
 * can also be used here.
 *
 * You can use this to wrap either stateless components or component classes. To use as a @Decorator,
 * use the InteractiveDomHoCDecorator
 */
var InteractiveDomHoC = function (componentType) {
    var _a;
    var componentClass = ReactHelpers_1.convertToStatefulComponentClass(componentType);
    var newComponentClass = (_a = /** @class */ (function (_super) {
            tslib_1.__extends(class_1, _super);
            function class_1(props) {
                var _this = _super.call(this, props) || this;
                _this.state = tslib_1.__assign({}, _this.state, { hover: false, active: false, focus: false });
                _this.interactiveIsMounted = true;
                return _this;
            }
            class_1.prototype.componentWillReceiveProps = function (nextProps) {
                if (nextProps.disabled && nextProps.disabled !== this.props.disabled) {
                    this.setState({ active: false, focus: false, hover: false });
                }
            };
            /**
             * Why no super?  React.Component does not actually implement the component lifecycle methods, but checks the instance
             * at runtime to see if they are defined.  Therefore super.componentWillUnmount property does not exist at compile time.
             * Instead we look to see if componentWillUnmount exists on the componentClass by looking at it's prototype and calling it
             * if so.
             */
            class_1.prototype.callComponentClassWillUnmount = function () {
                // tslint:disable-next-line:no-string-literal
                var componentClassWillUnmount = componentClass.prototype['componentWillUnmount'];
                if (componentClassWillUnmount) {
                    componentClassWillUnmount.apply(this);
                }
            };
            class_1.prototype.componentWillUnmount = function () {
                this.callComponentClassWillUnmount();
                this.interactiveIsMounted = false;
                if (this.removePointerUpListener) {
                    this.removePointerUpListener();
                }
            };
            class_1.prototype.render = function () {
                // tslint:disable-next-line:no-any //TODO: TFS524216
                var component = this;
                return renderInteractiveComponent(component, _super.prototype.render.call(this));
            };
            return class_1;
        }(componentClass)),
        _a.displayName = "InteractiveDom(" + ReactHelpers_1.getComponentName(componentType) + ")",
        _a);
    return newComponentClass;
};
exports.InteractiveDomHoC = InteractiveDomHoC;
/** Do some type magic so this can be used as a @Decorator on a component class */
// tslint:disable:no-any
var InteractiveDomHoCDecorator = InteractiveDomHoC;
exports.InteractiveDomHoCDecorator = InteractiveDomHoCDecorator;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_9__;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
// tslint:disable:deprecation
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var throttle = __webpack_require__(50);
var StackingComponent_1 = __webpack_require__(19);
var StackingRoot_1 = __webpack_require__(37);
var ScrollingRoot_1 = __webpack_require__(47);
var ViewportHelpers = __webpack_require__(28);
var ResizeThrottleTime = 100;
var ScrollThrottleTime = 15;
var VerticalOriginOption;
(function (VerticalOriginOption) {
    VerticalOriginOption[VerticalOriginOption["top"] = 0] = "top";
    VerticalOriginOption[VerticalOriginOption["centerY"] = 1] = "centerY";
    VerticalOriginOption[VerticalOriginOption["bottom"] = 2] = "bottom";
})(VerticalOriginOption || (VerticalOriginOption = {}));
exports.VerticalOriginOption = VerticalOriginOption;
var HorizontalOriginOption;
(function (HorizontalOriginOption) {
    HorizontalOriginOption[HorizontalOriginOption["left"] = 0] = "left";
    HorizontalOriginOption[HorizontalOriginOption["centerX"] = 1] = "centerX";
    HorizontalOriginOption[HorizontalOriginOption["right"] = 2] = "right";
})(HorizontalOriginOption || (HorizontalOriginOption = {}));
exports.HorizontalOriginOption = HorizontalOriginOption;
var Overlay = /** @class */ (function (_super) {
    tslib_1.__extends(Overlay, _super);
    function Overlay() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onResize = throttle(function () { return _this.setPlacement(); }, ResizeThrottleTime);
        /**
         * Once the stacking wrapper mounts it returns itself and we set the placement in case the stacked element is already open
         */
        _this.setStackingWrapper = function (stackingWrapper) {
            _this.stackingWrapper = stackingWrapper;
            _this.setPlacement();
        };
        return _this;
    }
    Overlay.prototype.componentDidMount = function () {
        this.addScrollingRootBehavior();
        window.addEventListener('resize', this.onResize);
        if (this.props.autoFocus && this.stackingWrapper) {
            var wrapperNode = ReactDOM.findDOMNode(this.stackingWrapper);
            var node = wrapperNode.querySelector('[tabindex="0"]') || wrapperNode.querySelector('[tabindex]');
            if (node) {
                node.focus();
            }
        }
    };
    Overlay.prototype.componentWillUnmount = function () {
        this.removeScrollingRootBehavior();
        window.removeEventListener('resize', this.onResize);
    };
    Overlay.prototype.componentDidUpdate = function (prevProps) {
        this.resetScrollingRootBehaviorIfNeeded(prevProps);
        this.setPlacement();
    };
    /**
     * This adds the scrolling event listeners to the scrolling root if onScroll is not null.
     */
    Overlay.prototype.addScrollingRootBehavior = function () {
        this.setOnScroll();
        this.setScrollingRoot();
        if (!!this.onScroll) {
            this.scrollingRoot.addEventListener('scroll', this.onScroll);
            this.scrollingRoot.addEventListener('wheel', this.onScroll);
        }
    };
    /**
     * This removes the scrolling event listeners to the scrolling root if onScroll is not null.
     */
    Overlay.prototype.removeScrollingRootBehavior = function () {
        if (!!this.onScroll) {
            this.scrollingRoot.removeEventListener('scroll', this.onScroll);
            this.scrollingRoot.removeEventListener('wheel', this.onScroll);
        }
    };
    /**
     * This resets the scrolling root behavior if handleScrollOnScrollingRoot or shouldAutoPositionOnScrollingRootScroll has changed.
     */
    Overlay.prototype.resetScrollingRootBehaviorIfNeeded = function (prevProps) {
        if (prevProps.handleScrollOnScrollingRoot !== this.props.handleScrollOnScrollingRoot ||
            prevProps.shouldAutoPositionOnScrollingRootScroll !== this.props.shouldAutoPositionOnScrollingRootScroll) {
            this.removeScrollingRootBehavior();
            this.addScrollingRootBehavior();
        }
    };
    /**
     * Assigns onScroll to a method if shouldAutoPositionOnScrollingRootScroll is true or handleScrollOnScrollingRoot is not null.
     * Otherwise assign it to null.
     */
    Overlay.prototype.setOnScroll = function () {
        var _this = this;
        if (this.props.shouldAutoPositionOnScrollingRootScroll || !!this.props.handleScrollOnScrollingRoot) {
            var onScroll = function () {
                if (_this.props.shouldAutoPositionOnScrollingRootScroll) {
                    _this.setPlacement();
                }
                if (!!_this.props.handleScrollOnScrollingRoot) {
                    _this.props.handleScrollOnScrollingRoot();
                }
            };
            this.onScroll = throttle(onScroll, ScrollThrottleTime);
        }
        else {
            this.onScroll = null;
        }
    };
    Overlay.prototype.setScrollingRoot = function () {
        this.scrollingRoot = this.props.scrollingRootId ? document.getElementById(this.props.scrollingRootId) :
            ScrollingRoot_1.ScrollingRootConfig.getDefaultRootContainer();
        if (!this.scrollingRoot) {
            throw Error('Could not find scrolling root with the id scrollingRootId.');
        }
    };
    /**
     * Returns the position of the anchor element
     */
    Overlay.prototype.getAnchorPosition = function () {
        var anchorClientRect = undefined;
        if (this.props.getAnchorClientRect) {
            anchorClientRect = this.props.getAnchorClientRect();
        }
        if (anchorClientRect === undefined) {
            // This will allow stacked elements to be placed locally if no anchor element is provided
            var anchorEl = this.props.anchorEl || ReactDOM.findDOMNode(this);
            anchorClientRect = anchorEl.getBoundingClientRect();
        }
        var left = anchorClientRect.left, top = anchorClientRect.top, right = anchorClientRect.right, bottom = anchorClientRect.bottom;
        return {
            top: top,
            centerY: top + (bottom - top) / 2,
            bottom: bottom,
            left: left,
            centerX: left + (right - left) / 2,
            right: right,
        };
    };
    /**
     * Returns the shape of the element that has been stacked in position coordinates. So the top left of the shape
     * is top: 0, left: 0, the right corner is top: 0, right: width, and so on.
     */
    Overlay.prototype.getStackedElCurrentShapeInPositionCoords = function () {
        var stackedEl = this.getStackedEl();
        return {
            top: 0,
            centerY: stackedEl.offsetHeight / 2,
            bottom: stackedEl.offsetHeight,
            left: 0,
            centerX: stackedEl.offsetWidth / 2,
            right: stackedEl.offsetWidth,
        };
    };
    /**
     * Returns the rectangle of the container
     */
    Overlay.prototype.getContainerRect = function () {
        var stackingRoot = this.props.stackingRootId ? document.getElementById(this.props.stackingRootId) :
            StackingRoot_1.StackingRootConfig.getDefaultRootContainer();
        if (!stackingRoot) {
            throw Error('Could not find stacking root.');
        }
        return stackingRoot.getBoundingClientRect();
    };
    /**
     * Sets the stacked element position
     */
    Overlay.prototype.setPlacement = function () {
        if (!this.stackingWrapper || !this.stackingWrapper.getMountPoint()) {
            return;
        }
        var stackedElAdjustedPosition = this.getStackedElAdjustedPosition();
        var stackedEl = this.getStackedEl();
        stackedEl.style.top = stackedElAdjustedPosition.top + "px";
        stackedEl.style.left = stackedElAdjustedPosition.left + "px";
        stackedEl.style.position = 'absolute';
        if (this.props.disablePointerEvents) {
            stackedEl.style.pointerEvents = 'none';
        }
    };
    /**
     * Gets the stacked element from stacking wrapper
     */
    Overlay.prototype.getStackedEl = function () {
        return this.stackingWrapper.getMountPoint().firstChild;
    };
    /**
     * Returns the Stacked Element position that has been autopositioned if necessary and adjusted to position
     * relative to the container
     */
    Overlay.prototype.getStackedElAdjustedPosition = function () {
        var viewportPosition = this.getDefaultStackedElViewportPosition();
        if (this.props.allowAutoPosition) {
            viewportPosition = this.getAutoPositionIfNeeded(viewportPosition);
        }
        return this.getAdjustStackedElPositionForContainer(viewportPosition);
    };
    /**
     * Returns the stacked element viewport position from the given and default origin option props
     */
    Overlay.prototype.getDefaultStackedElViewportPosition = function () {
        var stackedElPosition = this.getStackedElViewportPosition(this.props.anchorOrigin, this.props.stackedOrigin);
        if (!this.props.getAnchorClientRect) {
            stackedElPosition.top += (this.props.topFromOverlaidPosition || 0);
            stackedElPosition.left += (this.props.leftFromOverlaidPosition || 0);
        }
        return stackedElPosition;
    };
    /**
     * Adjusts the viewport position so that it can be absolutely positioned relative to the container
     */
    Overlay.prototype.getAdjustStackedElPositionForContainer = function (viewportPosition) {
        var containerRect = this.getContainerRect();
        var newPosition = {
            top: viewportPosition.top - containerRect.top,
            left: viewportPosition.left - containerRect.left
        };
        return newPosition;
    };
    /**
     * Using the given origins return the adjusted stacked element viewport position
     */
    Overlay.prototype.getStackedElViewportPosition = function (anchorOriginOptions, stackedElOriginOptions) {
        var anchorPosition = this.getAnchorPosition();
        var stackedElShape = this.getStackedElCurrentShapeInPositionCoords();
        // This gets the origin strings from the enum (eg 'top', 'left', etc)
        var anchorVerticalOriginOption = VerticalOriginOption[anchorOriginOptions.vertical];
        var anchorHorizontalOriginOption = HorizontalOriginOption[anchorOriginOptions.horizontal];
        var stackedElVerticalOriginOption = VerticalOriginOption[stackedElOriginOptions.vertical];
        var stackedElHorizontalOriginOption = HorizontalOriginOption[stackedElOriginOptions.horizontal];
        // This gets the top/left for the anchor/stackedEl origins,
        // similar to OriginPositionCoordinates.left, OriginPositionCoordinates.top, etc
        var anchorOriginTop = anchorPosition[anchorVerticalOriginOption];
        var anchorOriginLeft = anchorPosition[anchorHorizontalOriginOption];
        var stackedElOriginTop = stackedElShape[stackedElVerticalOriginOption];
        var stackedElOriginLeft = stackedElShape[stackedElHorizontalOriginOption];
        var adjustedStackedPosition = {
            top: anchorOriginTop - stackedElOriginTop,
            left: anchorOriginLeft - stackedElOriginLeft,
        };
        return adjustedStackedPosition;
    };
    /**
     * This will try to autoposition the stacked element if the stacked element will appear off screen.
     * It autopositions by using the opposite origin options and getting that viewport position
     *
     * Example:
     * Anchor is at the bottom right of the screen with the anchor origin as {top, right} and the stacked el origin as {top, left}
     * Detects that it's vertically offscreen and changes the anchor origin to {bottom, right} and stacked el origin as {bottom, left}
     * Method sees that it is now not below the screen and sets the adjusted top position
     * Detects that it's horizontally offscreen and changes the anchor origin to {top, left} and stacked el origin as {top, right}
     * Method sees that it is now not to the right of the screen and sets the adjusted left position
     */
    Overlay.prototype.getAutoPositionIfNeeded = function (adjustedStackedElPosition) {
        var stackedElShape = this.getStackedElCurrentShapeInPositionCoords();
        var oppositeOriginPosition = this.getOppositeOriginPosition();
        var layoutViewportSize = ViewportHelpers.getLayoutViewportSize();
        var isVerticallyOffscreen = adjustedStackedElPosition.top < 0 ||
            adjustedStackedElPosition.top + stackedElShape.bottom > layoutViewportSize.height;
        var isHorizontallyOffscreen = adjustedStackedElPosition.left < 0 ||
            adjustedStackedElPosition.left + stackedElShape.right > layoutViewportSize.width;
        if (isVerticallyOffscreen) {
            if (oppositeOriginPosition.top + stackedElShape.bottom <= layoutViewportSize.height) {
                adjustedStackedElPosition.top = Math.max(0, oppositeOriginPosition.top);
            }
            else if (stackedElShape.bottom <= layoutViewportSize.height) {
                adjustedStackedElPosition.top = Math.max(0, layoutViewportSize.height - stackedElShape.bottom);
            }
        }
        if (isHorizontallyOffscreen) {
            if (oppositeOriginPosition.left + stackedElShape.right <= layoutViewportSize.width) {
                adjustedStackedElPosition.left = Math.max(0, oppositeOriginPosition.left);
            }
            else if (stackedElShape.right <= layoutViewportSize.width) {
                adjustedStackedElPosition.left = Math.max(0, layoutViewportSize.width - stackedElShape.right);
            }
        }
        return adjustedStackedElPosition;
    };
    /**
     * Uses the opposite origins for the anchor and stacked element to return the viewport position
     */
    Overlay.prototype.getOppositeOriginPosition = function () {
        var oppositeAnchorOriginOptions = this.getOppositeOriginsOptions(this.props.anchorOrigin);
        var oppositeStackedElOriginOptions = this.getOppositeOriginsOptions(this.props.stackedOrigin);
        var stackedElPosition = this.getStackedElViewportPosition(oppositeAnchorOriginOptions, oppositeStackedElOriginOptions);
        if (!this.props.getAnchorClientRect) {
            stackedElPosition.top -= (this.props.topFromOverlaidPosition || 0);
            stackedElPosition.left -= (this.props.leftFromOverlaidPosition || 0);
        }
        return stackedElPosition;
    };
    /**
     * Returns the opposite origin options
     */
    Overlay.prototype.getOppositeOriginsOptions = function (originOptions) {
        return {
            horizontal: this.getOppositeHorizontalOption(originOptions.horizontal),
            vertical: this.getOppositeVerticalOption(originOptions.vertical)
        };
    };
    /**
     * Returns the opposite VerticalOriginOption, unless it is center.
     */
    Overlay.prototype.getOppositeVerticalOption = function (verticalOriginOption) {
        if (verticalOriginOption === VerticalOriginOption.centerY) {
            return VerticalOriginOption.centerY;
        }
        return verticalOriginOption === VerticalOriginOption.top ? VerticalOriginOption.bottom : VerticalOriginOption.top;
    };
    /**
     * Returns the opposite HorizontalOriginOption, unless it is center.
     */
    Overlay.prototype.getOppositeHorizontalOption = function (horizontalOriginOption) {
        if (horizontalOriginOption === HorizontalOriginOption.centerX) {
            return HorizontalOriginOption.centerX;
        }
        return horizontalOriginOption === HorizontalOriginOption.left ? HorizontalOriginOption.right : HorizontalOriginOption.left;
    };
    Overlay.prototype.render = function () {
        var wrapperId = this.props.stackingRootId ? this.props.stackingRootId + "-" : '';
        wrapperId = this.props.scrollingRootId ? "" + wrapperId + this.props.scrollingRootId + "-" : wrapperId;
        return (React.createElement("div", { style: { display: 'none' } },
            React.createElement(StackingComponent_1.StackingComponentWrapper, { portalEventTrapOverrides: this.props.portalEventTrapOverrides, ref: this.setStackingWrapper, stackingRootId: this.props.stackingRootId, wrapperTestId: wrapperId + "Overlay", zIndex: this.props.zIndex }, this.props.children)));
    };
    Overlay.defaultProps = {
        anchorOrigin: {
            vertical: VerticalOriginOption.top,
            horizontal: HorizontalOriginOption.left
        },
        stackedOrigin: {
            vertical: VerticalOriginOption.top,
            horizontal: HorizontalOriginOption.left
        }
    };
    return Overlay;
}(React.Component));
exports.Overlay = Overlay;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * This file is auto-generated. Do not modify directly.
 */
Object.defineProperty(exports, "__esModule", { value: true });
function getLocalize() {
    if (typeof Localize === 'undefined') {
        throw Error('The messages.<locale>.js file has not been loaded');
    }
    return Localize;
}
;
function getLocalizeFormat() {
    var localize = getLocalize();
    if (localize.format === undefined) {
        throw Error('The formatters-and-parsers.<locale>.js file has not been loaded');
    }
    return localize.format;
}
exports.LocaleData = { get: function () { return getLocalizeFormat().localeData; } };
var t = function (k, a) { return getLocalize().msg.formatMessage(k, a); };
exports.Messages = {
    close: function () { return t('@tableau__widgets/close'); },
    closeDialog: function () { return t('@tableau__widgets/closeDialog'); },
    customColor: function () { return t('@tableau__widgets/customColor'); },
    increment: function () { return t('@tableau__widgets/increment'); },
    decrement: function () { return t('@tableau__widgets/decrement'); },
    waitIndicatorLabel: function () { return t('@tableau__widgets/waitIndicatorLabel'); },
    enterValidDate: function () { return t('@tableau__widgets/enterValidDate'); },
    previousMonth: function () { return t('@tableau__widgets/previousMonth'); },
    nextMonth: function () { return t('@tableau__widgets/nextMonth'); },
    weekNumber: function (a) { return t('@tableau__widgets/weekNumber', a); },
    noMatches: function () { return t('@tableau__widgets/noMatches'); },
    infoToastPrefix: function () { return t('@tableau__widgets/infoToastPrefix'); },
    successToastPrefix: function () { return t('@tableau__widgets/successToastPrefix'); },
    warningToastPrefix: function () { return t('@tableau__widgets/warningToastPrefix'); },
    errorToastPrefix: function () { return t('@tableau__widgets/errorToastPrefix'); },
};
exports.Formatters = {
    formatFullMonthAndFullYear: function (a) { return getLocalizeFormat().formatDate(a, { "skeleton": "yyyyMMMM" }); },
    formatNarrowDayOfWeek: function (a) { return getLocalizeFormat().formatDate(a, { "skeleton": "EEEEE" }); },
    formatShortDate: function (a) { return getLocalizeFormat().formatDate(a, { "date": "short" }); },
    formatMediumDate: function (a) { return getLocalizeFormat().formatDate(a, { "date": "medium" }); },
    formatLongDate: function (a) { return getLocalizeFormat().formatDate(a, { "date": "long" }); },
    formatFullDate: function (a) { return getLocalizeFormat().formatDate(a, { "date": "full" }); },
    formatShortDateTime: function (a) { return getLocalizeFormat().formatDate(a, { "datetime": "short" }); },
    formatMediumDateTime: function (a) { return getLocalizeFormat().formatDate(a, { "datetime": "medium" }); },
    formatLongDateTime: function (a) { return getLocalizeFormat().formatDate(a, { "datetime": "long" }); },
    formatFullDateTime: function (a) { return getLocalizeFormat().formatDate(a, { "datetime": "full" }); },
    formatShortDateWithFullYear: function (a) { return getLocalizeFormat().formatDate(a, { "skeleton": "yyyyMd" }); },
    formatShortDateTimeWithFullYear: function (a) { return getLocalizeFormat().formatDate(a, { "skeleton": "yyyyMdhm" }); },
    formatShortDateTimeWithFullYear24Hour: function (a) { return getLocalizeFormat().formatDate(a, { "skeleton": "yyyyMdHm" }); },
    formatShortDateMediumTimeWithFullYear: function (a) { return getLocalizeFormat().formatDate(a, { "skeleton": "yyyyMdhms" }); },
    formatShortDateMediumTimeWithFullYear24Hour: function (a) { return getLocalizeFormat().formatDate(a, { "skeleton": "yyyyMdHms" }); },
};
exports.Parsers = {
    parseShortDate: function (a) { return getLocalizeFormat().parseDate(a, { "date": "short" }); },
    parseMediumDate: function (a) { return getLocalizeFormat().parseDate(a, { "date": "medium" }); },
    parseLongDate: function (a) { return getLocalizeFormat().parseDate(a, { "date": "long" }); },
    parseFullDate: function (a) { return getLocalizeFormat().parseDate(a, { "date": "full" }); },
    parseShortDateTime: function (a) { return getLocalizeFormat().parseDate(a, { "datetime": "short" }); },
    parseMediumDateTime: function (a) { return getLocalizeFormat().parseDate(a, { "datetime": "medium" }); },
    parseLongDateTime: function (a) { return getLocalizeFormat().parseDate(a, { "datetime": "long" }); },
    parseFullDateTime: function (a) { return getLocalizeFormat().parseDate(a, { "datetime": "full" }); },
    parseShortDateWithFullYear: function (a) { return getLocalizeFormat().parseDate(a, { "skeleton": "yyyyMd" }); },
    parseShortDateTimeWithFullYear: function (a) { return getLocalizeFormat().parseDate(a, { "skeleton": "yyyyMdhm" }); },
    parseShortDateTimeWithFullYear24Hour: function (a) { return getLocalizeFormat().parseDate(a, { "skeleton": "yyyyMdHm" }); },
    parseShortDateMediumTimeWithFullYear: function (a) { return getLocalizeFormat().parseDate(a, { "skeleton": "yyyyMdhms" }); },
    parseShortDateMediumTimeWithFullYear24Hour: function (a) { return getLocalizeFormat().parseDate(a, { "skeleton": "yyyyMdHms" }); },
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
exports.PreventUserSelectSansCursor = {
    userSelect: 'none',
    'WebkitUserSelect': 'none',
    'msUserSelect': 'none',
    'MozUserSelect': 'none',
};
exports.PreventUserSelect = tslib_1.__assign({}, exports.PreventUserSelectSansCursor, { cursor: 'default' });


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var PointerEventAdapter_1 = __webpack_require__(49);
var ReactHelpers_1 = __webpack_require__(27);
/**
 * Wrap a DOM component to give it pointer events. Example that attaches a click to a div:
 *
 *    React.createElement(PointerEventWrapper, { pointerClick: () => console.log('click') },
 *      React.createElement('div')
 *    )
 *
 * When using, you can only have one child and it must render its props to a DOM component or events will not be attached.
 * If there is more than one child an exception will be thrown.
 */
var PointerEventWrapper = /** @class */ (function (_super) {
    tslib_1.__extends(PointerEventWrapper, _super);
    function PointerEventWrapper(props) {
        var _this = _super.call(this, props) || this;
        _this.pointerEventAdapter = PointerEventAdapter_1.PointerEventAdapterManager.adapterFactory();
        return _this;
    }
    PointerEventWrapper.prototype.componentDidMount = function () {
        if (this.pointerEventAdapter.didMount) {
            var domNode = ReactDOM.findDOMNode(this);
            this.pointerEventAdapter.didMount(domNode, this.props);
        }
    };
    PointerEventWrapper.prototype.componentWillUnmount = function () {
        if (this.pointerEventAdapter.willUnmount) {
            this.pointerEventAdapter.willUnmount();
        }
    };
    PointerEventWrapper.prototype.render = function () {
        var eventAttributes = this.pointerEventAdapter.getHtmlAttributes(this.props);
        // reuse the child. It could be anything - div, ul, button, etc.
        var child = React.Children.only(this.props.children);
        // tslint:disable-next-line:no-any
        var mergedEventAttributes = {};
        Object.keys(eventAttributes).forEach(function (key) {
            // tslint:disable-next-line:no-any
            mergedEventAttributes[key] = ReactHelpers_1.mergeEventHandlers(eventAttributes[key], child.props[key]);
        });
        var clonedElement = React.cloneElement(child, mergedEventAttributes, child.props.children);
        return clonedElement;
    };
    return PointerEventWrapper;
}(React.PureComponent));
exports.PointerEventWrapper = PointerEventWrapper;
/**
 * Higher Order Component to give a component pointer event capabilities
 *
 * The root child of the underlying component must render its props to a DOM component or events will not be attached.
 */
var PointerEventHoC = function (componentType) {
    var componentClass = ReactHelpers_1.convertToStatefulComponentClass(componentType);
    // Wrap the component in a PointerEventWrapper
    var newComponentClass = /** @class */ (function (_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.render = function () {
            return React.createElement(PointerEventWrapper, this.props, _super.prototype.render.call(this));
        };
        return class_1;
    }(componentClass));
    newComponentClass.displayName = "PointerEventHoC(" + ReactHelpers_1.getComponentName(componentType) + ")";
    return newComponentClass;
};
exports.PointerEventHoC = PointerEventHoC;
// This is here only to make the type system happy. Ideally we'd use PointerEventHoC
// tslint:disable:no-any
var PointerEventHoCDecorator = PointerEventHoC;
exports.PointerEventHoCDecorator = PointerEventHoCDecorator;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ButtonWidgetStyles_1 = __webpack_require__(51);
var ButtonBase_1 = __webpack_require__(52);
var DynamicThemeComponent_1 = __webpack_require__(5);
var Declarative_1 = __webpack_require__(3);
var ButtonType;
(function (ButtonType) {
    ButtonType[ButtonType["Attention"] = 0] = "Attention";
    ButtonType[ButtonType["Grey"] = 1] = "Grey";
    ButtonType[ButtonType["Go"] = 2] = "Go";
    ButtonType[ButtonType["Outline"] = 3] = "Outline";
    ButtonType[ButtonType["LightOutline"] = 4] = "LightOutline";
    ButtonType[ButtonType["OutlineGo"] = 5] = "OutlineGo";
    ButtonType[ButtonType["OutlineAttention"] = 6] = "OutlineAttention";
    ButtonType[ButtonType["Text"] = 7] = "Text";
    ButtonType[ButtonType["DarkText"] = 8] = "DarkText";
    ButtonType[ButtonType["DarkBoldText"] = 9] = "DarkBoldText";
    ButtonType[ButtonType["Icon"] = 10] = "Icon";
    ButtonType[ButtonType["IconOutline"] = 11] = "IconOutline";
})(ButtonType || (ButtonType = {}));
exports.ButtonType = ButtonType;
var ButtonWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ButtonWidget, _super);
    function ButtonWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.handleActive = function (active) {
            if (_this.props.getContent && active !== _this.state.active) {
                _this.setState({ active: active });
            }
        };
        _this.handleFocus = function (focus) {
            if (_this.props.getContent && focus !== _this.state.focus) {
                _this.setState({ focus: focus });
            }
        };
        _this.handleHover = function (hover) {
            if (_this.props.getContent && hover !== _this.state.hover) {
                _this.setState({ hover: hover });
            }
        };
        _this.state = { active: false, disabled: props.disabled, focus: false, hover: false, selected: props.selected };
        return _this;
    }
    ButtonWidget.prototype.componentWillReceiveProps = function (nextProps) {
        var stateUpdate = {};
        if (nextProps.disabled !== this.props.disabled) {
            if (nextProps.disabled) {
                stateUpdate = { active: false, disabled: nextProps.disabled, focus: false, hover: false };
            }
            else {
                stateUpdate = { disabled: nextProps.disabled };
            }
        }
        if (nextProps.selected !== this.props.selected) {
            stateUpdate.selected = nextProps.selected;
        }
        this.setState(stateUpdate);
    };
    ButtonWidget.prototype.render = function () {
        var buttonStyle = ButtonWidgetStyles_1.getButtonStyle(this.props.buttonType);
        var buttonBaseProps = {
            disabled: this.props.disabled,
            disableTabAccessibility: this.props.disableTabAccessibility,
            handleClick: this.props.handleClick,
            interactiveStyle: buttonStyle.interactive,
            onActive: this.handleActive,
            onFocus: this.handleFocus,
            onHover: this.handleHover,
            role: this.props.role,
            selected: this.props.selected,
            style: tslib_1.__assign({}, buttonStyle.base, this.props.style),
            testId: Declarative_1.testId(this.props.testId, 'Button'),
            title: this.props.title
        };
        return (React.createElement(ButtonBase_1.ButtonBase, tslib_1.__assign({}, buttonBaseProps), this.props.getContent ? this.props.getContent(this.state) : this.props.children));
    };
    return ButtonWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.ButtonWidget = ButtonWidget;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// tslint:disable:no-any
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the first index in the array in which the element satisfies the provided testing function.
 * Otherwise -1 is returned if no elements satisfy it.
 * Wraps around array and starts at the given startIndex.
 */
var findIndex = function (array, testingFn, startIndex, thisArg) {
    if (startIndex === void 0) { startIndex = 0; }
    for (var i = startIndex; i < array.length + startIndex; i++) {
        var index = i % array.length;
        if (testingFn.call(thisArg, array[index], index)) {
            return index;
        }
    }
    return -1;
};
exports.findIndex = findIndex;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TextEllipsis = {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
};
exports.TextEllipsis = TextEllipsis;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var DynamicThemeComponent_1 = __webpack_require__(5);
var TextInputType = /** @class */ (function () {
    function TextInputType(value) {
        this.value = value;
    }
    TextInputType.prototype.toString = function () {
        return this.value;
    };
    TextInputType.Text = new TextInputType('text');
    TextInputType.Password = new TextInputType('password');
    return TextInputType;
}());
exports.TextInputType = TextInputType;
var TextFieldBase = /** @class */ (function (_super) {
    tslib_1.__extends(TextFieldBase, _super);
    function TextFieldBase(props) {
        var _this = _super.call(this, props) || this;
        _this.handleInputActive = function (active) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ inputActive: active });
        };
        _this.handleInputFocus = function (focus) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ inputFocus: focus });
        };
        _this.handleBlur = function () {
            if (_this.props.disabled) {
                return;
            }
            if (_this.props.handleBlur) {
                _this.props.handleBlur();
            }
        };
        _this.handleInputHover = function (hover) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ inputHover: hover });
        };
        _this.state = tslib_1.__assign({}, _this.state, { inputFocus: false, inputActive: false, inputHover: false });
        return _this;
    }
    TextFieldBase.prototype.isInputActiveOrHasFocus = function () {
        return this.state.inputActive || this.state.inputFocus;
    };
    /**
     * Show placeholder if there is no text
     */
    TextFieldBase.prototype.isPlaceholderShowing = function () {
        return !this.props.text;
    };
    TextFieldBase.defaultProps = {
        shouldSelectTextOnFocus: true
    };
    return TextFieldBase;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.TextFieldBase = TextFieldBase;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function checkNavigator(testExp) {
    if (navigator) {
        return testExp.test(navigator.userAgent);
    }
    return false;
}
exports.isIE = checkNavigator(/Trident/);
exports.isEdge = checkNavigator(/Edge\//);
exports.isMac = checkNavigator(/Mac/);
/**
 * Platform-aware version of `e.ctrlKey`
 */
function isCtrl(event) {
    if (exports.isMac) {
        return event.metaKey || event.ctrlKey;
    }
    else {
        return event.ctrlKey;
    }
}
exports.isCtrl = isCtrl;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var StackingRoot_1 = __webpack_require__(37);
var Declarative_1 = __webpack_require__(3);
var ReactHelpers_1 = __webpack_require__(27);
var PortalEventTrap_1 = __webpack_require__(89);
/**
 * The stacking component maintains the lifecycle of its child by appending/rendering into the stacking root,
 * and unmounting the child when the stacking component is unmounting.
 */
var StackingComponentWrapper = /** @class */ (function (_super) {
    tslib_1.__extends(StackingComponentWrapper, _super);
    function StackingComponentWrapper(props) {
        var _this = _super.call(this, props) || this;
        _this.stackingRoot = _this.props.stackingRootId ? document.getElementById(_this.props.stackingRootId) :
            StackingRoot_1.StackingRootConfig.getDefaultRootContainer();
        if (!_this.stackingRoot) {
            throw Error('Could not find stacking root.');
        }
        _this.warnIfRootIsNotPositioned();
        _this.createMountPoint();
        return _this;
    }
    StackingComponentWrapper.prototype.warnIfRootIsNotPositioned = function () {
        if (this.stackingRoot === document.body) {
            return;
        }
        var position = window.getComputedStyle(this.stackingRoot).position;
        if (position !== 'relative' && position !== 'absolute') {
            throw Error("Root Container does not have relative or absolute positioning.  Since some shared widgets absolutely\n      position relative to the container this may interfere with positioning");
        }
    };
    StackingComponentWrapper.prototype.componentDidMount = function () {
        this.stackingRoot.appendChild(this.mountPoint);
    };
    StackingComponentWrapper.prototype.componentWillUnmount = function () {
        this.stackingRoot.removeChild(this.mountPoint);
    };
    StackingComponentWrapper.prototype.getMountPoint = function () {
        return this.mountPoint;
    };
    /**
     * Create the mount point where the stacked element will be mounted and append it to the stacking root.  It should align
     * with the top/left of the stacking root as to align the positioning of stacked elements with the stacking root.  This prevents
     * cases where there are relatively positioned elements above the mount point, thus making the top of the mount point below the top
     * of the stacking root.
     */
    StackingComponentWrapper.prototype.createMountPoint = function () {
        if (!this.mountPoint) {
            this.mountPoint = document.createElement('div');
            this.mountPoint.style.zIndex = "" + this.props.zIndex;
            this.mountPoint.style.position = 'absolute';
            this.mountPoint.style.top = '0';
            this.mountPoint.style.left = '0';
            this.mountPoint.setAttribute('data-tb-test-id', Declarative_1.testId(this.props.wrapperTestId, 'Root'));
        }
    };
    StackingComponentWrapper.prototype.render = function () {
        return ReactDOM.createPortal(PortalEventTrap_1.PortalEventTrap(React.Children.only(this.props.children), this.props.portalEventTrapOverrides), this.mountPoint);
    };
    return StackingComponentWrapper;
}(React.Component));
exports.StackingComponentWrapper = StackingComponentWrapper;
exports.StackingComponentHOC = function (componentType) {
    var componentClass = ReactHelpers_1.convertToStatefulComponentClass(componentType);
    var newComponentClass = /** @class */ (function (_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.render = function () {
            return React.createElement(StackingComponentWrapper, this.props, _super.prototype.render.call(this));
        };
        return class_1;
    }(componentClass));
    newComponentClass.displayName = "StackingComponentHOC(" + ReactHelpers_1.getComponentName(componentType) + ")";
    return newComponentClass;
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Interfaces for common geometric quantities and helpers for common geometric calculations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the position of the center of the rect.
 */
function computeCenter(rect) {
    return {
        top: rect.top + (rect.height / 2),
        left: rect.left + (rect.width / 2)
    };
}
exports.computeCenter = computeCenter;
/**
 * Returns first - second.
 */
function subtractPositions(first, second) {
    return {
        top: first.top - second.top,
        left: first.left - second.left
    };
}
exports.subtractPositions = subtractPositions;
/**
 * Returns the max width and height from the two sizes.
 */
function getMaxWidthAndHeight(first, second) {
    return {
        width: Math.max(first.width, second.width),
        height: Math.max(first.height, second.height)
    };
}
exports.getMaxWidthAndHeight = getMaxWidthAndHeight;
/**
 * Returns the position that will center the area within the bounds.
 */
function computePositionToCenterAreaInBounds(area, bounds) {
    var boundsCenter = computeCenter(bounds);
    return {
        top: boundsCenter.top - (area.height / 2),
        left: boundsCenter.left - (area.width / 2)
    };
}
exports.computePositionToCenterAreaInBounds = computePositionToCenterAreaInBounds;
/**
 * Returns a position that places the "bounded" region entirely within the "container" region. (i.e. so that
 * the "bounded" region will be bounded by the "container").
 * The returned position will as close as possible to the "bounded" region's current position.
 * If the "bounded" region is too large in a dimension to fit within the "container" region, the returned
 * position will align with the "container" region's top or left boundary.
 */
function computePositionToContainBounds(bounded, container) {
    var containerBottom = container.top + container.height;
    var containerRight = container.left + container.width;
    return {
        top: Math.max(container.top, Math.min(bounded.top, containerBottom - bounded.height)),
        left: Math.max(container.left, Math.min(bounded.left, containerRight - bounded.width))
    };
}
exports.computePositionToContainBounds = computePositionToContainBounds;
/**
 * Builds a ClientRect from a position and size.
 */
function makeClientRect(pos, size) {
    return {
        top: pos.top,
        left: pos.left,
        bottom: pos.top + size.height,
        right: pos.left + size.width,
        width: size.width,
        height: size.height
    };
}
exports.makeClientRect = makeClientRect;
/**
 * Checks whether a point is contained inside a rectangle.  If the point is on the edges of the rectangle, it is
 * considered inside the rectangle.
 */
function doesRectangleContainPoint(rect, point) {
    return (point.left >= rect.left && point.left <= (rect.left + rect.width))
        && (point.top >= rect.top && point.top <= (rect.top + rect.height));
}
exports.doesRectangleContainPoint = doesRectangleContainPoint;
/**
 * This returns a NEW ClientRect (does not update the one passed in), by adding the passed value to the left edge.
 * The right edge is unchanged.
 */
function addClientRectLeft(rect, difference) {
    return makeClientRect({ left: rect.left + difference, top: rect.top }, { width: rect.width - difference, height: rect.height });
}
exports.addClientRectLeft = addClientRectLeft;
/**
 * This returns a NEW ClientRect (does not update the one passed in), by adding the passed value to the right edge.
 * The left edge is unchanged.
 */
function addClientRectRight(rect, difference) {
    return makeClientRect({ left: isNaN(difference) ? NaN : rect.left, top: rect.top }, { width: rect.width + difference, height: rect.height });
}
exports.addClientRectRight = addClientRectRight;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var OutlineTextFieldWidgetStyles_1 = __webpack_require__(130);
exports.getTextOutlineStyles = OutlineTextFieldWidgetStyles_1.getStyles;
var Declarative_1 = __webpack_require__(3);
var Unicode_1 = __webpack_require__(40);
var DomWidgets_1 = __webpack_require__(4);
var TextFieldBase_1 = __webpack_require__(17);
exports.TextInputType = TextFieldBase_1.TextInputType;
var TextFieldInputWidget_1 = __webpack_require__(32);
var TextFieldWithClearIcon_1 = __webpack_require__(61);
var DomUtil_1 = __webpack_require__(7);
var SharedWidgets_1 = __webpack_require__(36);
var OutlineTextFieldWidget = /** @class */ (function (_super) {
    tslib_1.__extends(OutlineTextFieldWidget, _super);
    function OutlineTextFieldWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.inputId = DomUtil_1.generateId();
        _this.errorLabelId = DomUtil_1.generateId();
        /**
         * Need to track the hover of the cancel button to update the styling of the input
         */
        _this.handleClearHover = function (hover) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ clearHover: hover });
        };
        _this.state = tslib_1.__assign({}, _this.state, { clearHover: false });
        return _this;
    }
    /**
     * If the cancel button is being hovered, then the new text prop is not null then the cancel button disappears
     * without the cancelHover being set to false.  This assures that it is set to false.
     */
    OutlineTextFieldWidget.prototype.componentWillReceiveProps = function (nextProps) {
        if (!nextProps.text) {
            this.setState({ clearHover: false });
        }
    };
    OutlineTextFieldWidget.prototype.render = function () {
        var _a = this.props, children = _a.children, containerStyle = _a.containerStyle, displayErrorTextSection = _a.displayErrorTextSection, errorText = _a.errorText, handleClearText = _a.handleClearText, hasError = _a.hasError, onDarkBackground = _a.onDarkBackground, textFieldInputProps = tslib_1.__rest(_a, ["children", "containerStyle", "displayErrorTextSection", "errorText", "handleClearText", "hasError", "onDarkBackground"]);
        var styles = OutlineTextFieldWidgetStyles_1.getStyles({ onDarkBackground: onDarkBackground });
        styles.input.interactive.focus.borderColor = !onDarkBackground ? SharedWidgets_1.TabStyles.Colors.GoLight : 'white';
        styles.input.interactive.active.borderColor = styles.input.interactive.focus.borderColor;
        var placeholderStyle = tslib_1.__assign({}, styles.placeholder.base, this.props.placeholderStyle, (this.props.disabled && styles.placeholder.disabled));
        var inputStyle = tslib_1.__assign({}, styles.input.base, (!handleClearText && styles.input.noClearIconButton), (this.state.clearHover && styles.input.interactive.hover), (hasError && styles.errorInput), this.props.inputStyle);
        var inputProps = tslib_1.__assign({}, textFieldInputProps, { 'aria-errormessage': Declarative_1.conditional(displayErrorTextSection, this.errorLabelId), 'aria-invalid': hasError, 'aria-label': this.props['aria-label'] || this.props.placeholder, handleActive: this.handleInputActive, handleFocus: this.handleInputFocus, id: this.inputId, inputStyle: inputStyle, interactiveStyles: Declarative_1.conditional(!hasError, styles.input.interactive) });
        var clearIconButtonProps = {
            disabled: this.props.disabled,
            handleHover: this.handleClearHover,
            onDarkBackground: onDarkBackground,
            pointerClick: handleClearText,
            testId: this.props.testId,
        };
        var textFieldElement = (!!handleClearText) ?
            React.createElement(TextFieldWithClearIcon_1.TextFieldWithClearIcon, { handleClearText: handleClearText, textFieldInputProps: inputProps, textFieldClearButtonProps: clearIconButtonProps }) :
            React.createElement(TextFieldInputWidget_1.TextFieldInputWidget, tslib_1.__assign({}, inputProps));
        var labelProps = {
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'Placeholder'),
            htmlFor: this.inputId,
            style: placeholderStyle,
        };
        var errorLabelProps = {
            'aria-live': 'polite',
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'ErrorLabel'),
            id: this.errorLabelId,
            style: styles.errorLabel,
        };
        return (React.createElement(DomWidgets_1.Block, { style: containerStyle },
            React.createElement(DomWidgets_1.Block, null,
                this.isPlaceholderShowing() && React.createElement("label", tslib_1.__assign({}, labelProps), this.props.placeholder),
                textFieldElement),
            displayErrorTextSection && // error text will not be displayed unless this is set
                React.createElement(DomWidgets_1.Block, { style: styles.errorContainer },
                    React.createElement("div", tslib_1.__assign({}, errorLabelProps), hasError ? errorText : Unicode_1.Unicode.NonBreakingSpace))));
    };
    return OutlineTextFieldWidget;
}(TextFieldBase_1.TextFieldBase));
exports.OutlineTextFieldWidget = OutlineTextFieldWidget;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var TabStyles_1 = __webpack_require__(2);
var Icons_1 = __webpack_require__(6);
var sliderHandleIconHalfSize = { w: Math.ceil(Icons_1.SliderHandleIcon.width / 2), h: Math.ceil(Icons_1.SliderHandleIcon.height / 2) };
var sliderHeight = 40;
// It's just a coincidence that the following two constants are equal
var sliderTickHeight = 4;
var sliderTrackHeight = 4;
var sliderHandleSize = { w: 40, h: 40 };
var sliderHandleHalfSize = { w: sliderHandleSize.w / 2, h: sliderHandleSize.h / 2 };
var sliderHandlePressIndicationBarHeight = 16;
var sliderSpaceBetweenTickBarAndTrack = 11;
var sliderLeftRightPadding = 14;
exports.getSliderTrackStyles = function () {
    var basicStyles = {
        Track: {
            position: 'absolute',
            left: sliderHandleIconHalfSize.w,
            right: sliderHandleIconHalfSize.w,
            backgroundColor: TabStyles_1.TabStyles.Colors.L3,
            height: sliderTrackHeight,
            top: (sliderHeight - sliderTrackHeight) / 2,
        },
        RangeIndicatorBar: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            backgroundColor: TabStyles_1.TabStyles.Colors.L7,
        },
        DataBar: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            backgroundColor: TabStyles_1.TabStyles.Colors.L8,
        }
    };
    return tslib_1.__assign({}, basicStyles, { RangeIndicatorBarDarkened: tslib_1.__assign({}, basicStyles.RangeIndicatorBar, { backgroundColor: TabStyles_1.TabStyles.Colors.L8 }), RangeIndicatorBarFocused: tslib_1.__assign({}, basicStyles.RangeIndicatorBar, { backgroundColor: TabStyles_1.TabStyles.Colors.Focus }), DataBarDarkened: tslib_1.__assign({}, basicStyles.DataBar, { backgroundColor: TabStyles_1.TabStyles.Colors.L9 }), DataBarFocused: tslib_1.__assign({}, basicStyles.DataBar, { backgroundColor: "rgb(24, 71, 102)" }) });
};
exports.getSliderTickBarStyles = function () {
    return {
        Bar: {
            position: 'absolute',
            left: sliderHandleIconHalfSize.w,
            // The + 1 here is to make the spread of the ticks match the width of the track bar (above).  Since we position
            // the ticks using `left: X%`, the far right tick is actually 1px into the `right` space.  The + 1
            // counterintuitivly shrinks the width of the tick bar so that the final tick is now directly above the right end
            // of the slider track.
            right: sliderHandleIconHalfSize.w + 1,
            height: sliderTickHeight,
            top: (sliderHeight - sliderTrackHeight) / 2 - sliderSpaceBetweenTickBarAndTrack - sliderTickHeight,
        },
        Tick: {
            position: 'absolute',
            borderLeft: "solid 1px " + TabStyles_1.TabStyles.Colors.L6,
            height: sliderTickHeight,
            width: 0,
        }
    };
};
exports.getSliderHandleStyles = function () {
    var basicStyles = {
        PositioningContainer: {
            position: 'absolute',
        },
        PressIndicationBar: {
            position: 'absolute',
            borderLeft: "solid 2px " + TabStyles_1.TabStyles.Colors.L9,
            // If we dont push it to the left by 1 px the looks off center from the circle icon
            marginLeft: -1,
            width: 0,
            height: sliderHandlePressIndicationBarHeight,
            top: -3,
        },
        HandleInteractiveArea: {
            position: 'absolute',
            touchAction: 'none',
            width: Icons_1.SliderHandleIcon.width,
            height: Icons_1.SliderHandleIcon.height,
            boxSizing: 'content-box',
            paddingTop: sliderHandleHalfSize.h - sliderHandleIconHalfSize.h,
            paddingBottom: sliderHandleHalfSize.h - sliderHandleIconHalfSize.h,
            paddingLeft: sliderHandleHalfSize.w - sliderHandleIconHalfSize.w,
            paddingRight: sliderHandleHalfSize.w - sliderHandleIconHalfSize.w,
            marginLeft: -1 * sliderHandleHalfSize.w,
            WebkitTouchCallout: 'none',
            WebkitUserSelect: 'none',
            MozUserSelect: 'none',
            msUserSelect: 'none',
            userSelect: 'none',
        },
        HandleIcon: {
            position: 'absolute',
            touchAction: 'none',
            cursor: 'pointer',
            width: Icons_1.SliderHandleIcon.width,
            height: Icons_1.SliderHandleIcon.height,
            marginLeft: -1 * (sliderHandleIconHalfSize.w),
            marginTop: (sliderHandleHalfSize.h - sliderHandleIconHalfSize.h),
            outline: 'none',
            WebkitTouchCallout: 'none',
            WebkitUserSelect: 'none',
            MozUserSelect: 'none',
            msUserSelect: 'none',
            userSelect: 'none',
            WebkitTapHighlightColor: 'transparent',
        }
    };
    return tslib_1.__assign({}, basicStyles, { HandleInteractiveAreaLeft: tslib_1.__assign({}, basicStyles.HandleInteractiveArea, { paddingLeft: basicStyles.HandleInteractiveArea.paddingLeft - 5, paddingRight: basicStyles.HandleInteractiveArea.paddingRight + 5 }), HandleInteractiveAreaRight: tslib_1.__assign({}, basicStyles.HandleInteractiveArea, { paddingLeft: basicStyles.HandleInteractiveArea.paddingLeft + 6, paddingRight: basicStyles.HandleInteractiveArea.paddingRight - 4 }), HandleIconLeft: tslib_1.__assign({}, basicStyles.HandleIcon, { marginLeft: basicStyles.HandleIcon.marginLeft - 5 }), HandleIconRight: tslib_1.__assign({}, basicStyles.HandleIcon, { marginLeft: basicStyles.HandleIcon.marginLeft + 6 }), DisabledHandleMixin: {
            touchAction: undefined,
        }, DisabledHandleInnerFocusAreaMixin: {
            touchAction: undefined,
            cursor: undefined,
        } });
};
exports.getSliderHandleContainerStyles = function () {
    return {
        Container: {
            position: 'absolute',
            top: 0, bottom: 0, left: 0, right: 0,
            // We restrict the horizontal space (that the handle can be positioned in) a bit and take away half the width of
            // the handle icon on the left and right sides.  This way, because we center the handle at a given position, if
            // the handle is at the far left it isn't half outside the bounds of the slider.  Same thing if it is at the far
            // right.
            //
            // Also the + 1 here is to:
            // A. Make the handle area occupy the same amount of horizontal space as the tick bar (which is one pixel smaller
            // than the track, see above)
            // B. accommodate the press indicator bar being moved to the left 1px (so it will line up w/ the ticks)
            marginLeft: sliderHandleIconHalfSize.w + 1,
            marginRight: sliderHandleIconHalfSize.w,
        },
        RangeHandleArea: {
            position: 'absolute',
            cursor: 'pointer',
            height: Icons_1.SliderHandleIcon.height,
            outline: 'none',
            top: sliderHandleHalfSize.h - sliderHandleIconHalfSize.h,
        }
    };
};
exports.getSliderStyles = function () {
    return {
        OuterContainer: {
            paddingLeft: sliderLeftRightPadding,
            paddingRight: sliderLeftRightPadding,
            WebkitTapHighlightColor: 'transparent',
            TapHighlightColor: 'transparent',
        },
        TrackAndHandleContainer: {
            position: 'relative',
            height: sliderHeight,
        },
    };
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var TabStyles_1 = __webpack_require__(2);
var PreventUserSelect_1 = __webpack_require__(12);
var Colors = TabStyles_1.TabStyles.Colors, Typography = TabStyles_1.TabStyles.Typography, Sizing = TabStyles_1.TabStyles.Sizing, Spacing = TabStyles_1.TabStyles.Spacing;
exports.datePickerWidgetStyle = tslib_1.__assign({ backgroundColor: 'white', borderColor: Colors.L5, borderRadius: Sizing.BorderRadius, borderStyle: 'solid', borderWidth: Sizing.BorderWidth, boxSizing: 'border-box', color: Typography.Color.Primary, display: 'inline-block', fontSize: Typography.Sizing.Default, lineHeight: 'normal', padding: Spacing.DefaultSpace }, PreventUserSelect_1.PreventUserSelect);
exports.datePickerHeaderStyle = {
    borderBottom: "1px solid " + Colors.F4,
    paddingBottom: Spacing.DefaultSpace,
};
exports.datePickerBodyStyle = {
    marginTop: Spacing.DefaultSpace,
    marginBottom: Spacing.DefaultSpace,
};
exports.datePickerDayOfWeekHeaderStyle = {
    marginTop: Spacing.DefaultSpace,
};
exports.datePickerButtonStyle = {
    marginBottom: Spacing.DefaultSpace,
};
var datePickerCellBaseStyle = {
    alignItems: 'center',
    boxSizing: 'border-box',
    color: Typography.Color.Primary,
    display: 'inline-flex',
    height: '30px',
    justifyContent: 'center',
    width: '30px',
};
exports.datePickerCellStyles = {
    dayOfWeekColHeader: tslib_1.__assign({}, datePickerCellBaseStyle, { fontWeight: 'bold' }),
    default: tslib_1.__assign({}, datePickerCellBaseStyle),
    disabled: {
        textDecoration: 'line-through',
    },
    inOtherMonths: tslib_1.__assign({}, datePickerCellBaseStyle, { color: Typography.Color.Disabled }),
    isoWeekNum: tslib_1.__assign({}, datePickerCellBaseStyle, { fontWeight: 'bold', marginRight: Spacing.DefaultSpace }),
    isoWeekNumColHeader: tslib_1.__assign({}, datePickerCellBaseStyle, { fontWeight: 'bold', marginRight: Spacing.DefaultSpace }),
    selected: tslib_1.__assign({}, datePickerCellBaseStyle, { backgroundColor: Colors.F4 }),
    today: tslib_1.__assign({}, datePickerCellBaseStyle, { borderColor: Colors.GoLight, borderRadius: Sizing.BorderRadius, borderStyle: 'solid', borderWidth: Sizing.BorderWidth }),
    todaySelected: tslib_1.__assign({}, datePickerCellBaseStyle, { backgroundColor: Colors.F8, color: Colors.White }),
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Localize_1 = __webpack_require__(11);
var DateInputField_1 = __webpack_require__(71);
var DateTerminus;
(function (DateTerminus) {
    DateTerminus[DateTerminus["Start"] = 0] = "Start";
    DateTerminus[DateTerminus["End"] = 1] = "End";
})(DateTerminus = exports.DateTerminus || (exports.DateTerminus = {}));
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek[DayOfWeek["Sun"] = 0] = "Sun";
    DayOfWeek[DayOfWeek["Mon"] = 1] = "Mon";
    DayOfWeek[DayOfWeek["Tue"] = 2] = "Tue";
    DayOfWeek[DayOfWeek["Wed"] = 3] = "Wed";
    DayOfWeek[DayOfWeek["Thu"] = 4] = "Thu";
    DayOfWeek[DayOfWeek["Fri"] = 5] = "Fri";
    DayOfWeek[DayOfWeek["Sat"] = 6] = "Sat";
})(DayOfWeek = exports.DayOfWeek || (exports.DayOfWeek = {}));
function getDayOfWeekEnum(dayOfWeek) {
    switch (dayOfWeek) {
        case 'sun':
            return DayOfWeek.Sun;
        case 'mon':
            return DayOfWeek.Mon;
        case 'tue':
            return DayOfWeek.Tue;
        case 'wed':
            return DayOfWeek.Wed;
        case 'thu':
            return DayOfWeek.Thu;
        case 'fri':
            return DayOfWeek.Fri;
        case 'sat':
            return DayOfWeek.Sat;
        default:
            throw new Error("invalid DayOfWeekNames " + dayOfWeek);
    }
}
exports.getDayOfWeekEnum = getDayOfWeekEnum;
/*  Returns the date of the past offset days or future offset days. */
function getDateWithDayOffset(date, offset) {
    var newDate = new Date(date.getTime());
    newDate.setDate(date.getDate() + offset);
    return newDate;
}
exports.getDateWithDayOffset = getDateWithDayOffset;
/*
  Given a date, returns another date that is on the same day but in the past offset
  month or future offset month, if such day doesn't exist, returns the closest day
  in the past offset month or future offset month.
 */
function getDateWithMonthOffset(date, offset) {
    var newDate = new Date(date.getTime());
    var newMonth = date.getMonth() + offset;
    newDate.setMonth(newMonth);
    if (newDate.getDate() !== date.getDate()) {
        newDate.setDate(0);
    }
    return newDate;
}
exports.getDateWithMonthOffset = getDateWithMonthOffset;
/*
  Given a date, returns another date that is on the same day and month, but in the past
  offset year or future offset year, if such day doesn't exist, returns the closest day
  in the past offset year or future offset year.
 */
function getDateWithYearOffset(date, offset) {
    var newDate = new Date(date.getTime());
    var newYear = date.getFullYear() + offset;
    newDate.setFullYear(newYear);
    if (newDate.getMonth() !== date.getMonth()) {
        newDate.setDate(0);
    }
    return newDate;
}
exports.getDateWithYearOffset = getDateWithYearOffset;
/*
  Returns the date of the first day of current display (which might be
  different from the first day of current month).
*/
function getFirstDisplayedDate(date, firstDayOfWeek) {
    var newDate = new Date(date.getTime());
    newDate.setDate(1);
    if (newDate.getDay() < firstDayOfWeek) {
        newDate.setDate(newDate.getDate() - newDate.getDay() - 7 + firstDayOfWeek);
    }
    else {
        newDate.setDate(newDate.getDate() - newDate.getDay() + firstDayOfWeek);
    }
    return newDate;
}
exports.getFirstDisplayedDate = getFirstDisplayedDate;
/* Returns whether two date objects have the same date, ignore time */
function areSameDates(date1, date2) {
    return date1.getFullYear() === date2.getFullYear() &&
        date1.getMonth() === date2.getMonth() &&
        date1.getDate() === date2.getDate();
}
exports.areSameDates = areSameDates;
/* Returns the date of the first day of this month */
function getFirstDayOfMonth(date) {
    return new Date(date.getFullYear(), date.getMonth(), 1);
}
exports.getFirstDayOfMonth = getFirstDayOfMonth;
/* Returns the date of the last day of this month */
function getLastDayOfMonth(date) {
    return new Date(date.getFullYear(), date.getMonth() + 1, 0);
}
exports.getLastDayOfMonth = getLastDayOfMonth;
/* Returns the date of the first day of this week */
function getFirstDayOfWeek(date, firstDayOfWeek) {
    var newDate = new Date(date.getTime());
    if (newDate.getDay() < firstDayOfWeek) {
        newDate.setDate(newDate.getDate() - newDate.getDay() - 7 + firstDayOfWeek);
    }
    else {
        newDate.setDate(newDate.getDate() - newDate.getDay() + firstDayOfWeek);
    }
    return newDate;
}
exports.getFirstDayOfWeek = getFirstDayOfWeek;
/* Returns the date of the last day of this week */
function getLastDayOfWeek(date, firstDayOfWeek) {
    var newDate = new Date(date.getTime());
    newDate.setDate(getFirstDayOfWeek(date, firstDayOfWeek).getDate() + 6);
    return newDate;
}
exports.getLastDayOfWeek = getLastDayOfWeek;
function getLocalizedDaysOfWeek(firstDayOfWeek) {
    // July 8th, 2018 is a Sunday
    var startDate = new Date(2018, 6, 8);
    startDate.setDate(startDate.getDate() + firstDayOfWeek);
    var daysOfWeek = [];
    var daysOfWeekLength = 7;
    for (var i = 0; i < daysOfWeekLength; i++) {
        daysOfWeek.push(Localize_1.Formatters.formatNarrowDayOfWeek(getDateWithDayOffset(startDate, i)));
    }
    return daysOfWeek;
}
exports.getLocalizedDaysOfWeek = getLocalizedDaysOfWeek;
exports.dateParsingFunctions = [
    // stricter parsing functions first
    Localize_1.Parsers.parseShortDateTimeWithFullYear,
    Localize_1.Parsers.parseShortDateTimeWithFullYear24Hour,
    Localize_1.Parsers.parseShortDateMediumTimeWithFullYear,
    Localize_1.Parsers.parseShortDateMediumTimeWithFullYear24Hour,
    Localize_1.Parsers.parseShortDateTime,
    Localize_1.Parsers.parseMediumDateTime,
    Localize_1.Parsers.parseLongDateTime,
    Localize_1.Parsers.parseFullDateTime,
    Localize_1.Parsers.parseShortDate,
    Localize_1.Parsers.parseMediumDate,
    Localize_1.Parsers.parseLongDate,
    Localize_1.Parsers.parseFullDate,
    Localize_1.Parsers.parseShortDateWithFullYear,
];
function getDateFormatter(format) {
    switch (format) {
        case DateInputField_1.DateFormat.ShortDateTime:
            return Localize_1.Formatters.formatShortDateTime;
        case DateInputField_1.DateFormat.MediumDateTime:
            return Localize_1.Formatters.formatMediumDateTime;
        case DateInputField_1.DateFormat.LongDateTime:
            return Localize_1.Formatters.formatLongDateTime;
        case DateInputField_1.DateFormat.FullDateTime:
            return Localize_1.Formatters.formatFullDateTime;
        case DateInputField_1.DateFormat.ShortDate:
            return Localize_1.Formatters.formatShortDate;
        case DateInputField_1.DateFormat.MediumDate:
            return Localize_1.Formatters.formatMediumDate;
        case DateInputField_1.DateFormat.LongDate:
            return Localize_1.Formatters.formatLongDate;
        case DateInputField_1.DateFormat.FullDate:
            return Localize_1.Formatters.formatFullDate;
        case DateInputField_1.DateFormat.ShortDateWithFullYear:
            return Localize_1.Formatters.formatShortDateWithFullYear;
        case DateInputField_1.DateFormat.ShortDateTimeWithFullYear:
            return Localize_1.Formatters.formatShortDateTimeWithFullYear;
        case DateInputField_1.DateFormat.ShortDateTimeWithFullYear24Hour:
            return Localize_1.Formatters.formatShortDateTimeWithFullYear24Hour;
        case DateInputField_1.DateFormat.ShortDateMediumTimeWithFullYear:
            return Localize_1.Formatters.formatShortDateMediumTimeWithFullYear;
        case DateInputField_1.DateFormat.ShortDateMediumTimeWithFullYear24Hour:
            return Localize_1.Formatters.formatShortDateMediumTimeWithFullYear24Hour;
        default:
            throw new Error("Unsupported DateFormat: " + format);
    }
}
exports.getDateFormatter = getDateFormatter;
function getParsedDate(text, terminus) {
    var parsedFunction = null;
    var parsedDateTime = null;
    for (var i = 0; i < exports.dateParsingFunctions.length; i++) {
        var dateParsingFunction = exports.dateParsingFunctions[i];
        parsedDateTime = dateParsingFunction(text);
        if (parsedDateTime) {
            parsedFunction = dateParsingFunction;
            break;
        }
    }
    // parsedDateTime might not be a valid date object if year is too big.
    if (parsedDateTime && !isNaN(parsedDateTime.getTime())) {
        return getDateWithTerminus(parsedDateTime, parsedFunction, terminus);
    }
    else {
        return null;
    }
}
exports.getParsedDate = getParsedDate;
function getDateWithTerminus(date, parsingFunction, terminus) {
    var newDate = new Date(date.getTime());
    switch (parsingFunction) {
        case Localize_1.Parsers.parseShortDate:
        case Localize_1.Parsers.parseMediumDate:
        case Localize_1.Parsers.parseLongDate:
        case Localize_1.Parsers.parseFullDate:
        case Localize_1.Parsers.parseShortDateWithFullYear:
            if (terminus === DateTerminus.End) {
                newDate.setHours(24, 0, 0, -1);
            }
            else {
                newDate.setHours(0, 0, 0, 0);
            }
            return newDate;
        // Seconds are not defined
        case Localize_1.Parsers.parseShortDateTimeWithFullYear:
        case Localize_1.Parsers.parseShortDateTimeWithFullYear24Hour:
            if (terminus === DateTerminus.End) {
                newDate.setSeconds(60, -1);
            }
            else {
                newDate.setSeconds(0, 0);
            }
            return newDate;
        default:
            return newDate;
    }
}
exports.getDateWithTerminus = getDateWithTerminus;
function getISOWeekNum(date) {
    // https://stackoverflow.com/questions/6117814/get-week-of-year-in-javascript-like-in-php/6117889#6117889
    date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    // Set to nearest Thursday: current date + 4 - current day number
    // Make Sunday's day number 7
    date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay() || 7));
    // Get first day of year
    var yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1));
    // Calculate full weeks to nearest Thursday
    return Math.ceil((((date.valueOf() - yearStart.valueOf()) / 86400000) + 1) / 7);
}
exports.getISOWeekNum = getISOWeekNum;
function getStartDayOfWeek(showWeekNumbers) {
    return showWeekNumbers ? DayOfWeek.Mon : getDayOfWeekEnum(Localize_1.LocaleData.get().firstDayOfWeek);
}
exports.getStartDayOfWeek = getStartDayOfWeek;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/** Intended only for use for searching lists of items. Does not wrap, skips item at `fromIndex`,
 * and returns `fromIndex` if no match is found.  */
function findIndex(items, fn, fromIndex, direction) {
    for (var index = fromIndex + direction; index >= 0 && index < items.length; index += direction) {
        if (fn(items[index])) {
            return index;
        }
    }
    return fromIndex;
}
function findFocusableItemIndex(items, fromIndex, direction) {
    return findIndex(items, isFocusableItem, fromIndex, direction);
}
exports.findFocusableItemIndex = findFocusableItemIndex;
function findSelectableItemIndex(items, fromIndex, direction) {
    return findIndex(items, isSelectableItem, fromIndex, direction);
}
exports.findSelectableItemIndex = findSelectableItemIndex;
function findItemWithValue(items, value) {
    return findIndex(items, function (item) { return value && item.value === value; }, 0, +1);
}
exports.findItemWithValue = findItemWithValue;
function isFocusableItem(item) {
    return item && !item.separator;
}
exports.isFocusableItem = isFocusableItem;
function isSelectableItem(item) {
    return isFocusableItem(item) && item && !item.disabled;
}
exports.isSelectableItem = isSelectableItem;
function defaultItemFilter(items, filterValue) {
    return items.filter(function (item) {
        return item.separator ||
            (item.value && item.value.toLowerCase().indexOf(filterValue.toLowerCase()) >= 0);
    }).filter(function (item, index, filteredItems) {
        return !(item.separator && index > 0 && filteredItems[index - 1].separator);
    }).filter(function (item, index, filteredItems) {
        return !(item.separator && (index === 0 || index === filteredItems.length - 1));
    });
}
exports.defaultItemFilter = defaultItemFilter;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * TFS584601:Remove once vizclient infrastructure or TCOE fixes ClickBuster
 * ClickBuster in vizclient at the moment eats click events that come from touches.  However react is expecting a click event
 * for things like onChange.  Vizclient infrastructure or TCOE will have a story to resolve this, but in the meantime
 * we need to have an attribute flag so that ClickBuster ignores our components.  Once the resolve
 * story is done we will need to rip out the flag.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ClickBustingConfig = /** @class */ (function () {
    function ClickBustingConfig() {
    }
    ClickBustingConfig.suppressionClassName = undefined;
    return ClickBustingConfig;
}());
exports.ClickBustingConfig = ClickBustingConfig;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
function isSFC(type) {
    return !type.prototype.render;
}
function convertToStatefulComponentClass(componentType) {
    var _a;
    if (isSFC(componentType)) {
        var statelessComponent_1 = componentType;
        return _a = /** @class */ (function (_super) {
                tslib_1.__extends(StatefulSFCWrapper, _super);
                function StatefulSFCWrapper() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                StatefulSFCWrapper.prototype.render = function () {
                    return statelessComponent_1(this.props);
                };
                return StatefulSFCWrapper;
            }(React.Component)),
            _a.displayName = getComponentName(statelessComponent_1),
            _a;
    }
    else {
        return componentType;
    }
}
exports.convertToStatefulComponentClass = convertToStatefulComponentClass;
// tslint:disable-next-line:no-any
function mergeEventHandlers(h1, h2) {
    return (h1 && h2 && function (e) { h1(e); h2(e); })
        || h1 || h2;
}
exports.mergeEventHandlers = mergeEventHandlers;
// tslint:disable-next-line:no-any
function getComponentName(componentType) {
    return componentType.displayName || componentType.name || 'AnonymousComponent';
}
exports.getComponentName = getComponentName;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Geometry = __webpack_require__(20);
/**
 * Returns the element position relative to the origin of the layout viewport.
 */
function getElementPositionRelativeToLayoutViewport(element) {
    return element.getBoundingClientRect();
}
exports.getElementPositionRelativeToLayoutViewport = getElementPositionRelativeToLayoutViewport;
/**
 * Returns the position of the layout viewport relative to the origin of the page.
 */
function getLayoutViewportPositionRelativeToPage() {
    var documentClientRect = document.documentElement.getBoundingClientRect();
    return { top: -documentClientRect.top, left: -documentClientRect.left };
}
exports.getLayoutViewportPositionRelativeToPage = getLayoutViewportPositionRelativeToPage;
/**
 * Returns the size of the layout viewport.
 */
function getLayoutViewportSize() {
    return { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight };
}
exports.getLayoutViewportSize = getLayoutViewportSize;
/**
 * Returns the rectangle representing the visual viewport in the layout viewport's coordinate system.
 * For browsers that do not support the visual viewport API, the rectangle will include the space taken
 * by scroll bars if present.
 */
function getVisualViewportRectRelativeToLayoutViewport() {
    var visualViewport = getVisualViewport();
    var pos = {
        left: visualViewport.offsetLeft,
        top: visualViewport.offsetTop
    };
    var size = {
        width: visualViewport.width,
        height: visualViewport.height
    };
    return Geometry.makeClientRect(pos, size);
}
exports.getVisualViewportRectRelativeToLayoutViewport = getVisualViewportRectRelativeToLayoutViewport;
var VisualViewportPolyfill = /** @class */ (function () {
    function VisualViewportPolyfill() {
    }
    Object.defineProperty(VisualViewportPolyfill.prototype, "offsetLeft", {
        get: function () {
            var layoutPosInPageCoords = getLayoutViewportPositionRelativeToPage();
            return window.pageXOffset - layoutPosInPageCoords.left;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualViewportPolyfill.prototype, "offsetTop", {
        get: function () {
            var layoutPosInPageCoords = getLayoutViewportPositionRelativeToPage();
            return window.pageYOffset - layoutPosInPageCoords.top;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualViewportPolyfill.prototype, "pageLeft", {
        get: function () {
            return window.pageXOffset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualViewportPolyfill.prototype, "pageTop", {
        get: function () {
            return window.pageYOffset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualViewportPolyfill.prototype, "width", {
        // This polyfill doesn't work perfectly -- it will include the space taken by scroll bars if present
        get: function () {
            return window.innerWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualViewportPolyfill.prototype, "height", {
        // This polyfill doesn't work perfectly -- it will include the space taken by scroll bars if present
        get: function () {
            return window.innerHeight;
        },
        enumerable: true,
        configurable: true
    });
    return VisualViewportPolyfill;
}());
/**
 * Returns window.visualViewport if the API is available, otherwise returns our polyfill.
 * Note that this only exposes the portion of the Visual Viewport API that we have polyfilled.
 * See https://github.com/WICG/ViewportAPI for details on the Visual Viewport API.
 */
function getVisualViewport() {
    // tslint:disable-next-line:no-any
    return ('visualViewport' in window) ? window.visualViewport : new VisualViewportPolyfill();
}
exports.getVisualViewport = getVisualViewport;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
// tslint:disable:deprecation
var React = __webpack_require__(0);
var TabStyles_1 = __webpack_require__(2);
var InteractiveDom_1 = __webpack_require__(8);
var DynamicThemeComponent_1 = __webpack_require__(5);
var Typography = TabStyles_1.TabStyles.Typography;
var getStyle = function (disabled) { return ({
    fontSize: Typography.Sizing.Default,
    fontWeight: 'normal',
    color: disabled ? Typography.Color.Disabled : Typography.Color.Primary,
    lineHeight: 'normal',
    cursor: 'default'
}); };
var InputLabelWidget = /** @class */ (function (_super) {
    tslib_1.__extends(InputLabelWidget, _super);
    /** @deprecated this is not a very useful Widget. Please contact #dev-shared-widgets if you have a use case. */
    function InputLabelWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputLabelWidget.prototype.render = function () {
        return (React.createElement("label", { "data-tb-test-id": this.props.testId + '-Label', id: this.props.id, style: tslib_1.__assign({}, getStyle(this.props.disabled), this.props.style) }, this.props.children));
    };
    InputLabelWidget = tslib_1.__decorate([
        InteractiveDom_1.InteractiveDomHoCDecorator
        /** @deprecated this is not a very useful Widget. Please contact #dev-shared-widgets if you have a use case. */
    ], InputLabelWidget);
    return InputLabelWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.InputLabelWidget = InputLabelWidget;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var throttle = __webpack_require__(50);
var react_1 = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var Geometry_1 = __webpack_require__(20);
var OrientationChange_1 = __webpack_require__(115);
var Overlay_1 = __webpack_require__(10);
var ViewportConstrainedDom_1 = __webpack_require__(116);
var ViewportHelpers = __webpack_require__(28);
var FloaterWidget_1 = __webpack_require__(117);
var DynamicThemeComponent_1 = __webpack_require__(5);
var GlassWidget_1 = __webpack_require__(118);
var DialogContent_1 = __webpack_require__(119);
var DialogPositioningBehavior;
(function (DialogPositioningBehavior) {
    DialogPositioningBehavior[DialogPositioningBehavior["Centered"] = 0] = "Centered";
    DialogPositioningBehavior[DialogPositioningBehavior["Maximized"] = 1] = "Maximized";
    DialogPositioningBehavior[DialogPositioningBehavior["Draggable"] = 2] = "Draggable";
    DialogPositioningBehavior[DialogPositioningBehavior["Anchored"] = 3] = "Anchored";
})(DialogPositioningBehavior = exports.DialogPositioningBehavior || (exports.DialogPositioningBehavior = {}));
var DialogType;
(function (DialogType) {
    DialogType[DialogType["NormalWithTitleBar"] = 0] = "NormalWithTitleBar";
    DialogType[DialogType["NormalWithoutTitleBar"] = 1] = "NormalWithoutTitleBar";
    DialogType[DialogType["Uber"] = 2] = "Uber";
    DialogType[DialogType["LightweightTitleBar"] = 3] = "LightweightTitleBar";
})(DialogType = exports.DialogType || (exports.DialogType = {}));
// This is exported for test purposes only
exports.SharedWidgetsDialogLabel = 'SharedWidgetsDialogLabel';
var ResizeAndRepositionDelayMs = 500;
var ResizeThrottleTime = 100;
var ViewportHorizontalMargins = 40;
var ViewportVerticalMargins = 40;
var dialogInstanceCount = 0;
var getStyles = function () {
    return {
        Dialog: {
            borderWidth: TabStyles_1.TabStyles.Sizing.BorderWidth,
            borderStyle: 'solid',
            borderColor: TabStyles_1.TabStyles.Colors.L5,
            borderRadius: TabStyles_1.TabStyles.Sizing.BorderRadius,
            backgroundColor: TabStyles_1.TabStyles.Colors.White,
            cursor: 'default',
            boxShadow: TabStyles_1.TabStyles.Shadow.Standard,
            display: 'flex',
            flexDirection: 'column'
        }
    };
};
// tslint:disable-next-line:class-name
var DialogWidget = /** @class */ (function (_super) {
    tslib_1.__extends(DialogWidget, _super);
    function DialogWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.throttledHandleAdjustPositionOnResize = throttle(function () { return _this.handleAdjustPositionOnResize(); }, ResizeThrottleTime);
        /**
         * On a resize event and if shouldAdjustPositionOnResizeAndIsNonMobile is true, this will fired
         * and try to fit the dialog on the screen depending upon the positioning behavior and state of
         * the dialog.
         */
        _this.handleAdjustPositionOnResize = function () {
            if (!_this.props.shouldAdjustPositionOnWindowResize) {
                return;
            }
            /**
             * Defect 646231:Dialog (Beta) Issue: Inconsistent resizing
             * On window resizes we were not resizing the sizingWrapper element. As a result, the content
             * within the Dialog Widget would resize; however the sizingWrapper element would not.
             * The end user effect was inconsistent resizing of the Dialog Widget and visual artifacts.
             */
            if (_this.sizingWrapper) {
                _this.sizingWrapper.updateSize();
            }
            _this.repositionDialog();
        };
        _this.handleFloaterWidgetRef = function (ref) {
            _this.floaterWidget = ref;
        };
        _this.handleOverlayRef = function (ref) {
            _this.overlay = ref;
        };
        _this.handleSizingWrapperRef = function (ref) {
            _this.sizingWrapper = ref;
        };
        _this.getDialogFloaterClientRect = function () {
            if (_this.floaterWidget) {
                return _this.floaterWidget.getFloaterClientRect();
            }
            return null;
        };
        _this.dragBoundedDialogFloaterPosition = function (pos) {
            if (!_this.state.hasBeenDragged) {
                _this.setState({ hasBeenDragged: true });
            }
            if (_this.floaterWidget) {
                _this.floaterWidget.setPosition(_this.getBoundedFloaterPos(pos));
            }
        };
        _this.handleOrientationChange = function () {
            if (_this.resizeAndRepositionTimeoutId) {
                /*
                 * A new orientation change has occurred while waiting for the resize/reposition delay. We don't actually need
                 * to do the preparation routine, we just need to reset the delay.
                 */
                clearTimeout(_this.resizeAndRepositionTimeoutId);
                _this.resizeAndRepositionTimeoutId = window.setTimeout(_this.resizeAndRepositionCallback, ResizeAndRepositionDelayMs);
                return;
            }
            /**
             * After an orientation change the dialog may be in a position where it skews the visual viewport by being off the
             * page, so we need to hide it first.
             */
            _this.hideDialogAndThen(function (redisplayCallback) {
                /**
                 * For whatever reason iOS Safari is slow to update the visual viewport after hiding the dialog after an orientation
                 * change. The hack below fixes the visual jerkiness, but we still need a setTimeout for the internal values to update.
                 */
                _this.forceRepaintHack();
                /* Delay the resize and reposition so that we get the correct viewport values. */
                _this.resizeAndRepositionCallback = function () {
                    _this.resizeAndRepositionTimeoutId = null;
                    _this.resizeAndRepositionCallback = null;
                    _this.sizingWrapper.updateSize();
                    if (redisplayCallback) {
                        redisplayCallback();
                    }
                    _this.repositionDialog();
                };
                _this.resizeAndRepositionTimeoutId = window.setTimeout(_this.resizeAndRepositionCallback, ResizeAndRepositionDelayMs);
            });
        };
        // tslint:disable:deprecation
        _this.getAnchorClientRect = function () {
            if (_this.props.getAnchorClientRect) {
                return _this.props.getAnchorClientRect();
            }
            else if (_this.props.anchorEl) {
                return _this.props.anchorEl.getBoundingClientRect();
            }
            else {
                return undefined;
            }
        };
        _this.handleGlassEscape = function () {
            _this.props.onCloseRequest();
        };
        _this.instanceId = dialogInstanceCount++;
        _this.state = { hasBeenDragged: false };
        return _this;
    }
    DialogWidget.prototype.addResizeEventListener = function () {
        window.addEventListener('resize', this.throttledHandleAdjustPositionOnResize);
    };
    DialogWidget.prototype.removeResizeEventListener = function () {
        window.removeEventListener('resize', this.throttledHandleAdjustPositionOnResize);
    };
    DialogWidget.prototype.repositionDialog = function () {
        switch (this.props.positioningBehavior) {
            case DialogPositioningBehavior.Centered:
            case DialogPositioningBehavior.Maximized:
                this.floaterWidget.centerInVisualViewport();
                break;
            case DialogPositioningBehavior.Draggable:
                if (this.state.hasBeenDragged) {
                    this.repositionDraggedDialog();
                }
                else {
                    this.floaterWidget.centerInVisualViewport();
                }
                break;
            case DialogPositioningBehavior.Anchored:
                if (this.overlay) {
                    this.overlay.setPlacement();
                }
                break;
            default:
                throw new Error("Invalid Dialog Positioning Behavior: " + this.props.positioningBehavior);
        }
    };
    /**
     * We save the dragged dialog position before hiding it because it is needed to reposition the dragged dialog.
     */
    DialogWidget.prototype.saveDraggedDialogPositionBeforeHide = function () {
        this.dragPositionBeforeHide = this.getDialogFloaterClientRect();
    };
    /**
     * To reposition a dragged dialog we need to take into account if it was hidden.  If it was hidden we use the
     * position before it was hidden. We need to use a single setPosition instead of one each for unhiding and repositioning
     * the dialog because if the original position before it was hidden is to the right of the viewport mobile chrome will try
     * to zoom out to show the dialog.
     */
    DialogWidget.prototype.repositionDraggedDialog = function () {
        var draggedOriginalPosition;
        if (!!this.dragPositionBeforeHide) {
            draggedOriginalPosition = this.dragPositionBeforeHide;
            // set it as undefined so if a reposition occurs from an window resize change it will not set this hide variable
            this.dragPositionBeforeHide = undefined;
        }
        else {
            draggedOriginalPosition = this.getDialogFloaterClientRect();
        }
        this.floaterWidget.setPosition(this.getBoundedFloaterPos(draggedOriginalPosition));
    };
    /**
     * Hides the dialog and then invokes the given callback. The given callback will be invoked with a reposition callback
     * as an argument. When invoked, the reposition callback will unhide and reposition the dialog.
     */
    DialogWidget.prototype.hideDialogAndThen = function (afterHideCallback) {
        var redisplayCallback;
        switch (this.props.positioningBehavior) {
            case DialogPositioningBehavior.Centered:
            case DialogPositioningBehavior.Maximized:
                this.floaterWidget.setPosition({ top: -10000, left: -10000 });
                break;
            case DialogPositioningBehavior.Draggable:
                this.saveDraggedDialogPositionBeforeHide();
                this.floaterWidget.setPosition({ top: -10000, left: -10000 });
                break;
            case DialogPositioningBehavior.Anchored:
                var node_1 = ReactDOM.findDOMNode(this.sizingWrapper);
                var savedDisplay_1 = node_1.style.display;
                node_1.style.display = 'none';
                redisplayCallback = function () {
                    node_1.style.display = savedDisplay_1;
                };
                break;
            default:
                throw new Error("Invalid Dialog Positioning Behavior: " + this.props.positioningBehavior);
        }
        afterHideCallback(redisplayCallback);
    };
    /* Forces a repaint in WebKit by querying offsetHeight. */
    DialogWidget.prototype.forceRepaintHack = function () {
        /**
         * The code here is adapted from
         * http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes
         */
        var node = ReactDOM.findDOMNode(this);
        var savedDisplay = node.style.display;
        node.style.display = 'none';
        // tslint:disable-next-line:no-unused-expression
        node.offsetHeight;
        node.style.display = savedDisplay;
    };
    /**
     * Adjusts the given position if needed to keep the dialog on screen.
     */
    DialogWidget.prototype.getBoundedFloaterPos = function (pos) {
        var dialogClientRect = this.floaterWidget.getFloaterClientRect();
        var dialogRectAtGivenPos = {
            top: pos.top,
            left: pos.left,
            width: dialogClientRect.width,
            height: dialogClientRect.height
        };
        var visualViewport = ViewportHelpers.getVisualViewport();
        var windowRect = {
            top: 0,
            left: 0,
            width: visualViewport.width,
            height: visualViewport.height
        };
        return Geometry_1.computePositionToContainBounds(dialogRectAtGivenPos, windowRect);
    };
    // tslint:enable:deprecation
    DialogWidget.prototype.getPositionedDialogElem = function (dialogBody) {
        switch (this.props.positioningBehavior) {
            case DialogPositioningBehavior.Centered:
            case DialogPositioningBehavior.Draggable:
            case DialogPositioningBehavior.Maximized:
                var id = Declarative_1.testId(this.props.testId, 'Dialog');
                return (react_1.createElement(FloaterWidget_1.FloaterWidget, {
                    portalEventTrapOverrides: this.props.portalEventTrapOverrides,
                    testId: id,
                    stackingRootId: this.props.stackingRootId,
                    ref: this.handleFloaterWidgetRef,
                    zIndex: this.props.zIndex,
                    shouldRecenterOnUpdate: !!this.props.shouldRecenterOnUpdate && !this.state.hasBeenDragged,
                    wrapperTestId: Declarative_1.testId(id, 'Floater')
                }, dialogBody));
            case DialogPositioningBehavior.Anchored:
                var overlayProps = {
                    portalEventTrapOverrides: this.props.portalEventTrapOverrides,
                    getAnchorClientRect: this.getAnchorClientRect,
                    anchorOrigin: this.props.anchorOrigin || {
                        vertical: Overlay_1.VerticalOriginOption.bottom,
                        horizontal: Overlay_1.HorizontalOriginOption.left
                    },
                    stackedOrigin: this.props.stackedOrigin || {
                        vertical: Overlay_1.VerticalOriginOption.top,
                        horizontal: Overlay_1.HorizontalOriginOption.left
                    },
                    stackingRootId: this.props.stackingRootId,
                    allowAutoPosition: true,
                    zIndex: this.props.zIndex,
                    leftFromOverlaidPosition: this.props.dialogStyle ? parseFloat(this.props.dialogStyle.left) || 0 : undefined,
                    topFromOverlaidPosition: this.props.dialogStyle ? parseFloat(this.props.dialogStyle.top) || 0 : undefined,
                };
                return react_1.createElement(Overlay_1.Overlay, tslib_1.__assign({}, overlayProps, { ref: this.handleOverlayRef }), dialogBody);
            default:
                throw new Error("Invalid Dialog Positioning Behavior: " + this.props.positioningBehavior);
        }
    };
    DialogWidget.prototype.getGlassElem = function () {
        var id = Declarative_1.testId(this.props.testId, 'Dialog');
        return (react_1.createElement(GlassWidget_1.GlassWidget, {
            testId: id,
            handleClick: this.props.handleGlassClick,
            isTransparent: this.props.isGlassTransparent,
            stackingRootId: this.props.stackingRootId,
            zIndex: this.props.zIndex,
            handleEscape: this.handleGlassEscape,
            wrapperTestId: Declarative_1.testId(id, 'Glass')
        }));
    };
    DialogWidget.prototype.componentDidMount = function () {
        OrientationChange_1.OrientationChange.addListener(this.handleOrientationChange);
        if (this.props.shouldAdjustPositionOnWindowResize) {
            this.addResizeEventListener();
        }
    };
    DialogWidget.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.shouldAdjustPositionOnWindowResize !== prevProps.shouldAdjustPositionOnWindowResize) {
            if (this.props.shouldAdjustPositionOnWindowResize) {
                this.addResizeEventListener();
            }
            else {
                this.removeResizeEventListener();
            }
        }
    };
    DialogWidget.prototype.componentWillUnmount = function () {
        OrientationChange_1.OrientationChange.removeListener(this.handleOrientationChange);
        if (this.props.shouldAdjustPositionOnWindowResize) {
            this.removeResizeEventListener();
        }
    };
    DialogWidget.prototype.render = function () {
        if (this.props.title === undefined) {
            console.warn("DialogWidget: 'title' prop should be defined");
        }
        var dialogContentProps = tslib_1.__assign({}, this.props, { id: "" + exports.SharedWidgetsDialogLabel + this.instanceId, getDraggableDialogClientRect: this.getDialogFloaterClientRect, setDraggableDialogPosition: this.dragBoundedDialogFloaterPosition, testId: Declarative_1.testId(this.props.testId, 'Dialog') });
        var domWrapperProps = {
            isMaximized: this.props.positioningBehavior === DialogPositioningBehavior.Maximized,
            horizontalMargins: ViewportHorizontalMargins,
            verticalMargins: ViewportVerticalMargins,
            style: tslib_1.__assign({}, getStyles().Dialog, this.props.dialogStyle, { width: this.props.dialogWidth }),
            ref: this.handleSizingWrapperRef,
            testId: Declarative_1.conditional(this.props.positioningBehavior === DialogPositioningBehavior.Anchored, Declarative_1.testId(this.props.testId, 'Dialog'))
        };
        var dialogEl = react_1.createElement(ViewportConstrainedDom_1.ViewportConstrainedDomWrapper, domWrapperProps, react_1.createElement(DialogContent_1.DialogContent, dialogContentProps));
        return (react_1.createElement('div', { style: { display: 'none' } }, Declarative_1.conditional(this.props.isModal, this.getGlassElem()), this.getPositionedDialogElem(dialogEl)));
    };
    return DialogWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.DialogWidget = DialogWidget;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// tslint:disable:deprecation
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var TabStyles_1 = __webpack_require__(2);
var DomUtil_1 = __webpack_require__(7);
var GlobalPointerDownOutsideListener_1 = __webpack_require__(59);
var Overlay_1 = __webpack_require__(10);
var DomWidgets_1 = __webpack_require__(4);
var DynamicThemeComponent_1 = __webpack_require__(5);
var ListMenuWidget_1 = __webpack_require__(60);
var SearchFieldWidget_1 = __webpack_require__(44);
var DefaultAnchorOrigin = {
    vertical: Overlay_1.VerticalOriginOption.bottom,
    horizontal: Overlay_1.HorizontalOriginOption.left
};
var Spacing = TabStyles_1.TabStyles.Spacing, Sizing = TabStyles_1.TabStyles.Sizing, Colors = TabStyles_1.TabStyles.Colors, Shadow = TabStyles_1.TabStyles.Shadow;
exports.FlyoutListMenuStyles = {
    backgroundColor: 'white',
    borderColor: Colors.L6,
    borderRadius: Sizing.BorderRadius,
    borderStyle: 'solid',
    borderWidth: Sizing.BorderWidth,
    boxShadow: Shadow.Standard
};
var GenericFlyoutListMenuWidget = /** @class */ (function (_super) {
    tslib_1.__extends(GenericFlyoutListMenuWidget, _super);
    function GenericFlyoutListMenuWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.handleSearchEscape = function () {
            if (!!_this.state.searchString) {
                _this.setState({ searchString: '' });
            }
            else {
                _this.onRequestClose();
            }
        };
        _this.handleCancelSearch = function () {
            _this.setState({ searchString: undefined });
        };
        _this.handleSearchChanged = function (searchString) {
            _this.setState({ searchString: searchString });
        };
        _this.handleSearchEnter = function () {
            if (_this.listWidgetInstance) {
                _this.listWidgetInstance.selectActive();
            }
        };
        _this.getFilteredMenuItems = function () {
            if (!_this.state.searchString) {
                return _this.props.menuItemInfos;
            }
            // filter to items which case-insensitively contain searchString
            return _this.props.menuItemInfos.filter(function (item) {
                return item.isDivider || (item.keyboardAccessibleValue &&
                    item.keyboardAccessibleValue.toUpperCase().indexOf(_this.state.searchString.toUpperCase()) >= 0);
            }).filter(function (item, index, items) {
                return !(item.isDivider && index > 0 && items[index - 1].isDivider);
            }).filter(function (item, index, items) {
                return !(item.isDivider && (index === 0 || index === items.length - 1));
            });
        };
        _this.onRequestClose = function () {
            _this.props.requestCloseAll();
        };
        _this.handleKeyDown = function (e) {
            switch (e.key) {
                case 'ArrowUp':
                case 'ArrowDown':
                    if (_this.state.focusLocation === 'search' && _this.getFilteredMenuItems().length > 0) {
                        _this.setState({ focusLocation: 'list' });
                    }
                    else {
                        return;
                    }
                    break;
                case 'Tab':
                    // this case may need to change if we move toward combobox behavior
                    if (_this.state.focusLocation === 'search') {
                        if (_this.getFilteredMenuItems().length > 0) {
                            _this.setState({ focusLocation: 'list' });
                        }
                    }
                    else if (_this.props.__UNSUPPORTED__showSearchField) {
                        _this.setState({ focusLocation: 'search' });
                    }
                    break; // regardless, trap focus
                default:
                    return; // don't prevent default / stop propagation for unhandled keys
            }
            e.preventDefault();
            e.stopPropagation();
        };
        _this.setSearchDomNode = function (ref) {
            _this.searchDomNode = ref;
        };
        _this.handleListRef = function (ref) {
            _this.listWidgetInstance = ref;
        };
        _this.setFlyoutDomNode = function (ref) {
            _this.flyoutDomNode = ReactDOM.findDOMNode(ref);
        };
        _this.handleFocus = function (event) {
            var target = event.target;
            var listDomNode = _this.getListDomNode();
            var focusLocation = _this.state.focusLocation;
            if (_this.searchDomNode && _this.searchDomNode.contains(target)) {
                focusLocation = 'search';
            }
            else if (listDomNode && listDomNode.contains(target)) {
                focusLocation = 'list';
            }
            if (_this.state.focusLocation !== focusLocation) {
                _this.setState({ focusLocation: focusLocation });
            }
        };
        _this.getAnchorClientRect = function () {
            if (_this.props.getAnchorClientRect) {
                return _this.props.getAnchorClientRect();
            }
            return _this.props.anchorEl ? _this.props.anchorEl.getBoundingClientRect() : undefined;
        };
        _this.state = {
            searchString: '',
            focusLocation: _this.props.__UNSUPPORTED__showSearchField ? 'search' : 'list',
        };
        return _this;
    }
    GenericFlyoutListMenuWidget.prototype.componentDidMount = function () {
        // Everything outside the toggling element/button or the flyout should trigger a close on mousedown
        if (this.flyoutDomNode) {
            this.pointerDownOutsideFlyoutListenerUnsubscribe = GlobalPointerDownOutsideListener_1.GlobalPointerDownOutsideListener.subscribe(this.flyoutDomNode, this.onRequestClose);
        }
        if (this.props.toggleEl) {
            this.pointerDownOutsideToggleElListenerUnsubscribe = GlobalPointerDownOutsideListener_1.GlobalPointerDownOutsideListener.subscribe(this.props.toggleEl, this.onRequestClose);
        }
        this.syncFocus();
    };
    GenericFlyoutListMenuWidget.prototype.componentDidUpdate = function () {
        this.syncFocus();
    };
    GenericFlyoutListMenuWidget.prototype.componentWillUnmount = function () {
        if (this.pointerDownOutsideFlyoutListenerUnsubscribe) {
            this.pointerDownOutsideFlyoutListenerUnsubscribe();
        }
        if (this.pointerDownOutsideToggleElListenerUnsubscribe) {
            this.pointerDownOutsideToggleElListenerUnsubscribe();
        }
        // Return focus to the toggle element
        if (this.props.toggleEl && this.props.shouldReturnFocusToToggleEl) {
            /**
             * We must use setTimeout here because it is likely a focus event is causing the flyoutlistmenu to unmount.
             * We need to queue this event so that it is called after that focus event.
             */
            DomUtil_1.timeoutFocus(this.props.toggleEl);
        }
    };
    GenericFlyoutListMenuWidget.prototype.syncFocus = function () {
        if (this.state.focusLocation === 'list') {
            var listDomNode = this.getListDomNode();
            if (listDomNode) {
                listDomNode.focus();
            }
        }
        else if (this.state.focusLocation === 'search') {
            if (this.searchDomNode) {
                this.searchDomNode.focus();
            }
        }
    };
    GenericFlyoutListMenuWidget.prototype.getListDomNode = function () {
        return ReactDOM.findDOMNode(this.listWidgetInstance);
    };
    GenericFlyoutListMenuWidget.prototype.renderSearchField = function () {
        if (!this.props.__UNSUPPORTED__showSearchField) {
            return undefined;
        }
        return (React.createElement(SearchFieldWidget_1.SearchFieldWidget, { containerStyle: {
                margin: Spacing.SmallSpace,
                marginBottom: Spacing.DefaultSpace,
            }, handleCancelSearch: this.handleCancelSearch, handleChange: this.handleSearchChanged, handleEnter: this.handleSearchEnter, handleEscape: this.handleSearchEscape, inputRef: this.setSearchDomNode, placeholder: this.props.__UNSUPPORTED__searchDefaultText, shouldSelectTextOnFocus: false, testId: 'flyout-search', text: this.state.searchString }));
    };
    GenericFlyoutListMenuWidget.prototype.render = function () {
        if (!!this.props.__UNSUPPORTED__searchDefaultText) {
            console.warn('__UNSUPPORTED__searchDefaultText is an unsupported/deprecated prop and should not be used');
        }
        if (!!this.props.__UNSUPPORTED__showSearchField) {
            console.warn('__UNSUPPORTED__showSearchField is an unsupported/deprecated prop and should not be used');
        }
        var overlayProps = {
            allowAutoPosition: this.props.allowAutoPosition,
            anchorOrigin: this.props.anchorOrigin || DefaultAnchorOrigin,
            getAnchorClientRect: this.getAnchorClientRect,
            handleScrollOnScrollingRoot: this.props.handleScrollOnScrollingRoot,
            leftFromOverlaidPosition: this.props.leftFromOverlaidPosition,
            scrollingRootId: this.props.scrollingRootId,
            shouldAutoPositionOnScrollingRootScroll: this.props.shouldAutoPositionOnScrollingRootScroll,
            stackedOrigin: this.props.stackedOrigin,
            stackingRootId: this.props.stackingRootId,
            topFromOverlaidPosition: this.props.topFromOverlaidPosition,
            zIndex: this.props.zIndex,
        };
        var blockProps = {
            onFocus: this.handleFocus,
            onKeyDown: this.handleKeyDown,
            ref: this.setFlyoutDomNode,
            style: tslib_1.__assign({}, exports.FlyoutListMenuStyles, this.props.menuStyle),
        };
        var listMenuProps = {
            __INTERNAL__focusIndex: this.props.__INTERNAL__focusIndex,
            focusDisabled: this.state.focusLocation === 'search',
            id: this.props.id,
            letterSearchDisabled: this.props.__UNSUPPORTED__showSearchField,
            maxHeight: this.props.maxHeight,
            menuItemInfos: this.getFilteredMenuItems(),
            onEscapeKeyUp: this.props.onEscapeKeyUp,
            onLeftArrowKeyDown: this.props.onLeftArrowKeyDown,
            onMouseEnter: this.props.onMouseEnter,
            onSelect: this.props.onSelect,
            requestCloseAll: this.onRequestClose,
            role: this.props.role,
            scrollingRootId: this.props.scrollingRootId,
            stackingRootId: this.props.stackingRootId,
            subMenuAllowAutoPosition: this.props.allowAutoPosition,
            subMenuShouldAutoPositionOnScrollingRootScroll: this.props.shouldAutoPositionOnScrollingRootScroll,
            testId: this.props.testId,
            zIndex: this.props.zIndex,
        };
        return (React.createElement(Overlay_1.Overlay, tslib_1.__assign({}, overlayProps),
            React.createElement(DomWidgets_1.Block, tslib_1.__assign({}, blockProps),
                this.renderSearchField(),
                React.createElement(ListMenuWidget_1.ListMenuWidget, tslib_1.__assign({}, listMenuProps, { ref: this.handleListRef })))));
    };
    GenericFlyoutListMenuWidget.defaultProps = {
        shouldReturnFocusToToggleEl: true
    };
    return GenericFlyoutListMenuWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.GenericFlyoutListMenuWidget = GenericFlyoutListMenuWidget;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var TabStyles_1 = __webpack_require__(2);
var BrowserDetection_1 = __webpack_require__(18);
var InteractiveDom_1 = __webpack_require__(8);
var StyleSheet_1 = __webpack_require__(39);
var TextFieldBase_1 = __webpack_require__(17);
var isMSFT = BrowserDetection_1.isIE || BrowserDetection_1.isEdge;
var inputClass = isMSFT ? 'shared-widgets-text-input-ie-fix' : '';
if (isMSFT) {
    // Fix for IE cursor bug TFS590227
    StyleSheet_1.SingletonStyleSheet.addRawSelector("." + inputClass + ":focus", { 'background-color': TabStyles_1.TabStyles.Colors.Transparent });
    // This prevents IE from adding a clear button to text inputs
    // This will throw if not IE
    StyleSheet_1.SingletonStyleSheet.addRawSelector("." + inputClass + "::-ms-clear", { 'display': 'none' });
}
var Styles = {
    input: {
        width: '100%',
        boxSizing: 'border-box',
        WebkitAppearance: 'none' // TFSID 719780: hide inner shadow on iOS text boxes
    }
};
var TextFieldInputWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TextFieldInputWidget, _super);
    function TextFieldInputWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleComposition = function (e) {
            if (e.type === 'compositionend') {
                _this.isComposing = false;
                _this.handleInputChange(e);
            }
            else {
                _this.isComposing = true;
            }
        };
        _this.handleInputRef = function (element) {
            if (_this.props.inputRef) {
                _this.props.inputRef(element);
            }
        };
        _this.handleInputChange = function (e) {
            if (_this.props.disabled || !_this.props.handleChange) {
                return;
            }
            _this.props.handleChange(e.target.value, _this.isComposing);
        };
        _this.handleInputFocus = function (e) {
            if (!_this.props.shouldSelectTextOnFocus || _this.shouldIgnoreFocusEvent(e)) {
                return;
            }
            var input = e.target;
            window.setTimeout(function () {
                // Defect 706678: only certain element types support setSelectionRange, but Safari prefers it
                try {
                    if (input.value) {
                        input.setSelectionRange(0, input.value.length);
                    }
                }
                catch (e) {
                    input.select();
                }
            });
        };
        _this.handleKeyDown = function (e) {
            if (_this.props.disabled || _this.isComposing) {
                return;
            }
            if (_this.props.onKeyDown) {
                _this.props.onKeyDown(e);
            }
        };
        _this.handleKeyUp = function (e) {
            if (_this.props.disabled || _this.isComposing) {
                return;
            }
            if (e.key === 'Enter' && _this.props.handleEnter) {
                _this.props.handleEnter();
            }
            if (e.key === 'Escape' && _this.props.handleEscape) {
                _this.props.handleEscape();
            }
        };
        return _this;
    }
    // nasty hack to work around Safari bug which dispatches multiple focus events with
    // as single click on trackpads: https://github.com/facebook/react/issues/10871
    // credit to https://gist.github.com/pmacmillan/5e78836821ac22031567382dadd4a72e
    TextFieldInputWidget.prototype.shouldIgnoreFocusEvent = function (e) {
        // tslint:disable:no-any
        var target = e.target;
        // tslint:disable:no-any
        var relatedTarget = e.relatedTarget;
        // test if we are ignoring the current event because we recevied another one too soon
        if (target.lastFocusEventMs && e.timeStamp < target.lastFocusEventMs + 100) {
            return true;
        }
        target.lastFocusEventMs = e.timeStamp;
        if (relatedTarget) {
            relatedTarget.lastFocusEventMs = e.timeStamp;
        }
        return false;
    };
    TextFieldInputWidget.prototype.render = function () {
        var _a = this.props, containerStyle = _a.containerStyle, handleActive = _a.handleActive, handleBlur = _a.handleBlur, handleChange = _a.handleChange, handleEnter = _a.handleEnter, handleEscape = _a.handleEscape, handleFocus = _a.handleFocus, handleHover = _a.handleHover, inputRef = _a.inputRef, inputStyle = _a.inputStyle, interactiveStyles = _a.interactiveStyles, onDarkBackground = _a.onDarkBackground, placeholder = _a.placeholder, placeholderStyle = _a.placeholderStyle, pointerClick = _a.pointerClick, pointerDoubleClick = _a.pointerDoubleClick, pointerDown = _a.pointerDown, pointerUp = _a.pointerUp, shouldSelectTextOnFocus = _a.shouldSelectTextOnFocus, testId = _a.testId, text = _a.text, type = _a.type, inputProps = tslib_1.__rest(_a, ["containerStyle", "handleActive", "handleBlur", "handleChange", "handleEnter", "handleEscape", "handleFocus", "handleHover", "inputRef", "inputStyle", "interactiveStyles", "onDarkBackground", "placeholder", "placeholderStyle", "pointerClick", "pointerDoubleClick", "pointerDown", "pointerUp", "shouldSelectTextOnFocus", "testId", "text", "type"]);
        return (React.createElement("input", tslib_1.__assign({}, inputProps, { className: inputClass, "data-tb-test-id": testId + '-TextInput', onBlur: handleBlur, onChange: this.handleInputChange, onCompositionEnd: this.handleComposition, onCompositionStart: this.handleComposition, onCompositionUpdate: this.handleComposition, onFocus: this.handleInputFocus, onKeyDown: this.handleKeyDown, onKeyUp: this.handleKeyUp, ref: this.handleInputRef, style: tslib_1.__assign({}, Styles.input, inputStyle), type: type.toString(), value: text })));
    };
    TextFieldInputWidget.defaultProps = {
        shouldSelectTextOnFocus: true,
        text: '',
        type: TextFieldBase_1.TextInputType.Text,
    };
    TextFieldInputWidget = tslib_1.__decorate([
        InteractiveDom_1.InteractiveDomHoCDecorator
    ], TextFieldInputWidget);
    return TextFieldInputWidget;
}(React.Component));
exports.TextFieldInputWidget = TextFieldInputWidget;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the value or the min or max if the value is outside those bounds (which are inclusive).
 */
function clamp(value, min, max) {
    if (max < min) {
        return NaN;
    }
    return Math.min(Math.max(value, min), max);
}
exports.clamp = clamp;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var SliderWidget_1 = __webpack_require__(65);
var SliderHandleContainer_1 = __webpack_require__(149);
var SliderTickBarWidget_1 = __webpack_require__(153);
var SliderTrackWidget_1 = __webpack_require__(154);
var SliderValueLogic_1 = __webpack_require__(66);
var SliderStyles_1 = __webpack_require__(22);
var HandleType;
(function (HandleType) {
    HandleType["Both"] = "both";
    HandleType["Left"] = "left";
    HandleType["Right"] = "right";
})(HandleType = exports.HandleType || (exports.HandleType = {}));
/**
 * A horizontal slider widget with one or two handles.
 */
var SliderBaseWidget = /** @class */ (function (_super) {
    tslib_1.__extends(SliderBaseWidget, _super);
    function SliderBaseWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.getTickCount = function () {
            // And now for a word on how the ticks and handle manage to render all aligned and the handle(s) snaps to ticks:
            //
            // * The way SliderValueLogic does snapping via Math.round, so the number of integers from min to max become the
            //   number of snap points and by the magic of math are evenly distributed horizontally.
            // * The tick rendering in SliderTickBarWidget evenly distributes ticks horizontally as well, and the number of
            //   ticks also equals the number of integers from min to max.
            // * In other words, there are the same number of snap spots and number of ticks, and both are evenly distributed
            //   horizontally.
            // * Finally, to get the ticks to perfectly line up with the handle(s) (and the press indicator on the handle) we
            //   just have to make sure that the horizontal areas for the ticks and the handle start at the same x position of
            //   the page and are the same width.  This is controlled by the styles defined in SliderStyles.
            return !!_this.props.isDiscrete ? Math.floor(_this.props.max) - Math.ceil(_this.props.min) + 1 : 0;
        };
        _this.getIndicatorAndDataBarPositions = function (leftHandlePosition, rightHandlePosition) {
            if (isSingleHandleSlider(_this.props.value) && !_this.props.isDiscrete) {
                if (_this.props.openEndedAt === SliderWidget_1.OpenEndedAt.Min) {
                    return { indicatorBarPosition: { start: 0, end: leftHandlePosition } };
                }
                else if (_this.props.openEndedAt === SliderWidget_1.OpenEndedAt.Max) {
                    return { indicatorBarPosition: { start: leftHandlePosition, end: 1 } };
                }
            }
            else if (!isSingleHandleSlider(_this.props.value)) {
                var dataBarPosition = void 0;
                if (_this.props.trackBarDataRange) {
                    var dataBarStartPosition = _this.sliderValueLogic.calculateSliderPositionAsProportion(_this.props.trackBarDataRange.from);
                    var dataBarEndPosition = _this.sliderValueLogic.calculateSliderPositionAsProportion(_this.props.trackBarDataRange.to);
                    dataBarPosition = {
                        start: Math.max(leftHandlePosition, dataBarStartPosition),
                        end: Math.min(rightHandlePosition, dataBarEndPosition)
                    };
                }
                return { indicatorBarPosition: { start: leftHandlePosition, end: rightHandlePosition }, dataBarPosition: dataBarPosition };
            }
            return {};
        };
        /**
         * A convenience method to fire the onChange method from props for when a single value (i.e. handle) has changed.
         */
        _this.fireOnChangeForSingleValue = function (handle, newValue) {
            if (!_this.props.onChange) {
                return;
            }
            if (isSingleHandleSlider(_this.props.value)) {
                if (newValue !== _this.props.value) {
                    _this.props.onChange(newValue);
                }
            }
            else {
                if (handle === HandleType.Left && newValue !== _this.props.value.from) {
                    _this.props.onChange({ from: Math.min(newValue, _this.props.value.to), to: _this.props.value.to });
                }
                else if (handle === HandleType.Right && newValue !== _this.props.value.to) {
                    _this.props.onChange({ from: _this.props.value.from, to: Math.max(newValue, _this.props.value.from) });
                }
            }
        };
        /**
         * A convenience method to fire the onChange method from props for when both values have changed (i.e. both handles).
         */
        _this.fireOnChangeForTwoValues = function (newFromValue, newToValue) {
            if (!_this.props.onChange || isSingleHandleSlider(_this.props.value) || newFromValue > newToValue) {
                return;
            }
            _this.props.onChange({ from: newFromValue, to: newToValue });
        };
        _this.handleHandleDragStart = function (handle, position) {
            _this.setState({ areHandlesBeingDragged: true });
            var newValue = _this.sliderValueLogic.calculateNewSliderValueFromProportion(position);
            _this.fireOnChangeForSingleValue(handle, newValue);
        };
        _this.handleHandleDragMove = function (handle, position) {
            var newValue = _this.sliderValueLogic.calculateNewSliderValueFromProportion(position);
            _this.fireOnChangeForSingleValue(handle, newValue);
        };
        _this.handleBothHandleDragStart = function () {
            _this.setState({ areHandlesBeingDragged: true });
        };
        _this.handleBothHandleDragMove = function (leftHandlePosition, rightHandlePosition) {
            var newFromValue = _this.sliderValueLogic.calculateNewSliderValueFromProportion(leftHandlePosition);
            var newToValue = _this.sliderValueLogic.calculateNewSliderValueFromProportion(rightHandlePosition);
            _this.fireOnChangeForTwoValues(newFromValue, newToValue);
        };
        _this.handleHandleRelease = function () {
            _this.setState({ areHandlesBeingDragged: false });
        };
        _this.handleHandleKeyDown = function (handle, key) {
            _this.setState({ areHandlesBeingDragged: true });
            if (handle === HandleType.Both) {
                if (!isSingleHandleSlider(_this.props.value)) {
                    var newSliderRangeValue = _this.sliderValueLogic.calculateNewSliderRangeValueForKey(key, _this.props.value);
                    _this.fireOnChangeForTwoValues(newSliderRangeValue.from, newSliderRangeValue.to);
                }
            }
            else {
                var oldValue = void 0;
                if (isSingleHandleSlider(_this.props.value)) {
                    oldValue = _this.props.value;
                }
                else {
                    oldValue = handle === HandleType.Left ? _this.props.value.from : _this.props.value.to;
                }
                var newValue = _this.sliderValueLogic.calculateNewSliderValueForKey(key, oldValue);
                _this.fireOnChangeForSingleValue(handle, newValue);
            }
        };
        _this.handleRangeHandleFocus = function (focus) {
            _this.setState({ isRangeHandleFocused: focus });
        };
        _this.state = { areHandlesBeingDragged: false, isRangeHandleFocused: false };
        _this.sliderValueLogic = new SliderValueLogic_1.SliderValueLogic(_this.props.min, _this.props.max, !!_this.props.isDiscrete);
        return _this;
    }
    SliderBaseWidget.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.props.isDiscrete !== prevProps.isDiscrete || this.props.min !== prevProps.min || this.props.max !== prevProps.max) {
            this.sliderValueLogic = new SliderValueLogic_1.SliderValueLogic(prevProps.min, prevProps.max, !!prevProps.isDiscrete);
        }
        if (prevState.areHandlesBeingDragged && !this.state.areHandlesBeingDragged) {
            if (this.props.onHandleRelease) {
                this.props.onHandleRelease();
            }
            else if (prevProps.onHandleRelease) {
                prevProps.onHandleRelease();
            }
        }
    };
    SliderBaseWidget.prototype.getSliderHandleAriaAttributes = function (value) {
        return {
            'aria-label': this.props.ariaLabel,
            'aria-valuemax': this.props.isDiscrete ? Math.floor(this.props.max) : this.props.max,
            'aria-valuemin': this.props.isDiscrete ? Math.ceil(this.props.min) : this.props.min,
            'aria-valuenow': value,
        };
    };
    SliderBaseWidget.prototype.render = function () {
        var styles = SliderStyles_1.getSliderStyles();
        var leftHandlePosition = undefined;
        var leftHandleAriaAttributes = undefined;
        var rightHandlePosition = undefined;
        var rightHandleAriaAttributes = undefined;
        if (isSingleHandleSlider(this.props.value)) {
            leftHandlePosition = this.sliderValueLogic.calculateSliderPositionAsProportion(this.props.value);
            leftHandleAriaAttributes = this.getSliderHandleAriaAttributes(this.props.value);
        }
        else {
            leftHandlePosition = this.sliderValueLogic.calculateSliderPositionAsProportion(this.props.value.from);
            leftHandleAriaAttributes = this.getSliderHandleAriaAttributes(this.props.value.from);
            rightHandlePosition = this.sliderValueLogic.calculateSliderPositionAsProportion(this.props.value.to);
            rightHandleAriaAttributes = this.getSliderHandleAriaAttributes(this.props.value.to);
        }
        var tickCount = this.getTickCount();
        var indicatorAndDataBarPositions = this.getIndicatorAndDataBarPositions(leftHandlePosition, rightHandlePosition);
        return (React.createElement("div", { "data-tb-test-id": this.props.testId, style: tslib_1.__assign({}, styles.OuterContainer, this.props.style) },
            React.createElement("div", { style: styles.TrackAndHandleContainer },
                tickCount > 1 && React.createElement(SliderTickBarWidget_1.SliderTickBarWidget, { testId: this.props.testId, tickCount: tickCount }),
                React.createElement(SliderTrackWidget_1.SliderTrackWidget, { dataBarPosition: indicatorAndDataBarPositions.dataBarPosition, handleIsBeingDragged: this.state.areHandlesBeingDragged, isRangeHandleFocused: this.state.isRangeHandleFocused, rangeIndicatorBarPosition: indicatorAndDataBarPositions.indicatorBarPosition, testId: this.props.testId }),
                React.createElement(SliderHandleContainer_1.SliderHandleContainer, { disabled: this.props.disabled, handles: { leftHandlePosition: leftHandlePosition, rightHandlePosition: rightHandlePosition }, handlesAriaAttributes: { leftHandleAriaAttributes: leftHandleAriaAttributes, rightHandleAriaAttributes: rightHandleAriaAttributes }, onBothHandleDragMove: this.handleBothHandleDragMove, onBothHandleDragStart: this.handleBothHandleDragStart, onHandleDragMove: this.handleHandleDragMove, onHandleDragStart: this.handleHandleDragStart, onHandleKeyDown: this.handleHandleKeyDown, onHandleRelease: this.handleHandleRelease, onRangeHandleFocus: this.handleRangeHandleFocus, testId: this.props.testId }))));
    };
    return SliderBaseWidget;
}(React.Component));
exports.SliderBaseWidget = SliderBaseWidget;
/**
 * If this is true, then the slider should have a single handle. Conversely, if false, it should have two handles.
 */
var isSingleHandleSlider = function (value) {
    return typeof value === 'number';
};


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setStylesTarget", function() { return setStylesTarget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssRaw", function() { return cssRaw; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssRule", function() { return cssRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forceRenderStyles", function() { return forceRenderStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fontFace", function() { return fontFace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStyles", function() { return getStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function() { return keyframes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reinit", function() { return reinit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "style", function() { return style; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stylesheet", function() { return stylesheet; });
/* harmony export (immutable) */ __webpack_exports__["createTypeStyle"] = createTypeStyle;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_typestyle__ = __webpack_require__(168);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TypeStyle", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_typestyle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__types__ = __webpack_require__(171);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__types__);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "types", function() { return __WEBPACK_IMPORTED_MODULE_1__types__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_utilities__ = __webpack_require__(74);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_utilities__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "classes", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_utilities__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "media", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_utilities__["c"]; });


/**
 * All the CSS types in the 'types' namespace
 */


/**
 * Export certain utilities
 */

/** Zero configuration, default instance of TypeStyle */
var ts = new __WEBPACK_IMPORTED_MODULE_0__internal_typestyle__["a" /* TypeStyle */]({ autoGenerateTag: true });
/** Sets the target tag where we write the css on style updates */
var setStylesTarget = ts.setStylesTarget;
/**
 * Insert `raw` CSS as a string. This is useful for e.g.
 * - third party CSS that you are customizing with template strings
 * - generating raw CSS in JavaScript
 * - reset libraries like normalize.css that you can use without loaders
 */
var cssRaw = ts.cssRaw;
/**
 * Takes CSSProperties and registers it to a global selector (body, html, etc.)
 */
var cssRule = ts.cssRule;
/**
 * Renders styles to the singleton tag imediately
 * NOTE: You should only call it on initial render to prevent any non CSS flash.
 * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.
 **/
var forceRenderStyles = ts.forceRenderStyles;
/**
 * Utility function to register an @font-face
 */
var fontFace = ts.fontFace;
/**
 * Allows use to use the stylesheet in a node.js environment
 */
var getStyles = ts.getStyles;
/**
 * Takes keyframes and returns a generated animationName
 */
var keyframes = ts.keyframes;
/**
 * Helps with testing. Reinitializes FreeStyle + raw
 */
var reinit = ts.reinit;
/**
 * Takes CSSProperties and return a generated className you can use on your component
 */
var style = ts.style;
/**
 * Takes an object where property names are ideal class names and property values are CSSProperties, and
 * returns an object where property names are the same ideal class names and the property values are
 * the actual generated class names using the ideal class name as the $debugName
 */
var stylesheet = ts.stylesheet;
/**
 * Creates a new instance of TypeStyle separate from the default instance.
 *
 * - Use this for creating a different typestyle instance for a shadow dom component.
 * - Use this if you don't want an auto tag generated and you just want to collect the CSS.
 *
 * NOTE: styles aren't shared between different instances.
 */
function createTypeStyle(target) {
    var instance = new __WEBPACK_IMPORTED_MODULE_0__internal_typestyle__["a" /* TypeStyle */]({ autoGenerateTag: false });
    if (target) {
        instance.setStylesTarget(target);
    }
    return instance;
}


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-line-length
var SharedWidgets_1 = __webpack_require__(46);
exports.setConfig = SharedWidgets_1.setConfig;
var TabStyles_1 = __webpack_require__(2);
exports.TabStyles = TabStyles_1.TabStyles;
var Declarative_1 = __webpack_require__(3);
exports.conditional = Declarative_1.conditional;
exports.testId = Declarative_1.testId;
exports.isAlphabeticChar = Declarative_1.isAlphabeticChar;
var DomUtil_1 = __webpack_require__(7);
exports.detectScrollbarWidth = DomUtil_1.detectScrollbarWidth;
exports.timeoutFocus = DomUtil_1.timeoutFocus;
var InteractiveDom_1 = __webpack_require__(8);
exports.InteractiveDomHoC = InteractiveDom_1.InteractiveDomHoC;
exports.InteractiveDomHoCDecorator = InteractiveDom_1.InteractiveDomHoCDecorator;
exports.InteractiveDomWrapper = InteractiveDom_1.InteractiveDomWrapper;
var Overlay_1 = __webpack_require__(10);
exports.VerticalOriginOption = Overlay_1.VerticalOriginOption;
exports.HorizontalOriginOption = Overlay_1.HorizontalOriginOption;
exports.Overlay = Overlay_1.Overlay;
var PointerEventAdapter_1 = __webpack_require__(49);
exports.PointerEventAdapterManager = PointerEventAdapter_1.PointerEventAdapterManager;
var PointerEvents_1 = __webpack_require__(13);
exports.PointerEventWrapper = PointerEvents_1.PointerEventWrapper;
exports.PointerEventHoC = PointerEvents_1.PointerEventHoC;
exports.PointerEventHoCDecorator = PointerEvents_1.PointerEventHoCDecorator;
var ReactHelpers_1 = __webpack_require__(27);
exports.mergeEventHandlers = ReactHelpers_1.mergeEventHandlers;
exports.convertToStatefulComponentClass = ReactHelpers_1.convertToStatefulComponentClass;
exports.getComponentName = ReactHelpers_1.getComponentName;
var StackingComponent_1 = __webpack_require__(19);
exports.StackingComponentHOC = StackingComponent_1.StackingComponentHOC;
exports.StackingComponentWrapper = StackingComponent_1.StackingComponentWrapper;
var StackingComponentHost_1 = __webpack_require__(90);
exports.HostedStackedElementContainer = StackingComponentHost_1.HostedStackedElementContainer;
var StyleSheet_1 = __webpack_require__(39);
exports.SingletonStyleSheet = StyleSheet_1.SingletonStyleSheet;
exports.StyleSheet = StyleSheet_1.StyleSheet;
var Unicode_1 = __webpack_require__(40);
exports.Unicode = Unicode_1.Unicode;
var UserInteraction_1 = __webpack_require__(41);
exports.isMouseEvent = UserInteraction_1.isMouseEvent;
exports.isTouchEvent = UserInteraction_1.isTouchEvent;
exports.getClientPosition = UserInteraction_1.getClientPosition;
var ButtonWidget_1 = __webpack_require__(14);
exports.ButtonType = ButtonWidget_1.ButtonType;
exports.ButtonWidget = ButtonWidget_1.ButtonWidget;
var AutoResetButtonWidget_1 = __webpack_require__(91);
exports.AutoResetButton = AutoResetButtonWidget_1.AutoResetButton;
var SelectableButtonGroupWidget_1 = __webpack_require__(92);
exports.SelectableButtonGroupSelectionBehavior = SelectableButtonGroupWidget_1.SelectableButtonGroupSelectionBehavior;
exports.SelectableButtonGroupWidget = SelectableButtonGroupWidget_1.SelectableButtonGroupWidget;
var ChromeTooltipWidget_1 = __webpack_require__(93);
exports.ChromeTooltipWidget = ChromeTooltipWidget_1.ChromeTooltipWidget;
var CheckBoxWidget_1 = __webpack_require__(55);
exports.CheckBoxWidget = CheckBoxWidget_1.CheckBoxWidget;
var CheckBoxWithLabelGroupWidget_1 = __webpack_require__(114);
exports.CheckBoxWithLabelGroupWidget = CheckBoxWithLabelGroupWidget_1.CheckBoxWithLabelGroupWidget;
var CheckBoxWithLabelWidget_1 = __webpack_require__(56);
exports.CheckBoxWithLabelWidget = CheckBoxWithLabelWidget_1.CheckBoxWithLabelWidget;
var DialogWidget_1 = __webpack_require__(30);
exports.DialogPositioningBehavior = DialogWidget_1.DialogPositioningBehavior;
exports.DialogType = DialogWidget_1.DialogType;
exports.DialogWidget = DialogWidget_1.DialogWidget;
var DialogFooterButtonsWidget_1 = __webpack_require__(124);
exports.DialogFooterButtonsWidget = DialogFooterButtonsWidget_1.DialogFooterButtonsWidget;
var DiscreteProgressBarWidget_1 = __webpack_require__(125);
exports.DiscreteProgressBarWidget_UNFINISHED = DiscreteProgressBarWidget_1.DiscreteProgressBarWidget_UNFINISHED;
var DomWidgets_1 = __webpack_require__(4);
exports.Block = DomWidgets_1.Block;
exports.InlineBlock = DomWidgets_1.InlineBlock;
exports.Img = DomWidgets_1.Img;
var DropdownTextWidget_1 = __webpack_require__(127);
exports.DropdownWidget = DropdownTextWidget_1.DropdownWidget;
var DropdownWidget_1 = __webpack_require__(43);
exports.DropdownType = DropdownWidget_1.DropdownType;
exports.GenericDropdownWidget = DropdownWidget_1.GenericDropdownWidget;
var DynamicThemeComponent_1 = __webpack_require__(5);
exports.DynamicThemeComponent = DynamicThemeComponent_1.DynamicThemeComponent;
var ExpandoWidget_1 = __webpack_require__(132);
exports.ExpandoDirection = ExpandoWidget_1.ExpandoDirection;
exports.ExpandoWidget = ExpandoWidget_1.ExpandoWidget;
var FlyoutListMenuTextWidget_1 = __webpack_require__(133);
exports.FlyoutListMenuWidget = FlyoutListMenuTextWidget_1.FlyoutListMenuWidget;
var FlyoutListMenuWidget_1 = __webpack_require__(31);
exports.GenericFlyoutListMenuWidget = FlyoutListMenuWidget_1.GenericFlyoutListMenuWidget;
var InputLabelWidget_1 = __webpack_require__(29);
exports.InputLabelWidget = InputLabelWidget_1.InputLabelWidget;
var IntegerStepperWidget_1 = __webpack_require__(134);
exports.IntegerStepperWidget = IntegerStepperWidget_1.IntegerStepperWidget;
var LineTextFieldWidget_1 = __webpack_require__(64);
exports.LineTextFieldWidget = LineTextFieldWidget_1.LineTextFieldWidget;
var TextFormatterWidget_1 = __webpack_require__(63);
exports.TextMenuDisplayFormatter = TextFormatterWidget_1.TextMenuDisplayFormatter;
var OutlineTextFieldWidget_1 = __webpack_require__(21);
exports.OutlineTextFieldWidget = OutlineTextFieldWidget_1.OutlineTextFieldWidget;
var RadioButtonWithLabelGroupWidget_1 = __webpack_require__(138);
exports.RadioLayoutType = RadioButtonWithLabelGroupWidget_1.RadioLayoutType;
exports.RadioButtonWithLabelGroupWidget = RadioButtonWithLabelGroupWidget_1.RadioButtonWithLabelGroupWidget;
var SearchFieldWidget_1 = __webpack_require__(44);
exports.SearchFieldWidget = SearchFieldWidget_1.SearchFieldWidget;
var TextFieldBase_1 = __webpack_require__(17);
exports.TextInputType = TextFieldBase_1.TextInputType;
var ToggleTextWidget_1 = __webpack_require__(141);
exports.ToggleTextWidget = ToggleTextWidget_1.ToggleTextWidget;
exports.SelectedToggle = ToggleTextWidget_1.SelectedToggle;
var Tooltip_1 = __webpack_require__(143);
exports.TooltipPosition = Tooltip_1.TooltipPosition;
exports.Tooltip = Tooltip_1.Tooltip;
var ColorGridWidget_1 = __webpack_require__(45);
exports.ColorGridWidget = ColorGridWidget_1.ColorGridWidget;
exports.ColorGridPreset = ColorGridWidget_1.ColorGridPreset;
exports.ColorGridType = ColorGridWidget_1.ColorGridType;
var ColorPickerWidget_1 = __webpack_require__(145);
exports.ColorPickerWidget = ColorPickerWidget_1.ColorPickerWidget;
var ActivitySpinnerWidget_1 = __webpack_require__(148);
exports.ActivitySpinnerSize = ActivitySpinnerWidget_1.ActivitySpinnerSize;
exports.ActivitySpinnerWidget = ActivitySpinnerWidget_1.ActivitySpinnerWidget;
var SliderWidget_1 = __webpack_require__(65);
exports.OpenEndedAt = SliderWidget_1.OpenEndedAt;
exports.SliderWidget = SliderWidget_1.SliderWidget;
var RangeSliderWidget_1 = __webpack_require__(155);
exports.RangeSliderWidget = RangeSliderWidget_1.RangeSliderWidget;
var TabsWidget_1 = __webpack_require__(67);
exports.TabActivationMode = TabsWidget_1.TabActivationMode;
exports.TabListAlignment = TabsWidget_1.TabListAlignment;
exports.TabsWidget = TabsWidget_1.TabsWidget;
var ToastWidget_1 = __webpack_require__(161);
exports.ToastType = ToastWidget_1.ToastType;
exports.ToastWidget = ToastWidget_1.ToastWidget;
var InteractiveLinkWidget_1 = __webpack_require__(70);
exports.InteractiveLinkWidget = InteractiveLinkWidget_1.InteractiveLinkWidget;
var DateInputField_1 = __webpack_require__(71);
exports.DateInputFieldType = DateInputField_1.DateInputFieldType;
exports.DateInputField = DateInputField_1.DateInputField;
var DropdownButton_1 = __webpack_require__(72);
exports.DropdownButton = DropdownButton_1.DropdownButton;
exports.DropdownButtonType = DropdownButton_1.DropdownButtonType;
var SingleSelectDropdown_1 = __webpack_require__(174);
exports.SingleSelectDropdown = SingleSelectDropdown_1.SingleSelectDropdown;
var List_1 = __webpack_require__(76);
exports.List = List_1.List;
var FilteringList_1 = __webpack_require__(78);
exports.FilteringList = FilteringList_1.FilteringList;
var LocallyFilteringList_1 = __webpack_require__(175);
exports.LocallyFilteringList = LocallyFilteringList_1.LocallyFilteringList;
var ListItemUtils_1 = __webpack_require__(25);
exports.findFocusableItemIndex = ListItemUtils_1.findFocusableItemIndex;
exports.findSelectableItemIndex = ListItemUtils_1.findSelectableItemIndex;
exports.findItemWithValue = ListItemUtils_1.findItemWithValue;
exports.isFocusableItem = ListItemUtils_1.isFocusableItem;
exports.isSelectableItem = ListItemUtils_1.isSelectableItem;
var FocusTrap_1 = __webpack_require__(75);
exports.FocusTrap = FocusTrap_1.FocusTrap;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var StackingRootConfig = /** @class */ (function () {
    function StackingRootConfig() {
    }
    StackingRootConfig.setDefaultRootContainerId = function (defaultStackingRootId) {
        StackingRootConfig.defaultStackingRootId = defaultStackingRootId;
    };
    StackingRootConfig.getDefaultRootContainer = function () {
        var defaultRootContainer = StackingRootConfig.defaultStackingRootId ?
            document.getElementById(StackingRootConfig.defaultStackingRootId) :
            document.body;
        if (!defaultRootContainer) {
            throw Error('Could not find stacking root.');
        }
        return defaultRootContainer;
    };
    return StackingRootConfig;
}());
exports.StackingRootConfig = StackingRootConfig;


/***/ }),
/* 38 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * StyleSheet allows javascript to add CSS to a stylesheet tag. This should be used when setting
 * css properties on DOM nodes through javascript does not work, e.g. animations and media queries.
 *
 * Note that the some methods take CSS props as string dictionaries. Write the props and vals as you
 * would in CSS, not as you would in javascript.
 *
 *   Right: { 'animation-duration': '1s' }
 *   Wrong: { animationDuration: 1000 }
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CssIdPrefix = 'shared-widgets';
var StyleSheet = /** @class */ (function () {
    function StyleSheet(sheetElementIdPostfix) {
        this.idCounter = 1;
        this.classNameLookup = {};
        this.rawSelectorLookup = {};
        // If running within Node, there is no DOM
        if (typeof document === 'undefined') {
            return;
        }
        this.initializeStyleSheet(sheetElementIdPostfix);
    }
    /**
     * Adds a raw selector to the style sheet with the given rules.
     */
    StyleSheet.prototype.addRawSelector = function (selector, cssLines) {
        var ruleBody = this.toRuleBody(cssLines);
        if (selector in this.rawSelectorLookup) {
            throw new Error(selector + " has already been defined.");
        }
        this.rawSelectorLookup[selector] = true;
        this.addRule(selector + " {" + ruleBody + "}");
    };
    /**
     * Adds a class for the given properties and values, returning the class name. It will create a class name if not
     * given one. If a class with the same body was previously created using this StyleSheet, returns the existing
     * class name. Will throw if the existing class name is different than the passed in class name.
     */
    StyleSheet.prototype.addClass = function (cssLines, classNameToUse) {
        var ruleBody = this.toRuleBody(cssLines);
        // If we already defined these exact rules, use the existing class name
        var existingClassName = this.classNameLookup[ruleBody];
        if (existingClassName) {
            if (classNameToUse && classNameToUse !== existingClassName) {
                throw new Error("Attempting to define css rule using class name '" + classNameToUse + "', but a class with the given\n           rule body already exists under class name '" + existingClassName + "'. Rule body: " + ruleBody + ".");
            }
            return existingClassName;
        }
        if (!classNameToUse) {
            classNameToUse = CssIdPrefix + "_" + this.idCounter++;
        }
        // Cache this so we can look it up latter
        this.classNameLookup[ruleBody] = classNameToUse;
        this.addRule("." + classNameToUse + " {" + ruleBody + "}");
        return classNameToUse;
    };
    /**
     * Add an animation, returning the class name for the animation. It will create a class name if not given one.
     * If an animation with the same definition (deep comparison) was previously created using this StyleSheet, returns
     * the existing class name. Will throw if the existing class name is different than the passed in class name.
     *
     * Warning: This is a leak at the moment. An animation may be temporary, but it will never get removed
     *
     * Warning: IE through 11 does not support CSS calc() inside animations. This means that if your animation
     * depends on width or height of a DOM node, you must know the pixel value of that width or height when
     * defining the animation.
     * https://connect.microsoft.com/IE/feedback/details/733978/css-animation-dont-accept-calc-as-property-values
     */
    StyleSheet.prototype.addAnimation = function (animationDefinition, classNameToUse) {
        var options = animationDefinition.options;
        var classNameLookupKey = JSON.stringify(animationDefinition);
        // If we already defined this exact animation, use the existing class name
        var existingClassName = this.classNameLookup[classNameLookupKey];
        if (existingClassName) {
            if (classNameToUse && classNameToUse !== existingClassName) {
                throw new Error("Attempting to define css animation using class name '" + classNameToUse + "', but a css rule with that\n           definition already exists under class name '" + existingClassName + "'. Definition: " + animationDefinition);
            }
            return existingClassName;
        }
        // Create the new animation
        var keyframeId = this.addKeyframes(animationDefinition.keyframes);
        var className = this.addClass({
            'animation-duration': options.durationMs / 1000 + "s",
            'animation-timing-function': options.timingFunction,
            'animation-iteration-count': "" + (options.count === Infinity ? 'infinite' : options.count),
            'animation-direction': options.direction,
            'animation-name': keyframeId,
        }, classNameToUse);
        this.classNameLookup[classNameLookupKey] = className;
        return className;
    };
    StyleSheet.prototype.dispose = function () {
        var styleNode = this.styleSheet.ownerNode;
        styleNode.parentElement.removeChild(styleNode);
    };
    /**
     * Add keyframe. Returns the generated keyframe id.
     */
    StyleSheet.prototype.addKeyframes = function (_a) {
        var _this = this;
        var fromCSSLines = _a.fromCSSLines, toCSSLines = _a.toCSSLines, tweenFrames = _a.tweenFrames;
        var keyframesId = CssIdPrefix + "_" + this.idCounter++;
        var keyframes = [
            { percent: 0, cssLines: fromCSSLines },
            { percent: 100, cssLines: toCSSLines }
        ].concat(tweenFrames);
        var keyframeStrings = keyframes.map(function (keyframe) {
            return keyframe ? keyframe.percent + "% { " + _this.toRuleBody(keyframe.cssLines) + " }" : '';
        });
        this.addRule("@keyframes " + keyframesId + " { " + keyframeStrings.join(' ') + "}");
        return keyframesId;
    };
    /**
     * Convert a string dict into the body of a css rule (no curlies included)
     */
    StyleSheet.prototype.toRuleBody = function (cssLines) {
        return Object.keys(cssLines).map(function (prop) {
            if (prop.toLowerCase() !== prop) {
                throw new Error("The CSS prop '" + prop + "' should be written kebab-case, not camelCase");
            }
            return prop + ": " + cssLines[prop] + ";";
        }).join('');
    };
    StyleSheet.prototype.addRule = function (rule) {
        try {
            this.styleSheet.insertRule(rule, this.styleSheet.cssRules.length);
        }
        catch (error) {
            throw new Error(error + ". Stylesheet injection of " + rule + " failed.  This browser may not support the given CSS rule or selector");
        }
    };
    StyleSheet.prototype.initializeStyleSheet = function (sheetElementIdSuffix) {
        var styleElementId = "tableau-widgets-appendedCustomStyle-" + sheetElementIdSuffix;
        // Create a new style node to be used by shared widgets
        var styleElement = document.createElement('style');
        styleElement.setAttribute('type', 'text/css');
        styleElement.id = styleElementId;
        // For older versions of Safari, it is necessary to add an empty text node in order for the style to be
        // actually added into the DOM.
        styleElement.appendChild(document.createTextNode(''));
        document.head.appendChild(styleElement);
        // Cache the CSSStyleSheet so we can add rules to it
        this.styleSheet = document.getElementById(styleElementId).sheet;
    };
    return StyleSheet;
}());
exports.StyleSheet = StyleSheet;
var SingletonStyleSheet = new StyleSheet('singleton');
exports.SingletonStyleSheet = SingletonStyleSheet;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Unicode = {
    NonBreakingSpace: '\u00a0'
};
exports.Unicode = Unicode;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-any
function isMouseEvent(event) {
    var e = event;
    return typeof e.clientX === 'number';
}
exports.isMouseEvent = isMouseEvent;
// tslint:disable-next-line:no-any
function isTouchEvent(event) {
    var e = event;
    return !!e.touches;
}
exports.isTouchEvent = isTouchEvent;
/**
 * Gets the client position from either the mouse event or the first touch from a touch event
 */
// tslint:disable-next-line:no-any
function getClientPosition(event) {
    if (isMouseEvent(event)) {
        return { x: event.clientX, y: event.clientY };
    }
    if (isTouchEvent(event)) {
        return { x: event.touches[0].clientX, y: event.touches[0].clientY };
    }
    throw Error('Could not identify event as either MouseEvent or TouchEvent');
}
exports.getClientPosition = getClientPosition;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
/**
 * Asserts that a given value is of type `never`, which is the type left after all other cases have been removed, see
 * https://www.typescriptlang.org/docs/handbook/advanced-types.html.
 * @param x - The value that should never occur.
 */
function assertNever(x) {
    throw new Error('Unexpected object: ' + x);
}
exports.assertNever = assertNever;
/**
 * Number of sides of a rectangle.
 */
exports.NumberOfSides = 4;
/**
 * Checks if a given side is horizontal, i.e., left or right.
 * @param side - The side to check.
 */
function isHorizontalSide(side) {
    return side === 'Left' || side === 'Right';
}
exports.isHorizontalSide = isHorizontalSide;
/**
 * Checks if a given side is vertical, i.e., top or bottom.
 * @param side - The side to check.
 */
function isVerticalSide(side) {
    return !isHorizontalSide(side);
}
exports.isVerticalSide = isVerticalSide;
/**
 * Returns the side next to a given side in the clockwise direction.
 * @param side - The previous side.
 */
function getNextSideClockwise(side) {
    switch (side) {
        case 'Top': return 'Right';
        case 'Right': return 'Bottom';
        case 'Bottom': return 'Left';
        case 'Left': return 'Top';
        default: return assertNever(side);
    }
}
exports.getNextSideClockwise = getNextSideClockwise;
/**
 * Returns the side next to a given side in the counter-clockwise direction.
 * @param side - The previous side.
 */
function getNextSideCounterClockwise(side) {
    switch (side) {
        case 'Top': return 'Left';
        case 'Left': return 'Bottom';
        case 'Bottom': return 'Right';
        case 'Right': return 'Top';
        default: return assertNever(side);
    }
}
exports.getNextSideCounterClockwise = getNextSideCounterClockwise;
/**
 * Interval of real numbers.
 */
var Interval = /** @class */ (function () {
    /**
     * Constructs a new interval.
     * @param min - Greatest lower bound of interval.
     * @param max - Least upper bound of interval.
     */
    function Interval(min, max) {
        this.min = min;
        this.max = max;
        if (max < min) {
            throw new Error('max less than min');
        }
    }
    Interval.prototype.equals = function (i) {
        return this.containsInterval(i) && i.containsInterval(this);
    };
    return Interval;
}());
exports.Interval = Interval;
/**
 * Closed interval of real numbers.
 */
var ClosedInterval = /** @class */ (function (_super) {
    tslib_1.__extends(ClosedInterval, _super);
    function ClosedInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClosedInterval.prototype.containsNumber = function (n) {
        return this.min <= n && n <= this.max;
    };
    ClosedInterval.prototype.containsInterval = function (i) {
        return this.min <= i.min && i.max <= this.max;
    };
    return ClosedInterval;
}(Interval));
exports.ClosedInterval = ClosedInterval;
/**
 * Open interval of real numbers.
 */
var OpenInterval = /** @class */ (function (_super) {
    tslib_1.__extends(OpenInterval, _super);
    function OpenInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenInterval.prototype.containsNumber = function (n) {
        return this.min < n && n < this.max;
    };
    OpenInterval.prototype.containsInterval = function (i) {
        var p = i.containsNumber(i.min) ? this.min < i.min : this.min <= i.min;
        var q = i.containsNumber(i.max) ? i.max < this.max : i.max <= this.max;
        return p && q;
    };
    return OpenInterval;
}(Interval));
exports.OpenInterval = OpenInterval;
/**
 * Rectangle in the plane.
 */
var Rectangle = /** @class */ (function () {
    function Rectangle() {
    }
    Rectangle.prototype.containsPoint = function (x, y) {
        return this.xInterval.containsNumber(x) && this.yInterval.containsNumber(y);
    };
    Rectangle.prototype.containsRectangle = function (r) {
        return this.xInterval.containsInterval(r.xInterval) && this.yInterval.containsInterval(r.yInterval);
    };
    Rectangle.prototype.equals = function (r) {
        return this.containsRectangle(r) && r.containsRectangle(this);
    };
    return Rectangle;
}());
exports.Rectangle = Rectangle;
/**
 * Closed rectangle in the plane.
 */
var ClosedRectangle = /** @class */ (function (_super) {
    tslib_1.__extends(ClosedRectangle, _super);
    function ClosedRectangle(minX, maxX, minY, maxY) {
        var _this = _super.call(this) || this;
        _this.xInterval = new ClosedInterval(minX, maxX);
        _this.yInterval = new ClosedInterval(minY, maxY);
        return _this;
    }
    return ClosedRectangle;
}(Rectangle));
exports.ClosedRectangle = ClosedRectangle;
/**
 * Checks if a given outer rectangle contains a given inner rectangle.
 * @param clientRect1 - The outer rectangle.
 * @param clientRect2 - The inner rectangle.
 */
function containsClientRect(clientRect1, clientRect2) {
    var rect1 = clientRectToClosedRectangle(clientRect1);
    var rect2 = clientRectToClosedRectangle(clientRect2);
    return rect1.containsRectangle(rect2);
}
exports.containsClientRect = containsClientRect;
function clientRectToClosedRectangle(_a) {
    var left = _a.left, right = _a.right, top = _a.top, bottom = _a.bottom;
    return new ClosedRectangle(left, right, top, bottom);
}


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var react_1 = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var Declarative_1 = __webpack_require__(3);
var FindIndex_1 = __webpack_require__(15);
var Declarative_2 = __webpack_require__(3);
var TextEllipsis_1 = __webpack_require__(16);
var PreventUserSelect_1 = __webpack_require__(12);
var TabStyles_1 = __webpack_require__(2);
var InteractiveDom_1 = __webpack_require__(8);
var DomWidgets_1 = __webpack_require__(4);
var Icons_1 = __webpack_require__(6);
var FlyoutListMenuWidget_1 = __webpack_require__(31);
var Overlay_1 = __webpack_require__(10);
var DynamicThemeComponent_1 = __webpack_require__(5);
var DomUtil_1 = __webpack_require__(7);
var Sizing = TabStyles_1.TabStyles.Sizing, Colors = TabStyles_1.TabStyles.Colors, Spacing = TabStyles_1.TabStyles.Spacing, Typography = TabStyles_1.TabStyles.Typography;
var DropdownType;
(function (DropdownType) {
    DropdownType[DropdownType["Outline"] = 0] = "Outline";
    DropdownType[DropdownType["Line"] = 1] = "Line";
    DropdownType[DropdownType["Text"] = 2] = "Text";
})(DropdownType || (DropdownType = {}));
exports.DropdownType = DropdownType;
function getLabelStyle(options) {
    return {
        display: 'block',
        fontSize: Typography.Sizing.Default,
        fontWeight: 'normal',
        color: options.secondaryTextColors.normal,
        lineHeight: "19px",
    };
}
function getOutlineDropdownStyle(options) {
    return {
        container: {},
        button: {
            base: tslib_1.__assign({}, TextEllipsis_1.TextEllipsis, PreventUserSelect_1.PreventUserSelect, { backgroundColor: Colors.Transparent, borderColor: options.primaryLineColors.normal, borderRadius: Sizing.BorderRadius, borderStyle: 'solid', borderWidth: Sizing.BorderWidth, color: options.primaryTextColors.normal, fontSize: Typography.Sizing.Default, fontWeight: 'normal', height: Sizing.RowHeight, outline: 'none', overflow: 'hidden', paddingLeft: Spacing.DefaultSpace, paddingRight: Spacing.LargeSpace + Spacing.DefaultSpace }),
            interactive: {
                hover: {
                    borderColor: options.primaryLineColors.hover
                },
                active: {
                    borderColor: options.primaryLineColors.active
                },
                focus: {
                    borderColor: options.primaryLineColors.focus
                },
                disabled: {
                    borderColor: options.primaryLineColors.disabled,
                    color: options.primaryTextColors.disabled
                }
            }
        },
        value: {
            lineHeight: options.innerRowHeight + 'px'
        },
        iconContainer: {
            position: 'absolute',
            right: 0,
            height: options.innerRowHeight,
            borderWidth: Sizing.BorderWidth,
            borderColor: options.secondaryLineColor,
            borderStyle: 'none none none solid'
        },
        icon: {
            marginTop: (options.innerRowHeight - Icons_1.OutlineDropdownArrowIcon.height) / 2
        },
        label: getLabelStyle(options)
    };
}
function getLineDropdownStyle(options) {
    return {
        container: {},
        button: {
            base: tslib_1.__assign({}, TextEllipsis_1.TextEllipsis, PreventUserSelect_1.PreventUserSelect, { backgroundColor: Colors.Transparent, borderBottomColor: options.primaryLineColors.normal, borderBottomStyle: 'solid', borderBottomWidth: Sizing.BorderWidth, borderLeft: 'none', borderRight: 'none', borderTop: 'none', color: options.primaryTextColors.normal, fontSize: Typography.Sizing.Default, fontWeight: 'normal', height: Sizing.RowHeight, outline: 'none', overflow: 'hidden', paddingRight: Spacing.LargeSpace + Spacing.DefaultSpace }),
            interactive: {
                hover: {
                    borderBottomColor: options.primaryLineColors.hover
                },
                active: {
                    borderBottomColor: options.primaryLineColors.active
                },
                focus: {
                    borderBottomColor: options.primaryLineColors.focus
                },
                disabled: {
                    borderBottomColor: options.primaryLineColors.disabled,
                    color: options.primaryTextColors.disabled
                }
            }
        },
        value: {
            top: Sizing.BorderWidth,
            lineHeight: options.innerRowHeight + 'px',
        },
        iconContainer: {
            position: 'absolute',
            right: 0,
            border: 'none'
        },
        icon: {
            marginTop: (options.innerRowHeight - Icons_1.LineAndTextDropdownArrowIcon.height) / 2
        },
        label: getLabelStyle(options),
    };
}
function getTextDropdownStyle(options) {
    return {
        container: {
            display: 'inline-block',
            width: 'auto'
        },
        button: {
            base: tslib_1.__assign({}, PreventUserSelect_1.PreventUserSelect, { backgroundColor: Colors.Transparent, border: 'none', color: options.primaryTextColors.normal, cursor: 'pointer', display: 'inline-block', fontSize: Typography.Sizing.Default, fontWeight: 'normal', height: Sizing.RowHeight, lineHeight: Sizing.RowHeight + 'px', overflow: 'hidden', paddingRight: Icons_1.LineAndTextDropdownArrowIcon.width }),
            interactive: {
                active: {
                    color: options.primaryTextColors.active
                },
                disabled: {
                    color: options.primaryTextColors.disabled,
                    cursor: 'default',
                }
            }
        },
        value: {
            lineHeight: 'inherit'
        },
        iconContainer: {
            position: 'absolute'
        },
        icon: {
            marginTop: (Sizing.RowHeight - Icons_1.LineAndTextDropdownArrowIcon.height) / 2
        },
        label: getLabelStyle(options),
    };
}
var getStyles = function () {
    var innerRowHeight = Sizing.RowHeight - (Sizing.BorderWidth * 2);
    var normalPrimaryLineColors = {
        normal: Colors.L6,
        hover: Colors.L8,
        active: Colors.L9,
        focus: Colors.GoLight,
        disabled: Colors.L9Disabled
    };
    var normalSecondaryLineColor = Colors.L3;
    var normalPrimaryTextColors = {
        normal: Typography.Color.Primary,
        disabled: Typography.Color.Disabled,
        active: Colors.Black,
    };
    var normalSecondaryTextColors = {
        normal: Typography.Color.Secondary,
        disabled: Typography.Color.Disabled,
        active: Colors.Black,
    };
    var darkBackgroundPrimaryLineColors = {
        normal: Colors.WhiteTransparentLine,
        hover: Colors.WhiteTransparentLineHover,
        active: Colors.White,
        focus: Colors.White,
        disabled: Colors.WhiteDisabled
    };
    var darkBackgroundSecondaryLineColor = Colors.WhiteTransparentLine;
    var darkBackgroundPrimaryTextColors = {
        normal: Typography.Color.InvertedPrimary,
        disabled: Typography.Color.InvertedDisabled,
        active: Colors.White,
    };
    var darkBackgroundSecondaryTextColors = {
        normal: Typography.Color.InvertedSecondary,
        disabled: Typography.Color.InvertedDisabled,
        active: Colors.White,
    };
    var normalOptions = {
        innerRowHeight: innerRowHeight,
        primaryLineColors: normalPrimaryLineColors,
        secondaryLineColor: normalSecondaryLineColor,
        primaryTextColors: normalPrimaryTextColors,
        secondaryTextColors: normalSecondaryTextColors
    };
    var darkBackgroundOptions = {
        innerRowHeight: innerRowHeight,
        primaryLineColors: darkBackgroundPrimaryLineColors,
        secondaryLineColor: darkBackgroundSecondaryLineColor,
        primaryTextColors: darkBackgroundPrimaryTextColors,
        secondaryTextColors: darkBackgroundSecondaryTextColors
    };
    var OutlineDropdownStyle = getOutlineDropdownStyle(normalOptions);
    var OutlineDropdownDarkBackgroundStyle = getOutlineDropdownStyle(darkBackgroundOptions);
    var LineDropdownStyle = getLineDropdownStyle(normalOptions);
    var LineDropdownDarkBackgroundStyle = getLineDropdownStyle(darkBackgroundOptions);
    var TextDropdownStyle = getTextDropdownStyle(normalOptions);
    var TextDropdownDarkBackgroundStyle = getTextDropdownStyle(darkBackgroundOptions);
    return {
        OutlineDropdownStyle: OutlineDropdownStyle,
        OutlineDropdownDarkBackgroundStyle: OutlineDropdownDarkBackgroundStyle,
        LineDropdownStyle: LineDropdownStyle,
        LineDropdownDarkBackgroundStyle: LineDropdownDarkBackgroundStyle,
        TextDropdownStyle: TextDropdownStyle,
        TextDropdownDarkBackgroundStyle: TextDropdownDarkBackgroundStyle
    };
};
function getDropdownStylesByType(dropdownType, onDarkBackground) {
    var styles = getStyles();
    switch (dropdownType) {
        case DropdownType.Outline:
            return onDarkBackground ? styles.OutlineDropdownDarkBackgroundStyle : styles.OutlineDropdownStyle;
        case DropdownType.Line:
            return onDarkBackground ? styles.LineDropdownDarkBackgroundStyle : styles.LineDropdownStyle;
        case DropdownType.Text:
            return onDarkBackground ? styles.TextDropdownDarkBackgroundStyle : styles.TextDropdownStyle;
        default:
            throw new Error("DropdownWidget attempted to render invalid DropdownType: " + dropdownType);
    }
}
exports.getDropdownStylesByType = getDropdownStylesByType;
var DropdownButtonWidget = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownButtonWidget, _super);
    function DropdownButtonWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DropdownButtonWidget.prototype.componentDidUpdate = function () {
        // We lose focus on spacebar/enter keydown, so the active state needs to be manually set
        if (this.props.dropdownOpen && this.state.active) {
            this.setState({ active: false });
        }
    };
    DropdownButtonWidget.prototype.getDropdownIcon = function () {
        var iconState = {
            active: this.state.active || this.props.dropdownOpen,
            disabled: this.props.disabled,
            hover: this.state.hover,
            onDarkBackground: this.props.onDarkBackground,
        };
        return this.props.dropdownType === DropdownType.Outline ? Icons_1.OutlineDropdownArrowIcon.icon(iconState)
            : Icons_1.LineAndTextDropdownArrowIcon.icon(iconState);
    };
    DropdownButtonWidget.prototype.render = function () {
        var dropdownStyles = getDropdownStylesByType(this.props.dropdownType, this.props.onDarkBackground);
        var buttonStyles = tslib_1.__assign({}, dropdownStyles.button.base, Declarative_2.conditional(this.props.dropdownOpen, dropdownStyles.button.interactive.active));
        var blockProps = {
            'aria-atomic': true,
            'aria-expanded': this.props.dropdownOpen,
            'aria-haspopup': 'listbox',
            'aria-labelledby': this.props.labelledById,
            'aria-live': (this.state.focus ? 'assertive' : 'off'),
            'aria-owns': this.props.dropdownId,
            'aria-relevant': 'text',
            'data-tb-test-id': this.props.testId,
            disabled: this.props.disabled,
            onKeyDown: this.props.onKeyDown,
            role: 'combobox',
            style: buttonStyles,
            tabIndex: this.props.disabled ? -1 : 0,
            title: this.props.title,
        };
        var spanProps = {
            style: dropdownStyles.value,
            title: Declarative_2.conditional(typeof this.props.children === 'string', this.props.children)
        };
        return react_1.createElement(DomWidgets_1.Block, blockProps, react_1.createElement('span', spanProps, this.props.children), react_1.createElement(DomWidgets_1.InlineBlock, { style: dropdownStyles.iconContainer }, react_1.createElement(DomWidgets_1.Img, {
            style: dropdownStyles.icon,
            src: this.getDropdownIcon()
        })));
    };
    DropdownButtonWidget = tslib_1.__decorate([
        InteractiveDom_1.InteractiveDomHoCDecorator
    ], DropdownButtonWidget);
    return DropdownButtonWidget;
}(React.Component));
exports.DropdownButtonWidget = DropdownButtonWidget;
/**
 * @deprecated use `DropdownButton` or `SingleSelectDropdown`
 */
// tslint:disable-next-line:class-name
var GenericDropdownWidget = /** @class */ (function (_super) {
    tslib_1.__extends(GenericDropdownWidget, _super);
    function GenericDropdownWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.labelId = DomUtil_1.generateId();
        _this.dropdownId = DomUtil_1.generateId();
        _this.toggleMenu = function () {
            if (_this.props.disabled) {
                return;
            }
            _this.setState(function (prevState, props) {
                var isNowOpen = !prevState.isOpen;
                if (isNowOpen) {
                    if (props.onOpen) {
                        props.onOpen();
                    }
                }
                else {
                    if (props.onClose) {
                        props.onClose();
                    }
                }
                return { isOpen: isNowOpen };
            });
        };
        _this.handleSelect = function (value) {
            _this.props.onSelect(value, _this.state.isOpen);
            _this.onRequestClose();
        };
        // Handle key presses as defined by ARIA https://www.w3.org/TR/wai-aria-practices/#menu
        _this.handleKeyDown = function (e) {
            if (_this.props.disabled || _this.state.isOpen || e.ctrlKey || e.altKey || e.metaKey) {
                return;
            }
            var selectedIndex = _this.getIndexOfSelectedItem();
            if (Declarative_2.isAlphabeticChar(e.key)) {
                var nextIndexOfFirstLetter = FindIndex_1.findIndex(_this.enabledItems, function (item) {
                    return !!item.keyboardAccessibleValue &&
                        item.keyboardAccessibleValue.charAt(0).toUpperCase() === e.key.toUpperCase();
                }, selectedIndex + 1, _this);
                if (nextIndexOfFirstLetter > -1) {
                    _this.props.onSelect(_this.enabledItems[nextIndexOfFirstLetter].value, _this.state.isOpen);
                }
            }
            else {
                var value = null;
                switch (e.key) {
                    case ' ':
                    case 'Enter':
                        _this.toggleMenu();
                        break;
                    case 'ArrowUp':
                        if (selectedIndex > 0) {
                            value = _this.enabledItems[selectedIndex - 1].value;
                        }
                        break;
                    case 'ArrowDown':
                        if (selectedIndex < _this.enabledItems.length - 1) {
                            value = _this.enabledItems[selectedIndex + 1].value;
                        }
                        break;
                    case 'Home':
                        value = _this.enabledItems[0].value;
                        break;
                    case 'End':
                        value = _this.enabledItems[_this.enabledItems.length - 1].value;
                        break;
                    case 'Escape':
                        // swallow ESC events that plausibly originate from focus being returned to the button after the popup closed
                        if (e.repeat) {
                            break;
                        }
                        else {
                            return;
                        }
                    default:
                        // Do not prevent default or stopPropagation on non-handled key presses
                        return;
                }
                if (value) {
                    _this.props.onSelect(value, _this.state.isOpen);
                }
                e.preventDefault();
                e.stopPropagation();
            }
        };
        _this.onRequestClose = function () {
            _this.toggleMenu();
        };
        _this.setButtonElement = function (ref) {
            _this.buttonEl = ReactDOM.findDOMNode(ref);
        };
        _this.getAnchorClientRect = function () {
            return _this.buttonEl ? _this.buttonEl.getBoundingClientRect() : undefined;
        };
        if (props.menuItemInfos.filter(function (item) { return !!item.menuItemInfos; }).length > 0) {
            throw Error('Dropdowns may not contain submenus');
        }
        _this.setEnabledItems(_this.props);
        _this.state = {
            isOpen: false
        };
        return _this;
    }
    GenericDropdownWidget.prototype.componentWillReceiveProps = function (nextProps) {
        this.setEnabledItems(nextProps);
    };
    GenericDropdownWidget.prototype.getMenuWidth = function () {
        var potentialWidth = undefined;
        if (this.props.flyoutStyle) {
            var flyoutWidth = this.props.flyoutStyle.width;
            if (flyoutWidth === 'auto') { // special-case: want dynamically-sized flyout but it will evaluate to 0 when parsing as int
                return flyoutWidth;
            }
            potentialWidth = parseInt(flyoutWidth, 10);
        }
        else if (this.props.containerStyle) {
            potentialWidth = parseInt(this.props.containerStyle.width, 10);
        }
        if (this.buttonEl) {
            var boundingWidth = this.buttonEl.getBoundingClientRect().width;
            potentialWidth = Math.max(boundingWidth, potentialWidth || 0);
        }
        return potentialWidth;
    };
    GenericDropdownWidget.prototype.getIndexOfSelectedItem = function () {
        var _this = this;
        return FindIndex_1.findIndex(this.enabledItems, function (item) { return item.value === _this.props.selectedValue; }, 0, this);
    };
    GenericDropdownWidget.prototype.setEnabledItems = function (props) {
        if (props.menuItemInfos) {
            this.enabledItems = props.menuItemInfos.filter(function (item) { return !item.isDivider && !item.disabled && !item.isUnselectable; });
        }
        else {
            this.enabledItems = [];
        }
    };
    GenericDropdownWidget.prototype.getButtonDisplayValue = function () {
        var selectedItemIndex = this.getIndexOfSelectedItem();
        return selectedItemIndex > -1 ? (this.enabledItems[selectedItemIndex].textForDropdownButton || '') : (this.props.placeholder || '');
    };
    GenericDropdownWidget.prototype.render = function () {
        var _this = this;
        // tslint:disable:deprecation
        if (!!this.props.__UNSUPPORTED__searchDefaultText) {
            console.warn('__UNSUPPORTED__searchDefaultText is an unsupported/deprecated prop and should not be used');
        }
        if (!!this.props.__UNSUPPORTED__showSearchField) {
            console.warn('__UNSUPPORTED__showSearchField is an unsupported/deprecated prop and should not be used');
        }
        // tslint:enable:deprecation
        var dropdownStyles = getDropdownStylesByType(this.props.dropdownType, this.props.onDarkBackground);
        var shouldShowLabel = !!this.props.label;
        var containerStyle = tslib_1.__assign({}, this.props.containerStyle, dropdownStyles.container);
        var flyoutWidth = this.getMenuWidth();
        var flyoutStyle = tslib_1.__assign({}, this.props.flyoutStyle, { width: flyoutWidth });
        var focusIndex = (this.state.isOpen && this.props.selectedValue) ?
            FindIndex_1.findIndex(this.props.menuItemInfos, function (item) { return item.value === _this.props.selectedValue; }) :
            0;
        return (react_1.createElement(DomWidgets_1.Block, {
            style: containerStyle,
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'Dropdown')
        }, Declarative_2.conditional(shouldShowLabel, react_1.createElement('label', {
            style: dropdownStyles.label,
            id: this.labelId
        }, this.props.label)), react_1.createElement(DomWidgets_1.Block, {}, react_1.createElement(DropdownButtonWidget, {
            disabled: this.props.disabled,
            dropdownId: this.dropdownId,
            dropdownOpen: this.state.isOpen,
            dropdownType: this.props.dropdownType,
            onDarkBackground: this.props.onDarkBackground,
            interactiveStyles: dropdownStyles.button.interactive,
            onKeyDown: this.handleKeyDown,
            pointerClick: this.toggleMenu,
            labelledById: Declarative_2.conditional(shouldShowLabel, this.labelId),
            ref: this.setButtonElement,
            testId: Declarative_1.testId(this.props.testId, 'DropdownButton'),
            title: this.props.title
        }, this.getButtonDisplayValue())), Declarative_2.conditional(this.state.isOpen, react_1.createElement(FlyoutListMenuWidget_1.GenericFlyoutListMenuWidget, {
            toggleEl: this.buttonEl,
            getAnchorClientRect: this.getAnchorClientRect,
            stackingRootId: this.props.stackingRootId,
            shouldReturnFocusToToggleEl: this.props.shouldReturnFocusOnClose,
            anchorOrigin: {
                vertical: Overlay_1.VerticalOriginOption.bottom,
                horizontal: Overlay_1.HorizontalOriginOption.left
            },
            allowAutoPosition: true,
            scrollingRootId: this.props.scrollingRootId,
            handleScrollOnScrollingRoot: this.toggleMenu,
            onSelect: this.handleSelect,
            id: this.dropdownId,
            __INTERNAL__focusIndex: focusIndex,
            role: 'listbox',
            maxHeight: this.props.maxHeight,
            menuStyle: flyoutStyle,
            menuItemInfos: this.props.menuItemInfos,
            requestCloseAll: this.onRequestClose,
            zIndex: this.props.zIndex,
            testId: this.props.testId,
            // tslint:disable:deprecation
            __UNSUPPORTED__showSearchField: this.props.__UNSUPPORTED__showSearchField,
            __UNSUPPORTED__searchDefaultText: this.props.__UNSUPPORTED__searchDefaultText,
        }))));
    };
    GenericDropdownWidget.defaultProps = {
        shouldReturnFocusOnClose: true
    };
    return GenericDropdownWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.GenericDropdownWidget = GenericDropdownWidget;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Icons_1 = __webpack_require__(6);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var DomWidgets_1 = __webpack_require__(4);
var OutlineTextFieldWidget_1 = __webpack_require__(21);
exports.TextInputType = OutlineTextFieldWidget_1.TextInputType;
var TextFieldBase_1 = __webpack_require__(17);
var TextFieldWithClearIcon_1 = __webpack_require__(61);
var Sizing = TabStyles_1.TabStyles.Sizing, Spacing = TabStyles_1.TabStyles.Spacing;
var getStyles = function () {
    return {
        iconPadding: {
            paddingRight: Icons_1.SearchIcon.width + (Spacing.DefaultSpace * 2)
        },
        icon: {
            position: 'absolute',
            right: 0,
            paddingRight: Spacing.DefaultSpace,
            paddingLeft: Spacing.DefaultSpace,
            marginTop: (Sizing.RowHeight - Icons_1.SearchIcon.height) / 2
        },
        outlineContainer: {
            width: '100%'
        }
    };
};
var SearchFieldWidget = /** @class */ (function (_super) {
    tslib_1.__extends(SearchFieldWidget, _super);
    function SearchFieldWidget(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Need to track the hover of the cancel button to update the styling of the input
         */
        _this.handleCancelHover = function (hover) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ cancelHover: hover });
        };
        _this.state = tslib_1.__assign({}, _this.state, { cancelHover: false });
        return _this;
    }
    /**
     * If the cancel button is being hovered, then the new text prop is not null then the cancel button disappears
     * without the cancelHover being set to false.  This assures that it is set to false.
     */
    SearchFieldWidget.prototype.componentWillReceiveProps = function (nextProps) {
        if (!nextProps.text) {
            this.setState({ cancelHover: false });
        }
    };
    /**
     * If the icon is not disabled, and the input/cancel button are being hovered then show the active image
     * Else show the non-active image.  If there is text the image is the cancel svg else it's the search icon
     */
    SearchFieldWidget.prototype.getIcon = function () {
        // tslint:disable-next-line:max-line-length
        var active = !this.props.disabled && (this.state.cancelHover || this.state.inputActive || this.state.inputFocus || this.state.inputHover);
        return Icons_1.SearchIcon.icon({ active: active, onDarkBackground: this.props.onDarkBackground });
    };
    SearchFieldWidget.prototype.render = function () {
        var _a = this.props, children = _a.children, containerStyle = _a.containerStyle, handleCancelSearch = _a.handleCancelSearch, onDarkBackground = _a.onDarkBackground, textFieldInputProps = tslib_1.__rest(_a, ["children", "containerStyle", "handleCancelSearch", "onDarkBackground"]);
        var showPlaceholder = this.isPlaceholderShowing();
        var styles = getStyles();
        var textOutlineStyles = OutlineTextFieldWidget_1.getTextOutlineStyles({ onDarkBackground: onDarkBackground });
        var placeholderStyle = tslib_1.__assign({}, textOutlineStyles.placeholder.base, this.props.placeholderStyle, (this.props.disabled && textOutlineStyles.placeholder.disabled), { maxWidth: "calc(100% - " + styles.iconPadding.paddingRight + "px)" });
        var inputStyle = tslib_1.__assign({}, textOutlineStyles.input.base, styles.iconPadding, (this.state.cancelHover && textOutlineStyles.input.interactive.hover), this.props.inputStyle);
        var inputProps = tslib_1.__assign({}, textFieldInputProps, { 'aria-label': this.props['aria-label'] || this.props.placeholder, handleActive: this.handleInputActive, handleFocus: this.handleInputFocus, handleHover: this.handleInputHover, inputStyle: inputStyle, interactiveStyles: textOutlineStyles.input.interactive });
        var clearIconButtonProps = {
            disabled: this.props.disabled,
            handleHover: this.handleCancelHover,
            onDarkBackground: onDarkBackground,
            pointerClick: handleCancelSearch,
            testId: this.props.testId,
        };
        return (React.createElement(DomWidgets_1.Block, { style: containerStyle },
            !this.props.text &&
                React.createElement(DomWidgets_1.Img, { src: this.getIcon(), style: styles.icon, "data-tb-test-id": Declarative_1.testId(this.props.testId, 'SearchIcon') }),
            showPlaceholder &&
                React.createElement("label", { "data-tb-test-id": Declarative_1.testId(this.props.testId, 'Placeholder'), style: placeholderStyle }, this.props.placeholder),
            React.createElement(TextFieldWithClearIcon_1.TextFieldWithClearIcon, { handleClearText: handleCancelSearch, textFieldInputProps: inputProps, textFieldClearButtonProps: clearIconButtonProps })));
    };
    return SearchFieldWidget;
}(TextFieldBase_1.TextFieldBase));
exports.SearchFieldWidget = SearchFieldWidget;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DomWidgets_1 = __webpack_require__(4);
var Declarative_1 = __webpack_require__(3);
var react_1 = __webpack_require__(0);
var InteractiveDom_1 = __webpack_require__(8);
var TabStyles_1 = __webpack_require__(2);
var OutlineActiveBorder = { border: '1px solid white' };
var ColorSwatchSize = 15;
var getColorSwatchWidgetStyle = function (props) {
    return {
        base: {
            width: props.size,
            height: props.size,
            backgroundColor: props.color.toLowerCase(),
            boxSizing: 'border-box'
        },
        interactive: {
            hover: tslib_1.__assign({}, OutlineActiveBorder, { cursor: props.disabled ? 'normal' : 'pointer' }),
            active: OutlineActiveBorder
        }
    };
};
var ColorSwatchWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ColorSwatchWidget, _super);
    function ColorSwatchWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.handleHover = function (hover) {
            _this.setState({ hover: hover });
        };
        _this.handleActive = function (active) {
            _this.setState({ active: active });
        };
        _this.handleClick = function () {
            if (!_this.props.disabled) {
                _this.props.handleClick(_this.props.color.toLowerCase());
            }
        };
        _this.state = { hover: false, active: false };
        return _this;
    }
    ColorSwatchWidget.prototype.render = function () {
        var styles = getColorSwatchWidgetStyle(this.props);
        var interactiveProps = {
            interactiveStyles: styles.interactive,
            handleHover: this.handleHover,
            handleActive: this.handleActive,
            pointerClick: this.handleClick,
            disabled: this.props.disabled
        };
        return (react_1.createElement(InteractiveDom_1.InteractiveDomWrapper, interactiveProps, react_1.createElement('div', {
            style: tslib_1.__assign({}, styles.base, Declarative_1.conditional(this.props.selected, OutlineActiveBorder)),
            'aria-selected': this.props.selected,
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'ColorSwatch', this.props.color.toLowerCase())
        }, Declarative_1.conditional(!this.props.disabled, react_1.createElement('div', { style: this.getInnerBorderStyle() })))));
    };
    ColorSwatchWidget.prototype.getInnerBorderStyle = function () {
        var showInnerBorder = this.props.selected || this.state.hover || this.state.active;
        var innerBorderColor = (showInnerBorder && TabStyles_1.TabStyles.Colors ? TabStyles_1.TabStyles.Colors.F9 : 'transparent');
        return { borderWidth: 1, borderStyle: 'solid', borderColor: innerBorderColor, width: '100%', height: '100%', boxSizing: 'border-box' };
    };
    return ColorSwatchWidget;
}(React.Component));
exports.ColorSwatchWidget = ColorSwatchWidget;
var ColorGridType;
(function (ColorGridType) {
    ColorGridType[ColorGridType["Default"] = 0] = "Default";
    ColorGridType[ColorGridType["Minimal"] = 1] = "Minimal";
})(ColorGridType || (ColorGridType = {}));
exports.ColorGridType = ColorGridType;
var ColorGridPreset;
(function (ColorGridPreset) {
    ColorGridPreset[ColorGridPreset["Dark"] = 0] = "Dark";
    ColorGridPreset[ColorGridPreset["Light"] = 1] = "Light";
    ColorGridPreset[ColorGridPreset["MaestroFlowColors"] = 2] = "MaestroFlowColors";
})(ColorGridPreset || (ColorGridPreset = {}));
exports.ColorGridPreset = ColorGridPreset;
var ColorGridWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ColorGridWidget, _super);
    function ColorGridWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.handleSwatchClicked = function (color) {
            if (!_this.props.disabled) {
                _this.props.handleSwatchClicked(color.toLowerCase());
            }
        };
        _this.getColorSwatchGridBuilder = function (gridType) {
            switch (gridType) {
                default:
                case ColorGridType.Default:
                    return _this.buildDefaultColorSwatchGrid();
                case ColorGridType.Minimal:
                    return _this.buildMinimalColorSwatchGrid();
            }
        };
        _this.preset = _this.props.colorsPreset || ColorGridPreset.Dark;
        return _this;
    }
    ColorGridWidget.prototype.render = function () {
        if (this.props.colorsPreset && this.props.colorsPreset !== this.preset) {
            this.preset = this.props.colorsPreset;
        }
        return react_1.createElement(DomWidgets_1.Block, { 'data-tb-test-id': Declarative_1.testId(this.props.testId, 'ColorGrid'), tabIndex: 0 }, react_1.createElement(InteractiveDom_1.InteractiveDomWrapper, {
            interactiveStyles: {
                focus: { outline: 'none' }
            }
        }, this.getColorSwatchGridBuilder(this.props.gridType)));
    };
    ColorGridWidget.prototype.getColorPreset = function () {
        switch (this.preset) {
            default:
            case ColorGridPreset.Dark:
                return TabStyles_1.TabStyles.ColorPickerPresets.Dark;
            case ColorGridPreset.Light:
                return TabStyles_1.TabStyles.ColorPickerPresets.Light;
            case ColorGridPreset.MaestroFlowColors:
                return TabStyles_1.TabStyles.ColorPickerPresets.MaestroFlowColors;
        }
    };
    ColorGridWidget.prototype.buildMinimalColorSwatchGrid = function () {
        this.colorsPerColumn = 4;
        var columns = [];
        var colors = this.getColorPreset();
        var currentColumn = [];
        var currentGroup = [];
        var colorsInColumn = 0;
        for (var i = 0; i < colors.length; i++) {
            var color = colors[i].toLowerCase();
            var colorSwatchProps = {
                color: color,
                handleClick: this.handleSwatchClicked,
                key: 'swatch-' + color,
                size: ColorSwatchSize,
                selected: this.props.selectedColor === color,
                disabled: this.props.disabled,
                testId: this.props.testId
            };
            currentGroup.push(react_1.createElement(ColorSwatchWidget, colorSwatchProps));
            colorsInColumn += 1;
            // when we reached the max number of colors in a column or we are about the add a divider, then we need to flush the group and render
            // as a div with gray borders
            if (colorsInColumn === this.colorsPerColumn) {
                currentColumn.push(react_1.createElement('div', { style: { border: '1px solid ' + TabStyles_1.TabStyles.Colors.L6 }, key: 'group-' + i }, currentGroup));
                if (colorsInColumn === this.colorsPerColumn) {
                    columns.push(react_1.createElement('div', { key: 'column-' + i, style: { float: 'left', marginTop: 0, marginRight: 0, marginBottom: 0,
                            marginLeft: (columns.length ? ColorGridWidget.groupSpacingPx : 0) } }, currentColumn));
                    currentColumn = [];
                    colorsInColumn = 0;
                }
                currentGroup = [];
            }
        }
        return react_1.createElement('div', { style: { display: 'flex' }, tabIndex: 0 }, columns);
    };
    ColorGridWidget.prototype.buildDefaultColorSwatchGrid = function () {
        this.colorsPerColumn = 6;
        var columns = [];
        var colors = this.getColorPreset();
        var currentColumn = [];
        var currentGroup = [];
        var colorsInColumn = 0;
        for (var i = 0; i < colors.length; i++) {
            var color = colors[i].toLowerCase();
            var colorSwatchProps = {
                color: color,
                handleClick: this.handleSwatchClicked,
                key: 'swatch-' + color,
                size: ColorSwatchSize,
                selected: this.props.selectedColor === color,
                disabled: this.props.disabled,
                testId: this.props.testId
            };
            currentGroup.push(react_1.createElement(ColorSwatchWidget, colorSwatchProps));
            colorsInColumn += 1;
            // for the first 2 columns (gray colors) we will have a divider after the first color swatch, after that the divider is after the 3rd
            var addDivider = colorsInColumn === 1 && columns.length < 2 || colorsInColumn === 3 && columns.length >= 2;
            // when we reached the max number of colors in a column or we are about the add a divider, then we need to flush the group and render
            // as a div with gray borders
            if (colorsInColumn === this.colorsPerColumn || addDivider) {
                currentColumn.push(react_1.createElement('div', { style: { border: '1px solid ' + TabStyles_1.TabStyles.Colors.L6 }, key: 'group-' + i }, currentGroup));
                if (addDivider) {
                    currentColumn.push(react_1.createElement('div', { style: { width: ColorSwatchSize, height: ColorGridWidget.dividerHeightPx },
                        key: 'divider-' + i }));
                }
                if (colorsInColumn === this.colorsPerColumn) {
                    columns.push(react_1.createElement('div', { key: 'column-' + i, style: { float: 'left', marginTop: 0, marginRight: 0, marginBottom: 0,
                            marginLeft: (columns.length ? ColorGridWidget.groupSpacingPx : 0) } }, currentColumn));
                    currentColumn = [];
                    colorsInColumn = 0;
                }
                currentGroup = [];
            }
        }
        return react_1.createElement('div', { style: { display: 'flex' }, tabIndex: 0 }, columns);
    };
    ColorGridWidget.groupSpacingPx = 4; // got this number from tableau server
    ColorGridWidget.dividerHeightPx = 5;
    return ColorGridWidget;
}(React.Component));
exports.ColorGridWidget = ColorGridWidget;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:deprecation
var TabStyles_1 = __webpack_require__(2);
var ClickBusting_1 = __webpack_require__(26);
var ScrollingRoot_1 = __webpack_require__(47);
var StackingRoot_1 = __webpack_require__(37);
var StyleMediaQueries_1 = __webpack_require__(79);
var WidgetManager_1 = __webpack_require__(48);
var setStyleMediaQueries = function (config) {
    if (!config.styleMediaQueries) {
        return;
    }
    StyleMediaQueries_1.StyleMediaQueryManager.setMediaStyleQueries(config.styleMediaQueries);
};
var setTabStyles = function (config) {
    if (!config.styles) {
        return;
    }
    TabStyles_1.overrideTabStyles(config.styles);
    WidgetManager_1.WidgetManager.rerenderWidgets();
};
var setStackingRoot = function (config) {
    if (!config.defaultStackingRootId) {
        return;
    }
    StackingRoot_1.StackingRootConfig.setDefaultRootContainerId(config.defaultStackingRootId);
};
var setScrollingRoot = function (config) {
    if (!config.defaultScrollingRootId) {
        return;
    }
    ScrollingRoot_1.ScrollingRootConfig.setDefaultRootContainerId(config.defaultScrollingRootId);
};
var setClickBusting = function (config) {
    if (!config.suppressClickBustingClassName) {
        return;
    }
    ClickBusting_1.ClickBustingConfig.suppressionClassName = config.suppressClickBustingClassName;
};
var setConfig = function (config) {
    setTabStyles(config);
    setStackingRoot(config);
    setScrollingRoot(config);
    setStyleMediaQueries(config);
    setClickBusting(config);
};
exports.setConfig = setConfig;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ScrollingRootConfig = /** @class */ (function () {
    function ScrollingRootConfig() {
    }
    ScrollingRootConfig.setDefaultRootContainerId = function (defaultScrollingRootId) {
        ScrollingRootConfig.defaultScrollingRootId = defaultScrollingRootId;
    };
    ScrollingRootConfig.getDefaultRootContainer = function () {
        var defaultRootContainer = ScrollingRootConfig.defaultScrollingRootId ?
            document.getElementById(ScrollingRootConfig.defaultScrollingRootId) :
            document.body;
        if (!defaultRootContainer) {
            throw Error('Could not find scrolling root with the id scrollingRootId.');
        }
        return defaultRootContainer;
    };
    return ScrollingRootConfig;
}());
exports.ScrollingRootConfig = ScrollingRootConfig;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Maintains references to all widgets and the ability to rerender them.  This is useful
 * to update the styling of the widgets if TabStyles is modified.  Some UI libraries like
 * Material UI use React's context to pass along the Style, however not all our clients
 * use a complete React tree and there may be complications with PureRenderMixins in that
 * updating the context may not update the component.
 */
var WidgetManager = /** @class */ (function () {
    function WidgetManager() {
    }
    WidgetManager.registerWidget = function (widget) {
        WidgetManager.widgets.push(widget);
    };
    WidgetManager.unregisterWidget = function (widget) {
        WidgetManager.widgets = WidgetManager.widgets.filter(function (w) { return w !== widget; });
    };
    WidgetManager.rerenderWidgets = function () {
        for (var i = 0; i < WidgetManager.widgets.length; i++) {
            WidgetManager.widgets[i].forceUpdate();
        }
    };
    WidgetManager.widgets = [];
    return WidgetManager;
}());
exports.WidgetManager = WidgetManager;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The default adapter does a direct mapping from pointer events to mouse event handlers. We can modify this to make
 * shared widgets more touch-friendly out of the box.
 */
var DefaultPointerEventAdapter = /** @class */ (function () {
    function DefaultPointerEventAdapter() {
    }
    DefaultPointerEventAdapter.prototype.getHtmlAttributes = function (props) {
        var domEventProps = {
            onDoubleClick: props.pointerDoubleClick ?
                function (event) { if (!props.disabled) {
                    props.pointerDoubleClick(event);
                } } : undefined,
            onMouseDown: props.pointerDown ?
                function (event) { if (!props.disabled) {
                    props.pointerDown(event);
                } } : undefined,
            onMouseUp: props.pointerUp ?
                function (event) { if (!props.disabled) {
                    props.pointerUp(event);
                } } : undefined,
            onClick: props.pointerClick ?
                function (event) { if (!props.disabled) {
                    props.pointerClick(event);
                } } : undefined
        };
        return domEventProps;
    };
    return DefaultPointerEventAdapter;
}());
var PointerEventAdapterManager = /** @class */ (function () {
    function PointerEventAdapterManager() {
    }
    /**
     *  Clients with custom pointer event systems should override the default factory
     */
    PointerEventAdapterManager.adapterFactory = function () { return new DefaultPointerEventAdapter(); };
    return PointerEventAdapterManager;
}());
exports.PointerEventAdapterManager = PointerEventAdapterManager;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var debounce = __webpack_require__(81),
    isObject = __webpack_require__(38);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var ButtonWidget_1 = __webpack_require__(14);
var PreventUserSelect_1 = __webpack_require__(12);
var TabStyles_1 = __webpack_require__(2);
var Colors = TabStyles_1.TabStyles.Colors, Opacity = TabStyles_1.TabStyles.Opacity, Sizing = TabStyles_1.TabStyles.Sizing, Spacing = TabStyles_1.TabStyles.Spacing, Typography = TabStyles_1.TabStyles.Typography;
function getHorizontalPadding() { return Sizing.RowHeight; }
function getDefaultSpacing() { return Spacing.DefaultSpace; }
exports.getDefaultSpacing = getDefaultSpacing;
function getDefaultDisabledStyle() {
    return {
        backgroundColor: Colors.F7Disabled,
        borderColor: Colors.Transparent,
        color: Typography.Color.Disabled,
    };
}
function getBaseButtonStyle() {
    return tslib_1.__assign({ fontSize: Typography.Sizing.Default, fontWeight: 'normal', color: Typography.Color.Primary, display: 'inline-block', paddingLeft: getHorizontalPadding(), paddingRight: getHorizontalPadding(), paddingTop: 0, paddingBottom: 0, position: 'relative', textAlign: 'center', borderStyle: 'solid', borderWidth: Sizing.BorderWidth, borderRadius: Sizing.BorderRadius, height: Sizing.RowHeight, lineHeight: (Sizing.RowHeight - Sizing.BorderWidth * 2) + 'px', minWidth: Sizing.ButtonMinWidth, boxSizing: 'border-box', outline: 'none', whiteSpace: 'nowrap' }, PreventUserSelect_1.PreventUserSelect);
}
function getAttentionButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { backgroundColor: Colors.AttentionLight, borderColor: Colors.AttentionLight, color: Typography.Color.InvertedPrimary }),
        interactive: {
            hover: {
                backgroundColor: Colors.AttentionLight,
                borderColor: Colors.L8,
                color: Typography.Color.InvertedPrimary,
            },
            focus: {
                backgroundColor: Colors.AttentionLight,
                borderColor: Colors.L8,
                color: Typography.Color.InvertedPrimary,
            },
            active: {
                backgroundColor: Colors.AttentionDark,
                borderColor: Colors.AttentionDark,
                color: Typography.Color.InvertedPrimary,
            },
            disabled: getDefaultDisabledStyle(),
        }
    };
}
function getGreyButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { backgroundColor: Colors.F5, borderColor: Colors.L5, color: Typography.Color.Primary }),
        interactive: {
            hover: {
                backgroundColor: Colors.F5,
                borderColor: Colors.L8,
                color: Typography.Color.Primary,
            },
            focus: {
                backgroundColor: Colors.F5,
                borderColor: Colors.L8,
                color: Typography.Color.Primary,
            },
            active: {
                backgroundColor: Colors.F8,
                borderColor: Colors.L8,
                color: Typography.Color.InvertedPrimary,
            },
            disabled: getDefaultDisabledStyle(),
        }
    };
}
function getGoButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { backgroundColor: Colors.GoLight, borderColor: Colors.GoLight, color: Typography.Color.InvertedPrimary }),
        interactive: {
            hover: {
                backgroundColor: Colors.GoLight,
                borderColor: Colors.L8,
                color: Typography.Color.InvertedPrimary,
            },
            focus: {
                backgroundColor: Colors.GoLight,
                borderColor: Colors.L8,
                color: Typography.Color.InvertedPrimary,
            },
            active: {
                backgroundColor: Colors.GoDark,
                borderColor: Colors.GoDark,
                color: Typography.Color.InvertedPrimary,
            },
            disabled: getDefaultDisabledStyle(),
        }
    };
}
function getOutlineButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.L6, color: Typography.Color.PrimaryMedium }),
        interactive: {
            hover: {
                backgroundColor: Colors.Transparent,
                borderColor: Colors.L8,
                color: Typography.Color.Primary,
            },
            focus: {
                backgroundColor: Colors.Transparent,
                borderColor: Colors.L8,
                color: Typography.Color.PrimaryMedium,
            },
            active: {
                backgroundColor: Colors.F2,
                borderColor: Colors.L9,
                color: Typography.Color.Primary,
            },
            disabled: tslib_1.__assign({}, getDefaultDisabledStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.L9Disabled, color: Typography.Color.Disabled })
        }
    };
}
function getLightOutlineButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.L6, color: Typography.Color.InvertedPrimary }),
        interactive: {
            hover: {
                backgroundColor: Colors.Transparent,
                borderColor: Colors.White,
                color: Typography.Color.InvertedPrimary,
            },
            focus: {
                backgroundColor: Colors.Transparent,
                borderColor: Colors.White,
                color: Typography.Color.InvertedPrimary,
            },
            active: {
                backgroundColor: Colors.WhiteTransparent,
                borderColor: Colors.White,
                color: Typography.Color.InvertedPrimary,
            },
            disabled: tslib_1.__assign({}, getDefaultDisabledStyle(), { borderColor: Colors.WhiteDisabled, backgroundColor: Colors.Transparent, color: Typography.Color.InvertedDisabled })
        }
    };
}
function getOutlineGoButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.GoLight, color: Typography.Color.PrimaryDark, borderWidth: Sizing.ButtonBorderWidth, lineHeight: (Sizing.RowHeight - Sizing.ButtonBorderWidth * 2) + 'px' }),
        interactive: {
            hover: {
                backgroundColor: Colors.Transparent,
                borderColor: Colors.GoDark,
                color: Colors.Black,
            },
            focus: {
                backgroundColor: Colors.Transparent,
                borderColor: Colors.L8,
                color: Colors.Black,
            },
            active: {
                backgroundColor: Colors.F2,
                borderColor: Colors.GoDark,
                color: Colors.Black,
            },
            disabled: tslib_1.__assign({}, getDefaultDisabledStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.GoDarkDisabled, color: Typography.Color.Disabled })
        }
    };
}
function getOutlineAttentionButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.AttentionLight, color: Typography.Color.PrimaryDark, borderWidth: Sizing.ButtonBorderWidth, lineHeight: (Sizing.RowHeight - Sizing.ButtonBorderWidth * 2) + 'px' }),
        interactive: {
            hover: {
                backgroundColor: Colors.Transparent,
                borderColor: Colors.AttentionDark,
                color: Colors.Black,
            },
            focus: {
                backgroundColor: Colors.Transparent,
                borderColor: Colors.L8,
                color: Colors.Black,
            },
            active: {
                backgroundColor: Colors.F2,
                borderColor: Colors.AttentionDark,
                color: Colors.Black,
            },
            disabled: tslib_1.__assign({}, getDefaultDisabledStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.AttentionDarkDisabled, color: Typography.Color.Disabled })
        }
    };
}
function getTextButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { fontWeight: 'bold', backgroundColor: Colors.Transparent, borderColor: Colors.Transparent, color: Colors.GoLight }),
        interactive: {
            hover: {
                backgroundColor: Colors.F2,
                borderColor: Colors.F2,
                color: Colors.GoLight,
            },
            focus: {
                backgroundColor: Colors.F2,
                borderColor: Colors.F2,
                color: Colors.GoLight,
            },
            active: {
                backgroundColor: Colors.F2,
                borderColor: Colors.F2,
                color: Colors.GoDark,
            },
            disabled: tslib_1.__assign({}, getDefaultDisabledStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.Transparent, color: Colors.GoDarkDisabled })
        }
    };
}
function getDarkTextButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.Transparent, color: Typography.Color.Primary }),
        interactive: {
            hover: {
                backgroundColor: Colors.F2,
                borderColor: Colors.F2,
                color: Typography.Color.Primary,
            },
            focus: {
                backgroundColor: Colors.F2,
                borderColor: Colors.F2,
                color: Typography.Color.Primary,
            },
            active: {
                backgroundColor: Colors.F2_5,
                borderColor: Colors.F2_5,
                color: Colors.Black,
            },
            disabled: tslib_1.__assign({}, getDefaultDisabledStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.Transparent, color: Typography.Color.Disabled })
        }
    };
}
function getDarkBoldTextButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseButtonStyle(), { fontWeight: 'bold', backgroundColor: Colors.Transparent, borderColor: Colors.Transparent, color: Typography.Color.Primary }),
        interactive: {
            hover: {
                backgroundColor: Colors.F2,
                borderColor: Colors.F2,
                color: Typography.Color.Primary,
            },
            focus: {
                backgroundColor: Colors.F2,
                borderColor: Colors.F2,
                color: Typography.Color.Primary,
            },
            active: {
                backgroundColor: Colors.F2_5,
                borderColor: Colors.F2_5,
                color: Colors.Black,
            },
            disabled: tslib_1.__assign({}, getDefaultDisabledStyle(), { backgroundColor: Colors.Transparent, borderColor: Colors.Transparent, color: Typography.Color.Disabled })
        }
    };
}
function getBaseIconButtonStyle() {
    return tslib_1.__assign({ alignItems: 'center', color: Typography.Color.PrimaryLight, display: 'inline-flex', fontSize: Typography.Sizing.Default, fontWeight: 'normal', justifyContent: 'center', minHeight: 20, minWidth: 20, outline: 'none' }, PreventUserSelect_1.PreventUserSelect);
}
function getIconButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseIconButtonStyle(), { backgroundColor: Colors.Transparent, whiteSpace: 'nowrap' }),
        interactive: {
            hover: {
                backgroundColor: Colors.F3,
                color: Typography.Color.Primary,
            },
            focus: {
                backgroundColor: Colors.F3,
                color: Typography.Color.Primary,
            },
            active: {
                backgroundColor: Colors.F5,
                color: Typography.Color.Primary,
            },
            disabled: {
                color: Typography.Color.Disabled,
                opacity: Opacity.Disabled,
            }
        }
    };
}
function getIconOutlineButtonStyle() {
    return {
        base: tslib_1.__assign({}, getBaseIconButtonStyle()),
        interactive: {
            disabled: {
                opacity: Opacity.Disabled,
            }
        }
    };
}
function getButtonStyle(buttonType) {
    var buttonStyle;
    switch (buttonType) {
        case ButtonWidget_1.ButtonType.Attention:
            buttonStyle = getAttentionButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.Grey:
            buttonStyle = getGreyButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.Go:
            buttonStyle = getGoButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.Outline:
            buttonStyle = getOutlineButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.LightOutline:
            buttonStyle = getLightOutlineButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.OutlineGo:
            buttonStyle = getOutlineGoButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.OutlineAttention:
            buttonStyle = getOutlineAttentionButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.Text:
            buttonStyle = getTextButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.DarkText:
            buttonStyle = getDarkTextButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.DarkBoldText:
            buttonStyle = getDarkBoldTextButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.Icon:
            buttonStyle = getIconButtonStyle();
            break;
        case ButtonWidget_1.ButtonType.IconOutline:
            buttonStyle = getIconOutlineButtonStyle();
            break;
        default:
            throw new Error("Attempted to retrieve style for unsupported ButtonType: " + buttonType);
    }
    return buttonStyle;
}
exports.getButtonStyle = getButtonStyle;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var InteractiveDom_1 = __webpack_require__(8);
var DynamicThemeComponent_1 = __webpack_require__(5);
var ButtonBase = /** @class */ (function (_super) {
    tslib_1.__extends(ButtonBase, _super);
    function ButtonBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isKeyboardPressed = false;
        _this.handleActive = function (active) {
            if (_this.props.onActive) {
                _this.props.onActive(active);
            }
        };
        _this.handleFocus = function (focus) {
            if (_this.props.onFocus) {
                _this.props.onFocus(focus);
            }
        };
        _this.handleHover = function (hover) {
            if (_this.props.onHover) {
                _this.props.onHover(hover);
            }
        };
        _this.handleClick = function (e) {
            if (_this.props.disabled || !_this.props.handleClick) {
                return;
            }
            _this.props.handleClick(e);
        };
        _this.handleKeyUp = function (e) {
            if (_this.props.disabled || _this.props.disableTabAccessibility) {
                return;
            }
            if (_this.isKeyboardPressed && (e.key === ' ' || e.key === 'Enter')) {
                if (_this.props.handleClick) {
                    _this.props.handleClick(e);
                }
                _this.isKeyboardPressed = false;
            }
            else if (_this.props.onKeyUp) {
                _this.props.onKeyUp(e);
            }
        };
        _this.handleKeyDown = function (e) {
            if (_this.props.disabled || _this.props.disableTabAccessibility) {
                return;
            }
            if (e.key === ' ' || e.key === 'Enter') {
                _this.isKeyboardPressed = true;
                e.preventDefault(); // Prevent default page-scrolling behavior
            }
            if (_this.props.onKeyDown) {
                _this.props.onKeyDown(e);
            }
        };
        _this.handleBlur = function () {
            _this.isKeyboardPressed = false;
            if (_this.props.onBlur) {
                _this.props.onBlur();
            }
        };
        return _this;
    }
    ButtonBase.prototype.render = function () {
        var _a;
        var interactiveDomProps = {
            disabled: this.props.disabled,
            handleActive: this.handleActive,
            handleFocus: this.handleFocus,
            handleHover: this.handleHover,
            interactiveStyles: this.props.interactiveStyle,
            pointerClick: this.handleClick
        };
        return (React.createElement(InteractiveDom_1.InteractiveDomWrapper, tslib_1.__assign({}, interactiveDomProps),
            React.createElement("div", tslib_1.__assign({}, (_a = {}, _a[this.props.role === 'radio' ? 'aria-checked' : 'aria-pressed'] = this.props.selected, _a), { "aria-disabled": this.props.disabled, "data-tb-test-id": this.props.testId, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, onKeyUp: this.handleKeyUp, role: this.props.role, style: this.props.style, tabIndex: this.props.disabled ? undefined : (this.props.disableTabAccessibility ? -1 : 0), title: this.props.title }), this.props.children)));
    };
    ButtonBase.defaultProps = {
        role: 'button'
    };
    return ButtonBase;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.ButtonBase = ButtonBase;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var TabStyles_1 = __webpack_require__(2);
exports.Padding = 8;
exports.BorderWidth = TabStyles_1.TabStyles.Sizing.BorderWidth;
exports.OuterMaxWidth = 250;
exports.OuterMaxHeight = 250;
exports.InnerMaxWidth = exports.OuterMaxWidth - 2 * (exports.Padding + exports.BorderWidth);
exports.InnerMaxHeight = exports.OuterMaxHeight - 2 * (exports.Padding + exports.BorderWidth);
var OuterStyle = {
    flexGrow: 0,
    padding: exports.Padding,
    borderWidth: exports.BorderWidth,
    borderStyle: 'solid',
    borderColor: TabStyles_1.TabStyles.Colors ? TabStyles_1.TabStyles.Colors.L5 : null,
    borderRadius: TabStyles_1.TabStyles.Sizing ? TabStyles_1.TabStyles.Sizing.BorderRadius : null,
    boxShadow: TabStyles_1.TabStyles.Shadow.Standard,
    backgroundColor: TabStyles_1.TabStyles.Colors ? TabStyles_1.TabStyles.Colors.White : null
};
// NOTE inner div handles content overflow so that scroll bars appear within padding of outer div
var InnerStyle = {
    maxWidth: exports.InnerMaxWidth,
    maxHeight: exports.InnerMaxHeight,
    overflowY: 'auto'
};
function ChromeTooltipBox(props) {
    return (React.createElement("div", { style: OuterStyle },
        React.createElement("div", { style: getInnerStyle(props.width) }, props.content)));
}
exports.ChromeTooltipBox = ChromeTooltipBox;
function getInnerStyle(width) {
    return tslib_1.__assign({}, InnerStyle, { width: width });
}


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(0);
var TabStyles_1 = __webpack_require__(2);
var ChromeTooltipUtility_1 = __webpack_require__(42);
exports.Height = 12;
exports.Width = 6;
var Stroke = TabStyles_1.TabStyles.Colors.L5;
var Fill = TabStyles_1.TabStyles.Colors.White;
var StrokeWidth = TabStyles_1.TabStyles.Sizing.BorderWidth;
function ChromeTooltipArrow(_a) {
    var direction = _a.direction, style = _a.style;
    var points = getPoints(direction).map(function (_a) {
        var x = _a.x, y = _a.y;
        return x + ',' + y;
    }).join(' ');
    return (React.createElement("svg", { xmlns: 'http://www.w3.org/2000/svg', style: style, height: getHeight(direction), width: getWidth(direction) },
        React.createElement("polyline", { points: points, fill: Fill, stroke: Stroke, strokeWidth: StrokeWidth })));
}
exports.ChromeTooltipArrow = ChromeTooltipArrow;
function getHeight(direction) {
    return direction === 'Left' || direction === 'Right' ? exports.Height : exports.Width;
}
function getWidth(direction) {
    return direction === 'Left' || direction === 'Right' ? exports.Width : exports.Height;
}
function getPoints(direction) {
    switch (direction) {
        case 'Up': return [{ x: 0, y: exports.Width }, { x: exports.Height / 2, y: 0 }, { x: exports.Height, y: exports.Width }];
        case 'Down': return [{ x: 0, y: 0 }, { x: exports.Height / 2, y: exports.Width }, { x: exports.Height, y: 0 }];
        case 'Left': return [{ x: exports.Width, y: 0 }, { x: 0, y: exports.Height / 2 }, { x: exports.Width, y: exports.Height }];
        case 'Right': return [{ x: 0, y: 0 }, { x: exports.Width, y: exports.Height / 2 }, { x: 0, y: exports.Height }];
        default: return ChromeTooltipUtility_1.assertNever(direction);
    }
}


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var DomWidgets_1 = __webpack_require__(4);
var InteractiveDom_1 = __webpack_require__(8);
var Icons_1 = __webpack_require__(6);
var DynamicThemeComponent_1 = __webpack_require__(5);
var TabStyles_1 = __webpack_require__(2);
var getStyles = function () {
    return {
        baseDiv: {
            // TFSID: 589174, with flexboxes in safari 9.x if the sibling is 100% then safari can cause the box to shrink in size.
            // Adding flex-shrink: 0 prevents that from happening.
            flexShrink: 0,
            height: Icons_1.CheckBoxIcon.height,
            marginLeft: TabStyles_1.TabStyles.Spacing.DefaultSpace - Icons_1.CheckBoxIcon.padding,
            marginRight: TabStyles_1.TabStyles.Spacing.DefaultSpace - Icons_1.CheckBoxIcon.padding,
            minWidth: Icons_1.CheckBoxIcon.width,
            verticalAlign: 'middle',
            width: Icons_1.CheckBoxIcon.width,
        },
        checkbox: {
            cursor: 'default',
            height: Icons_1.CheckBoxIcon.height,
            margin: 0,
            opacity: 0,
            // Defect 612637 override user agent default `img { vertical-align: baseline }` style
            verticalAlign: 'top',
            width: Icons_1.CheckBoxIcon.width,
        },
        fakeCheckBox: {
            height: Icons_1.CheckBoxIcon.height,
            position: 'absolute',
            // Defect 612637 override user agent default `img { vertical-align: baseline }` style
            verticalAlign: 'top',
            width: Icons_1.CheckBoxIcon.width,
        },
        noLeftMargin: {
            marginLeft: -Icons_1.CheckBoxIcon.padding,
        },
    };
};
function getCheckBoxIcon(props, state) {
    var iconState = {
        checked: props.checked,
        disabled: props.disabled,
        focus: state.focus,
        hover: props.hover || state.hover,
    };
    if (props.indeterminate) {
        return Icons_1.CheckBoxMixedIcon.icon(iconState);
    }
    else {
        return Icons_1.CheckBoxIcon.icon(iconState);
    }
}
var CheckBoxWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CheckBoxWidget, _super);
    function CheckBoxWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {};
        _this.handleFormChange = function (event) {
            // IE bug fix: https://github.com/facebook/react/issues/4457
            if (_this.props.disabled || !_this.props.handleChange) {
                return;
            }
            _this.props.handleChange(event.target.checked);
        };
        _this.handleInputRef = function (ref) {
            _this.inputElement = ref;
            _this.setInputElementsIndeterminateProp();
        };
        _this.handleActive = function (active) {
            _this.setState({ active: active });
        };
        _this.handleFocus = function (focus) {
            _this.setState({ focus: !_this.state.active && focus }); // only show focus indicator for keyboard focus
        };
        _this.handleHover = function (hover) {
            _this.setState({ hover: hover });
        };
        return _this;
    }
    CheckBoxWidget.prototype.componentDidUpdate = function () {
        this.setInputElementsIndeterminateProp();
    };
    CheckBoxWidget.prototype.setInputElementsIndeterminateProp = function () {
        if (this.inputElement) {
            this.inputElement.indeterminate = this.props.indeterminate;
        }
    };
    CheckBoxWidget.prototype.render = function () {
        var styles = getStyles();
        var inputProps = {
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'CheckBox'),
            checked: this.props.checked,
            disabled: this.props.disabled,
            id: this.props.id,
            name: this.props.name,
            onChange: this.handleFormChange,
            ref: this.handleInputRef,
            style: styles.checkbox,
            type: 'checkbox',
        };
        return (React.createElement(InteractiveDom_1.InteractiveDomWrapper, { handleActive: this.handleActive, handleFocus: this.handleFocus, handleHover: this.handleHover },
            React.createElement(DomWidgets_1.InlineBlock, { style: tslib_1.__assign({}, styles.baseDiv, Declarative_1.conditional(this.props.removeLeftMargin, styles.noLeftMargin)) },
                React.createElement(DomWidgets_1.Img, { src: getCheckBoxIcon(this.props, this.state), style: styles.fakeCheckBox }),
                React.createElement("input", tslib_1.__assign({}, inputProps)))));
    };
    return CheckBoxWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.CheckBoxWidget = CheckBoxWidget;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var CheckBoxWidget_1 = __webpack_require__(55);
var DomWidgets_1 = __webpack_require__(4);
var ClickBusting_1 = __webpack_require__(26);
var DynamicThemeComponent_1 = __webpack_require__(5);
var InteractiveDom_1 = __webpack_require__(8);
var InputLabelWidget_1 = __webpack_require__(29);
var TabStyles_1 = __webpack_require__(2);
var getStyles = function () {
    return {
        label: {
            display: 'flex',
            minHeight: TabStyles_1.TabStyles.Sizing.ListRowHeight,
        },
        text: {
            overflow: 'hidden',
            paddingTop: '1px',
            textOverflow: 'ellipsis',
            width: '100%',
        },
    };
};
var CheckBoxWithLabelWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CheckBoxWithLabelWidget, _super);
    function CheckBoxWithLabelWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckBoxWithLabelWidget.prototype.render = function () {
        var styles = getStyles();
        return (React.createElement(DomWidgets_1.Block, { className: ClickBusting_1.ClickBustingConfig.suppressionClassName, style: this.props.containerStyle },
            React.createElement(InputLabelWidget_1.InputLabelWidget, { disabled: this.props.disabled, style: styles.label, testId: this.props.testId },
                React.createElement(CheckBoxWidget_1.CheckBoxWidget, tslib_1.__assign({}, this.props, { hover: this.state.hover })),
                React.createElement(DomWidgets_1.InlineBlock, { "aria-label": this.props.label, style: styles.text }, this.props.label))));
    };
    CheckBoxWithLabelWidget = tslib_1.__decorate([
        InteractiveDom_1.InteractiveDomHoCDecorator
    ], CheckBoxWithLabelWidget);
    return CheckBoxWithLabelWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.CheckBoxWithLabelWidget = CheckBoxWithLabelWidget;


/***/ }),
/* 57 */
/***/ (function(module, exports) {

var candidateSelectors = [
  'input',
  'select',
  'textarea',
  'a[href]',
  'button',
  '[tabindex]',
  'audio[controls]',
  'video[controls]',
  '[contenteditable]:not([contenteditable="false"])',
];
var candidateSelector = candidateSelectors.join(',');

var matches = typeof Element === 'undefined'
  ? function () {}
  : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

function tabbable(el, options) {
  options = options || {};

  var elementDocument = el.ownerDocument || el;
  var regularTabbables = [];
  var orderedTabbables = [];

  var untouchabilityChecker = new UntouchabilityChecker(elementDocument);
  var candidates = el.querySelectorAll(candidateSelector);

  if (options.includeContainer) {
    if (matches.call(el, candidateSelector)) {
      candidates = Array.prototype.slice.apply(candidates);
      candidates.unshift(el);
    }
  }

  var i, candidate, candidateTabindex;
  for (i = 0; i < candidates.length; i++) {
    candidate = candidates[i];

    if (!isNodeMatchingSelectorTabbable(candidate, untouchabilityChecker)) continue;

    candidateTabindex = getTabindex(candidate);
    if (candidateTabindex === 0) {
      regularTabbables.push(candidate);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        node: candidate,
      });
    }
  }

  var tabbableNodes = orderedTabbables
    .sort(sortOrderedTabbables)
    .map(function(a) { return a.node })
    .concat(regularTabbables);

  return tabbableNodes;
}

tabbable.isTabbable = isTabbable;
tabbable.isFocusable = isFocusable;

function isNodeMatchingSelectorTabbable(node, untouchabilityChecker) {
  if (
    !isNodeMatchingSelectorFocusable(node, untouchabilityChecker)
    || isNonTabbableRadio(node)
    || getTabindex(node) < 0
  ) {
    return false;
  }
  return true;
}

function isTabbable(node, untouchabilityChecker) {
  if (!node) throw new Error('No node provided');
  if (matches.call(node, candidateSelector) === false) return false;
  return isNodeMatchingSelectorTabbable(node, untouchabilityChecker);
}

function isNodeMatchingSelectorFocusable(node, untouchabilityChecker) {
  untouchabilityChecker = untouchabilityChecker || new UntouchabilityChecker(node.ownerDocument || node);
  if (
    node.disabled
    || isHiddenInput(node)
    || untouchabilityChecker.isUntouchable(node)
  ) {
    return false;
  }
  return true;
}

var focusableCandidateSelector = candidateSelectors.concat('iframe').join(',');
function isFocusable(node, untouchabilityChecker) {
  if (!node) throw new Error('No node provided');
  if (matches.call(node, focusableCandidateSelector) === false) return false;
  return isNodeMatchingSelectorFocusable(node, untouchabilityChecker);
}

function getTabindex(node) {
  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
  if (!isNaN(tabindexAttr)) return tabindexAttr;
  // Browsers do not return `tabIndex` correctly for contentEditable nodes;
  // so if they don't have a tabindex attribute specifically set, assume it's 0.
  if (isContentEditable(node)) return 0;
  return node.tabIndex;
}

function sortOrderedTabbables(a, b) {
  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
}

// Array.prototype.find not available in IE.
function find(list, predicate) {
  for (var i = 0, length = list.length; i < length; i++) {
    if (predicate(list[i])) return list[i];
  }
}

function isContentEditable(node) {
  return node.contentEditable === 'true';
}

function isInput(node) {
  return node.tagName === 'INPUT';
}

function isHiddenInput(node) {
  return isInput(node) && node.type === 'hidden';
}

function isRadio(node) {
  return isInput(node) && node.type === 'radio';
}

function isNonTabbableRadio(node) {
  return isRadio(node) && !isTabbableRadio(node);
}

function getCheckedRadio(nodes) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked) {
      return nodes[i];
    }
  }
}

function isTabbableRadio(node) {
  if (!node.name) return true;
  // This won't account for the edge case where you have radio groups with the same
  // in separate forms on the same page.
  var radioSet = node.ownerDocument.querySelectorAll('input[type="radio"][name="' + node.name + '"]');
  var checked = getCheckedRadio(radioSet);
  return !checked || checked === node;
}

// An element is "untouchable" if *it or one of its ancestors* has
// `visibility: hidden` or `display: none`.
function UntouchabilityChecker(elementDocument) {
  this.doc = elementDocument;
  // Node cache must be refreshed on every check, in case
  // the content of the element has changed. The cache contains tuples
  // mapping nodes to their boolean result.
  this.cache = [];
}

// getComputedStyle accurately reflects `visibility: hidden` of ancestors
// but not `display: none`, so we need to recursively check parents.
UntouchabilityChecker.prototype.hasDisplayNone = function hasDisplayNone(node, nodeComputedStyle) {
  if (node === this.doc.documentElement) return false;

    // Search for a cached result.
    var cached = find(this.cache, function(item) {
      return item === node;
    });
    if (cached) return cached[1];

    nodeComputedStyle = nodeComputedStyle || this.doc.defaultView.getComputedStyle(node);

    var result = false;

    if (nodeComputedStyle.display === 'none') {
      result = true;
    } else if (node.parentNode) {
      result = this.hasDisplayNone(node.parentNode);
    }

    this.cache.push([node, result]);

    return result;
}

UntouchabilityChecker.prototype.isUntouchable = function isUntouchable(node) {
  if (node === this.doc.documentElement) return false;
  var computedStyle = this.doc.defaultView.getComputedStyle(node);
  if (this.hasDisplayNone(node, computedStyle)) return true;
  return computedStyle.visibility === 'hidden';
}

module.exports = tabbable;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This class manages adding and removing global (window) event handler's for touch/mouse move and up and capturing
 * the events if need be (on IE).
 *
 * This is useful for implementing drag behavior.  If you rely on element level move and up events, you will only
 * get those if the user's mouse pointer or finger stayed within the bounds of the element.  As soon as they move
 * outside the element (or outside the browser) you won't get them.
 */
var GlobalPointerEventCapturer = /** @class */ (function () {
    function GlobalPointerEventCapturer(
    // We need this elementRef solely for IE, see comments about set and release capture below
    elementRef, onPointerMove, onPointerUp) {
        this.listenersAdded = false;
        this.elementRef = elementRef;
        this.onPointerMove = onPointerMove;
        this.onPointerUp = onPointerUp;
    }
    GlobalPointerEventCapturer.prototype.addListeners = function () {
        if (this.listenersAdded) {
            return;
        }
        window.addEventListener('touchend', this.onPointerUp, true);
        window.addEventListener('mouseup', this.onPointerUp, true);
        // `passive: false` necessary for TFSID 798261 + https://bugs.webkit.org/show_bug.cgi?id=182521
        window.addEventListener('touchmove', this.onPointerMove, { capture: true, passive: false });
        window.addEventListener('mousemove', this.onPointerMove, { capture: true, passive: false });
        // On IE we have to setCapture the element so that if the mouse goes outside the bounds of the page, we will still
        // get mousemove and mouseup events.
        // tslint:disable-next-line:no-any
        if (this.elementRef.setCapture) {
            // tslint:disable-next-line:no-any
            this.elementRef.setCapture();
        }
        this.listenersAdded = true;
    };
    GlobalPointerEventCapturer.prototype.removeListeners = function () {
        if (!this.listenersAdded) {
            return;
        }
        window.removeEventListener('touchend', this.onPointerUp, true);
        window.removeEventListener('mouseup', this.onPointerUp, true);
        window.removeEventListener('touchmove', this.onPointerMove, { capture: true });
        window.removeEventListener('mousemove', this.onPointerMove, { capture: true });
        // We have to releaseCapture on IE since we setCapture there
        // tslint:disable-next-line:no-any
        if (this.elementRef.releaseCapture) {
            // tslint:disable-next-line:no-any
            this.elementRef.releaseCapture();
        }
        this.listenersAdded = false;
    };
    return GlobalPointerEventCapturer;
}());
exports.GlobalPointerEventCapturer = GlobalPointerEventCapturer;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A singleton class used to associate a click-outside callback event handler with multiple disparate components.
 * This is used in the case of a component with multiple stacked elements that are not parented to one another.
 *
 * When the user clicks outside of the subscribed nodes, the callback provided by the first subscribed component is called.
 * The callback is automatically reset once all nodes are unsubscribed.
 *
 * Components should subscribe on componentDidMount and unsubscribe on componentWillUnmount
 */
Object.defineProperty(exports, "__esModule", { value: true });
var GlobalPointerDownOutsideListener = /** @class */ (function () {
    function GlobalPointerDownOutsideListener() {
    }
    GlobalPointerDownOutsideListener.subscribeOrUnsubscribeDocument = function (document, subscribe) {
        if (subscribe) {
            document.addEventListener('mousedown', this.handleClickAway.bind(this), true);
            document.addEventListener('touchstart', this.handleClickAway.bind(this), true);
        }
        else {
            document.removeEventListener('mousedown', this.handleClickAway.bind(this), true);
            document.removeEventListener('touchstart', this.handleClickAway.bind(this), true);
        }
        var iframes = document.getElementsByTagName('iframe');
        for (var i = 0; i < iframes.length; i++) {
            GlobalPointerDownOutsideListener.trySubscribeOrUnscribeDocument(iframes[i].contentDocument, subscribe);
        }
    };
    /**
     * We do a try/except because we may try to add event listeners to iframes that are not from the same source. If
     * that is the case we catch it and continue without adding the listeners.
     */
    GlobalPointerDownOutsideListener.trySubscribeOrUnscribeDocument = function (document, subscribe) {
        try {
            GlobalPointerDownOutsideListener.subscribeOrUnsubscribeDocument(document, subscribe);
        }
        catch (e) {
            /**
             * If the document is an iframe from a different source we can't add event listeners.
             * IE, Firefox, and Chrome seem to be throwing different exceptions, so this just assumes
             * that is the error being thrown.
             */
        }
    };
    GlobalPointerDownOutsideListener.subscribe = function (domNode, callback) {
        // TODO: Rework this so it's not implicit that a subscribing component's callback will be ignored if a callback is already registered
        if (!this.callback && callback) {
            this.callback = callback;
        }
        if (this.domNodes.length === 0) {
            GlobalPointerDownOutsideListener.trySubscribeOrUnscribeDocument(document, true);
        }
        this.domNodes.push(domNode);
        return function () {
            GlobalPointerDownOutsideListener.unsubscribe(domNode);
        };
    };
    GlobalPointerDownOutsideListener.unsubscribe = function (nodeToRemove) {
        this.domNodes = this.domNodes.filter(function (item) { return item !== nodeToRemove; });
        if (this.domNodes.length === 0) {
            this.callback = null;
            GlobalPointerDownOutsideListener.trySubscribeOrUnscribeDocument(document, false);
        }
    };
    GlobalPointerDownOutsideListener.handleClickAway = function (e) {
        if (!this.callback) {
            return;
        }
        var target = e.target;
        for (var _i = 0, _a = this.domNodes; _i < _a.length; _i++) {
            var node = _a[_i];
            if (node.contains(target)) {
                return;
            }
        }
        this.callback();
    };
    GlobalPointerDownOutsideListener.domNodes = [];
    return GlobalPointerDownOutsideListener;
}());
exports.GlobalPointerDownOutsideListener = GlobalPointerDownOutsideListener;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var FindIndex_1 = __webpack_require__(15);
var DividerWidget_1 = __webpack_require__(128);
var DynamicThemeComponent_1 = __webpack_require__(5);
var MenuItemWidget_1 = __webpack_require__(129);
exports.ListMenuCursorDriftAllowanceMs = 250;
var Colors = TabStyles_1.TabStyles.Colors, Spacing = TabStyles_1.TabStyles.Spacing, Typography = TabStyles_1.TabStyles.Typography;
exports.ListMenuStyles = {
    backgroundColor: Colors.White,
    boxSizing: 'border-box',
    color: Typography.Color.Primary,
    fontSize: Typography.Sizing.Default,
    fontWeight: 'normal',
    lineHeight: 'normal',
    outline: 'none',
    padding: Spacing.DefaultSpace,
    position: 'relative',
};
var isMenuItemEnabled = function (item) { return !item.isDivider && !item.disabled && !item.isUnselectable; };
var ListMenuWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ListMenuWidget, _super);
    function ListMenuWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.domRef = React.createRef();
        _this.stopPropagation = function (e) { e.stopPropagation(); };
        _this.handleKeyDown = function (e) {
            if (e.altKey || e.ctrlKey || e.metaKey) {
                return;
            }
            if (Declarative_1.isAlphabeticChar(e.key) && !_this.props.letterSearchDisabled) {
                var nextIndexOfFirstLetter_1 = _this.findNextMenuItemStartingWithLetter(e.key);
                if (nextIndexOfFirstLetter_1 > -1) {
                    _this.setActiveItemState(function () { return nextIndexOfFirstLetter_1; }, true);
                }
                e.stopPropagation();
                e.preventDefault();
                return;
            }
            var menuItemCount = _this.props.menuItemInfos.length;
            switch (e.key) {
                case 'ArrowUp':
                    _this.setActiveItemState(function () { return _this.findNextEnabledItemIndex(_this.state.activeItemIndex, -1); }, true);
                    break;
                case 'ArrowDown':
                    _this.setActiveItemState(function () { return _this.findNextEnabledItemIndex(_this.state.activeItemIndex, 1); }, true);
                    break;
                case 'ArrowLeft':
                    if (_this.props.onLeftArrowKeyDown) {
                        _this.props.onLeftArrowKeyDown();
                    }
                    break;
                case 'Home':
                    _this.setActiveItemState(function () { return _this.findNextEnabledItemIndex(-1, 1); }, true);
                    break;
                case 'End':
                    _this.setActiveItemState(function () { return _this.findNextEnabledItemIndex(menuItemCount, -1); }, true);
                    break;
                case ' ':
                case 'Enter':
                    _this.selectActive();
                    break; // let's not scroll the menu or the page
                case 'Escape':
                    break; // eat the keyDown event since we'll handle it in keyUp
                default:
                    // Do not prevent default or stopPropagation on unhandled key presses
                    return;
            }
            e.preventDefault();
            e.stopPropagation();
        };
        _this.handleKeyUp = function (e) {
            if (e.key === 'Escape') {
                if (_this.props.onEscapeKeyUp) {
                    _this.props.onEscapeKeyUp();
                }
                else {
                    _this.props.requestCloseAll();
                }
                e.preventDefault();
                e.stopPropagation();
            }
        };
        _this.handleItemHover = function (itemIndex) {
            var activeItemIndex = _this.state.activeItemIndex;
            var activeItemIsShowingSubmenu = activeItemIndex === _this.displayedSubmenuItemIndex;
            var nextItemIsHovered = itemIndex - activeItemIndex === 1;
            // TFSID 707410: allow the pointer to stray to the next item on the way to a submenu
            if (activeItemIsShowingSubmenu && nextItemIsHovered) {
                clearTimeout(_this.submenuTimeoutId);
                _this.submenuTimeoutId = window.setTimeout(function () { return _this.setActiveItemState(function () { return itemIndex; }, false); }, exports.ListMenuCursorDriftAllowanceMs);
            }
            else {
                _this.setActiveItemState(function () { return itemIndex; }, false);
            }
        };
        _this.handleItemSelect = function (value) {
            _this.props.onSelect(value);
        };
        _this.handleSubmenuShown = function (itemIndex) {
            _this.displayedSubmenuItemIndex = itemIndex;
        };
        _this.state = {
            activeItemIndex: _this.props.__INTERNAL__focusIndex || 0,
            keyboardFocused: true
        };
        return _this;
    }
    ListMenuWidget.prototype.componentDidMount = function () {
        this.addStopPropogationListeners();
    };
    // this is only here for filtering and should be removed when we remove the searchbox support --ckovatch 2018/02/08
    ListMenuWidget.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.props.menuItemInfos === nextProps.menuItemInfos) {
            return;
        }
        // find previously highlighted string, keep if possible, otherwise select the first item
        var highlightedValue = undefined;
        if (this.state.activeItemIndex > -1 && this.state.activeItemIndex < this.props.menuItemInfos.length) {
            highlightedValue = this.props.menuItemInfos[this.state.activeItemIndex].keyboardAccessibleValue;
        }
        // find new selection index - either previous text selection, or the start of the list
        var newActiveIndex = Math.max(0, FindIndex_1.findIndex(nextProps.menuItemInfos, function (item) { return isMenuItemEnabled(item) && item.keyboardAccessibleValue === highlightedValue; }, 0, this));
        if (this.state.activeItemIndex !== newActiveIndex) {
            this.setState({
                activeItemIndex: newActiveIndex
            });
        }
    };
    ListMenuWidget.prototype.componentWillUnmount = function () {
        this.removeStopPropogationListeners();
    };
    ListMenuWidget.prototype.selectActive = function () {
        if (this.state.activeItemIndex < 0 || this.state.activeItemIndex >= this.props.menuItemInfos.length) {
            console.warn("Tried to select a invalid index: " + this.state.activeItemIndex);
            return;
        }
        var currentItem = this.props.menuItemInfos[this.state.activeItemIndex];
        if (isMenuItemEnabled(currentItem)) {
            this.props.onSelect(currentItem.value);
        }
    };
    /**
     * We stop the propogation of scroll events because components like the dropdown have an event listener on their scrolling
     * root to close the dropdown.  We want the listmenu to be able to scroll without triggering the scrolling root scroll event.
     */
    ListMenuWidget.prototype.addStopPropogationListeners = function () {
        this.domRef.current.addEventListener('scroll', this.stopPropagation);
        this.domRef.current.addEventListener('wheel', this.stopPropagation);
    };
    ListMenuWidget.prototype.removeStopPropogationListeners = function () {
        this.domRef.current.removeEventListener('scroll', this.stopPropagation);
        this.domRef.current.removeEventListener('wheel', this.stopPropagation);
    };
    ListMenuWidget.prototype.findNextEnabledItemIndex = function (currentIndex, direction) {
        var menuItemCount = this.props.menuItemInfos.length;
        for (var i = currentIndex + direction; i !== currentIndex; i += direction) {
            if (i >= menuItemCount) {
                i = 0;
            }
            else if (i < 0) {
                i = menuItemCount - 1;
            }
            if (isMenuItemEnabled(this.props.menuItemInfos[i])) {
                return i;
            }
        }
        return currentIndex;
    };
    ListMenuWidget.prototype.findNextMenuItemStartingWithLetter = function (letter) {
        return FindIndex_1.findIndex(this.props.menuItemInfos, function (item) {
            return isMenuItemEnabled(item) && item.keyboardAccessibleValue &&
                item.keyboardAccessibleValue.charAt(0).toUpperCase() === letter.charAt(0).toUpperCase();
        }, this.state.activeItemIndex + 1, this);
    };
    ListMenuWidget.prototype.setActiveItemState = function (activeItemIndex, keyboardFocused) {
        var _this = this;
        clearTimeout(this.submenuTimeoutId);
        this.setState(function (prevState, props) { return ({ activeItemIndex: activeItemIndex(), keyboardFocused: keyboardFocused }); }, function () {
            _this.displayedSubmenuItemIndex = undefined;
            if (!_this.state.keyboardFocused && !_this.props.letterSearchDisabled) {
                // If no individual item is focused, ensure focus is still on the menu so keyboard input is received
                _this.domRef.current.focus();
            }
        });
    };
    ListMenuWidget.prototype.shouldShowCheckGutter = function () {
        for (var i = 0; i < this.props.menuItemInfos.length; i++) {
            if (typeof this.props.menuItemInfos[i].checked !== 'undefined') {
                return true;
            }
        }
        return false;
    };
    ListMenuWidget.prototype.buildMenuFromMenuItemInfos = function () {
        var _this = this;
        var showCheckGutter = this.shouldShowCheckGutter();
        return this.props.menuItemInfos.map(function (item, index) {
            if (item.isDivider) {
                return React.createElement(DividerWidget_1.DividerWidget, { key: index });
            }
            else {
                if (!item.value) {
                    throw new Error("Each non-divider menu item requires a value");
                }
                return (React.createElement(MenuItemWidget_1.MenuItemWidget, { checked: item.checked, disabled: item.disabled, displayFormatterBoundWithData: item.displayFormatterBoundWithData, isHighlighted: !item.disabled && !item.isUnselectable && _this.state.activeItemIndex === index, isUnselectable: item.isUnselectable, itemIndex: index, key: index, keyboardFocused: _this.state.keyboardFocused && !_this.props.focusDisabled, menuItemInfos: item.menuItemInfos, onHover: item.disabled || item.isUnselectable ? null : _this.handleItemHover, onSelect: _this.handleItemSelect, onSubmenuShown: _this.handleSubmenuShown, requestCloseAll: _this.props.requestCloseAll, role: Declarative_1.conditional(_this.props.role === 'listbox', 'option'), scrollingRootId: _this.props.scrollingRootId, showCheckGutter: showCheckGutter, stackingRootId: _this.props.stackingRootId, subMenuAllowAutoPosition: _this.props.subMenuAllowAutoPosition, subMenuMaxHeight: item.subMenuMaxHeight, subMenuShouldAutoPositionOnScrollingRootScroll: _this.props.subMenuShouldAutoPositionOnScrollingRootScroll, subMenuStyle: item.subMenuStyle, testId: _this.props.testId, value: item.value, zIndex: _this.props.zIndex }));
            }
        });
    };
    ListMenuWidget.prototype.render = function () {
        var style = tslib_1.__assign({}, exports.ListMenuStyles, this.props.menuStyle, Declarative_1.conditional(!!this.props.maxHeight, {
            maxHeight: this.props.maxHeight,
            overflowY: 'auto',
            WebkitOverflowScrolling: 'touch',
        }));
        return (React.createElement("div", { "data-tb-test-id": this.props.testId + "-ListMenu", id: this.props.id, onKeyDown: this.handleKeyDown, onKeyUp: this.handleKeyUp, onMouseEnter: this.props.onMouseEnter, ref: this.domRef, role: this.props.role, style: style, tabIndex: -1 }, this.buildMenuFromMenuItemInfos()));
    };
    return ListMenuWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.ListMenuWidget = ListMenuWidget;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var TextFieldInputWidget_1 = __webpack_require__(32);
var TextFieldClearButton_1 = __webpack_require__(131);
var TextFieldWithClearIcon = /** @class */ (function (_super) {
    tslib_1.__extends(TextFieldWithClearIcon, _super);
    function TextFieldWithClearIcon() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.clearButtonRef = React.createRef();
        /** This is for the case if when clicking the clear icon, it disappears before the delayed blur event fires. */
        _this.wasClearTextFired = false;
        _this.handleInputRef = function (ref) {
            if (_this.props.textFieldInputProps.inputRef) {
                _this.props.textFieldInputProps.inputRef(ref);
            }
            _this.inputElement = ref;
        };
        _this.handleClearTextWrapper = function () {
            if (_this.props.textFieldInputProps.disabled) {
                return;
            }
            _this.wasClearTextFired = true;
            _this.props.handleClearText();
            // after clearing the text, return focus to the input
            _this.inputElement.focus();
            // clear out the flag for cases where the text input was not intially focused, therefore the clearing
            // blur event does not occur
            window.setTimeout(function () { _this.resetWasClearTextFired(); }, 50);
        };
        /**
         * The blur handler is delayed to see if the clear icon was clicked.
         */
        _this.handleBlur = function () {
            // We use settimeout to ensure that we test after the click/focus event to see if the clear icon was clicked
            window.setTimeout(function () {
                if (_this.wasClearTextFired || _this.isTextFieldClearButtonActiveElement()) {
                    _this.resetWasClearTextFired();
                    return;
                }
                if (_this.props.textFieldInputProps.handleBlur) {
                    _this.props.textFieldInputProps.handleBlur();
                }
            }, 0);
        };
        return _this;
    }
    TextFieldWithClearIcon.prototype.isTextFieldClearButtonActiveElement = function () {
        if (!this.clearButtonRef.current) {
            return false;
        }
        return document.activeElement === ReactDOM.findDOMNode(this.clearButtonRef.current);
    };
    TextFieldWithClearIcon.prototype.resetWasClearTextFired = function () {
        this.wasClearTextFired = false;
    };
    TextFieldWithClearIcon.prototype.render = function () {
        var showClearButton = !!this.props.textFieldInputProps.text && !this.props.textFieldInputProps.disabled;
        return (React.createElement("span", { style: { lineHeight: 'normal', position: 'relative' } },
            React.createElement(TextFieldInputWidget_1.TextFieldInputWidget, tslib_1.__assign({}, this.props.textFieldInputProps, { handleBlur: this.handleBlur, inputRef: this.handleInputRef })),
            showClearButton &&
                React.createElement(TextFieldClearButton_1.TextFieldClearButton, tslib_1.__assign({}, this.props.textFieldClearButtonProps, { pointerClick: this.handleClearTextWrapper, ref: this.clearButtonRef }))));
    };
    return TextFieldWithClearIcon;
}(React.Component));
exports.TextFieldWithClearIcon = TextFieldWithClearIcon;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TextFormatterWidget_1 = __webpack_require__(63);
/**
 * This converts the original dropdowns with only text values to use the displayFormatter
 */
var convertMenuItemInfoToGeneric = function (basicMenuItemInfo) {
    var genericMenuItemInfo = [];
    basicMenuItemInfo.forEach(function (basic) {
        genericMenuItemInfo.push({
            menuItemInfos: !!basic.menuItemInfos ? convertMenuItemInfoToGeneric(basic.menuItemInfos) : undefined,
            displayFormatterBoundWithData: TextFormatterWidget_1.TextMenuDisplayFormatter(basic.displayValue, basic.title),
            keyboardAccessibleValue: basic.displayValue,
            textForDropdownButton: basic.displayValue,
            value: basic.value,
            disabled: basic.disabled,
            isDivider: basic.isDivider,
            subMenuStyle: basic.subMenuStyle,
            isUnselectable: false,
            checked: basic.checked,
            subMenuMaxHeight: basic.subMenuMaxHeight
        });
    });
    return genericMenuItemInfo;
};
exports.convertMenuItemInfoToGeneric = convertMenuItemInfoToGeneric;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var DomUtil_1 = __webpack_require__(7);
var DomWidgets_1 = __webpack_require__(4);
var TextEllipsis_1 = __webpack_require__(16);
var PreventUserSelect_1 = __webpack_require__(12);
var TabStyles_1 = __webpack_require__(2);
var Icons_1 = __webpack_require__(6);
var Sizing = TabStyles_1.TabStyles.Sizing, Colors = TabStyles_1.TabStyles.Colors, Spacing = TabStyles_1.TabStyles.Spacing, Typography = TabStyles_1.TabStyles.Typography;
var getStyles = function () {
    return {
        MenuItem: tslib_1.__assign({ height: Sizing.ListRowHeight, paddingLeft: Spacing.DefaultSpace, paddingRight: Spacing.DefaultSpace, lineHeight: Sizing.ListRowHeight + 'px', position: 'relative' }, TextEllipsis_1.TextEllipsis, PreventUserSelect_1.PreventUserSelect),
        Highlighted: {
            backgroundColor: Colors.F2_5
        },
        Active: {
            backgroundColor: Colors.F3
        },
        WithCheckGutter: {
            paddingLeft: Icons_1.MenuItemCheckIcon.checkedItemPaddingLeft
        },
        WithSubMenu: {
            paddingRight: Icons_1.MenuItemArrowIcon.width
        },
        Disabled: {
            color: Typography.Color.Disabled
        },
        ArrowIcon: {
            position: 'absolute',
            right: 0
        }
    };
};
/**
 * Using closure the formatter has access to the text value that it wants to display, and gets its other props
 * from the dropdown. This will be rendered in the MenuItemWidget.
 *
 * @param displayValue The text value to be displayed
 */
var TextMenuDisplayFormatter = function (displayValue, title) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(TextFormatterWidget, _super);
        function TextFormatterWidget(props) {
            var _this = _super.call(this, props) || this;
            _this.handleRef = function (renderedTextFormatter) {
                _this.renderedTextFormatter = renderedTextFormatter;
            };
            _this.handleMouseOver = function (e) {
                if (title) {
                    // NOTE: The custom title will override the default title when the displayed value within the menu item is truncated.
                    return;
                }
                _this.setState({ title: (DomUtil_1.isElementOverflownX(_this.renderedTextFormatter)) ? displayValue : undefined });
            };
            _this.state = { title: title };
            return _this;
        }
        TextFormatterWidget.prototype.getSubMenuIcon = function () {
            if (this.props.hasSubMenu) {
                var styles = getStyles();
                var arrowIcon = Icons_1.MenuItemArrowIcon.icon({ disabled: this.props.disabled });
                return React.createElement(DomWidgets_1.Img, { style: styles.ArrowIcon, src: arrowIcon, "aria-hidden": true });
            }
            else {
                return null;
            }
        };
        TextFormatterWidget.prototype.getCheckedStyles = function () {
            var checkIcon = Icons_1.MenuItemCheckIcon.icon({ active: this.props.active || this.props.isHighlighted, disabled: this.props.disabled });
            return {
                backgroundImage: "url('" + checkIcon + "')",
                backgroundRepeat: 'no-repeat',
                backgroundPosition: Spacing.DefaultSpace + "px center"
            };
        };
        TextFormatterWidget.prototype.render = function () {
            var styles = getStyles();
            var style = tslib_1.__assign({}, styles.MenuItem, Declarative_1.conditional(this.props.hasSubMenu, styles.WithSubMenu), Declarative_1.conditional(this.props.isHighlighted, styles.Highlighted), Declarative_1.conditional(this.props.active, styles.Active), Declarative_1.conditional(this.props.disabled, styles.Disabled), Declarative_1.conditional(this.props.showCheckGutter, styles.WithCheckGutter), Declarative_1.conditional(this.props.checked, this.getCheckedStyles()));
            var props = {
                style: style,
                title: this.state.title,
                ref: this.handleRef,
                onMouseOver: this.handleMouseOver,
                'data-tb-test-id': Declarative_1.testId(this.props.testId, 'TextMenuItem')
            };
            return (React.createElement("div", tslib_1.__assign({}, props),
                displayValue,
                this.getSubMenuIcon()));
        };
        return TextFormatterWidget;
    }(React.Component));
};
exports.TextMenuDisplayFormatter = TextMenuDisplayFormatter;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var LineTextFieldWidgetStyles_1 = __webpack_require__(137);
var Declarative_1 = __webpack_require__(3);
var DomUtil_1 = __webpack_require__(7);
var Unicode_1 = __webpack_require__(40);
var DomWidgets_1 = __webpack_require__(4);
var TextFieldBase_1 = __webpack_require__(17);
exports.TextInputType = TextFieldBase_1.TextInputType;
var TextFieldInputWidget_1 = __webpack_require__(32);
var LineTextFieldWidget = /** @class */ (function (_super) {
    tslib_1.__extends(LineTextFieldWidget, _super);
    function LineTextFieldWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.inputId = DomUtil_1.generateId();
        _this.errorLabelId = DomUtil_1.generateId();
        return _this;
    }
    LineTextFieldWidget.prototype.render = function () {
        var _a = this.props, children = _a.children, containerStyle = _a.containerStyle, hideErrorDiv = _a.hideErrorDiv, errorText = _a.errorText, floatingLabel = _a.floatingLabel, floatingLabelStyle = _a.floatingLabelStyle, onDarkBackground = _a.onDarkBackground, textFieldInputProps = tslib_1.__rest(_a, ["children", "containerStyle", "hideErrorDiv", "errorText", "floatingLabel", "floatingLabelStyle", "onDarkBackground"]);
        var errorShown = !hideErrorDiv && !!errorText;
        var showPlaceholder = this.isPlaceholderShowing();
        /**
         * 705509 Special Case: If a floating label is provided then we'll remove the placeholder if no text is provided
         * and either the widget is disabled or the input is active or has focus
         */
        if (floatingLabel) {
            showPlaceholder = showPlaceholder && (this.props.disabled || !this.isInputActiveOrHasFocus());
        }
        var styles = LineTextFieldWidgetStyles_1.getStyles({ onDarkBackground: onDarkBackground });
        var placeholderStyle = tslib_1.__assign({}, styles.placeholder.base, this.props.placeholderStyle, (this.props.disabled && styles.placeholder.disabled));
        var inputStyle = tslib_1.__assign({}, styles.input.base, (errorShown && styles.errorInput), this.props.inputStyle);
        var inputProps = tslib_1.__assign({}, textFieldInputProps, { 'aria-errormessage': Declarative_1.conditional(errorShown, this.errorLabelId), 'aria-invalid': !!this.props.errorText, 'aria-label': this.props['aria-label'] || this.props.floatingLabel || this.props.placeholder, handleActive: this.handleInputActive, handleFocus: this.handleInputFocus, id: this.inputId, inputStyle: inputStyle, interactiveStyles: Declarative_1.conditional(!errorShown, styles.input.interactive) });
        var labelProps = {
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'FloatingLabel'),
            htmlFor: this.inputId,
            style: tslib_1.__assign({}, styles.floatingLabel, floatingLabelStyle),
        };
        var errorLabelProps = {
            'aria-live': 'polite',
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'ErrorLabel'),
            id: this.errorLabelId,
            style: styles.errorLabel,
        };
        return (React.createElement(DomWidgets_1.Block, { style: containerStyle },
            !!this.props.floatingLabel &&
                React.createElement(DomWidgets_1.Block, null,
                    React.createElement("label", tslib_1.__assign({}, labelProps), !showPlaceholder ? this.props.floatingLabel : Unicode_1.Unicode.NonBreakingSpace)),
            React.createElement(DomWidgets_1.Block, null,
                showPlaceholder &&
                    React.createElement("div", { style: placeholderStyle, "data-tb-test-id": Declarative_1.testId(this.props.testId, 'Placeholder') }, this.props.placeholder || this.props.floatingLabel),
                React.createElement(TextFieldInputWidget_1.TextFieldInputWidget, tslib_1.__assign({}, inputProps))),
            !this.props.hideErrorDiv &&
                React.createElement(DomWidgets_1.Block, null,
                    React.createElement("div", tslib_1.__assign({}, errorLabelProps), this.props.errorText || Unicode_1.Unicode.NonBreakingSpace))));
    };
    return LineTextFieldWidget;
}(TextFieldBase_1.TextFieldBase));
exports.LineTextFieldWidget = LineTextFieldWidget;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var SliderBaseWidget_1 = __webpack_require__(34);
/**
 * Enumeration of the possible open ended indicators to apply to a SliderWidget. Use this to
 * apply a darkened track bar for the specified open ended at type.
 */
var OpenEndedAt;
(function (OpenEndedAt) {
    /** Use to darken the track bar from [min, value] inclusive */
    OpenEndedAt[OpenEndedAt["Min"] = 0] = "Min";
    /** Use to darken the track bar from [value, max] inclusive */
    OpenEndedAt[OpenEndedAt["Max"] = 1] = "Max";
})(OpenEndedAt = exports.OpenEndedAt || (exports.OpenEndedAt = {}));
/**
 * This slider has one handle and lets a user select a value. It allows the user to choose any number
 * from min to max, including decimal numbers.
 */
function SliderWidget(props) {
    return React.createElement(SliderBaseWidget_1.SliderBaseWidget, tslib_1.__assign({}, props, { testId: Declarative_1.testId(props.testId, 'Slider') }));
}
exports.SliderWidget = SliderWidget;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Math_1 = __webpack_require__(33);
/**
 * Logic for dealing with calculating:
 *   - The handle positions of the slider based upon the slider value
 *   - The new slider values from key down events
 */
var SliderValueLogic = /** @class */ (function () {
    function SliderValueLogic(min, max, roundToIntegers) {
        this.min = roundToIntegers ? Math.ceil(min) : min;
        this.max = roundToIntegers ? Math.floor(max) : max;
        this.roundToIntegers = roundToIntegers;
    }
    // Range is 0.0 to 1.0, inclusive
    SliderValueLogic.prototype.calculateSliderPositionAsProportion = function (value) {
        if (this.min > this.max) {
            return NaN;
        }
        var valuePrime = this.roundToIntegers ? Math.round(value) : value;
        var proportion = (valuePrime - this.min) / (this.max - this.min);
        return Math_1.clamp(proportion, 0, 1);
    };
    // 0.0 ===> min, 1.0 ===> max
    SliderValueLogic.prototype.calculateNewSliderValueFromProportion = function (proportion) {
        if (this.min > this.max) {
            return NaN;
        }
        else if (proportion < 0) {
            return this.min;
        }
        else if (proportion > 1) {
            return this.max;
        }
        var newValue = this.roundToIntegers ?
            Math.round(proportion * (this.max - this.min)) + this.min :
            proportion * (this.max - this.min) + this.min;
        return Math_1.clamp(newValue, this.min, this.max);
    };
    SliderValueLogic.prototype.calculateNewSliderValueForKey = function (key, currentValue) {
        var valuePrime = this.roundToIntegers ? Math.round(currentValue) : currentValue;
        var onePercentOfRange = (this.max - this.min) / 100;
        var tenthOfRange = (this.max - this.min) / 10;
        var arrowKeyChangeAmount = this.roundToIntegers ? 1 : onePercentOfRange;
        var pageKeyChangeAmount = this.roundToIntegers ? Math.max(Math.round(tenthOfRange), 1) : tenthOfRange;
        var newValue = valuePrime;
        switch (key) {
            case 'ArrowLeft':
            case 'ArrowDown':
                newValue = valuePrime - arrowKeyChangeAmount;
                break;
            case 'ArrowUp':
            case 'ArrowRight':
                newValue = valuePrime + arrowKeyChangeAmount;
                break;
            case 'PageDown':
                newValue = valuePrime - pageKeyChangeAmount;
                break;
            case 'PageUp':
                newValue = valuePrime + pageKeyChangeAmount;
                break;
            case 'Home':
                newValue = this.min;
                break;
            case 'End':
                newValue = this.max;
                break;
            default:
                return undefined;
        }
        return Math_1.clamp(newValue, this.min, this.max);
    };
    SliderValueLogic.prototype.calculateNewSliderRangeValueForKey = function (key, currentValue) {
        var currentValueDelta = Math.max(currentValue.to - currentValue.from, 0);
        var arrowKeyChangeAmount = (this.max - this.min) / 100;
        var pageKeyChangeAmount = (this.max - this.min) / 10;
        var newValue = currentValue;
        switch (key) {
            case 'ArrowDown':
            case 'ArrowLeft':
                if (currentValue.from > this.min) {
                    var newFromValue = Math.max(currentValue.from - arrowKeyChangeAmount, this.min);
                    newValue = { from: newFromValue, to: newFromValue + currentValueDelta };
                }
                break;
            case 'ArrowUp':
            case 'ArrowRight':
                if (currentValue.to < this.max) {
                    var newToValue = Math.min(currentValue.to + arrowKeyChangeAmount, this.max);
                    newValue = { from: newToValue - currentValueDelta, to: newToValue };
                }
                break;
            case 'PageDown':
                if (currentValue.from > this.min) {
                    var newFromValue = Math.max(currentValue.from - pageKeyChangeAmount, this.min);
                    newValue = { from: newFromValue, to: newFromValue + currentValueDelta };
                }
                break;
            case 'PageUp':
                if (currentValue.to < this.max) {
                    var newToValue = Math.min(currentValue.to + pageKeyChangeAmount, this.max);
                    newValue = { from: newToValue - currentValueDelta, to: newToValue };
                }
                break;
            case 'Home':
                newValue = { from: this.min, to: this.min + currentValueDelta };
                break;
            case 'End':
                newValue = { from: this.max - currentValueDelta, to: this.max };
                break;
            default:
                return undefined;
        }
        return { from: Math_1.clamp(newValue.from, this.min, this.max), to: Math_1.clamp(newValue.to, this.min, this.max) };
    };
    SliderValueLogic.KeysRelevantForManipulatingSlider = {
        'ArrowLeft': true,
        'ArrowRight': true,
        'ArrowUp': true,
        'ArrowDown': true,
        'PageUp': true,
        'PageDown': true,
        'Home': true,
        'End': true
    };
    return SliderValueLogic;
}());
exports.SliderValueLogic = SliderValueLogic;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var TabsWidgetStyles_1 = __webpack_require__(68);
var Math_1 = __webpack_require__(33);
var Declarative_1 = __webpack_require__(3);
var TabActivatorFactory_1 = __webpack_require__(156);
var TabWidget_1 = __webpack_require__(159);
var TabPanel_1 = __webpack_require__(160);
/**
 * Tabs widget component that renders a tab list and tab panel(s). It renders the active tab's content, in addition to the
 * content of the anchor tab (user-specified), which is rendered to maintain a consistent height when switching tabs.
 *
 * Nomenclature (inspired by https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel):
 *   - tabs widget: the name of the entire widget
 *   - tab list: a set of tab widgets
 *   - tab: an item in the tab list that serves as a label for one of the tab panels; when active, its panel is shown
 *   - tab indicator: the solid line at the bottom of each tab that changes color if the tab is active, hovered, or pressed
 *   - tab panel: the component that contains the content associated with a tab
 */
/**
 * Mode that dictates whether tabs are activated automatically or manually.
 *   Automatic: tabs are automatically activated and their panel is displayed when they receive focus
 *   Manual: users activate a tab and display its panel by pressing space or enter
 * More information: https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html
 */
var TabActivationMode;
(function (TabActivationMode) {
    TabActivationMode[TabActivationMode["Automatic"] = 0] = "Automatic";
    TabActivationMode[TabActivationMode["Manual"] = 1] = "Manual";
})(TabActivationMode = exports.TabActivationMode || (exports.TabActivationMode = {}));
/**
 * Dictates the alignment of the tabs within the tab container.
 *   Justified: evenly distributes the tabs within the available container width
 *   Left: left aligns the tabs within the container
 */
var TabListAlignment;
(function (TabListAlignment) {
    TabListAlignment[TabListAlignment["Left"] = 0] = "Left";
    TabListAlignment[TabListAlignment["Justified"] = 1] = "Justified";
})(TabListAlignment = exports.TabListAlignment || (exports.TabListAlignment = {}));
var TabsWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TabsWidget, _super);
    function TabsWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.setActiveIndex = function (index) {
            // Any active index should also gain focus
            _this.setState({ activeIndex: _this.state.activeIndex === index ? _this.state.activeIndex : index, focusedIndex: index });
        };
        _this.setFocusedIndex = function (index) {
            _this.setState({ focusedIndex: index });
        };
        _this.validateProps(props);
        _this.state = { activeIndex: Math_1.clamp(props.initialActiveIndex, 0, props.tabs.length - 1), focusedIndex: -1 };
        _this.activator = TabActivatorFactory_1.TabActivatorFactory.CreateInstance(_this);
        return _this;
    }
    TabsWidget.prototype.componentWillReceiveProps = function (nextProps) {
        this.validateProps(nextProps);
    };
    TabsWidget.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.state.activeIndex !== prevState.activeIndex && this.props.onActiveIndexChanged) {
            this.props.onActiveIndexChanged(this.state.activeIndex);
        }
    };
    TabsWidget.prototype.validateProps = function (props) {
        if (props.tabs.length === 0) {
            throw Error("Invalid 'tabs' count: 1+ tabs are required");
        }
    };
    TabsWidget.prototype.buildTabId = function (index) {
        return Declarative_1.testId(this.props.testId, "tab" + (index + 1));
    };
    TabsWidget.prototype.buildTabPanelId = function (index) {
        return Declarative_1.testId(this.props.testId, "tabpanel" + (index + 1));
    };
    TabsWidget.prototype.renderTabList = function (isAnIconDefinedInTabs) {
        var _this = this;
        return this.props.tabs.map(function (tab, index) {
            var tabProps = {
                ariaControls: _this.buildTabPanelId(index),
                id: _this.buildTabId(index),
                index: index,
                isActive: _this.isTabActive(index),
                isFocused: _this.isTabFocused(index),
                onBlur: function () { return _this.setFocusedIndex(-1); },
                onClick: _this.setActiveIndex,
                onFocus: _this.setFocusedIndex,
                onKeyDown: _this.activator.handleKeyDown,
                tabContainerStyles: TabsWidgetStyles_1.GetTabLabelContainerStyles(),
                tabContent: tab.tabContent
            };
            if (_this.props.dimensionOverrides && _this.props.dimensionOverrides.tabHorizontalPadding) {
                tabProps.tabContainerStyles.paddingRight = _this.props.dimensionOverrides.tabHorizontalPadding;
                tabProps.tabContainerStyles.paddingLeft = _this.props.dimensionOverrides.tabHorizontalPadding;
            }
            if (_this.props.tabListAlignment === undefined || _this.props.tabListAlignment === TabListAlignment.Justified) {
                tabProps.flexPercent = 100 / _this.props.tabs.length;
            }
            return React.createElement(TabWidget_1.TabWidget, tslib_1.__assign({ key: index }, tabProps));
        });
    };
    TabsWidget.prototype.isTabActive = function (tabIndex) {
        return tabIndex === this.state.activeIndex;
    };
    TabsWidget.prototype.isTabFocused = function (tabIndex) {
        return tabIndex === this.state.focusedIndex;
    };
    TabsWidget.prototype.isAnchorTabActive = function () {
        return this.isTabActive(this.props.anchorTabIndex);
    };
    TabsWidget.prototype.renderTabPanel = function (index) {
        var props = {
            ariaLabelledBy: this.buildTabId(index),
            containerStyle: this.getTabPanelContainerStyle(index),
            content: this.props.tabs[index].panelContent,
            id: this.buildTabPanelId(index)
        };
        return React.createElement(TabPanel_1.TabPanel, tslib_1.__assign({}, props));
    };
    TabsWidget.prototype.getTabPanelContainerStyle = function (index) {
        if (index !== this.props.anchorTabIndex) {
            return TabsWidgetStyles_1.NonAnchorTabPanelStyles;
        }
        return this.isAnchorTabActive() ? TabsWidgetStyles_1.ActiveTabVisibility : TabsWidgetStyles_1.InactiveTabVisibility;
    };
    TabsWidget.prototype.isAnIconDefinedInTabs = function () {
        for (var idx = 0; idx < this.props.tabs.length; idx++) {
            if (!!this.props.tabs[idx].tabContent.icon) {
                return true;
            }
        }
        return false;
    };
    TabsWidget.prototype.render = function () {
        var isAnIconDefinedInTabs = this.isAnIconDefinedInTabs();
        var tabListContainerProps = {
            'aria-label': this.props.ariaLabel,
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'tablist'),
            role: 'tablist',
            style: TabsWidgetStyles_1.GetTabListStyles(isAnIconDefinedInTabs),
        };
        if (this.props.dimensionOverrides && this.props.dimensionOverrides.tabHeight) {
            tabListContainerProps.style.height = this.props.dimensionOverrides.tabHeight;
        }
        var tabPanelScrollContainerProps = {
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'tabpanel-scroll-container'),
            style: tslib_1.__assign({}, TabsWidgetStyles_1.TabPanelScrollContainerStyles),
        };
        if (this.props.dimensionOverrides && this.props.dimensionOverrides.tabPanelPadding) {
            tabPanelScrollContainerProps.style.padding = this.props.dimensionOverrides.tabPanelPadding;
        }
        var tabPanelContainerProps = {
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'tabpanel-container'),
            style: TabsWidgetStyles_1.TabPanelContainerStyles
        };
        return (React.createElement("div", null,
            React.createElement("div", tslib_1.__assign({}, tabListContainerProps), this.renderTabList(isAnIconDefinedInTabs)),
            React.createElement("div", tslib_1.__assign({}, tabPanelScrollContainerProps),
                React.createElement("div", tslib_1.__assign({}, tabPanelContainerProps),
                    this.renderTabPanel(this.props.anchorTabIndex),
                    Declarative_1.conditional(!this.isAnchorTabActive(), this.renderTabPanel(this.state.activeIndex))))));
    };
    return TabsWidget;
}(React.PureComponent));
exports.TabsWidget = TabsWidget;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var TabStyles_1 = __webpack_require__(2);
var TextEllipsis_1 = __webpack_require__(16);
var PreventUserSelect_1 = __webpack_require__(12);
var Spacing = TabStyles_1.TabStyles.Spacing;
var Colors = TabStyles_1.TabStyles.Colors;
var FontColors = TabStyles_1.TabStyles.Typography.Color;
// Only the active tab should be visible, all others should be hidden
exports.ActiveTabVisibility = { visibility: 'visible' };
exports.InactiveTabVisibility = { visibility: 'hidden' };
exports.TabsWidgetDimensions = {
    tabLabelPadding: Spacing.ExtraLargeSpace,
    textOnlyTabListHeight: 42,
    iconAndTextTabListHeight: 54,
    tabIndicatorHeight: 3
};
// The client specifies which tab panel we should anchor the tab widget height to. It's often the tallest tab panel,
// so that the dialog will always be tall enough and will not resize when switching tabs
exports.NonAnchorTabPanelStyles = {
    position: 'absolute',
    width: '100%',
    left: '0',
    top: '0'
};
exports.TabPanelScrollContainerStyles = {
    overflowY: 'auto',
    padding: Spacing.LargeSpace,
    position: 'relative',
    WebkitOverflowScrolling: 'touch',
};
exports.TabPanelContainerStyles = {
    position: 'relative',
};
exports.GetTabListStyles = function (isAnIconDefinedInTabs) {
    return tslib_1.__assign({ display: 'flex', fontSize: isAnIconDefinedInTabs ? TabStyles_1.TabStyles.Typography.Sizing.Tiny : TabStyles_1.TabStyles.Typography.Sizing.Default, height: isAnIconDefinedInTabs ? exports.TabsWidgetDimensions.iconAndTextTabListHeight : exports.TabsWidgetDimensions.textOnlyTabListHeight }, PreventUserSelect_1.PreventUserSelect);
};
exports.GetSingleTabStyles = function (flexPercent) {
    var styles = {
        display: 'inline-block',
        height: '100%',
        outline: 'none',
        overflow: 'hidden',
        position: 'relative'
    };
    if (!!flexPercent) {
        styles.flex = "1 0 " + flexPercent + "%";
    }
    return styles;
};
exports.GetTabLabelContainerStyles = function () {
    return {
        alignItems: 'center',
        display: 'flex',
        height: '100%',
        justifyContent: 'center',
        paddingRight: exports.TabsWidgetDimensions.tabLabelPadding,
        paddingLeft: exports.TabsWidgetDimensions.tabLabelPadding,
    };
};
exports.DefaultTabLabelStyles = tslib_1.__assign({ color: FontColors.PrimaryLight }, TextEllipsis_1.TextEllipsis);
exports.TabContentStyle = {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'center'
};
exports.LabelStyle = tslib_1.__assign({ display: 'block' }, TextEllipsis_1.TextEllipsis);
exports.BaseTabIndicatorStyles = {
    backgroundColor: 'transparent',
    height: exports.TabsWidgetDimensions.tabIndicatorHeight,
    position: 'absolute',
    bottom: 0,
    width: '100%'
};
exports.FocusedTabIndicatorStyles = {
    backgroundColor: Colors.Focus
};
exports.HoveredTabIndicatorStyles = {
    backgroundColor: Colors.L5
};
exports.ActiveTabIndicatorStyles = {
    backgroundColor: Colors.L8
};
exports.PressedTabIndicatorStyles = {
    backgroundColor: Colors.L9
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Abstract class that defines common interface and functionality between tab activator modes
 */
var BaseTabActivator = /** @class */ (function () {
    function BaseTabActivator(tabsWidget) {
        this.tabsWidget = tabsWidget;
        this.handleKeyDown = this.handleKeyDown.bind(this);
    }
    BaseTabActivator.prototype.tabIndexFromKeyDown = function (tabIndex, keyValue) {
        var numTabs = this.tabsWidget.props.tabs.length;
        switch (keyValue) {
            // With the arrow keys, we wrap around. For example, if the last tab is focused or active and the
            // user keys down on the right arrow, we wrap around so that now the first tab is focused or active.
            case 'ArrowRight':
                return (tabIndex + 1) % numTabs;
            case 'ArrowLeft':
                return (numTabs + tabIndex - 1) % numTabs;
            case 'Home':
                return 0;
            case 'End':
                return numTabs - 1;
            default:
                return -1;
        }
    };
    BaseTabActivator.preventDefaultAndStopPropagation = function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    return BaseTabActivator;
}());
exports.BaseTabActivator = BaseTabActivator;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var InteractiveDom_1 = __webpack_require__(8);
var underline = { textDecoration: 'underline' };
var interactiveStyles = {
    active: underline,
    focus: underline,
    hover: underline,
};
var InteractiveLinkWidget = /** @class */ (function (_super) {
    tslib_1.__extends(InteractiveLinkWidget, _super);
    function InteractiveLinkWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleClick = function (e) {
            e.preventDefault();
            if (_this.props.onClick) {
                _this.props.onClick();
            }
        };
        return _this;
    }
    InteractiveLinkWidget.prototype.render = function () {
        var anchorProps = {
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'InteractiveLink'),
            href: this.props.href || '#',
            onClick: this.handleClick,
            style: tslib_1.__assign({}, this.props.style, { textDecoration: 'none' })
        };
        return React.createElement(InteractiveDom_1.InteractiveDomWrapper, { interactiveStyles: interactiveStyles },
            React.createElement("a", tslib_1.__assign({}, anchorProps), this.props.text));
    };
    return InteractiveLinkWidget;
}(React.PureComponent));
exports.InteractiveLinkWidget = InteractiveLinkWidget;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var DatePickerWidget_1 = __webpack_require__(162);
var Date_1 = __webpack_require__(24);
var LineTextFieldWidget_1 = __webpack_require__(64);
var OutlineTextFieldWidget_1 = __webpack_require__(21);
var Overlay_1 = __webpack_require__(10);
var TabStyles_1 = __webpack_require__(2);
var Icons_1 = __webpack_require__(6);
var DomWidgets_1 = __webpack_require__(4);
var ButtonWidget_1 = __webpack_require__(14);
var Localize_1 = __webpack_require__(11);
var DomUtil_1 = __webpack_require__(7);
var DateFormat;
(function (DateFormat) {
    DateFormat[DateFormat["ShortDateTime"] = 0] = "ShortDateTime";
    DateFormat[DateFormat["MediumDateTime"] = 1] = "MediumDateTime";
    DateFormat[DateFormat["LongDateTime"] = 2] = "LongDateTime";
    DateFormat[DateFormat["FullDateTime"] = 3] = "FullDateTime";
    DateFormat[DateFormat["ShortDate"] = 4] = "ShortDate";
    DateFormat[DateFormat["MediumDate"] = 5] = "MediumDate";
    DateFormat[DateFormat["LongDate"] = 6] = "LongDate";
    DateFormat[DateFormat["FullDate"] = 7] = "FullDate";
    DateFormat[DateFormat["ShortDateWithFullYear"] = 8] = "ShortDateWithFullYear";
    DateFormat[DateFormat["ShortDateTimeWithFullYear"] = 9] = "ShortDateTimeWithFullYear";
    DateFormat[DateFormat["ShortDateTimeWithFullYear24Hour"] = 10] = "ShortDateTimeWithFullYear24Hour";
    DateFormat[DateFormat["ShortDateMediumTimeWithFullYear"] = 11] = "ShortDateMediumTimeWithFullYear";
    DateFormat[DateFormat["ShortDateMediumTimeWithFullYear24Hour"] = 12] = "ShortDateMediumTimeWithFullYear24Hour";
})(DateFormat = exports.DateFormat || (exports.DateFormat = {}));
var DateInputFieldType;
(function (DateInputFieldType) {
    DateInputFieldType[DateInputFieldType["Line"] = 0] = "Line";
    DateInputFieldType[DateInputFieldType["Outline"] = 1] = "Outline";
})(DateInputFieldType = exports.DateInputFieldType || (exports.DateInputFieldType = {}));
var Shadow = TabStyles_1.TabStyles.Shadow, Colors = TabStyles_1.TabStyles.Colors, Sizing = TabStyles_1.TabStyles.Sizing;
var DateInputField = /** @class */ (function (_super) {
    tslib_1.__extends(DateInputField, _super);
    function DateInputField(props) {
        var _this = _super.call(this, props) || this;
        _this.datePickerId = DomUtil_1.generateId();
        _this.handleInputRef = function (ref) {
            _this.inputElement = ref;
        };
        _this.handleDropdownButtonRef = function (ref) {
            _this.dropdownButtonElement = ReactDOM.findDOMNode(ref);
        };
        _this.handleOverlayRef = function (ref) {
            _this.overlayElement = ref;
        };
        _this.handleButtonClick = function (e) {
            _this.toggleDatePicker();
        };
        _this.handleChange = function (inputText) {
            _this.setState({ inputText: inputText });
            var parsedDate = Date_1.getParsedDate(inputText, _this.props.terminus);
            if (parsedDate) {
                _this.triggerOnChange(parsedDate);
            }
            else {
                _this.close();
            }
        };
        _this.handleInputKeyDown = function (e) {
            if (!_this.props.hasDatePicker) {
                return;
            }
            switch (e.key) {
                case ' ':
                    if (_this.inputElement.selectionStart === 0 && _this.inputElement.selectionEnd === _this.inputElement.value.length) {
                        _this.open();
                        break;
                    }
                    return;
                case 'ArrowDown':
                    _this.open();
                    break;
                case 'ArrowUp':
                    _this.close();
                    break;
                default:
                    return;
            }
            e.preventDefault();
            e.stopPropagation();
        };
        _this.handleInputEnter = function () {
            var parsedDate = Date_1.getParsedDate(_this.state.inputText, _this.props.terminus);
            if (parsedDate) {
                _this.confirmDate(parsedDate, false);
            }
        };
        _this.handleOverlayKeyUp = function (e) {
            if (e.key === 'Escape') {
                _this.handleEscape();
                e.preventDefault();
            }
            e.stopPropagation();
        };
        _this.handleBlur = function (e) {
            var focusedElement = DomUtil_1.findBlurRelatedTarget(e);
            if (!_this.props.hasDatePicker || ((!_this.overlayElement || !_this.overlayElement.contains(focusedElement)) &&
                !_this.inputElement.contains(focusedElement) &&
                !_this.dropdownButtonElement.contains(focusedElement))) {
                var parsedDate = Date_1.getParsedDate(_this.state.inputText, _this.props.terminus);
                if (parsedDate && !_this.props.errorText) {
                    _this.confirmDate(parsedDate, false);
                }
                else {
                    _this.confirmDate(_this.props.selectedDate, true);
                }
            }
        };
        _this.handlePickerBlur = function (e) {
            var relatedTarget = DomUtil_1.findBlurRelatedTarget(e);
            if (e.currentTarget === e.target || !e.currentTarget.contains(relatedTarget)) {
                _this.handleBlur(e);
            }
        };
        _this.handleEscape = function () {
            _this.confirmDate(_this.props.selectedDate, true);
        };
        _this.handlePickerChange = function (date) {
            var dateWithTerminus = Date_1.getDateWithTerminus(date, Localize_1.Parsers.parseShortDate, _this.props.terminus);
            var input = _this.getFormattedDate(dateWithTerminus);
            _this.handleChange(input);
        };
        _this.handlePickerConfirm = function (date) {
            _this.confirmDate(date, true);
        };
        _this.renderDatePicker = function () {
            var datePickerProps = {
                autofocus: true,
                isDateDisabled: _this.props.isDatePickerDateDisabled,
                onChange: _this.handlePickerChange,
                onConfirm: _this.handlePickerConfirm,
                selectedDate: _this.props.selectedDate,
                showWeekNumbers: _this.props.showDatePickerWeekNumbers,
                testId: _this.props.testId + "-date-picker",
            };
            return React.createElement(DatePickerWidget_1.DatePickerWidget, tslib_1.__assign({}, datePickerProps));
        };
        var selectedDate = props.selectedDate;
        var initialInputText = Date_1.getDateFormatter(_this.props.displayFormat)(selectedDate);
        _this.state = {
            inputText: initialInputText,
        };
        return _this;
    }
    DateInputField.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevState.isDatePickerOpen && !this.state.isDatePickerOpen) {
            this.onClosed();
        }
        else if (prevProps.displayFormat !== this.props.displayFormat) {
            this.setState({
                inputText: Date_1.getDateFormatter(this.props.displayFormat)(this.props.selectedDate)
            });
        }
        else if (!prevProps.errorText && this.props.errorText) {
            this.close();
        }
    };
    DateInputField.prototype.onClosed = function () {
        if (this.inputElement && window.document.body.contains(this.inputElement)) {
            this.inputElement.focus();
        }
    };
    DateInputField.prototype.open = function () {
        this.toggleDatePicker(true);
    };
    DateInputField.prototype.close = function () {
        this.toggleDatePicker(false);
    };
    DateInputField.prototype.toggleDatePicker = function (open) {
        if (open === void 0) { open = !this.state.isDatePickerOpen; }
        if (!this.props.hasDatePicker || open === this.state.isDatePickerOpen) {
            return;
        }
        this.setState({ isDatePickerOpen: open });
    };
    DateInputField.prototype.confirmDate = function (date, reformatInput) {
        if (reformatInput) {
            this.setState({ inputText: this.getFormattedDate(date) });
        }
        this.triggerOnConfirm(date);
        this.close();
    };
    DateInputField.prototype.triggerOnConfirm = function (date) {
        if (this.props.onConfirm) {
            this.props.onConfirm(date);
        }
    };
    DateInputField.prototype.triggerOnChange = function (date) {
        if (this.props.onChange) {
            this.props.onChange(date);
        }
    };
    DateInputField.prototype.getFormattedDate = function (date) {
        return Date_1.getDateFormatter(this.props.displayFormat)(date);
    };
    DateInputField.prototype.isOutlineTextField = function () {
        return this.props.dateInputFieldType === DateInputFieldType.Outline;
    };
    DateInputField.prototype.renderOutlineTextField = function (outlineTextFieldProps) {
        return (React.createElement(React.Fragment, null,
            React.createElement(OutlineTextFieldWidget_1.OutlineTextFieldWidget, tslib_1.__assign({}, outlineTextFieldProps)),
            this.renderIcon()));
    };
    DateInputField.prototype.renderLineTextField = function (lineTextFieldProps) {
        return (React.createElement(React.Fragment, null,
            React.createElement(LineTextFieldWidget_1.LineTextFieldWidget, tslib_1.__assign({}, lineTextFieldProps)),
            this.renderIcon()));
    };
    DateInputField.prototype.renderTextField = function () {
        var dateParsingErrorText = Localize_1.Messages.enterValidDate();
        var parsedDate = Date_1.getParsedDate(this.state.inputText, this.props.terminus);
        var errorText = parsedDate ? this.props.errorText : dateParsingErrorText;
        var hasError = !(parsedDate && !this.props.errorText);
        var numCols = 7;
        var containerStyle = tslib_1.__assign({}, this.props.style, { 
            // maxWidth is the width of the picker, because input width cannot be wider than the picker.
            // cell width (30px) * colNum + Spacing.DefaultSpace * 2 + Sizing.BorderWidth * 2
            maxWidth: 30 * numCols + TabStyles_1.TabStyles.Spacing.DefaultSpace * 2 + TabStyles_1.TabStyles.Sizing.BorderWidth * 2, position: 'relative' });
        var inputWithPopupStyle = {
            // leaving space for dropdown button
            paddingRight: 24,
        };
        var textFieldProps = {
            containerStyle: containerStyle,
            disabled: this.props.disabled,
            handleChange: this.handleChange,
            handleEnter: this.handleInputEnter,
            handleEscape: this.handleEscape,
            inputRef: this.handleInputRef,
            inputStyle: this.props.hasDatePicker ? inputWithPopupStyle : null,
            testId: this.props.testId + "-text-field",
            text: this.state.inputText,
        };
        var outlineTextFieldProps = tslib_1.__assign({}, textFieldProps, { displayErrorTextSection: true, errorText: errorText,
            hasError: hasError });
        var lineTextFieldProps = tslib_1.__assign({}, textFieldProps, { errorText: errorText });
        var ariaAttributes = this.props.hasDatePicker ? {
            'aria-expanded': !!this.state.isDatePickerOpen,
            'aria-haspopup': 'dialog',
            'aria-owns': this.datePickerId,
            role: 'combobox',
        } : undefined;
        return (React.createElement("div", tslib_1.__assign({ onBlur: this.handleBlur, onKeyDown: this.handleInputKeyDown, style: containerStyle }, ariaAttributes), this.isOutlineTextField() ? this.renderOutlineTextField(outlineTextFieldProps) : this.renderLineTextField(lineTextFieldProps)));
    };
    DateInputField.prototype.renderIcon = function () {
        var hasDatePicker = this.props.hasDatePicker;
        if (!hasDatePicker) {
            return null;
        }
        var baseStyle = {
            display: 'inline-flex',
            // height of the divider
            height: Sizing.RowHeight - 2 * Sizing.BorderWidth,
            position: 'absolute',
            top: Sizing.BorderWidth,
        };
        var lineStyle = tslib_1.__assign({}, baseStyle, { right: 0 });
        var outlineStyle = tslib_1.__assign({}, baseStyle, { borderLeft: "1px solid " + Colors.L3, boxSizing: 'border-box', right: 2 * Sizing.BorderWidth });
        var getContent = function (icon) {
            return function (state) {
                var imgProps = {
                    draggable: false,
                    src: Icons_1.encodeSvg(icon.icon(state))
                };
                return React.createElement(DomWidgets_1.Img, tslib_1.__assign({}, imgProps));
            };
        };
        var buttonProps = {
            buttonType: ButtonWidget_1.ButtonType.IconOutline,
            disabled: this.props.disabled,
            disableTabAccessibility: true,
            getContent: this.isOutlineTextField() ? getContent(Icons_1.OutlineDropdownArrowIcon) : getContent(Icons_1.LineAndTextDropdownArrowIcon),
            handleClick: this.handleButtonClick,
            style: this.isOutlineTextField() ? outlineStyle : lineStyle,
            testId: this.props.testId + "-button",
        };
        return (React.createElement(ButtonWidget_1.ButtonWidget, tslib_1.__assign({}, buttonProps, { ref: this.handleDropdownButtonRef })));
    };
    DateInputField.prototype.renderOverlay = function () {
        var datePicker = this.state.isDatePickerOpen && this.props.hasDatePicker && this.renderDatePicker();
        if (!datePicker || !this.inputElement) {
            return null;
        }
        var style = {
            boxShadow: Shadow.Standard,
            lineHeight: 'normal',
            outline: 'none',
        };
        var datePickerAriaAttr = {
            id: this.datePickerId,
            role: 'dialog'
        };
        return (React.createElement(Overlay_1.Overlay, { allowAutoPosition: true, anchorEl: this.inputElement, anchorOrigin: { vertical: Overlay_1.VerticalOriginOption.bottom, horizontal: Overlay_1.HorizontalOriginOption.left }, stackingRootId: this.props.stackingRootId, portalEventTrapOverrides: {
                onKeyUp: this.handleOverlayKeyUp
            }, zIndex: this.props.zIndex },
            React.createElement("div", tslib_1.__assign({ onBlur: this.handlePickerBlur, ref: this.handleOverlayRef, style: style, tabIndex: -1 }, datePickerAriaAttr), datePicker)));
    };
    DateInputField.prototype.render = function () {
        return (React.createElement("div", { "data-tb-test-id": this.props.testId },
            this.renderTextField(),
            this.renderOverlay()));
    };
    DateInputField.defaultProps = {
        displayFormat: DateFormat.ShortDateWithFullYear,
        hasDatePicker: true,
        selectedDate: new Date(),
        showDatePickerWeekNumbers: false,
    };
    return DateInputField;
}(React.Component));
exports.DateInputField = DateInputField;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var typestyle_1 = __webpack_require__(35);
var Icons_1 = __webpack_require__(6);
var TabStyles_1 = __webpack_require__(2);
var DomUtil_1 = __webpack_require__(7);
var FocusTrap_1 = __webpack_require__(75);
var Overlay_1 = __webpack_require__(10);
var PointerEvents_1 = __webpack_require__(13);
var DomWidgets_1 = __webpack_require__(4);
var DropdownButtonStyles = __webpack_require__(172);
var DropdownButtonType;
(function (DropdownButtonType) {
    DropdownButtonType[DropdownButtonType["Outline"] = 0] = "Outline";
    DropdownButtonType[DropdownButtonType["Line"] = 1] = "Line";
    DropdownButtonType[DropdownButtonType["Text"] = 2] = "Text";
    DropdownButtonType[DropdownButtonType["Icon"] = 3] = "Icon";
})(DropdownButtonType = exports.DropdownButtonType || (exports.DropdownButtonType = {}));
/** careful, these assume numeric values for DropdownButtonType enum */
var TypeNames = ['outline', 'line', 'text', 'icon'];
var IconTypes = [Icons_1.OutlineDropdownArrowIcon, Icons_1.LineAndTextDropdownArrowIcon, Icons_1.LineAndTextDropdownArrowIcon, Icons_1.IconDropdownArrowIcon];
var DropdownButton = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownButton, _super);
    function DropdownButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { isOpen: false };
        _this.overlayId = DomUtil_1.generateId();
        _this.handleDocumentMousedown = function (e) {
            var target = e.target;
            var overlayElem = document.getElementById(_this.overlayId);
            if (!(overlayElem.contains(target) || _this.dropdownButtonElement.contains(target))) {
                _this.close();
            }
        };
        _this.handleClick = function (e) {
            _this.toggle();
        };
        _this.handleFocusBlur = function (e) {
            _this.setState({ focus: e.type === 'focus' });
        };
        _this.handleHover = function (e) {
            _this.setState({ hover: e.type === 'mouseover' });
        };
        _this.handleKeyDown = function (e) {
            switch (e.key) {
                case ' ':
                    if (!e.repeat) {
                        _this.toggle();
                    }
                    break;
                default:
                    // swallow ESC events that plausibly originate from focus being returned to the button after the popup closed
                    if (e.key === 'Escape' && e.repeat) {
                        break;
                    }
                    if (_this.props.onKeyDown) {
                        _this.props.onKeyDown(e);
                    }
                    return;
            }
            e.preventDefault();
            e.stopPropagation();
        };
        _this.handlePortalKeyDown = function (e) {
            if (e.key === 'Escape' && _this.state.isOpen) {
                _this.close();
                e.preventDefault();
            }
            e.stopPropagation();
        };
        _this.handleButtonRef = function (ref) {
            _this.dropdownButtonElement = ref;
        };
        _this.close = function () {
            _this.toggle(false);
        };
        _this.onOpened = function () {
            document.addEventListener('mousedown', _this.handleDocumentMousedown, { capture: true });
            if (_this.props.onOpen) {
                var rect = _this.dropdownButtonElement.getBoundingClientRect();
                _this.props.onOpen(_this.close, rect);
            }
        };
        _this.onClosed = function () {
            _this.removeDocumentMousedownListener();
            if (_this.props.focusOnClose) {
                DomUtil_1.timeoutFocus(_this.dropdownButtonElement);
            }
            if (_this.props.onClose) {
                _this.props.onClose();
            }
        };
        return _this;
    }
    DropdownButton.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.props.disabled && this.state.isOpen) {
            this.close();
        }
        else if (!prevState.isOpen && this.state.isOpen) {
            this.onOpened();
        }
        else if (prevState.isOpen && !this.state.isOpen) {
            this.onClosed();
        }
    };
    DropdownButton.prototype.componentWillUnmount = function () {
        this.removeDocumentMousedownListener();
    };
    DropdownButton.prototype.toggle = function (open) {
        if (open === void 0) { open = !this.state.isOpen; }
        if (this.props.disabled && open) {
            return;
        }
        if (open === this.state.isOpen) {
            return;
        }
        this.setState({ isOpen: open });
    };
    DropdownButton.prototype.removeDocumentMousedownListener = function () {
        document.removeEventListener('mousedown', this.handleDocumentMousedown, { capture: true });
    };
    DropdownButton.prototype.render = function () {
        var className = typestyle_1.classes(this.props.className, DropdownButtonStyles.ClassName, TypeNames[this.props.type], this.props.useDarkStyling && 'dark');
        return (React.createElement(PointerEvents_1.PointerEventWrapper, { pointerClick: this.handleClick },
            React.createElement("div", { "aria-atomic": true, "aria-disabled": this.props.disabled, "aria-expanded": !!this.state.isOpen, "aria-haspopup": this.props['aria-haspopup'] || true, "aria-labelledby": this.props['aria-labelledby'], "aria-live": this.state.focus ? 'assertive' : 'off', "aria-owns": this.overlayId, "aria-relevant": 'text', className: className, "data-label": this.props.label, "data-tb-test-id": this.props.testId, id: this.props.id, onBlur: this.handleFocusBlur, onFocus: this.handleFocusBlur, onKeyDown: this.handleKeyDown, onKeyPress: this.props.onKeyPress, onMouseOut: this.handleHover, onMouseOver: this.handleHover, ref: this.handleButtonRef, role: 'button', style: this.props.style, tabIndex: 0 },
                this.renderChildren(),
                this.renderIcon(),
                this.renderOverlay())));
    };
    DropdownButton.prototype.renderChildren = function () {
        if (!this.props.children) {
            return null;
        }
        return React.createElement("span", { className: DropdownButtonStyles.ChildrenClassName }, this.props.children);
    };
    DropdownButton.prototype.renderIcon = function () {
        var svgIcon = IconTypes[this.props.type];
        var src = svgIcon.icon({
            active: this.state.active || this.state.isOpen,
            disabled: this.props.disabled,
            hover: this.state.hover,
            onDarkBackground: this.props.useDarkStyling,
        });
        return React.createElement(DomWidgets_1.Img, { src: src, style: { margin: this.props.children ? undefined : "0 auto" } });
    };
    DropdownButton.prototype.renderOverlay = function () {
        var popupContent = this.state.isOpen && !!this.props.renderPopupContent && this.props.renderPopupContent();
        if (!popupContent || !this.dropdownButtonElement) {
            return null;
        }
        var minWidth = this.dropdownButtonElement.getBoundingClientRect().width;
        var style = {
            background: 'white',
            border: "1px solid " + TabStyles_1.TabStyles.Colors.L6,
            boxShadow: TabStyles_1.TabStyles.Shadow.Standard,
            boxSizing: 'border-box',
            lineHeight: 'normal',
            minWidth: minWidth,
        };
        return (React.createElement(Overlay_1.Overlay, { allowAutoPosition: true, anchorEl: this.dropdownButtonElement, anchorOrigin: { vertical: Overlay_1.VerticalOriginOption.bottom, horizontal: Overlay_1.HorizontalOriginOption.left }, autoFocus: true, portalEventTrapOverrides: { onKeyDown: this.handlePortalKeyDown }, stackingRootId: this.props.stackingRootId, topFromOverlaidPosition: -1, zIndex: this.props.zIndex },
            React.createElement(FocusTrap_1.FocusTrap, null,
                React.createElement("div", { id: this.overlayId, style: style }, popupContent))));
    };
    DropdownButton.defaultProps = { focusOnClose: true };
    return DropdownButton;
}(React.Component));
exports.DropdownButton = DropdownButton;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The unique id is used for unique hashes.
 */
var uniqueId = 0;
/**
 * Tag styles with this string to get unique hashes.
 */
exports.IS_UNIQUE = '__DO_NOT_DEDUPE_STYLE__';
var upperCasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var interpolatePattern = /&/g;
var escapePattern = /[ !#$%&()*+,./;<=>?@[\]^`{|}~"'\\]/g;
var propLower = function (m) { return "-" + m.toLowerCase(); };
/**
 * CSS properties that are valid unit-less numbers.
 */
var cssNumberProperties = [
    'animation-iteration-count',
    'box-flex',
    'box-flex-group',
    'column-count',
    'counter-increment',
    'counter-reset',
    'flex',
    'flex-grow',
    'flex-positive',
    'flex-shrink',
    'flex-negative',
    'font-weight',
    'line-clamp',
    'line-height',
    'opacity',
    'order',
    'orphans',
    'tab-size',
    'widows',
    'z-index',
    'zoom',
    // SVG properties.
    'fill-opacity',
    'stroke-dashoffset',
    'stroke-opacity',
    'stroke-width'
];
/**
 * Map of css number properties.
 */
var CSS_NUMBER = Object.create(null);
// Add vendor prefixes to all unit-less properties.
for (var _i = 0, _a = ['-webkit-', '-ms-', '-moz-', '-o-', '']; _i < _a.length; _i++) {
    var prefix = _a[_i];
    for (var _b = 0, cssNumberProperties_1 = cssNumberProperties; _b < cssNumberProperties_1.length; _b++) {
        var property = cssNumberProperties_1[_b];
        CSS_NUMBER[prefix + property] = true;
    }
}
/**
 * Escape a CSS class name.
 */
exports.escape = function (str) { return str.replace(escapePattern, '\\$&'); };
/**
 * Transform a JavaScript property into a CSS property.
 */
function hyphenate(propertyName) {
    return propertyName
        .replace(upperCasePattern, propLower)
        .replace(msPattern, '-ms-'); // Internet Explorer vendor prefix.
}
exports.hyphenate = hyphenate;
/**
 * Generate a hash value from a string.
 */
function stringHash(str) {
    var value = 5381;
    var len = str.length;
    while (len--)
        value = (value * 33) ^ str.charCodeAt(len);
    return (value >>> 0).toString(36);
}
exports.stringHash = stringHash;
/**
 * Transform a style string to a CSS string.
 */
function styleToString(key, value) {
    if (typeof value === 'number' && value !== 0 && !CSS_NUMBER[key]) {
        return key + ":" + value + "px";
    }
    return key + ":" + value;
}
/**
 * Sort an array of tuples by first value.
 */
function sortTuples(value) {
    return value.sort(function (a, b) { return a[0] > b[0] ? 1 : -1; });
}
/**
 * Categorize user styles.
 */
function parseStyles(styles, hasNestedStyles) {
    var properties = [];
    var nestedStyles = [];
    var isUnique = false;
    // Sort keys before adding to styles.
    for (var _i = 0, _a = Object.keys(styles); _i < _a.length; _i++) {
        var key = _a[_i];
        var value = styles[key];
        if (value !== null && value !== undefined) {
            if (key === exports.IS_UNIQUE) {
                isUnique = true;
            }
            else if (typeof value === 'object' && !Array.isArray(value)) {
                nestedStyles.push([key.trim(), value]);
            }
            else {
                properties.push([hyphenate(key.trim()), value]);
            }
        }
    }
    return {
        styleString: stringifyProperties(sortTuples(properties)),
        nestedStyles: hasNestedStyles ? nestedStyles : sortTuples(nestedStyles),
        isUnique: isUnique
    };
}
/**
 * Stringify an array of property tuples.
 */
function stringifyProperties(properties) {
    return properties.map(function (_a) {
        var name = _a[0], value = _a[1];
        if (!Array.isArray(value))
            return styleToString(name, value);
        return value.map(function (x) { return styleToString(name, x); }).join(';');
    }).join(';');
}
/**
 * Interpolate CSS selectors.
 */
function interpolate(selector, parent) {
    if (selector.indexOf('&') > -1) {
        return selector.replace(interpolatePattern, parent);
    }
    return parent + " " + selector;
}
/**
 * Recursive loop building styles with deferred selectors.
 */
function stylize(cache, selector, styles, list, parent) {
    var _a = parseStyles(styles, !!selector), styleString = _a.styleString, nestedStyles = _a.nestedStyles, isUnique = _a.isUnique;
    var pid = styleString;
    if (selector.charCodeAt(0) === 64 /* @ */) {
        var rule = cache.add(new Rule(selector, parent ? undefined : styleString, cache.hash));
        // Nested styles support (e.g. `.foo > @media > .bar`).
        if (styleString && parent) {
            var style = rule.add(new Style(styleString, rule.hash, isUnique ? "u" + (++uniqueId).toString(36) : undefined));
            list.push([parent, style]);
        }
        for (var _i = 0, nestedStyles_1 = nestedStyles; _i < nestedStyles_1.length; _i++) {
            var _b = nestedStyles_1[_i], name = _b[0], value = _b[1];
            pid += name + stylize(rule, name, value, list, parent);
        }
    }
    else {
        var key = parent ? interpolate(selector, parent) : selector;
        if (styleString) {
            var style = cache.add(new Style(styleString, cache.hash, isUnique ? "u" + (++uniqueId).toString(36) : undefined));
            list.push([key, style]);
        }
        for (var _c = 0, nestedStyles_2 = nestedStyles; _c < nestedStyles_2.length; _c++) {
            var _d = nestedStyles_2[_c], name = _d[0], value = _d[1];
            pid += name + stylize(cache, name, value, list, key);
        }
    }
    return pid;
}
/**
 * Register all styles, but collect for selector interpolation using the hash.
 */
function composeStyles(container, selector, styles, isStyle, displayName) {
    var cache = new Cache(container.hash);
    var list = [];
    var pid = stylize(cache, selector, styles, list);
    var hash = "f" + cache.hash(pid);
    var id = displayName ? displayName + "_" + hash : hash;
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var _a = list_1[_i], selector_1 = _a[0], style = _a[1];
        var key = isStyle ? interpolate(selector_1, "." + exports.escape(id)) : selector_1;
        style.add(new Selector(key, style.hash, undefined, pid));
    }
    return { cache: cache, pid: pid, id: id };
}
/**
 * Cache to list to styles.
 */
function join(arr) {
    var res = '';
    for (var i = 0; i < arr.length; i++)
        res += arr[i];
    return res;
}
/**
 * Noop changes.
 */
var noopChanges = {
    add: function () { return undefined; },
    change: function () { return undefined; },
    remove: function () { return undefined; }
};
/**
 * Implement a cache/event emitter.
 */
var Cache = /** @class */ (function () {
    function Cache(hash, changes) {
        if (hash === void 0) { hash = stringHash; }
        if (changes === void 0) { changes = noopChanges; }
        this.hash = hash;
        this.changes = changes;
        this.sheet = [];
        this.changeId = 0;
        this._keys = [];
        this._children = Object.create(null);
        this._counters = Object.create(null);
    }
    Cache.prototype.add = function (style) {
        var count = this._counters[style.id] || 0;
        var item = this._children[style.id] || style.clone();
        this._counters[style.id] = count + 1;
        if (count === 0) {
            this._children[item.id] = item;
            this._keys.push(item.id);
            this.sheet.push(item.getStyles());
            this.changeId++;
            this.changes.add(item, this._keys.length - 1);
        }
        else {
            // Check if contents are different.
            if (item.getIdentifier() !== style.getIdentifier()) {
                throw new TypeError("Hash collision: " + style.getStyles() + " === " + item.getStyles());
            }
            var oldIndex = this._keys.indexOf(style.id);
            var newIndex = this._keys.length - 1;
            var prevChangeId = this.changeId;
            if (oldIndex !== newIndex) {
                this._keys.splice(oldIndex, 1);
                this._keys.push(style.id);
                this.changeId++;
            }
            if (item instanceof Cache && style instanceof Cache) {
                var prevChangeId_1 = item.changeId;
                item.merge(style);
                if (item.changeId !== prevChangeId_1) {
                    this.changeId++;
                }
            }
            if (this.changeId !== prevChangeId) {
                if (oldIndex === newIndex) {
                    this.sheet.splice(oldIndex, 1, item.getStyles());
                }
                else {
                    this.sheet.splice(oldIndex, 1);
                    this.sheet.splice(newIndex, 0, item.getStyles());
                }
                this.changes.change(item, oldIndex, newIndex);
            }
        }
        return item;
    };
    Cache.prototype.remove = function (style) {
        var count = this._counters[style.id];
        if (count > 0) {
            this._counters[style.id] = count - 1;
            var item = this._children[style.id];
            var index = this._keys.indexOf(item.id);
            if (count === 1) {
                delete this._counters[style.id];
                delete this._children[style.id];
                this._keys.splice(index, 1);
                this.sheet.splice(index, 1);
                this.changeId++;
                this.changes.remove(item, index);
            }
            else if (item instanceof Cache && style instanceof Cache) {
                var prevChangeId = item.changeId;
                item.unmerge(style);
                if (item.changeId !== prevChangeId) {
                    this.sheet.splice(index, 1, item.getStyles());
                    this.changeId++;
                    this.changes.change(item, index, index);
                }
            }
        }
    };
    Cache.prototype.merge = function (cache) {
        for (var _i = 0, _a = cache._keys; _i < _a.length; _i++) {
            var id = _a[_i];
            this.add(cache._children[id]);
        }
        return this;
    };
    Cache.prototype.unmerge = function (cache) {
        for (var _i = 0, _a = cache._keys; _i < _a.length; _i++) {
            var id = _a[_i];
            this.remove(cache._children[id]);
        }
        return this;
    };
    Cache.prototype.clone = function () {
        return new Cache(this.hash).merge(this);
    };
    return Cache;
}());
exports.Cache = Cache;
/**
 * Selector is a dumb class made to represent nested CSS selectors.
 */
var Selector = /** @class */ (function () {
    function Selector(selector, hash, id, pid) {
        if (id === void 0) { id = "s" + hash(selector); }
        if (pid === void 0) { pid = ''; }
        this.selector = selector;
        this.hash = hash;
        this.id = id;
        this.pid = pid;
    }
    Selector.prototype.getStyles = function () {
        return this.selector;
    };
    Selector.prototype.getIdentifier = function () {
        return this.pid + "." + this.selector;
    };
    Selector.prototype.clone = function () {
        return new Selector(this.selector, this.hash, this.id, this.pid);
    };
    return Selector;
}());
exports.Selector = Selector;
/**
 * The style container registers a style string with selectors.
 */
var Style = /** @class */ (function (_super) {
    __extends(Style, _super);
    function Style(style, hash, id) {
        if (id === void 0) { id = "c" + hash(style); }
        var _this = _super.call(this, hash) || this;
        _this.style = style;
        _this.hash = hash;
        _this.id = id;
        return _this;
    }
    Style.prototype.getStyles = function () {
        return this.sheet.join(',') + "{" + this.style + "}";
    };
    Style.prototype.getIdentifier = function () {
        return this.style;
    };
    Style.prototype.clone = function () {
        return new Style(this.style, this.hash, this.id).merge(this);
    };
    return Style;
}(Cache));
exports.Style = Style;
/**
 * Implement rule logic for style output.
 */
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule(rule, style, hash, id, pid) {
        if (style === void 0) { style = ''; }
        if (id === void 0) { id = "a" + hash(rule + "." + style); }
        if (pid === void 0) { pid = ''; }
        var _this = _super.call(this, hash) || this;
        _this.rule = rule;
        _this.style = style;
        _this.hash = hash;
        _this.id = id;
        _this.pid = pid;
        return _this;
    }
    Rule.prototype.getStyles = function () {
        return this.rule + "{" + this.style + join(this.sheet) + "}";
    };
    Rule.prototype.getIdentifier = function () {
        return this.pid + "." + this.rule + "." + this.style;
    };
    Rule.prototype.clone = function () {
        return new Rule(this.rule, this.style, this.hash, this.id, this.pid).merge(this);
    };
    return Rule;
}(Cache));
exports.Rule = Rule;
/**
 * The FreeStyle class implements the API for everything else.
 */
var FreeStyle = /** @class */ (function (_super) {
    __extends(FreeStyle, _super);
    function FreeStyle(hash, debug, id, changes) {
        if (hash === void 0) { hash = stringHash; }
        if (debug === void 0) { debug = typeof process !== 'undefined' && process.env['NODE_ENV'] !== 'production'; }
        if (id === void 0) { id = "f" + (++uniqueId).toString(36); }
        var _this = _super.call(this, hash, changes) || this;
        _this.hash = hash;
        _this.debug = debug;
        _this.id = id;
        return _this;
    }
    FreeStyle.prototype.registerStyle = function (styles, displayName) {
        var debugName = this.debug ? displayName : undefined;
        var _a = composeStyles(this, '&', styles, true, debugName), cache = _a.cache, id = _a.id;
        this.merge(cache);
        return id;
    };
    FreeStyle.prototype.registerKeyframes = function (keyframes, displayName) {
        return this.registerHashRule('@keyframes', keyframes, displayName);
    };
    FreeStyle.prototype.registerHashRule = function (prefix, styles, displayName) {
        var debugName = this.debug ? displayName : undefined;
        var _a = composeStyles(this, '', styles, false, debugName), cache = _a.cache, pid = _a.pid, id = _a.id;
        var rule = new Rule(prefix + " " + exports.escape(id), undefined, this.hash, undefined, pid);
        this.add(rule.merge(cache));
        return id;
    };
    FreeStyle.prototype.registerRule = function (rule, styles) {
        this.merge(composeStyles(this, rule, styles, false).cache);
    };
    FreeStyle.prototype.registerCss = function (styles) {
        this.merge(composeStyles(this, '', styles, false).cache);
    };
    FreeStyle.prototype.getStyles = function () {
        return join(this.sheet);
    };
    FreeStyle.prototype.getIdentifier = function () {
        return this.id;
    };
    FreeStyle.prototype.clone = function () {
        return new FreeStyle(this.hash, this.debug, this.id, this.changes).merge(this);
    };
    return FreeStyle;
}(Cache));
exports.FreeStyle = FreeStyle;
/**
 * Exports a simple function to create a new instance.
 */
function create(hash, debug, changes) {
    return new FreeStyle(hash, debug, undefined, changes);
}
exports.create = create;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(169)))

/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return raf; });
/* harmony export (immutable) */ __webpack_exports__["a"] = classes;
/* harmony export (immutable) */ __webpack_exports__["b"] = extend;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return media; });
/** Raf for node + browser */
var raf = typeof requestAnimationFrame === 'undefined'
    /**
     * Make sure setTimeout is always invoked with
     * `this` set to `window` or `global` automatically
     **/
    ? function (cb) { return setTimeout(cb); }
    /**
     * Make sure window.requestAnimationFrame is always invoked with `this` window
     * We might have raf without window in case of `raf/polyfill` (recommended by React)
     **/
    : typeof window === 'undefined'
        ? requestAnimationFrame
        : requestAnimationFrame.bind(window);
/**
 * Utility to join classes conditionally
 */
function classes() {
    var classes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        classes[_i] = arguments[_i];
    }
    return classes.filter(function (c) { return !!c; }).join(' ');
}
/**
 * Merges various styles into a single style object.
 * Note: if two objects have the same property the last one wins
 */
function extend() {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    /** The final result we will return */
    var result = {};
    for (var _a = 0, objects_1 = objects; _a < objects_1.length; _a++) {
        var object = objects_1[_a];
        if (object == null || object === false) {
            continue;
        }
        for (var key in object) {
            /** Falsy values except a explicit 0 is ignored */
            var val = object[key];
            if (!val && val !== 0) {
                continue;
            }
            /** if nested media or pseudo selector */
            if (key === '$nest' && val) {
                result[key] = result['$nest'] ? extend(result['$nest'], val) : val;
            }
            else if ((key.indexOf('&') !== -1 || key.indexOf('@media') === 0)) {
                result[key] = result[key] ? extend(result[key], val) : val;
            }
            else {
                result[key] = val;
            }
        }
    }
    return result;
}
/**
 * Utility to help customize styles with media queries. e.g.
 * ```
 * style(
 *  media({maxWidth:500}, {color:'red'})
 * )
 * ```
 */
var media = function (mediaQuery) {
    var objects = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        objects[_i - 1] = arguments[_i];
    }
    var mediaQuerySections = [];
    if (mediaQuery.type)
        mediaQuerySections.push(mediaQuery.type);
    if (mediaQuery.orientation)
        mediaQuerySections.push("(orientation: " + mediaQuery.orientation + ")");
    if (mediaQuery.minWidth)
        mediaQuerySections.push("(min-width: " + mediaLength(mediaQuery.minWidth) + ")");
    if (mediaQuery.maxWidth)
        mediaQuerySections.push("(max-width: " + mediaLength(mediaQuery.maxWidth) + ")");
    if (mediaQuery.minHeight)
        mediaQuerySections.push("(min-height: " + mediaLength(mediaQuery.minHeight) + ")");
    if (mediaQuery.maxHeight)
        mediaQuerySections.push("(max-height: " + mediaLength(mediaQuery.maxHeight) + ")");
    var stringMediaQuery = "@media " + mediaQuerySections.join(' and ');
    var object = {
        $nest: (_a = {},
            _a[stringMediaQuery] = extend.apply(void 0, objects),
            _a)
    };
    return object;
    var _a;
};
var mediaLength = function (value) {
    return typeof value === 'string' ? value : value + "px";
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(0);
function handleFocus(e) {
    e.stopPropagation();
}
function handleBlur(e) {
    var relatedTarget = (e.relatedTarget || document.activeElement);
    if (relatedTarget && !e.currentTarget.contains(relatedTarget)) {
        e.target.focus();
        e.stopPropagation();
    }
}
exports.FocusTrap = function (props) { return React.createElement("div", { onBlur: handleBlur, onFocus: handleFocus }, props.children); };


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DomUtil_1 = __webpack_require__(7);
var FindIndex_1 = __webpack_require__(15);
var PointerEvents_1 = __webpack_require__(13);
var ListItemUtils_1 = __webpack_require__(25);
var ListStyles_1 = __webpack_require__(77);
var List = /** @class */ (function (_super) {
    tslib_1.__extends(List, _super);
    function List() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.listElement = null;
        _this.itemTextContent = [];
        _this.typeAheadQuery = '';
        _this.typeAheadTimeoutHandle = 0;
        _this.state = { activeItemIndex: ListItemUtils_1.findItemWithValue(_this.props.items, _this.props.selectedValue) };
        _this.handleFocus = function (e) {
            if (e.target !== e.currentTarget) {
                var closestOption = DomUtil_1.closest(e.target, '[role="option"]');
                if (!closestOption) {
                    return;
                }
                var activeItemIndex = parseInt(closestOption.getAttribute('data-itemindex'), 10);
                if (!isNaN(activeItemIndex) && activeItemIndex !== _this.state.activeItemIndex) {
                    _this.setState({ activeItemIndex: activeItemIndex });
                }
            }
        };
        _this.handleClick = function (e) {
            _this.handleItemSelection(e.target);
        };
        _this.handleKeyDown = function (e) {
            var items = _this.props.items;
            var activeItemIndex = _this.state.activeItemIndex;
            switch (e.key) {
                case 'ArrowUp':
                    activeItemIndex = ListItemUtils_1.findFocusableItemIndex(items, activeItemIndex, -1);
                    break;
                case 'ArrowDown':
                    activeItemIndex = ListItemUtils_1.findFocusableItemIndex(items, activeItemIndex, +1);
                    break;
                case 'Home':
                    activeItemIndex = ListItemUtils_1.findFocusableItemIndex(items, -1, 1);
                    break;
                case 'End':
                    activeItemIndex = ListItemUtils_1.findFocusableItemIndex(items, items.length, -1);
                    break;
                case ' ':
                    _this.handleItemSelection(e.target);
                    break;
                case 'Enter':
                    if (_this.props.selectOnEnterKey) {
                        _this.handleItemSelection(e.target);
                        break;
                    }
                    return;
                default:
                    return;
            }
            e.stopPropagation();
            e.preventDefault();
            if (activeItemIndex !== _this.state.activeItemIndex) {
                _this.setState({ activeItemIndex: activeItemIndex });
            }
        };
        _this.handleKeyPress = function (e) {
            if (e.key === ' ') {
                return;
            }
            window.clearTimeout(_this.typeAheadTimeoutHandle);
            _this.typeAheadTimeoutHandle = window.setTimeout(_this.resetQuery, 500);
            _this.typeAheadQuery += e.key;
            var query = _this.typeAheadQuery.toLowerCase();
            var activeItemIndex = FindIndex_1.findIndex(_this.itemTextContent, function (text, itemIndex) {
                return ListItemUtils_1.isFocusableItem(_this.props.items[itemIndex]) && text.toLowerCase().indexOf(query) === 0;
            }, _this.state.activeItemIndex + (query.length === 1 ? 1 : 0));
            if (activeItemIndex >= 0) {
                _this.setState({ activeItemIndex: activeItemIndex });
            }
        };
        _this.handleListRef = function (ref) {
            _this.listElement = ref;
        };
        _this.resetQuery = function () {
            _this.typeAheadQuery = '';
        };
        return _this;
    }
    List.prototype.componentDidMount = function () {
        this.memoizeItemTextContent();
    };
    List.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevProps.items !== this.props.items) {
            this.memoizeItemTextContent();
        }
        if (prevState.activeItemIndex !== this.state.activeItemIndex) {
            this.syncFocus();
        }
    };
    List.prototype.handleItemSelection = function (target) {
        var itemNode = DomUtil_1.closest(target, '[role="option"]:not([aria-disabled="true"])');
        if (!this.props.onSelect || !itemNode) {
            return;
        }
        var value = itemNode.getAttribute('data-itemvalue');
        this.props.onSelect(value);
    };
    List.prototype.memoizeItemTextContent = function () {
        this.itemTextContent = [];
        var listNode = this.listElement;
        if (!listNode) {
            return;
        }
        var item;
        // tslint:disable-next-line:no-any
        for (var _i = 0, _a = listNode.children; _i < _a.length; _i++) {
            item = _a[_i];
            this.itemTextContent.push(item.textContent);
        }
    };
    List.prototype.syncFocus = function () {
        if (this.listElement && this.listElement.contains(document.activeElement)) {
            var activeItem = this.listElement.querySelector("[data-itemindex=\"" + this.state.activeItemIndex + "\"]");
            if (activeItem) {
                activeItem.focus();
            }
        }
    };
    List.prototype.renderItems = function (items, selectedValue, activeItemIndex) {
        if (!items) {
            return null;
        }
        var setsize = items.filter(function (item) { return !item.separator; }).length;
        var itemNodes = [];
        for (var index = 0, posinset = 0; index < items.length; index++) {
            var item = items[index];
            if (item.separator) {
                itemNodes.push(React.createElement("div", { className: ListStyles_1.separatorStyleClass, "data-tb-test-id": item.testId, key: index, role: 'separator' }));
            }
            else {
                posinset++; // aria-posinset starts counting from 1 and excludes separators
                itemNodes.push(React.createElement("div", { "aria-disabled": item.disabled, "aria-posinset": posinset, "aria-selected": selectedValue && item.value === selectedValue, "aria-setsize": setsize, className: ListStyles_1.listItemStyleClass, "data-itemindex": index, "data-itemvalue": item.value, "data-tb-test-id": item.testId, key: index, id: this.props.id ? this.props.id + "-" + item.value : undefined, role: 'option', tabIndex: index === activeItemIndex ? 0 : -1, title: item.tooltip },
                    React.createElement("span", { className: ListStyles_1.ellipsedStyleClass }, item.content || item.value)));
            }
        }
        return itemNodes;
    };
    List.prototype.render = function () {
        var _a = this.props, disableTabAccessibility = _a.disableTabAccessibility, items = _a.items, onSelect = _a.onSelect, selectedValue = _a.selectedValue, selectOnEnterKey = _a.selectOnEnterKey, testId = _a.testId, divProps = tslib_1.__rest(_a, ["disableTabAccessibility", "items", "onSelect", "selectedValue", "selectOnEnterKey", "testId"]);
        return (React.createElement(PointerEvents_1.PointerEventWrapper, { pointerClick: this.handleClick },
            React.createElement("div", tslib_1.__assign({}, divProps, { className: ListStyles_1.listStyleClass, "data-tb-test-id": testId, onFocus: this.handleFocus, onKeyDown: this.handleKeyDown, onKeyPress: this.handleKeyPress, ref: this.handleListRef, role: 'listbox' }), this.renderItems(items, selectedValue, disableTabAccessibility ? undefined : this.state.activeItemIndex))));
    };
    return List;
}(React.Component));
exports.List = List;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var typestyle_1 = __webpack_require__(35);
var TabStyles_1 = __webpack_require__(2);
var PreventUserSelect_1 = __webpack_require__(12);
var TextEllipsis_1 = __webpack_require__(16);
var Opacity = TabStyles_1.TabStyles.Opacity, Sizing = TabStyles_1.TabStyles.Sizing, Spacing = TabStyles_1.TabStyles.Spacing, Typography = TabStyles_1.TabStyles.Typography;
var _a = TabStyles_1.TabStyles.Colors, F2_5 = _a.F2_5, F3 = _a.F3;
exports.listStyleClass = typestyle_1.style(PreventUserSelect_1.PreventUserSelect, {
    color: Typography.Color.Primary,
    fontSize: Typography.Sizing.Default,
    lineHeight: 'normal',
    overflowY: 'auto',
    padding: Spacing.DefaultSpace,
    '-webkit-overflow-scrolling': 'touch',
});
exports.filteringListClass = typestyle_1.style({
    display: 'flex',
    flexDirection: 'column',
    lineHeight: 'normal',
    $nest: {
        '&.reverse': {
            flexDirection: 'column-reverse',
        },
    },
});
exports.listItemStyleClass = typestyle_1.style(PreventUserSelect_1.PreventUserSelect, {
    alignItems: 'center',
    display: 'flex',
    minHeight: Sizing.ListRowHeight,
    paddingLeft: Spacing.DefaultSpace,
    paddingRight: Spacing.DefaultSpace,
    $nest: {
        '&:hover, &[aria-selected="true"]': {
            backgroundColor: F2_5,
        },
        '&:focus': {
        // here to show the right precedence position for these styles if we use them later
        },
        '&:active': {
            backgroundColor: F3,
        },
        '&[aria-disabled="true"]': {
            backgroundColor: 'transparent',
            opacity: Opacity.Disabled,
        },
    },
});
exports.ellipsedStyleClass = typestyle_1.style({ flexGrow: 1 }, TextEllipsis_1.TextEllipsis);
exports.separatorStyleClass = typestyle_1.style({
    background: F3,
    height: 1,
    margin: '9.5px 0',
});


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var typestyle_1 = __webpack_require__(35);
var TabStyles_1 = __webpack_require__(2);
var DomUtil_1 = __webpack_require__(7);
var FindIndex_1 = __webpack_require__(15);
var SearchFieldWidget_1 = __webpack_require__(44);
var List_1 = __webpack_require__(76);
var ListItemUtils_1 = __webpack_require__(25);
var ListStyles_1 = __webpack_require__(77);
var searchFieldStyle = {
    margin: TabStyles_1.TabStyles.Spacing.SmallSpace
};
function findSelectedItem(selectedValue, items) {
    // not using `findSelectableItemIndex` because it doesn't wrap and skips the current value
    var selectedItemIndex = FindIndex_1.findIndex(items, function (item) { return ListItemUtils_1.isSelectableItem(item) && item.value === selectedValue; });
    return items[selectedItemIndex];
}
/**
 * Use `FilteringList` when it's necessary to have custom filtering logic, e.g. via a server request or for custom formatting
 * of the items based on filtering results. Otherwise most cases will probably just want `LocallyFilteringList`.
 */
var FilteringList = /** @class */ (function (_super) {
    tslib_1.__extends(FilteringList, _super);
    function FilteringList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.listId = DomUtil_1.generateId();
        _this.state = {};
        _this.handleFocusCapture = function (e) {
            if (_this.inputElement && e.target !== _this.inputElement) {
                _this.inputElement.focus();
            }
        };
        _this.clearInput = function () {
            if (_this.props.onFilterChange) {
                _this.setState({ selectedItem: undefined });
                _this.props.onFilterChange('');
            }
        };
        _this.handleKeyDown = function (e) {
            var items = _this.props.items;
            var selectedItemIndex = items.indexOf(_this.state.selectedItem);
            switch (e.key) {
                case 'Home':
                    _this.setState({ selectedItem: items[ListItemUtils_1.findSelectableItemIndex(items, -1, +1)] });
                    break;
                case 'End':
                    _this.setState({ selectedItem: items[ListItemUtils_1.findSelectableItemIndex(items, items.length, -1)] });
                    break;
                case 'ArrowUp':
                    _this.setState({ selectedItem: items[ListItemUtils_1.findSelectableItemIndex(items, selectedItemIndex, -1)] });
                    break;
                case 'ArrowDown':
                    _this.setState({ selectedItem: items[ListItemUtils_1.findSelectableItemIndex(items, selectedItemIndex, +1)] });
                    break;
                case 'ArrowLeft':
                case 'ArrowRight':
                    if (_this.inputElement && e.target !== _this.inputElement) {
                        _this.inputElement.focus();
                        break;
                    }
                    return;
                case 'Enter':
                    if (_this.props.onSelect && _this.state.selectedItem) {
                        _this.props.onSelect(_this.state.selectedItem.value);
                        break;
                    }
                    return;
                case 'Escape':
                    if (_this.props.searchText) {
                        // eat the keyDown event since the Search field will handle it in keyUp
                        break;
                    }
                    return;
                default:
                    return;
            }
            e.stopPropagation();
            e.preventDefault();
        };
        _this.handleDivRef = function (ref) {
            if (!ref) {
                _this.setState({ width: undefined });
            }
            else {
                // pin the width to prevent the widget from shrinking when items are filtered
                window.setTimeout(function () {
                    if (document.contains(ref)) {
                        _this.setState({ width: Math.ceil(ref.getBoundingClientRect().width) });
                    }
                });
            }
        };
        _this.handleSelect = function (value) {
            _this.setState({ selectedItem: findSelectedItem(value, _this.props.items) });
            if (_this.props.onSelect) {
                _this.props.onSelect(value);
            }
        };
        _this.updateInputRef = function (ref) {
            _this.inputElement = ref;
        };
        return _this;
    }
    FilteringList.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _a = this.props, items = _a.items, preserveSelection = _a.preserveSelection;
        var selectedItem = this.state.selectedItem;
        var prevSelectedItem = prevState.selectedItem || {};
        // preserve selection across item list updates
        if (prevProps.items !== items) {
            if (preserveSelection && selectedItem && prevSelectedItem.value === selectedItem.value) {
                this.setState({ selectedItem: findSelectedItem(selectedItem.value, items) });
            }
            else {
                this.setState({ selectedItem: undefined });
            }
        }
        // scroll the selected item into view
        if (selectedItem && ((prevSelectedItem.value !== selectedItem.value) || (prevProps.items !== items))) {
            var elem = document.getElementById(this.listId + "-" + selectedItem.value);
            if (elem) {
                elem.scrollIntoView({ block: 'nearest', behavior: 'auto' });
            }
        }
    };
    FilteringList.prototype.componentDidMount = function () {
        if (this.props.autoFocus) {
            DomUtil_1.timeoutFocus(this.inputElement);
        }
    };
    FilteringList.prototype.render = function () {
        // tslint:disable-next-line:max-line-length
        var _a = this.props, autoFocus = _a.autoFocus, children = _a.children, listTestId = _a.listTestId, id = _a.id, inputTestId = _a.inputTestId, onFilterChange = _a.onFilterChange, preserveSelection = _a.preserveSelection, reverse = _a.reverse, searchPlaceholder = _a.searchPlaceholder, searchText = _a.searchText, style = _a.style, listProps = tslib_1.__rest(_a, ["autoFocus", "children", "listTestId", "id", "inputTestId", "onFilterChange", "preserveSelection", "reverse", "searchPlaceholder", "searchText", "style"]);
        var selectedValue = this.state.selectedItem && this.state.selectedItem.value;
        return (React.createElement("div", { "aria-expanded": true, "aria-owns": this.listId, className: typestyle_1.classes(ListStyles_1.filteringListClass, reverse && 'reverse'), "data-tb-test-id": this.props.testId, id: id, onFocusCapture: this.handleFocusCapture, onKeyDown: this.handleKeyDown, ref: this.handleDivRef, role: 'combobox', style: tslib_1.__assign({ width: this.state.width }, style) },
            React.createElement(SearchFieldWidget_1.SearchFieldWidget, { "aria-activedescendant": selectedValue ? this.listId + "-" + selectedValue : undefined, "aria-controls": this.listId, containerStyle: searchFieldStyle, inputRef: this.updateInputRef, handleChange: this.props.onFilterChange, handleCancelSearch: this.clearInput, handleEscape: this.clearInput, placeholder: searchPlaceholder, text: searchText, testId: inputTestId }),
            children,
            React.createElement(List_1.List, tslib_1.__assign({}, listProps, { disableTabAccessibility: true, id: this.listId, onSelect: this.handleSelect, selectedValue: selectedValue, selectOnEnterKey: false, testId: listTestId }))));
    };
    FilteringList.defaultProps = {
        preserveSelection: true,
    };
    return FilteringList;
}(React.Component));
exports.FilteringList = FilteringList;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SharedWidgets_1 = __webpack_require__(46);
/**
 * Maintains media query lists that modify TabStyles and rerenders the widgets.
 */
var StyleMediaQueryManager = /** @class */ (function () {
    function StyleMediaQueryManager() {
    }
    StyleMediaQueryManager.setMediaStyleQueries = function (styleMediaQueries) {
        StyleMediaQueryManager.mediaQueryLists = {};
        for (var i = 0; i < styleMediaQueries.length; i++) {
            var styleMediaQuery = styleMediaQueries[i];
            var mediaQueryList = StyleMediaQueryManager.registerMediaQuery(styleMediaQuery);
            var mediaQueryListListener = StyleMediaQueryManager.getMediaQueryListListener(styleMediaQuery);
            mediaQueryListListener(mediaQueryList);
            // tslint:disable-next-line:deprecation
            mediaQueryList.addListener(mediaQueryListListener);
        }
    };
    StyleMediaQueryManager.registerMediaQuery = function (styleMediaQuery) {
        var mediaQuery = styleMediaQuery.mediaQuery;
        if (!(mediaQuery in StyleMediaQueryManager.mediaQueryLists)) {
            StyleMediaQueryManager.mediaQueryLists[mediaQuery] = window.matchMedia(mediaQuery);
        }
        return StyleMediaQueryManager.mediaQueryLists[mediaQuery];
    };
    // The standard library definitions have moved to the "new" spec for this, which is not supported by IE11,
    // so we'll keep on using the old one.
    // tslint:disable-next-line:no-any
    StyleMediaQueryManager.getMediaQueryListListener = function (styleMediaQuery) {
        return function (mediaQueryList) {
            if (mediaQueryList.matches) {
                SharedWidgets_1.setConfig({ styles: styleMediaQuery.matchingStyle });
            }
            else {
                SharedWidgets_1.setConfig({ styles: styleMediaQuery.nonMatchingStyle });
            }
        };
    };
    return StyleMediaQueryManager;
}());
exports.StyleMediaQueryManager = StyleMediaQueryManager;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GlobalPointerUpListener = /** @class */ (function () {
    function GlobalPointerUpListener() {
    }
    GlobalPointerUpListener.subscribeOrUnsubscribeWindows = function (window, subscribe, callback) {
        if (subscribe) {
            window.addEventListener('mouseup', callback, true);
            window.addEventListener('touchend', callback, true);
        }
        else {
            window.removeEventListener('mouseup', callback, true);
            window.removeEventListener('touchend', callback, true);
        }
        var iframes = window.document.getElementsByTagName('iframe');
        for (var i = 0; i < iframes.length; i++) {
            GlobalPointerUpListener.trySubscribeOrUnscribeWindows(iframes[i].contentWindow, subscribe, callback);
        }
    };
    /**
     * We do a try/except because we may try to add event listeners to iframes that are not from the same source. If
     * that is the case we catch it and continue without adding the listeners.
     */
    GlobalPointerUpListener.trySubscribeOrUnscribeWindows = function (window, subscribe, callback) {
        try {
            GlobalPointerUpListener.subscribeOrUnsubscribeWindows(window, subscribe, callback);
        }
        catch (e) {
            /**
             * If the document is an iframe from a different source we can't add event listeners.
             * IE, Firefox, and Chrome seem to be throwing different exceptions, so this just assumes
             * that is the error being thrown.
             */
        }
    };
    GlobalPointerUpListener.subscribe = function (callback) {
        GlobalPointerUpListener.trySubscribeOrUnscribeWindows(window, true, callback);
        return function () {
            GlobalPointerUpListener.trySubscribeOrUnscribeWindows(window, false, callback);
        };
    };
    return GlobalPointerUpListener;
}());
exports.GlobalPointerUpListener = GlobalPointerUpListener;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(38),
    now = __webpack_require__(82),
    toNumber = __webpack_require__(86);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(83);

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(84);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ }),
/* 85 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(38),
    isSymbol = __webpack_require__(87);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var isObjectLike = __webpack_require__(88);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),
/* 88 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var stop = function (e) { return e.stopPropagation(); };
var blockEverything = {
    // Clipboard Events
    onCopy: stop,
    onCut: stop,
    onPaste: stop,
    // Input Events
    onCompositionEnd: stop,
    onCompositionStart: stop,
    onCompositionUpdate: stop,
    onSelect: stop,
    // Mouse Events
    onClick: stop,
    onContextMenu: stop,
    onDoubleClick: stop,
    onDrag: stop,
    onDragEnd: stop,
    onDragEnter: stop,
    onDragExit: stop,
    onDragLeave: stop,
    onDragOver: stop,
    onDragStart: stop,
    onDrop: stop,
    onMouseDown: stop,
    onMouseEnter: stop,
    onMouseLeave: stop,
    onMouseMove: stop,
    onMouseOut: stop,
    onMouseOver: stop,
    onMouseUp: stop,
    // Key Events
    onKeyDown: stop,
    onKeyPress: stop,
    onKeyUp: stop,
    // Touch Events
    onTouchCancel: stop,
    onTouchEnd: stop,
    onTouchMove: stop,
    onTouchStart: stop,
    // Pointer Events
    onPointerDown: stop,
    onPointerMove: stop,
    onPointerUp: stop,
    onPointerCancel: stop,
    onPointerEnter: stop,
    onPointerLeave: stop,
    onPointerOver: stop,
    onPointerOut: stop,
    // Focus Events (they bubble in React!)
    // disabled for TFSID 739813 and 740525 onFocus: stop,
    onBlur: stop,
    // Form Events
    onChange: stop,
    onInput: stop,
    onReset: stop,
    onSubmit: stop,
    // Wheel Events
    onWheel: stop,
    // Animation Events
    onAnimationStart: stop,
    onAnimationEnd: stop,
    onAnimationIteration: stop,
    onTransitionEnd: stop,
};
/** Prevents https://reactjs.org/docs/portals.html#event-bubbling-through-portals */
function PortalEventTrap(children, props) {
    var divProps = tslib_1.__assign({}, blockEverything, props);
    return React.createElement("div", tslib_1.__assign({}, divProps), children);
}
exports.PortalEventTrap = PortalEventTrap;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ReactDOM = __webpack_require__(9);
/**
 * The HostedStackedElementContainer allows clients to instantiate stacked elements from contexts
 * outside of a React component, allowing that stacked element to outlive its parent.
 *
 * The container can be reused; once the element is removed, another element can be passed in to
 * render. However, each container can hold only one stacked element at a time.
 *
 * The element passed to the container must involve the StackingComponent, otherwise it will not be
 * visibly rendered in the document.
 *
 * A common use case is a dialog box triggered from a menu; the menu action instantiates a container
 * and uses it to invoke the dialog. The container continues to live in memory even after the menu
 * item closes, providing a way for the dialog to be closed:
 *
 *   const container = new HostedStackedElementContainer();
 *   const dialogProps = {
 *     onCloseRequest: () => container.remove()
 *   };
 *   const dialogElement = el(DialogWidget, dialogProps);
 *   container.render(dialogElement);
 *
 * This component is not necessary when the parent component will outlive the stacked component; in
 * that case, the parent can simply render the stacked component as one of its children and remove
 * it when it should no longer be displayed.
 */
var HostedStackedElementContainer = /** @class */ (function () {
    function HostedStackedElementContainer() {
        var _this = this;
        this.internalEncapsulatedIsShown = false;
        /**
         * Renders the given stacked element into the document, hosted by this container
         */
        this.render = function (stackedReactElement) {
            if (_this.internalEncapsulatedIsShown) {
                throw new Error('Cannot render the element; it is already shown');
            }
            _this.anchor = document.createElement('div');
            ReactDOM.render(stackedReactElement, _this.anchor);
            _this.internalEncapsulatedIsShown = true;
        };
        /**
         * Removes the hosted element from the document
         */
        this.remove = function () {
            if (_this.internalEncapsulatedIsShown) {
                ReactDOM.unmountComponentAtNode(_this.anchor);
                _this.anchor = null;
            }
            _this.internalEncapsulatedIsShown = false;
        };
        this.isShown = function () {
            return _this.internalEncapsulatedIsShown;
        };
    }
    return HostedStackedElementContainer;
}());
exports.HostedStackedElementContainer = HostedStackedElementContainer;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ButtonWidgetStyles_1 = __webpack_require__(51);
var ButtonBase_1 = __webpack_require__(52);
var DynamicThemeComponent_1 = __webpack_require__(5);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var delayStyle = {
    backgroundColor: TabStyles_1.TabStyles.Colors.L8,
    borderColor: TabStyles_1.TabStyles.Colors.L8,
    color: TabStyles_1.TabStyles.Colors.White
};
var AutoResetButton = /** @class */ (function (_super) {
    tslib_1.__extends(AutoResetButton, _super);
    function AutoResetButton(props) {
        var _this = _super.call(this, props) || this;
        _this.handleClick = function (e) {
            if (!!_this.state.label) {
                return;
            }
            _this.setState({ label: _this.props.delayLabel });
            window.setTimeout(_this.handleReset, _this.getDelayOrDefault());
            _this.props.handleClick(e);
        };
        _this.handleReset = function () {
            _this.setState({ label: undefined });
            _this.props.handleReset();
        };
        _this.state = { label: undefined };
        return _this;
    }
    AutoResetButton.prototype.getDelayOrDefault = function () {
        return this.props.delay !== undefined ? this.props.delay : 5000;
    };
    AutoResetButton.prototype.render = function () {
        var buttonStyle = ButtonWidgetStyles_1.getButtonStyle(this.props.buttonType);
        // need to add the delayStyle to each style to make it have priority
        if (!!this.state.label) {
            buttonStyle.base = tslib_1.__assign({}, buttonStyle.base, delayStyle);
            buttonStyle.interactive.disabled = tslib_1.__assign({}, buttonStyle.interactive.disabled, delayStyle);
        }
        var buttonBaseProps = {
            disabled: this.props.disabled || !!this.state.label,
            handleClick: this.handleClick,
            interactiveStyle: buttonStyle.interactive,
            style: tslib_1.__assign({}, buttonStyle.base, this.props.style),
            testId: Declarative_1.testId(this.props.testId, 'Button'),
            title: this.props.title
        };
        return (React.createElement(ButtonBase_1.ButtonBase, tslib_1.__assign({}, buttonBaseProps),
            this.state.label || this.props.label,
            this.props.children));
    };
    return AutoResetButton;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.AutoResetButton = AutoResetButton;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var Declarative_1 = __webpack_require__(3);
var ButtonWidget_1 = __webpack_require__(14);
var FindIndex_1 = __webpack_require__(15);
var SelectableButtonGroupSelectionBehavior;
(function (SelectableButtonGroupSelectionBehavior) {
    /** Multiple buttons can be selected within the group. */
    SelectableButtonGroupSelectionBehavior["Multiple"] = "Multiple";
    /** A single button (at most) can be selected within the group. */
    SelectableButtonGroupSelectionBehavior["Single"] = "Single";
})(SelectableButtonGroupSelectionBehavior || (SelectableButtonGroupSelectionBehavior = {}));
exports.SelectableButtonGroupSelectionBehavior = SelectableButtonGroupSelectionBehavior;
var SelectableButtonGroupWidget = /** @class */ (function (_super) {
    tslib_1.__extends(SelectableButtonGroupWidget, _super);
    function SelectableButtonGroupWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.childButtons = [];
        _this.buttonElements = [];
        _this.handleButtonRefs = [];
        _this.handleButtonRefWrapper = function (buttonIndex) {
            if (_this.handleButtonRefs[buttonIndex] === undefined) {
                _this.handleButtonRefs[buttonIndex] = function (ref) {
                    _this.buttonElements[buttonIndex] = ReactDOM.findDOMNode(ref);
                };
            }
            return _this.handleButtonRefs[buttonIndex];
        };
        _this.handleClick = function (e) {
            var buttonElement = e.currentTarget;
            var buttonIndex = FindIndex_1.findIndex(_this.childButtons, function (button, index) { return buttonElement === _this.buttonElements[index]; });
            var selected = _this.childButtons[buttonIndex].props.selected;
            if (_this.props.selectionBehavior === SelectableButtonGroupSelectionBehavior.Single && selected) {
                return;
            }
            if (_this.props.onChange) {
                _this.props.onChange(buttonIndex, !selected);
            }
        };
        _this.handleFocus = function (e) {
            var target = e.target;
            var focusIndex = FindIndex_1.findIndex(_this.childButtons, function (button, index) { return target === _this.buttonElements[index] && !button.props.disabled; });
            if (focusIndex >= 0 && focusIndex !== _this.state.focusIndex) {
                _this.setState({ focusIndex: focusIndex });
            }
        };
        _this.handleKeyDown = function (e) {
            var buttonCount = _this.childButtons.length;
            var increment = 0;
            var focusIndex = _this.state.focusIndex;
            if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
                increment = -1;
            }
            else if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {
                increment = 1;
            }
            else if (e.key === 'Home') {
                focusIndex = -1;
                increment = 1;
            }
            else if (e.key === 'End') {
                focusIndex = buttonCount;
                increment = -1;
            }
            else {
                return;
            }
            e.preventDefault();
            e.stopPropagation();
            do {
                focusIndex = (focusIndex + increment + buttonCount) % buttonCount;
                if (focusIndex === _this.state.focusIndex) {
                    return;
                }
            } while (_this.childButtons[focusIndex].props.disabled);
            var isSingleSelect = _this.props.selectionBehavior === SelectableButtonGroupSelectionBehavior.Single;
            if (isSingleSelect && !_this.isButtonSelected(focusIndex) && _this.props.onChange) {
                _this.props.onChange(focusIndex, true);
            }
            if (focusIndex !== _this.state.focusIndex) {
                _this.setState({ focusIndex: focusIndex }, function () {
                    if (_this.buttonElements[_this.state.focusIndex] !== undefined) {
                        _this.buttonElements[_this.state.focusIndex].focus();
                    }
                });
            }
        };
        _this.updateChildButtons();
        _this.state = { focusIndex: _this.getInitialFocusIndex() };
        return _this;
    }
    SelectableButtonGroupWidget.prototype.updateChildButtons = function () {
        var childButtons = [];
        var selectedButtonsCount = 0;
        React.Children.map(this.props.children, function (child) {
            if (child.type === ButtonWidget_1.ButtonWidget) {
                childButtons.push(child);
                if (child.props.selected) {
                    selectedButtonsCount++;
                }
            }
        });
        if (childButtons.length < 2) {
            throw Error("Invalid 'ButtonWidget' count: 2+ are required");
        }
        if (this.props.selectionBehavior === SelectableButtonGroupSelectionBehavior.Single && selectedButtonsCount > 1) {
            // tslint:disable-next-line max-line-length
            throw Error("Invalid selected 'ButtonWidget' count: SelectableButtonGroupSelectionBehavior.Single requires one or zero buttons to be selected. " + selectedButtonsCount + " are selected");
        }
        this.childButtons = childButtons;
    };
    SelectableButtonGroupWidget.prototype.getInitialFocusIndex = function () {
        var focusIndex = FindIndex_1.findIndex(this.childButtons, function (button) { return button.props.selected && !button.props.disabled; });
        if (focusIndex < 0) {
            focusIndex = FindIndex_1.findIndex(this.childButtons, function (button) { return !button.props.disabled; });
        }
        return focusIndex;
    };
    SelectableButtonGroupWidget.prototype.isButtonSelected = function (index) {
        return this.childButtons[index].props.selected;
    };
    SelectableButtonGroupWidget.prototype.renderChildren = function () {
        var _this = this;
        var buttonIndex = 0;
        return React.Children.map(this.props.children, function (child) {
            if (child.type !== ButtonWidget_1.ButtonWidget) {
                return child;
            }
            var buttonPropsOverride = {
                disableTabAccessibility: _this.state.focusIndex !== buttonIndex,
                handleClick: _this.handleClick,
                key: buttonIndex,
                ref: _this.handleButtonRefWrapper(buttonIndex),
                role: _this.props.selectionBehavior === SelectableButtonGroupSelectionBehavior.Single ? 'radio' : 'button',
                selected: !!child.props.selected
            };
            buttonIndex++;
            return React.cloneElement(child, buttonPropsOverride);
        });
    };
    SelectableButtonGroupWidget.prototype.render = function () {
        this.updateChildButtons();
        var isSingleSelect = this.props.selectionBehavior === SelectableButtonGroupSelectionBehavior.Single;
        var divProps = tslib_1.__assign({ 'data-tb-test-id': Declarative_1.testId(this.props.testId, 'SelectableButtonGroup'), onFocus: this.handleFocus, onKeyDown: this.handleKeyDown, role: isSingleSelect ? 'radiogroup' : undefined, style: this.props.style, title: this.props.title }, Declarative_1.conditional(!isSingleSelect, { 'aria-multiselectable': true }));
        return (React.createElement("div", tslib_1.__assign({}, divProps), this.renderChildren()));
    };
    return SelectableButtonGroupWidget;
}(React.Component));
exports.SelectableButtonGroupWidget = SelectableButtonGroupWidget;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ChromeTooltipUtility_1 = __webpack_require__(42);
var ChromeTooltipDisplay_1 = __webpack_require__(94);
var ChromeTooltipBox_1 = __webpack_require__(53);
var ChromeTooltipArrow_1 = __webpack_require__(54);
var SharedWidgets_1 = __webpack_require__(36);
// extra space for mousing between target and tooltip
var MouseSpace = 1;
exports.DefaultOffset = ChromeTooltipBox_1.BorderWidth + ChromeTooltipBox_1.Padding + ChromeTooltipArrow_1.Height / 2;
var DefaultSide = 'Right';
var Style = {
    position: 'relative',
    display: 'inline-block'
};
/** This widget is unreleased/unsupported and should not be used. */
var ChromeTooltipWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ChromeTooltipWidget, _super);
    function ChromeTooltipWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.setContent = function (content) {
            if (!_this.canceled) {
                _this.setState(function (prevState) { return prevState.content ? prevState : tslib_1.__assign({}, prevState, { content: content }); });
            }
        };
        _this.open = function () {
            // tslint:disable-next-line:no-floating-promises
            _this.props.getContent().then(_this.setContent);
        };
        _this.close = function () {
            _this.setState({ content: null, positioned: false });
        };
        _this.handleClick = function (e) {
            _this.state.content ? _this.close() : _this.open();
            e.preventDefault();
        };
        _this.handleMouseEnter = function (e) {
            if (!_this.state.content) {
                _this.canceled = false;
                _this.open();
            }
        };
        _this.handleMouseLeave = function (_a) {
            var clientX = _a.clientX, clientY = _a.clientY;
            if (!_this.state.content) {
                // TFSID 740766: cancel if mouse outside target before finished fetching content
                _this.canceled = true;
            }
            if (_this.tooltipElement) {
                var _b = _this.tooltipElement.getBoundingClientRect(), left = _b.left, right = _b.right, top_1 = _b.top, bottom = _b.bottom;
                // add offset based on side
                switch (_this.state.side) {
                    case 'Top':
                        bottom += MouseSpace;
                        break;
                    case 'Bottom':
                        top_1 -= MouseSpace;
                        break;
                    case 'Left':
                        right += MouseSpace;
                        break;
                    case 'Right':
                        left -= MouseSpace;
                        break;
                    default:
                        ChromeTooltipUtility_1.assertNever(_this.state.side);
                }
                // close if mouse outside of tooltip
                var rectangle = new ChromeTooltipUtility_1.ClosedRectangle(left, right, top_1, bottom);
                if (!rectangle.containsPoint(clientX, clientY)) {
                    _this.close();
                }
            }
        };
        _this.updateTargetRef = function (element) {
            _this.targetElement = element;
        };
        _this.updateTooltipRef = function (element) {
            _this.tooltipElement = element;
        };
        _this.state = {
            content: null,
            positioned: false,
            side: props.defaultSide || DefaultSide,
            offset: exports.DefaultOffset
        };
        return _this;
    }
    ChromeTooltipWidget.prototype.componentDidUpdate = function () {
        if (this.state.content && !this.state.positioned) {
            if (!this.targetElement || !this.tooltipElement) {
                throw new Error('reference to target or tooltip isn\'t set!');
            }
            var outerRect = (this.props.boundaryElement || document.body).getBoundingClientRect();
            var innerRect = this.targetElement.getBoundingClientRect();
            // try to position tooltip within outer rectangle
            var _a = this.tooltipElement.getBoundingClientRect(), width = _a.width, height = _a.height;
            // try default side first
            var side = this.props.defaultSide || DefaultSide;
            var offset = this.state.offset;
            var i = 0;
            var rect = ChromeTooltipWidget.computeTooltipRectangle(innerRect, width, height, side, offset);
            while (i < ChromeTooltipUtility_1.NumberOfSides && !ChromeTooltipUtility_1.containsClientRect(outerRect, rect)) {
                i++;
                side = ChromeTooltipUtility_1.getNextSideClockwise(side);
                rect = ChromeTooltipWidget.computeTooltipRectangle(innerRect, width, height, side, offset);
            }
            this.setState({ positioned: true, side: side });
        }
    };
    ChromeTooltipWidget.prototype.componentDidMount = function () {
        this.canceled = false;
    };
    // NOTE cancel any unresolved promise of content to avoid setting state on unmounted component,
    // see https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html for more information
    ChromeTooltipWidget.prototype.componentWillUnmount = function () {
        this.canceled = true;
    };
    ChromeTooltipWidget.prototype.render = function () {
        return (React.createElement(SharedWidgets_1.PointerEventWrapper, { pointerClick: this.handleClick },
            React.createElement("div", { ref: this.updateTargetRef, style: Style, onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave },
                this.props.children,
                this.renderTooltip())));
    };
    ChromeTooltipWidget.prototype.renderTooltip = function () {
        if (this.state.content && this.targetElement) {
            return React.createElement(ChromeTooltipDisplay_1.ChromeTooltipDisplay, { content: this.state.content, width: this.props.width, targetElement: this.targetElement, handleRef: this.updateTooltipRef, close: this.close, positioned: this.state.positioned, side: this.state.side, offset: this.state.offset, zIndex: this.props.zIndex });
        }
        else {
            return null;
        }
    };
    // tslint:disable-next-line:max-line-length
    ChromeTooltipWidget.computeTooltipRectangle = function (target, width, height, side, offset) {
        var top;
        var left;
        if (ChromeTooltipUtility_1.isHorizontalSide(side)) {
            top = target.top + target.height / 2 - offset;
            left = side === 'Left' ? target.left - width : target.right;
        }
        else {
            left = target.left + target.width / 2 - offset;
            top = side === 'Top' ? target.top - height : target.bottom;
        }
        return {
            top: top,
            bottom: top + height,
            left: left,
            right: left + width,
            width: width,
            height: height
        };
    };
    return ChromeTooltipWidget;
}(React.Component));
exports.ChromeTooltipWidget = ChromeTooltipWidget;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(0);
var Overlay_1 = __webpack_require__(10);
var ChromeTooltipUtility_1 = __webpack_require__(42);
var ChromeTooltipBox_1 = __webpack_require__(53);
var ChromeTooltipArrow_1 = __webpack_require__(54);
function ChromeTooltipDisplay(props) {
    var getAnchorClientRect = function () {
        var rect = props.targetElement.getBoundingClientRect();
        var y = getTopFromOverlaidPosition(props.side, props.offset);
        var x = getLeftFromOverlaidPosition(props.side, props.offset);
        return {
            top: rect.top + y,
            bottom: rect.bottom + y,
            left: rect.left + x,
            right: rect.right + x,
        };
    };
    return (React.createElement(Overlay_1.Overlay, { getAnchorClientRect: getAnchorClientRect, zIndex: props.zIndex, anchorOrigin: getAnchorOrigin(props.side), stackedOrigin: getStackedOrigin(props.side) },
        React.createElement("div", { ref: props.handleRef, onMouseLeave: props.close },
            React.createElement("div", { style: getContainerStyle(props.positioned, props.side) },
                React.createElement(ChromeTooltipBox_1.ChromeTooltipBox, { content: props.content, width: props.width }),
                React.createElement(ChromeTooltipArrow_1.ChromeTooltipArrow, { direction: getDirection(props.side), style: getArrowStyle(props.side, props.offset) })))));
}
exports.ChromeTooltipDisplay = ChromeTooltipDisplay;
function getAnchorOrigin(side) {
    switch (side) {
        case 'Top': return { horizontal: Overlay_1.HorizontalOriginOption.centerX, vertical: Overlay_1.VerticalOriginOption.top };
        case 'Bottom': return { horizontal: Overlay_1.HorizontalOriginOption.centerX, vertical: Overlay_1.VerticalOriginOption.bottom };
        case 'Left': return { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.centerY };
        case 'Right': return { horizontal: Overlay_1.HorizontalOriginOption.right, vertical: Overlay_1.VerticalOriginOption.centerY };
        default: return ChromeTooltipUtility_1.assertNever(side);
    }
}
function getStackedOrigin(side) {
    switch (side) {
        case 'Top': return { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.bottom };
        case 'Bottom': return { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.top };
        case 'Left': return { horizontal: Overlay_1.HorizontalOriginOption.right, vertical: Overlay_1.VerticalOriginOption.top };
        case 'Right': return { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.top };
        default: return ChromeTooltipUtility_1.assertNever(side);
    }
}
function getTopFromOverlaidPosition(side, offset) {
    return ChromeTooltipUtility_1.isHorizontalSide(side) ? -1 * offset : 0;
}
function getLeftFromOverlaidPosition(side, offset) {
    return ChromeTooltipUtility_1.isVerticalSide(side) ? -1 * offset : 0;
}
function getContainerStyle(positioned, side) {
    return {
        visibility: positioned ? 'visible' : 'hidden',
        display: 'flex',
        flexDirection: getFlexDirection(side),
        flexWrap: 'nowrap',
        justifyContent: 'flex-start',
        alignItems: 'center'
    };
}
function getFlexDirection(side) {
    switch (side) {
        case 'Top': return 'column';
        case 'Bottom': return 'column-reverse';
        case 'Left': return 'row';
        case 'Right': return 'row-reverse';
        default: return ChromeTooltipUtility_1.assertNever(side);
    }
}
function getDirection(side) {
    switch (side) {
        case 'Top': return 'Down';
        case 'Bottom': return 'Up';
        case 'Left': return 'Right';
        case 'Right': return 'Left';
        default: return ChromeTooltipUtility_1.assertNever(side);
    }
}
function getArrowStyle(side, offset) {
    var mainAxisOffset = -1.2;
    var crossAxisOffset = offset - ChromeTooltipArrow_1.Height / 2;
    var style = { alignSelf: 'flex-start' };
    switch (side) {
        case 'Top':
            style.marginTop = mainAxisOffset;
            style.marginLeft = crossAxisOffset;
            break;
        case 'Bottom':
            style.marginBottom = mainAxisOffset;
            style.marginLeft = crossAxisOffset;
            break;
        case 'Left':
            style.marginLeft = mainAxisOffset;
            style.marginTop = crossAxisOffset;
            break;
        case 'Right':
            style.marginRight = mainAxisOffset;
            style.marginTop = crossAxisOffset;
            break;
        default:
            ChromeTooltipUtility_1.assertNever(side);
    }
    return style;
}


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckBoxSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"16\" height=\"16\">\n  <style>\n    .disabled{opacity:0.35}\n    .focus .outline{fill:#3498db}\n    .hover .outline,.active .outline{fill:#333}\n    .outline,.disabled .outline{fill:#666}\n    .check{fill:transparent}\n    .hover.checked .check,.active.checked .check{fill:#333}\n    .checked .check,.disabled.checked .check{fill:#666}\n  </style>\n  <path fill=\"#fff\" d=\"M2 2h12v12H2z\"/>\n  <path class=\"outline\" d=\"M14 2v12H2V2h12m0-1H2c-.5 0-1 .4-1 1v12c0 .6.5 1 1 1h12c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1z\"/>\n  <path class=\"check\" d=\"M7.2 12.3c-.2 0-.4-.1-.5-.2l-3-3L4.8 8l2.3 2.3 4-6.7 1.3.8L7.9 12c-.2.2-.4.3-.7.3z\"/>\n</svg>";


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckBoxMixedSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"16\" height=\"16\">\n  <style>\n    .disabled{opacity:0.35}\n    .focus .outline{fill:#3498db}\n    .hover .outline,.active .outline,.hover .check,.active .check{fill:#333}\n    .outline,.disabled .outline,.check,.disabled .check{fill:#666}\n  </style>\n  <path fill=\"#fff\" d=\"M2 2h12v12H2z\"/>\n  <path class=\"outline\" d=\"M14 2v12H2V2h12m0-1H2c-.5 0-1 .4-1 1v12c0 .6.5 1 1 1h12c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1z\"/>\n  <path class=\"check\" d=\"M4 4h8v8H4z\"/>\n</svg>";


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ClearSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"12\" height=\"12\">\n  <style>\n    .onDarkBackground{opacity:0.5}\n    .onDarkBackground.active{opacity:1}\n    path{fill:#666}\n    .active path{fill:#333}\n    .onDarkBackground path{fill:#fff}\n  </style>\n  <path d=\"M8.9,2.9L3,8.9c-0.2,0.2-0.6,0.2-0.8,0l0,0C2,8.7,2,8.3,2.2,8.1l5.9-5.9C8.3,2,8.7,2,8.9,2.2l0,0 C9.1,2.4,9.1,2.7,8.9,2.9z\"/>\n  <path d=\"M3,2.2l5.9,5.9c0.2,0.2,0.2,0.6,0,0.8l0,0c-0.2,0.2-0.6,0.2-0.8,0L2.2,3C2,2.8,2,2.4,2.2,2.2l0,0 C2.5,2,2.8,2,3,2.2z\"/>\n</svg>";


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable max-line-length
exports.CloseButtonSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"14\" height=\"14\">\n  <style>\n    path{fill:#666}\n    .info path{fill:#0f445e}\n    .warning path{fill:#c64c30}\n    .error path{fill:#9b2f3c}\n    .success path{fill:#003f33}\n    .active path{fill:#333}\n  </style>\n  <path d=\"M7.7 7l4.7-4.7c.2-.2.2-.5 0-.7s-.5-.2-.7 0L7 6.3 2.3 1.6c-.2-.2-.5-.2-.7 0s-.2.5 0 .7L6.3 7l-4.7 4.7c-.2.2-.2.5 0 .7s.5.2.7 0L7 7.7l4.7 4.7c.2.2.5.2.7 0s.2-.5 0-.7L7.7 7z\"/>\n</svg>";


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpandoSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"13\" height=\"13\">\n  <style>\n    path{fill:#666}\n    .active path{fill:#333}\n  </style>\n  <path d=\"M2.8,9.2l3.7-3.6l3.7,3.6c0.2,0.2,0.6,0.2,0.8,0s0.2-0.7,0-0.8L6.5,3.8L2,8.4\tC1.8,8.6,1.8,8.9,2,9.2C2.2,9.4,2.6,9.4,2.8,9.2z\"/>\n</svg>";


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IconDropdownArrowSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"7\" height=\"5\">\n  <style>\n    .onDarkBackground{opacity:0.5}\n    .onDarkBackground.active,.onDarkBackground.hover{opacity:1}\n    .disabled{opacity:0.35!important}\n    .active path,.hover path{fill:#333}\n    path,.disabled path{fill:#666}\n    .onDarkBackground path{fill:#fff!important}\n  </style>\n  <path d=\"M5.8,1H1.2C1.1,1,1,1.1,1.1,1.2l2.3,2.7C3.4,4,3.6,4,3.6,3.9l2.3-2.7 C6,1.1,5.9,1,5.8,1z\"/>\n</svg>";


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItemArrowSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"18\" height=\"18\">\n  <style>\n    .disabled{opacity:0.35}\n    .active path{fill:#333}\n    path,.disabled path{fill:#666}\n  </style>\n  <path d=\"M7.3,13.2l4.6-3.5c0.1-0.1,0.1-0.2,0-0.3L7.3,5.8C7.1,5.7,7,5.8,7,6v7C7,13.2,7.1,13.3,7.3,13.2z\"/>\n</svg>";


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItemCheckSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"10\" height=\"10\">\n  <style>\n    .disabled{opacity:0.35}\n    .active path{fill:#333}\n    path,.disabled path{fill:#666}\n  </style>\n  <path d=\"M4.2 9.3C4 9.3 3.8 9.2 3.7 9.1l-3-3L1.8 5l2.3 2.3 4-6.7 1.3 0.8L4.9 9C4.7 9.2 4.5 9.3 4.2 9.3L4.2 9.3z\" />\n</svg>";


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LineAndTextDropdownArrowSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"16\" height=\"20\">\n  <style>\n    .onDarkBackground{opacity:0.5}\n    .onDarkBackground.active,.onDarkBackground.hover{opacity:1}\n    .disabled{opacity:0.35!important}\n    .active path,.hover path{fill:#333}\n    path,.disabled path{fill:#666}\n    .onDarkBackground path{fill:#fff!important}\n  </style>\n  <path d=\"M6.3,7h8.5C15,7,15.1,7.3,15,7.4l-4.2,5.3c-0.1,0.2-0.4,0.2-0.5,0L6,7.4C5.9,7.3,6,7,6.3,7z\"/>\n</svg>";


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OutlineDropdownArrowSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"18\" height=\"18\">\n  <style>\n    .onDarkBackground{opacity:0.5}\n    .onDarkBackground.active,.onDarkBackground.hover{opacity:1}\n    .disabled{opacity:0.35!important}\n    .active path,.hover path{fill:#333}\n    path,.disabled path{fill:#666}\n    .onDarkBackground path{fill:#fff!important}\n  </style>\n  <path d=\"M5.8,7.3l3.5,4.6c0.1,0.1,0.2,0.1,0.3,0l3.6-4.6C13.3,7.1,13.2,7,13,7H6C5.8,7,5.7,7.1,5.8,7.3z\"/>\n</svg>";


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioButtonSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"16\" height=\"16\">\n  <style>\n    .hover .outline,.active .outline,.hover.checked .check,.active.checked .check{fill:#333}\n    .focus .outline{fill:#3498db}\n    .outline,.disabled .outline,.disabled.checked .check{fill:#666}\n    .disabled{opacity:0.35}\n    .check{fill:transparent}\n    .checked .check{fill:#666}\n  </style>\n  <circle fill=\"#fff\" cx=\"8\" cy=\"8\" r=\"6\"/>\n  <path class=\"outline\" d=\"M8 2c3.3 0 6 2.7 6 6s-2.7 6-6 6-6-2.7-6-6 2.7-6 6-6m0-1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7z\"/>\n  <circle class=\"check\" cx=\"8\" cy=\"8\" r=\"3\"/>\n</svg>";


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable max-line-length
exports.SearchSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"12\" height=\"12\">\n  <style>\n    .onDarkBackground{opacity:0.5}\n    .active.onDarkBackground{opacity:1}\n    path{fill:#666}\n    .active path{fill:#333}\n    .onDarkBackground path{fill:#fff}\n  </style>\n  <path d=\"M7.5 0C5.015 0 3 2.015 3 4.5S5.015 9 7.5 9 12 6.985 12 4.5 9.985 0 7.5 0zm0 8C5.567 8 4 6.433 4 4.5S5.567 1 7.5 1 11 2.567 11 4.5 9.433 8 7.5 8z\"/><path d=\"M5.026 7.858l-3.96 3.96c-.243.243-.641.243-.884 0s-.243-.641 0-.884l3.96-3.96c.243-.243.641-.243.884 0s.243.641 0 .884z\"/>\n</svg>";


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable max-line-length
exports.SliderHandleSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"20\" height=\"20\">\n  <style>\n    .bg{fill:#fff}\n    .outline{fill:#666}\n    .focus .outline{fill:#3498db}\n    .active .outline{fill:#333}\n    .disabled .bg{fill:#ebebeb}\n    .disabled .outline{fill:#b4b4b4}\n  </style>\n  <circle class=\"bg\" cx=\"10\" cy=\"10\" r=\"7.5\"/>\n  <path class=\"outline\" d=\"M10,3c3.8,0,7,3.2,7,7s-3.2,7-7,7s-7-3.2-7-7S6.2,3,10,3 M10,2c-4.4,0-8,3.6-8,8\ts3.6,8,8,8s8-3.6,8-8S14.4,2,10,2L10,2z\"/>\n</svg>";


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SliderLeftHandleSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"20\" height=\"20\">\n  <style>\n    .bg{fill:#fff}\n    .outline{fill:#666}\n    .focus .outline{fill:#3498db}\n    .active .outline{fill:#333}\n    .disabled .bg{fill:#ebebeb}\n    .disabled .outline{fill:#b4b4b4}\n  </style>\n  <path class=\"bg\" d=\"M11.2,2.5c-4.3,0-7.7,3.3-7.7,7.5s3.5,7.5,7.8,7.5h4.3v-15H11.2z\"/>\n  <path class=\"outline\" d=\"M15,3v14h-3.6C7.3,17,4,13.9,4,10s3.3-7,7.4-7H15 M16,2h-4.6C6.7,2,3,5.6,3,10s3.7,8,8.4,8H16V2 L16,2z\"/>\n</svg>";


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SliderRightHandleSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"20\" height=\"20\">\n  <style>\n    .bg{fill:#fff}\n    .outline{fill:#666}\n    .focus .outline{fill:#3498db}\n    .active .outline{fill:#333}\n    .disabled .bg{fill:#ebebeb}\n    .disabled .outline{fill:#b4b4b4}\n  </style>\n  <path class=\"bg\" d=\"M7.8,2.6c4.3,0,7.8,3.3,7.8,7.4s-3.5,7.4-7.8,7.4H3.5V2.6H7.8z\"/>\n  <path class=\"outline\" d=\"M4,3h3.6c4.1,0,7.4,3.1,7.4,7s-3.3,7-7.4,7H4V3 M3,2v16h4.6\tc4.6,0,8.4-3.6,8.4-8s-3.7-8-8.4-8H3L3,2z\"/>\n</svg>";


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StepperDownSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"18\" height=\"11\">\n  <style>\n    .onDarkBackground{opacity:0.5}\n    .onDarkBackground.active{opacity:1}\n    .disabled{opacity:0.35!important}\n    path,.disabled path{fill:#666}\n    .active path{fill:#333}\n    .onDarkBackground path{fill:#fff!important}\n  </style>\n  <path d=\"M12 3.3L9.1 7h-.2L6 3.3c0-.1 0-.3.2-.3h5.7c.1 0 .1.2.1.3z\" />\n</svg>";


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StepperUpSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"18\" height=\"11\">\n  <style>\n    .onDarkBackground{opacity:0.5}\n    .onDarkBackground.active{opacity:1}\n    .disabled{opacity:0.35!important}\n    path,.disabled path{fill:#666}\n    .active path{fill:#333}\n    .onDarkBackground path{fill:#fff!important}\n  </style>\n  <path d=\"M6 7.7L8.8 4c.1 0 .3 0 .3.1L12 7.7c0 .1 0 .3-.2.3H6.2C6 8 6 7.8 6 7.7z\" />\n</svg>";


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StepperLeftSvg = "\n<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"18\" height=\"22\">\n  <style>\n    path{fill:#666}\n    .active path,.hover path{fill:#333}\n    .disabled{opacity:0.35!important}\n  </style>\n  <path d=\"M10.7,14l-4.4-3.3c-0.1-0.1-0.1-0.2,0-0.3L10.7,7C10.8,7,11,7,11,7.2v6.7C11,14,10.8,14,10.7,14z\"></path>\n</svg>";


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StepperRightSvg = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"$state$\" width=\"18\" height=\"22\">\n  <style>\n    path{fill:#666}\n    .active path,.hover path{fill:#333}\n    .disabled{opacity:0.35!important}\n  </style>\n  <path d=\"M7,13.9V7.2C7,7,7.2,7,7.3,7l4.4,3.4c0.1,0.1,0.1,0.2,0,0.3L7.3,14C7.2,14,7,14,7,13.9z\" />\n</svg>";


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var react_1 = __webpack_require__(0);
var CheckBoxWithLabelWidget_1 = __webpack_require__(56);
var DomWidgets_1 = __webpack_require__(4);
var DynamicThemeComponent_1 = __webpack_require__(5);
/** Controlled, stateless Check Box With Label Group Widget. */
var CheckBoxWithLabelGroupWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CheckBoxWithLabelGroupWidget, _super);
    function CheckBoxWithLabelGroupWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckBoxWithLabelGroupWidget.prototype.getContainerStyleOfIndex = function (index) {
        // no-op for parity with the RadioButtonWithLabelGroupWidget
        return {};
    };
    CheckBoxWithLabelGroupWidget.prototype.render = function () {
        var _this = this;
        return react_1.createElement(DomWidgets_1.Block, {
            role: 'group'
        }, this.props.checkBoxWithLabelPropsList.map(function (checkBoxWithLabelProps, index) {
            var containerStyle = tslib_1.__assign({}, checkBoxWithLabelProps.containerStyle, _this.getContainerStyleOfIndex(index));
            var newCheckBoxWithLabelProps = tslib_1.__assign({}, checkBoxWithLabelProps, { containerStyle: containerStyle, key: index });
            return react_1.createElement(CheckBoxWithLabelWidget_1.CheckBoxWithLabelWidget, newCheckBoxWithLabelProps);
        }));
    };
    return CheckBoxWithLabelGroupWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.CheckBoxWithLabelGroupWidget = CheckBoxWithLabelGroupWidget;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PendingOrientationChangeTimeoutMs = 250;
exports.PendingOrientationChangeTimeoutMs = PendingOrientationChangeTimeoutMs;
var PendingResizeTimeoutMs = 200;
exports.PendingResizeTimeoutMs = PendingResizeTimeoutMs;
/**
 * Helper class that "re-fires" an orientation change event only after we think the window has resized, which helps bridge differences
 * between how orientation change is handled on different platforms.
 * There is no guarantee that every orientation change event fired from the window will be mirrored here.
 *
 * Notes on how the eventing works in different scenarios:
 * In iOS, the order is resize -> orientation change.
 * In Android, the order is orientation change -> resize.
 * When in an iframe, either OS will propagate the orientation change event to the iframe's window. The resize only occurs if the
 * parent document happens to resize the iframe, so the order and timing of the two events will depend on how the parent document
 * responds to the event. Currently we won't fire if no resize occurs, which prevents false alarms in the iframe case.
 */
var OrientationChange = /** @class */ (function () {
    function OrientationChange() {
    }
    OrientationChange.init = function () {
        window.addEventListener('orientationchange', OrientationChange.handleOrientationChange);
        window.addEventListener('resize', OrientationChange.handleResize);
    };
    OrientationChange.handleOrientationChange = function () {
        if (OrientationChange.latestPendingResizeTimestamp !== null &&
            Date.now() - OrientationChange.latestPendingResizeTimestamp <= PendingResizeTimeoutMs) {
            /* Resize occurred recently, assume this is the iOS case and fire. */
            OrientationChange.fireOrientationChange();
        }
        else {
            /* No resize occurred recently, but record the timestamp for the Android case where a resize is about to occur. */
            OrientationChange.latestPendingOrientationChangeTimestamp = Date.now();
        }
    };
    OrientationChange.handleResize = function () {
        if (OrientationChange.latestPendingOrientationChangeTimestamp !== null &&
            Date.now() - OrientationChange.latestPendingOrientationChangeTimestamp <= PendingOrientationChangeTimeoutMs) {
            /* Orientation change occurred recently, assume this is the Android case and fire. */
            OrientationChange.fireOrientationChange();
        }
        else {
            /**
             * No orientation change occurred recently, but record the timestamp for the iOS case where an orientation change is about
             * to occur.
             */
            OrientationChange.latestPendingResizeTimestamp = Date.now();
        }
    };
    /**
     * Public only for testing convenience.
     * Notify listeners that an orientation change has occurred and the window has resized already.
     */
    OrientationChange.fireOrientationChange = function () {
        OrientationChange.latestPendingOrientationChangeTimestamp = null;
        OrientationChange.latestPendingResizeTimestamp = null;
        OrientationChange.listeners.forEach(function (callback) { callback(); });
    };
    /**
     * Register a callback when an orientation change occurs.
     */
    OrientationChange.addListener = function (callback) {
        if (callback) {
            OrientationChange.listeners.push(callback);
        }
    };
    /**
     * Unregister a callback that has been previously registered.
     */
    OrientationChange.removeListener = function (callback) {
        OrientationChange.listeners = OrientationChange.listeners.filter(function (element) {
            return element !== callback;
        });
    };
    OrientationChange.latestPendingOrientationChangeTimestamp = null;
    OrientationChange.latestPendingResizeTimestamp = null;
    OrientationChange.listeners = [];
    return OrientationChange;
}());
exports.OrientationChange = OrientationChange;
OrientationChange.init();


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var react_1 = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var ViewportHelpers = __webpack_require__(28);
/**
 * Wraps a component in a container that will size intelligently to its contents and the viewport. The size constraints
 * are determined once when the component is constructed and need to be manually updated with updateSize().
 *
 * The default behavior is to allow its children to determine the container size, but when
 * (a) zoomed out, restrict the container size to be less than the visual viewport size or
 * (b) zoomed in/no zoom, restrict the container size to be less than the page's initial containing block
 */
var ViewportConstrainedDomWrapper = /** @class */ (function (_super) {
    tslib_1.__extends(ViewportConstrainedDomWrapper, _super);
    function ViewportConstrainedDomWrapper(props) {
        var _this = _super.call(this, props) || this;
        _this.state = _this.getStateForCurrentViewport();
        return _this;
    }
    ViewportConstrainedDomWrapper.prototype.getStateForCurrentViewport = function () {
        var visualViewport = ViewportHelpers.getVisualViewport();
        return {
            visualViewportSize: {
                width: visualViewport.width,
                height: visualViewport.height
            },
            layoutViewportSize: ViewportHelpers.getLayoutViewportSize()
        };
    };
    ViewportConstrainedDomWrapper.prototype.getMaxSize = function () {
        /**
         * Generally we want the element to be no larger than the visual viewport.
         * But when zoomed in, the contents may get squished as a result if we limit the size purely on the visual viewport.
         * If a min-width/min-height value is set on the wrapper we assume that this case has been handled, otherwise we
         * set a floor value on max-width/max-height.
         */
        var baseMaxSize = { width: this.state.visualViewportSize.width, height: this.state.visualViewportSize.height };
        var isMinWidthSpecified = this.props.style && this.props.style.minWidth;
        if (!isMinWidthSpecified) {
            baseMaxSize.width = Math.max(baseMaxSize.width, this.state.layoutViewportSize.width);
        }
        var isMinHeightSpecified = this.props.style && this.props.style.minHeight;
        if (!isMinHeightSpecified) {
            baseMaxSize.height = Math.max(baseMaxSize.height, this.state.layoutViewportSize.height);
        }
        if (this.props.horizontalMargins) {
            baseMaxSize.width -= this.props.horizontalMargins;
        }
        if (this.props.verticalMargins) {
            baseMaxSize.height -= this.props.verticalMargins;
        }
        return baseMaxSize;
    };
    /**
     * Updates size so that the size constraints reflect the current viewport size. Triggers a re-render.
     */
    ViewportConstrainedDomWrapper.prototype.updateSize = function () {
        this.setState(this.getStateForCurrentViewport());
    };
    ViewportConstrainedDomWrapper.prototype.render = function () {
        var maxSize = this.getMaxSize();
        var divProps = {
            style: tslib_1.__assign({ maxWidth: maxSize.width, maxHeight: maxSize.height }, this.props.style, Declarative_1.conditional(this.props.isMaximized, { width: maxSize.width, height: maxSize.height })),
            'data-tb-test-id': this.props.testId
        };
        return react_1.createElement('div', divProps, this.props.children);
    };
    return ViewportConstrainedDomWrapper;
}(React.Component));
exports.ViewportConstrainedDomWrapper = ViewportConstrainedDomWrapper;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var react_1 = __webpack_require__(0);
var DomWidgets_1 = __webpack_require__(4);
var Declarative_1 = __webpack_require__(3);
var Geometry = __webpack_require__(20);
var StackingComponent_1 = __webpack_require__(19);
var ViewportHelpers = __webpack_require__(28);
var Styles = {
    Floater: {
        position: 'absolute',
        outline: 0,
        pointerEvents: 'auto'
    }
};
var FloaterWidgetDefault = /** @class */ (function (_super) {
    tslib_1.__extends(FloaterWidgetDefault, _super);
    function FloaterWidgetDefault() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.floaterRefHandler = function (ref) {
            _this.floater = ReactDOM.findDOMNode(ref);
            if (!!_this.props.handleFloaterRef) {
                _this.props.handleFloaterRef(ref);
            }
        };
        return _this;
    }
    /** Gets a rect of the floater's size that is centered in the visual viewport. */
    FloaterWidgetDefault.prototype.getCenteredFloaterRectInLayoutCoords = function () {
        var viewportRectInLayoutCoords = ViewportHelpers.getVisualViewportRectRelativeToLayoutViewport();
        var floaterSize = { width: this.floater.offsetWidth, height: this.floater.offsetHeight };
        var centeredFloaterPosInLayoutCoords = Geometry.computePositionToCenterAreaInBounds(floaterSize, viewportRectInLayoutCoords);
        return Geometry.makeClientRect(centeredFloaterPosInLayoutCoords, floaterSize);
    };
    /** Gets a rect that represents a lower bound on the extents of the page. */
    FloaterWidgetDefault.prototype.getMinimumPageRectInLayoutCoords = function () {
        /**
         * It's tricky to get the full size of the page because super-wide elements can stretch the page beyond the document's
         * initial containing block, but getting a minimum bound on the page size is good enough for our purposes.
         */
        var pagePosInLayoutCoords = ViewportHelpers.getElementPositionRelativeToLayoutViewport(document.documentElement);
        var minimumPageSizeInferredFromLayoutViewport = ViewportHelpers.getLayoutViewportSize();
        var viewportRectInLayoutCoords = ViewportHelpers.getVisualViewportRectRelativeToLayoutViewport();
        var minimumPageSizeInferredFromVisualViewport = {
            width: viewportRectInLayoutCoords.right - pagePosInLayoutCoords.left,
            height: viewportRectInLayoutCoords.bottom - pagePosInLayoutCoords.top
        };
        var minimumPageSize = Geometry.getMaxWidthAndHeight(minimumPageSizeInferredFromLayoutViewport, minimumPageSizeInferredFromVisualViewport);
        return Geometry.makeClientRect(pagePosInLayoutCoords, minimumPageSize);
    };
    /**
     * Centers the floater in the visual viweport.
     */
    FloaterWidgetDefault.prototype.centerInVisualViewport = function () {
        var centeredFloaterRectInLayoutCoords = this.getCenteredFloaterRectInLayoutCoords();
        var minimumPageRectInLayoutCoords = this.getMinimumPageRectInLayoutCoords();
        /** Constrain position to prevent us from positioning outside of the page, which could cause unwanted overflow. */
        var constrainedFloaterPosInLayoutCoords = Geometry.computePositionToContainBounds(centeredFloaterRectInLayoutCoords, minimumPageRectInLayoutCoords);
        this.setPosition(constrainedFloaterPosInLayoutCoords);
    };
    FloaterWidgetDefault.prototype.getFloaterClientRect = function () {
        return this.floater.getBoundingClientRect();
    };
    /**
     * Set the position of the floater widget. The position should be in layout viewport coordinates.
     */
    FloaterWidgetDefault.prototype.setPosition = function (pos) {
        var offsetParent = this.floater.offsetParent || document.documentElement;
        var offsetParentPosInLayoutCoords = ViewportHelpers.getElementPositionRelativeToLayoutViewport(offsetParent);
        var posInOffsetParentCoords = Geometry.subtractPositions(pos, offsetParentPosInLayoutCoords);
        this.floater.style.top = posInOffsetParentCoords.top + 'px';
        this.floater.style.left = posInOffsetParentCoords.left + 'px';
    };
    FloaterWidgetDefault.prototype.componentDidMount = function () {
        this.centerInVisualViewport();
    };
    FloaterWidgetDefault.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        if (this.props.shouldRecenterOnUpdate) {
            this.clearDeferredCentering();
            /* Positioning is size-sensitive, so make sure the DOM has been drawn first before positioning */
            this.centerTimeoutHandle = window.setTimeout(function () {
                _this.centerInVisualViewport();
            }, 0);
        }
    };
    FloaterWidgetDefault.prototype.clearDeferredCentering = function () {
        if (this.centerTimeoutHandle) {
            clearTimeout(this.centerTimeoutHandle);
            this.centerTimeoutHandle = null;
        }
    };
    FloaterWidgetDefault.prototype.componentWillUnmount = function () {
        this.clearDeferredCentering();
    };
    FloaterWidgetDefault.prototype.render = function () {
        var containerStyle = {
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'Floater'),
            style: tslib_1.__assign({}, Styles.Floater, this.props.customFloaterStyle),
            ref: this.floaterRefHandler
        };
        return react_1.createElement(DomWidgets_1.Block, containerStyle, this.props.children);
    };
    return FloaterWidgetDefault;
}(React.Component));
exports.FloaterWidgetDefault = FloaterWidgetDefault;
var FloaterWidget = StackingComponent_1.StackingComponentHOC(FloaterWidgetDefault);
exports.FloaterWidget = FloaterWidget;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var react_1 = __webpack_require__(0);
var DomWidgets_1 = __webpack_require__(4);
var Declarative_1 = __webpack_require__(3);
var TabStyles_1 = __webpack_require__(2);
var InteractiveDom_1 = __webpack_require__(8);
var DynamicThemeComponent_1 = __webpack_require__(5);
var StackingComponent_1 = __webpack_require__(19);
var getStyles = function () {
    return {
        Glass: {
            position: 'fixed',
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            padding: 0,
            margin: 0,
            pointerEvents: 'auto'
        },
        Clear: {
            backgroundColor: TabStyles_1.TabStyles.Colors.White,
            opacity: TabStyles_1.TabStyles.Opacity.ClearGlass
        },
        Opaque: {
            backgroundColor: TabStyles_1.TabStyles.Colors.OpaqueGlass,
            opacity: TabStyles_1.TabStyles.Opacity.OpaqueGlass
        }
    };
};
var GlassWidgetBase = /** @class */ (function (_super) {
    tslib_1.__extends(GlassWidgetBase, _super);
    function GlassWidgetBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleKeyDown = function (e) {
            if ((e.key === 'Tab' && e.shiftKey) ||
                (e.key === 'Escape' && _this.props.handleEscape)) {
                e.preventDefault();
                e.stopPropagation();
            }
        };
        _this.handleKeyUp = function (e) {
            if (_this.props.handleEscape && e.key === 'Escape') {
                _this.props.handleEscape();
                e.preventDefault();
                e.stopPropagation();
            }
        };
        return _this;
    }
    GlassWidgetBase.prototype.render = function () {
        var _this = this;
        var styles = getStyles();
        var style = tslib_1.__assign({}, styles.Glass, (this.props.isTransparent ? styles.Clear : styles.Opaque));
        return react_1.createElement(InteractiveDom_1.InteractiveDomWrapper, {
            pointerClick: function (e) {
                e.preventDefault();
                if (_this.props.handleClick) {
                    _this.props.handleClick();
                }
            }
        }, react_1.createElement(DomWidgets_1.Block, {
            style: style,
            onKeyDown: this.handleKeyDown,
            onKeyUp: this.handleKeyUp,
            tabIndex: 0,
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'Glass')
        }));
    };
    return GlassWidgetBase;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.GlassWidgetBase = GlassWidgetBase;
var GlassWidget = StackingComponent_1.StackingComponentHOC(GlassWidgetBase);
exports.GlassWidget = GlassWidget;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var tabbable = __webpack_require__(57);
var Declarative_1 = __webpack_require__(3);
var DomUtil_1 = __webpack_require__(7);
var DomWidgets_1 = __webpack_require__(4);
var DialogBody_1 = __webpack_require__(120);
var DialogFooter_1 = __webpack_require__(121);
var DialogHeader_1 = __webpack_require__(122);
var DialogWidget_1 = __webpack_require__(30);
var DialogContentStyles = {
    display: 'flex',
    flexDirection: 'column',
    outline: 'none',
    overflow: 'hidden',
};
var DialogContent = /** @class */ (function (_super) {
    tslib_1.__extends(DialogContent, _super);
    function DialogContent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sawESCkeyDown = false; // only handle ESC keyUp when dialog previously got ESC keyDown
        _this.handleDialogHeaderRef = function (header) {
            _this.dialogHeader = ReactDOM.findDOMNode(header);
        };
        _this.handleDialogKeyUp = function (e) {
            if (e.key === 'Escape' && _this.sawESCkeyDown) {
                _this.sawESCkeyDown = false;
                _this.props.onCloseRequest();
            }
        };
        _this.handleDialogKeyDown = function (e) {
            if (e.key === 'Escape') {
                // eat Escape keyDown since we'll handle it in keyUp
                _this.sawESCkeyDown = true;
                e.preventDefault();
                e.stopPropagation();
                return;
            }
            else if (e.key === 'Tab') {
                // trap focus in the dialog
                var tabbables = tabbable(_this.dialog);
                var first = tabbables.length > 0 ? tabbables[0] : null;
                var last = tabbables.length > 0 ? tabbables[tabbables.length - 1] : null;
                if (e.target === last && !e.shiftKey) {
                    e.preventDefault();
                    first.focus();
                }
                else if (e.target === first && e.shiftKey) {
                    e.preventDefault();
                    last.focus();
                }
            }
        };
        return _this;
    }
    DialogContent.prototype.componentDidMount = function () {
        // Initially set the element to return focus to as the last active element.
        this.elementToReturnFocus = document.activeElement;
        this.dialog = ReactDOM.findDOMNode(this);
        if (!this.props.disableAutoFocus) {
            this.initializeFocusOnMount();
        }
        this.setFocusEventListener();
        document.addEventListener('focus', this.focusEventListener, true);
        // IE11 column-based flex containers need an explicit height to size flex children correctly. The symptom that we want to avoid
        // is when the content overflows the floater rather than shrinking, so apply this hack only if that happens.
        if (this.dialog.offsetHeight > this.dialog.parentElement.clientHeight) {
            this.dialog.style.height = this.dialog.parentElement.clientHeight + 'px';
        }
    };
    /**
     * It should focus on the first focusable element within the dialog content, otherwise focus on the first thing in the header
     * If no elements are focusable within the dialog it should throw an error.
     */
    DialogContent.prototype.initializeFocusOnMount = function () {
        var tabbables = tabbable(this.dialog);
        if (tabbables.length === 0) {
            throw Error('Something within the dialog must be focusable as to dismiss it');
        }
        // The first focusable element after the header if any elements exist or the first focusable element of the header if none do
        var idxOfElementToFocus = 0;
        if (!!this.dialogHeader) {
            for (var idx = 0; idx < tabbables.length; idx++) {
                if (!(this.dialogHeader.contains(tabbables[idx]))) {
                    idxOfElementToFocus = idx;
                    break;
                }
            }
        }
        var elementToFocus = tabbables[idxOfElementToFocus];
        // Queue this so that it occurs after the floater or overlay is positioned,
        // so that when the browser scrolls to the focused element it will scroll to the correct position.
        DomUtil_1.timeoutFocus(elementToFocus);
    };
    /**
     * If the dialog is nonModal it should keep track of the last element focused outside the dialog to be focused so when the dialog is
     * closed the focus can return to the last focused element.
     */
    DialogContent.prototype.setFocusEventListener = function () {
        var _this = this;
        this.focusEventListener = function (event) {
            if (!_this.props.isModal) {
                var target = event.target;
                if (!_this.dialog.contains(target)) {
                    _this.elementToReturnFocus = target;
                }
            }
        };
    };
    DialogContent.prototype.componentWillUnmount = function () {
        document.removeEventListener('focus', this.focusEventListener, true);
        if (this.props.shouldReturnFocusOnClose) {
            this.returnFocusToElement();
        }
    };
    /**
     * We need to return the focus to either the initial focused element if modal, or the last focused
     * element if nonModal.  We also need to dispatch the focus event so that it fires its onFocus
     * handlers.
     */
    DialogContent.prototype.returnFocusToElement = function () {
        /**
         * We must use setTimeout here because it is likely a focus event is causing the dialog to unmount.  We need
         * to queue this event so that it is called correctly.
         */
        DomUtil_1.timeoutFocus(this.elementToReturnFocus);
    };
    DialogContent.prototype.render = function () {
        var headerProps = tslib_1.__assign({}, this.props, { ref: this.handleDialogHeaderRef });
        var hasHeader = this.props.type !== DialogWidget_1.DialogType.Uber;
        return (React.createElement(DomWidgets_1.Block, { "aria-label": Declarative_1.conditional(!hasHeader, this.props.title), "aria-labelledby": Declarative_1.conditional(hasHeader && !!this.props.title, this.props.id), "aria-modal": this.props.isModal, "data-tb-test-id": Declarative_1.testId(this.props.testId, 'Content'), onKeyDown: this.handleDialogKeyDown, onKeyUp: this.handleDialogKeyUp, role: 'dialog', style: tslib_1.__assign({}, DialogContentStyles, this.props.dialogContentStyle), tabIndex: -1 },
            hasHeader && React.createElement(DialogHeader_1.DialogHeader, tslib_1.__assign({}, headerProps)),
            React.createElement(DialogBody_1.DialogBody, tslib_1.__assign({}, this.props)),
            this.props.showFooter && React.createElement(DialogFooter_1.DialogFooter, tslib_1.__assign({}, this.props))));
    };
    return DialogContent;
}(React.Component));
exports.DialogContent = DialogContent;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var react_1 = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var DialogWidget_1 = __webpack_require__(30);
var DomWidgets_1 = __webpack_require__(4);
var TabStyles_1 = __webpack_require__(2);
var getStyles = function () {
    return ({
        Body: {
            outline: 'none',
            overflow: 'auto',
            WebkitOverflowScrolling: 'touch',
        }
    });
};
var DialogBody = /** @class */ (function (_super) {
    tslib_1.__extends(DialogBody, _super);
    function DialogBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // Get the padding style of the body depending upon the dialog type and if the footer is being shown
    DialogBody.prototype.getPaddingStyle = function () {
        var style = {
            paddingTop: 0,
            paddingRight: TabStyles_1.TabStyles.Spacing.LargeSpace,
            paddingBottom: TabStyles_1.TabStyles.Spacing.LargeSpace,
            paddingLeft: TabStyles_1.TabStyles.Spacing.LargeSpace
        };
        switch (this.props.type) {
            case DialogWidget_1.DialogType.NormalWithTitleBar:
                style.paddingTop = TabStyles_1.TabStyles.Spacing.LargeSpace;
                break;
            case DialogWidget_1.DialogType.LightweightTitleBar:
                style.paddingLeft = TabStyles_1.TabStyles.Spacing.ExtraLargeSpace - TabStyles_1.TabStyles.Sizing.BorderWidth;
                style.paddingRight = style.paddingLeft;
                break;
            case DialogWidget_1.DialogType.Uber:
                style.paddingTop = TabStyles_1.TabStyles.Spacing.MediumSpace;
                break;
            default:
                break;
        }
        if (this.props.showFooter) {
            style.paddingBottom = 0;
        }
        return style;
    };
    DialogBody.prototype.render = function () {
        var styles = getStyles();
        var bodyStyle = tslib_1.__assign({}, styles.Body, this.getPaddingStyle(), this.props.dialogBodyStyle);
        return (react_1.createElement(DomWidgets_1.Block, { 'data-tb-test-id': Declarative_1.testId(this.props.testId, 'Body'), style: bodyStyle, id: Declarative_1.testId(this.props.testId, 'Body-Id') }, this.props.children));
    };
    return DialogBody;
}(React.Component));
exports.DialogBody = DialogBody;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var DomWidgets_1 = __webpack_require__(4);
var TabStyles_1 = __webpack_require__(2);
var FooterHeight = TabStyles_1.TabStyles.Sizing.BaseUnit * 8;
var getStyles = function () {
    return ({
        Footer: {
            paddingLeft: TabStyles_1.TabStyles.Spacing.LargeSpace,
            paddingRight: TabStyles_1.TabStyles.Spacing.LargeSpace,
            paddingTop: 0,
            paddingBottom: 0,
            height: FooterHeight,
            flexShrink: 0
        },
        FooterContent: {
            height: '100%',
        }
    });
};
var DialogFooter = function (props) {
    var styles = getStyles();
    return (react_1.createElement(DomWidgets_1.Block, { 'data-tb-test-id': Declarative_1.testId(props.testId, 'Footer'), style: styles.Footer }, Declarative_1.conditional(!!props.footerContent, react_1.createElement(DomWidgets_1.Block, { style: styles.FooterContent }, props.footerContent))));
};
exports.DialogFooter = DialogFooter;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var react_1 = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var CloseButtonWidget_1 = __webpack_require__(123);
var Declarative_1 = __webpack_require__(3);
var DialogWidget_1 = __webpack_require__(30);
var DomWidgets_1 = __webpack_require__(4);
var PointerEvents_1 = __webpack_require__(13);
var TabStyles_1 = __webpack_require__(2);
var TextEllipsis_1 = __webpack_require__(16);
var UserInteraction_1 = __webpack_require__(41);
var Localize_1 = __webpack_require__(11);
var PreventUserSelect_1 = __webpack_require__(12);
var GlobalPointerEventCapturer_1 = __webpack_require__(58);
var getStyles = function () {
    return ({
        DraggableHeader: {
            cursor: 'move'
        },
        Header: tslib_1.__assign({}, PreventUserSelect_1.PreventUserSelect, { flexShrink: 0, minHeight: TabStyles_1.TabStyles.Sizing.BaseUnit * 5 }),
        TitleBar: tslib_1.__assign({ fontSize: TabStyles_1.TabStyles.Typography.Sizing.Default, color: TabStyles_1.TabStyles.Typography.Color.Primary, backgroundColor: TabStyles_1.TabStyles.Colors.F2, height: '100%', minHeight: 'inherit', paddingRight: TabStyles_1.TabStyles.Spacing.LargeSpace, paddingLeft: TabStyles_1.TabStyles.Spacing.LargeSpace, display: 'flex', alignItems: 'center', lineHeight: 'normal' }, TextEllipsis_1.TextEllipsis),
        TitleBarWithCloseButton: {
            paddingRight: 0,
        },
        LightweightTitleBar: {
            fontSize: 20,
            height: '100%',
            minHeight: 'inherit',
            paddingTop: 20,
            paddingLeft: TabStyles_1.TabStyles.Spacing.ExtraLargeSpace - TabStyles_1.TabStyles.Sizing.BorderWidth,
            paddingRight: TabStyles_1.TabStyles.Spacing.ExtraLargeSpace - TabStyles_1.TabStyles.Sizing.BorderWidth,
            paddingBottom: TabStyles_1.TabStyles.Spacing.DefaultSpace,
            display: 'flex',
            alignItems: 'center',
            lineHeight: 'normal'
        },
        LighweightTitleBarCloseButton: {
            top: 10,
            right: 10,
            position: 'absolute'
        },
        Title: tslib_1.__assign({ flexGrow: 1 }, TextEllipsis_1.TextEllipsis),
    });
};
var DialogHeader = /** @class */ (function (_super) {
    tslib_1.__extends(DialogHeader, _super);
    function DialogHeader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleStart = function (event) {
            if (!_this.isEventWithinCloseButton(event) && _this.props.positioningBehavior === DialogWidget_1.DialogPositioningBehavior.Draggable) {
                event.preventDefault();
                var clientPosition = UserInteraction_1.getClientPosition(event);
                var dialogClientRect = _this.props.getDraggableDialogClientRect();
                _this.startXPosition = clientPosition.x - dialogClientRect.left;
                _this.startYPosition = clientPosition.y - dialogClientRect.top;
                _this.addMouseEventListeners();
            }
        };
        /**
         * Moves the dialog container
         */
        _this.handleMove = function (event) {
            event.preventDefault();
            var clientPosition = UserInteraction_1.getClientPosition(event);
            _this.props.setDraggableDialogPosition({
                top: clientPosition.y - _this.startYPosition,
                left: clientPosition.x - _this.startXPosition
            });
        };
        _this.handleStop = function (event) {
            _this.removeMouseEventListeners();
        };
        _this.handleCloseButtonRef = function (ref) {
            _this.closeButton = ReactDOM.findDOMNode(ref);
        };
        _this.handleRef = function (ref) {
            if (_this.globalPointerEventCapturer) {
                _this.removeMouseEventListeners();
            }
            if (!ref) {
                return;
            }
            _this.globalPointerEventCapturer = new GlobalPointerEventCapturer_1.GlobalPointerEventCapturer(ReactDOM.findDOMNode(ref), _this.handleMove, _this.handleStop);
        };
        return _this;
    }
    DialogHeader.prototype.componentWillUnmount = function () {
        this.removeMouseEventListeners();
    };
    DialogHeader.prototype.addMouseEventListeners = function () {
        this.globalPointerEventCapturer.addListeners();
    };
    DialogHeader.prototype.removeMouseEventListeners = function () {
        this.globalPointerEventCapturer.removeListeners();
    };
    DialogHeader.prototype.isEventWithinCloseButton = function (event) {
        var target = event.target;
        return (!!this.closeButton && this.closeButton.contains(target));
    };
    DialogHeader.prototype.render = function () {
        var styles = getStyles();
        var headerStyle = tslib_1.__assign({}, styles.Header, Declarative_1.conditional(this.props.positioningBehavior === DialogWidget_1.DialogPositioningBehavior.Draggable, styles.DraggableHeader));
        var showTitleBar = false;
        var titleBarStyle = {};
        var closeButtonWrapperStyle = {};
        if (this.props.type === DialogWidget_1.DialogType.NormalWithTitleBar) {
            showTitleBar = true;
            titleBarStyle = tslib_1.__assign({}, styles.TitleBar, Declarative_1.conditional(this.props.showCloseButton, styles.TitleBarWithCloseButton));
        }
        else if (this.props.type === DialogWidget_1.DialogType.LightweightTitleBar) {
            showTitleBar = true;
            titleBarStyle = tslib_1.__assign({}, styles.LightweightTitleBar);
            closeButtonWrapperStyle = tslib_1.__assign({}, styles.LighweightTitleBarCloseButton);
        }
        var closeButtonProps = {
            testId: this.props.testId,
            tooltip: Localize_1.Messages.closeDialog(),
            requestClose: this.props.onCloseRequest,
            ref: this.handleCloseButtonRef
        };
        return (react_1.createElement(PointerEvents_1.PointerEventWrapper, {
            pointerDown: this.handleStart
        }, react_1.createElement(DomWidgets_1.Block, { ref: this.handleRef, 'data-tb-test-id': Declarative_1.testId(this.props.testId, 'Header'), style: headerStyle }, Declarative_1.conditional(showTitleBar, react_1.createElement(DomWidgets_1.Block, { 'data-tb-test-id': Declarative_1.testId(this.props.testId, 'TitleBar'), style: titleBarStyle }, Declarative_1.conditional(!!this.props.title, react_1.createElement(DomWidgets_1.Block, { style: styles.Title, id: this.props.id }, this.props.title)), Declarative_1.conditional(this.props.showCloseButton, react_1.createElement(DomWidgets_1.InlineBlock, { style: closeButtonWrapperStyle }, react_1.createElement(CloseButtonWidget_1.CloseButtonWidget, closeButtonProps))))))));
    };
    return DialogHeader;
}(React.Component));
exports.DialogHeader = DialogHeader;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var react_1 = __webpack_require__(0);
var TabStyles_1 = __webpack_require__(2);
var InteractiveDom_1 = __webpack_require__(8);
var Declarative_1 = __webpack_require__(3);
var DomWidgets_1 = __webpack_require__(4);
var Icons_1 = __webpack_require__(6);
var DynamicThemeComponent_1 = __webpack_require__(5);
var Localize_1 = __webpack_require__(11);
var getStyles = function () {
    return {
        containerBase: {
            width: TabStyles_1.TabStyles.Sizing.BaseUnit * 5,
            height: TabStyles_1.TabStyles.Sizing.BaseUnit * 5,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            cursor: 'auto',
            outline: 'none',
            flexShrink: 0
        },
        imageContainer: {
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            width: TabStyles_1.TabStyles.Sizing.BaseUnit * 3,
            height: TabStyles_1.TabStyles.Sizing.BaseUnit * 3,
        },
    };
};
var CloseButtonWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CloseButtonWidget, _super);
    function CloseButtonWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.handleHover = function (hover) {
            _this.setState({ hover: hover });
        };
        _this.handleFocus = function (focus) {
            _this.setState({ focus: focus });
        };
        _this.handleActive = function (active) {
            _this.setState({ active: active });
        };
        _this.handleKeyDown = function (e) {
            if (e.key === 'Enter' || e.key === ' ') {
                _this.props.requestClose();
            }
        };
        _this.state = { hover: false, active: false, focus: false };
        return _this;
    }
    CloseButtonWidget.prototype.render = function () {
        var styles = getStyles();
        var icon;
        var imageContainerStyle;
        if (this.state.hover || this.state.focus || this.state.active) {
            icon = Icons_1.CloseButtonIcon.icon({ active: true });
            imageContainerStyle = tslib_1.__assign({}, styles.imageContainer, { backgroundColor: TabStyles_1.TabStyles.Colors.F3 });
        }
        else {
            icon = Icons_1.CloseButtonIcon.icon();
            imageContainerStyle = styles.imageContainer;
        }
        return (react_1.createElement(InteractiveDom_1.InteractiveDomWrapper, {
            pointerClick: this.props.requestClose,
            handleHover: this.handleHover,
            handleActive: this.handleActive,
            handleFocus: this.handleFocus,
        }, 
        // The reason we have this 'containerBase' block is to give the button a wider tap-target area on mobile but
        // not change how the button appears, specifically when the mouse hovers over it.
        react_1.createElement(DomWidgets_1.Block, {
            style: styles.containerBase,
            tabIndex: 0,
            onKeyDown: this.handleKeyDown,
            role: 'button',
            title: this.props.tooltip || Localize_1.Messages.close(),
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'CloseButton')
        }, react_1.createElement(DomWidgets_1.Block, {
            style: imageContainerStyle,
        }, react_1.createElement(DomWidgets_1.Img, {
            src: icon,
            draggable: false,
            style: {
                width: Icons_1.CloseButtonIcon.width,
                height: Icons_1.CloseButtonIcon.height,
            }
        })))));
    };
    return CloseButtonWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.CloseButtonWidget = CloseButtonWidget;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ButtonWidget_1 = __webpack_require__(14);
var Declarative_1 = __webpack_require__(3);
var DomWidgets_1 = __webpack_require__(4);
var TabStyles_1 = __webpack_require__(2);
var getStyles = function () {
    return {
        ButtonsContainer: {
            alignItems: 'center',
            display: 'flex',
            height: '100%',
            justifyContent: 'flex-end'
        },
        FooterButton: {
            paddingLeft: TabStyles_1.TabStyles.Spacing.MediumSpace
        }
    };
};
var getFooterButtons = function (props) {
    return (props.buttons.map(function (buttonProps, idx) {
        return (React.createElement(DomWidgets_1.InlineBlock, { style: Declarative_1.conditional(idx !== 0, getStyles().FooterButton), key: idx },
            React.createElement(ButtonWidget_1.ButtonWidget, tslib_1.__assign({}, buttonProps))));
    }));
};
/**
 * These buttons shall be right-justified, vertically centered, and appropriately spaced.
 */
var DialogFooterButtonsWidget = function (props) {
    var blockProps = {
        'data-tb-test-id': Declarative_1.testId(props.testId, 'Confirm-Cancel-Footer'),
        style: getStyles().ButtonsContainer
    };
    return (React.createElement(DomWidgets_1.Block, tslib_1.__assign({}, blockProps), getFooterButtons(props)));
};
exports.DialogFooterButtonsWidget = DialogFooterButtonsWidget;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var react_1 = __webpack_require__(0);
var ProgressBarWidgets_1 = __webpack_require__(126);
var DynamicThemeComponent_1 = __webpack_require__(5);
// While functional, the discrete progress bar widget is awaiting approval from Visual Design.
// tslint:disable:class-name
var DiscreteProgressBarWidget_UNFINISHED = /** @class */ (function (_super) {
    tslib_1.__extends(DiscreteProgressBarWidget_UNFINISHED, _super);
    function DiscreteProgressBarWidget_UNFINISHED() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DiscreteProgressBarWidget_UNFINISHED.prototype.render = function () {
        var fractionComplete = this.props.currentStep / this.props.totalSteps;
        return react_1.createElement(ProgressBarWidgets_1.ProgressBarContainer, { width: this.props.width }, react_1.createElement(ProgressBarWidgets_1.ProgressCompleteBar, { fractionComplete: fractionComplete }, fractionComplete === 1 ? null : react_1.createElement(ProgressBarWidgets_1.ProgressBarAnimation, { containerWidth: this.props.width * fractionComplete })));
    };
    return DiscreteProgressBarWidget_UNFINISHED;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.DiscreteProgressBarWidget_UNFINISHED = DiscreteProgressBarWidget_UNFINISHED;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var react_1 = __webpack_require__(0);
var StyleSheet_1 = __webpack_require__(39);
var TabStyles_1 = __webpack_require__(2);
var DomWidgets_1 = __webpack_require__(4);
var getProgressBarContainerStyle = function () {
    return {
        backgroundColor: TabStyles_1.TabStyles.Colors.F3,
        borderRadius: TabStyles_1.TabStyles.Sizing.BorderRadius,
        height: TabStyles_1.TabStyles.Sizing.BaseUnit
    };
};
var ProgressBarContainer = function (props) {
    var style = tslib_1.__assign({}, getProgressBarContainerStyle(), { width: props.width });
    return react_1.createElement(DomWidgets_1.Block, { style: style }, props.children);
};
exports.ProgressBarContainer = ProgressBarContainer;
var getProgressBarStyle = function () {
    return {
        backgroundColor: TabStyles_1.TabStyles.Colors.GoLight,
        position: 'absolute',
        top: 0,
        left: 0,
        height: '100%'
    };
};
var ProgressCompleteBar = function (props) {
    var style = tslib_1.__assign({}, getProgressBarStyle(), { width: 100 * props.fractionComplete + "%" });
    return react_1.createElement(DomWidgets_1.Block, { style: style }, props.children);
};
exports.ProgressCompleteBar = ProgressCompleteBar;
var getProgressBarAnimationWidth = function () { return TabStyles_1.TabStyles.Sizing.BaseUnit; };
var getProgressBarAnimationStaticStyle = function () {
    return {
        position: 'absolute',
        top: 0,
        width: getProgressBarAnimationWidth(),
        height: '100%',
        backgroundColor: TabStyles_1.TabStyles.Colors.GoDark
    };
};
var ProgressBarAnimation = function (_a) {
    var containerWidth = _a.containerWidth;
    var animationClassName = StyleSheet_1.SingletonStyleSheet.addAnimation({
        keyframes: {
            fromCSSLines: {
                transform: "translate3d(0px, 0px, 0px)",
            },
            toCSSLines: {
                transform: "translate3d(" + (containerWidth - getProgressBarAnimationWidth()) + "px, 0px, 0px)",
            },
        },
        options: {
            count: Infinity,
            durationMs: 1000,
            direction: 'alternate',
            timingFunction: 'ease-in-out',
        },
    });
    return react_1.createElement(DomWidgets_1.Block, {
        style: getProgressBarAnimationStaticStyle(),
        className: animationClassName,
    });
};
exports.ProgressBarAnimation = ProgressBarAnimation;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
// tslint:disable:deprecation
var React = __webpack_require__(0);
var DropdownWidget_1 = __webpack_require__(43);
var MenuItemInfo_1 = __webpack_require__(62);
/**
 * This serves as an adapter to the old api dropdownwidget and the new generic dropdownwidget
 * so as to not break the api.
 *
 * @deprecated use `DropdownButton` or `SingleSelectDropdown`
 */
var DropdownWidget = function (props) {
    var convertedProps = tslib_1.__assign({}, props, { menuItemInfos: MenuItemInfo_1.convertMenuItemInfoToGeneric(props.menuItemInfos) });
    return React.createElement(DropdownWidget_1.GenericDropdownWidget, convertedProps);
};
exports.DropdownWidget = DropdownWidget;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __webpack_require__(0);
var TabStyles_1 = __webpack_require__(2);
var Sizing = TabStyles_1.TabStyles.Sizing, Colors = TabStyles_1.TabStyles.Colors;
var getStyles = function () {
    return {
        marginTop: Sizing.ListRowHeight / 2,
        marginBottom: Sizing.ListRowHeight / 2,
        marginRight: 0,
        marginLeft: 0,
        border: 'none',
        borderTop: Sizing.BorderWidth + "px solid " + Colors.L3
    };
};
var DividerWidget = function () {
    return react_1.createElement('hr', {
        style: getStyles(),
        role: 'separator',
        'aria-orientation': 'horizontal'
    });
};
exports.DividerWidget = DividerWidget;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DomUtil_1 = __webpack_require__(7);
var InteractiveDom_1 = __webpack_require__(8);
var Overlay_1 = __webpack_require__(10);
var DynamicThemeComponent_1 = __webpack_require__(5);
var FlyoutListMenuWidget_1 = __webpack_require__(31);
var ListMenuWidget_1 = __webpack_require__(60);
exports.ActiveMenuItemSubmenuDelayMs = 150; // TFSID 707410
var SubMenuOffset = function () { return -(
// tslint:disable-next-line:max-line-length
parseFloat((FlyoutListMenuWidget_1.FlyoutListMenuStyles.borderTopWidth || FlyoutListMenuWidget_1.FlyoutListMenuStyles.borderTop || FlyoutListMenuWidget_1.FlyoutListMenuStyles.borderWidth || FlyoutListMenuWidget_1.FlyoutListMenuStyles.border || '0')) +
    parseFloat((ListMenuWidget_1.ListMenuStyles.paddingTop || ListMenuWidget_1.ListMenuStyles.padding || '0'))); };
var MenuItemWidget = /** @class */ (function (_super) {
    tslib_1.__extends(MenuItemWidget, _super);
    function MenuItemWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.domRef = React.createRef();
        _this.state = {
            menuItemActive: false
        };
        _this.hasSubMenu = function () {
            return !!_this.props.menuItemInfos;
        };
        _this.handleKeyDown = function (e) {
            switch (e.key) {
                case ' ':
                case 'Enter':
                    _this.handleSelect();
                    break;
                case 'ArrowRight':
                    if (_this.hasSubMenu()) {
                        _this.handleSelect();
                    }
                    break;
                default:
                    return;
            }
            e.preventDefault();
            e.stopPropagation();
        };
        // MenuItems with submenus have their active state managed by onSelect and onHover
        // MenuItems without submenus have their active state managed by onActive
        _this.handleSelect = function () {
            if (_this.props.disabled || _this.props.isUnselectable) {
                return;
            }
            clearTimeout(_this.subMenuTimeoutId);
            if (_this.hasSubMenu()) {
                _this.setState({ menuItemActive: true });
            }
            else {
                _this.props.onSelect(_this.props.value);
            }
        };
        _this.handleHover = function (e) {
            if (e.type !== 'mouseenter') {
                clearTimeout(_this.subMenuTimeoutId);
                return;
            }
            else if (!_this.props.disabled) {
                if (_this.props.onHover) {
                    _this.props.onHover(_this.props.itemIndex);
                }
                if (_this.hasSubMenu()) {
                    _this.subMenuTimeoutId = window.setTimeout(function () { return _this.setState({ menuItemActive: true }); }, exports.ActiveMenuItemSubmenuDelayMs);
                }
            }
        };
        _this.handleActive = function (active) {
            if (_this.hasSubMenu()) {
                return;
            }
            _this.setState({ menuItemActive: active });
        };
        _this.requestClose = function () {
            _this.setState({ menuItemActive: false });
        };
        // submenu says mouse has entered, so notify containing menu not to dismiss if
        // pointer strayed onto the next item on the way over, TFSID 707410
        _this.handleSubmenuMouseEnter = function () {
            _this.props.onHover(_this.props.itemIndex);
        };
        _this.getItemClientRect = function () {
            if (!_this.domRef.current) {
                return undefined;
            }
            var _a = _this.domRef.current.getBoundingClientRect(), height = _a.height, width = _a.width, left = _a.left, right = _a.right, top = _a.top, bottom = _a.bottom;
            return { height: height, width: width, left: left, right: right, top: top + SubMenuOffset(), bottom: bottom + SubMenuOffset() };
        };
        return _this;
    }
    MenuItemWidget.prototype.componentDidMount = function () {
        this.updateFocus();
    };
    MenuItemWidget.prototype.componentDidUpdate = function (prevProps, prevState) {
        // If the user hovers over and highlights another menu item while a sub menu is open
        if (prevProps.isHighlighted && !this.props.isHighlighted && this.state.menuItemActive) {
            this.setState({ menuItemActive: false });
        }
        this.updateFocus();
    };
    MenuItemWidget.prototype.updateFocus = function () {
        // Put keyboard focus on highlighted item, but not if it has a child submenu open
        if (this.props.isHighlighted && !this.state.menuItemActive && this.props.keyboardFocused) {
            DomUtil_1.timeoutFocus(this.domRef.current);
        }
    };
    MenuItemWidget.prototype.getDisplayElement = function () {
        var displayValueFormatterProps = {
            active: this.state.menuItemActive && this.props.isHighlighted,
            checked: this.props.checked,
            disabled: this.props.disabled,
            hasSubMenu: this.hasSubMenu(),
            isHighlighted: this.props.isHighlighted,
            showCheckGutter: this.props.showCheckGutter,
            testId: this.props.testId
        };
        return React.createElement(this.props.displayFormatterBoundWithData, displayValueFormatterProps);
    };
    MenuItemWidget.prototype.shouldShowSubmenu = function () {
        return this.state.menuItemActive
            && this.props.isHighlighted
            && !this.props.disabled
            && !this.props.isUnselectable
            && this.hasSubMenu();
    };
    MenuItemWidget.prototype.render = function () {
        var showSubmenu = this.shouldShowSubmenu();
        if (showSubmenu) {
            this.props.onSubmenuShown(this.props.itemIndex);
        }
        return (React.createElement(InteractiveDom_1.InteractiveDomWrapper, { disabled: this.props.disabled, handleActive: this.handleActive, pointerClick: this.handleSelect },
            React.createElement("div", { "aria-checked": this.props.checked, "aria-disabled": this.props.disabled, "aria-haspopup": this.hasSubMenu(), "data-tb-test-id": this.props.testId + "-" + this.props.value + "-MenuItem", onKeyDown: this.handleKeyDown, onMouseEnter: this.handleHover, onMouseLeave: this.handleHover, ref: this.domRef, role: this.props.role || (this.props.checked === undefined ? 'menuitem' : 'menuitemcheckbox'), style: { outline: 'none' }, tabIndex: !this.props.disabled ? -1 : null },
                this.getDisplayElement(),
                showSubmenu && React.createElement(FlyoutListMenuWidget_1.GenericFlyoutListMenuWidget, { allowAutoPosition: this.props.subMenuAllowAutoPosition, anchorOrigin: { vertical: Overlay_1.VerticalOriginOption.top, horizontal: Overlay_1.HorizontalOriginOption.right }, getAnchorClientRect: this.getItemClientRect, maxHeight: this.props.subMenuMaxHeight, menuItemInfos: this.props.menuItemInfos, menuStyle: this.props.subMenuStyle, onEscapeKeyUp: this.requestClose, onLeftArrowKeyDown: this.requestClose, onMouseEnter: this.handleSubmenuMouseEnter, onSelect: this.props.onSelect, requestCloseAll: this.props.requestCloseAll, scrollingRootId: this.props.scrollingRootId, shouldAutoPositionOnScrollingRootScroll: this.props.subMenuShouldAutoPositionOnScrollingRootScroll, stackedOrigin: { vertical: Overlay_1.VerticalOriginOption.top, horizontal: Overlay_1.HorizontalOriginOption.left }, stackingRootId: this.props.stackingRootId, testId: this.props.testId + "-" + this.props.value, zIndex: this.props.zIndex }))));
    };
    return MenuItemWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.MenuItemWidget = MenuItemWidget;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var Icons_1 = __webpack_require__(6);
var TabStyles_1 = __webpack_require__(2);
var TextEllipsis_1 = __webpack_require__(16);
var Colors = TabStyles_1.TabStyles.Colors, Sizing = TabStyles_1.TabStyles.Sizing, Spacing = TabStyles_1.TabStyles.Spacing, Typography = TabStyles_1.TabStyles.Typography;
exports.getStyles = function (options) {
    return {
        input: {
            base: {
                borderWidth: Sizing.BorderWidth,
                borderRadius: Sizing.BorderRadius,
                borderColor: options.onDarkBackground ? Colors.WhiteTransparentLine : Colors.L6,
                borderStyle: 'solid',
                height: Sizing.RowHeight,
                paddingLeft: Spacing.DefaultSpace,
                paddingRight: Icons_1.TextFieldClearIcon.width + (Spacing.DefaultSpace * 2),
                outline: 'none',
                backgroundColor: Colors.Transparent,
                fontSize: Typography.Sizing.Default,
                color: options.onDarkBackground ? Typography.Color.InvertedPrimary : Typography.Color.Primary,
                position: 'relative',
                fontWeight: 'normal',
                lineHeight: 'normal',
                WebkitUserSelect: 'text',
                userSelect: 'text',
            },
            interactive: {
                hover: {
                    borderColor: options.onDarkBackground ? Colors.WhiteTransparentLineHover : Colors.L8
                },
                active: {
                    borderColor: options.onDarkBackground ? Colors.WhiteTransparentLineHover : Colors.L8
                },
                focus: {
                    borderColor: options.onDarkBackground ? Colors.WhiteTransparentLineHover : Colors.L8
                },
                disabled: {
                    borderColor: options.onDarkBackground ? Colors.WhiteDisabled : Colors.L9Disabled,
                    color: options.onDarkBackground ? Typography.Color.InvertedDisabled : Typography.Color.Disabled
                },
            },
            noClearIconButton: {
                paddingRight: Spacing.DefaultSpace
            }
        },
        errorInput: {
            borderColor: Colors.AttentionLight
        },
        errorLabel: {
            fontSize: Typography.Sizing.Tiny,
            fontWeight: 'normal',
            color: Colors.AttentionLight,
            lineHeight: 'normal',
        },
        errorContainer: {
            paddingTop: Spacing.SmallSpace
        },
        placeholder: {
            base: tslib_1.__assign({ fontSize: Typography.Sizing.Default, fontWeight: 'normal', color: options.onDarkBackground ? Typography.Color.InvertedSecondary : Typography.Color.Secondary, position: 'absolute', left: Spacing.DefaultSpace + Sizing.BorderWidth, textAlign: 'start', lineHeight: Sizing.RowHeight + 'px', maxWidth: 'calc(100% - ' + (Spacing.DefaultSpace * 2) + 'px)' }, TextEllipsis_1.TextEllipsis),
            disabled: {
                color: options.onDarkBackground ? Typography.Color.InvertedDisabled : Typography.Color.Disabled
            }
        }
    };
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Icons_1 = __webpack_require__(6);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var InteractiveDom_1 = __webpack_require__(8);
var DomWidgets_1 = __webpack_require__(4);
var Spacing = TabStyles_1.TabStyles.Spacing;
var IconStyles = {
    bottom: 0,
    margin: 'auto',
    outline: 'none',
    paddingLeft: Spacing.DefaultSpace,
    paddingRight: Spacing.DefaultSpace,
    paddingTop: 3,
    position: 'absolute',
    right: 0,
    top: 0,
};
var TextFieldClearButton = /** @class */ (function (_super) {
    tslib_1.__extends(TextFieldClearButton, _super);
    function TextFieldClearButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { active: false, focus: false, hover: false };
        _this.handleActive = function (active) {
            _this.setState({ active: active });
            if (_this.props.handleActive) {
                _this.props.handleActive(active);
            }
        };
        _this.handleFocus = function (focus) {
            _this.setState({ focus: focus });
            if (_this.props.handleFocus) {
                _this.props.handleFocus(focus);
            }
        };
        _this.handleHover = function (hover) {
            _this.setState({ hover: hover });
            if (_this.props.handleHover) {
                _this.props.handleHover(hover);
            }
        };
        _this.handlePointerClick = function (e) {
            e.stopPropagation();
            if (_this.props.pointerClick) {
                _this.props.pointerClick(e);
            }
        };
        return _this;
    }
    TextFieldClearButton.prototype.getIcon = function (props, state) {
        var iconState = {
            active: state.active || state.focus || state.hover,
            onDarkBackground: props.onDarkBackground,
        };
        return Icons_1.TextFieldClearIcon.icon(iconState);
    };
    TextFieldClearButton.prototype.render = function () {
        return (React.createElement(InteractiveDom_1.InteractiveDomWrapper, tslib_1.__assign({}, this.props, { handleActive: this.handleActive, handleFocus: this.handleFocus, handleHover: this.handleHover, pointerClick: this.handlePointerClick }),
            React.createElement(DomWidgets_1.Img, { "data-tb-test-id": Declarative_1.testId(this.props.testId, 'ClearIcon'), src: this.getIcon(this.props, this.state), style: IconStyles, 
                /**
                 * We add a tabIndex of -1 so that when a blur event from the text field occurs, it only fires the callback
                 * if the clear icon was not clicked which is tested using the activeElement.
                 */
                tabIndex: -1 })));
    };
    return TextFieldClearButton;
}(React.Component));
exports.TextFieldClearButton = TextFieldClearButton;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var _a, _b, _c;
var React = __webpack_require__(0);
var Icons_1 = __webpack_require__(6);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var DomUtil_1 = __webpack_require__(7);
var InteractiveDom_1 = __webpack_require__(8);
var DomWidgets_1 = __webpack_require__(4);
var DynamicThemeComponent_1 = __webpack_require__(5);
var Spacing = TabStyles_1.TabStyles.Spacing;
var ExpandoDirection;
(function (ExpandoDirection) {
    ExpandoDirection[ExpandoDirection["Up"] = 0] = "Up";
    ExpandoDirection[ExpandoDirection["Down"] = 1] = "Down";
    ExpandoDirection[ExpandoDirection["Left"] = 2] = "Left";
    ExpandoDirection[ExpandoDirection["Right"] = 3] = "Right";
})(ExpandoDirection = exports.ExpandoDirection || (exports.ExpandoDirection = {}));
var CollapsedIconTransform = Object.freeze((_a = {},
    _a[ExpandoDirection.Up] = 'rotate(180deg)',
    _a[ExpandoDirection.Right] = 'rotate(90deg)',
    _a[ExpandoDirection.Down] = 'rotate(180deg)',
    _a[ExpandoDirection.Left] = 'rotate(270deg)',
    _a));
var ExpandedIconTransform = Object.freeze((_b = {},
    _b[ExpandoDirection.Up] = 'rotate(0deg)',
    _b[ExpandoDirection.Right] = CollapsedIconTransform[ExpandoDirection.Left],
    _b[ExpandoDirection.Down] = 'rotate(0deg)',
    _b[ExpandoDirection.Left] = CollapsedIconTransform[ExpandoDirection.Right],
    _b));
var ExpandoFlexDirection = (_c = {},
    _c[ExpandoDirection.Up] = 'column-reverse',
    _c[ExpandoDirection.Down] = 'column',
    _c[ExpandoDirection.Left] = 'row-reverse',
    _c[ExpandoDirection.Right] = 'row',
    _c);
var ExpandoWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ExpandoWidget, _super);
    function ExpandoWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.expandoBaseTestId = 'Expando';
        _this.contentRef = React.createRef();
        _this.contentId = DomUtil_1.generateId();
        _this.state = { hoveringOnExpandoButton: false };
        _this.handleClick = function (e) {
            _this.handleExpandOrCollapse();
        };
        _this.handleKey = function (e) {
            if (e.key === ' ' || e.key === 'Enter') {
                e.stopPropagation();
                e.preventDefault();
                if (e.type === 'keyup') {
                    _this.handleExpandOrCollapse();
                }
            }
        };
        _this.handleHover = function (hover) {
            _this.setState({ hoveringOnExpandoButton: hover });
        };
        return _this;
    }
    ExpandoWidget.prototype.shouldShowLabel = function () {
        return this.props.label && this.props.label.length > 0;
    };
    ExpandoWidget.prototype.handleExpandOrCollapse = function () {
        this.props.isExpanded ? this.props.onCollapse() : this.props.onExpand();
    };
    ExpandoWidget.prototype.updateHeightOrWidth = function () {
        var contentDiv = this.contentRef.current;
        if (!contentDiv) {
            return;
        }
        if (this.isVertical()) {
            if (this.props.isExpanded) {
                contentDiv.style.height = contentDiv.scrollHeight + 'px';
            }
            else {
                contentDiv.style.height = '0px';
            }
        }
        else {
            if (this.props.isExpanded) {
                contentDiv.style.width = contentDiv.scrollWidth + 'px';
            }
            else {
                contentDiv.style.width = '0px';
            }
        }
    };
    ExpandoWidget.prototype.isVertical = function () {
        return this.props.direction === ExpandoDirection.Up || this.props.direction === ExpandoDirection.Down;
    };
    ExpandoWidget.prototype.componentDidUpdate = function () {
        this.updateHeightOrWidth();
    };
    ExpandoWidget.prototype.componentDidMount = function () {
        this.updateHeightOrWidth();
    };
    ExpandoWidget.prototype.getExpandoStyle = function () {
        return {
            display: 'flex',
            flexDirection: ExpandoFlexDirection[this.props.direction],
            alignItems: 'flex-start',
        };
    };
    ExpandoWidget.prototype.getExpandoExpandButtonContentButtonStyle = function () {
        return {
            alignItems: 'center',
            cursor: 'default',
            display: 'flex',
        };
    };
    ExpandoWidget.prototype.getExpandoIconStyle = function () {
        return {
            height: Icons_1.ExpandoIcon.height,
            margin: 'auto',
            marginLeft: 0,
            marginRight: this.props.label ? Spacing.DefaultSpace : 0,
            transform: this.props.isExpanded ? ExpandedIconTransform[this.props.direction] : CollapsedIconTransform[this.props.direction],
            width: Icons_1.ExpandoIcon.width,
        };
    };
    ExpandoWidget.prototype.getExpandoContentStyle = function () {
        return {
            overflow: 'hidden',
            position: 'relative',
            transition: (this.isVertical() ? 'height' : 'width') + " 0.2s ease-out",
        };
    };
    ExpandoWidget.prototype.render = function () {
        return (React.createElement(DomWidgets_1.Block, { "data-tb-test-id": Declarative_1.testId(this.props.testId, this.expandoBaseTestId), style: tslib_1.__assign({}, this.getExpandoStyle(), this.props.style) },
            React.createElement(InteractiveDom_1.InteractiveDomWrapper, { key: 'expandoInteractiveDom', handleHover: this.handleHover, pointerClick: this.handleClick },
                React.createElement(DomWidgets_1.Block, { "aria-controls": this.contentId, "aria-expanded": this.props.isExpanded, "data-tb-test-id": Declarative_1.testId(this.props.testId, this.expandoBaseTestId, 'Button'), onKeyDown: this.handleKey, onKeyUp: this.handleKey, role: 'button', style: this.getExpandoExpandButtonContentButtonStyle(), tabIndex: 0 },
                    React.createElement(DomWidgets_1.Img, { key: 'expandoIcon', "data-tb-test-id": Declarative_1.testId(this.props.testId, this.expandoBaseTestId, 'Icon'), src: Icons_1.ExpandoIcon.icon({ active: this.state.hoveringOnExpandoButton }), style: this.getExpandoIconStyle() }),
                    this.shouldShowLabel() &&
                        React.createElement(DomWidgets_1.InlineBlock, { key: 'expandoLabel', "data-tb-test-id": Declarative_1.testId(this.props.testId, this.expandoBaseTestId, 'Label') }, this.props.label))),
            React.createElement("div", { key: 'expandoContent', "data-tb-test-id": Declarative_1.testId(this.props.testId, this.expandoBaseTestId, 'Content'), id: this.contentId, ref: this.contentRef, style: this.getExpandoContentStyle() }, this.props.children)));
    };
    return ExpandoWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.ExpandoWidget = ExpandoWidget;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var MenuItemInfo_1 = __webpack_require__(62);
var FlyoutListMenuWidget_1 = __webpack_require__(31);
/**
 * This serves as an adapter to the old api FlyoutListMenuWidget and the new generic FlyoutListMenuWidget
 * so as to not break the api.
 */
var FlyoutListMenuWidget = function (props) {
    var convertedProps = tslib_1.__assign({}, props, { menuItemInfos: MenuItemInfo_1.convertMenuItemInfoToGeneric(props.menuItemInfos) });
    return React.createElement(FlyoutListMenuWidget_1.GenericFlyoutListMenuWidget, convertedProps);
};
exports.FlyoutListMenuWidget = FlyoutListMenuWidget;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DomWidgets_1 = __webpack_require__(4);
var Math_1 = __webpack_require__(33);
var OutlineTextFieldWidget_1 = __webpack_require__(21);
var Icons_1 = __webpack_require__(6);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var TextFieldBase_1 = __webpack_require__(17);
var TextFieldInputWidget_1 = __webpack_require__(32);
var VerticalStepperArrowGroup_1 = __webpack_require__(135);
var Spacing = TabStyles_1.TabStyles.Spacing, Sizing = TabStyles_1.TabStyles.Sizing, Typography = TabStyles_1.TabStyles.Typography;
var getStyles = function () {
    return {
        verticalIconPadding: {
            paddingRight: (Icons_1.StepperDownIcon.width + Spacing.DefaultSpace)
        },
        label: {
            fontSize: Typography.Sizing.Default,
            fontWeight: 'normal',
            color: Typography.Color.Primary,
            lineHeight: Sizing.RowHeight + "px",
            paddingRight: Spacing.DefaultSpace
        }
    };
};
var IntegerStepperWidget = /** @class */ (function (_super) {
    tslib_1.__extends(IntegerStepperWidget, _super);
    function IntegerStepperWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.validateProps = function (props) {
            if (props.disabled) {
                // we don't care what the integer values are if the user can't change them
                return;
            }
            if (!_this.isInteger(props.delta)) {
                throw Error("'delta' must be an integer");
            }
            else if (props.delta < 1) {
                throw Error("'delta' must a positive integer");
            }
            if (!_this.isInteger(props.pageDelta)) {
                throw Error("'pageDelta' must be an integer");
            }
            else if (props.pageDelta < 1) {
                throw Error("'pageDelta' must a positive integer");
            }
            if (!_this.isInteger(props.min)) {
                throw Error("'min' must be an integer");
            }
            if (!_this.isInteger(props.max)) {
                throw Error("'max' must be an integer");
            }
            if (!_this.isInteger(props.start)) {
                throw Error("'start' must be an integer");
            }
            if (props.min > props.max) {
                throw Error("'min' must be less than 'max'");
            }
            if (props.start < props.min || props.start > props.max) {
                throw Error("'start' is outside the valid range: [" + props.min + "," + props.max + "]");
            }
            if (props.delta > (props.max - props.min)) {
                throw Error("'delta' is greater than range: " + props.max + " - " + props.min + " = " + (props.max - props.min));
            }
            if (props.pageDelta > (props.max - props.min)) {
                throw Error("'pageDelta' is greater than range: " + props.max + " - " + props.min + " = " + (props.max - props.min));
            }
        };
        _this.isInteger = function (n) {
            return n % 1 === 0;
        };
        _this.handleIncrement = function (stepValue) {
            if (_this.props.disabled || _this.state.isIncrementDisabled) {
                return;
            }
            _this.clampAndCommit(_this.state.lastValidValue + stepValue);
        };
        _this.handleDecrement = function (stepValue) {
            if (_this.props.disabled || _this.state.isDecrementDisabled) {
                return;
            }
            _this.clampAndCommit(_this.state.lastValidValue - stepValue);
        };
        _this.handleInputChange = function (inputValue) {
            if (!/^-?[0-9]*$/.test(inputValue)) {
                return;
            }
            _this.updateState(inputValue);
        };
        _this.handleBlur = function () {
            _this.confirmInput();
            if (_this.props.handleBlur) {
                _this.props.handleBlur();
            }
        };
        _this.handleEnter = function () {
            _this.confirmInput();
        };
        _this.handleEscape = function () {
            _this.revert();
        };
        _this.handleKeyDown = function (e) {
            if (_this.props.disabled) {
                return;
            }
            if (e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {
                return;
            }
            switch (e.key) {
                case 'ArrowUp':
                    _this.confirmInput(function () { return (_this.handleIncrement(_this.props.delta)); });
                    break;
                case 'ArrowDown':
                    _this.confirmInput(function () { return (_this.handleDecrement(_this.props.delta)); });
                    break;
                case 'Home':
                    _this.clampAndCommit(_this.props.min);
                    break;
                case 'PageUp':
                    _this.confirmInput(function () { return (_this.handleIncrement(_this.props.pageDelta)); });
                    break;
                case 'PageDown':
                    _this.confirmInput(function () { return (_this.handleDecrement(_this.props.pageDelta)); });
                    break;
                case 'End':
                    _this.clampAndCommit(_this.props.max);
                    break;
                default:
                    // Do not prevent default or stopPropagation on unhandled key presses
                    return;
            }
            e.preventDefault();
            e.stopPropagation();
        };
        _this.handleArrowHover = function (hover) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ arrowHover: hover });
        };
        _this.validateProps(props);
        _this.state = IntegerStepperWidget.getNextStateFromProps(props, {});
        return _this;
    }
    IntegerStepperWidget.prototype.componentWillReceiveProps = function (nextProps) {
        this.validateProps(nextProps);
        this.setState(IntegerStepperWidget.getNextStateFromProps(nextProps, this.state));
    };
    // mirrors getDerivedStateFromProps coming in React 16.3, might be the wrong type signature tho
    IntegerStepperWidget.getNextStateFromProps = function (nextProps, prevState) {
        return tslib_1.__assign({}, prevState, { isIncrementDisabled: (nextProps.start === nextProps.max), isDecrementDisabled: (nextProps.start === nextProps.min), inputValue: String(nextProps.start), lastValidValue: nextProps.start, arrowHover: prevState.arrowHover || false });
    };
    IntegerStepperWidget.prototype.getInputStyle = function () {
        var textOutlineStyles = OutlineTextFieldWidget_1.getTextOutlineStyles({ onDarkBackground: this.props.onDarkBackground });
        var styles = getStyles();
        var paddingRight = parseInt(styles.verticalIconPadding.paddingRight, 10);
        var paddingLeft = Spacing.DefaultSpace;
        return tslib_1.__assign({}, textOutlineStyles.input.base, this.props.inputStyle, Declarative_1.conditional(this.state.arrowHover, textOutlineStyles.input.interactive.hover), styles.verticalIconPadding, { 
            // should be 3ch but using magic number 27, because IE11 doesn't like the ch unit
            minWidth: (27 + paddingLeft + paddingRight) + 'px' });
    };
    IntegerStepperWidget.prototype.updateState = function (inputValue, lastValidValue, callback) {
        var lastValidValueDefined = lastValidValue !== undefined;
        var valueChanging = lastValidValueDefined && (lastValidValue !== this.state.lastValidValue);
        var inputValueNumber = parseInt(inputValue, 10);
        this.setState(tslib_1.__assign({ inputValue: inputValue }, Declarative_1.conditional(lastValidValueDefined, { lastValidValue: lastValidValue }), { isIncrementDisabled: inputValueNumber >= this.props.max, isDecrementDisabled: inputValueNumber <= this.props.min }), callback);
        if (valueChanging && this.props.onValueUpdated) {
            this.props.onValueUpdated(lastValidValue);
        }
    };
    IntegerStepperWidget.prototype.confirmInput = function (callback) {
        var valueAsNumber = parseInt(this.state.inputValue, 10);
        if (isNaN(valueAsNumber)) {
            this.revert();
        }
        else {
            this.clampAndCommit(valueAsNumber, callback);
        }
    };
    IntegerStepperWidget.prototype.clampAndCommit = function (value, callback) {
        var clampedValue = Math_1.clamp(value, this.props.min, this.props.max);
        this.updateState(clampedValue.toString(), clampedValue, callback);
    };
    IntegerStepperWidget.prototype.revert = function () {
        this.updateState(this.state.lastValidValue.toString());
    };
    IntegerStepperWidget.prototype.renderStepperLabel = function () {
        if (!this.props.label) {
            return undefined;
        }
        var labelStyle = tslib_1.__assign({}, getStyles().label, this.props.labelStyle, Declarative_1.conditional(this.props.onDarkBackground, { color: Typography.Color.InvertedPrimary }));
        return (React.createElement(DomWidgets_1.InlineBlock, null,
            React.createElement("label", { "data-tb-test-id": Declarative_1.testId(this.props.testId, 'IntegerStepperWidget', 'OptionalLabel'), style: labelStyle }, this.props.label)));
    };
    IntegerStepperWidget.prototype.render = function () {
        var _this = this;
        var arrowProps = {
            testId: Declarative_1.testId(this.props.testId, 'IntegerStepperWidget'),
            isIncrementDisabled: this.state.isIncrementDisabled,
            isDecrementDisabled: this.state.isDecrementDisabled,
            disabled: this.props.disabled,
            handleIncrement: function () { return (_this.handleIncrement(_this.props.delta)); },
            handleDecrement: function () { return (_this.handleDecrement(_this.props.delta)); },
            handleHover: this.handleArrowHover,
            onDarkBackground: this.props.onDarkBackground,
        };
        var inputProps = {
            'aria-label': this.props.label,
            'aria-valuemax': this.props.max,
            'aria-valuemin': this.props.min,
            'aria-valuenow': parseInt(this.state.inputValue, 10),
            inputStyle: this.getInputStyle(),
            interactiveStyles: OutlineTextFieldWidget_1.getTextOutlineStyles({ onDarkBackground: this.props.onDarkBackground }).input.interactive,
            text: this.state.inputValue,
            testId: Declarative_1.testId(this.props.testId, 'IntegerStepperWidget'),
            handleChange: this.handleInputChange,
            handleEnter: this.handleEnter,
            handleEscape: this.handleEscape,
            disabled: this.props.disabled,
            handleActive: this.handleInputActive,
            handleFocus: this.handleInputFocus,
            handleHover: this.handleInputHover,
            handleBlur: this.handleBlur,
            onKeyDown: this.handleKeyDown,
            inputRef: this.props.inputRef,
            name: this.props.name,
            onDarkBackground: this.props.onDarkBackground,
            role: 'spinbutton',
            shouldSelectTextOnFocus: this.props.shouldSelectTextOnFocus,
        };
        return (React.createElement(DomWidgets_1.Block, { id: this.props.testId, style: this.props.containerStyle },
            this.renderStepperLabel(),
            React.createElement(DomWidgets_1.InlineBlock, null,
                React.createElement(TextFieldInputWidget_1.TextFieldInputWidget, tslib_1.__assign({}, inputProps)),
                React.createElement(VerticalStepperArrowGroup_1.VerticalStepperArrowGroup, tslib_1.__assign({}, arrowProps)))));
    };
    IntegerStepperWidget.defaultProps = {
        delta: 1,
        pageDelta: 1,
    };
    return IntegerStepperWidget;
}(TextFieldBase_1.TextFieldBase));
exports.IntegerStepperWidget = IntegerStepperWidget;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DomWidgets_1 = __webpack_require__(4);
var ButtonWidget_1 = __webpack_require__(14);
var InteractiveDom_1 = __webpack_require__(8);
var Localize_1 = __webpack_require__(11);
var StepperArrowGroup_1 = __webpack_require__(136);
var Icons_1 = __webpack_require__(6);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var Colors = TabStyles_1.TabStyles.Colors, Sizing = TabStyles_1.TabStyles.Sizing;
var getStyles = function (onDarkBackground) {
    var button = {
        boxSizing: 'content-box',
        display: 'flex',
        minWidth: undefined,
        minHeight: undefined,
        height: Icons_1.StepperDownIcon.height,
        width: Icons_1.StepperDownIcon.width,
    };
    return {
        arrowLayout: {
            borderLeft: Sizing.BorderWidth + "px solid " + (onDarkBackground ? Colors.WhiteTransparentLine : Colors.L3),
            bottom: 0,
            boxSizing: 'border-box',
            margin: Sizing.BorderWidth,
            overflow: 'hidden',
            position: 'absolute',
            right: 0,
            top: 0,
            width: 18,
        },
        incrementButtonStyle: tslib_1.__assign({}, button, { borderBottom: "1px solid " + (onDarkBackground ? Colors.WhiteTransparentLine : Colors.L3) }),
        decrementButtonStyle: tslib_1.__assign({}, button),
    };
};
var VerticalStepperArrowGroup = /** @class */ (function (_super) {
    tslib_1.__extends(VerticalStepperArrowGroup, _super);
    function VerticalStepperArrowGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VerticalStepperArrowGroup.prototype.getContentWrapper = function (icon) {
        var _this = this;
        return function (state) {
            var imgProps = {
                draggable: false,
                height: icon.height,
                // disabled is forced to false as the ButtonWidget already applies an opacity for disabled state
                src: icon.icon(tslib_1.__assign({}, state, { disabled: false, onDarkBackground: _this.props.onDarkBackground })),
                width: icon.width,
            };
            return React.createElement(DomWidgets_1.Img, tslib_1.__assign({}, imgProps));
        };
    };
    VerticalStepperArrowGroup.prototype.renderButton = function (decrement) {
        var styles = getStyles(this.props.onDarkBackground);
        return React.createElement(ButtonWidget_1.ButtonWidget, { buttonType: ButtonWidget_1.ButtonType.IconOutline, disabled: this.props.disabled || (decrement ? this.props.isDecrementDisabled : this.props.isIncrementDisabled), disableTabAccessibility: true, getContent: this.getContentWrapper(decrement ? Icons_1.StepperDownIcon : Icons_1.StepperUpIcon), handleClick: decrement ? this.handleDecrementWrapper : this.handleIncrementWrapper, style: decrement ? styles.decrementButtonStyle : styles.incrementButtonStyle, testId: Declarative_1.testId(this.props.testId, 'VerticalStepperArrowGroup', decrement ? 'DecrementIcon' : 'IncrementIcon'), title: decrement ? Localize_1.Messages.decrement() : Localize_1.Messages.increment() });
    };
    VerticalStepperArrowGroup.prototype.render = function () {
        var styles = getStyles(this.props.onDarkBackground);
        return (React.createElement(DomWidgets_1.Block, { style: styles.arrowLayout },
            this.renderButton(false),
            this.renderButton(true)));
    };
    VerticalStepperArrowGroup = tslib_1.__decorate([
        InteractiveDom_1.InteractiveDomHoCDecorator
    ], VerticalStepperArrowGroup);
    return VerticalStepperArrowGroup;
}(StepperArrowGroup_1.StepperArrowGroup));
exports.VerticalStepperArrowGroup = VerticalStepperArrowGroup;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var StepperArrowGroup = /** @class */ (function (_super) {
    tslib_1.__extends(StepperArrowGroup, _super);
    function StepperArrowGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleIncrementWrapper = function () {
            if (_this.props.disabled) {
                return;
            }
            _this.props.handleIncrement();
        };
        _this.handleDecrementWrapper = function () {
            if (_this.props.disabled) {
                return;
            }
            _this.props.handleDecrement();
        };
        _this.handleHoverWrapper = function (hover) {
            if (_this.props.disabled) {
                return;
            }
            _this.props.handleHover(hover);
        };
        return _this;
    }
    return StepperArrowGroup;
}(React.Component));
exports.StepperArrowGroup = StepperArrowGroup;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TabStyles_1 = __webpack_require__(2);
var Colors = TabStyles_1.TabStyles.Colors, Sizing = TabStyles_1.TabStyles.Sizing, Spacing = TabStyles_1.TabStyles.Spacing, Typography = TabStyles_1.TabStyles.Typography;
exports.getStyles = function (options) {
    return {
        input: {
            base: {
                border: 'none',
                borderRadius: 0,
                borderBottomWidth: Sizing.BorderWidth,
                borderBottomColor: options.onDarkBackground ? Colors.WhiteTransparentLine : Colors.L6,
                borderBottomStyle: 'solid',
                height: Sizing.RowHeight,
                outline: 'none',
                backgroundColor: Colors.Transparent,
                fontSize: Typography.Sizing.Default,
                fontWeight: 'normal',
                color: options.onDarkBackground ? Typography.Color.InvertedPrimary : Typography.Color.Primary,
                position: 'relative',
                paddingBottom: 0,
                marginBottom: Spacing.DefaultSpace,
                lineHeight: 'normal',
                WebkitUserSelect: 'text',
                userSelect: 'text'
            },
            interactive: {
                hover: {
                    borderBottomColor: options.onDarkBackground ? Colors.WhiteTransparentLineHover : Colors.L8
                },
                active: {
                    borderBottomColor: options.onDarkBackground ? Colors.WhiteTransparentLineHover : Colors.GoLight
                },
                focus: {
                    borderBottomColor: options.onDarkBackground ? Colors.WhiteTransparentLineHover : Colors.GoLight
                },
                disabled: {
                    borderBottomColor: options.onDarkBackground ? Colors.WhiteDisabled : Colors.L9Disabled,
                    color: options.onDarkBackground ? Typography.Color.InvertedDisabled : Typography.Color.Disabled
                },
            }
        },
        errorInput: {
            borderBottomColor: Colors.AttentionLight
        },
        placeholder: {
            base: {
                fontSize: Typography.Sizing.Default,
                fontWeight: 'normal',
                color: options.onDarkBackground ? Typography.Color.InvertedSecondary : Typography.Color.Secondary,
                position: 'absolute',
                textAlign: 'start',
                lineHeight: Sizing.RowHeight + 'px',
                bottom: Spacing.DefaultSpace
            },
            disabled: {
                color: options.onDarkBackground ? Typography.Color.InvertedDisabled : Typography.Color.Disabled
            },
        },
        errorLabel: {
            fontSize: Typography.Sizing.Tiny,
            fontWeight: 'normal',
            color: Colors.AttentionLight,
            lineHeight: 'normal'
        },
        floatingLabel: {
            fontSize: Typography.Sizing.Default,
            fontWeight: 'normal',
            color: options.onDarkBackground ? Typography.Color.InvertedSecondary : Typography.Color.Secondary,
            lineHeight: '19px'
        }
    };
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DomWidgets_1 = __webpack_require__(4);
var TabStyles_1 = __webpack_require__(2);
var RadioButtonWithLabelWidget_1 = __webpack_require__(139);
var DomUtil_1 = __webpack_require__(7);
var RadioLayoutType;
(function (RadioLayoutType) {
    RadioLayoutType[RadioLayoutType["Veritical"] = 0] = "Veritical";
    RadioLayoutType[RadioLayoutType["Horizontal"] = 1] = "Horizontal";
})(RadioLayoutType = exports.RadioLayoutType || (exports.RadioLayoutType = {}));
/** Controlled, stateless Radio Button Label Group Widget. */
var RadioButtonWithLabelGroupWidget = /** @class */ (function (_super) {
    tslib_1.__extends(RadioButtonWithLabelGroupWidget, _super);
    function RadioButtonWithLabelGroupWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.groupId = DomUtil_1.generateId();
        return _this;
    }
    RadioButtonWithLabelGroupWidget.prototype.getContainerStyleOfIndex = function (index) {
        if (index !== this.props.buttonList.length - 1) {
            if (this.props.layout === RadioLayoutType.Horizontal) {
                return {
                    paddingRight: TabStyles_1.TabStyles.Spacing.ExtraLargeSpace,
                };
            }
        }
        return {};
    };
    RadioButtonWithLabelGroupWidget.prototype.getContainerStyle = function () {
        var styles = {};
        if (this.props.layout === RadioLayoutType.Horizontal) {
            styles.display = 'flex';
            styles.flexWrap = 'wrap';
            if (this.props.justifyHorizontalItems) {
                styles.justifyContent = 'space-between';
            }
        }
        return styles;
    };
    RadioButtonWithLabelGroupWidget.prototype.render = function () {
        var _this = this;
        var buttons = this.props.buttonList.map(function (buttonOption, index) {
            return React.createElement(RadioButtonWithLabelWidget_1.RadioButtonWithLabelWidget, tslib_1.__assign({}, buttonOption, { checked: index === _this.props.checkedIndex, containerStyle: _this.getContainerStyleOfIndex(index), groupName: _this.props.name || "RadioButtonWithLabelGroup-" + _this.groupId, handleChange: _this.props.handleChange, index: index, key: index, removeLeftMargin: _this.props.removeLeftMargin }));
        });
        return (React.createElement(DomWidgets_1.Block, { "aria-label": this.props.ariaLabel, children: buttons, "data-tb-test-id": "RadioButtonWithLabelGroupWidget-" + this.props.testId, role: 'radiogroup', style: this.getContainerStyle() }));
    };
    return RadioButtonWithLabelGroupWidget;
}(React.Component));
exports.RadioButtonWithLabelGroupWidget = RadioButtonWithLabelGroupWidget;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var RadioButtonWidget_1 = __webpack_require__(140);
var DomWidgets_1 = __webpack_require__(4);
var ClickBusting_1 = __webpack_require__(26);
var InteractiveDom_1 = __webpack_require__(8);
var InputLabelWidget_1 = __webpack_require__(29);
var TabStyles_1 = __webpack_require__(2);
var DynamicThemeComponent_1 = __webpack_require__(5);
function getStyles() {
    return {
        label: {
            display: 'flex',
            minHeight: TabStyles_1.TabStyles.Sizing.ListRowHeight,
        },
        text: {
            width: '100%',
        }
    };
}
var RadioButtonWithLabelWidget = /** @class */ (function (_super) {
    tslib_1.__extends(RadioButtonWithLabelWidget, _super);
    function RadioButtonWithLabelWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RadioButtonWithLabelWidget.prototype.render = function () {
        var styles = getStyles();
        return (React.createElement(DomWidgets_1.Block, { className: ClickBusting_1.ClickBustingConfig.suppressionClassName },
            React.createElement(InputLabelWidget_1.InputLabelWidget, { disabled: this.props.disabled, style: tslib_1.__assign({}, styles.label, this.props.containerStyle), testId: this.props.testId },
                React.createElement(RadioButtonWidget_1.RadioButtonWidget, { checked: this.props.checked, disabled: this.props.disabled, groupName: this.props.groupName, handleChange: this.props.handleChange, hover: this.state.hover, index: this.props.index, removeLeftMargin: this.props.removeLeftMargin, testId: this.props.testId, value: this.props.value }),
                React.createElement(DomWidgets_1.InlineBlock, { style: styles.text }, this.props.label))));
    };
    RadioButtonWithLabelWidget = tslib_1.__decorate([
        InteractiveDom_1.InteractiveDomHoCDecorator
    ], RadioButtonWithLabelWidget);
    return RadioButtonWithLabelWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.RadioButtonWithLabelWidget = RadioButtonWithLabelWidget;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Icons_1 = __webpack_require__(6);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var InteractiveDom_1 = __webpack_require__(8);
var DomWidgets_1 = __webpack_require__(4);
var DynamicThemeComponent_1 = __webpack_require__(5);
var getStyles = function () {
    return {
        baseDiv: {
            flexShrink: 0,
            height: Icons_1.RadioButtonIcon.height,
            marginLeft: TabStyles_1.TabStyles.Spacing.DefaultSpace - Icons_1.RadioButtonIcon.padding,
            marginRight: TabStyles_1.TabStyles.Spacing.DefaultSpace - Icons_1.RadioButtonIcon.padding,
            minWidth: Icons_1.RadioButtonIcon.width,
            width: Icons_1.RadioButtonIcon.width,
        },
        noLeftMargin: {
            marginLeft: -Icons_1.RadioButtonIcon.padding
        },
        radioButton: {
            cursor: 'default',
            height: Icons_1.RadioButtonIcon.height,
            margin: 0,
            opacity: 0,
            verticalAlign: 'top',
            width: Icons_1.RadioButtonIcon.width,
        },
        fakeRadioButton: {
            height: Icons_1.RadioButtonIcon.height,
            position: 'absolute',
            verticalAlign: 'top',
            width: Icons_1.RadioButtonIcon.width,
        }
    };
};
function getRadioButtonIcon(props, state) {
    var iconState = { disabled: props.disabled, checked: props.checked, hover: props.hover || state.hover, focus: state.focus };
    return Icons_1.RadioButtonIcon.icon(iconState);
}
exports.getRadioButtonIcon = getRadioButtonIcon;
var RadioButtonWidget = /** @class */ (function (_super) {
    tslib_1.__extends(RadioButtonWidget, _super);
    function RadioButtonWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {};
        _this.handleFormChange = function (event) {
            // IE bug fix: https://github.com/facebook/react/issues/4457
            if (_this.props.disabled || !_this.props.handleChange) {
                return;
            }
            if (!_this.props.checked) {
                _this.props.handleChange(_this.props.value, _this.props.index);
            }
        };
        _this.handleActive = function (active) {
            _this.setState({ active: active });
        };
        _this.handleFocus = function (focus) {
            _this.setState({ focus: !_this.state.active && focus }); // only show focus indicator for keyboard focus
        };
        _this.handleHover = function (hover) {
            _this.setState({ hover: hover });
        };
        return _this;
    }
    RadioButtonWidget.prototype.render = function () {
        var icon = getRadioButtonIcon(this.props, this.state);
        var styles = getStyles();
        var baseStyle = tslib_1.__assign({}, styles.baseDiv, Declarative_1.conditional(this.props.removeLeftMargin, styles.noLeftMargin));
        return (React.createElement(InteractiveDom_1.InteractiveDomWrapper, { handleHover: this.handleHover, handleFocus: this.handleFocus, handleActive: this.handleActive },
            React.createElement(DomWidgets_1.InlineBlock, { style: baseStyle },
                React.createElement(DomWidgets_1.Img, { src: icon, style: styles.fakeRadioButton }),
                React.createElement("input", { checked: this.props.checked, "data-tb-test-id": this.props.testId + '-RadioButton', disabled: this.props.disabled, id: this.props.id, name: this.props.groupName, onChange: this.handleFormChange, style: styles.radioButton, type: 'radio', 
                    // tslint:disable-next-line:no-any
                    value: this.props.value }))));
    };
    return RadioButtonWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.RadioButtonWidget = RadioButtonWidget;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var PreventUserSelect_1 = __webpack_require__(12);
var TabStyles_1 = __webpack_require__(2);
var DynamicThemeComponent_1 = __webpack_require__(5);
var SwitcherTextBase_1 = __webpack_require__(142);
var SelectedToggle;
(function (SelectedToggle) {
    SelectedToggle[SelectedToggle["Left"] = 0] = "Left";
    SelectedToggle[SelectedToggle["Right"] = 1] = "Right";
})(SelectedToggle = exports.SelectedToggle || (exports.SelectedToggle = {}));
// TODO putting this here hackily for TFSID 692702, should be moved in TFSID 616159
var focusBoxShadow = '0 0 0 1px ' + TabStyles_1.TabStyles.Colors.Focus + ' inset';
exports.SwitcherStyles = {
    container: {
        display: 'flex'
    },
    toggleBase: tslib_1.__assign({}, PreventUserSelect_1.PreventUserSelect, { alignItems: 'center', borderStyle: 'solid', borderWidth: TabStyles_1.TabStyles.Sizing.BorderWidth, display: 'flex', flexBasis: '100%', justifyContent: 'center', lineHeight: (TabStyles_1.TabStyles.Sizing.RowHeight - TabStyles_1.TabStyles.Sizing.BorderWidth * 2) + 'px', paddingLeft: TabStyles_1.TabStyles.Spacing.MediumSpace, paddingRight: TabStyles_1.TabStyles.Spacing.MediumSpace }),
    selectedToggle: {
        backgroundColor: TabStyles_1.TabStyles.Colors.F8,
        borderColor: TabStyles_1.TabStyles.Colors.F8,
        color: TabStyles_1.TabStyles.Typography.Color.InvertedPrimary,
    },
    unselectedToggle: {
        backgroundColor: TabStyles_1.TabStyles.Colors.F1,
        borderColor: TabStyles_1.TabStyles.Colors.L6,
        color: TabStyles_1.TabStyles.Typography.Color.Primary,
    },
    hoverSelectedToggle: {
        borderColor: TabStyles_1.TabStyles.Colors.L9
    },
    hoverUnselectedToggle: {
        borderColor: TabStyles_1.TabStyles.Colors.L9
    },
    focusSelectedToggle: {
        boxShadow: focusBoxShadow
    },
    focusUnselectedToggle: {
        boxShadow: focusBoxShadow
    },
    activeSelectedToggle: {
        backgroundColor: TabStyles_1.TabStyles.Colors.F8,
        borderColor: TabStyles_1.TabStyles.Colors.L9,
        color: TabStyles_1.TabStyles.Typography.Color.InvertedPrimary,
    },
    activeUnselectedToggle: {
        backgroundColor: TabStyles_1.TabStyles.Colors.F8,
        borderColor: TabStyles_1.TabStyles.Colors.L9,
        color: TabStyles_1.TabStyles.Typography.Color.InvertedPrimary,
    },
    inactiveToggle: {
        backgroundColor: TabStyles_1.TabStyles.Colors.F1,
        borderColor: TabStyles_1.TabStyles.Colors.L6,
        color: TabStyles_1.TabStyles.Typography.Color.Primary,
    },
    firstToggle: {
        borderBottomLeftRadius: TabStyles_1.TabStyles.Sizing.BorderRadius,
        borderTopLeftRadius: TabStyles_1.TabStyles.Sizing.BorderRadius,
    },
    lastToggle: {
        borderBottomRightRadius: TabStyles_1.TabStyles.Sizing.BorderRadius,
        borderTopRightRadius: TabStyles_1.TabStyles.Sizing.BorderRadius,
    }
};
var ToggleTextWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ToggleTextWidget, _super);
    function ToggleTextWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleChange = function (idx) {
            if (idx === 1) {
                _this.props.handleRightToggleSelected();
            }
            else {
                _this.props.handleLeftToggleSelected();
            }
        };
        return _this;
    }
    ToggleTextWidget.prototype.render = function () {
        return (React.createElement(SwitcherTextBase_1.SwitcherTextBase, { ariaLabel: this.props.ariaLabel, checkedIndex: this.props.selectedToggle === SelectedToggle.Right ? 1 : 0, handleChange: this.handleChange, name: this.props.name, style: tslib_1.__assign({}, exports.SwitcherStyles, { container: tslib_1.__assign({}, exports.SwitcherStyles.container, this.props.containerStyle) }), testId: this.props.testId, toggleTexts: [this.props.leftToggleText, this.props.rightToggleText] }));
    };
    return ToggleTextWidget;
}(DynamicThemeComponent_1.DynamicThemeComponent));
exports.ToggleTextWidget = ToggleTextWidget;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var react_1 = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var DomWidgets_1 = __webpack_require__(4);
var ClickBusting_1 = __webpack_require__(26);
var Declarative_2 = __webpack_require__(3);
var InputLabelWidget_1 = __webpack_require__(29);
var SwitcherTextGroupNamePrefix = 'SwitcherTextGroup';
/**
 * The SwitchTextButton is the individual button within a switcher.  It contains the text and
 * can be toggled.  The underlying input is a radio button.
 */
var SwitcherTextButton = /** @class */ (function (_super) {
    tslib_1.__extends(SwitcherTextButton, _super);
    function SwitcherTextButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleChange = function (e) {
            if (!_this.props.checked) {
                _this.props.handleChange(_this.props.idx);
            }
        };
        /**
         * If it is active, call the handleActive with the switcher's idx, otherwise return -1 to say
         * that it is no longer selected.
         */
        _this.handleActive = function (active) {
            _this.props.handleActive(active ? _this.props.idx : -1);
        };
        return _this;
    }
    SwitcherTextButton.prototype.render = function () {
        return (react_1.createElement(InputLabelWidget_1.InputLabelWidget, {
            style: this.props.style,
            testId: this.props.testId,
            interactiveStyles: {
                hover: this.props.hoverStyle,
                focus: this.props.focusStyle
            },
            handleActive: this.handleActive
        }, react_1.createElement('input', {
            style: {
                opacity: 0,
                position: 'absolute'
            },
            onChange: this.handleChange,
            type: 'radio',
            checked: this.props.checked,
            name: this.props.groupName,
            'data-tb-test-id': Declarative_2.testId(this.props.testId, 'input')
        }), this.props.children));
    };
    return SwitcherTextButton;
}(React.Component));
/**
 * The SwitchTextBase is the container of the switcher buttons.  It maintains the state of what
 * switcher button is active and creates the group id for the underlying radio buttons.
 */
var SwitcherTextBase = /** @class */ (function (_super) {
    tslib_1.__extends(SwitcherTextBase, _super);
    function SwitcherTextBase(props) {
        var _this = _super.call(this, props) || this;
        _this.handleActive = function (idx) {
            // TFSID 694578: prevent visual flicker on iOS when client is ClickBusting
            if (ClickBusting_1.ClickBustingConfig.suppressionClassName && ClickBusting_1.ClickBustingConfig.suppressionClassName.length) {
                return;
            }
            _this.setState({ activerSwitcherIdx: idx });
        };
        _this.groupId = SwitcherTextBase.groupIdIncrementor++;
        _this.state = { activerSwitcherIdx: -1 };
        return _this;
    }
    SwitcherTextBase.prototype.getToggleStyling = function (currentSwitcherIdx) {
        var hasActiveSwitcher = this.state.activerSwitcherIdx >= 0;
        var currentSwitcherIsFirst = currentSwitcherIdx === 0;
        var currentSwitcherIsLast = currentSwitcherIdx === this.props.toggleTexts.length - 1;
        var currentSwitcherInactive = this.state.activerSwitcherIdx !== currentSwitcherIdx;
        var currentSwitcherChecked = this.props.checkedIndex === currentSwitcherIdx;
        return tslib_1.__assign({}, this.props.style.toggleBase, Declarative_1.conditional(currentSwitcherIsFirst, this.props.style.firstToggle), Declarative_1.conditional(currentSwitcherIsLast, this.props.style.lastToggle), (hasActiveSwitcher ? (currentSwitcherInactive ? this.props.style.inactiveToggle :
            /* is active */ currentSwitcherChecked ? this.props.style.activeSelectedToggle : this.props.style.activeUnselectedToggle)
            /* no active */ : (currentSwitcherChecked ? this.props.style.selectedToggle : this.props.style.unselectedToggle)));
    };
    SwitcherTextBase.prototype.render = function () {
        var _this = this;
        var groupName = SwitcherTextGroupNamePrefix + String(this.groupId);
        var switchButtons = this.props.toggleTexts.map(function (toggleText, idx) {
            var toggleStyle = _this.getToggleStyling(idx);
            var hoverStyle = _this.props.checkedIndex === idx ? _this.props.style.hoverSelectedToggle : _this.props.style.hoverUnselectedToggle;
            var focusStyle = _this.props.checkedIndex === idx ? _this.props.style.focusSelectedToggle : _this.props.style.focusUnselectedToggle;
            return react_1.createElement(SwitcherTextButton, {
                groupName: _this.props.name || groupName,
                handleChange: _this.props.handleChange,
                checked: _this.props.checkedIndex === idx,
                testId: Declarative_2.testId(_this.props.testId, toggleText),
                idx: idx,
                style: toggleStyle,
                hoverStyle: hoverStyle,
                focusStyle: focusStyle,
                key: idx,
                handleActive: _this.handleActive
            }, toggleText);
        });
        return react_1.createElement(DomWidgets_1.Block, {
            style: this.props.style.container,
            className: ClickBusting_1.ClickBustingConfig.suppressionClassName,
            role: 'radiogroup',
            'aria-label': this.props.ariaLabel
        }, switchButtons);
    };
    SwitcherTextBase.groupIdIncrementor = 0;
    return SwitcherTextBase;
}(React.Component));
exports.SwitcherTextBase = SwitcherTextBase;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var tabbable = __webpack_require__(57);
var DomUtil_1 = __webpack_require__(7);
var Overlay_1 = __webpack_require__(10);
var PointerEvents_1 = __webpack_require__(13);
var TooltipConsts_1 = __webpack_require__(144);
exports.TooltipPosition = TooltipConsts_1.TooltipPosition;
/**
 * Wrapper for child element(s) which displays a popup when the child element(s) receive focus or are hovered over.
 */
var Tooltip = /** @class */ (function (_super) {
    tslib_1.__extends(Tooltip, _super);
    function Tooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.id = DomUtil_1.generateId();
        _this.waitingOnGetContent = false;
        _this.state = {};
        _this.handleWrappedChildrenRef = function (element) {
            _this.wrappedChildrenElement = element;
        };
        _this.handleTooltipOverlayContentRef = function (element) {
            _this.tooltipContentElement = element ? element.firstElementChild : null;
        };
        _this.handleClick = function (e) {
            _this.state.content && _this.state.anchorClientRect ? _this.dismissTooltipOverlay() : _this.showTooltipOverlay(e);
        };
        _this.handleKeyUp = function (e) {
            if (_this.state.content && _this.state.anchorClientRect && e.key === 'Escape') {
                e.preventDefault();
                e.stopPropagation();
                _this.dismissTooltipOverlay();
            }
        };
        _this.handleMouseMove = function (e) {
            if (_this.state.content && _this.state.anchorClientRect && !_this.props.followCursor) {
                return;
            }
            _this.showTooltipOverlay(e);
        };
        _this.showTooltipOverlay = function (e) {
            _this.setState({ anchorClientRect: _this.getAnchorClientRectFromEvent(e) });
            if (_this.state.content || _this.waitingOnGetContent) {
                return;
            }
            _this.waitingOnGetContent = true;
            var setContent = function (content) {
                if (_this.waitingOnGetContent) {
                    Tooltip.dismissDisplayedTooltip();
                    Tooltip.displayedTooltip = { dismiss: _this.dismissTooltipOverlay, id: _this.id };
                    _this.setState({ content: content }, function () { _this.waitingOnGetContent = false; });
                }
            };
            var getContent = _this.props.getContent();
            if (Promise.resolve(getContent) === getContent) {
                getContent
                    .then(setContent)
                    .catch(function (error) {
                    console.warn({ message: "'getContent' promise rejected", error: error });
                    _this.setState({ anchorClientRect: undefined }, function () { _this.waitingOnGetContent = false; });
                });
            }
            else {
                setContent(getContent);
            }
        };
        _this.dismissTooltipOverlay = function () {
            if (Tooltip.displayedTooltip && _this.id === Tooltip.displayedTooltip.id) {
                Tooltip.displayedTooltip = undefined;
            }
            _this.waitingOnGetContent = false;
            _this.setState({ anchorClientRect: undefined, content: undefined, width: undefined });
        };
        _this.getAnchorClientRect = function () {
            return _this.state.anchorClientRect;
        };
        return _this;
    }
    Tooltip.dismissDisplayedTooltip = function () {
        if (Tooltip.displayedTooltip) {
            var displayedTooltip = tslib_1.__assign({}, Tooltip.displayedTooltip);
            Tooltip.displayedTooltip = undefined;
            try {
                displayedTooltip.dismiss();
            }
            catch (error) {
                console.warn({ message: 'failed to dismiss displayed tooltip', error: error });
            }
        }
    };
    Tooltip.prototype.componentDidMount = function () {
        this.maybeUpdateStateForRenderedChildrenAndTooltip();
    };
    Tooltip.prototype.componentDidUpdate = function () {
        this.maybeUpdateStateForRenderedChildrenAndTooltip();
    };
    Tooltip.prototype.componentWillUnmount = function () {
        this.dismissTooltipOverlay();
    };
    Tooltip.prototype.maybeUpdateStateForRenderedChildrenAndTooltip = function () {
        var stateUpdate = {};
        var containsTabbableChildren = !!this.wrappedChildrenElement && tabbable(this.wrappedChildrenElement).length > 0;
        if (containsTabbableChildren !== this.state.containsTabbableChildren) {
            stateUpdate.containsTabbableChildren = containsTabbableChildren;
        }
        if (this.state.content && this.state.anchorClientRect && this.tooltipContentElement && this.state.width === undefined) {
            stateUpdate.width = this.tooltipContentElement.getBoundingClientRect().width + TooltipConsts_1.AggregateTooltipPadding;
        }
        if (Object.keys(stateUpdate).length > 0) {
            this.setState(stateUpdate);
        }
    };
    Tooltip.prototype.getAnchorClientRectFromEvent = function (e) {
        var isFocusEvent = e.type === 'focus';
        if (isFocusEvent && this.state.anchorClientRect) {
            return this.state.anchorClientRect;
        }
        else if (!this.wrappedChildrenElement) {
            return undefined;
        }
        else if (isFocusEvent || !this.props.followCursor) {
            return this.adjustClientRectForOffset(this.wrappedChildrenElement.getBoundingClientRect());
        }
        else {
            e = e;
            return this.adjustClientRectForOffset({
                bottom: e.clientY,
                height: 0,
                left: e.clientX,
                right: e.clientX,
                top: e.clientY,
                width: 0,
            });
        }
    };
    Tooltip.prototype.adjustClientRectForOffset = function (clientRect) {
        return {
            bottom: clientRect.bottom + TooltipConsts_1.AnchorClientRectPadding,
            /** 2 * AnchorClientRectPadding accounts for the left and right offsets of AnchorClientRectPadding */
            height: clientRect.height + 2 * TooltipConsts_1.AnchorClientRectPadding,
            left: clientRect.left - TooltipConsts_1.AnchorClientRectPadding,
            right: clientRect.right + TooltipConsts_1.AnchorClientRectPadding,
            top: clientRect.top - TooltipConsts_1.AnchorClientRectPadding,
            /** 2 * AnchorClientRectPadding accounts for the top and bottom offsets of AnchorClientRectPadding */
            width: clientRect.width + 2 * TooltipConsts_1.AnchorClientRectPadding,
        };
    };
    Tooltip.prototype.renderWrappedChildren = function () {
        return (React.createElement(PointerEvents_1.PointerEventWrapper, { pointerClick: this.handleClick },
            React.createElement("div", { onBlur: this.dismissTooltipOverlay, onFocus: this.showTooltipOverlay, onKeyUp: this.handleKeyUp, onMouseEnter: this.showTooltipOverlay, onMouseLeave: this.dismissTooltipOverlay, onMouseMove: this.handleMouseMove, ref: this.handleWrappedChildrenRef, 
                /** Display of 'inline-flex' ensures that the wrapper fits exactly to the contents of the children */
                style: { display: 'inline-flex' }, tabIndex: this.state.containsTabbableChildren ? undefined : 0 }, this.props.children)));
    };
    Tooltip.prototype.renderTooltipOverlay = function () {
        if (!this.state.content || !this.state.anchorClientRect) {
            return undefined;
        }
        var tooltipSideProps = TooltipConsts_1.TooltipPositionInfoMap[this.props.position];
        /**
         * In order to have the content wrapper grow to fit the tooltip contents, we initially render the wrapper with a width of maxWidth.
         * Once the tooltip content is rendered, we get a reference to the content element and get the actual rendered width. This width is
         * then used, along with the left/right padding and border widths to calculate the width of the content wrapper. This results in a
         * content wrapper that fits to the toooltip content.
         */
        var contentWrapperStyle = tslib_1.__assign({}, TooltipConsts_1.ContentWrapperStyle, { maxWidth: this.props.maxWidth, visibility: this.state.width === undefined ? 'hidden' : 'visible', width: Math.ceil(this.state.width || this.props.maxWidth) });
        return (React.createElement(Overlay_1.Overlay, { allowAutoPosition: true, anchorOrigin: tooltipSideProps.anchorOrigin, disablePointerEvents: true, getAnchorClientRect: this.getAnchorClientRect, shouldAutoPositionOnScrollingRootScroll: this.props.followCursor, stackedOrigin: tooltipSideProps.stackedOrigin, zIndex: this.props.zIndex },
            React.createElement("div", { "data-tb-test-id": this.props.testId, ref: this.handleTooltipOverlayContentRef, role: 'tooltip', style: contentWrapperStyle }, this.state.content)));
    };
    Tooltip.prototype.render = function () {
        return (React.createElement(React.Fragment, null,
            this.renderWrappedChildren(),
            this.renderTooltipOverlay()));
    };
    Tooltip.defaultProps = {
        maxWidth: TooltipConsts_1.DefaultMaxWidth,
        position: TooltipConsts_1.TooltipPosition.Right,
    };
    return Tooltip;
}(React.Component));
exports.Tooltip = Tooltip;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var TabStyles_1 = __webpack_require__(2);
var Overlay_1 = __webpack_require__(10);
exports.DefaultMaxWidth = 300;
/** This is padding between the anchor client rect boundary and the tooltip overlay boundary. */
exports.AnchorClientRectPadding = 6;
exports.BorderWidth = TabStyles_1.TabStyles.Sizing.BorderWidth;
exports.Padding = 12;
exports.AggregateTooltipPadding = 2 * (exports.BorderWidth + exports.Padding);
exports.ContentWrapperStyle = {
    backgroundColor: TabStyles_1.TabStyles.Colors.White,
    borderColor: TabStyles_1.TabStyles.Colors.L5,
    borderRadius: TabStyles_1.TabStyles.Sizing.BorderRadius,
    borderStyle: 'solid',
    borderWidth: exports.BorderWidth,
    boxShadow: TabStyles_1.TabStyles.Shadow.Standard,
    boxSizing: 'border-box',
    display: 'block',
    fontSize: TabStyles_1.TabStyles.Typography.Sizing.Default,
    lineHeight: 'normal',
    padding: exports.Padding,
};
var TooltipPosition;
(function (TooltipPosition) {
    TooltipPosition["TopLeftCorner"] = "TopLeftCorner";
    TooltipPosition["Top"] = "Top";
    TooltipPosition["TopRightCorner"] = "TopRightCorner";
    TooltipPosition["Right"] = "Right";
    TooltipPosition["BottomRightCorner"] = "BottomRightCorner";
    TooltipPosition["Bottom"] = "Bottom";
    TooltipPosition["BottomLeftCorner"] = "BottomLeftCorner";
    TooltipPosition["Left"] = "Left";
})(TooltipPosition = exports.TooltipPosition || (exports.TooltipPosition = {}));
exports.TooltipPositionInfoMap = (_a = {},
    _a[TooltipPosition.TopLeftCorner] = {
        anchorOrigin: { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.top },
        stackedOrigin: { horizontal: Overlay_1.HorizontalOriginOption.right, vertical: Overlay_1.VerticalOriginOption.bottom },
    },
    _a[TooltipPosition.Top] = {
        anchorOrigin: { horizontal: Overlay_1.HorizontalOriginOption.centerX, vertical: Overlay_1.VerticalOriginOption.top },
        stackedOrigin: { horizontal: Overlay_1.HorizontalOriginOption.centerX, vertical: Overlay_1.VerticalOriginOption.bottom },
    },
    _a[TooltipPosition.TopRightCorner] = {
        anchorOrigin: { horizontal: Overlay_1.HorizontalOriginOption.right, vertical: Overlay_1.VerticalOriginOption.top },
        stackedOrigin: { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.bottom },
    },
    _a[TooltipPosition.Right] = {
        anchorOrigin: { horizontal: Overlay_1.HorizontalOriginOption.right, vertical: Overlay_1.VerticalOriginOption.centerY },
        stackedOrigin: { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.centerY },
    },
    _a[TooltipPosition.BottomRightCorner] = {
        anchorOrigin: { horizontal: Overlay_1.HorizontalOriginOption.right, vertical: Overlay_1.VerticalOriginOption.bottom },
        stackedOrigin: { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.top },
    },
    _a[TooltipPosition.Bottom] = {
        anchorOrigin: { horizontal: Overlay_1.HorizontalOriginOption.centerX, vertical: Overlay_1.VerticalOriginOption.bottom },
        stackedOrigin: { horizontal: Overlay_1.HorizontalOriginOption.centerX, vertical: Overlay_1.VerticalOriginOption.top },
    },
    _a[TooltipPosition.BottomLeftCorner] = {
        anchorOrigin: { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.bottom },
        stackedOrigin: { horizontal: Overlay_1.HorizontalOriginOption.right, vertical: Overlay_1.VerticalOriginOption.top },
    },
    _a[TooltipPosition.Left] = {
        anchorOrigin: { horizontal: Overlay_1.HorizontalOriginOption.left, vertical: Overlay_1.VerticalOriginOption.centerY },
        stackedOrigin: { horizontal: Overlay_1.HorizontalOriginOption.right, vertical: Overlay_1.VerticalOriginOption.centerY },
    },
    _a);


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var ColorGridWidget_1 = __webpack_require__(45);
var Declarative_1 = __webpack_require__(3);
var react_1 = __webpack_require__(0);
var DropdownWidget_1 = __webpack_require__(43);
var TabStyles_1 = __webpack_require__(2);
var GlobalPointerDownOutsideListener_1 = __webpack_require__(59);
var CustomColorInputWidget_1 = __webpack_require__(146);
var Overlay_1 = __webpack_require__(10);
var getButtonColorRibbonStyle = function (props) {
    var buttonHeight = TabStyles_1.TabStyles.Sizing.RowHeight;
    var colorLabelHeight = buttonHeight * 0.5;
    return {
        display: 'inline-block',
        width: props.colorLabelWidth || 40,
        height: colorLabelHeight,
        boxSizing: 'border-box',
        backgroundColor: (props.color || '').toLowerCase(),
        marginTop: (buttonHeight - (colorLabelHeight + (TabStyles_1.TabStyles.Sizing.BorderWidth) * 2)) / 2
    };
};
var ColorPickerButton = /** @class */ (function (_super) {
    tslib_1.__extends(ColorPickerButton, _super);
    function ColorPickerButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorPickerButton.prototype.render = function () {
        var buttonProps = {
            dropdownType: DropdownWidget_1.DropdownType.Outline,
            dropdownId: null,
            pointerClick: this.props.handleClick,
            onKeyDown: this.props.onKeyDown,
            dropdownOpen: this.props.isPickerOpen,
            disabled: this.props.disabled,
            interactiveStyles: DropdownWidget_1.getDropdownStylesByType(DropdownWidget_1.DropdownType.Outline).button.interactive,
            testId: Declarative_1.testId(this.props.testId, 'ColorPickerButton'),
            title: this.props.title
        };
        return (react_1.createElement(DropdownWidget_1.DropdownButtonWidget, buttonProps, react_1.createElement('div', { style: getButtonColorRibbonStyle(this.props) })));
    };
    return ColorPickerButton;
}(React.Component));
exports.ColorPickerButton = ColorPickerButton;
var ColorPickerWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ColorPickerWidget, _super);
    function ColorPickerWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.setColorPickerButton = function (component) {
            _this.buttonElement = ReactDOM.findDOMNode(component);
        };
        _this.unsubscribeOutsideClickListeners = function () {
            _this.outsideClickListenersUnsubscribe.forEach(function (callback) { return callback(); });
            _this.outsideClickListenersUnsubscribe = [];
        };
        _this.getAnchorClientRect = function () {
            return _this.buttonElement ? _this.buttonElement.getBoundingClientRect() : undefined;
        };
        _this.onColorSelected = function (color) {
            _this.togglePicker();
            _this.props.handleColorSelected(color.toLowerCase());
        };
        _this.togglePicker = function () {
            if (!_this.props.disabled) {
                _this.setState({ isPickerVisible: !_this.state.isPickerVisible });
            }
        };
        _this.togglePickerOnKeyEvent = function (e) {
            _this.togglePicker();
            e.preventDefault();
            e.stopPropagation();
        };
        // Handle key presses as defined by ARIA https://www.w3.org/TR/wai-aria-practices/#menu
        _this.handleKeyDown = function (e) {
            if (e.key === ' ' || e.key === 'Enter') {
                _this.togglePickerOnKeyEvent(e);
            }
        };
        _this.handleGridKeyUp = function (e) {
            if (e.key === 'Escape' && _this.state.isPickerVisible) {
                _this.togglePickerOnKeyEvent(e);
            }
        };
        _this.state = { isPickerVisible: false, customColorText: '' };
        _this.outsideClickListenersUnsubscribe = [];
        _this.colorGrid = null;
        return _this;
    }
    ColorPickerWidget.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _this = this;
        if (this.state.isPickerVisible && !prevState.isPickerVisible && this.colorGrid) {
            this.outsideClickListenersUnsubscribe = [this.colorGrid.parentElement, ReactDOM.findDOMNode(this)].map(function (elm) {
                return GlobalPointerDownOutsideListener_1.GlobalPointerDownOutsideListener.subscribe(elm, _this.togglePicker);
            });
            this.colorGrid.focus();
            if (this.state.customColorWidgetWidth !== this.colorGrid.clientWidth) {
                this.setState({ customColorWidgetWidth: this.colorGrid.clientWidth });
            }
        }
        else if (!this.state.isPickerVisible && prevState.isPickerVisible) {
            this.unsubscribeOutsideClickListeners();
        }
    };
    ColorPickerWidget.prototype.componentWillUnmount = function () {
        this.unsubscribeOutsideClickListeners();
    };
    ColorPickerWidget.prototype.render = function () {
        var buttonProps = {
            handleClick: this.togglePicker,
            color: this.props.selectedColor,
            disabled: this.props.disabled,
            isPickerOpen: this.state.isPickerVisible,
            colorLabelWidth: this.props.colorLabelWidth,
            onKeyDown: this.handleKeyDown,
            testId: this.props.testId,
            title: this.props.title,
            ref: this.setColorPickerButton
        };
        return (react_1.createElement('div', { style: { display: 'inline-block' }, 'data-tb-test-id': Declarative_1.testId(this.props.testId, 'ColorPicker') }, react_1.createElement(ColorPickerButton, buttonProps), Declarative_1.conditional(this.state.isPickerVisible, this.buildColorGridWidget())));
    };
    ColorPickerWidget.prototype.buildColorGridWidget = function () {
        var _this = this;
        var defaultCustomColorInputWidth = 100;
        var gridProps = {
            handleSwatchClicked: this.onColorSelected,
            selectedColor: (this.props.selectedColor || '').toLowerCase(),
            colorsPreset: this.props.colorsPreset,
            testId: 'colorgrid',
            ref: function (gridWidget) { return _this.colorGrid = ReactDOM.findDOMNode(gridWidget); }
        };
        var customColorInputProps = {
            onColorSelected: this.onColorSelected,
            color: this.getCustomColorInput(),
            testId: this.props.testId,
            width: this.state.customColorWidgetWidth || defaultCustomColorInputWidth
        };
        var overlayProps = {
            allowAutoPosition: true,
            anchorOrigin: {
                vertical: Overlay_1.VerticalOriginOption.bottom,
                horizontal: Overlay_1.HorizontalOriginOption.left
            },
            getAnchorClientRect: this.getAnchorClientRect,
            zIndex: this.props.dropdownZIndex,
        };
        var divWrapperProps = {
            style: {
                backgroundColor: TabStyles_1.TabStyles.Colors.White,
                zIndex: this.props.dropdownZIndex,
                position: 'absolute',
                padding: TabStyles_1.TabStyles.Spacing.LargeSpace,
                borderWidth: TabStyles_1.TabStyles.Sizing.BorderWidth,
                borderStyle: 'solid',
                borderColor: TabStyles_1.TabStyles.Colors.L5,
                borderRadius: TabStyles_1.TabStyles.Sizing.BorderRadius
            },
            onKeyUp: this.handleGridKeyUp,
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'ColorGridWrapper')
        };
        return react_1.createElement(Overlay_1.Overlay, overlayProps, react_1.createElement('div', divWrapperProps, react_1.createElement(ColorGridWidget_1.ColorGridWidget, gridProps), Declarative_1.conditional(this.props.showCustomColorInput, react_1.createElement('div', {}, react_1.createElement('hr', { style: { marginTop: TabStyles_1.TabStyles.Spacing.LargeSpace } }), react_1.createElement(CustomColorInputWidget_1.CustomColorInput, customColorInputProps)))));
    };
    ColorPickerWidget.prototype.getCustomColorInput = function () {
        var colors = this.props.colorsPreset === ColorGridWidget_1.ColorGridPreset.Light ?
            TabStyles_1.TabStyles.ColorPickerPresets.Light : TabStyles_1.TabStyles.ColorPickerPresets.Dark;
        return this.isSelectedColorCustom(colors) ? this.props.selectedColor : '';
    };
    ColorPickerWidget.prototype.isSelectedColorCustom = function (presetGridColors) {
        if (!this.props.selectedColor) {
            return false;
        }
        for (var _i = 0, presetGridColors_1 = presetGridColors; _i < presetGridColors_1.length; _i++) {
            var color = presetGridColors_1[_i];
            if (color.toLowerCase() === this.props.selectedColor.toLowerCase()) {
                return false;
            }
        }
        return true;
    };
    ColorPickerWidget.defaultProps = {
        shouldReturnFocusOnClose: true
    };
    return ColorPickerWidget;
}(React.Component));
exports.ColorPickerWidget = ColorPickerWidget;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var HexColorInputWidget_1 = __webpack_require__(147);
var Declarative_1 = __webpack_require__(3);
var react_1 = __webpack_require__(0);
var Localize_1 = __webpack_require__(11);
var CustomColorInput = /** @class */ (function (_super) {
    tslib_1.__extends(CustomColorInput, _super);
    function CustomColorInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomColorInput.prototype.render = function () {
        var divProps = { display: 'flex',
            flexDirection: 'column',
            textAlign: 'center',
            width: this.props.width,
            fontSize: 'small'
        };
        var hexColorInputProps = {
            onColorSelected: this.props.onColorSelected,
            testId: this.props.testId,
            selectedColor: this.props.color,
            containerWidth: this.props.width
        };
        return (react_1.createElement('div', { style: divProps,
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'CustomColorInput') }, Localize_1.Messages.customColor(), react_1.createElement(HexColorInputWidget_1.HexColorInput, hexColorInputProps)));
    };
    return CustomColorInput;
}(React.Component));
exports.CustomColorInput = CustomColorInput;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var OutlineTextFieldWidget_1 = __webpack_require__(21);
var Declarative_1 = __webpack_require__(3);
var react_1 = __webpack_require__(0);
var TabStyles_1 = __webpack_require__(2);
var ColorGridWidget_1 = __webpack_require__(45);
var HexColorInput = /** @class */ (function (_super) {
    tslib_1.__extends(HexColorInput, _super);
    function HexColorInput(props) {
        var _this = _super.call(this, props) || this;
        _this.hexColorRegExp = /^#?[0-9A-Fa-f]{6}$/;
        _this.onHandleClearText = function () {
            _this.setState({ hexColorText: '#' });
        };
        _this.onHexColorInput = function (text) {
            _this.setState({ hexColorText: text });
        };
        _this.onColorInputEnter = function () {
            if (_this.isAHexColor(_this.state.hexColorText)) {
                _this.props.onColorSelected(_this.prependHash(_this.state.hexColorText));
            }
        };
        _this.handleSwatchClicked = function (color) {
            if (_this.isAHexColor(_this.state.hexColorText)) {
                _this.props.onColorSelected(_this.prependHash(color.toLowerCase()));
            }
        };
        _this.isAHexColor = function (text) {
            return _this.hexColorRegExp.test(text);
        };
        _this.removeHash = function (color) {
            if (color !== null && color.charAt(0) === '#') {
                color = color.slice(1);
            }
            return color;
        };
        _this.prependHash = function (color) {
            if (color !== null && color.charAt(0) !== '#') {
                color = '#' + color;
            }
            return color;
        };
        _this.state = { hexColorText: _this.shouldDisplayCustomColor() ? _this.removeHash(props.selectedColor.toUpperCase()) : '#' };
        return _this;
    }
    HexColorInput.prototype.render = function () {
        var hexColorInputProps = {
            handleEnter: this.onColorInputEnter,
            handleChange: this.onHexColorInput,
            handleClearText: this.onHandleClearText,
            placeholder: '#',
            text: this.state.hexColorText || '#',
            hasError: this.state.hexColorText !== '#' ? !this.isAHexColor(this.state.hexColorText) : false,
            containerStyle: {
                display: 'inline-flex',
                paddingLeft: TabStyles_1.TabStyles.Spacing.DefaultSpace,
                flexGrow: 1,
                width: '100%'
            },
            testId: this.props.testId
        };
        // we set min height/width so that IE doesn't shrink the width of the box to less than row height
        // see Defect 736928 for more details
        var previewStyle = {
            height: TabStyles_1.TabStyles.Sizing.RowHeight,
            width: TabStyles_1.TabStyles.Sizing.RowHeight,
            minHeight: TabStyles_1.TabStyles.Sizing.RowHeight,
            minWidth: TabStyles_1.TabStyles.Sizing.RowHeight,
            borderWidth: TabStyles_1.TabStyles.Sizing.BorderWidth,
            borderStyle: 'solid',
            borderColor: TabStyles_1.TabStyles.Colors.L6,
            boxSizing: 'border-box',
            marginRight: 6
        };
        var colorSwatchProps = {
            color: this.getCustomColor() || 'transparent',
            handleClick: this.handleSwatchClicked,
            size: TabStyles_1.TabStyles.Sizing.RowHeight - 2 * TabStyles_1.TabStyles.Sizing.BorderWidth,
            selected: this.shouldSwatchBeSelected(),
            disabled: !this.getCustomColor(),
            testId: this.props.testId
        };
        return (react_1.createElement('div', {
            style: { display: 'flex', flexGrow: 1, paddingTop: TabStyles_1.TabStyles.Spacing.DefaultSpace },
            'data-tb-test-id': Declarative_1.testId(this.props.testId, 'HexInput')
        }, react_1.createElement('div', { style: previewStyle }, react_1.createElement(ColorGridWidget_1.ColorSwatchWidget, colorSwatchProps)), react_1.createElement(OutlineTextFieldWidget_1.OutlineTextFieldWidget, hexColorInputProps)));
    };
    HexColorInput.prototype.getCustomColor = function () {
        if (this.state.hexColorText !== '#' && this.isAHexColor(this.state.hexColorText)) {
            return this.prependHash(this.state.hexColorText);
        }
        return null;
    };
    HexColorInput.prototype.shouldDisplayCustomColor = function () {
        return this.props.selectedColor.length !== 0;
    };
    HexColorInput.prototype.shouldSwatchBeSelected = function () {
        return this.shouldDisplayCustomColor() && this.prependHash(this.state.hexColorText.toLowerCase()) === this.props.selectedColor;
    };
    return HexColorInput;
}(React.Component));
exports.HexColorInput = HexColorInput;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Localize_1 = __webpack_require__(11);
var Icons_1 = __webpack_require__(6);
var BrowserDetection_1 = __webpack_require__(18);
var Declarative_1 = __webpack_require__(3);
var ActivitySpinnerSize;
(function (ActivitySpinnerSize) {
    ActivitySpinnerSize[ActivitySpinnerSize["Large"] = 50] = "Large";
    ActivitySpinnerSize[ActivitySpinnerSize["Small"] = 14] = "Small";
})(ActivitySpinnerSize = exports.ActivitySpinnerSize || (exports.ActivitySpinnerSize = {}));
var getSpinnerStyle = function (spinnerSize) { return ({
    height: spinnerSize,
    width: spinnerSize,
}); };
var UnderlayStyle = {
    alignItems: 'center',
    background: 'rgba(255,255,255,.6)',
    borderRadius: 10,
    boxSizing: 'border-box',
    display: 'inline-flex',
    height: 65,
    justifyContent: 'center',
    width: 65,
};
// tslint:disable:max-line-length
var generateSvg = function (color) { return "\n  <svg viewBox=\"0 0 50 50\" style=\"cursor:wait;overflow:hidden;-webkit-animation:svg-spinner-animation 1s linear infinite;animation:svg-spinner-animation 1s linear infinite;transform-origin:center;\" xmlns=\"http://www.w3.org/2000/svg\">\n    <style>\n      @-webkit-keyframes svg-spinner-animation{100%{-webkit-transform:rotate(360deg);}}\n      @keyframes svg-spinner-animation{100%{transform:rotate(360deg);}}\n      #tail { fill: url(#fade) }\n      #head { fill: " + color + " }\n      stop { stop-color: " + color + " }\n    </style>\n    <linearGradient id=\"fade\" x2=\"50\" y1=\"25\" y2=\"25\" gradientUnits=\"userSpaceOnUse\">\n      <stop offset=\"0\" stop-opacity=\"0\"/>\n      <stop offset=\".15\" stop-opacity=\".04\"/>\n      <stop offset=\".3\" stop-opacity=\".16\"/>\n      <stop offset=\".45\" stop-opacity=\".36\"/>\n      <stop offset=\".61\" stop-opacity=\".64\"/>\n      <stop offset=\".76\"/>\n    </linearGradient>\n    <path id=\"head\" d=\"M0 25a25 25 0 1 0 50 0h-3.9a21.1 21.1 0 1 1-42.2 0\" />\n    <path id=\"tail\" d=\"M50 25a25 25 0 0 0-50 0h3.9a21.1 21.1 0 1 1 42.2 0\" />\n  </svg>\n"; };
// tslint:enable:max-line-length
var SpinnerDarkColor = 'rgb(97, 101, 112)';
var SpinnerLightColor = 'rgba(255, 255, 255, 0.8)';
/**
 * An inline activity spinner.
 *
 * NOTE: A DOM ancestor of the ActivitySpinnerWidget should have `aria-busy=true`
 */
var ActivitySpinnerWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ActivitySpinnerWidget, _super);
    function ActivitySpinnerWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ActivitySpinnerWidget.prototype.render = function () {
        if (this.props.shouldShowUnderlay && this.props.spinnerSize !== ActivitySpinnerSize.Large) {
            throw new Error("Underlay is only supported for Large size.");
        }
        return this.props.shouldShowUnderlay ? this.renderSpinnerWithUnderlay() : this.renderSpinner();
    };
    ActivitySpinnerWidget.prototype.renderSpinnerWithUnderlay = function () {
        return (React.createElement("div", { "data-tb-test-id": Declarative_1.testId(this.props.testId, 'Spinner-Underlay'), style: UnderlayStyle }, this.renderSpinner()));
    };
    ActivitySpinnerWidget.prototype.renderSpinner = function () {
        var style = getSpinnerStyle(this.props.spinnerSize);
        // For SVG, Edge currently doesn't support being placed in an object.
        // Because of this we place it in an iframe with scrolling='no' and frameBorder='0'.
        var color = this.props.onDarkBackground ? SpinnerLightColor : SpinnerDarkColor;
        return (BrowserDetection_1.isEdge ?
            React.createElement("iframe", { "aria-label": Localize_1.Messages.waitIndicatorLabel(), "data-tb-test-id": Declarative_1.testId(this.props.testId, 'Spinner'), frameBorder: 0, role: 'img', scrolling: 'no', src: Icons_1.encodeSvg(generateSvg(color)), style: style }) :
            React.createElement("object", { "aria-label": Localize_1.Messages.waitIndicatorLabel(), "data-tb-test-id": Declarative_1.testId(this.props.testId, 'Spinner'), data: Icons_1.encodeSvg(generateSvg(color)), role: 'img', style: style, type: 'image/svg+xml' }));
    };
    ActivitySpinnerWidget.defaultProps = {
        onDarkBackground: false,
        shouldShowUnderlay: false,
        spinnerSize: ActivitySpinnerSize.Large,
    };
    return ActivitySpinnerWidget;
}(React.Component));
exports.ActivitySpinnerWidget = ActivitySpinnerWidget;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var BrowserDetection_1 = __webpack_require__(18);
var Declarative_1 = __webpack_require__(3);
var GlobalPointerEventCapturer_1 = __webpack_require__(58);
var PointerEvents_1 = __webpack_require__(13);
var UserInteraction_1 = __webpack_require__(41);
var SliderBaseWidget_1 = __webpack_require__(34);
var SliderHandleContainerCoordinateLogic = __webpack_require__(150);
var SliderHandleContainerDragHandleLogic = __webpack_require__(151);
var SliderHandleWidget_1 = __webpack_require__(152);
var SliderStyles_1 = __webpack_require__(22);
var SliderValueLogic_1 = __webpack_require__(66);
/**
 * This component is responsible for displaying the handles and making them interactive.  I.e. dragging.
 *
 * It does not deal with the min and maxes or the actual value of the slider.  That is all handled in the
 * SliderWidget itself.
 *
 * Note that to deal with mouse/touch events outside the bounds of the element and window, we have to attach event
 * handlers to the window itself.
 */
var SliderHandleContainer = /** @class */ (function (_super) {
    tslib_1.__extends(SliderHandleContainer, _super);
    function SliderHandleContainer(props) {
        var _this = _super.call(this, props) || this;
        _this.getHandleCount = function () {
            return typeof _this.props.handles.rightHandlePosition === 'undefined' ? 1 : 2;
        };
        _this.isSingleHandleBeingDragged = function (handleType) {
            return handleType === SliderBaseWidget_1.HandleType.Left || handleType === SliderBaseWidget_1.HandleType.Right;
        };
        _this.determineSingleHandleDragOffsetIfNeeded = function (handleType, isDragDirectlyOnHandle, eventPositionAsProportion) {
            if (!isDragDirectlyOnHandle) {
                return undefined;
            }
            var currentHandlePosition;
            if (handleType === SliderBaseWidget_1.HandleType.Left) {
                currentHandlePosition = _this.props.handles.leftHandlePosition;
            }
            else if (handleType === SliderBaseWidget_1.HandleType.Right) {
                currentHandlePosition = _this.props.handles.rightHandlePosition;
            }
            return currentHandlePosition ? currentHandlePosition - eventPositionAsProportion : undefined;
        };
        _this.determineWhichHandleShouldBeDraggedForEvent = function (touchEvent, eventClientCoordinates) {
            if (!touchEvent) {
                if (_this.getHandleCount() === 1) {
                    return SliderHandleContainerDragHandleLogic.determineWhichHandleShouldBeDraggedForMouseAndOneHandle(eventClientCoordinates, _this.leftHandleWidgetRef.getBoundingClientRectForIcon());
                }
                else {
                    return SliderHandleContainerDragHandleLogic.determineWhichHandleShouldBeDraggedForMouseAndTwoHandles(eventClientCoordinates, _this.leftHandleWidgetRef.getBoundingClientRectForIcon(), _this.rightHandleWidgetRef.getBoundingClientRectForIcon());
                }
            }
            else {
                if (_this.getHandleCount() === 1) {
                    return SliderHandleContainerDragHandleLogic.determineWhichHandleShouldBeDraggedForTouchAndOneHandle(eventClientCoordinates, _this.leftHandleWidgetRef.getBoundingClientRectForInteractiveArea());
                }
                else {
                    return SliderHandleContainerDragHandleLogic.determineWhichHandleShouldBeDraggedForTouchAndTwoHandles(eventClientCoordinates, _this.leftHandleWidgetRef.getBoundingClientRectForInteractiveArea(), _this.rightHandleWidgetRef.getBoundingClientRectForInteractiveArea(), _this.rangeHandleRef.getBoundingClientRect());
                }
            }
        };
        _this.fireHandleDragStartEvents = function (handleType, eventPositionAsProportion, singleHandleDragOffsetAsProportion) {
            if (_this.isSingleHandleBeingDragged(handleType)) {
                if (_this.props.onHandleDragStart && !isNaN(eventPositionAsProportion)) {
                    var position = eventPositionAsProportion + (singleHandleDragOffsetAsProportion || 0);
                    _this.props.onHandleDragStart(handleType, position);
                }
            }
            else if (_this.props.onBothHandleDragStart) {
                _this.props.onBothHandleDragStart();
            }
        };
        _this.fireHandleDragMoveEvents = function (leftHandlePosition, rightHandlePosition) {
            if (_this.isSingleHandleBeingDragged(_this.state.handleBeingDragged)) {
                if (_this.props.onHandleDragMove && !isNaN(leftHandlePosition)) {
                    _this.props.onHandleDragMove(_this.state.handleBeingDragged, leftHandlePosition);
                }
            }
            else if (_this.props.onBothHandleDragMove && typeof rightHandlePosition !== 'undefined' &&
                !isNaN(leftHandlePosition) && !isNaN(rightHandlePosition)) {
                _this.props.onBothHandleDragMove(leftHandlePosition, rightHandlePosition);
            }
        };
        _this.handleHandleRelease = function () {
            _this.setState({ handleBeingDragged: undefined });
            if (_this.props.onHandleRelease) {
                _this.props.onHandleRelease();
            }
        };
        _this.setKeyboardFocusOnHandle = function (handleType) {
            var handleElementRefToFocus;
            if (handleType === SliderBaseWidget_1.HandleType.Left) {
                handleElementRefToFocus = _this.leftHandleWidgetRef;
            }
            else if (handleType === SliderBaseWidget_1.HandleType.Right) {
                handleElementRefToFocus = _this.rightHandleWidgetRef;
            }
            else if (handleType === SliderBaseWidget_1.HandleType.Both) {
                handleElementRefToFocus = _this.rangeHandleRef;
            }
            if (handleElementRefToFocus) {
                handleElementRefToFocus.focus();
            }
        };
        _this.dragStart = function (handleType, eventClientCoordinates, isDirectlyOnHandle, startedByTouchEvent) {
            if (!_this.containerElementRef) {
                return;
            }
            var positionAsProportion = SliderHandleContainerCoordinateLogic.convertClientCoordinateIntoProportionOfContainer(eventClientCoordinates.x, _this.containerElementRef.getBoundingClientRect());
            if (_this.globalPointerEventCapturer) {
                _this.globalPointerEventCapturer.addListeners();
            }
            // We set this offset if the user interacted directly w/ the handle, and use it later to avoid jerking the handle
            // directly to the location of the event.
            var singleHandleDragOffsetAsProportion = _this.determineSingleHandleDragOffsetIfNeeded(handleType, isDirectlyOnHandle, positionAsProportion);
            var handlePositionsAtDragStart = {
                leftHandlePosition: (handleType === SliderBaseWidget_1.HandleType.Left) ? positionAsProportion : _this.props.handles.leftHandlePosition,
                rightHandlePosition: (handleType === SliderBaseWidget_1.HandleType.Right) ? positionAsProportion : _this.props.handles.rightHandlePosition
            };
            _this.setState({
                handleBeingTouched: startedByTouchEvent ? handleType : undefined,
                handleBeingDragged: handleType,
                dragOriginInClientCoordinates: eventClientCoordinates,
                handlePositionsAtDragStart: handlePositionsAtDragStart,
                singleHandleDragOffsetAsProportion: singleHandleDragOffsetAsProportion
            });
            _this.fireHandleDragStartEvents(handleType, positionAsProportion, singleHandleDragOffsetAsProportion);
            // The reason we are doing this is that, in the case of mouse events, the initial down event may not have been on
            // the handle.  It may have been on the track.  So we have to manually give input focus to the handle.
            _this.setKeyboardFocusOnHandle(handleType);
        };
        _this.dragMove = function (eventClientCoordinates) {
            if (!_this.containerElementRef) {
                return;
            }
            var isSingleHandleBeingDragged = _this.isSingleHandleBeingDragged(_this.state.handleBeingDragged);
            if (isSingleHandleBeingDragged && _this.props.onHandleDragMove) {
                var handlePositionAtDragStart = _this.state.handleBeingDragged === SliderBaseWidget_1.HandleType.Left ?
                    _this.state.handlePositionsAtDragStart.leftHandlePosition :
                    _this.state.handlePositionsAtDragStart.rightHandlePosition;
                var newPosition = SliderHandleContainerCoordinateLogic.calculateProportionalPositionWhenDraggingSingleHandle(_this.state.dragOriginInClientCoordinates.x, handlePositionAtDragStart, eventClientCoordinates.x, _this.containerElementRef.getBoundingClientRect());
                _this.fireHandleDragMoveEvents(newPosition);
            }
            else if (!isSingleHandleBeingDragged && _this.props.onBothHandleDragMove) {
                // Both handles are being dragged
                var newPositions = SliderHandleContainerCoordinateLogic.calculateProportionalPositionsWhenDraggingBothHandles(_this.state.dragOriginInClientCoordinates.x, _this.state.handlePositionsAtDragStart.leftHandlePosition, _this.state.handlePositionsAtDragStart.rightHandlePosition, eventClientCoordinates.x, _this.containerElementRef.getBoundingClientRect());
                _this.fireHandleDragMoveEvents(newPositions.leftHandlePosition, newPositions.rightHandlePosition);
            }
        };
        _this.dragEnd = function () {
            if (_this.state.handleBeingDragged === undefined) {
                return;
            }
            if (_this.globalPointerEventCapturer) {
                _this.globalPointerEventCapturer.removeListeners();
            }
            _this.setState({
                handleBeingTouched: undefined,
                dragOriginInClientCoordinates: undefined,
                handlePositionsAtDragStart: undefined,
            });
            _this.handleHandleRelease();
        };
        _this.setContainerRef = function (element) {
            _this.containerElementRef = element;
            // We instantiate this here rather than in the constructor since we need the ref
            // tslint:disable-next-line:max-line-length
            _this.globalPointerEventCapturer = new GlobalPointerEventCapturer_1.GlobalPointerEventCapturer(_this.containerElementRef, _this.handlePointerMove, _this.handlePointerUp);
        };
        _this.setLeftHandleWidgetRef = function (component) {
            _this.leftHandleWidgetRef = component;
        };
        _this.setRightHandleWidgetRef = function (component) {
            _this.rightHandleWidgetRef = component;
        };
        _this.setRangeHandleRef = function (element) {
            _this.rangeHandleRef = element;
        };
        _this.handlePointerDown = function (event) {
            if (_this.props.disabled || !_this.leftHandleWidgetRef || (_this.getHandleCount() === 2 && !_this.rightHandleWidgetRef)) {
                return;
            }
            var castedEvent = event;
            var clientCoordinates = UserInteraction_1.getClientPosition(castedEvent);
            var dragInfo = _this.determineWhichHandleShouldBeDraggedForEvent(UserInteraction_1.isTouchEvent(castedEvent), clientCoordinates);
            if (!dragInfo) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            _this.dragStart(dragInfo.handleType, clientCoordinates, dragInfo.directlyOnIcon, UserInteraction_1.isTouchEvent(castedEvent));
        };
        _this.handlePointerMove = function (event) {
            if (_this.props.disabled || !_this.containerElementRef) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            _this.dragMove(UserInteraction_1.getClientPosition(event));
        };
        _this.handlePointerUp = function (event) {
            _this.dragEnd();
            if (_this.props.disabled) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
        };
        _this.makeKeyDownHandler = function (handleType) {
            return function (event) {
                if (_this.props.disabled || !_this.props.onHandleKeyDown) {
                    return;
                }
                if (SliderValueLogic_1.SliderValueLogic.KeysRelevantForManipulatingSlider[event.key]) {
                    _this.setState({ handleBeingDragged: handleType });
                    _this.props.onHandleKeyDown(handleType, event.key);
                    event.preventDefault();
                    event.stopPropagation();
                }
            };
        };
        _this.handleHandleKeyUp = function (event) {
            if (_this.props.disabled) {
                return;
            }
            if (SliderValueLogic_1.SliderValueLogic.KeysRelevantForManipulatingSlider[event.key]) {
                _this.handleHandleRelease();
                event.preventDefault();
                event.stopPropagation();
            }
        };
        _this.handleBlur = function (e) {
            if (!e.currentTarget.contains(e.relatedTarget) && !!_this.state.handleBeingDragged) {
                _this.handleHandleRelease();
            }
        };
        _this.renderLeftHandle = function () {
            if (isNaN(_this.props.handles.leftHandlePosition)) {
                return null;
            }
            var isActive = _this.state.handleBeingDragged === SliderBaseWidget_1.HandleType.Left || _this.state.handleBeingDragged === SliderBaseWidget_1.HandleType.Both;
            var isBeingTouched = _this.state.handleBeingTouched === SliderBaseWidget_1.HandleType.Left || _this.state.handleBeingTouched === SliderBaseWidget_1.HandleType.Both;
            var iconType = _this.getHandleCount() === 1 ? SliderHandleWidget_1.SliderHandleIconType.Normal : SliderHandleWidget_1.SliderHandleIconType.Left;
            return (React.createElement(SliderHandleWidget_1.SliderHandleWidget, { ariaAttributes: _this.props.handlesAriaAttributes.leftHandleAriaAttributes, disabled: _this.props.disabled, iconType: iconType, isActive: isActive, isBeingTouched: isBeingTouched, onKeyDown: _this.makeKeyDownHandler(SliderBaseWidget_1.HandleType.Left), onKeyUp: _this.handleHandleKeyUp, position: _this.props.handles.leftHandlePosition, ref: _this.setLeftHandleWidgetRef, testId: _this.props.testId }));
        };
        _this.renderRightHandle = function () {
            // tslint:disable-next-line:max-line-length
            if (_this.getHandleCount() === 1 || typeof _this.props.handles.rightHandlePosition === 'undefined' || isNaN(_this.props.handles.rightHandlePosition)) {
                return null;
            }
            var isActive = _this.state.handleBeingDragged === SliderBaseWidget_1.HandleType.Right || _this.state.handleBeingDragged === SliderBaseWidget_1.HandleType.Both;
            var isBeingTouched = _this.state.handleBeingTouched === SliderBaseWidget_1.HandleType.Right || _this.state.handleBeingTouched === SliderBaseWidget_1.HandleType.Both;
            return (React.createElement(SliderHandleWidget_1.SliderHandleWidget, { ariaAttributes: _this.props.handlesAriaAttributes.rightHandleAriaAttributes, disabled: _this.props.disabled, iconType: SliderHandleWidget_1.SliderHandleIconType.Right, isActive: isActive, isBeingTouched: isBeingTouched, onKeyDown: _this.makeKeyDownHandler(SliderBaseWidget_1.HandleType.Right), onKeyUp: _this.handleHandleKeyUp, position: _this.props.handles.rightHandlePosition, ref: _this.setRightHandleWidgetRef, testId: _this.props.testId }));
        };
        _this.handleRangeHandleFocusBlur = function (e) {
            if (_this.props.onRangeHandleFocus) {
                _this.props.onRangeHandleFocus(e.type === 'focus');
            }
        };
        _this.state = {};
        return _this;
    }
    SliderHandleContainer.prototype.componentWillUnmount = function () {
        if (this.globalPointerEventCapturer) {
            this.globalPointerEventCapturer.removeListeners();
        }
    };
    SliderHandleContainer.prototype.renderRangeHandle = function (style) {
        if (this.props.disabled || isNaN(this.props.handles.leftHandlePosition) || this.getHandleCount() === 1 ||
            // tslint:disable-next-line:triple-equals
            this.props.handles.rightHandlePosition == /* <-- intentional */ undefined || isNaN(this.props.handles.rightHandlePosition)) {
            return null;
        }
        var leftPositionAsPercentage = this.props.handles.leftHandlePosition * 100;
        var rightPositionAsPercentage = 100 - (this.props.handles.rightHandlePosition * 100);
        return (React.createElement("span", { "data-tb-test-id": Declarative_1.testId(this.props.testId, 'RangeHandle'), onBlur: this.handleRangeHandleFocusBlur, onFocus: this.handleRangeHandleFocusBlur, onKeyDown: this.makeKeyDownHandler(SliderBaseWidget_1.HandleType.Both), onKeyUp: this.handleHandleKeyUp, ref: this.setRangeHandleRef, style: tslib_1.__assign({}, style, { left: leftPositionAsPercentage + "%", right: rightPositionAsPercentage + "%" }), tabIndex: 0 }));
    };
    SliderHandleContainer.prototype.render = function () {
        var dataTestId = Declarative_1.testId(this.props.testId, 'SliderHandleContainer');
        var styles = SliderStyles_1.getSliderHandleContainerStyles();
        var containerStyle = styles.Container;
        if (BrowserDetection_1.isEdge) {
            containerStyle.touchAction = 'none';
        }
        return (React.createElement(PointerEvents_1.PointerEventWrapper, { pointerDown: this.handlePointerDown, disabled: this.props.disabled },
            React.createElement("div", { "data-tb-test-id": dataTestId, ref: this.setContainerRef, onBlur: this.handleBlur, onTouchStart: this.handlePointerDown, style: containerStyle },
                this.renderLeftHandle(),
                this.renderRangeHandle(styles.RangeHandleArea),
                this.renderRightHandle())));
    };
    return SliderHandleContainer;
}(React.Component));
exports.SliderHandleContainer = SliderHandleContainer;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Math_1 = __webpack_require__(33);
/**
 * This contains logic related to converting client coordinates into positions in the SliderHandleContainer and to
 * positioning handles.  The SliderHandleContainer needs this when processing mouse and touch events.
 */
function convertClientCoordinateIntoProportionOfContainer(
// Client coordinates means, basically, the location on the page irrespective of the current viewport position or
// zoom level.  E.g. 0,0 is always the top left of the page.
xPositionInClientCoordinates, containerBoundingClientRect) {
    var xPositionRelativeToLeftOfSlider = xPositionInClientCoordinates - containerBoundingClientRect.left;
    var proportion = xPositionRelativeToLeftOfSlider / (Math.max(1, containerBoundingClientRect.width));
    return Math_1.clamp(proportion, 0, 1);
}
exports.convertClientCoordinateIntoProportionOfContainer = convertClientCoordinateIntoProportionOfContainer;
/**
 * This function handles calculation of the new position for a single handle being dragged when a move
 * event occurs.
 */
function calculateProportionalPositionWhenDraggingSingleHandle(sourceXPositionForDragInClientCoordinates, sourceHandlePositionAsProportion, newXPositionInClientCoordinates, containerBoundingClientRect) {
    var difference = newXPositionInClientCoordinates - sourceXPositionForDragInClientCoordinates;
    var proportionalDifference = difference / containerBoundingClientRect.width;
    var newHandlePosition = sourceHandlePositionAsProportion + proportionalDifference;
    return Math_1.clamp(newHandlePosition, 0, 1);
}
exports.calculateProportionalPositionWhenDraggingSingleHandle = calculateProportionalPositionWhenDraggingSingleHandle;
/**
 * This function basically does all the math required to calculate what the new position for both handles should be
 * when they are both being dragged and a move event occurs.  This is more complicated than dragging a single handle
 * because in that case, we can (more or less) just move the handle directly underneath the move event's location.
 */
function calculateProportionalPositionsWhenDraggingBothHandles(
// We need these source positions to determine how far we should move the handles
sourceXPositionForDragInClientCoordinates, sourceLeftHandlePositionAsProprtion, sourceRightHandlePositionAsProprtion, newXPositionInClientCoordinates, containerBoundingClientRect) {
    var difference = newXPositionInClientCoordinates - sourceXPositionForDragInClientCoordinates;
    var proportionalDifference = difference / containerBoundingClientRect.width;
    var newLeftHandlePosition = sourceLeftHandlePositionAsProprtion + proportionalDifference;
    var newRightHandlePosition = sourceRightHandlePositionAsProprtion + proportionalDifference;
    var sourceProportionalDifferenceBetweenHandles = sourceRightHandlePositionAsProprtion - sourceLeftHandlePositionAsProprtion;
    if (newLeftHandlePosition < 0) {
        return {
            leftHandlePosition: 0,
            rightHandlePosition: sourceProportionalDifferenceBetweenHandles,
        };
    }
    else if (newRightHandlePosition > 1) {
        return {
            leftHandlePosition: 1 - sourceProportionalDifferenceBetweenHandles,
            rightHandlePosition: 1,
        };
    }
    else {
        return {
            leftHandlePosition: newLeftHandlePosition,
            rightHandlePosition: newRightHandlePosition,
        };
    }
}
exports.calculateProportionalPositionsWhenDraggingBothHandles = calculateProportionalPositionsWhenDraggingBothHandles;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Geometry_1 = __webpack_require__(20);
var SliderBaseWidget_1 = __webpack_require__(34);
/**
 * This contains logic related to determining which handle to drag given the client coordinates from a mouse or touch
 * event.  The SliderHandleContainer needs this and is the only user.
 *
 * The logic for this at a high level is (even though this is broken into multiple methods):
 * ```
 * if mouse then
 *   if there is only one handle then
 *     return the left handle (clicking anywhere on the track grabs the handle)
 *   otherwise (if there are two handles) then
 *     if the click is between the *ICONS* return saying that both handles should be dragged
 *     otherwise return the handle that is closer to the click
 * otherwise (if touch) then
 *   if there is only one handle then
 *     if the touch is directly on the *INTERACTIVE AREA* for the left handle, return that
 *   otherwise (if there are two handles) then
 *     if the touch is on both the *INTERACTIVE AREA*s for both handles, return the one that is closer to the touch
 *     otherwise if it is on only one of the *INTERACTIVE AREA*s return that
 * and if none of those situations above are true, return nothing
 * ```
 */
function determineWhichHandleShouldBeDraggedForMouseAndOneHandle(clientCoordinates, leftHandleIconBoundingClientRect) {
    var point = { left: clientCoordinates.x, top: clientCoordinates.y };
    var directlyOnIcon = Geometry_1.doesRectangleContainPoint(leftHandleIconBoundingClientRect, point);
    return { handleType: SliderBaseWidget_1.HandleType.Left, directlyOnIcon: directlyOnIcon };
}
exports.determineWhichHandleShouldBeDraggedForMouseAndOneHandle = determineWhichHandleShouldBeDraggedForMouseAndOneHandle;
function determineWhichHandleShouldBeDraggedForMouseAndTwoHandles(clientCoordinates, leftHandleIconBoundingClientRect, rightHandleIconBoundingClientRect) {
    var point = { left: clientCoordinates.x, top: clientCoordinates.y };
    if (Geometry_1.doesRectangleContainPoint(leftHandleIconBoundingClientRect, point)) {
        return { handleType: SliderBaseWidget_1.HandleType.Left, directlyOnIcon: true };
    }
    else if (Geometry_1.doesRectangleContainPoint(rightHandleIconBoundingClientRect, point)) {
        return { handleType: SliderBaseWidget_1.HandleType.Right, directlyOnIcon: true };
    }
    if (clientCoordinates.x >= leftHandleIconBoundingClientRect.right &&
        clientCoordinates.x <= rightHandleIconBoundingClientRect.left) {
        return { handleType: SliderBaseWidget_1.HandleType.Both, directlyOnIcon: false };
    }
    else if (clientCoordinates.x <= leftHandleIconBoundingClientRect.right) {
        return { handleType: SliderBaseWidget_1.HandleType.Left, directlyOnIcon: false };
    }
    return { handleType: SliderBaseWidget_1.HandleType.Right, directlyOnIcon: false };
}
exports.determineWhichHandleShouldBeDraggedForMouseAndTwoHandles = determineWhichHandleShouldBeDraggedForMouseAndTwoHandles;
function determineWhichHandleShouldBeDraggedForTouchAndOneHandle(clientCoordinates, leftHandleInteractiveAreaBoundingClientRect) {
    var point = { left: clientCoordinates.x, top: clientCoordinates.y };
    // For touch we are "more loose" with our interpretation of what counts as being directly on the icon than mouse.
    var directlyOnIcon = Geometry_1.doesRectangleContainPoint(leftHandleInteractiveAreaBoundingClientRect, point);
    if (directlyOnIcon) {
        return { handleType: SliderBaseWidget_1.HandleType.Left, directlyOnIcon: true };
    }
    // we don't allow the user to touch and drag anywhere on the track, like they can w/ a mouse, since that is
    // actually quite annoying on touch when the user is trying to scroll the page (instead of manipulate the slider).
    return undefined;
}
exports.determineWhichHandleShouldBeDraggedForTouchAndOneHandle = determineWhichHandleShouldBeDraggedForTouchAndOneHandle;
function determineWhichHandleShouldBeDraggedForTouchAndTwoHandles(clientCoordinates, leftHandleInteractiveAreaBoundingClientRect, rightHandleInteractiveAreaBoundingClientRect, rangeHandleInteractiveAreaBoundingClientRect) {
    var point = { left: clientCoordinates.x, top: clientCoordinates.y };
    // For touch we are "more loose" with our interpretation of what counts as being directly on the icon than mouse.
    var directlyOnLeftIcon = Geometry_1.doesRectangleContainPoint(leftHandleInteractiveAreaBoundingClientRect, point);
    var directlyOnRightIcon = Geometry_1.doesRectangleContainPoint(rightHandleInteractiveAreaBoundingClientRect, point);
    var directlyOnRangeHandle = Geometry_1.doesRectangleContainPoint(rangeHandleInteractiveAreaBoundingClientRect, point);
    if (directlyOnLeftIcon && directlyOnRightIcon) {
        var distanceToLeftHandle = Math.abs(point.left - leftHandleInteractiveAreaBoundingClientRect.left);
        var distanceToRightHandle = Math.abs(point.left - rightHandleInteractiveAreaBoundingClientRect.right);
        var isCloserToLeftHandle = distanceToLeftHandle < distanceToRightHandle;
        return { handleType: isCloserToLeftHandle ? SliderBaseWidget_1.HandleType.Left : SliderBaseWidget_1.HandleType.Right, directlyOnIcon: true };
    }
    else if (directlyOnLeftIcon) {
        return { handleType: SliderBaseWidget_1.HandleType.Left, directlyOnIcon: true };
    }
    else if (directlyOnRightIcon) {
        return { handleType: SliderBaseWidget_1.HandleType.Right, directlyOnIcon: true };
    }
    else if (directlyOnRangeHandle) {
        return { handleType: SliderBaseWidget_1.HandleType.Both, directlyOnIcon: true };
    }
    // we don't allow the user to touch and drag anywhere on the track, like they can w/ a mouse, since that is
    // actually quite annoying on touch when the user is trying to scroll the page (instead of manipulate the slider).
    return undefined;
}
exports.determineWhichHandleShouldBeDraggedForTouchAndTwoHandles = determineWhichHandleShouldBeDraggedForTouchAndTwoHandles;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var InteractiveDom_1 = __webpack_require__(8);
var Icons_1 = __webpack_require__(6);
var Declarative_1 = __webpack_require__(3);
var Geometry_1 = __webpack_require__(20);
var SliderStyles_1 = __webpack_require__(22);
var SliderHandleIconType;
(function (SliderHandleIconType) {
    SliderHandleIconType["Normal"] = "normal";
    SliderHandleIconType["Left"] = "left";
    SliderHandleIconType["Right"] = "right";
})(SliderHandleIconType = exports.SliderHandleIconType || (exports.SliderHandleIconType = {}));
/**
 * This is just the handle part of the slider.
 *
 * It is interactive, BUT that logic (e.g. dragging) is handled by the container.  This allows some stuff like clicking
 * anywhere on the track to grab and drag the handle, rather than only being able to click on the handle.
 */
var SliderHandleWidget = /** @class */ (function (_super) {
    tslib_1.__extends(SliderHandleWidget, _super);
    function SliderHandleWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.chooseIconAndStylesForRender = function () {
            var styles = SliderStyles_1.getSliderHandleStyles();
            var iconSet = undefined;
            var interactiveAreaStyle = undefined;
            var imgStyle = undefined;
            switch (_this.props.iconType) {
                case SliderHandleIconType.Left:
                    iconSet = Icons_1.SliderLeftHandleIcon;
                    interactiveAreaStyle = styles.HandleInteractiveAreaLeft;
                    imgStyle = styles.HandleIconLeft;
                    break;
                case SliderHandleIconType.Right:
                    iconSet = Icons_1.SliderRightHandleIcon;
                    interactiveAreaStyle = styles.HandleInteractiveAreaRight;
                    imgStyle = styles.HandleIconRight;
                    break;
                default:
                    iconSet = Icons_1.SliderHandleIcon;
                    interactiveAreaStyle = styles.HandleInteractiveArea;
                    imgStyle = styles.HandleIcon;
                    break;
            }
            if (_this.props.disabled) {
                interactiveAreaStyle = tslib_1.__assign({}, interactiveAreaStyle, styles.DisabledHandleMixin);
                imgStyle = tslib_1.__assign({}, imgStyle, styles.DisabledHandleInnerFocusAreaMixin);
            }
            var iconState = {
                active: _this.state.isHovered || _this.props.isActive,
                disabled: _this.props.disabled,
                focus: _this.state.isFocused,
            };
            var iconImageDataUrl = iconSet.icon(iconState);
            return {
                positioningContainerStyle: styles.PositioningContainer,
                pressIndicationBarStyle: styles.PressIndicationBar,
                interactiveAreaStyle: interactiveAreaStyle,
                imgStyle: imgStyle,
                iconImageDataUrl: iconImageDataUrl,
            };
        };
        _this.setImgRef = function (element) {
            _this.imgRef = element;
        };
        _this.setInteractiveAreaRef = function (element) {
            _this.interactiveAreaRef = element;
        };
        _this.handleFocus = function (focus) {
            _this.setState({ isFocused: !_this.props.disabled && focus });
        };
        _this.handleHover = function (hover) {
            if (!_this.props.disabled) {
                _this.setState({ isHovered: hover });
            }
        };
        _this.state = { isHovered: false, isFocused: false };
        return _this;
    }
    SliderHandleWidget.prototype.focus = function () {
        if (this.imgRef) {
            this.imgRef.focus();
        }
    };
    SliderHandleWidget.prototype.getBoundingClientRectForIcon = function () {
        if (this.imgRef) {
            var rect = this.imgRef.getBoundingClientRect();
            // The left and right icons have several pixels of transparency between what appears like the edge of the artwork
            // and the actual edge of the image.  Unfortunately we are using the client bounding rect of the icon for some
            // behavior (e.g. see the dragStart method in SliderHandleContainer, which has logic that has to know whether
            // the user (with a mouse) clicked specifically on the icon or not).
            // To make the actual client bounding rect matchup visually with the edge of the artwork, we have to shrink
            // the bounding rect slightly.
            if (this.props.iconType === SliderHandleIconType.Left) {
                return Geometry_1.addClientRectRight(rect, -1 * Icons_1.SliderLeftHandleIcon.artworkOffsetFromRightSide);
            }
            else if (this.props.iconType === SliderHandleIconType.Right) {
                return Geometry_1.addClientRectLeft(rect, Icons_1.SliderRightHandleIcon.artworkOffsetFromLeftSide);
            }
            return rect;
        }
        return undefined;
    };
    SliderHandleWidget.prototype.getBoundingClientRectForInteractiveArea = function () {
        if (this.interactiveAreaRef) {
            return this.interactiveAreaRef.getBoundingClientRect();
        }
        return undefined;
    };
    SliderHandleWidget.prototype.render = function () {
        var dataTestId = Declarative_1.testId(this.props.testId, 'SliderHandle');
        var positionAsPercentage = this.props.position * 100;
        var _a = this.chooseIconAndStylesForRender(), positioningContainerStyle = _a.positioningContainerStyle, pressIndicationBarStyle = _a.pressIndicationBarStyle, interactiveAreaStyle = _a.interactiveAreaStyle, imgStyle = _a.imgStyle, iconImageDataUrl = _a.iconImageDataUrl;
        var renderTouchDragIndicator = this.props.isActive && this.props.isBeingTouched;
        return (React.createElement(InteractiveDom_1.InteractiveDomWrapper, { handleHover: this.handleHover, handleFocus: this.handleFocus },
            React.createElement("span", { "data-tb-test-id": dataTestId, style: tslib_1.__assign({}, positioningContainerStyle, { left: positionAsPercentage + "%" }) },
                renderTouchDragIndicator &&
                    React.createElement("span", { style: pressIndicationBarStyle, "data-tb-test-id": dataTestId + '-touch-drag-indicator' }),
                React.createElement("span", { style: interactiveAreaStyle, ref: this.setInteractiveAreaRef }),
                React.createElement("img", tslib_1.__assign({}, this.props.ariaAttributes, { "aria-orientation": 'horizontal', "data-tb-test-id": Declarative_1.testId(this.props.testId, 'SliderHandleIconArea'), onKeyDown: this.props.onKeyDown, onKeyUp: this.props.onKeyUp, ref: this.setImgRef, role: 'slider', src: iconImageDataUrl, style: imgStyle, tabIndex: this.props.disabled ? undefined : 0 })))));
    };
    return SliderHandleWidget;
}(React.Component));
exports.SliderHandleWidget = SliderHandleWidget;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var SliderStyles_1 = __webpack_require__(22);
function calculateTickProportionalPositions(tickCount) {
    var tickPositionsAsProportions = [];
    if (tickCount === 1) {
        tickPositionsAsProportions.push(0.5);
    }
    else if (tickCount > 1) {
        // We subtract 1 from tickCount to make the final division below result in exactly 1.
        // For example, if tickCount === 4:
        // * (dividing by tickCount):     [0, 0.25, 0.5,  0.75]
        // * (dividing by tickCount - 1): [0, 0.33, 0.66, 1.0]
        // We want to position the marks like the later.
        var tickCountForSpacing = tickCount - 1;
        for (var i = 0; i < tickCount; i++) {
            tickPositionsAsProportions.push(i / tickCountForSpacing);
        }
    }
    return tickPositionsAsProportions;
}
exports.calculateTickProportionalPositions = calculateTickProportionalPositions;
/**
 * The tick bar is a bar, of ticks.  It is not interactive.
 */
function SliderTickBarWidget(props) {
    var tickPositionsAsProportions = calculateTickProportionalPositions(props.tickCount);
    var tickPositionsAsPercentages = tickPositionsAsProportions.map(function (x) { return x * 100; });
    var styles = SliderStyles_1.getSliderTickBarStyles();
    return (React.createElement("div", { style: styles.Bar, "data-tb-test-id": Declarative_1.testId(props.testId, 'SliderTickBar') }, tickPositionsAsPercentages.map(function (tickPositionAsPercentage, i) {
        return React.createElement("span", { key: i, style: tslib_1.__assign({}, styles.Tick, { left: tickPositionAsPercentage + "%" }) });
    })));
}
exports.SliderTickBarWidget = SliderTickBarWidget;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var SliderStyles_1 = __webpack_require__(22);
/**
 * The slider track appears underneath the slider handles in the slider widget.  This component itself is not
 * interactive, but the track can seem like its interactive since the SliderHandleContainer is positioned on top of
 * it and does let you click anywhere in the track to grab the handles.
 */
function SliderTrackWidget(props) {
    var styles = SliderStyles_1.getSliderTrackStyles();
    var indicatorBar;
    if (props.rangeIndicatorBarPosition) {
        var leftPositionAsPercentage = props.rangeIndicatorBarPosition.start * 100;
        var rightPositionAsPercentage = (1 - props.rangeIndicatorBarPosition.end) * 100;
        var style = props.handleIsBeingDragged ? styles.RangeIndicatorBarDarkened :
            (props.isRangeHandleFocused ? styles.RangeIndicatorBarFocused : styles.RangeIndicatorBar);
        indicatorBar = React.createElement("div", { style: tslib_1.__assign({}, style, { left: leftPositionAsPercentage + "%", right: rightPositionAsPercentage + "%" }) });
    }
    var dataBar;
    if (props.dataBarPosition) {
        var leftPositionAsPercentage = props.dataBarPosition.start * 100;
        var rightPositionAsPercentage = (1 - props.dataBarPosition.end) * 100;
        var style = props.handleIsBeingDragged ? styles.DataBarDarkened :
            (props.isRangeHandleFocused ? styles.DataBarFocused : styles.DataBar);
        dataBar = React.createElement("div", { style: tslib_1.__assign({}, style, { left: leftPositionAsPercentage + "%", right: rightPositionAsPercentage + "%" }) });
    }
    return (React.createElement("div", { style: styles.Track, "data-tb-test-id": Declarative_1.testId(props.testId, 'SliderTrack') },
        indicatorBar,
        dataBar));
}
exports.SliderTrackWidget = SliderTrackWidget;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Declarative_1 = __webpack_require__(3);
var SliderBaseWidget_1 = __webpack_require__(34);
/**
 * This slider has two handles and lets a user select a range of values between those two handles.
 * It allows the user to choose any number from min to max, including decimal numbers.
 */
function RangeSliderWidget(props) {
    return React.createElement(SliderBaseWidget_1.SliderBaseWidget, tslib_1.__assign({}, props, { testId: Declarative_1.testId(props.testId, 'RangeSlider') }));
}
exports.RangeSliderWidget = RangeSliderWidget;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var AutomaticTabActivator_1 = __webpack_require__(157);
var ManualTabActivator_1 = __webpack_require__(158);
var TabsWidget_1 = __webpack_require__(67);
var TabActivatorFactory = /** @class */ (function () {
    function TabActivatorFactory() {
    }
    TabActivatorFactory.CreateInstance = function (tabsWidget) {
        var isActivationModeManual = tabsWidget.props.activationMode === TabsWidget_1.TabActivationMode.Manual;
        return isActivationModeManual ? new ManualTabActivator_1.ManualTabActivator(tabsWidget) : new AutomaticTabActivator_1.AutomaticTabActivator(tabsWidget);
    };
    return TabActivatorFactory;
}());
exports.TabActivatorFactory = TabActivatorFactory;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var BaseTabActivator_1 = __webpack_require__(69);
/**
 * Automatically activated tabs: tabs are automatically activated and their panel is displayed when they receive focus
 */
var AutomaticTabActivator = /** @class */ (function (_super) {
    tslib_1.__extends(AutomaticTabActivator, _super);
    function AutomaticTabActivator(tabsWidget) {
        return _super.call(this, tabsWidget) || this;
    }
    AutomaticTabActivator.prototype.handleKeyDown = function (tabIndex, keyboardEvent) {
        var nextActiveTabIndex = this.tabIndexFromKeyDown(tabIndex, keyboardEvent.key);
        if (nextActiveTabIndex !== -1) {
            this.tabsWidget.setActiveIndex(nextActiveTabIndex);
            BaseTabActivator_1.BaseTabActivator.preventDefaultAndStopPropagation(keyboardEvent);
        }
    };
    return AutomaticTabActivator;
}(BaseTabActivator_1.BaseTabActivator));
exports.AutomaticTabActivator = AutomaticTabActivator;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var BaseTabActivator_1 = __webpack_require__(69);
/**
 * Manually activated tabs: users activate a tab and display its panel by pressing space or enter
 */
var ManualTabActivator = /** @class */ (function (_super) {
    tslib_1.__extends(ManualTabActivator, _super);
    function ManualTabActivator(tabsWidget) {
        return _super.call(this, tabsWidget) || this;
    }
    ManualTabActivator.prototype.handleKeyDown = function (tabIndex, keyboardEvent) {
        // Check to see if we should focus a tab (but not change which tab panel is being displayed)
        var tabIndexToFocus = this.tabIndexFromKeyDown(tabIndex, keyboardEvent.key);
        if (tabIndexToFocus !== -1) {
            this.tabsWidget.setFocusedIndex(tabIndexToFocus);
            BaseTabActivator_1.BaseTabActivator.preventDefaultAndStopPropagation(keyboardEvent);
            return;
        }
        // Check to see if we should activate a tab (which would display its corresponding tab panel)
        var tabIndexToActivate = this.tabIndexToActivate(keyboardEvent.key);
        if (tabIndexToActivate !== -1) {
            this.tabsWidget.setActiveIndex(tabIndexToActivate);
            BaseTabActivator_1.BaseTabActivator.preventDefaultAndStopPropagation(keyboardEvent);
        }
    };
    ManualTabActivator.prototype.tabIndexToActivate = function (keyValue) {
        switch (keyValue) {
            case 'Enter':
            case ' ':
                return this.tabsWidget.state.focusedIndex;
            default:
                return -1;
        }
    };
    return ManualTabActivator;
}(BaseTabActivator_1.BaseTabActivator));
exports.ManualTabActivator = ManualTabActivator;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var TabsWidgetStyles_1 = __webpack_require__(68);
var Declarative_1 = __webpack_require__(3);
var DomUtil_1 = __webpack_require__(7);
var Icons_1 = __webpack_require__(6);
/**
 * TabWidget is a component that renders a tab, stylized based on whether it's active, hovered, or pressed
 */
var TabMouseInteraction;
(function (TabMouseInteraction) {
    TabMouseInteraction[TabMouseInteraction["none"] = 0] = "none";
    TabMouseInteraction[TabMouseInteraction["hovered"] = 1] = "hovered";
    TabMouseInteraction[TabMouseInteraction["pressed"] = 2] = "pressed";
})(TabMouseInteraction = exports.TabMouseInteraction || (exports.TabMouseInteraction = {}));
var TabWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TabWidget, _super);
    function TabWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.handleTabRef = function (tabRef) {
            _this.tabRef = tabRef;
        };
        _this.handleLabelRef = function (labelRef) {
            _this.labelRef = labelRef;
        };
        _this.handleMouseEnter = function () {
            var title = (!!_this.labelRef && DomUtil_1.isElementOverflownX(_this.labelRef)) ? _this.props.tabContent.label : undefined;
            _this.setState({ mouseInteraction: TabMouseInteraction.hovered, title: title });
        };
        _this.handleMouseDown = function () {
            _this.setState({ mouseInteraction: TabMouseInteraction.pressed });
        };
        _this.handleMouseLeave = function () {
            _this.setState({ mouseInteraction: TabMouseInteraction.none });
        };
        _this.handleClick = function () {
            _this.setState({ mouseInteraction: TabMouseInteraction.none });
            _this.props.onClick(_this.props.index);
        };
        _this.handleKeyDown = function (keyboardEvent) {
            _this.props.onKeyDown(_this.props.index, keyboardEvent);
        };
        _this.handleFocus = function () {
            _this.props.onFocus(_this.props.index);
        };
        _this.state = { mouseInteraction: TabMouseInteraction.none };
        return _this;
    }
    TabWidget.prototype.componentWillReceiveProps = function (nextProps) {
        this.applyFocus = nextProps.isFocused && !this.props.isFocused;
    };
    TabWidget.prototype.componentDidUpdate = function () {
        if (this.applyFocus && !!this.tabRef) {
            this.tabRef.focus();
            this.applyFocus = false;
        }
    };
    /** this is only marked public for testing */
    TabWidget.prototype.getTabIndicatorStyles = function () {
        // The order here matters: pressed tabs always look pressed, and an active tab should never look hovered
        return tslib_1.__assign({}, TabsWidgetStyles_1.BaseTabIndicatorStyles, Declarative_1.conditional(this.isHovered(), TabsWidgetStyles_1.HoveredTabIndicatorStyles), Declarative_1.conditional(this.props.isActive, TabsWidgetStyles_1.ActiveTabIndicatorStyles), Declarative_1.conditional(this.props.isFocused, TabsWidgetStyles_1.FocusedTabIndicatorStyles), Declarative_1.conditional(this.isPressed(), TabsWidgetStyles_1.PressedTabIndicatorStyles));
    };
    TabWidget.prototype.isHovered = function () {
        return this.state.mouseInteraction === TabMouseInteraction.hovered;
    };
    TabWidget.prototype.isPressed = function () {
        return this.state.mouseInteraction === TabMouseInteraction.pressed;
    };
    TabWidget.prototype.render = function () {
        var props = {
            'aria-controls': this.props.ariaControls,
            'aria-label': this.props.tabContent.label,
            'aria-selected': this.props.isActive,
            id: this.props.id,
            onBlur: this.props.onBlur,
            onClick: this.handleClick,
            onFocus: this.handleFocus,
            onKeyDown: this.handleKeyDown,
            onMouseDown: this.handleMouseDown,
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            onTouchEnd: this.handleClick,
            ref: this.handleTabRef,
            role: 'tab',
            style: TabsWidgetStyles_1.GetSingleTabStyles(this.props.flexPercent),
            tabIndex: this.props.isActive || this.props.isFocused ? 0 : -1,
            title: this.props.tabContent.title || this.state.title
        };
        var tabLabelStyles = tslib_1.__assign({}, TabsWidgetStyles_1.DefaultTabLabelStyles, Declarative_1.conditional(this.props.isActive && !!this.props.flexPercent, { fontWeight: 'bold' }));
        return (React.createElement("div", tslib_1.__assign({}, props),
            React.createElement("div", { style: this.props.tabContainerStyles },
                React.createElement("div", { style: tabLabelStyles },
                    this.renderIcon(),
                    this.renderLabel())),
            React.createElement("div", { style: this.getTabIndicatorStyles() })));
    };
    TabWidget.prototype.renderIcon = function () {
        var tabIcon = this.props.tabContent.icon;
        if (!tabIcon) {
            return undefined;
        }
        var iconProps = {
            'data-tb-test-id': Declarative_1.testId(this.props.id, 'icon'),
            style: TabsWidgetStyles_1.TabContentStyle
        };
        var element = (typeof tabIcon === 'string') ? React.createElement("img", { src: Icons_1.encodeSvg(tabIcon) }) : tabIcon;
        return React.createElement("div", tslib_1.__assign({}, iconProps), element);
    };
    TabWidget.prototype.renderLabel = function () {
        var labelProps = {
            'data-tb-test-id': Declarative_1.testId(this.props.id, 'label'),
            ref: this.handleLabelRef,
            style: TabsWidgetStyles_1.LabelStyle
        };
        return React.createElement("div", { style: TabsWidgetStyles_1.TabContentStyle },
            React.createElement("div", tslib_1.__assign({}, labelProps), this.props.tabContent.label));
    };
    return TabWidget;
}(React.PureComponent));
exports.TabWidget = TabWidget;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
function TabPanel(props) {
    var containerProps = {
        'aria-labelledby': props.ariaLabelledBy,
        id: props.id,
        role: 'tabpanel',
        style: props.containerStyle
    };
    return (React.createElement("div", tslib_1.__assign({}, containerProps), props.content));
}
exports.TabPanel = TabPanel;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// tslint:disable:deprecation
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var _a;
var React = __webpack_require__(0);
var Localize_1 = __webpack_require__(11);
var Icons_1 = __webpack_require__(6);
var TabStyles_1 = __webpack_require__(2);
var Declarative_1 = __webpack_require__(3);
var StackingComponent_1 = __webpack_require__(19);
var ButtonWidget_1 = __webpack_require__(14);
var DomWidgets_1 = __webpack_require__(4);
var InteractiveLinkWidget_1 = __webpack_require__(70);
var ToastType;
(function (ToastType) {
    ToastType["Error"] = "error";
    ToastType["Warning"] = "warning";
    ToastType["Success"] = "success";
    ToastType["Info"] = "info";
})(ToastType = exports.ToastType || (exports.ToastType = {}));
var toastColors = (_a = {},
    _a[ToastType.Error] = {
        color: 'rgb(121,47,60)',
        backgroundColor: 'rgb(248,199,203)',
    },
    _a[ToastType.Warning] = {
        color: 'rgb(198,76,48)',
        backgroundColor: 'rgb(255,214,187)',
    },
    _a[ToastType.Info] = {
        color: 'rgb(15,68,94)',
        backgroundColor: 'rgb(215,236,249)',
    },
    _a[ToastType.Success] = {
        color: 'rgb(3,66,53)',
        backgroundColor: 'rgb(172,229,200)',
    },
    _a);
exports.ToastHeight = 36;
exports.ToastMaxWidth = 800;
var ToastPadding = (exports.ToastHeight - Icons_1.ToastCloseButtonIcon.height) / 2;
var toastStyles = {
    positioningDiv: {
        display: 'flex',
        justifyContent: 'center',
        left: 0,
        position: 'fixed',
        right: 0,
        top: 0,
        visibility: 'hidden',
    },
    toastDiv: {
        alignItems: 'center',
        boxSizing: 'border-box',
        display: 'flex',
        flexDirection: 'row',
        fontSize: TabStyles_1.TabStyles.Typography.Sizing.Default,
        minHeight: exports.ToastHeight,
        justifyContent: 'center',
        padding: ToastPadding,
        paddingLeft: TabStyles_1.TabStyles.Spacing.ExtraLargeSpace,
        paddingRight: TabStyles_1.TabStyles.Spacing.MediumSpace,
        position: 'relative',
        transitionProperty: 'opacity',
        visibility: 'visible',
    },
    actionContainer: {
        alignItems: 'center',
        display: 'flex',
        flexShrink: 0,
    },
    actionLink: {
        padding: '0px',
        marginLeft: TabStyles_1.TabStyles.Spacing.MediumSpace,
        color: 'inherit',
        fontWeight: 'bold',
        cursor: 'pointer',
        flexShrink: 0,
    },
    closeButton: {
        marginLeft: TabStyles_1.TabStyles.Spacing.MediumSpace,
        height: Icons_1.ToastCloseButtonIcon.height,
        minHeight: undefined,
        minWidth: undefined,
        width: Icons_1.ToastCloseButtonIcon.width,
        cursor: 'pointer',
    },
};
function prefixForToastType(toastType) {
    // tslint:disable-next-line:no-any
    // return <b>(Messages as any)[toastType + 'ToastPrefix']()</b>;
    return null;
}
var ToastWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ToastWidget, _super);
    function ToastWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.autoDismissTimerId = -1;
        _this.fadeOutTimerId = -1;
        _this.fadeOut = function () {
            var fadeTime = _this.shouldAutoDismiss() ? ToastWidget.AutodimissCloseFadeTransitionTimeMS
                : ToastWidget.FadeTransitionTimeMS;
            _this.setState({ fadeOpacity: 0, fadeTransitionTime: fadeTime });
            _this.fadeOutTimerId = window.setTimeout(_this.onClose, ToastWidget.FadeTransitionTimeMS);
        };
        _this.handleMouseOver = function () {
            if (_this.shouldAutoDismiss()) {
                _this.setState({ fadeOpacity: 1, fadeTransitionTime: ToastWidget.HoverRestoreFadeTransitionTimeMS });
                _this.clearTimeouts();
            }
        };
        _this.handleMouseOut = function () {
            if (_this.shouldAutoDismiss() && _this.state.fadeOpacity === 1) {
                _this.autoDismissTimerId = window.setTimeout(_this.fadeOut, _this.props.autoDismissTimeMS);
            }
        };
        _this.onClose = function () {
            _this.clearTimeouts();
            _this.props.onCloseRequest();
        };
        _this.state = {
            fadeOpacity: 0,
            fadeTransitionTime: ToastWidget.FadeTransitionTimeMS
        };
        return _this;
    }
    ToastWidget.prototype.componentDidMount = function () {
        var _this = this;
        // timeout is necessary to make sure that DOM has been updated with opacity 0 from initial state.
        setTimeout(function () {
            _this.setState({ fadeOpacity: 1, fadeTransitionTime: ToastWidget.FadeTransitionTimeMS });
        }, 0);
        if (this.shouldAutoDismiss()) {
            this.autoDismissTimerId = window.setTimeout(this.fadeOut, this.props.autoDismissTimeMS);
        }
    };
    ToastWidget.prototype.componentWillUnmount = function () {
        this.clearTimeouts();
    };
    ToastWidget.prototype.shouldAutoDismiss = function () {
        if (this.props.toastType === ToastType.Error || this.props.toastType === ToastType.Warning ||
            this.props.actionMessage || this.props.onAction || this.props.fillFullWidth) {
            return false;
        }
        return this.props.autoDismiss;
    };
    ToastWidget.prototype.renderCloseButton = function () {
        var _this = this;
        var getContent = function (state) {
            var toastType = (state.active || state.focus || state.hover) ? 'active' : _this.props.toastType;
            var icon = Icons_1.ToastCloseButtonIcon.icon(toastType);
            return React.createElement(DomWidgets_1.Img, { src: icon, draggable: false });
        };
        var buttonProps = {
            buttonType: ButtonWidget_1.ButtonType.IconOutline,
            getContent: getContent,
            handleClick: this.fadeOut,
            style: toastStyles.closeButton,
            testId: 'toast-close',
            title: Localize_1.Messages.close()
        };
        return React.createElement(ButtonWidget_1.ButtonWidget, tslib_1.__assign({}, buttonProps));
    };
    ToastWidget.prototype.renderInteractiveLink = function () {
        if (!this.props.actionMessage || this.props.actionMessage.length === 0) {
            return null;
        }
        var interactiveLinkProps = {
            onClick: this.props.onAction,
            style: toastStyles.actionLink,
            text: this.props.actionMessage,
            testId: this.props.testId,
        };
        return React.createElement(InteractiveLinkWidget_1.InteractiveLinkWidget, tslib_1.__assign({}, interactiveLinkProps));
    };
    ToastWidget.prototype.fadeStyle = function () {
        return {
            opacity: this.state.fadeOpacity,
            transitionDuration: this.state.fadeTransitionTime + 'ms',
            transitionTimingFunction: this.state.fadeOpacity === 0 ? 'linear' : 'ease-in'
        };
    };
    ToastWidget.prototype.clearTimeouts = function () {
        clearTimeout(this.autoDismissTimerId);
        clearTimeout(this.fadeOutTimerId);
    };
    ToastWidget.prototype.render = function () {
        var toastStyle = tslib_1.__assign({ top: this.props.topLeftYPx }, toastStyles.toastDiv, toastColors[this.props.toastType], Declarative_1.conditional(!this.props.fillFullWidth, { left: this.props.topLeftXPx }), this.fadeStyle());
        var toastAttributes = {
            'data-tb-test-id': Declarative_1.testId(this.props.testId, ToastWidget.ToastContentDivId),
            onMouseOver: this.handleMouseOver,
            onMouseOut: this.handleMouseOut,
            role: 'alert',
            style: toastStyle,
        };
        var labelProps = {
            'data-tb-test-id': Declarative_1.testId(this.props.testId, ToastWidget.ToastLabelId),
        };
        var stackingComponentProps = {
            wrapperTestId: this.props.testId,
            zIndex: this.props.zIndex
        };
        var positioningStyle = tslib_1.__assign({}, toastStyles.positioningDiv, Declarative_1.conditional(!this.props.fillFullWidth && !!this.props.topLeftXPx, { justifyContent: undefined }));
        var centeringStyle = tslib_1.__assign({}, (this.props.fillFullWidth ? { maxWidth: '100vw', width: '100%' } : { maxWidth: exports.ToastMaxWidth }));
        return (React.createElement(StackingComponent_1.StackingComponentWrapper, tslib_1.__assign({}, stackingComponentProps),
            React.createElement("div", { style: positioningStyle },
                React.createElement("div", { style: centeringStyle },
                    React.createElement("div", tslib_1.__assign({}, toastAttributes),
                        React.createElement("div", tslib_1.__assign({}, labelProps),
                            prefixForToastType(this.props.toastType),
                            this.props.message),
                        React.createElement("div", { style: toastStyles.actionContainer },
                            this.renderInteractiveLink(),
                            this.renderCloseButton()))))));
    };
    ToastWidget.ToastContentDivId = 'toast-content';
    ToastWidget.ToastLabelId = 'toast-label';
    ToastWidget.FadeTransitionTimeMS = 300;
    ToastWidget.AutodimissCloseFadeTransitionTimeMS = 1000;
    ToastWidget.HoverRestoreFadeTransitionTimeMS = 30;
    ToastWidget.DefaultAutoDissmissTimeMS = 5000;
    ToastWidget.defaultProps = {
        autoDismiss: true,
        autoDismissTimeMS: ToastWidget.DefaultAutoDissmissTimeMS,
    };
    return ToastWidget;
}(React.Component));
exports.ToastWidget = ToastWidget;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var ReactDOM = __webpack_require__(9);
var DatePickerBody_1 = __webpack_require__(163);
var DatePickerWidgetStyles_1 = __webpack_require__(23);
var DatePickerDayOfWeekHeader_1 = __webpack_require__(166);
var Date_1 = __webpack_require__(24);
var Localize_1 = __webpack_require__(11);
var CarouselWidget_1 = __webpack_require__(167);
var DomUtil_1 = __webpack_require__(7);
var DatePickerWidget = /** @class */ (function (_super) {
    tslib_1.__extends(DatePickerWidget, _super);
    function DatePickerWidget(props) {
        var _this = _super.call(this, props) || this;
        _this.headerId = DomUtil_1.generateId();
        _this.handleOnConfirm = function (date) {
            if (_this.props.onConfirm) {
                _this.props.onConfirm(date);
            }
        };
        _this.handleOnChange = function (date) {
            if (_this.props.onChange && date.getTime() !== _this.props.selectedDate.getTime()) {
                _this.props.onChange(date);
            }
        };
        _this.handleFocusedDateChange = function (date) {
            if (date !== _this.state.focusedDate) {
                _this.setState({ focusedDate: date });
            }
        };
        _this.handleClickPrevMonth = function () {
            _this.handleFocusedDateChange(Date_1.getDateWithMonthOffset(_this.state.focusedDate, -1));
        };
        _this.handleClickNextMonth = function () {
            _this.handleFocusedDateChange(Date_1.getDateWithMonthOffset(_this.state.focusedDate, 1));
        };
        _this.isDateDisabled = function (date) {
            return _this.props.isDateDisabled && _this.props.isDateDisabled(date);
        };
        _this.state = {
            focusedDate: _this.props.selectedDate,
        };
        return _this;
    }
    DatePickerWidget.prototype.componentDidMount = function () {
        if (this.props.autofocus) {
            var tabbables = ReactDOM.findDOMNode(this).querySelectorAll('[tabindex="0"]');
            if (tabbables.length > 0) {
                DomUtil_1.timeoutFocus(tabbables[tabbables.length - 1]);
            }
        }
    };
    DatePickerWidget.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.selectedDate !== this.props.selectedDate) {
            this.setState({ focusedDate: this.props.selectedDate });
        }
    };
    DatePickerWidget.prototype.getDisplayedMonthAndYear = function () {
        return Localize_1.Formatters.formatFullMonthAndFullYear(this.state.focusedDate);
    };
    DatePickerWidget.prototype.render = function () {
        var displayedMonthAndYear = this.getDisplayedMonthAndYear();
        var headerProps = {
            id: this.headerId,
            nextButtonTitle: Localize_1.Messages.nextMonth(),
            onNextClick: this.handleClickNextMonth,
            onPreviousClick: this.handleClickPrevMonth,
            prevButtonTitle: Localize_1.Messages.previousMonth(),
            role: 'heading',
            style: DatePickerWidgetStyles_1.datePickerHeaderStyle,
        };
        var bodyProps = {
            focusedDate: this.state.focusedDate,
            isDateDisabled: this.isDateDisabled,
            onChange: this.handleOnChange,
            onConfirm: this.handleOnConfirm,
            onFocusedDateChange: this.handleFocusedDateChange,
            selectedDate: this.props.selectedDate,
            showWeekNumbers: this.props.showWeekNumbers,
        };
        return (React.createElement("div", { style: DatePickerWidgetStyles_1.datePickerWidgetStyle, "data-tb-test-id": this.props.testId },
            React.createElement(CarouselWidget_1.CarouselWidget, tslib_1.__assign({}, headerProps), displayedMonthAndYear),
            React.createElement("div", { "aria-labelledby": this.headerId, role: 'grid', "aria-rowcount": -1 },
                React.createElement(DatePickerDayOfWeekHeader_1.DatePickerDayOfWeekHeader, { showWeekNumbers: this.props.showWeekNumbers }),
                React.createElement(DatePickerBody_1.DatePickerBody, tslib_1.__assign({}, bodyProps)))));
    };
    DatePickerWidget.defaultProps = {
        selectedDate: new Date(),
    };
    return DatePickerWidget;
}(React.Component));
exports.DatePickerWidget = DatePickerWidget;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DatePickerRow_1 = __webpack_require__(164);
var DatePickerWidgetStyles_1 = __webpack_require__(23);
var Date_1 = __webpack_require__(24);
var BrowserDetection_1 = __webpack_require__(18);
var DomUtil_1 = __webpack_require__(7);
var DatePickerBody = /** @class */ (function (_super) {
    tslib_1.__extends(DatePickerBody, _super);
    function DatePickerBody() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            hasFocus: false,
        };
        _this.handleRef = function (ref) {
            _this.element = ref;
        };
        _this.handleKeyDown = function (e) {
            var startDayOfWeek = Date_1.getStartDayOfWeek(_this.props.showWeekNumbers);
            var key = e.key;
            if (BrowserDetection_1.isCtrl(e)) {
                switch (key) {
                    case 'Home':
                        _this.handleFocusedDateChange(Date_1.getFirstDayOfMonth(_this.props.focusedDate));
                        break;
                    case 'End':
                        _this.handleFocusedDateChange(Date_1.getLastDayOfMonth(_this.props.focusedDate));
                        break;
                    default:
                        return;
                }
            }
            else if (e.altKey) {
                switch (key) {
                    case 'PageDown':
                        _this.handleFocusedDateChange(Date_1.getDateWithYearOffset(_this.props.focusedDate, 1));
                        break;
                    case 'PageUp':
                        _this.handleFocusedDateChange(Date_1.getDateWithYearOffset(_this.props.focusedDate, -1));
                        break;
                    default:
                        return;
                }
            }
            else {
                switch (key) {
                    case 'ArrowRight':
                        _this.handleFocusedDateChange(Date_1.getDateWithDayOffset(_this.props.focusedDate, 1));
                        break;
                    case 'ArrowLeft':
                        _this.handleFocusedDateChange(Date_1.getDateWithDayOffset(_this.props.focusedDate, -1));
                        break;
                    case 'ArrowUp':
                        _this.handleFocusedDateChange(Date_1.getDateWithDayOffset(_this.props.focusedDate, -7));
                        break;
                    case 'ArrowDown':
                        _this.handleFocusedDateChange(Date_1.getDateWithDayOffset(_this.props.focusedDate, 7));
                        break;
                    case 'PageDown':
                        _this.handleFocusedDateChange(Date_1.getDateWithMonthOffset(_this.props.focusedDate, 1));
                        break;
                    case 'PageUp':
                        _this.handleFocusedDateChange(Date_1.getDateWithMonthOffset(_this.props.focusedDate, -1));
                        break;
                    case 'Home':
                        _this.handleFocusedDateChange(Date_1.getFirstDayOfWeek(_this.props.focusedDate, startDayOfWeek));
                        break;
                    case 'End':
                        _this.handleFocusedDateChange(Date_1.getLastDayOfWeek(_this.props.focusedDate, startDayOfWeek));
                        break;
                    default:
                        return;
                }
            }
            e.preventDefault();
            e.stopPropagation();
        };
        _this.handleKeyUp = function (e) {
            var key = e.key;
            switch (key) {
                case ' ':
                    if (!_this.props.isDateDisabled || !_this.props.isDateDisabled(_this.props.focusedDate)) {
                        _this.props.onChange(_this.props.focusedDate);
                    }
                    break;
                case 'Enter':
                    if (!_this.props.isDateDisabled || !_this.props.isDateDisabled(_this.props.focusedDate)) {
                        _this.props.onConfirm(_this.props.focusedDate);
                    }
                    break;
                default:
                    return;
            }
            e.preventDefault();
            e.stopPropagation();
        };
        _this.handleFocusedDateChange = function (date) {
            if (!_this.state.hasFocus) {
                _this.setState({ hasFocus: true });
            }
            _this.props.onFocusedDateChange(date);
        };
        _this.handleBlur = function (e) {
            var relatedTarget = DomUtil_1.findBlurRelatedTarget(e);
            if (_this.element && !_this.element.contains(relatedTarget)) {
                if (_this.state.hasFocus) {
                    _this.setState({ hasFocus: false });
                }
            }
        };
        return _this;
    }
    DatePickerBody.prototype.render = function () {
        var startDayOfWeek = Date_1.getStartDayOfWeek(this.props.showWeekNumbers);
        var currentPageStartDate = Date_1.getFirstDisplayedDate(this.props.focusedDate, startDayOfWeek);
        var rows = [];
        var rowNum = 6;
        var daysOfWeekNum = 7;
        for (var i = 0; i < rowNum; i++) {
            var rowProps = {
                bodyHasFocus: this.state.hasFocus,
                focusedDate: this.props.focusedDate,
                isDateDisabled: this.props.isDateDisabled,
                onChange: this.props.onChange,
                onFocusedDateChange: this.handleFocusedDateChange,
                selectedDate: this.props.selectedDate,
                showWeekNumbers: this.props.showWeekNumbers,
                startDate: Date_1.getDateWithDayOffset(currentPageStartDate, i * daysOfWeekNum),
            };
            rows.push(React.createElement(DatePickerRow_1.DatePickerRow, tslib_1.__assign({ key: i }, rowProps)));
        }
        return (React.createElement("div", { style: DatePickerWidgetStyles_1.datePickerBodyStyle, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, onKeyUp: this.handleKeyUp, ref: this.handleRef }, rows));
    };
    return DatePickerBody;
}(React.PureComponent));
exports.DatePickerBody = DatePickerBody;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DatePickerCell_1 = __webpack_require__(165);
var Date_1 = __webpack_require__(24);
var Localize_1 = __webpack_require__(11);
var DatePickerWidgetStyles_1 = __webpack_require__(23);
var DatePickerRow = /** @class */ (function (_super) {
    tslib_1.__extends(DatePickerRow, _super);
    function DatePickerRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DatePickerRow.prototype.getCell = function (index) {
        var _this = this;
        var cellDate = Date_1.getDateWithDayOffset(this.props.startDate, index);
        var isDisabled = this.props.isDateDisabled && this.props.isDateDisabled(cellDate);
        var isInCurrMonth = cellDate.getMonth() === this.props.focusedDate.getMonth();
        var isSelected = Date_1.areSameDates(cellDate, this.props.selectedDate);
        var isToday = Date_1.areSameDates(cellDate, new Date());
        var isTabbable = Date_1.areSameDates(cellDate, this.props.focusedDate);
        var isFocused = isTabbable && this.props.bodyHasFocus;
        var handleFocus = function () { return _this.props.onFocusedDateChange(cellDate); };
        var handleClick = function () {
            if (!isInCurrMonth) {
                _this.props.onFocusedDateChange(cellDate);
            }
            if (!isDisabled) {
                _this.props.onChange(cellDate);
            }
        };
        var dateLabel = Localize_1.Formatters.formatFullDate(cellDate);
        var weekNumLabel = this.props.showWeekNumbers ?
            "" + Localize_1.Messages.weekNumber({ weekNum: Date_1.getISOWeekNum(this.props.startDate).toString() })
            : '';
        var cellProps = {
            'aria-label': (dateLabel + " " + weekNumLabel).trim(),
            isDisabled: isDisabled,
            isFocused: isFocused,
            isInCurrMonth: isInCurrMonth,
            isSelected: isSelected,
            isTabbable: isTabbable,
            isToday: isToday,
            onClick: handleClick,
            onFocus: handleFocus,
        };
        return (React.createElement(DatePickerCell_1.DatePickerCell, tslib_1.__assign({ key: index }, cellProps), cellDate.getDate()));
    };
    DatePickerRow.prototype.render = function () {
        var cells = [];
        var daysOfWeekNum = 7;
        for (var i = 0; i < daysOfWeekNum; i++) {
            cells.push(this.getCell(i));
        }
        if (this.props.showWeekNumbers) {
            var currISOWeekNum = Date_1.getISOWeekNum(this.props.startDate);
            var weekNumLabel = Localize_1.Messages.weekNumber({ weekNum: currISOWeekNum.toString() });
            var weekNumCellProps = {
                style: DatePickerWidgetStyles_1.datePickerCellStyles.isoWeekNum,
                'aria-label': weekNumLabel,
                role: 'gridcell'
            };
            cells.unshift(React.createElement("div", tslib_1.__assign({}, weekNumCellProps, { key: 'iso-week' }), currISOWeekNum));
        }
        return (React.createElement("div", { style: { display: 'flex' }, role: 'row' }, cells));
    };
    return DatePickerRow;
}(React.PureComponent));
exports.DatePickerRow = DatePickerRow;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DatePickerWidgetStyles_1 = __webpack_require__(23);
var PointerEvents_1 = __webpack_require__(13);
var DatePickerCell = /** @class */ (function (_super) {
    tslib_1.__extends(DatePickerCell, _super);
    function DatePickerCell() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleRef = function (element) {
            _this.element = element;
        };
        return _this;
    }
    DatePickerCell.prototype.componentDidMount = function () {
        this.syncFocus();
    };
    DatePickerCell.prototype.componentDidUpdate = function () {
        this.syncFocus();
    };
    DatePickerCell.prototype.syncFocus = function () {
        if (this.element && this.props.isFocused) {
            this.element.focus();
        }
    };
    DatePickerCell.prototype.getStyle = function (isDisabled, isInCurrMonth, isSelected, isToday) {
        var style;
        if (!isInCurrMonth) {
            style = DatePickerWidgetStyles_1.datePickerCellStyles.inOtherMonths;
        }
        else if (isToday && isSelected) {
            style = DatePickerWidgetStyles_1.datePickerCellStyles.todaySelected;
        }
        else if (isToday) {
            style = DatePickerWidgetStyles_1.datePickerCellStyles.today;
        }
        else if (isSelected) {
            style = DatePickerWidgetStyles_1.datePickerCellStyles.selected;
        }
        else {
            style = DatePickerWidgetStyles_1.datePickerCellStyles.default;
        }
        if (isDisabled) {
            style = tslib_1.__assign({}, style, DatePickerWidgetStyles_1.datePickerCellStyles.disabled);
        }
        return style;
    };
    DatePickerCell.prototype.render = function () {
        var _a = this.props, isInCurrMonth = _a.isInCurrMonth, isDisabled = _a.isDisabled, isToday = _a.isToday, isSelected = _a.isSelected, isTabbable = _a.isTabbable;
        var style = this.getStyle(isDisabled, isInCurrMonth, isSelected, isToday);
        // cells outside the current month should not be focusable when clicked
        var tabIndex = isInCurrMonth ? isTabbable ? 0 : -1 : undefined;
        var cellProps = {
            'aria-label': this.props['aria-label'],
            'aria-selected': isSelected,
            onFocus: this.props.onFocus,
            role: 'gridcell',
            style: style,
            tabIndex: tabIndex,
        };
        return (React.createElement(PointerEvents_1.PointerEventWrapper, { pointerClick: this.props.onClick },
            React.createElement("div", tslib_1.__assign({}, cellProps, { ref: this.handleRef }), this.props.children)));
    };
    return DatePickerCell;
}(React.PureComponent));
exports.DatePickerCell = DatePickerCell;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var DatePickerWidgetStyles_1 = __webpack_require__(23);
var Date_1 = __webpack_require__(24);
var DatePickerDayOfWeekHeader = /** @class */ (function (_super) {
    tslib_1.__extends(DatePickerDayOfWeekHeader, _super);
    function DatePickerDayOfWeekHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DatePickerDayOfWeekHeader.prototype.getDayOfWeekHeader = function () {
        var startDayOfWeek = Date_1.getStartDayOfWeek(this.props.showWeekNumbers);
        var dayOfWeek = Date_1.getLocalizedDaysOfWeek(startDayOfWeek);
        if (this.props.showWeekNumbers) {
            dayOfWeek.unshift('#');
        }
        return dayOfWeek;
    };
    DatePickerDayOfWeekHeader.prototype.render = function () {
        var _this = this;
        var weekOfDayHeader = [];
        this.getDayOfWeekHeader().forEach(function (header, index) {
            var style = _this.props.showWeekNumbers && index === 0 ?
                DatePickerWidgetStyles_1.datePickerCellStyles.isoWeekNumColHeader :
                DatePickerWidgetStyles_1.datePickerCellStyles.dayOfWeekColHeader;
            weekOfDayHeader.push(React.createElement("div", { key: index, style: style, role: 'columnheader' }, header));
        });
        return (React.createElement("div", { style: DatePickerWidgetStyles_1.datePickerDayOfWeekHeaderStyle, role: 'rowheader' }, weekOfDayHeader));
    };
    return DatePickerDayOfWeekHeader;
}(React.Component));
exports.DatePickerDayOfWeekHeader = DatePickerDayOfWeekHeader;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Icons_1 = __webpack_require__(6);
var DomWidgets_1 = __webpack_require__(4);
var ButtonWidget_1 = __webpack_require__(14);
var style = {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'space-between',
};
var buttonStyle = {
    height: 30,
    width: 30,
};
var CarouselWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CarouselWidget, _super);
    function CarouselWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CarouselWidget.prototype.getContent = function (icon) {
        return function (state) {
            var imgProps = {
                draggable: false,
                height: icon.height,
                src: Icons_1.encodeSvg(icon.icon(state)),
                width: icon.width,
            };
            return (React.createElement(React.Fragment, null,
                React.createElement(DomWidgets_1.Img, tslib_1.__assign({}, imgProps))));
        };
    };
    CarouselWidget.prototype.render = function () {
        var leftArrowProps = {
            buttonType: ButtonWidget_1.ButtonType.Icon,
            getContent: this.getContent(Icons_1.StepperLeftIcon),
            handleClick: this.props.onPreviousClick,
            style: buttonStyle,
            testId: 'stepper-left',
            title: this.props.prevButtonTitle,
        };
        var rightArrowProps = {
            buttonType: ButtonWidget_1.ButtonType.Icon,
            getContent: this.getContent(Icons_1.StepperRightIcon),
            handleClick: this.props.onNextClick,
            style: buttonStyle,
            testId: 'stepper-right',
            title: this.props.nextButtonTitle,
        };
        return (React.createElement("div", { style: tslib_1.__assign({}, style, this.props.style) },
            React.createElement(ButtonWidget_1.ButtonWidget, tslib_1.__assign({}, leftArrowProps)),
            React.createElement("span", { id: this.props.id, role: this.props.role, "aria-live": 'assertive', "aria-atomic": 'true' }, this.props.children),
            React.createElement(ButtonWidget_1.ButtonWidget, tslib_1.__assign({}, rightArrowProps))));
    };
    return CarouselWidget;
}(React.PureComponent));
exports.CarouselWidget = CarouselWidget;


/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TypeStyle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_free_style__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_free_style___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_free_style__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__formatting__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utilities__ = __webpack_require__(74);



/**
 * Creates an instance of free style with our options
 */
var createFreeStyle = function () { return __WEBPACK_IMPORTED_MODULE_0_free_style__["create"](
/** Use the default hash function */
undefined, 
/** Preserve $debugName values */
true); };
/**
 * Maintains a single stylesheet and keeps it in sync with requested styles
 */
var TypeStyle = /** @class */ (function () {
    function TypeStyle(_a) {
        var autoGenerateTag = _a.autoGenerateTag;
        var _this = this;
        /**
         * Insert `raw` CSS as a string. This is useful for e.g.
         * - third party CSS that you are customizing with template strings
         * - generating raw CSS in JavaScript
         * - reset libraries like normalize.css that you can use without loaders
         */
        this.cssRaw = function (mustBeValidCSS) {
            if (!mustBeValidCSS) {
                return;
            }
            _this._raw += mustBeValidCSS || '';
            _this._pendingRawChange = true;
            _this._styleUpdated();
        };
        /**
         * Takes CSSProperties and registers it to a global selector (body, html, etc.)
         */
        this.cssRule = function (selector) {
            var objects = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                objects[_i - 1] = arguments[_i];
            }
            var object = Object(__WEBPACK_IMPORTED_MODULE_1__formatting__["a" /* ensureStringObj */])(__WEBPACK_IMPORTED_MODULE_2__utilities__["b" /* extend */].apply(void 0, objects)).result;
            _this._freeStyle.registerRule(selector, object);
            _this._styleUpdated();
            return;
        };
        /**
         * Renders styles to the singleton tag imediately
         * NOTE: You should only call it on initial render to prevent any non CSS flash.
         * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.
         **/
        this.forceRenderStyles = function () {
            var target = _this._getTag();
            if (!target) {
                return;
            }
            target.textContent = _this.getStyles();
        };
        /**
         * Utility function to register an @font-face
         */
        this.fontFace = function () {
            var fontFace = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                fontFace[_i] = arguments[_i];
            }
            var freeStyle = _this._freeStyle;
            for (var _a = 0, _b = fontFace; _a < _b.length; _a++) {
                var face = _b[_a];
                freeStyle.registerRule('@font-face', face);
            }
            _this._styleUpdated();
            return;
        };
        /**
         * Allows use to use the stylesheet in a node.js environment
         */
        this.getStyles = function () {
            return (_this._raw || '') + _this._freeStyle.getStyles();
        };
        /**
         * Takes keyframes and returns a generated animationName
         */
        this.keyframes = function (frames) {
            var _a = Object(__WEBPACK_IMPORTED_MODULE_1__formatting__["b" /* explodeKeyframes */])(frames), keyframes = _a.keyframes, $debugName = _a.$debugName;
            // TODO: replace $debugName with display name
            var animationName = _this._freeStyle.registerKeyframes(keyframes, $debugName);
            _this._styleUpdated();
            return animationName;
        };
        /**
         * Helps with testing. Reinitializes FreeStyle + raw
         */
        this.reinit = function () {
            /** reinit freestyle */
            var freeStyle = createFreeStyle();
            _this._freeStyle = freeStyle;
            _this._lastFreeStyleChangeId = freeStyle.changeId;
            /** reinit raw */
            _this._raw = '';
            _this._pendingRawChange = false;
            /** Clear any styles that were flushed */
            var target = _this._getTag();
            if (target) {
                target.textContent = '';
            }
        };
        /** Sets the target tag where we write the css on style updates */
        this.setStylesTarget = function (tag) {
            /** Clear any data in any previous tag */
            if (_this._tag) {
                _this._tag.textContent = '';
            }
            _this._tag = tag;
            /** This special time buffer immediately */
            _this.forceRenderStyles();
        };
        /**
         * Takes an object where property names are ideal class names and property values are CSSProperties, and
         * returns an object where property names are the same ideal class names and the property values are
         * the actual generated class names using the ideal class name as the $debugName
         */
        this.stylesheet = function (classes) {
            var classNames = Object.getOwnPropertyNames(classes);
            var result = {};
            for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {
                var className = classNames_1[_i];
                var classDef = classes[className];
                if (classDef) {
                    classDef.$debugName = className;
                    result[className] = _this.style(classDef);
                }
            }
            return result;
        };
        var freeStyle = createFreeStyle();
        this._autoGenerateTag = autoGenerateTag;
        this._freeStyle = freeStyle;
        this._lastFreeStyleChangeId = freeStyle.changeId;
        this._pending = 0;
        this._pendingRawChange = false;
        this._raw = '';
        this._tag = undefined;
        // rebind prototype to TypeStyle.  It might be better to do a function() { return this.style.apply(this, arguments)}
        this.style = this.style.bind(this);
    }
    /**
     * Only calls cb all sync operations settle
     */
    TypeStyle.prototype._afterAllSync = function (cb) {
        var _this = this;
        this._pending++;
        var pending = this._pending;
        Object(__WEBPACK_IMPORTED_MODULE_2__utilities__["d" /* raf */])(function () {
            if (pending !== _this._pending) {
                return;
            }
            cb();
        });
    };
    TypeStyle.prototype._getTag = function () {
        if (this._tag) {
            return this._tag;
        }
        if (this._autoGenerateTag) {
            var tag = typeof window === 'undefined'
                ? { textContent: '' }
                : document.createElement('style');
            if (typeof document !== 'undefined') {
                document.head.appendChild(tag);
            }
            this._tag = tag;
            return tag;
        }
        return undefined;
    };
    /** Checks if the style tag needs updating and if so queues up the change */
    TypeStyle.prototype._styleUpdated = function () {
        var _this = this;
        var changeId = this._freeStyle.changeId;
        var lastChangeId = this._lastFreeStyleChangeId;
        if (!this._pendingRawChange && changeId === lastChangeId) {
            return;
        }
        this._lastFreeStyleChangeId = changeId;
        this._pendingRawChange = false;
        this._afterAllSync(function () { return _this.forceRenderStyles(); });
    };
    TypeStyle.prototype.style = function () {
        var freeStyle = this._freeStyle;
        var _a = Object(__WEBPACK_IMPORTED_MODULE_1__formatting__["a" /* ensureStringObj */])(__WEBPACK_IMPORTED_MODULE_2__utilities__["b" /* extend */].apply(undefined, arguments)), result = _a.result, debugName = _a.debugName;
        var className = debugName ? freeStyle.registerStyle(result, debugName) : freeStyle.registerStyle(result);
        this._styleUpdated();
        return className;
    };
    return TypeStyle;
}());



/***/ }),
/* 169 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = ensureStringObj;
/* harmony export (immutable) */ __webpack_exports__["b"] = explodeKeyframes;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_free_style__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_free_style___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_free_style__);

/**
 * We need to do the following to *our* objects before passing to freestyle:
 * - For any `$nest` directive move up to FreeStyle style nesting
 * - For any `$unique` directive map to FreeStyle Unique
 * - For any `$debugName` directive return the debug name
 */
function ensureStringObj(object) {
    /** The final result we will return */
    var result = {};
    var debugName = '';
    for (var key in object) {
        /** Grab the value upfront */
        var val = object[key];
        /** TypeStyle configuration options */
        if (key === '$unique') {
            result[__WEBPACK_IMPORTED_MODULE_0_free_style__["IS_UNIQUE"]] = val;
        }
        else if (key === '$nest') {
            var nested = val;
            for (var selector in nested) {
                var subproperties = nested[selector];
                result[selector] = ensureStringObj(subproperties).result;
            }
        }
        else if (key === '$debugName') {
            debugName = val;
        }
        else {
            result[key] = val;
        }
    }
    return { result: result, debugName: debugName };
}
// todo: better name here
function explodeKeyframes(frames) {
    var result = { $debugName: undefined, keyframes: {} };
    for (var offset in frames) {
        var val = frames[offset];
        if (offset === '$debugName') {
            result.$debugName = val;
        }
        else {
            result.keyframes[offset] = val;
        }
    }
    return result;
}


/***/ }),
/* 171 */
/***/ (function(module, exports) {



/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var typestyle_1 = __webpack_require__(35);
var PreventUserSelect_1 = __webpack_require__(12);
var TabStyles_1 = __webpack_require__(2);
var Interactive_1 = __webpack_require__(173);
var Typography = TabStyles_1.TabStyles.Typography;
var _a = TabStyles_1.TabStyles.Sizing, BorderWidth = _a.BorderWidth, RowHeight = _a.RowHeight;
var _b = TabStyles_1.TabStyles.Colors, L3 = _b.L3, WhiteTransparentLine = _b.WhiteTransparentLine;
exports.ChildrenClassName = typestyle_1.style({
    alignItems: 'center',
    alignSelf: 'stretch',
    display: 'inline-flex',
    flexGrow: 1,
    minHeight: RowHeight - BorderWidth * 2,
    overflow: 'hidden',
    $nest: {
        '.icon > &': { flexGrow: 0 },
        '.outline > &': { borderRight: "1px solid " + L3, padding: '0 6px' },
        '.dark.outline > &': { borderRight: "1px solid " + WhiteTransparentLine },
    }
});
exports.ClassName = typestyle_1.style(PreventUserSelect_1.PreventUserSelect, {
    alignItems: 'center',
    borderBottomStyle: 'solid',
    borderColor: 'transparent',
    borderWidth: BorderWidth,
    boxSizing: 'border-box',
    color: Typography.Color.Primary,
    cursor: 'pointer',
    display: 'flex',
    fontSize: Typography.Sizing.Default,
    lineHeight: 'normal',
    position: 'relative',
    $nest: {
        '&.outline, &.line': { cursor: 'default', outline: 'none' },
        '&.outline': tslib_1.__assign({ borderRadius: 1, borderStyle: 'solid' }, Interactive_1.StandardBorderColors),
        '&.line': Interactive_1.StandardBorderColors,
        '&.icon': { display: 'inline-flex' },
        '&[aria-disabled="true"]': { color: Typography.Color.Disabled, cursor: 'default' },
        '&[data-label]': { marginTop: 19 },
        '&[data-label]::before': {
            content: 'attr(data-label)',
            color: Typography.Color.Secondary,
            cursor: 'default',
            fontSize: Typography.Sizing.Default,
            lineHeight: "19px",
            position: 'absolute',
            top: -19,
            whiteSpace: 'nowrap',
        },
        '&.dark': {
            color: Typography.Color.InvertedPrimary,
            $nest: {
                '&[data-label]::before': { color: Typography.Color.InvertedSecondary },
                '&.outline': Interactive_1.DarkBorderColors,
                '&.line': Interactive_1.DarkBorderColors,
                '&[aria-disabled="true"]': { color: Typography.Color.InvertedDisabled },
            }
        },
    }
});


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TabStyles_1 = __webpack_require__(2);
var _a = TabStyles_1.TabStyles.Colors, GoLight = _a.GoLight, L6 = _a.L6, L8 = _a.L8, L9 = _a.L9, L9Disabled = _a.L9Disabled, White = _a.White, WhiteTransparentLine = _a.WhiteTransparentLine, WhiteTransparentLineHover = _a.WhiteTransparentLineHover, WhiteDisabled = _a.WhiteDisabled;
exports.StandardBorderColors = Object.freeze({
    borderColor: L6,
    $nest: {
        '&:hover:not([aria-disabled="true"])': { borderColor: L8 },
        '&:active:not([aria-disabled="true"])': { borderColor: L9 },
        '&&:focus': { borderColor: GoLight },
        '&[aria-disabled="true"]': { borderColor: L9Disabled },
    }
});
exports.DarkBorderColors = Object.freeze({
    borderColor: WhiteTransparentLine,
    $nest: {
        '&:hover:not([aria-disabled="true"])': { borderColor: WhiteTransparentLineHover },
        '&:active:not([aria-disabled="true"])': { borderColor: White },
        '&&:focus': { borderColor: White },
        '&[aria-disabled="true"]': { borderColor: WhiteDisabled },
    }
});


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var FindIndex_1 = __webpack_require__(15);
var ListItemUtils_1 = __webpack_require__(25);
var DropdownButton_1 = __webpack_require__(72);
exports.DropdownButtonType = DropdownButton_1.DropdownButtonType;
var SingleSelectDropdown = /** @class */ (function (_super) {
    tslib_1.__extends(SingleSelectDropdown, _super);
    function SingleSelectDropdown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.close = null;
        _this.typeAheadQuery = '';
        _this.typeAheadTimeoutHandle = 0;
        _this.handleOpen = function (done) {
            _this.close = done;
        };
        _this.handleClose = function () {
            _this.close = null;
        };
        _this.keyDownHandlers = {
            'Home': function (items) { return ListItemUtils_1.findSelectableItemIndex(items, -1, +1); },
            'End': function (items) { return ListItemUtils_1.findSelectableItemIndex(items, items.length, -1); },
            'ArrowUp': function (items) { return ListItemUtils_1.findSelectableItemIndex(items, ListItemUtils_1.findItemWithValue(items, _this.props.value), -1); },
            'ArrowDown': function (items) { return ListItemUtils_1.findSelectableItemIndex(items, ListItemUtils_1.findItemWithValue(items, _this.props.value), +1); },
        };
        _this.handleKeyDown = function (e) {
            if (_this.props.disabled) {
                return;
            }
            if (!_this.keyDownHandlers[e.key]) {
                if (_this.props.onKeyDown) {
                    _this.props.onKeyDown(e);
                }
                return;
            }
            var items = _this.props.list.props.items;
            var newSelectedItemIndex = _this.keyDownHandlers[e.key](items);
            e.preventDefault();
            e.stopPropagation();
            var newValue = items[newSelectedItemIndex].value;
            if (newValue !== _this.props.value) {
                _this.handleSelect(newValue);
            }
        };
        _this.handleKeyPress = function (e) {
            if (_this.props.disabled || e.key === ' ') {
                return;
            }
            window.clearTimeout(_this.typeAheadTimeoutHandle);
            _this.typeAheadTimeoutHandle = window.setTimeout(_this.resetQuery, 500);
            _this.typeAheadQuery += e.key;
            var items = _this.props.list.props.items;
            var currentIndex = FindIndex_1.findIndex(items, function (item) { return item.value === _this.props.value; });
            function lookFor(query) {
                // single-character queries start after the current item, but multiple-character queries start on the current item
                var startAt = currentIndex + (query.length > 1 ? 0 : 1);
                return FindIndex_1.findIndex(items, function (item) { return ListItemUtils_1.isSelectableItem(item) && item.value.toLowerCase().indexOf(query.toLowerCase()) === 0; }, startAt);
            }
            var nextIndex = lookFor(_this.typeAheadQuery);
            if (nextIndex < 0) {
                nextIndex = lookFor(e.key);
            }
            if (nextIndex >= 0 && currentIndex !== nextIndex) {
                _this.handleSelect(items[nextIndex].value);
                e.preventDefault();
                e.stopPropagation();
            }
        };
        _this.handleSelect = function (value) {
            if (_this.close) {
                _this.close();
                _this.close = null;
            }
            if (_this.props.onChange) {
                _this.props.onChange(value);
            }
        };
        _this.resetQuery = function () {
            _this.typeAheadQuery = '';
        };
        _this.renderPopupContent = function () {
            return React.cloneElement(_this.props.list, {
                onSelect: _this.handleSelect,
                selectOnEnterKey: true,
            });
        };
        return _this;
    }
    SingleSelectDropdown.prototype.render = function () {
        var _a = this.props, children = _a.children, list = _a.list, onChange = _a.onChange, value = _a.value, dropdownProps = tslib_1.__rest(_a, ["children", "list", "onChange", "value"]);
        return (React.createElement(DropdownButton_1.DropdownButton, tslib_1.__assign({ onClose: this.handleClose, onOpen: this.handleOpen, renderPopupContent: this.renderPopupContent }, dropdownProps, { "aria-haspopup": 'listbox', focusOnClose: true, onKeyDown: this.handleKeyDown, onKeyPress: this.handleKeyPress }), children || value));
    };
    return SingleSelectDropdown;
}(React.Component));
exports.SingleSelectDropdown = SingleSelectDropdown;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(1);
var React = __webpack_require__(0);
var Localize_1 = __webpack_require__(11);
var FilteringList_1 = __webpack_require__(78);
var ListItemUtils_1 = __webpack_require__(25);
/** `FilteringList` with a case-insensitive substring matching filtering function. */
var LocallyFilteringList = /** @class */ (function (_super) {
    tslib_1.__extends(LocallyFilteringList, _super);
    function LocallyFilteringList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = LocallyFilteringList.defaultStateFor(_this.props);
        _this.handleFilterChange = function (value) {
            var filteredItems = ListItemUtils_1.defaultItemFilter(_this.props.items, value);
            if (filteredItems.length === 0) {
                filteredItems.push({ value: Localize_1.Messages.noMatches(), disabled: true });
            }
            _this.setState({
                searchText: value,
                filteredItems: filteredItems,
            });
        };
        return _this;
    }
    LocallyFilteringList.defaultStateFor = function (props) {
        return {
            filteredItems: props.items,
            searchText: '',
        };
    };
    LocallyFilteringList.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.items !== this.props.items) {
            this.handleFilterChange(this.state.searchText);
        }
    };
    LocallyFilteringList.prototype.render = function () {
        return (React.createElement(FilteringList_1.FilteringList, tslib_1.__assign({}, this.props, { items: this.state.filteredItems, onFilterChange: this.handleFilterChange, searchText: this.state.searchText })));
    };
    return LocallyFilteringList;
}(React.Component));
exports.LocallyFilteringList = LocallyFilteringList;


/***/ })
/******/ ]);
});
//# sourceMappingURL=shared-widgets.js.map
// END SharedWidgets

// BEGIN Cancel
// Inlining since it's small
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("@tableau/widgets"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "@tableau/widgets"], factory);
	else if(typeof exports === 'object')
		exports["Cancel"] = factory(require("react"), require("@tableau/widgets"));
	else
		root["Cancel"] = factory(root["React"], root["SharedWidgets"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_8__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This is your main. This is where you re-export everything you want to be publicly available.
 *
 * The build enforces that the file has the same name as the global variable that is exported.
 */
var WaitingComponent_1 = __webpack_require__(1);
exports.WaitingComponent = WaitingComponent_1.WaitingComponent;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(2);
var styles = __webpack_require__(3);
var widgets_1 = __webpack_require__(8);
var Localize_1 = __webpack_require__(9);
var WaitingComponent = /** @class */ (function (_super) {
    __extends(WaitingComponent, _super);
    function WaitingComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {};
        return _this;
    }
    WaitingComponent.prototype.render = function () {
        var title = this.props.title;
        var message = this.props.message;
        var showSpinner = this.props.showSpinner === undefined ? true : this.props.showSpinner;
        var showButton = this.props.showButton === undefined ? true : this.props.showButton;
        var buttonType = this.props.buttonType === undefined ? widgets_1.ButtonType.Text : this.props.buttonType;
        var buttonLabel = this.props.buttonLabel || Localize_1.Messages.cancel();
        var labelStyleOverride = { fontSize: '24px' };
        return (React.createElement("div", { className: styles.cancelContainer },
            title ? this.renderItem(React.createElement(widgets_1.InputLabelWidget, { testId: 'title', style: labelStyleOverride }, title)) : null,
            showSpinner ? this.renderItem(React.createElement(widgets_1.ActivitySpinnerWidget, { testId: 'cancelSpinner' })) : null,
            message ? this.renderItem(React.createElement(widgets_1.InputLabelWidget, { testId: 'message' }, message)) : null,
            showButton ? this.renderItem(React.createElement(widgets_1.ButtonWidget, { handleClick: this.props.onButtonClick, testId: 'cancelButton', buttonType: buttonType, children: buttonLabel, disabled: this.props.disableButton })) : null));
    };
    WaitingComponent.prototype.renderItem = function (el) {
        return React.createElement("div", null, el);
    };
    return WaitingComponent;
}(React.PureComponent));
exports.WaitingComponent = WaitingComponent;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(4);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(6)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {
	module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!../../node_modules/stylus-loader/index.js??ref--1-2!./WaitingComponent.styl", function() {
		var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!../../node_modules/stylus-loader/index.js??ref--1-2!./WaitingComponent.styl");

		if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(5)(false);
// imports


// module
exports.push([module.i, ".WaitingComponent__cancelContainer__3MKgw {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n.WaitingComponent__cancelContainer__3MKgw > div {\n  margin: 6px 0px;\n}\n", ""]);

// exports
exports.locals = {
	"cancelContainer": "WaitingComponent__cancelContainer__3MKgw"
};

/***/ }),
/* 5 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target) {
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(7);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 7 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * This file is auto-generated. Do not modify directly.
 */
Object.defineProperty(exports, "__esModule", { value: true });
function getLocalize() {
    if (typeof Localize === 'undefined') {
        throw Error('The messages.<locale>.js file has not been loaded');
    }
    return Localize;
}
;
exports.LocaleData = { get: function () { return getLocalize().localeData; } };
var t = function (k, a) { return getLocalize().msg.formatMessage(k, a); };
exports.Messages = {
    cancel: function () { return t('@tableau__cancel/cancel'); },
};


/***/ })
/******/ ]);
});
//# sourceMappingURL=cancel.js.map
// END Cancel

// BEGIN eventutils
// As long as we inline react in spiff-ui we must also inline eventutils
// TFSID:814026
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jquery"), require("@tableau/browser-support"), require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["jquery", "@tableau/browser-support", "react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["EventUtils"] = factory(require("jquery"), require("@tableau/browser-support"), require("react"), require("react-dom"));
	else
		root["EventUtils"] = factory(root["$"], root["BrowserSupport"], root["React"], root["ReactDOM"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_34__, __WEBPACK_EXTERNAL_MODULE_35__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 11);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiscUtil = /** @class */ (function () {
    function MiscUtil() {
    }
    // tslint:disable-next-line:no-string-literal no-any whitespace
    MiscUtil.IsNullOrUndefined = function (o) {
        return (o === null || o === undefined);
    };
    /**
     * Returns a deep clone of the given object
     * @param src the object to be deep copied
     */
    MiscUtil.CloneObject = function (src) {
        var objStr = JSON.stringify(src, function (k, v) {
            /*
             * This is necessary because the runtime HUTT serializer sends over data
             * in associative containers and javascript does not have a definition for handling them.
             * This code snippet forces them to be interpreted as standard arrays for the purpose
             * of serialization.
             */
            if (v instanceof Uint32Array || v instanceof Float64Array || v instanceof Float32Array) {
                return Array.prototype.slice.call(v);
            }
            return v;
        });
        return JSON.parse(objStr);
    };
    /**
     * Safely calls Window.ClearTimeout for the provided handle, which was previously created using Window.SetTimeout.
     * Returns null so that you can clear the timeout and assign in one statement, e.g.:
     * myTimeout = MiscUtil.ClearTimeout(myTimeout);
     */
    MiscUtil.ClearTimeout = function (handle) {
        if (!MiscUtil.IsNullOrUndefined(handle)) {
            window.clearTimeout(handle);
        }
        return null;
    };
    return MiscUtil;
}());
exports.MiscUtil = MiscUtil;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-any
var defaultShim = function () {
    throw new Error('Uninitialized EventUtils module use.');
};
var BootstrapUtility = /** @class */ (function () {
    function BootstrapUtility() {
    }
    Object.defineProperty(BootstrapUtility, "IsEmbedded", {
        get: function () {
            return BootstrapUtility.isEmbedded;
        },
        set: function (v) {
            BootstrapUtility.isEmbedded = v;
        },
        enumerable: true,
        configurable: true
    });
    BootstrapUtility.isEmbedded = defaultShim;
    return BootstrapUtility;
}());
exports.BootstrapUtility = BootstrapUtility;
var FeatureFlags = /** @class */ (function () {
    function FeatureFlags() {
    }
    Object.defineProperty(FeatureFlags, "WebAuthoringDragAggregation", {
        get: function () {
            return FeatureFlags.webAuthoringDragAggregation;
        },
        set: function (v) {
            FeatureFlags.webAuthoringDragAggregation = v;
        },
        enumerable: true,
        configurable: true
    });
    FeatureFlags.webAuthoringDragAggregation = defaultShim;
    return FeatureFlags;
}());
exports.FeatureFlags = FeatureFlags;
var TsConfig = /** @class */ (function () {
    function TsConfig() {
    }
    Object.defineProperty(TsConfig, "IsMobile", {
        get: function () {
            return TsConfig.isMobile;
        },
        set: function (v) {
            TsConfig.isMobile = v;
        },
        enumerable: true,
        configurable: true
    });
    TsConfig.isMobile = defaultShim;
    return TsConfig;
}());
exports.TsConfig = TsConfig;
var FeatureParam = /** @class */ (function () {
    function FeatureParam() {
    }
    Object.defineProperty(FeatureParam, "DebugTools", {
        get: function () {
            return FeatureParam.debugTools;
        },
        set: function (v) {
            FeatureParam.debugTools = v;
        },
        enumerable: true,
        configurable: true
    });
    FeatureParam.debugTools = defaultShim;
    return FeatureParam;
}());
exports.FeatureParam = FeatureParam;
var Logger = /** @class */ (function () {
    function Logger() {
    }
    Object.defineProperty(Logger, "Debug", {
        get: function () {
            return Logger.debug;
        },
        set: function (v) {
            Logger.debug = v;
        },
        enumerable: true,
        configurable: true
    });
    Logger.debug = function (unused) {
        // by default ignore
    };
    return Logger;
}());
exports.Logger = Logger;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiscUtil_1 = __webpack_require__(0);
var TypeUtil;
(function (TypeUtil) {
    function GetField(obj, v) {
        // tslint:disable-next-line:no-any whitespace
        return obj[v];
    }
    TypeUtil.GetField = GetField;
    // tslint:disable-next-line:no-any
    function SetField(obj, v, value) {
        // tslint:disable-next-line:no-any whitespace
        obj[v] = value;
    }
    TypeUtil.SetField = SetField;
    function HasField(obj, v) {
        return !MiscUtil_1.MiscUtil.IsNullOrUndefined(GetField(obj, v));
    }
    TypeUtil.HasField = HasField;
    function HasMethod(obj, v) {
        return !MiscUtil_1.MiscUtil.IsNullOrUndefined(GetField(obj, v))
            && (typeof (GetField(obj, v)) === 'function');
    }
    TypeUtil.HasMethod = HasMethod;
})(TypeUtil || (TypeUtil = {}));
exports.TypeUtil = TypeUtil;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(12);
var browser_support_1 = __webpack_require__(4);
var EventRecognizer_1 = __webpack_require__(13);
var MiscUtil_1 = __webpack_require__(0);
var MouseEventUtil_1 = __webpack_require__(16);
var NormalizedEventBuilder_1 = __webpack_require__(31);
var SelectAction_1 = __webpack_require__(32);
var TypeUtil_1 = __webpack_require__(2);
// ------------------------------------
// Helper functions
var TouchListImpl = /** @class */ (function (_super) {
    __extends(TouchListImpl, _super);
    function TouchListImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TouchListImpl.prototype.item = function (index) {
        return this[index];
    };
    return TouchListImpl;
}(Array));
/**
* Wrapper class around touch and mouse events to normalize them for our event handling system. Generally,
* the NormalizedEvent object looks more like a TouchEvent object than a MouseEvent object. See the comments
* on the fields for the API.
*/
var NormalizedEvent = /** @class */ (function () {
    // ===========================================================================================================
    // Constructors
    // ===========================================================================================================
    /**
    * Initializes a new instance of the NormalizedEvent class
    *
    * @param {TouchEvent} evt - TouchEvent object from Browser
    * @param {HTMLElement} listeningNode - Element object of the relevant node
    * @param {React.SyntheticEvent} reactEvent - Only necessary if coming from the React world
    */
    function NormalizedEvent(evt, listeningNode, reactEvent) {
        if (reactEvent === void 0) { reactEvent = null; }
        this.originalEvent = evt;
        this.reactEvent = reactEvent;
        this.type = evt.type;
        this.timeStamp = evt.timeStamp;
        this.keyCode = TypeUtil_1.TypeUtil.GetField(evt, 'keyCode');
        this.ctrlKey = evt.ctrlKey;
        this.altKey = evt.altKey;
        this.metaKey = evt.metaKey;
        this.shiftKey = evt.shiftKey;
        this.clientX = TypeUtil_1.TypeUtil.GetField(evt, 'clientX');
        this.clientY = TypeUtil_1.TypeUtil.GetField(evt, 'clientY');
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(evt.touches)) {
            // we're in a touch environment
            // $NOTE-myork-2011-04-25: Hello person from the future. This doesn't normalize for Android vs iOS differences.
            // The TouchObjects in the touches, targetTouches arrays are different ontouchend. I don't know the exact details
            // - those are for whoever has to implement Android support.
            this.touches = evt.touches;
            this.targetTouches = evt.targetTouches;
            this.changedTouches = evt.changedTouches;
            // Both iOS and Android browsers make the target of an event the textNode, not the Element. W3 decided that
            // this is dumb (on 3/25/2011), and we think it is too. Targets should be elements, not text nodes
            var target = evt.target;
            this.target = target.nodeType === 3 /*XmlNodeType.Text*/ ? target.parentNode : target;
            // touch objects don't provide the currentTarget that the event listener is attached to
            this.currentTarget = listeningNode;
        }
        else {
            // we're in a mouse environment
            // touches and targetTouches should be empty onmouseup
            // tslint:disable:whitespace
            var tmpArray = new TouchListImpl();
            tmpArray[0] = evt; // wow this is still shady
            this.targetTouches = (evt.type === "mouseup" /* MouseUp */) ? new TouchListImpl() : tmpArray;
            this.touches = this.targetTouches;
            this.changedTouches = new TouchListImpl();
            this.changedTouches[0] = evt;
            this.currentTarget = evt.currentTarget;
            this.target = evt.target;
            // tslint:enable:whitespace
        }
        // build associative array so we can grab touches by their unique identifier.
        var i = this.touches.length;
        this.touchesById = new Array(i);
        while (i > 0) {
            i -= 1;
            // tslint:disable-next-line:strict-boolean-expressions
            var index = this.touches[i].identifier || NormalizedEvent.MouseIdentifier;
            this.touchesById[index] = this.touches[i];
        }
        i = this.changedTouches.length;
        while (i > 0) {
            i -= 1;
            // tslint:disable-next-line:strict-boolean-expressions
            var index = this.changedTouches[i].identifier || NormalizedEvent.MouseIdentifier;
            this.touchesById[index] = this.changedTouches[i];
        }
    }
    Object.defineProperty(NormalizedEvent.prototype, "IsMouseEvent", {
        // ===========================================================================================================
        // Properties
        // ===========================================================================================================
        get: function () {
            return this.source === 1 /* Mouse */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsTouchEvent", {
        get: function () {
            return this.source === 2 /* Touch */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsStartEvent", {
        get: function () {
            return this.inputType === 0 /* Start */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsMoveEvent", {
        get: function () {
            return this.inputType === 1 /* Move */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsOutEvent", {
        get: function () {
            return this.inputType === 3 /* Out */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsEndEvent", {
        get: function () {
            return this.inputType === 2 /* End */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsScrollEvent", {
        get: function () {
            return this.inputType === 4 /* Scroll */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsRightClickEvent", {
        get: function () {
            return (this.type === "contextmenu" /* ContextMenu */ && this.source === 1 /* Mouse */);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsLeftMouseEvent", {
        get: function () {
            if (this.IsMouseEvent) {
                var mouseBtn = this.RetrieveMouseButton();
                if (mouseBtn === "left" /* Left */) {
                    // on mac, left button + ctrl key = contextmenu event so should actually be treated as a right-click
                    if (browser_support_1.BrowserSupport.IsMac() && this.ctrlKey) {
                        return false;
                    }
                    return true;
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsRightMouseEvent", {
        get: function () {
            if (this.IsMouseEvent) {
                var mouseBtn = this.RetrieveMouseButton();
                if (mouseBtn === "right" /* Right */) {
                    return true;
                }
                else {
                    if (mouseBtn === "left" /* Left */ && browser_support_1.BrowserSupport.IsMac() && this.altKey) {
                        // on mac, left button + option key = should be treated as a right-drag
                        return true;
                    }
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "IsCtrlKey", {
        /**
        * @returns {boolean} true if the Ctrl key is pressed on Windows, or the meta(command) key is pressed on Mac.
        */
        get: function () {
            return browser_support_1.BrowserSupport.IsMac() ? this.metaKey : this.ctrlKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalizedEvent.prototype, "GestureInfo", {
        /**
        * Gets the gesture event info for this event.
        */
        get: function () {
            // Gesture event info gets "mixed in" using jQuery.Extend.
            return this;
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Returns whether or not all touches in the event object share a currentTarget.
    * Only pays attention to the first two touches in the touches array.
    * Preconditions:
    *   - more than 1 touch in e.touches in array
    *   - one touch  must be a child of the target (implicitly true
    *     by being inside of the EventHandler - one of the touches must be a child of
    *     the currentTarget, otherwise we would never have received a touch event object).
    *
    * We need to let Safari do its default viewport zoom for a pinch where the targets
    * are different. Unfortunately, we have no way to get the currentTarget of touch objects.
    * It's just not provided. So we do the dirty work here.
    */
    NormalizedEvent.prototype.AllTouchesShareCurrentTarget = function () {
        var node1 = this.touches[0].target; // a Touch Object's target behaves like currentTarget for a mouse event
        var node2 = this.touches[1].target;
        // Touch Target is of type EventTarget and it could be either Element(XmlElement in Salterelle), Document or Window.
        // If any one of the touch target is
        // not of the type Element, then we can safely determine that touches don't share target.
        if (!(node1 instanceof Element) || !(node2 instanceof Element)) {
            return false;
        }
        var body = document.body;
        var currentTarget = this.currentTarget;
        var done = false;
        // walk up the tree until each element reaches the target or the body.
        while (!done && !MiscUtil_1.MiscUtil.IsNullOrUndefined(node1) && !MiscUtil_1.MiscUtil.IsNullOrUndefined(node2)) {
            done = true;
            if (node1 !== currentTarget && node1 !== body && node1 instanceof Element) {
                node1 = node1.parentNode;
                done = false;
            }
            if (node2 !== currentTarget && node2 !== body && node2 instanceof Element) {
                node2 = node2.parentNode;
                done = false;
            }
            // If both nodes converge while traversing, then they must share the same currentTarget,
            // so break now for efficiency's sake (this loop would still work without this check)
            if (node1 === node2) {
                done = true;
            }
        }
        return node1 === node2;
    };
    Object.defineProperty(NormalizedEvent, "AllHandledEvents", {
        get: function () {
            return _.map(NormalizedEventBuilder_1.NormalizedEventBuilder.HandledEvents, function (item, key) { return key; });
        },
        enumerable: true,
        configurable: true
    });
    // ===========================================================================================================
    // Methods
    // ===========================================================================================================
    NormalizedEvent.Create = function (evt, listeningNode, reactEvent) {
        if (reactEvent === void 0) { reactEvent = null; }
        return NormalizedEventBuilder_1.NormalizedEventBuilder.CreateNormalizedEvent(evt, listeningNode, reactEvent);
    };
    NormalizedEvent.prototype.RetrieveMouseButton = function () {
        // For mouse move events, we can't check the event for the move event
        // so we will rely on the last button clicked.
        //
        // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
        return this.IsMoveEvent ? EventRecognizer_1.EventRecognizer.CurrentGlobalMouseButton : MouseEventUtil_1.MouseEventUtil.GetMouseButtonEnum(this.originalEvent);
    };
    /**
    * Determines what the selection mode is for a text area or a text box
    * based on the state of the keyboard keys.
    */
    NormalizedEvent.prototype.GetSelectAction = function () {
        var action = SelectAction_1.SelectAction.Simple;
        var toggle = this.IsCtrlKey;
        if (this.shiftKey) {
            action = SelectAction_1.SelectAction.Range;
        }
        if (toggle) {
            action = SelectAction_1.SelectAction.Toggle;
        }
        return action;
    };
    NormalizedEvent.prototype.preventDefault = function () {
        if (TypeUtil_1.TypeUtil.HasMethod(this.originalEvent, 'preventDefault')) {
            this.originalEvent.preventDefault();
        }
    };
    NormalizedEvent.prototype.stopPropagation = function () {
        if (TypeUtil_1.TypeUtil.HasMethod(this.originalEvent, 'stopPropagation')) {
            this.originalEvent.stopPropagation();
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.reactEvent)) {
            this.reactEvent.stopPropagation();
        }
    };
    // redirection for saltarelle generated javascript getters
    NormalizedEvent.prototype.get_IsRightMouseEvent = function () { return this.IsRightMouseEvent; };
    NormalizedEvent.prototype.get_GestureInfo = function () { return this.GestureInfo; };
    NormalizedEvent.prototype.get_IsMouseEvent = function () { return this.IsMouseEvent; };
    NormalizedEvent.prototype.get_IsTouchEvent = function () { return this.IsTouchEvent; };
    NormalizedEvent.prototype.get_IsStartEvent = function () { return this.IsStartEvent; };
    NormalizedEvent.prototype.get_IsMoveEvent = function () { return this.IsMoveEvent; };
    NormalizedEvent.prototype.get_IsOutEvent = function () { return this.IsOutEvent; };
    NormalizedEvent.prototype.get_IsEndEvent = function () { return this.IsEndEvent; };
    NormalizedEvent.prototype.get_IsScrollEvent = function () { return this.IsScrollEvent; };
    NormalizedEvent.prototype.get_IsRightClickEvent = function () { return this.IsRightClickEvent; };
    NormalizedEvent.prototype.get_IsLeftMouseEvent = function () { return this.IsLeftMouseEvent; };
    NormalizedEvent.prototype.get_IsCtrlKey = function () { return this.IsCtrlKey; };
    NormalizedEvent.MouseIdentifier = 0; // touches have unique identifier codes. Use this for a mouse event disguised as a touch
    return NormalizedEvent;
}());
exports.NormalizedEvent = NormalizedEvent;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(3);
var EventHandleSpec_1 = __webpack_require__(7);
var MiscUtil_1 = __webpack_require__(0);
var TableauEventHandler_1 = __webpack_require__(8);
var ZoomScaleUtil_1 = __webpack_require__(17);
/**
* Base class of gestures object
*/
var Gesture = /** @class */ (function () {
    /**
    * Initializes a new instance of the Gesture class
    *
    * @param {GestureEventHandleSpec} config - GestureEventHandleSpec object
    * @param {GestureType} type - name of the gesture
    * @param {boolean} hasSlop - Whether the gesture should tolerate some slow
    *  (such as touch and drag events) or if it should require exact behavior (such as hover)
    * @param {number} numTouches- # of touches
    */
    function Gesture(config, type, hasSlop, numTouches) {
        this.slop = 5;
        this.numTouches = 1;
        this.type = "gesture" /* Base */;
        // Note:
        // doubleTapTimer, potentialPressTimer, pressTimer get created/deleted as needed
        this.isPotentialPress = false;
        this.isActivePress = false;
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(type)) {
            this.type = type;
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(hasSlop)) {
            this.slop = hasSlop ? Gesture.DefaultSlop : 0;
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(numTouches)) {
            this.numTouches = numTouches;
        }
        this.Config = new EventHandleSpec_1.EventHandleSpec();
        this.Update(config);
    }
    Object.defineProperty(Gesture.prototype, "DataAttributeName", {
        get: function () {
            return Gesture.DataAttributePrefix + this.type.toString();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Gesture.prototype, "ZoomAdjustedSlop", {
        get: function () {
            var zoomScale = ZoomScaleUtil_1.ZoomScaleUtil.GetScaleSync();
            return Math.round(this.slop / zoomScale);
        },
        enumerable: true,
        configurable: true
    });
    Gesture.prototype.Update = function (config) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(config)) {
            $.extend(this.Config, config);
            $(this.Config.DomElement).data(this.DataAttributeName, this);
        }
    };
    Gesture.prototype.Fire = function (callbackName, evt, param) {
        if (this.Config.IsHandling(callbackName)) {
            var pseudoEvent = evt;
            $.extend(pseudoEvent, param);
            pseudoEvent.gestureName = this.type.toString();
            pseudoEvent.callbackName = callbackName;
            var callback = TableauEventHandler_1.TableauEventHandler.GetHandler(this.Config, callbackName);
            callback(pseudoEvent);
        }
    };
    Gesture.prototype.dispose = function () {
        this.Cancel();
        $(this.Config.DomElement).removeData(this.DataAttributeName);
    };
    Gesture.FromHtml = function (domElement, type) {
        return $(domElement).data(Gesture.DataAttributePrefix + type.toString());
    };
    // The default minimum threshold, in pixels, for a gesture to move before no longer being considered a tap/press gesture.
    Gesture.DefaultSlop = 5;
    // The max time, in ms, allowed between two taps in order to recognize a double tap.
    Gesture.DoubleTapTime = 390;
    // The total time, in ms, for a PotentialPress event to be fired when holding a press down. The PotentialPress event is
    // signaled on our way to Press to allow "pre-press" animations.
    Gesture.PotentialPressTime = 500;
    // The total time, in ms, for a Press event to be fired when holding a press down.
    Gesture.PressTime = 750;
    Gesture.DataAttributePrefix = 'tab-';
    return Gesture;
}());
exports.Gesture = Gesture;
var GestureEventInfo = /** @class */ (function () {
    function GestureEventInfo() {
    }
    return GestureEventInfo;
}());
exports.GestureEventInfo = GestureEventInfo;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiscUtil_1 = __webpack_require__(0);
var TypeUtil_1 = __webpack_require__(2);
// ====================================================================================================================
//
// ****** Comprehensive Documentation for Event Handling System *******
//
// Create a new EventHandler to give a dom node gestures. The client should keep the handler and call it's
// Create a new EventHandler to give a dom node gestures. The client should keep the handler and call its
// destroy() method when done with it. You can construct with only the callbacks you need -- you don't need to specify
// all of them. To preventDefault, you must call e.preventDefault() in the object returned to you in the callback.
// Propagation is stopped for you. Always. Always and forever.
//
// The event object passed to the callback should be treated like a real event object, though it isn't actually one.
// If there is any event property you need that the pseudo-event object does not have, please add it yourself
// in Gesture.js::fire. All event objects have {timestamp:number, gesture: string, callback: string}
// properties. Additional properties vary based on gesture type - see below.
//
// Copy and paste usage of EventHandler:
// var eventHandler = new tableau.base.EventHandler(domElement, {
//
//        // DISCRETE: e = touch event object augmented with pageX, pageY
//        'firstTouch':           function (e) {},
//        'lastTouch':            function (e) {},
//        'cancelPotentialDoubleTap:    function (e) {}, // fired when doubleTap is not fired after the first Tap.
//        'tap':                  function (e) {},
//        'doubleTap':            function (e) {},
//        'potentialPress':       function (e) {},
//        'cancelPotentialPress': function (e) {}, // fired when potentialPress is fired but press is not fired
//        'press':                function (e) {},
//        'tapAndHalf':           function (e) {},  //NOT YET IMPLEMENTED Probably use same callback as press
//
//        // SINGLE FINGER CONTINUOUS: e with {pageX, pageY, deltaX, deltaY (change in position from beginning
//        // of gesture), deltaXSinceLast, deltaYSinceLast (change since last callback)}
//        'dragStart':            function (e) {},
//        'dragMove':             function (e) {},
//        'dragEnd':              function (e) {},
//        'pressDragStart':       function (e) {},
//        'pressDragMove':        function (e) {},
//        'pressDragEnd':         function (e) {},
//
//        // TWO FINGER CONTINUOUS: e with {pageX, pageY, scale, deltaX, deltaY (change in center point between the
//        // two fingers since beginning of gesture), deltaXSinceLast, deltaYSinceLast (change in center point
//        // between the two fingers since last callback)},
//        'pinchStart':           function (e) {},
//        'pinchMove':            function (e) {},
//        'pinchEnd':             function (e) {},
//        'doublePressDragStart': function (e) {},
//        'doublePressDragMove':  function (e) {},
//        'doublePressDragEnd':   function (e) {},
//
//        // HYBRID MUTANT SAVAGES: Gets touch object of tap finger.
//        'HoldTapStart':         function (e) {},  //NOT YET IMPLEMENTED
//        'HoldTapTap':           function (e) {},  //NOT YET IMPLEMENTED
//        'HoldTapEnd':           function (e) {},  //NOT YET IMPLEMENTED
//
//        // CONFIGURATION OPTIONS
//        'debug':    true, // defaults false. Will leave feedback in a box on bottom right whenever event is fired
// });
// eventHandler.destroy(); //call before destroying your domElement.
//
//
// *********** Global Events **************
//
// There are global events fired just prior to Discrete's handling of certain events. This gives you a chance to do something
// prior to the event being handled, and also allows you to cancel the event. This allows things like tooltips, dialogs,
// type-in pill, etc. watch for and react to events external to themselves.
//
// Each of the events allows you to setup a handler where params are the NormalizedEvent and a callback.  If you invoke the
// the callback, the default Discrete behavior for the event will be canceled.  If you pass true to the callback, preventDefault
// will also be called on the event object.
//
// To handle to these global events:
//
//  public void Init() {
//      GlobalUIEvents.Press += this.OnGlobalPress;
//  }
//  public void Destroy() {
//      GlobalUIEvents.Press -= this.OnGlobalPress;
//  }
//  private void OnGlobalPress(NormalizedEvent e, Action<bool> cancelCallback)
//  {
//      if (!DomUtil.IsAncestorOf(this.domNode, e.target)) {
//          this.HideOrDoOtherStuff();
//          cancelCallback(true);
//      }
//  }
//
// <see cref="GlobalUIEvents"/>
// ====================================================================================================================
// TODO:
// - Potential bug: If both fingers hit perfectly simulataneously on two different dom elements,
//                  no firstTouch is fired. This shouldn't be a problem.
// - Improve: Dynamically add move and end event listeners for touch.
// - Improve: Pinch simulation in desktop. Shift click simulates center point? Implement in NormalizedEvent?
// - Right now we run all gestures no matter what the client cares about, but the event only gets fired if a
//   callback exists.
/** Config for the <see cref="TableauEventHandler"/>*/
/// <remarks>Ideally we'd derive from <see cref="Record"/> but currently we cannot since that will initialize
/// all fields to null.  This causes issues since we use <see cref="jQuery.Extend(object,object[])"/> to merge
/// instances of configs.  And even though the jQuery docs say otherwise null properties are copied over,
/// which causes issues for us.</remarks>
var EventHandleSpec = /** @class */ (function () {
    function EventHandleSpec() {
        // DISCRETE: e = touch event object augmented with pageX, pageY
        this.firstTouch = undefined;
        // this is just the touchMove event, and not mouse move or (mousedown + move) on web
        this.touchMove = undefined;
        this.lastTouch = undefined;
        // fired when doubleTap is not fired after the first Tap.
        this.cancelPotentialDoubleTap = undefined;
        this.tap = undefined;
        this.doubleTap = undefined;
        this.potentialPress = undefined;
        // fired when potentialPress is fired but press is not fired
        this.cancelPotentialPress = undefined;
        this.press = undefined;
        this.pressEnd = undefined;
        this.rightClick = undefined;
        // NOT YET IMPLEMENTED Probably use same callback as press
        this.tapAndHalf = undefined;
        // HOVER
        this.hover = undefined;
        // SINGLE FINGER CONTINUOUS: e with {pageX, pageY, deltaX, deltaY (change in position from beginning
        // of gesture), deltaXSinceLast, deltaYSinceLast (change since last callback)}
        this.dragStart = undefined;
        this.dragMove = undefined;
        this.dragEnd = undefined;
        this.pressDragStart = undefined;
        this.pressDragMove = undefined;
        this.pressDragEnd = undefined;
        // TWO FINGER CONTINUOUS: e with {pageX, pageY, scale, deltaX, deltaY (change in center point between the
        // two fingers since beginning of gesture), deltaXSinceLast, deltaYSinceLast (change in center point
        // between the two fingers since last callback)},
        this.pinchStart = undefined;
        this.pinchMove = undefined;
        this.pinchEnd = undefined;
        this.doublePressDragStart = undefined;
        this.doublePressDragMove = undefined;
        this.doublePressDragEnd = undefined;
        // HYBRID MUTANT SAVAGES: Gets touch object of tap finger.
        this.holdTapStart = undefined; // NOT YET IMPLEMENTED
        this.holdTapTap = undefined; // NOT YET IMPLEMENTED
        this.holdTapEnd = undefined; // NOT YET IMPLEMENTED
        this.domElem = undefined;
    }
    Object.defineProperty(EventHandleSpec.prototype, "DomElement", {
        get: function () {
            return this.domElem;
        },
        set: function (dom) {
            this.domElem = dom;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EventHandleSpec.prototype, "HoverDelay", {
        get: function () {
            return this.hoverDelay;
        },
        set: function (delay) {
            this.hoverDelay = delay;
        },
        enumerable: true,
        configurable: true
    });
    // Extension methods
    EventHandleSpec.prototype.IsHandling = function (evt) {
        var dict = this;
        var result = TypeUtil_1.TypeUtil.GetField(dict, evt);
        return !MiscUtil_1.MiscUtil.IsNullOrUndefined(result);
    };
    EventHandleSpec.prototype.IsUsingHover = function () {
        return this.IsHandling("hover" /* Hover */) ||
            this.IsHandling("moving" /* Moving */);
    };
    /**
    * Returns true if any pressDrag related callbacks are set
    */
    EventHandleSpec.prototype.UsingPressDrag = function () {
        return this.IsHandling("pressDragStart" /* PressDragStart */) ||
            this.IsHandling("pressDragMove" /* PressDragMove */) ||
            this.IsHandling("pressDragEnd" /* PressDragEnd */) ||
            this.IsHandling("doublePressDragStart" /* DoublePressDragStart */) ||
            this.IsHandling("doublePressDragMove" /* DoublePressDragMove */) ||
            this.IsHandling("doublePressDragEnd" /* DoublePressDragEnd */);
    };
    EventHandleSpec.prototype.SetHandler = function (evt, fn) {
        TypeUtil_1.TypeUtil.SetField(this, evt, fn);
    };
    EventHandleSpec.prototype.RemoveHandler = function (evt) {
        TypeUtil_1.TypeUtil.SetField(this, evt, null);
    };
    return EventHandleSpec;
}());
exports.EventHandleSpec = EventHandleSpec;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browser_support_1 = __webpack_require__(4);
var Delegate_1 = __webpack_require__(9);
var DomSubscriptionHandle_1 = __webpack_require__(27);
var DomUtil_1 = __webpack_require__(14);
var EventHandleSpec_1 = __webpack_require__(7);
var EventRecognizer_1 = __webpack_require__(13);
var VizclientUtils_1 = __webpack_require__(1);
var MiscUtil_1 = __webpack_require__(0);
var NormalizedEvent_1 = __webpack_require__(5);
var TypeUtil_1 = __webpack_require__(2);
/**
* This class listens to all the mouse and touch events on a specific DOM element.
* It processes(with help of other classes) these events and manage invoking callbacks
* specified in EventHandlerSpec object it is initialized with.
*/
var TableauEventHandler = /** @class */ (function () {
    /**
    * Initializes a new instance of the TableauEventHandler class
    * Takes domElement and an object with callbacks - see documentation in EventHandlerSpec.cs
    * @param {HTMLElement} domElement - Element object
    * @param {EventHandleSpec} config - GestureEventHandleSpec object
    */
    function TableauEventHandler(domElement, config) {
        if (domElement === void 0) { domElement = null; }
        if (config === void 0) { config = null; }
        this.subscriptionHandle = null;
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(domElement) || MiscUtil_1.MiscUtil.IsNullOrUndefined(EventHandleSpec_1.EventHandleSpec)) {
            return;
        }
        // tslint:disable-next-line:strict-boolean-expressions
        this.config = config || new EventHandleSpec_1.EventHandleSpec();
        this.config.DomElement = domElement;
        this.ConfigureDomElem(domElement);
        this.SetupEventRecognizer(this.config);
        this.MakeConnections(domElement);
        // #if DEBUG
        TableauEventHandler.RaiseTableauEventHandlerCreated(this);
        // #endif
    }
    Object.defineProperty(TableauEventHandler.prototype, "DomElement", {
        get: function () {
            return this.config.DomElement;
        },
        enumerable: true,
        configurable: true
    });
    TableauEventHandler.prototype.SetupEventRecognizer = function (spec) {
        this.eventRecognizer = new EventRecognizer_1.EventRecognizer(spec);
        // If we have a press Drag, set up the callback modifications
        this.eventRecognizer.SetupPressDrag(spec);
    };
    TableauEventHandler.prototype.suppressHover = function () {
        if (this.config.IsUsingHover()) {
            this.eventRecognizer.suppressHover();
        }
    };
    TableauEventHandler.prototype.unsuppressHover = function () {
        if (this.config.IsUsingHover()) {
            this.eventRecognizer.unsuppressHover();
        }
    };
    TableauEventHandler.prototype.CancelHover = function () {
        if (this.config.IsUsingHover()) {
            this.eventRecognizer.CancelHover();
        }
    };
    TableauEventHandler.prototype.GetHandledEvents = function () {
        var handledEvents = new Array();
        var configMembers = this.config;
        for (var _i = 0, _a = Object.keys(configMembers); _i < _a.length; _i++) {
            var key = _a[_i];
            var curVal = TypeUtil_1.TypeUtil.GetField(configMembers, key);
            // TODO: - the original check is more stringent -- should we copy that?
            // configMembers[key].GetType() == typeof(Action<NormalizedEvent>))
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(curVal) && (typeof curVal === 'function')) {
                handledEvents.push(key);
            }
        }
        return handledEvents;
    };
    TableauEventHandler.prototype.Update = function (spec) {
        $.extend(this.config, spec);
        this.eventRecognizer.UpdateAllGestures(this.config);
        this.eventRecognizer.SetupPressDrag(this.config);
    };
    /**
     * Same as dispose. This only exists to make old javascript code happy :)
     */
    TableauEventHandler.prototype.destroy = function () {
        this.dispose();
    };
    // kill the listeners
    TableauEventHandler.prototype.dispose = function () {
        // #if DEBUG
        TableauEventHandler.RaiseTableauEventHandlerToBeDisposed(this);
        // #endif
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.subscriptionHandle)
            && !MiscUtil_1.MiscUtil.IsNullOrUndefined(this.subscriptionHandle.DomElement)
            && !MiscUtil_1.MiscUtil.IsNullOrUndefined(this.subscriptionHandle.EventHandler)) {
            for (var _i = 0, _a = NormalizedEvent_1.NormalizedEvent.AllHandledEvents; _i < _a.length; _i++) {
                var handledEvent = _a[_i];
                this.subscriptionHandle.DomElement.removeEventListener(handledEvent.toString(), this.subscriptionHandle.EventHandler);
            }
        }
        this.eventRecognizer.dispose();
    };
    TableauEventHandler.GetHandler = function (spec, evt) {
        return TypeUtil_1.TypeUtil.GetField(spec, evt);
    };
    TableauEventHandler.prototype.ConfigureDomElem = function (domElem) {
        // Add css for mobile to suppress various mobile feedback.  This originated with CL 119825.
        // TFS583075
        // If the dom element is an input, or defines user-select or -webkit-user-select then don't set it to none.
        // When setting it to none on text inputs it causes users to be unable to enter text on browsers using webkit.
        var userStyle = TypeUtil_1.TypeUtil.GetField(domElem.style, 'user-select');
        var webkitUserStyle = TypeUtil_1.TypeUtil.GetField(domElem.style, '-webkit-user-select');
        if (domElem.tagName.toLowerCase() !== 'input' &&
            (MiscUtil_1.MiscUtil.IsNullOrUndefined(userStyle) || userStyle === '') &&
            (MiscUtil_1.MiscUtil.IsNullOrUndefined(webkitUserStyle) || webkitUserStyle === '')) {
            TypeUtil_1.TypeUtil.SetField(domElem.style, '-webkit-user-select', 'none');
        }
        TypeUtil_1.TypeUtil.SetField(domElem.style, '-webkit-touch-callout', 'none');
        TypeUtil_1.TypeUtil.SetField(domElem.style, '-webkit-tap-highlight-color', 'transparent');
        // Add css to suppress default browser pan actions.  BUGZID 60153
        // NOTE-mroginski-2014-03-21: touch-action currently only works for IE10 and IE11, no way to suppress default
        // browser action on chrome yet.
        // NOTE-jrockwood-2014-12-09: BUGZID: 138891 - If we use touch-action: none it will disable scrolling and
        // panning and zooming. This is what we wanted since it can interfere with multi-select and can sometimes
        // behave in a quirky way. However, customers would rather have the pan/zoom and scrolling. We really need to
        // rework the way we handle touch in the browser, but that's a big work item and we can't do it now. Note that
        // IE behaves differently than the other browsers (are you surprised :) and we actually do need to have
        // touch-action set to none, but only for IE. As such, we're using the MS-specific CSS attribute. It's supported
        // in IE 10 and still works in IE 11, but it has been deprecated and may be removed in IE 12.
        TypeUtil_1.TypeUtil.SetField(domElem.style, '-ms-touch-action', 'none');
        // domElem.Style["touch-action"] = "none";                        // disable browser default actions in ie11 and forward
    };
    TableauEventHandler.prototype.MultiTouchWithDifferentTargetElement = function (e) {
        if (e.touches.length > 1 && !e.AllTouchesShareCurrentTarget()) {
            this.eventRecognizer.CancelAllGestures();
            return true;
        }
        return false;
    };
    // single entry point for all events. Preserve method name for testing.
    // [PreserveName]
    TableauEventHandler.prototype.handler = function (e) {
        // Browser touch events generate mouse events. For example, touchstart generates mousedown,
        // touchend generates mouseup, and touchmove generates mousemove. In web, to support hybrid
        // devices, we handle touch and mouse events, ignoring duplicate mouse events via preventDefault
        // when we receive a touch event.ing PreventDefault().  Note that we also need to prevent
        // certain browser default events such as page forward/back because the cause gestures like
        // drag to not work. However, on web, if input event is a touch event and target is a dojo widget,
        // we must use mouse events to  control the widget because our dojo widgets don't support touch.
        // Also, if target is a checkbox we need to use mouse events.  HandleTouchEvents() returns true if
        // we should continue handling the event as a touch event (only).  In that case we call
        // PreventDefault() to suppress the secondary mouse events.  If HandleTouchEvents() returns false
        // we simply return and then the secondary mouse events will fire and we'll end up handling those.
        // doc for details.
        // In mobile the situation is different.  In mobile we actually want our default browser events
        // (in particular pinch-zoom and scroll) and we don't have duplicate mouse handlers that are listening
        // for events.  So we don't do any of the above special web behavior on touch.  Note that if we do
        // do a preventDefault on mobile, we end up with pinch-zoom not working (BUGZID 98846).
        var touchEventOnNonMobileConfig = !VizclientUtils_1.TsConfig.IsMobile() && e.IsTouchEvent;
        var domObjectHandleTouchEvent = DomUtil_1.DomUtil.HandleTouchEvents(e.target);
        if (touchEventOnNonMobileConfig && !domObjectHandleTouchEvent) {
            return;
        }
        else if (touchEventOnNonMobileConfig && domObjectHandleTouchEvent) {
            if ('preventDefault' in e.originalEvent) {
                // if it's a touch event and we are handling it as touch only, preventDefault (to prevent mouse events) then fall
                // into code below, which will handle the actual touch event.
                e.originalEvent.preventDefault();
            }
        }
        if (this.MultiTouchWithDifferentTargetElement(e)) {
            return;
        }
        this.eventRecognizer.HandleEvent(e);
    };
    TableauEventHandler.prototype.MakeConnections = function (domElem) {
        var _this = this;
        var handler = function (e) {
            var normalizedEvent = NormalizedEvent_1.NormalizedEvent.Create(e, _this.config.DomElement);
            _this.handler(normalizedEvent);
        };
        this.subscriptionHandle = new DomSubscriptionHandle_1.DomSubscriptionHandle(domElem, handler);
        for (var _i = 0, _a = NormalizedEvent_1.NormalizedEvent.AllHandledEvents; _i < _a.length; _i++) {
            var handledEvent = _a[_i];
            // IE11 currently does not support passive listeners: https://caniuse.com/#search=Passive%20event%20listeners
            if (browser_support_1.BrowserSupport.IsIE()) {
                domElem.addEventListener(handledEvent.toString(), handler, false);
            }
            else {
                domElem.addEventListener(handledEvent.toString(), handler, {
                    capture: false,
                    passive: false
                });
            }
        }
    };
    TableauEventHandler.add_TableauEventHandlerCreated = function (ev) {
        TableauEventHandler.TableauEventHandlerCreated.add(ev);
    };
    TableauEventHandler.remove_TableauEventHandlerCreated = function (ev) {
        TableauEventHandler.TableauEventHandlerCreated.remove(ev);
    };
    TableauEventHandler.add_TableauEventHandlerToBeDisposed = function (ev) {
        TableauEventHandler.TableauEventHandlerToBeDisposed.add(ev);
    };
    TableauEventHandler.remove_TableauEventHandlerToBeDisposed = function (ev) {
        TableauEventHandler.TableauEventHandlerToBeDisposed.remove(ev);
    };
    TableauEventHandler.RaiseTableauEventHandlerCreated = function (handler) {
        if (VizclientUtils_1.FeatureParam.DebugTools() && TableauEventHandler.TableauEventHandlerCreated !== null) {
            TableauEventHandler.TableauEventHandlerCreated.invoke(handler);
        }
    };
    TableauEventHandler.RaiseTableauEventHandlerToBeDisposed = function (handler) {
        if (VizclientUtils_1.FeatureParam.DebugTools() && TableauEventHandler.TableauEventHandlerToBeDisposed !== null) {
            TableauEventHandler.TableauEventHandlerToBeDisposed.invoke(handler);
        }
    };
    TableauEventHandler.TableauEventHandlerCreated = new Delegate_1.Delegate();
    TableauEventHandler.TableauEventHandlerToBeDisposed = new Delegate_1.Delegate();
    return TableauEventHandler;
}());
exports.TableauEventHandler = TableauEventHandler;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(12);
var VizclientUtils_1 = __webpack_require__(1);
var MiscUtil_1 = __webpack_require__(0);
var Delegate = /** @class */ (function () {
    function Delegate() {
        this.delegate = [];
    }
    Delegate.prototype.invoke = function (arg1, arg2) {
        if (arg1 === void 0) { arg1 = undefined; }
        if (arg2 === void 0) { arg2 = undefined; }
        // Clone the delegates before calling them.
        // Delegates might remove themselves from the listener.
        var e = this.delegate.slice();
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(e)) {
            VizclientUtils_1.Logger.Debug('delegate type not supported');
            return;
        }
        e.forEach(function (callee) {
            callee(arg1, arg2);
        });
    };
    Delegate.prototype.add = function (callee) {
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(callee)) {
            VizclientUtils_1.Logger.Debug('delegate to add is not initialized (null)');
            return;
        }
        this.delegate.push(callee);
    };
    Delegate.prototype.remove = function (callee) {
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(callee)) {
            VizclientUtils_1.Logger.Debug('delegate to remove is not initialized (null)');
            return;
        }
        var index = this.find(callee);
        if (index >= 0) {
            this.delegate.splice(index, 1);
        }
        else {
            VizclientUtils_1.Logger.Debug('delegate to remove is not found');
        }
    };
    Delegate.prototype.find = function (callee) {
        var index = this.delegate.indexOf(callee);
        if (index < 0) {
            // Handle saltarelle generated delegates.
            // Saltarelle creates a delegates as a new object with
            // _target[0] = src and _target[1] = delegate function
            var o_1 = callee;
            if (o_1._targets !== undefined && o_1._targets.length === 2) {
                index = _.findIndex(this.delegate, function (saldel) {
                    return (saldel._targets !== undefined
                        && saldel._targets.length === 2
                        && saldel._targets[0] === o_1._targets[0]
                        && saldel._targets[1] === o_1._targets[1]);
                });
            }
        }
        return index;
    };
    return Delegate;
}());
exports.Delegate = Delegate;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiscUtil_1 = __webpack_require__(0);
// Same interface as CustomCursor.cs, but uses icons embedded inside the module
var EmbeddedCustomCursor = /** @class */ (function () {
    function EmbeddedCustomCursor(assetURL, fallback) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(assetURL)) {
            this.cssString = "url(" + assetURL + "), " + fallback;
        }
        else {
            this.cssString = fallback;
        }
    }
    Object.defineProperty(EmbeddedCustomCursor, "noOp", {
        get: function () {
            // tslint:disable-next-line:max-line-length no-bitwise
            return this.NoOp === undefined ? this.NoOp = new EmbeddedCustomCursor('data:text/plain;base64,AAACAAEAICAAAAQABACoEAAAFgAAACgAAAAgwAAAGb/////AAAAZv////8AAABm/////wAAAGb/////AAAAZv////8AAABm/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABm/////wAAAGb/////AAAAZv////8AAABm/////wAAAGb/////AAAAZv////8AAABmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAABmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZv////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZv////8AAAAAAAAAAP///wEAAAAAAAAAAAAAAAAAAAAAAAAAAAUFBSdVVVX/DQ0N/A0NDfojIyPFBQUFJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAZgAAAAD///8Z//////////////9l////GgAAAAAFBQUoEhIS9pOTk//t7e3/7u7u/7+/v/8CAgL/BQUFKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGb/////AAAAAP///1T/////T09P////////////AAAAACMjI8WSkpL////////////U1NT/AQEB/7+/v/8jIyPFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAGb///8Z/////3R0dP8AAAD/CgoK//////8AAAAADQ0N+e3t7f//////1NTU/wEBAf/U1NT/7e3t/wwMDPoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8G////AQAAAAAAAABm/////4mJiZf/////CQkJ/wAAAP98fHz//////wAAAGYTExP/7e3t/9TU1P8BAQH/1NTU///////t7e3/DAwM+gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////91////Af////82NjZ1/////4CAgP8AAAD/BgYG///////AwMC7/////x8fH9y+vr7/AQEB/9TU1P///////////5GRkf8jIyPFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////9w////Af///03/////DAwM/wAAAP93d3f//////////xoAAAAABQUFJwICAv+/v7//7e3t/+3t7f+Tk5P/EhIS9gUFBScAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////Li4u//////////9w/////4mJif8AAAD/BQUF//////////+YAAAAAAAAAAAAAAAABQUFJSMjI8UNDQ35DQ0N+SMjI8UFBQUlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/IiIi////////////ExMT/wAAAP9wcHD//////////yIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP8AAAD/AAAA/2JiYv8AAAD/AAAA//////////+kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/0JCQv/////+////eQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9GRkb//////v///3b///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/QkJC//////7///92////BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAA/wAAAP8AAAD/AAAA/0NDQ//////+////dv///wYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP8AAAD/AAAA/wAAAP9FRUX//////v///3b///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAP8AAAD/RkZG//////7///92////BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAA/0ZGRv//////////dv///wYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP9HR0f//////////3b///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////SEhI//////////92////BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////dv///wqq///3/3//+/4f//c8D//7CAf/9ggH//gIB/+0AAf/nBwP/4geH/+AP///gD///4AH//+AD///gB///4A///+Af///gP///4H///+D////h////4////+f///////////////////8=', 'auto') : this.NoOp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmbeddedCustomCursor, "delete", {
        get: function () {
            // tslint:disable-next-line:max-line-length no-bitwise
            return this.Delete === undefined ? this.Delete = new EmbeddedCustomCursor('data:text/plain;base64,AAACAAEAICAAAAQABACoEAAAFgAAACgAAAAgwAAAP//////AAAA//////8AAAD//////wAAAP//////AAAA//////8AAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////wAAAP//////AAAA//////8AAAD//////wAAAP//////AAAA//////8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAP///wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAAD///8Z//////////////9l////GgAAAAA1U7P/NVOz/zVTs0//////AAAAADVTs081U7P/NVOz/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAAAP///1T/////T09P////////////AAAAADVTs1o1U7P/NVOz/zVTs081U7NNNVOz/zVTs/81U7NaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP////8Z/////3R0dP8AAAD/CgoK//////8AAAAAAAAAADVTs1o1U7P/NlOz/zVTs/41U7P/NVOzWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8G////AQAAAAAAAAD//////1FRUf//////CQkJ/wAAAP98fHz//////wAAAP//////AAAAPx0tYv81U7P/NVOz/zVTs4sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////91////Af////8ZGRn//////4CAgP8AAAD/BgYG//////+NjY3//////wAAAP/Fzun/NVOy/zVTs/81U7P/NVOz/jVTs0gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////9w////Af///03/////DAwM/wAAAP93d3f//////////xoAAAAANVOzRDVTs/41U7P/NVOzXTVTs1s1U7P/NVOz/jVTs0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////Li4u//////////9w/////4mJif8AAAD/BQUF//////////+YAAAAAAAAAAA1U7P+NVOz/zVTs10AAAAAAAAAADVTs101U7P/NVOz/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/IiIi////////////ExMT/wAAAP9wcHD//////////yIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP8AAAD/AAAA/2JiYv8AAAD/AAAA//////////+kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/0JCQv/////+////eQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9GRkb//////v///3b///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/QkJC//////7///92////BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAA/wAAAP8AAAD/AAAA/0NDQ//////+////dv///wYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP8AAAD/AAAA/wAAAP9FRUX//////v///3b///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAP8AAAD/RkZG//////7///92////BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAA/0ZGRv//////////dv///wYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP9HR0f//////////3b///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////SEhI//////////92////BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////dv///wf//z/n//8/5///M5Z//zDM//8g4f//ACH/+wAB//nBzP/4gZ5/+AP///gD///4AH//+AD///gB///4A///+Af///gP///4H///+D////h////4////+f///////////////////8=', 'auto') : this.Delete;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmbeddedCustomCursor, "copy", {
        get: function () {
            // tslint:disable-next-line:max-line-length no-bitwise
            return this.Copy === undefined ? this.Copy = new EmbeddedCustomCursor('data:text/plain;base64,AAACAAEAICAAAAMAAwCoEAAAFgAAACgAAAAgwAAAP//////AAAA//////8AAAD//////wAAAP//////AAAA//////8AAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////wAAAP//////AAAA//////8AAAD//////wAAAP//////AAAA//////8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAP///wEAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAAD///8Z//////////////9l////GgAAAAAAAAD//////////////////////////////////////wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAAAP///1T/////T09P////////////AAAAAAAAAP////////////////8AAAD/////////////////AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP////8Z/////3R0dP8AAAD/CgoK//////8AAAAAAAAA/////////////////wAAAP////////////////8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8G////AQAAAAAAAAD//////1FRUf//////CQkJ/wAAAP98fHz//////wAAAH8AAAD//////wAAAP8AAAD/AAAA/wAAAP8AAAD//////wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////91////Af////8ZGRn//////4CAgP8AAAD/BgYG//////+NjY3//////wAAAP////////////////8AAAD/////////////////AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////9w////Af///03/////DAwM/wAAAP93d3f//////////xoAAAAAAAAA/////////////////wAAAP////////////////8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////Li4u//////////9w/////4mJif8AAAD/BQUF//////////+YAAAAAAAAAAAAAAD//////////////////////////////////////wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/IiIi////////////ExMT/wAAAP9wcHD//////////yIAAAAAAAAAAAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP8AAAD/AAAA/2JiYv8AAAD/AAAA//////////+kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/0JCQv/////+////eQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9GRkb//////v///3b///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/QkJC//////7///92////BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAA/wAAAP8AAAD/AAAA/0NDQ//////+////dv///wYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP8AAAD/AAAA/wAAAP9FRUX//////v///3b///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA/wAAAP8AAAD/RkZG//////7///92////BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAD/AAAA/0ZGRv//////////dv///wYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAP9HR0f//////////3b///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////SEhI//////////92////BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////dv///wf//z/3//8/gD//M4A//zCAP/8ggD//AIA/+wAAP/nBgD/4gYA/+AOAP/gD///4AH//+AD///gB///4A///+Af///gP///4H///+D////h////4////+f///////////////////8=', 'auto') : this.Copy;
        },
        enumerable: true,
        configurable: true
    });
    EmbeddedCustomCursor.prototype.setCursor = function (element) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(element)) {
            element.css('cursor', this.cssString);
        }
    };
    EmbeddedCustomCursor.copyFromElement = function (element) {
        var cursor = !MiscUtil_1.MiscUtil.IsNullOrUndefined(element) ? element.css('cursor') : '';
        return new EmbeddedCustomCursor(null, cursor);
    };
    return EmbeddedCustomCursor;
}());
exports.EmbeddedCustomCursor = EmbeddedCustomCursor;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VizclientUtils_1 = __webpack_require__(1);
var FeatureFlagUtils = /** @class */ (function () {
    function FeatureFlagUtils() {
    }
    // Pass the featureflag to the module here
    FeatureFlagUtils.SetFFWebAuthoringDragAggregation = function (shim) {
        VizclientUtils_1.FeatureFlags.WebAuthoringDragAggregation = shim;
    };
    // Pass the feature param to the module here
    FeatureFlagUtils.SetFeatureParamDebugTools = function (shim) {
        VizclientUtils_1.FeatureParam.DebugTools = shim;
    };
    // Pass the tsconfig to the module here
    FeatureFlagUtils.SetTsConfigIsMobile = function (shim) {
        VizclientUtils_1.TsConfig.IsMobile = shim;
    };
    // Pass the bootstraputil to the module here
    FeatureFlagUtils.SetBootStrapUtilIsEmbedded = function (shim) {
        VizclientUtils_1.BootstrapUtility.IsEmbedded = shim;
    };
    FeatureFlagUtils.SetLoggerDebug = function (shim) {
        VizclientUtils_1.Logger.Debug = shim;
    };
    FeatureFlagUtils.SetAllShimsToFallback = function () {
        var fallbackShim = function () { return false; };
        FeatureFlagUtils.SetFFWebAuthoringDragAggregation(fallbackShim);
        FeatureFlagUtils.SetFeatureParamDebugTools(fallbackShim);
        FeatureFlagUtils.SetTsConfigIsMobile(fallbackShim);
        FeatureFlagUtils.SetBootStrapUtilIsEmbedded(fallbackShim);
    };
    return FeatureFlagUtils;
}());
exports.FeatureFlagUtils = FeatureFlagUtils;
var NormalizedEvent_1 = __webpack_require__(5);
exports.NormalizedEvent = NormalizedEvent_1.NormalizedEvent;
var MouseEventUtil_1 = __webpack_require__(16);
exports.MouseEventUtil = MouseEventUtil_1.MouseEventUtil;
var EventHandleSpec_1 = __webpack_require__(7);
exports.EventHandleSpec = EventHandleSpec_1.EventHandleSpec;
var EventForwarder_1 = __webpack_require__(33);
exports.EventForwarder = EventForwarder_1.EventForwarder;
var TableauEventHandler_1 = __webpack_require__(8);
exports.TableauEventHandler = TableauEventHandler_1.TableauEventHandler;
var TableauEventHandlerForReact_1 = __webpack_require__(21);
exports.TableauEventHandlerForReact = TableauEventHandlerForReact_1.TableauEventHandlerForReact;
var Gesture_1 = __webpack_require__(6);
exports.Gesture = Gesture_1.Gesture;
var Drag_1 = __webpack_require__(18);
exports.Drag = Drag_1.Drag;
var GlobalUIEvents_1 = __webpack_require__(15);
exports.GlobalUIEvents = GlobalUIEvents_1.GlobalUIEvents;
var EventRecognizer_1 = __webpack_require__(13);
exports.EventRecognizer = EventRecognizer_1.EventRecognizer;
var Hover_1 = __webpack_require__(20);
exports.Hover = Hover_1.Hover;
var MiscUtil_1 = __webpack_require__(0);
exports.MiscUtil = MiscUtil_1.MiscUtil;
var ZoomScaleUtil_1 = __webpack_require__(17);
exports.ZoomScaleUtil = ZoomScaleUtil_1.ZoomScaleUtil;
var MouseCapture_1 = __webpack_require__(19);
exports.MouseCapture = MouseCapture_1.MouseCapture;
var DragDropManager_1 = __webpack_require__(22);
exports.DragDropManager = DragDropManager_1.DragDropManager;
var SimpleAvatar_1 = __webpack_require__(39);
exports.SimpleAvatar = SimpleAvatar_1.SimpleAvatar;
var DragInstance_1 = __webpack_require__(40);
exports.DragInstance = DragInstance_1.DragInstance;
var DelegateDropTarget_1 = __webpack_require__(41);
exports.DelegateDropTarget = DelegateDropTarget_1.DelegateDropTarget;
var DropResult_1 = __webpack_require__(23);
exports.DropResult = DropResult_1.DropResult;
var EmbeddedCustomCursor_1 = __webpack_require__(10);
exports.EmbeddedCustomCursor = EmbeddedCustomCursor_1.EmbeddedCustomCursor;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.9.0
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.0';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return obj != null && hasOwnProperty.call(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}());

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24), __webpack_require__(25)(module)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browser_support_1 = __webpack_require__(4);
var Discrete_1 = __webpack_require__(26);
var DomUtil_1 = __webpack_require__(14);
var Drag_1 = __webpack_require__(18);
var EventHandleSpec_1 = __webpack_require__(7);
var VizclientUtils_1 = __webpack_require__(1);
var Hover_1 = __webpack_require__(20);
var VizclientUtils_2 = __webpack_require__(1);
var MiscUtil_1 = __webpack_require__(0);
var MouseEventUtil_1 = __webpack_require__(16);
var NormalizedEvent_1 = __webpack_require__(5);
var Pinch_1 = __webpack_require__(30);
var TableauEventHandler_1 = __webpack_require__(8);
/**
* The responsibility of this class is to inspect browser events and forward them to the gesture instances (that this class manages).
*/
var EventRecognizer = /** @class */ (function () {
    function EventRecognizer(config) {
        // TODO: Move the mouse behavior handling into a separate class.
        // All the variables that represent mouse state should then move to this new class.
        this.mousedown = false;
        this.handlingContextMenu = false;
        this.usingHover = config.IsUsingHover();
        this.domElement = config.DomElement;
        // these Recognizers are used by all
        this.drag = new Drag_1.Drag(config, this);
        this.discrete = new Discrete_1.Discrete(config);
        this.pinch = new Pinch_1.Pinch(config);
        if (this.usingHover) {
            this.hover = new Hover_1.Hover(config);
        }
    }
    Object.defineProperty(EventRecognizer, "CurrentGlobalMouseButton", {
        /**
         * Gets or sets globally tracked mouse button state, this is useful for knowing when there was a left mouse button
         *    up somewhere else.
         * Note: The property name implies and the implementation is capable of tracking left/middle/right buttons.
         * However, the way the mouseup (startEvent) is implemented below only the left mouse button is tracked. This is
         * because it seems the intent here is to ignore non-left-mouse clicks.
        */
        get: function () {
            return EventRecognizer.globalMouseButton;
        },
        set: function (value) {
            if (EventRecognizer.globalMouseButton !== value) {
                EventRecognizer.globalMouseButton = value;
                VizclientUtils_2.Logger.Debug('GlobalMouseButton=' + EventRecognizer.globalMouseButton);
            }
        },
        enumerable: true,
        configurable: true
    });
    EventRecognizer.prototype.suppressHover = function () {
        this.hover.suppressHover();
    };
    EventRecognizer.prototype.unsuppressHover = function () {
        this.hover.unsuppressHover();
    };
    EventRecognizer.prototype.CancelHover = function () {
        this.hover.Cancel();
    };
    EventRecognizer.prototype.HandleEvent = function (e) {
        // if there was a left mouse down in this handler but the mouse was moved and the mouse
        // up wasn't recorded our local mousedown state will be incorrect. We need to know
        // if that mouseup occurred so we know whether to enable hovering.
        if (this.mousedown
            && (EventRecognizer.CurrentGlobalMouseButton !== "left" /* Left */
                && EventRecognizer.CurrentGlobalMouseButton !== "right" /* Right */)) {
            this.mousedown = false;
        }
        // this._mousedown is to handle the case where onmousemove fires, but
        // the mouse isn't down
        if (e.IsScrollEvent) {
            this.mousedown = false;
        }
        else if (e.IsOutEvent) {
            if (this.usingHover) {
                this.hover.Out(e);
            }
        }
        else if (e.IsStartEvent) {
            this.HandleStartEvent(e);
        }
        else if (e.IsMoveEvent) {
            this.HandleMoveEvent(e);
        }
        else {
            this.HandleEndCancelEvent(e);
        }
    };
    EventRecognizer.prototype.HandleStartEvent = function (e) {
        this.handlingContextMenu = false;
        this.lastMouseButtonPressed = MouseEventUtil_1.MouseEventUtil.GetMouseButtonEnum(e.originalEvent);
        if (e.IsMouseEvent) {
            // bugzid 39261: we only want to recognize left clicks
            if (!VizclientUtils_1.FeatureFlags.WebAuthoringDragAggregation() && !e.IsLeftMouseEvent) {
                return;
            }
            this.mousedown = true;
            // globally maintain the state of the mouse buttons
            // when in mouse mode startEvent corresponds to a mousedown
            EventRecognizer.CurrentGlobalMouseButton = this.lastMouseButtonPressed;
        }
        // Though no hover with touch, a touch start event should have same effect as a mouse start event
        this.HandleStart(e);
    };
    EventRecognizer.prototype.HandleMoveEvent = function (e) {
        if (this.usingHover) {
            this.hover.Move(e);
        }
        if (e.IsMouseEvent) {
            // bugzid: 39261
            if ((!VizclientUtils_1.FeatureFlags.WebAuthoringDragAggregation() && this.lastMouseButtonPressed !== "left" /* Left */)
                || !this.mousedown) {
                return;
            }
        }
        // order shouldn't matter
        this.discrete.Move(e);
        this.drag.Move(e);
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.pinch)) {
            this.pinch.Move(e);
        }
    };
    EventRecognizer.prototype.HandleEndCancelEvent = function (e) {
        // globally maintain the state of the mouse buttons
        // when in mouse mode endEvent corresponds to a mouseup
        EventRecognizer.CurrentGlobalMouseButton = "none" /* None */;
        // Though no hover with touch, a touch end event should have same effect as a mouse end event
        if (this.usingHover) {
            this.hover.End(e);
        }
        // order matters
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.pinch)) {
            this.pinch.End(e);
        }
        this.drag.End(e);
        // track whether we are handling a right-click event sequence
        if (e.IsMouseEvent) {
            this.mousedown = false;
            // Special handling for contextmenu (right-click and/or ctrl+left-click on Mac) event:
            // on Mac we get contextmenu before the mouseup event, so we ignore the trailing mouseup event
            if (e.IsRightClickEvent || this.lastMouseButtonPressed === "right" /* Right */) {
                this.handlingContextMenu = true;
            }
            // on Windows we get mouseup event before the contextmenu event, so we ignore mouse events until we get contextmenu event.
            if ((browser_support_1.BrowserSupport.IsMac() && this.handlingContextMenu &&
                e.type === "mouseup" /* MouseUp */) || (this.handlingContextMenu && !e.IsRightClickEvent)) {
                return;
            }
        }
        this.discrete.End(e);
    };
    EventRecognizer.prototype.CancelAllGestures = function () {
        // cancel all current gestures
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.drag)) {
            this.drag.Cancel();
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.discrete)) {
            this.discrete.Cancel();
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.pinch)) {
            this.pinch.Cancel();
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.hover)) {
            this.hover.Cancel();
        }
    };
    EventRecognizer.prototype.UpdateAllGestures = function (newConfig) {
        // cancel all current gestures
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.drag)) {
            this.drag.Update(newConfig);
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.discrete)) {
            this.discrete.Update(newConfig);
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.pinch)) {
            this.pinch.Update(newConfig);
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.hover)) {
            this.hover.Update(newConfig);
        }
    };
    // press drag is a modal gesture. Once press happens, then the callbacks to drag become
    // pressDrag callbacks, and pinch become doublePressDrag callbacks. Callbacks revert to
    // originals when the gesture ends
    EventRecognizer.prototype.SetupPressDrag = function (oldConfig) {
        var _this = this;
        var usingPressDrag = oldConfig.UsingPressDrag();
        if (!usingPressDrag) {
            return;
        }
        var press = function (e) {
            if (oldConfig.IsHandling("press" /* Press */)) {
                var callback = TableauEventHandler_1.TableauEventHandler.GetHandler(oldConfig, "press" /* Press */);
                callback(e);
            }
            var newConfig = new EventHandleSpec_1.EventHandleSpec();
            newConfig.SetHandler("dragStart" /* DragStart */, 
            // tslint:disable-next-line:align
            TableauEventHandler_1.TableauEventHandler.GetHandler(oldConfig, "pressDragStart" /* PressDragStart */));
            newConfig.SetHandler("dragMove" /* DragMove */, 
            // tslint:disable-next-line:align
            TableauEventHandler_1.TableauEventHandler.GetHandler(oldConfig, "pressDragMove" /* PressDragMove */));
            newConfig.SetHandler("dragEnd" /* DragEnd */, 
            // tslint:disable-next-line:align
            TableauEventHandler_1.TableauEventHandler.GetHandler(oldConfig, "pressDragEnd" /* PressDragEnd */));
            newConfig.SetHandler("pinchStart" /* PinchStart */, 
            // tslint:disable-next-line:align
            TableauEventHandler_1.TableauEventHandler.GetHandler(oldConfig, "doublePressDragStart" /* DoublePressDragStart */));
            newConfig.SetHandler("pinchMove" /* PinchMove */, 
            // tslint:disable-next-line:align
            TableauEventHandler_1.TableauEventHandler.GetHandler(oldConfig, "doublePressDragMove" /* DoublePressDragMove */));
            newConfig.SetHandler("pinchEnd" /* PinchEnd */, 
            // tslint:disable-next-line:align
            TableauEventHandler_1.TableauEventHandler.GetHandler(oldConfig, "doublePressDragEnd" /* DoublePressDragEnd */));
            _this.drag.Update(newConfig);
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(_this.pinch)) {
                _this.pinch.Update(newConfig);
            }
        };
        var lastTouch = function (e) {
            if (oldConfig.IsHandling("lastTouch" /* LastTouch */)) {
                var callback = TableauEventHandler_1.TableauEventHandler.GetHandler(oldConfig, "lastTouch" /* LastTouch */);
                callback(e);
            }
            _this.drag.Update(oldConfig);
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(_this.pinch)) {
                _this.pinch.Update(oldConfig);
            }
        };
        var pressConfig = new EventHandleSpec_1.EventHandleSpec();
        pressConfig.SetHandler("press" /* Press */, press);
        pressConfig.SetHandler("lastTouch" /* LastTouch */, lastTouch);
        this.discrete.Update(pressConfig);
    };
    EventRecognizer.prototype.HandleStart = function (e) {
        if (this.usingHover) {
            this.hover.Start(e);
        }
        // order matters
        this.discrete.Start(e);
        this.drag.Start(e);
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.pinch)) {
            this.pinch.Start(e);
        }
    };
    EventRecognizer.prototype.dispose = function () {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.discrete)) {
            this.discrete.dispose();
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.drag)) {
            this.drag.dispose();
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.hover)) {
            this.hover.dispose();
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.pinch)) {
            this.pinch.dispose();
        }
    };
    /**
     * Called when the mouse is moved while mouse events are being captured
     */
    EventRecognizer.prototype.HandleCapturedMouseMove = function (e) {
        if (this.IsCapturedEventOutsideOfTarget(e)) {
            var normalizedEvent = NormalizedEvent_1.NormalizedEvent.Create(e, this.domElement);
            this.HandleMoveEvent(normalizedEvent);
        }
    };
    /**
     * Called when mouseup occurs or on mouseout if we're in an iFrame and don't support setCapture
     */
    EventRecognizer.prototype.HandleCapturedMouseComplete = function (e) {
        // Always handle captured mouseout events as end events, regardless of whether the event will naturally bubble up
        // to the target. We don't normally handle mouseout events as end events, however when MouseCapture sends them it
        // indicates that the gesture needs to be ended prematurely because we don't expect to receive any further events
        // due to the gesture leaving frame context.
        var isMouseOut = e.type === "mouseout" /* MouseOut */;
        if (this.IsCapturedEventOutsideOfTarget(e) || isMouseOut) {
            var normalizedEvent = NormalizedEvent_1.NormalizedEvent.Create(e, this.domElement);
            this.HandleEndCancelEvent(normalizedEvent);
        }
    };
    /**
     * Returns true if the event will not naturally bubble to the capturing element via normal browser event propagation.
     */
    EventRecognizer.prototype.IsCapturedEventOutsideOfTarget = function (e) {
        return this.domElement !== e.target
            && !DomUtil_1.DomUtil.IsAncestorOf(this.domElement, e.target);
    };
    EventRecognizer.globalMouseButton = "none" /* None */; // the current state of the mouse buttons
    return EventRecognizer;
}());
exports.EventRecognizer = EventRecognizer;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(3);
var MiscUtil_1 = __webpack_require__(0);
var DomUtil = /** @class */ (function () {
    function DomUtil() {
    }
    DomUtil.HandleTouchEvents = function (domElement) {
        // If target is a checkbox, return false because checkboxes do not record the check/uncheck on
        // touchend if PreventDefault() is called. So when the target of an input event is a checkbox,
        // we must let mouse events fire in order for the check/uncheck to take effect.
        // Note: other inputs (input/textarea/select) seem unaffected by PreventDefault() being called.
        // Also, oddly, with mouse events, preventDefault() does not keep a checkbox from getting checked.
        if (DomUtil.IsCheckboxElement(domElement)) {
            return false;
        }
        // If target is a focusable text element, return false because we need to avoid calling PreventDefault()
        // in order to let them have focus when we click or tap on them.
        if (DomUtil.IsFocusableTextElement(domElement)) {
            return false;
        }
        // If we get to here, ok to handle touch events on this domElement.
        return true;
    };
    /**
     * Returns true if domElement is a checkbox, else false.
     * @param {HTMLElement} domElement - the dom element
     * @returns whether or not we're dealing with a checkbawks
     */
    DomUtil.IsCheckboxElement = function (domElement) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(domElement) && !MiscUtil_1.MiscUtil.IsNullOrUndefined(domElement.tagName)) {
            var targetTagName = domElement.tagName.toLowerCase();
            var typeAttributeValue = $(domElement).attr('type');
            if (targetTagName === 'input' && typeAttributeValue === 'checkbox') {
                return true;
            }
        }
        return false;
    };
    /**
     * Returns true if domElement is a focusable input element
     *  @param {HTMLElement} domElement - the dom element
     *  @returns true or false
     *  NOTE: DOM ELEMENT USED TO BE XMLELEMENT IN C#
     */
    DomUtil.IsFocusableTextElement = function (domElement) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(domElement) && !MiscUtil_1.MiscUtil.IsNullOrUndefined(domElement.tagName)) {
            var targetTagName = domElement.tagName.toLowerCase();
            if ((targetTagName === 'textarea') || (targetTagName === 'input') || (targetTagName === 'select')) {
                return true;
            }
        }
        return false;
    };
    DomUtil.IsAncestorOf = function (ancestor, child) {
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(ancestor) || MiscUtil_1.MiscUtil.IsNullOrUndefined(child)) {
            return false;
        }
        return $(child).parents().index(ancestor) >= 0;
    };
    return DomUtil;
}());
exports.DomUtil = DomUtil;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Delegate_1 = __webpack_require__(9);
var MiscUtil_1 = __webpack_require__(0);
/// <summary>
/// Global dispatcher of UI events such as FirstTouch, Press, Tap, LastTouch, including programmatically fired ones
/// like DismissTemporaryElements.
/// This is only a dispatcher - the event will not be canceled by this class
/// </summary>
var GlobalUIEvents = /** @class */ (function () {
    function GlobalUIEvents() {
    }
    GlobalUIEvents.add_FirstTouch = function (ev) {
        this.FirstTouch.add(ev);
    };
    GlobalUIEvents.remove_FirstTouch = function (ev) {
        this.FirstTouch.remove(ev);
    };
    GlobalUIEvents.add_Press = function (ev) {
        this.Press.add(ev);
    };
    GlobalUIEvents.remove_Press = function (ev) {
        this.Press.remove(ev);
    };
    GlobalUIEvents.add_Tap = function (ev) {
        this.Tap.add(ev);
    };
    GlobalUIEvents.remove_Tap = function (ev) {
        this.Tap.remove(ev);
    };
    GlobalUIEvents.add_LastTouch = function (ev) {
        this.LastTouch.add(ev);
    };
    GlobalUIEvents.remove_LastTouch = function (ev) {
        this.LastTouch.remove(ev);
    };
    GlobalUIEvents.add_RightClick = function (ev) {
        this.RightClick.add(ev);
    };
    GlobalUIEvents.remove_RightClick = function (ev) {
        this.RightClick.remove(ev);
    };
    GlobalUIEvents.add_DragEnd = function (ev) {
        this.DragEnd.add(ev);
    };
    GlobalUIEvents.remove_DragEnd = function (ev) {
        this.DragEnd.remove(ev);
    };
    GlobalUIEvents.add_DismissTemporaryElements = function (ev) {
        this.DismissTemporaryElements.add(ev);
    };
    GlobalUIEvents.remove_DismissTemporaryElements = function (ev) {
        this.DismissTemporaryElements.remove(ev);
    };
    //// ===========================================================================================================
    //// Methods
    //// ===========================================================================================================
    /// <summary>
    /// Fires <c>FirstTouch</c> event. As a side-effect, this also fires <c>DismissTemporaryElements</c> events
    /// </summary>
    GlobalUIEvents.FireFirstTouch = function (e, cancelCallback) {
        GlobalUIEvents.FireEvent(GlobalUIEvents.FirstTouch, e, cancelCallback);
    };
    /// <summary>
    /// Fires <c>Press</c> event
    /// </summary>
    GlobalUIEvents.FirePress = function (e, cancelCallback) {
        GlobalUIEvents.FireEvent(GlobalUIEvents.Press, e, cancelCallback);
    };
    /// <summary>
    /// Fires <c>Tap</c> event
    /// </summary>
    GlobalUIEvents.FireTap = function (e, cancelCallback) {
        GlobalUIEvents.FireEvent(GlobalUIEvents.Tap, e, cancelCallback);
    };
    /// <summary>
    /// Fires <c>LastTouch</c> event
    /// </summary>
    GlobalUIEvents.FireLastTouch = function (e, cancelCallback) {
        GlobalUIEvents.FireEvent(GlobalUIEvents.LastTouch, e, cancelCallback);
    };
    /// <summary>
    /// Fires <c>RightClick</c> event
    /// </summary>
    GlobalUIEvents.FireRightClick = function (e, cancelCallback) {
        GlobalUIEvents.FireEvent(GlobalUIEvents.RightClick, e, cancelCallback);
    };
    /// <summary>
    /// Fires <c>DragEnd</c> event
    /// </summary>
    GlobalUIEvents.FireDragEnd = function (e, cancelCallback) {
        GlobalUIEvents.FireEvent(GlobalUIEvents.DragEnd, e, cancelCallback);
    };
    /// <summary>
    /// Fires <c>DismissTemporaryElements</c> event
    /// </summary>
    GlobalUIEvents.FireDismissTemporaryElements = function () {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(GlobalUIEvents.DismissTemporaryElements)) {
            GlobalUIEvents.DismissTemporaryElements.invoke(null);
        }
    };
    /// <summary>
    /// Helper function to fire event.
    /// </summary>
    GlobalUIEvents.FireEvent = function (ev, eventArgument, cancelCallback) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(ev)) {
            ev.invoke(eventArgument, cancelCallback);
        }
    };
    //// ===========================================================================================================
    //// Events
    //// ===========================================================================================================
    /// <summary>
    /// The Action is a callback you can use to cancel the event.  Pass true to preventDefault on the event when you
    /// invoke the callback.  Note that the callback must be synchronous.
    /// </summary>
    GlobalUIEvents.FirstTouch = new Delegate_1.Delegate();
    GlobalUIEvents.Press = new Delegate_1.Delegate();
    GlobalUIEvents.Tap = new Delegate_1.Delegate();
    GlobalUIEvents.LastTouch = new Delegate_1.Delegate();
    GlobalUIEvents.RightClick = new Delegate_1.Delegate();
    GlobalUIEvents.DragEnd = new Delegate_1.Delegate();
    /// <summary>
    /// Fired when some UI element has programmatically taken focus (in a conceptual sense, not necessarily becoming
    /// the active element). For example, this could be fired when a dialog appears via the JSAPI.
    /// Any UI element that is temporary and normally dismisses when the user touches outside of it (e.g. a tooltip)
    /// should usually listen for this event in addition to <see cref="FirstTouch"/>.
    /// </summary>
    GlobalUIEvents.DismissTemporaryElements = new Delegate_1.Delegate();
    return GlobalUIEvents;
}());
exports.GlobalUIEvents = GlobalUIEvents;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiscUtil_1 = __webpack_require__(0);
var TypeUtil_1 = __webpack_require__(2);
/**
* Contains utility methods for mouse events
*/
var MouseEventUtil = /** @class */ (function () {
    function MouseEventUtil() {
    }
    // init mappings
    MouseEventUtil.InitMouseButtonMappings = function () {
        if (!MouseEventUtil.areMappingsInstantiated) {
            MouseEventUtil.mouseButtonMappingsIE[1] = "left" /* Left */;
            MouseEventUtil.mouseButtonMappingsIE[4] = "middle" /* Middle */;
            MouseEventUtil.mouseButtonMappingsIE[2] = "right" /* Right */;
            MouseEventUtil.mouseWhichMappings[1] = "left" /* Left */;
            MouseEventUtil.mouseWhichMappings[2] = "middle" /* Middle */;
            MouseEventUtil.mouseWhichMappings[3] = "right" /* Right */;
            MouseEventUtil.areMappingsInstantiated = true;
        }
    };
    /**
    * Interpret which mouse button was pressed from the raw event object.
    * Browsers have different specs mouse button representations. The basic
    * strategy that's used here is to isolate IE9 from the others.
    *
    * While most browsers support event.button, IE9 values means different
    * from the rest of the browser. Where left, mid, right usually maps to
    * 0, 1, 2, IE maps them to 1, 4, 2.
    *
    * This is where we'll use feature detection to separate IE9. We'll try
    * look for the event.which property which also tells us which button
    * was pressed (the values don't match with event.button though). Since
    * IE9 doesn't support this, we can easily special case event.button
    * only for IE9.
    *
    * Check:
    * http://mytableau/display/DevServFront/Mouse+Events+Madness
    * for related mouse event differences between browsers.
    *
    * @returns Returns MouseButtonEnum
    */
    MouseEventUtil.GetMouseButtonEnum = function (e) {
        // lazy instantiation of mappings
        MouseEventUtil.InitMouseButtonMappings();
        // default output
        var output = "none" /* None */;
        // event.which did not get defined in the metadata, we'll
        // have to extract it manually..
        var whichObj = TypeUtil_1.TypeUtil.GetField(e, 'which');
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(whichObj)) {
            // for chrome, firefox, and safari
            var which = whichObj;
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(MouseEventUtil.mouseWhichMappings[which])) {
                output = MouseEventUtil.mouseWhichMappings[which];
            }
        }
        else {
            var field = TypeUtil_1.TypeUtil.GetField(e, 'button');
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(field)) {
                // for IE9
                var button = field;
                if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(MouseEventUtil.mouseButtonMappingsIE[button])) {
                    output = MouseEventUtil.mouseButtonMappingsIE[button];
                }
            }
        }
        return output;
    };
    MouseEventUtil.areMappingsInstantiated = false;
    // button mapping for IE 9 - lazily instantiated
    MouseEventUtil.mouseButtonMappingsIE = {};
    // doesn't apply for IE 9 - lazily instantiated
    MouseEventUtil.mouseWhichMappings = {};
    return MouseEventUtil;
}());
exports.MouseEventUtil = MouseEventUtil;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiscUtil_1 = __webpack_require__(0);
var NonApiCommand_1 = __webpack_require__(28);
var VizclientUtils_1 = __webpack_require__(1);
var ZoomScaleUtil = /** @class */ (function () {
    function ZoomScaleUtil() {
    }
    ZoomScaleUtil.initialize = function () {
        window.addEventListener('message', function (evt) { return ZoomScaleUtil.OnMessage(window, evt); }, false);
    };
    Object.defineProperty(ZoomScaleUtil, "ZoomScaleForLocalWindow", {
        /**
        * Returns the zoom scale factor for the local window.
        * This will be a value ranging from (0, inf), where a value larger than 1 means you are zoomed in.
        * Note that the scale factor may be slightly inaccurate for desktop browsers, so use at your own peril.
        */
        get: function () {
            // TFSID: 567082 - Use the document's clientWidth instead of screen.width for
            // the unzoomed width, because when we are in an iframe embedded in another
            // page we want our unzoomed width to reflect the size of the iframe.
            var width = document.documentElement.clientWidth;
            var zoomedWidth = window.innerWidth;
            if (!VizclientUtils_1.TsConfig.IsMobile()) {
                zoomedWidth -= 17;
            }
            return width / zoomedWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZoomScaleUtil, "IsScaleFactorCommunicationAvailable", {
        get: function () {
            return !MiscUtil_1.MiscUtil.IsNullOrUndefined(ZoomScaleUtil.outerMessageSource);
        },
        enumerable: true,
        configurable: true
    });
    ZoomScaleUtil.OnMessage = function (target, e) {
        var messageEvent = e;
        // TFS 389713: Make sure our type is correct before parsing
        if (typeof messageEvent.data !== 'string') {
            return;
        }
        var command = NonApiCommand_1.NonApiCommand.Parse(messageEvent.data.toString());
        if (command.Name === NonApiCommand_1.NonApiCommandName.ScaleFactorResponse) {
            var id = command.Parameters[0];
            // Save the scale factor so that it can be retrieved synchronously later
            ZoomScaleUtil.lastScaleFactor = Number(command.Parameters[1]);
            var scrollX_1 = Number(command.Parameters[2]);
            var scrollY_1 = Number(command.Parameters[3]);
            var cb = ZoomScaleUtil.PendingCallbacks[id];
            delete ZoomScaleUtil.PendingCallbacks.id;
            ZoomScaleUtil.outerMessageSource = messageEvent.source;
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(cb)) {
                cb(ZoomScaleUtil.lastScaleFactor, scrollX_1, scrollY_1);
            }
        }
    };
    ZoomScaleUtil.RequestScaleFactor = function (callback) {
        if (callback === void 0) { callback = null; }
        var id = (++ZoomScaleUtil.nextId).toString();
        ZoomScaleUtil.PendingCallbacks[id] = callback;
        var command = new NonApiCommand_1.NonApiCommand(NonApiCommand_1.NonApiCommandName.ScaleFactorRequest, [id]);
        ZoomScaleUtil.outerMessageSource.postMessage(command.Serialize(), '*');
    };
    /**
    * Invokes the callback with the current browser viewport scale factor.
    * Consumers that cannot handle asynchronous behavior should use <see cref="GetScaleSync"/> instead.
    */
    ZoomScaleUtil.GetScaleAsync = function (callback) {
        if (ZoomScaleUtil.IsScaleFactorCommunicationAvailable) {
            ZoomScaleUtil.RequestScaleFactor(callback);
        }
        else if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(callback)) {
            callback(ZoomScaleUtil.ZoomScaleForLocalWindow, 0, 0);
        }
    };
    /**
    * Returns the last known browser viewport scale factor. Note that this scale factor may be stale when we are embedded.
    * Consumers that require the zoom scale to always be accurate and can tolerate asynchronous behavior should use
    * <see cref="GetScaleAsync"/> instead.
    */
    ZoomScaleUtil.GetScaleSync = function () {
        if (ZoomScaleUtil.IsScaleFactorCommunicationAvailable) {
            ZoomScaleUtil.RequestScaleFactor();
            return ZoomScaleUtil.lastScaleFactor;
        }
        else {
            return ZoomScaleUtil.ZoomScaleForLocalWindow;
        }
    };
    ZoomScaleUtil.PendingCallbacks = {};
    ZoomScaleUtil.nextId = 1;
    ZoomScaleUtil.lastScaleFactor = 1;
    return ZoomScaleUtil;
}());
exports.ZoomScaleUtil = ZoomScaleUtil;
ZoomScaleUtil.initialize();


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(3);
var browser_support_1 = __webpack_require__(4);
var EventUtils_1 = __webpack_require__(11);
var Gesture_1 = __webpack_require__(6);
var GlobalUIEvents_1 = __webpack_require__(15);
var VizclientUtils_1 = __webpack_require__(1);
var MiscUtil_1 = __webpack_require__(0);
var MouseCapture_1 = __webpack_require__(19);
/**
* Drag gesture implementation. Inherits Gesture
*/
var Drag = /** @class */ (function (_super) {
    __extends(Drag, _super);
    /**
    * Initializes a new instance of the Drag class
    * @param {GestureEventHandleSpec} config - object
    */
    function Drag(config, mouseCaptureHandler) {
        var _this = _super.call(this, config, "drag" /* Drag */, /* hasSlop */ true) || this;
        _this.canceled = false; // has the gesture been canceled?
        _this.dragging = false;
        _this.mouseCaptureHandler = mouseCaptureHandler;
        return _this;
    }
    Drag.prototype.Start = function (e) {
        VizclientUtils_1.Logger.Debug('start');
        var touch = e.touches[0];
        // Bug 123836, 121420: Don't allow default behavior of copying images when dragging an image
        // Bug 152286: Touch scrolling on vizzes broken in mobile
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(e.target) && e.target.tagName.toUpperCase() === 'IMG' && !VizclientUtils_1.TsConfig.IsMobile()) {
            e.preventDefault();
        }
        // right number of touches (i.e., fingers)?
        if (e.touches.length !== this.numTouches) {
            // Nope. Cancel anything in progress
            if (this.dragging) {
                this.Fire("dragEnd" /* DragEnd */, e, this.lastInfo);
            }
            this.ResetGestureState();
            this.canceled = true;
            return;
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.startInfo) && !browser_support_1.BrowserSupport.IsTouch()) {
            // We're getting multiple starts in a row. Must be we got a mousedown and no mouseup.
            // I bet you $100 we're using Chrome and you clicked on a scroll bar.
            // For touch we don't do this as multitouch can trigger this easily.
            // http://code.google.com/p/chromium/issues/detail?id=14204
            VizclientUtils_1.Logger.Debug('multiple starts in a row, ending old one first');
            this.End(e);
        }
        this.canceled = false;
        this.startInfo = this.BuildStartInfo(touch);
        this.lastInfo = this.startInfo;
        this.isPotentialPress = false;
        if (this.Config.IsHandling("potentialPress" /* PotentialPress */)) {
            this.StartPotentialPressDetection();
        }
    };
    Drag.prototype.Move = function (e) {
        if (this.canceled) {
            return;
        }
        // Bug 581838: In order to prevent scrolling and selecting at the same time, track when the
        // user is triggering a potential press and call preventDefault() on any subsequent event.
        // If the user is not scrolling, this will prevent them from starting.
        if (this.isPotentialPress && e.touches.length === this.numTouches) {
            e.preventDefault();
        }
        this.lastInfo = this.GetParams(e);
        if (this.dragging) {
            this.Fire("dragMove" /* DragMove */, e, this.lastInfo);
        }
        else if (this.PastSlop(e)) {
            this.dragging = true;
            this.Fire("dragStart" /* DragStart */, e, this.lastInfo);
            this.Fire("dragMove" /* DragMove */, e, this.lastInfo);
            // if this config also handles dragEnd, capture events while the mouse is down so we can detect
            // mouseup/mousemove outside the document
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.Config.dragEnd)) {
                MouseCapture_1.MouseCapture.SetCapture(this.mouseCaptureHandler);
            }
        }
    };
    Drag.prototype.End = function (e) {
        var param;
        if (!this.dragging) {
            var shouldBeginRecognizingDrag = e.touches.length === this.numTouches && // Only fire DragStart if we have the correct number of touches
                (!MiscUtil_1.MiscUtil.IsNullOrUndefined(e.touches[0].identifier)) && // Avoid false-positives when handling right clicks
                this.PastSlop(e); // Only fire DragStart if we have moved past the allowed slop.
            if (!shouldBeginRecognizingDrag) {
                // TFSID: 624101 - Make sure we reset the gesture state when no drag occurred, otherwise
                // a tap or click will leave us in a bad state when we begin recognizing the next gestures.
                this.ResetGestureState();
                return;
            }
            this.startInfo = this.BuildStartInfo(e.touches[0]);
            this.lastInfo = this.startInfo;
            param = this.GetParams(e);
            this.canceled = false;
            this.dragging = true;
            this.Fire("dragStart" /* DragStart */, e, param);
            return;
        }
        VizclientUtils_1.Logger.Debug('end');
        // stop capturing mouse events since we're done dragging
        MouseCapture_1.MouseCapture.ReleaseCapture();
        param = this.GetParams(e);
        this.ResetGestureState();
        // fire global drag end event before drag drop manager performs the drag end
        if (this.Config.IsHandling("dragEnd" /* DragEnd */)) {
            // make a new temp event to protect the original, and add in my lastInfo because it
            // holds important gesture info that is missing from OriginalEvent on iPad.
            var tempEvt = EventUtils_1.NormalizedEvent.Create(e.originalEvent, null);
            $.extend(tempEvt, this.lastInfo);
            GlobalUIEvents_1.GlobalUIEvents.FireDragEnd(tempEvt, null /*DragEnd is not cancellable*/);
        }
        this.Fire("dragEnd" /* DragEnd */, e, param);
    };
    Drag.prototype.Cancel = function () {
        this.canceled = true;
    };
    /**
    * Given a touch object representing the beginning of the drag gesture, returns a GestureEventInfo that captures
    * the necessary information about the gesture's starting location.
    */
    Drag.prototype.BuildStartInfo = function (touch) {
        var param = new Gesture_1.GestureEventInfo();
        param.pageX = touch.pageX;
        param.pageY = touch.pageY;
        return param;
    };
    /**
    * Given a "move" event, returns additional information that gives context about the event relative to the entire
    * drag gesture.
    */
    Drag.prototype.GetParams = function (evt) {
        var touch = evt.changedTouches[0];
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(this.startInfo)) {
            this.startInfo = this.BuildStartInfo(touch);
        }
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(this.lastInfo)) {
            this.lastInfo = this.startInfo;
        }
        var param = new Gesture_1.GestureEventInfo();
        param.clientX = touch.clientX;
        param.clientY = touch.clientY;
        param.pageX = touch.pageX;
        param.pageY = touch.pageY;
        param.startX = this.startInfo.pageX;
        param.startY = this.startInfo.pageY;
        param.deltaX = param.pageX - this.startInfo.pageX;
        param.deltaY = param.pageY - this.startInfo.pageY;
        param.deltaXSinceLast = param.pageX - this.lastInfo.pageX;
        param.deltaYSinceLast = param.pageY - this.lastInfo.pageY;
        param.scale = 1;
        return param;
    };
    Drag.prototype.PastSlop = function (evt) {
        var touch = evt.touches[0];
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(this.startInfo)) {
            return false; // we haven't even started yet
        }
        var zoomAdjustedSlop = this.ZoomAdjustedSlop;
        return Math.abs(touch.pageX - this.startInfo.pageX) > zoomAdjustedSlop ||
            Math.abs(touch.pageY - this.startInfo.pageY) > zoomAdjustedSlop;
    };
    /**
     * Reset the gesture state so that no gesture is in the process of being recognized.
     */
    Drag.prototype.ResetGestureState = function () {
        this.startInfo = null;
        this.dragging = false;
        this.isPotentialPress = false;
        this.potentialPressTimer = MiscUtil_1.MiscUtil.ClearTimeout(this.potentialPressTimer);
    };
    Drag.prototype.StartPotentialPressDetection = function () {
        var _this = this;
        this.potentialPressTimer = window.setTimeout(function () {
            // TFSID 625762 - Fail the potential press detection if we have already started dragging by the time
            // this callback is invoked.
            // This stops us from accidentally killing some native browser interactions. As of 2017-03-29, I am
            // aware of two specific situations situations where this is relevant:
            // (1) scrolling via dragging on a touch-enabled device
            // (2) dragging an HTML5 slider
            if (!_this.dragging) {
                _this.isPotentialPress = true;
            }
            // tslint:disable-next-line:align
        }, Gesture_1.Gesture.PotentialPressTime);
    };
    return Drag;
}(Gesture_1.Gesture));
exports.Drag = Drag;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VizclientUtils_1 = __webpack_require__(1);
var browser_support_1 = __webpack_require__(4);
var MiscUtil_1 = __webpack_require__(0);
var Param_1 = __webpack_require__(29);
/**
* A utility class that uses event capture to detect the mouse leaving the document.
*/
var MouseCapture = /** @class */ (function () {
    function MouseCapture() {
    }
    Object.defineProperty(MouseCapture, "ManuallyCaptureMouseEvents", {
        /**
        * returns true if we can use event listeners on the document in order to watch mouse events
        * during the capture phase.
        */
        get: function () {
            // Not on mobile - capture is done natively on mobile, so we don't want to override that implementation,
            // and only if browser supports AddEventListener on the Document (IE 7/8 does not)
            return !VizclientUtils_1.TsConfig.IsMobile() && browser_support_1.BrowserSupport.AddEventListener();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MouseCapture, "ForceDragStopOnIFrameMouseOut", {
        /**
        * Tells us whether it's ok to force a drag stop event when the mouse leaves the document and we're in
        * an iFrame.  This prevents the situation where mouse is released outside the document and when mouse reenters
        * the document, we're still dragging even though the mouse is up.
        */
        get: function () {
            // We only need to force a stop drag on mouse leaving the window in IE - other browsers work fine without it,
            // and only if we're in an iFrame
            return browser_support_1.BrowserSupport.IsIE() && VizclientUtils_1.BootstrapUtility.IsEmbedded();
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Normal case is to call this in response to a mousedown event where dragging/tracking will occur until mouseup.
    *
    * Both IE and Firefox have built-in support for setCapture.
    * https://developer.mozilla.org/en-US/docs/Web/API/Element.setCapture
    *
    * Chrome(WebKit) doesn't have setCapture so we're going to use the mouse capture phase
    * to steal any mousemove/up/out events so that we can be sure no one is stopping them.
    * When we can't use setCapture and we are in an iFrame, it's not possible to receive mouse events once
    * the mouse has left the document, so in this case we complete the capture as soon as the mouse leaves the document.
    *
    * @param {IMouseCaptureEventHandler} handler - The event handler used to receive events in the case we handle mouse
    * events manually.
    */
    MouseCapture.SetCapture = function (handler) {
        Param_1.Param.VerifyValue(handler, 'handler');
        if (MouseCapture.ManuallyCaptureMouseEvents) {
            MouseCapture.eventHandlers.push(handler);
            if (!MouseCapture.areMouseListenersAttached) {
                // listen for the mouse events during the capture phase (pass true for useCapture)
                document.addEventListener("mousemove" /* MouseMove */, this.HandleMouseMove, true);
                document.addEventListener("mouseup" /* MouseUp */, this.HandleMouseUp, true);
                document.addEventListener("mouseout" /* MouseOut */, this.HandleMouseOut, true);
                MouseCapture.areMouseListenersAttached = true;
            }
        }
    };
    /**
    * Ends mouse event capture for all previously set handlers.
    */
    MouseCapture.ReleaseCapture = function () {
        if (MouseCapture.ManuallyCaptureMouseEvents) {
            MouseCapture.eventHandlers = [];
            document.removeEventListener("mousemove" /* MouseMove */, this.HandleMouseMove, true);
            document.removeEventListener("mouseup" /* MouseUp */, this.HandleMouseUp, true);
            document.removeEventListener("mouseout" /* MouseOut */, this.HandleMouseOut, true);
            MouseCapture.areMouseListenersAttached = false;
        }
    };
    MouseCapture.HandleMouseMove = function (e) {
        MouseCapture.eventHandlers.forEach(function (handler) { return handler.HandleCapturedMouseMove(e); });
    };
    MouseCapture.HandleMouseUp = function (e) {
        MouseCapture.HandleComplete(e);
        VizclientUtils_1.Logger.Debug('Mouse has been released, calling HandleCaptureComplete on the handler');
    };
    MouseCapture.HandleMouseOut = function (e) {
        // test to see if the mouse has left the document
        if (MouseCapture.ForceDragStopOnIFrameMouseOut && MouseCapture.EventIsOutsideDocument(e)) {
            MouseCapture.HandleComplete(e);
            VizclientUtils_1.Logger.Debug('Mouse is Exiting document and document is in an iFrame - calling HandleCapturedMouseComplete on the handler');
        }
    };
    MouseCapture.HandleComplete = function (e) {
        MouseCapture.eventHandlers.forEach(function (handler) { return handler.HandleCapturedMouseComplete(e); });
    };
    MouseCapture.EventIsOutsideDocument = function (e) {
        // tslint:disable-next-line:no-any whitespace
        var toElement = e.toElement;
        // Below from http://stackoverflow.com/questions/923299/how-can-i-detect-when-the-mouse-leaves-the-window
        return (MiscUtil_1.MiscUtil.IsNullOrUndefined(toElement) || toElement.NodeName === 'HTML');
    };
    MouseCapture.eventHandlers = [];
    MouseCapture.areMouseListenersAttached = false;
    return MouseCapture;
}());
exports.MouseCapture = MouseCapture;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DomUtil_1 = __webpack_require__(14);
var Gesture_1 = __webpack_require__(6);
var VizclientUtils_1 = __webpack_require__(1);
var MiscUtil_1 = __webpack_require__(0);
var TypeUtil_1 = __webpack_require__(2);
var Hover = /** @class */ (function (_super) {
    __extends(Hover, _super);
    /**
     * Initializes a new instance of the Hover class
     * @param {EventHandleSpec} config - GestureEventHandleSpec object
     */
    function Hover(config) {
        var _this = _super.call(this, config, "hover" /* Hover */, /*hasSlop*/ false) || this;
        _this.startX = 0;
        _this.startY = 0;
        _this.possible = true;
        _this.hoverTime = (MiscUtil_1.MiscUtil.IsNullOrUndefined(config.HoverDelay)) ? Hover.HoverTime : config.HoverDelay;
        return _this;
    }
    Hover.prototype.Start = function (e) {
        VizclientUtils_1.Logger.Debug('Start');
        this.Cancel();
        this.possible = false;
    };
    Hover.prototype.Move = function (e) {
        var _this = this;
        VizclientUtils_1.Logger.Debug("Move: " + e);
        var moveEvent = e.touches[0];
        if (!this.possible) {
            return; // mouse down => not possible
        }
        if (!this.PastSlop(e)) {
            return; // either before or after hover fires, do nothing within slop
        }
        var param = this.GetParam(e);
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.hoverTimeout)) {
            this.Cancel();
        }
        this.Fire("moving" /* Moving */, e, param);
        this.startX = moveEvent.pageX;
        this.startY = moveEvent.pageY;
        this.hoverTimeout = window.setTimeout(function () {
            VizclientUtils_1.Logger.Debug('Hover');
            if (!_this.isSuppressed) {
                _this.Fire("hover" /* Hover */, e, param);
            }
            _this.ClearTimeout();
        }, 
        // tslint:disable-next-line:align
        this.hoverTime);
    };
    Hover.prototype.End = function (e) {
        VizclientUtils_1.Logger.Debug('end');
        if (e.touches.length === 0) {
            this.possible = true;
        }
    };
    Hover.prototype.Out = function (e) {
        // http://www.quirksmode.org/js/events_mouse.html#relatedtarget (dojo normalizes IE for us)
        // in case of mouseout, relatedTarget is the element the mouse is going to.
        // We stop the hover if we are going to an element that is neither the originator of the hover,
        // nor a child of the originator.
        var relatedTarget = TypeUtil_1.TypeUtil.GetField(e.originalEvent, 'relatedTarget');
        if (this.Config.DomElement !== relatedTarget && !DomUtil_1.DomUtil.IsAncestorOf(this.Config.DomElement, relatedTarget)) {
            VizclientUtils_1.Logger.Debug('Out.');
            this.Cancel();
            this.Fire("mouseleave" /* MouseLeave */, e, this.GetParam(e));
        }
    };
    Hover.prototype.suppressHover = function () {
        if (!this.isSuppressed) {
            VizclientUtils_1.Logger.Debug('SuppressHover.');
        }
        this.isSuppressed = true;
    };
    Hover.prototype.unsuppressHover = function () {
        if (this.isSuppressed) {
            VizclientUtils_1.Logger.Debug('UnsuppressHover.');
        }
        // TODO - old code had a "trigger hover if we haven't moved from the suppress point"
        this.isSuppressed = false;
        // Depending on where/when mouse events occured our state may no longer be valid.
        // Reset that state when this method is called, assuming that it will be called
        // at appropriate times.
        this.possible = true;
    };
    Hover.prototype.Cancel = function () {
        this.ClearTimeout();
        this.startX = 0;
        this.startY = 0;
        this.possible = true;
    };
    Hover.prototype.ClearTimeout = function () {
        this.hoverTimeout = MiscUtil_1.MiscUtil.ClearTimeout(this.hoverTimeout);
    };
    Hover.prototype.PastSlop = function (e) {
        var touch = e.touches[0];
        var diffX = Math.abs(touch.pageX - this.startX);
        var diffY = Math.abs(touch.pageY - this.startY);
        return (diffX + diffY) > this.ZoomAdjustedSlop;
    };
    Hover.prototype.GetParam = function (e) {
        var param = new Gesture_1.GestureEventInfo();
        param.pageX = e.changedTouches[0].pageX;
        param.pageY = e.changedTouches[0].pageY;
        param.clientX = e.changedTouches[0].clientX;
        param.clientY = e.changedTouches[0].clientY;
        return param;
    };
    Hover.HoverTime = 150;
    Hover.FastHoverTime = 120;
    return Hover;
}(Gesture_1.Gesture));
exports.Hover = Hover;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EventHandleSpec_1 = __webpack_require__(7);
var VizclientUtils_1 = __webpack_require__(1);
var MiscUtil_1 = __webpack_require__(0);
var NormalizedEvent_1 = __webpack_require__(5);
var TableauEventHandler_1 = __webpack_require__(8);
var TypeUtil_1 = __webpack_require__(2);
/**
 *
 * This subclass adds additional hooks to TableauEventHandler for React to use.
 * With react, the actual DOM element won't be available right away (React uses virtual DOM), therefore
 * operation involving the actual DOM element will need to be handled on some later time (or simply on demand).
 *
 */
var TableauEventHandlerForReact = /** @class */ (function (_super) {
    __extends(TableauEventHandlerForReact, _super);
    function TableauEventHandlerForReact() {
        var _this = _super.call(this) || this;
        _this.eventHandlingAttributesForReact = _this.GetEventHandlingAttributesForReact();
        return _this;
    }
    Object.defineProperty(TableauEventHandlerForReact.prototype, "EventHandlingAttributesForReact", {
        get: function () {
            return this.eventHandlingAttributesForReact;
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Factory function for when the caller could not provide the DOM element and the event handling
    * specs at the same time. This allows the caller to call UpdateEventHandleSpec at some later time.
    * React uses this so it can update the spec once it actually has a DOM element that is rendered.
    */
    TableauEventHandlerForReact.CreateEmpty = function () {
        return new TableauEventHandlerForReact();
    };
    /**
    * Useful when creating the TableauEventHandler and specifying the domElement + specs needs
    * to be separate. React components can call this once its dom element is actually rendered.
    * @param {HTMLElement} domElement - Element on which the event handler should be attached upon.
    * @param {EventHandleSpec} config - Event handling specification.
    */
    TableauEventHandlerForReact.prototype.UpdateEventHandleSpec = function (domElement, config) {
        this.config = !MiscUtil_1.MiscUtil.IsNullOrUndefined(config) ? config : new EventHandleSpec_1.EventHandleSpec();
        this.config.DomElement = domElement;
        this.ConfigureDomElem(domElement);
        // If we have a press Drag, set up the callback modifications
        this.SetupEventRecognizer(this.config);
    };
    /**
    * A mapping between the standard browser event names and event names recognized by React.
    * We need to know this to forward the correct event names from react components to the TableauEventHandler.
    */
    TableauEventHandlerForReact.LookupReactEventName = function (browserEventName) {
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(TableauEventHandlerForReact.browserEventToReactEvent)) {
            TableauEventHandlerForReact.browserEventToReactEvent = {};
            TableauEventHandlerForReact.browserEventToReactEvent["touchstart" /* TouchStart */] = "onTouchStart" /* onTouchStart */;
            TableauEventHandlerForReact.browserEventToReactEvent["touchmove" /* TouchMove */] = "onTouchMove" /* onTouchMove */;
            TableauEventHandlerForReact.browserEventToReactEvent["touchend" /* TouchEnd */] = "onTouchEnd" /* onTouchEnd */;
            TableauEventHandlerForReact.browserEventToReactEvent["touchcancel" /* TouchCancel */] = "onTouchCancel" /* onTouchCancel */;
            TableauEventHandlerForReact.browserEventToReactEvent["mousedown" /* MouseDown */] = "onMouseDown" /* onMouseDown */;
            TableauEventHandlerForReact.browserEventToReactEvent["mousemove" /* MouseMove */] = "onMouseMove" /* onMouseMove */;
            TableauEventHandlerForReact.browserEventToReactEvent["mouseup" /* MouseUp */] = "onMouseUp" /* onMouseUp */;
            TableauEventHandlerForReact.browserEventToReactEvent["mouseout" /* MouseOut */] = "onMouseOut" /* onMouseOut */;
            TableauEventHandlerForReact.browserEventToReactEvent["scroll" /* Scroll */] = "onScroll" /* onScroll */;
            TableauEventHandlerForReact.browserEventToReactEvent["contextmenu" /* ContextMenu */] = "onContextMenu" /* onContextMenu */;
        }
        return TableauEventHandlerForReact.browserEventToReactEvent[browserEventName];
    };
    /**
    * Get attributes containing event handlers that will forward events which TableauEventHandler cares about.
    * @returns Base HTMLAttributes object that will contain event handlers that forward react events to TableauEventHandler.
    */
    TableauEventHandlerForReact.prototype.GetEventHandlingAttributesForReact = function () {
        var _this = this;
        var attrs = {};
        var handler = function (evt) {
            var e = NormalizedEvent_1.NormalizedEvent.Create(evt.nativeEvent, _this.config.DomElement, evt);
            _this.handler(e);
        };
        NormalizedEvent_1.NormalizedEvent.AllHandledEvents.forEach(function (handledEvent) {
            var reactEvent = TableauEventHandlerForReact.LookupReactEventName(handledEvent);
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(reactEvent)) {
                TypeUtil_1.TypeUtil.SetField(attrs, reactEvent.toString(), handler);
            }
            else {
                VizclientUtils_1.Logger.Debug("Can't find a matching React.js event name for " + handledEvent);
            }
        });
        return attrs;
    };
    TableauEventHandlerForReact.browserEventToReactEvent = null;
    return TableauEventHandlerForReact;
}(TableauEventHandler_1.TableauEventHandler));
exports.TableauEventHandlerForReact = TableauEventHandlerForReact;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(3);
var browser_support_1 = __webpack_require__(4);
var DisposableHolder_1 = __webpack_require__(36);
var Delegate_1 = __webpack_require__(9);
var DropResult_1 = __webpack_require__(23);
var EmbeddedCustomCursor_1 = __webpack_require__(10);
var EventUtils_1 = __webpack_require__(11);
var SimplifiedDragSafeGlass_1 = __webpack_require__(37);
var VizclientUtils_1 = __webpack_require__(1);
var MiscUtil_1 = __webpack_require__(0);
var TableauEventHandler_1 = __webpack_require__(8);
var TypeUtil_1 = __webpack_require__(2);
var WindowHelper_1 = __webpack_require__(38);
// Helper functions ---------------------------
function IsNullOrEmpty(s) {
    return MiscUtil_1.MiscUtil.IsNullOrUndefined(s) || s.length === 0;
}
// tslint:disable-next-line:no-any
function StopEvent(e) {
    e.stopPropagation();
    e.preventDefault();
}
// This enum should match draginstancetype enum
var DragInstanceType;
(function (DragInstanceType) {
    DragInstanceType["Unknown"] = "unknown";
})(DragInstanceType || (DragInstanceType = {}));
// -------------------------
/// <summary>
/// Global manager of drag/drop process.  Responsible for recognizing drag events and working with instances of
/// <see cref="IDragSource"/> and <see cref="IDropTarget"/> to perform drag/drop operations.
/// </summary>
var DragDropManager = /** @class */ (function () {
    function DragDropManager() {
        // note: Application will call DragDropManager.Init() during startup to attach an event handler to Body
    }
    DragDropManager.initialize = function () {
        DragDropManager.dragSpec = new EventUtils_1.EventHandleSpec();
        DragDropManager.dragSpec.dragStart = DragDropManager.dragStart;
        DragDropManager.dragSpec.dragMove = DragDropManager.dragMove;
        DragDropManager.dragSpec.dragEnd = DragDropManager.dragEnd;
        DragDropManager.dragSpec.pressEnd = DragDropManager.dragEnd;
        DragDropManager.dragSpec.firstTouch = DragDropManager.firstTouch;
        DragDropManager.dragDisposables = new DisposableHolder_1.DisposableHolder();
    };
    DragDropManager.add_dragStarted = function (ev) {
        DragDropManager.dragStarted.add(ev);
    };
    DragDropManager.remove_dragStarted = function (ev) {
        DragDropManager.dragStarted.remove(ev);
    };
    DragDropManager.add_dragMoved = function (ev) {
        DragDropManager.dragMoved.add(ev);
    };
    DragDropManager.remove_dragMoved = function (ev) {
        DragDropManager.dragMoved.remove(ev);
    };
    DragDropManager.add_dragEnded = function (ev) {
        DragDropManager.dragEnded.add(ev);
    };
    DragDropManager.remove_dragEnded = function (ev) {
        DragDropManager.dragEnded.remove(ev);
    };
    DragDropManager.add_currentTargetChanged = function (ev) {
        DragDropManager.currentTargetChanged.add(ev);
    };
    DragDropManager.remove_currentTargetChanged = function (ev) {
        DragDropManager.currentTargetChanged.remove(ev);
    };
    DragDropManager.setStartDragHandler = function (takeOver) {
        if (DragDropManager.dragTakeOver === undefined) {
            DragDropManager.dragTakeOver = takeOver;
            return function () { return DragDropManager.unsetStartDragHandler(); };
        }
        // drag already taken over
        return null;
    };
    DragDropManager.unsetStartDragHandler = function () {
        DragDropManager.dragTakeOver = undefined;
    };
    Object.defineProperty(DragDropManager, "isDragging", {
        get: function () {
            return !MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.CurrentDrag);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragDropManager, "LastDragEvent", {
        get: function () {
            return DragDropManager.get_lastDragEvent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragDropManager, "CurrentDrag", {
        get: function () {
            return DragDropManager.get_currentDrag();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragDropManager, "CurrentTarget", {
        get: function () {
            return DragDropManager.get_currentTarget();
        },
        set: function (value) {
            var changed = DragDropManager.currentTarget !== value;
            DragDropManager.currentTarget = value;
            if (changed && !MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.currentTargetChanged)) {
                DragDropManager.currentTargetChanged.invoke(DragDropManager.currentTarget);
            }
        },
        enumerable: true,
        configurable: true
    });
    /// <summary>
    /// Called from the Application when it's safe to acess the Document body
    /// </summary>
    DragDropManager.init = function () {
        if (DragDropManager.dragDropEventHandler === undefined) {
            DragDropManager.dragDropEventHandler = new TableauEventHandler_1.TableauEventHandler(document.body, DragDropManager.dragSpec);
        }
    };
    DragDropManager.addClassSVGCompatible = function (targetElement, className) {
        var element = targetElement[0];
        var classNamesString = element.getAttribute('class');
        if (IsNullOrEmpty(classNamesString)) {
            element.setAttribute('class', className);
            return;
        }
        var classNamesArray = classNamesString.split(' ');
        if (classNamesArray.indexOf(className) === -1) {
            element.setAttribute('class', classNamesArray.concat(className).join(' '));
        }
    };
    DragDropManager.removeClassSVGCompatible = function (targetElement, className) {
        var element = targetElement[0];
        var classNamesString = element.getAttribute('class');
        if (IsNullOrEmpty(classNamesString)) {
            return;
        }
        var classNamesArray = classNamesString.split(' ');
        var classNameIndex = classNamesArray.indexOf(className);
        if (classNameIndex >= 0) {
            classNamesArray.splice(classNameIndex, 1);
            element.setAttribute('class', classNamesArray.join(' '));
        }
    };
    DragDropManager.attachDropTarget = function (targetElement, dropTarget) {
        targetElement.attr(DragDropManager.DropTargetAttr, '1');
        DragDropManager.addClassSVGCompatible(targetElement, DragDropManager.DropTargetClass);
        targetElement.data(DragDropManager.DropTargetDataKey, dropTarget);
    };
    DragDropManager.detachDropTarget = function (targetElement) {
        targetElement.removeAttr(DragDropManager.DropTargetAttr);
        targetElement.removeData(DragDropManager.DropTargetDataKey);
        DragDropManager.removeClassSVGCompatible(targetElement, DragDropManager.DropTargetClass);
    };
    DragDropManager.isDropTarget = function (targetElement) {
        return !MiscUtil_1.MiscUtil.IsNullOrUndefined(targetElement.attr(DragDropManager.DropTargetAttr));
    };
    DragDropManager.attachDragSource = function (sourceElement, dragSource) {
        sourceElement.attr(DragDropManager.DragSourceAttr, '1');
        sourceElement.data(DragDropManager.DragSourceDataKey, dragSource);
    };
    DragDropManager.removeDragSource = function (sourceElement) {
        sourceElement.removeData(DragDropManager.DragSourceDataKey);
        sourceElement.removeAttr(DragDropManager.DragSourceAttr);
    };
    DragDropManager.isDragSource = function (sourceElement) {
        return !MiscUtil_1.MiscUtil.IsNullOrUndefined(sourceElement.attr(DragDropManager.DragSourceAttr));
    };
    DragDropManager.createDragGlass = function () {
        DragDropManager.dragGlass = new SimplifiedDragSafeGlass_1.SimplifiedDragSafeGlass();
        DragDropManager.dragGlass.show();
        if (DragDropManager.CurrentDrag.get_hasPayload()
            && DragDropManager.CurrentDrag.get_dragType() === "dragmove" /* dragmove */) {
            DragDropManager.setDragCursor(EmbeddedCustomCursor_1.EmbeddedCustomCursor.copyFromElement(DragDropManager.firstTouchDragElement));
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.dragGlass.Element)) {
            DragDropManager.dragGlassEventHandler =
                new TableauEventHandler_1.TableauEventHandler(DragDropManager.dragGlass.Element[0], DragDropManager.dragSpec);
            DragDropManager.dragDisposables = new DisposableHolder_1.DisposableHolder();
            DragDropManager.dragDisposables.add(DragDropManager.dragGlass);
            DragDropManager.dragDisposables.add(DragDropManager.dragGlassEventHandler);
            DragDropManager.dragDisposables.add(DragDropManager.BindWithDispose($(document.body), "keydown" /* KeyDown */, DragDropManager.handleKeyDown));
            DragDropManager.dragDisposables.add(DragDropManager.BindWithDispose($(document.body), "keyup" /* KeyUp */, DragDropManager.handleKeyUp));
        }
    };
    DragDropManager.destroyDragGlass = function () {
        DragDropManager.dragDisposables.dispose();
        DragDropManager.dragDisposables = new DisposableHolder_1.DisposableHolder();
    };
    DragDropManager.startDrag = function (draggedObject, e, optionalDragElement) {
        if (optionalDragElement === void 0) { optionalDragElement = null; }
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(draggedObject) || MiscUtil_1.MiscUtil.IsNullOrUndefined(e) || !draggedObject.get_hasPayload()) {
            return;
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(optionalDragElement)) {
            DragDropManager.firstTouchDragElement = optionalDragElement;
        }
        DragDropManager.lastDragEvent = e;
        DragDropManager.cancelDrag();
        DragDropManager.currentDrag = draggedObject;
        DragDropManager.setDragAvatar(DragDropManager.CurrentDrag.get_dragAvatar());
        DragDropManager.updateAvatarPosition();
        DragDropManager.avatarUpdateInterval = WindowHelper_1.WindowHelper.RequestAnimationFrame(DragDropManager.updateAvatarPosition);
        DragDropManager.createDragGlass();
        DragDropManager.setDragTarget(e);
        // check if somebody wants to take over the drag process (dragdrop contract on desktop for example)
        if (DragDropManager.dragTakeOver !== undefined) {
            if (DragDropManager.dragTakeOver(draggedObject, e)) {
                VizclientUtils_1.Logger.Debug('Drag started but taken over');
                DragDropManager.cancelDrag();
                return;
            }
        }
        VizclientUtils_1.Logger.Debug("Drag started " + DragDropManager.CurrentDrag);
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.dragStarted)) {
            DragDropManager.dragStarted.invoke(DragDropManager.CurrentDrag);
        }
    };
    DragDropManager.cancelDrag = function (drag) {
        if (drag === void 0) { drag = null; }
        if (!DragDropManager.isDragging) {
            return;
        }
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(drag) || drag === DragDropManager.CurrentDrag) {
            VizclientUtils_1.Logger.Debug('Drag cancelled');
            DragDropManager.CurrentDrag.cancelDrag();
            DragDropManager.endDrag(null /*target:*/, true /*cancelled:*/, false /*ctrlKeyPressed:*/, function () { return $.Deferred().resolve(false); } /*dropAction:*/);
        }
    };
    DragDropManager.drop = function (target, isCopyDrop, isShiftDrop, isRightDrop) {
        if (isCopyDrop === void 0) { isCopyDrop = false; }
        if (isShiftDrop === void 0) { isShiftDrop = false; }
        if (isRightDrop === void 0) { isRightDrop = false; }
        DragDropManager.currentDrag.isCopyDrag = isCopyDrop;
        DragDropManager.currentDrag.isShiftDrag = isShiftDrop;
        DragDropManager.currentDrag.isRightDrag = isRightDrop;
        DragDropManager.endDrag(target, false /*cancelled:*/, DragDropManager.CurrentDrag.isCopyDrag /*ctrlKeyPressed:*/, function () {
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(target)) {
                return target.acceptDrop(DragDropManager.CurrentDrag).always(function (success) {
                    VizclientUtils_1.Logger.Debug("Drop: " + success + " " + target);
                });
            }
            else {
                VizclientUtils_1.Logger.Debug('Drop with no target');
                DragDropManager.CurrentDrag.dropToNowhereAction();
                return $.Deferred().resolve(true);
            }
        });
    };
    DragDropManager.firstTouch = function (e) {
        var src = $(e.target).closest(DragDropManager.DragSourceSelector);
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(src) || src.length === 0) {
            DragDropManager.firstTouchDragSource = null;
            DragDropManager.firstTouchDragElement = null;
            return;
        }
        DragDropManager.firstTouchDragSource = src.data(DragDropManager.DragSourceDataKey);
        DragDropManager.firstTouchDragElement = src;
    };
    DragDropManager.dragEnd = function (e) {
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.CurrentDrag)) {
            return;
        }
        switch (DragDropManager.CurrentDrag.get_dragType()) {
            case "dragmove" /* dragmove */:
                DragDropManager.endDrag(null /*target:*/, false /*cancelled:*/, false /*ctrlKeyPressed:*/, function () {
                    DragDropManager.CurrentDrag.endDragAt(e);
                    return $.Deferred().resolve(true);
                });
                break;
            case "dragmovedrop" /* dragmovedrop */:
            case "dragdrop" /* dragdrop */:
                DragDropManager.drop(DragDropManager.CurrentTarget, e.IsCtrlKey, e.shiftKey, e.IsRightMouseEvent);
                break;
            default:
                break;
        }
    };
    DragDropManager.dragMove = function (e) {
        if (!DragDropManager.isDragging) {
            return;
        }
        StopEvent(e);
        DragDropManager.lastDragEvent = e;
        DragDropManager.currentDrag.isCopyDrag = e.IsCtrlKey;
        DragDropManager.currentDrag.isShiftDrag = e.shiftKey;
        WindowHelper_1.WindowHelper.ClearSelection();
        var now = Date.now();
        if ((now - DragDropManager.lastAvatarUpdate) > 75) {
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.avatarUpdateInterval)) {
                WindowHelper_1.WindowHelper.CancelAnimationFrame(DragDropManager.avatarUpdateInterval);
            }
            DragDropManager.updateAvatarPosition();
        }
        DragDropManager.setDragTarget(e);
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.dragMoved)) {
            DragDropManager.dragMoved.invoke(DragDropManager.CurrentDrag);
        }
    };
    DragDropManager.handleKeyDown = function (e) {
        if (!DragDropManager.isDragging) {
            return;
        }
        StopEvent(e);
        switch (e.which) {
            case 16 /* Shift */:
                DragDropManager.lastDragEvent.shiftKey = true;
                DragDropManager.dragMove(DragDropManager.LastDragEvent);
                break;
            default:
                break;
        }
    };
    DragDropManager.handleKeyUp = function (e) {
        if (!DragDropManager.isDragging) {
            return;
        }
        StopEvent(e);
        switch (e.which) {
            case 16 /* Shift */:
                DragDropManager.lastDragEvent.shiftKey = false;
                DragDropManager.dragMove(DragDropManager.LastDragEvent);
                break;
            case 27 /* Escape */:
                DragDropManager.cancelDrag(DragDropManager.CurrentDrag);
                break;
            default:
                break;
        }
    };
    DragDropManager.setDragTarget = function (e) {
        switch (DragDropManager.CurrentDrag.get_dragType()) {
            case "dragmove" /* dragmove */:
                DragDropManager.CurrentDrag.moveTo(e);
                break;
            case "dragdrop" /* dragdrop */:
                DragDropManager.setTargetForDrop(e);
                break;
            case "dragmovedrop" /* dragmovedrop */:
                DragDropManager.CurrentDrag.moveTo(e);
                DragDropManager.setTargetForDrop(e);
                break;
            default:
                break;
        }
    };
    DragDropManager.setTargetForDrop = function (e) {
        var target = DragDropManager.findDropTarget(e);
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.CurrentTarget)) {
            if (DragDropManager.CurrentTarget !== target) {
                DragDropManager.CurrentTarget.dragExit(DragDropManager.CurrentDrag);
            }
            else if (DragDropManager.CurrentTarget.get_feedbackType() === "dropfeedbackuponentry" /* dropfeedbackuponentry */) {
                VizclientUtils_1.Logger.Debug("Drag move: target=" + DragDropManager.CurrentTarget);
                return;
            }
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(target)) {
            var newTarget = target.dragOver(DragDropManager.CurrentDrag);
            while (!MiscUtil_1.MiscUtil.IsNullOrUndefined(newTarget) && newTarget !== target) {
                target = newTarget;
                newTarget = target.dragOver(DragDropManager.CurrentDrag);
            }
            target = newTarget;
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(target)) {
            DragDropManager.setDragCursor(target.getDropCursor(DragDropManager.CurrentDrag));
        }
        else {
            VizclientUtils_1.Logger.Debug('No target');
            DragDropManager.setDragCursor(DragDropManager.CurrentDrag.get_defaultDropCursor());
        }
        DragDropManager.CurrentTarget = target;
    };
    DragDropManager.setDragCursor = function (c) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.dragGlass)
            && !MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.dragGlass.Element)) {
            c.setCursor(DragDropManager.dragGlass.Element);
        }
    };
    DragDropManager.dragStart = function (e) {
        if (DragDropManager.isDragging) {
            return;
        }
        var ds = DragDropManager.firstTouchDragSource;
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(ds)) {
            var src = $(e.target).closest(DragDropManager.DragSourceSelector);
            ds = src.data(DragDropManager.DragSourceDataKey);
        }
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(ds)) {
            return;
        }
        // Make sure the drag source can accept this drag type.
        if (ds.acceptsDragType() === 1 /* LeftMouse */ && e.IsMouseEvent && !e.IsLeftMouseEvent) {
            return;
        }
        var drag = ds.startDrag(e);
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(drag)) {
            return;
        }
        DragDropManager.startDrag(drag, e);
    };
    DragDropManager.endDrag = function (target, cancelled, ctrlKeyPressed, dropAction) {
        DragDropManager.setDragAvatar(null);
        DragDropManager.destroyDragGlass();
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.avatarUpdateInterval)) {
            WindowHelper_1.WindowHelper.CancelAnimationFrame(DragDropManager.avatarUpdateInterval);
            DragDropManager.avatarUpdateInterval = null;
        }
        dropAction().always(function (success) {
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.dragEnded)) {
                DragDropManager.dragEnded.invoke(new DropResult_1.DropResult(DragDropManager.CurrentDrag, target, success, cancelled, ctrlKeyPressed));
            }
            DragDropManager.currentDrag = null;
            DragDropManager.CurrentTarget = null;
        });
    };
    DragDropManager.setDragAvatar = function (newAvatar) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.dragAvatar)) {
            DragDropManager.dragAvatar.get_rootElement().detach();
            var d = DragDropManager.dragAvatar;
            d.dispose();
            DragDropManager.dragAvatar = null;
        }
        DragDropManager.dragAvatar = newAvatar;
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.dragAvatar)) {
            DragDropManager.dragAvatar.get_rootElement().addClass('dragAvatar').css('position', 'absolute').css('pointer-events', 'none');
            DragDropManager.dragAvatar.addToDom($('body'));
        }
    };
    DragDropManager.updateAvatarPosition = function () {
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(DragDropManager.dragAvatar)) {
            return;
        }
        var computeCoord = function (totalDimension, dragEventPos, avatarDimension) {
            if (dragEventPos < (avatarDimension / 2)) {
                return 0;
            }
            else if (dragEventPos > (totalDimension - (avatarDimension / 2))) {
                return totalDimension - avatarDimension;
            }
            else {
                return dragEventPos - (avatarDimension / 2);
            }
        };
        var body = DragDropManager.documentBodyOverride === undefined ? document.body : DragDropManager.documentBodyOverride();
        DragDropManager.setElementPosition(DragDropManager.dragAvatar.get_rootElement(), computeCoord(body.scrollWidth, DragDropManager.LastDragEvent.pageX, Math.round(DragDropManager.dragAvatar.get_rootElement().outerWidth())), computeCoord(body.scrollHeight, DragDropManager.LastDragEvent.pageY, Math.round(DragDropManager.dragAvatar.get_rootElement().outerHeight())));
        DragDropManager.lastAvatarUpdate = Date.now();
        DragDropManager.avatarUpdateInterval = WindowHelper_1.WindowHelper.RequestAnimationFrame(DragDropManager.updateAvatarPosition);
    };
    DragDropManager.getElementFromPointInternal = function (e) {
        DragDropManager.disableHitTestsOnDragGlass();
        var x = e.clientX;
        var y = e.clientY;
        if (browser_support_1.BrowserSupport.UseAlternateHitStrategy()) {
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(e.touches) && e.touches.length > 0 && !MiscUtil_1.MiscUtil.IsNullOrUndefined(e.touches[0].screenX)) {
                x = e.touches[0].screenX;
                y = e.touches[0].screenY;
            }
            else {
                x = TypeUtil_1.TypeUtil.GetField(e.originalEvent, 'screenX');
                y = TypeUtil_1.TypeUtil.GetField(e.originalEvent, 'screenY');
            }
        }
        var overNode = $(null);
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(x) && !MiscUtil_1.MiscUtil.IsNullOrUndefined(y)) {
            overNode = $(document.elementFromPoint(x, y));
        }
        DragDropManager.enableHitTestsOnDragGlass();
        return overNode;
    };
    DragDropManager.getElementFromPoint = function (e) {
        return DragDropManager.getElementFromPointInternal(e);
    };
    DragDropManager.disableHitTestsOnDragGlass = function () {
        DragDropManager.registeredDragGlass.forEach(function (g) {
            g.disableHitTests();
        });
    };
    DragDropManager.enableHitTestsOnDragGlass = function () {
        DragDropManager.registeredDragGlass.forEach(function (g) {
            g.enableHitTests();
        });
    };
    DragDropManager.findDropTarget = function (e) {
        if (!DragDropManager.isDragging) {
            return null;
        }
        var dragInstance = DragDropManager.CurrentDrag;
        var targets = DragDropManager.getPotentialDropTargets(e);
        for (var i = 0; i < targets.length; i++) {
            var hit = targets[i];
            var hitTarget = hit.data(DragDropManager.DropTargetDataKey);
            if (DragDropManager.canAccept(hitTarget, dragInstance)) {
                return hitTarget.getDropTarget(hit);
            }
        }
        return null;
    };
    DragDropManager.getPotentialDropTargets = function (e) {
        var targets = [];
        var dropTarget = DragDropManager.getElementFromPoint(e).closest(DragDropManager.DropTargetSelector);
        // In order to handle edge cases, search the next pixel to the left if no drop targets are found. This helps mitigate issues where
        // Document.ElementFromPoint() has an off-by-1 error resulting in an element farther up the DOM hierarchy being chosen, which will
        // not find the right drop target.
        if (dropTarget.length === 0) {
            --e.clientX;
            dropTarget = DragDropManager.getElementFromPoint(e).closest(DragDropManager.DropTargetSelector);
        }
        if (dropTarget.length > 0) {
            targets.push(dropTarget);
            dropTarget.parents(DragDropManager.DropTargetSelector).each(function (unusedindex, element) {
                targets.push($(element));
            });
        }
        return targets;
    };
    DragDropManager.canAccept = function (dropTarget, dragInstance) {
        return !MiscUtil_1.MiscUtil.IsNullOrUndefined(dropTarget)
            && !MiscUtil_1.MiscUtil.IsNullOrUndefined(dragInstance)
            && !MiscUtil_1.MiscUtil.IsNullOrUndefined(dropTarget.dragOver(dragInstance));
    };
    DragDropManager.registerDragGlass = function (g) {
        DragDropManager.registeredDragGlass.push(g);
    };
    DragDropManager.unregisterDragGlass = function (g) {
        DragDropManager.registeredDragGlass = DragDropManager.registeredDragGlass.filter(function (glass) { return glass !== g; });
    };
    // <summary>
    /// Binds an event handler to a jQuery object and returns a disposable for unbinding the same event.
    /// </summary>
    /// <see cref="jQueryObject.On(string,jQueryApi.jQueryEventHandler)"/>
    /// <param name="element">The element(s) to bind to</param>
    /// <param name="eventName">The event name</param>
    /// <param name="handler">The event handler</param>
    /// <returns>A disposable that when called will unbind bound event handler</returns>
    // tslint:disable-next-line:no-any
    DragDropManager.BindWithDispose = function (element, eventName, handler) {
        var eventId = eventName + "." + ++DragDropManager.eventCounter;
        element.on(eventId, handler);
        return new DisposableHolder_1.CallOnDispose(function () { element.off(eventId); });
    };
    /// <summary>
    /// Sets an elements position using either CSS transform or absolute positioning, depending on what
    /// is supported.  Assumes element is added to body.
    /// </summary>
    DragDropManager.setElementPosition = function (e, pageX, pageY, duration, useTransform) {
        if (duration === void 0) { duration = null; }
        if (useTransform === void 0) { useTransform = true; }
        if (useTransform) {
            var styling = {
                top: '0px',
                left: '0px'
            };
            var transformVal = "translate3d(" + pageX + "px, " + pageY + "px, 0px)";
            styling[browser_support_1.BrowserSupport.CssTransformName()] = transformVal;
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(duration)) {
                styling[browser_support_1.BrowserSupport.CssTransitionName() + '-duration'] = duration;
            }
            e.css(styling);
        }
        else {
            var css = {
                position: 'absolute',
                top: pageY + "px",
                left: pageX + "px"
            };
            css[browser_support_1.BrowserSupport.CssTransformName()] = '';
            e.css(css);
        }
    };
    // Redirection for saltarelle generated javascript getters.
    // Stringly typed jasmine unittests spy on these functions with the specific names.
    // TODO: These could be removed once the saltarelle unittests do not depend on them.
    DragDropManager.get_isDragging = function () { return DragDropManager.isDragging; };
    DragDropManager.get_lastDragEvent = function () { return DragDropManager.lastDragEvent; };
    DragDropManager.get_currentTarget = function () { return DragDropManager.currentTarget; };
    DragDropManager.get_currentDrag = function () { return DragDropManager.currentDrag; };
    // These are shortcuts for jasmine unittests to trigger the events directly.
    DragDropManager.triggerEventCurrentTargetChanged = function (d) {
        DragDropManager.currentTargetChanged.invoke(d);
    };
    DragDropManager.triggerEventDragEnded = function (d) {
        DragDropManager.dragEnded.invoke(d);
    };
    DragDropManager.isPresModelDragInstance = function (d) {
        return !MiscUtil_1.MiscUtil.IsNullOrUndefined(d)
            && d.get_hasPayload()
            && d.presmodelType !== undefined
            && d.presmodelType !== ''
            && d.presmodelType !== DragInstanceType.Unknown;
    };
    /// <summary>
    /// Attribute applied to elements to mark them as drag sources.
    /// </summary>
    DragDropManager.DragSourceAttr = 'data-tab-drag-source';
    DragDropManager.DragSourceSelector = '[data-tab-drag-source]';
    DragDropManager.DragSourceDataKey = 'tabDragSource';
    DragDropManager.DropTargetAttr = 'data-tab-drop-target';
    /// <summary>
    /// DEPRECATED: TFSID:679837 - here for backwards compat with automation.  To be removed once
    /// automation has been updated to use the ATTR instead.
    /// </summary>
    DragDropManager.DropTargetClass = 'tabDropTarget';
    DragDropManager.DropTargetSelector = '[data-tab-drop-target]';
    DragDropManager.DropTargetDataKey = 'tabDropTarget';
    DragDropManager.registeredDragGlass = [];
    DragDropManager.dragStarted = new Delegate_1.Delegate();
    DragDropManager.dragMoved = new Delegate_1.Delegate();
    DragDropManager.dragEnded = new Delegate_1.Delegate();
    DragDropManager.currentTargetChanged = new Delegate_1.Delegate();
    DragDropManager.dragTakeOver = undefined;
    DragDropManager.eventCounter = 0;
    // Redirect helper functions for unittests ----------------------------------------------
    // Test hook
    DragDropManager.documentBodyOverride = undefined;
    return DragDropManager;
}());
exports.DragDropManager = DragDropManager;
// call static initializer
DragDropManager.initialize();


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DropResult = /** @class */ (function () {
    function DropResult(drag, target, dropAccepted, canceled, isCopyDrop) {
        this.drag = drag;
        this.target = target;
        this.dropAccepted = dropAccepted;
        this.canceled = canceled;
        this.isCopyDrop = isCopyDrop;
    }
    return DropResult;
}());
exports.DropResult = DropResult;


/***/ }),
/* 24 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var VizclientUtils_1 = __webpack_require__(1);
var Gesture_1 = __webpack_require__(6);
var GlobalUIEvents_1 = __webpack_require__(15);
var MiscUtil_1 = __webpack_require__(0);
/**
 * Implements the tap, press, and double tap discrete gestures
 */
var Discrete = /** @class */ (function (_super) {
    __extends(Discrete, _super);
    /**
     * Initializes a new instance of the Discrete class
     * @param {EventHandleSpec} config - GestureHandleHandleSpec object
     */
    function Discrete(config) {
        var _this = _super.call(this, config, "discrete" /* Discrete */, /*hasSlop*/ true) || this;
        _this.doneFirstTap = null;
        _this.startX = 0;
        _this.startY = 0;
        _this.possible = false;
        _this.startTime = 0;
        return _this;
    }
    Discrete.prototype.Start = function (e) {
        var _this = this;
        var touch = e.touches[0];
        if (e.touches.length !== this.numTouches) {
            this.Reset();
            return;
        }
        var param = this.GetParams(e);
        if (!this.ProcessGlobalEvent(GlobalUIEvents_1.GlobalUIEvents.FireFirstTouch, e)) {
            return;
        }
        // regular firstTouch happens only if not canceled elsewhere
        this.Fire("firstTouch" /* FirstTouch */, e, param);
        this.startX = touch.pageX;
        this.startY = touch.pageY;
        this.possible = true;
        this.pressTimer = MiscUtil_1.MiscUtil.ClearTimeout(this.pressTimer);
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(this.doneFirstTap)) {
            this.startTime = new Date().getTime();
            this.potentialPressTimer = window.setTimeout(function () { return _this.DoPotentialPress(e, param); }, Gesture_1.Gesture.PotentialPressTime);
            this.pressTimer = window.setTimeout(function () { return _this.DoPress(e, param); }, Gesture_1.Gesture.PressTime);
        }
    };
    Discrete.prototype.Move = function (e) {
        if (this.PastSlop(e)) {
            this.Reset();
        }
        if (e.type === "touchmove" /* TouchMove */) {
            this.Fire("touchMove" /* TouchMove */, e, this.GetParams(e));
        }
    };
    Discrete.prototype.End = function (e) {
        var param = this.GetParams(e);
        if (this.isActivePress) {
            this.DoPressEnd(e, param);
        }
        this.CancelPress();
        // bugzid 39261: we only want to recognize left clicks for mouse events
        if (this.possible && (!VizclientUtils_1.FeatureFlags.WebAuthoringDragAggregation() || !e.IsMouseEvent || e.IsLeftMouseEvent)) {
            // first tap = potential tap, second tap = double tap
            if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.doneFirstTap) && this.doneFirstTap) {
                this.DoDoubleTap(e, param);
            }
            else {
                this.DoTap(e, param);
            }
        }
        // if we get a ContextMenu event, it means right-mouse was used and mouse up has
        // already been processed (ignored), so this.possible is going to be false
        if (e.type === "contextmenu" /* ContextMenu */) {
            if (!this.ProcessGlobalEvent(GlobalUIEvents_1.GlobalUIEvents.FireRightClick, e)) {
                return;
            }
            // TFSID888067 - When right click dragging for Aggregation pill, releasing triggers the right click on the
            // target pill, which shouldn't happen and doesn't happen on Desktop.
            // If coming out of a drag, we do not trigger the rightclick event and prevents the native contextmenu from
            // showing up.
            if (this.PastSlop(e)) {
                e.preventDefault();
            }
            else {
                this.DoRightClick(e, param);
            }
        }
        if (e.touches.length === 0) {
            if (!this.ProcessGlobalEvent(GlobalUIEvents_1.GlobalUIEvents.FireLastTouch, e)) {
                return;
            }
            this.Fire("lastTouch" /* LastTouch */, e, param);
        }
    };
    Discrete.prototype.Cancel = function () {
        this.Reset();
    };
    Discrete.prototype.Reset = function () {
        this.CancelPress();
        this.possible = false;
        this.doneFirstTap = null;
        this.isPotentialPress = false;
        this.isActivePress = false;
        this.doubleTapTimer = MiscUtil_1.MiscUtil.ClearTimeout(this.doubleTapTimer);
    };
    Discrete.prototype.DoEvent = function (eventName, e, param, options) {
        this.Fire(eventName, e, param);
        // tslint:disable-next-line:no-string-literal no-any whitespace strict-boolean-expressions
        if (options && options['reset']) {
            this.Reset();
        }
    };
    Discrete.prototype.DoDoubleTap = function (e, param) {
        this.doubleTapTimer = MiscUtil_1.MiscUtil.ClearTimeout(this.doubleTapTimer);
        this.DoEvent("doubleTap" /* DoubleTap */, e, param, { reset: true });
    };
    Discrete.prototype.DoPress = function (e, param) {
        this.isPotentialPress = false;
        if (!this.ProcessGlobalEvent(GlobalUIEvents_1.GlobalUIEvents.FirePress, e)) {
            return;
        }
        this.DoEvent("press" /* Press */, e, param, { reset: true });
        this.isActivePress = true;
    };
    Discrete.prototype.DoPotentialPress = function (e, param) {
        this.isPotentialPress = true;
        this.DoEvent("potentialPress" /* PotentialPress */, e, param);
    };
    Discrete.prototype.DoPressEnd = function (e, param) {
        this.DoEvent("pressEnd" /* PressEnd */, e, param);
        this.isActivePress = false;
    };
    Discrete.prototype.CancelPress = function () {
        this.potentialPressTimer = MiscUtil_1.MiscUtil.ClearTimeout(this.potentialPressTimer);
        this.pressTimer = MiscUtil_1.MiscUtil.ClearTimeout(this.pressTimer);
        if (this.isPotentialPress) {
            this.DoEvent("cancelPotentialPress" /* CancelPotentialPress */, {}, null);
        }
    };
    Discrete.prototype.DoTap = function (e, param) {
        var _this = this;
        // this is called on finger-up, so it's still just a potential tap
        this.doneFirstTap = true;
        if (!this.ProcessGlobalEvent(GlobalUIEvents_1.GlobalUIEvents.FireTap, e)) {
            return;
        }
        // only set the double tap timer if the config says we are looking for double taps
        if (this.Config.IsHandling("doubleTap" /* DoubleTap */)) {
            this.doubleTapTimer = window.setTimeout(function () {
                _this.Reset();
                _this.Fire("cancelPotentialDoubleTap" /* CancelPotentialDoubleTap */, e, param);
            }, 
            // tslint:disable-next-line:align
            Gesture_1.Gesture.DoubleTapTime - this.GetElapsedTime());
        }
        else {
            this.Reset();
        }
        // B38851 LOGIC CHANGE: fire tap immediately, without waiting to decide double-tap-ness
        this.Fire("tap" /* Tap */, e, param);
    };
    Discrete.prototype.DoRightClick = function (e, param) {
        this.Fire("rightClick" /* RightClick */, e, param);
    };
    /**
    * Publishes the global event and waits for handlers to handle the event before returning
    * @param {*} eventInvoker - Action that will fire appropriate event
    * @param {NormalizedEvent} e - the event to sent to the handlers
    * @returns true if the event was not canceled
    */
    Discrete.prototype.ProcessGlobalEvent = function (eventInvoker, e) {
        var _this = this;
        var canceled = false;
        var cancelCallback = function (preventDefault) {
            _this.Reset();
            if (preventDefault) {
                // Copied from EventUtil.StopEvent
                e.stopPropagation();
                e.preventDefault();
            }
            canceled = true;
        };
        eventInvoker(e, cancelCallback);
        return !canceled;
    };
    Discrete.prototype.GetElapsedTime = function () {
        return new Date().getTime() - this.startTime;
    };
    Discrete.prototype.PastSlop = function (e) {
        var touch = e.changedTouches[0];
        var zoomAdjustedSlop = this.ZoomAdjustedSlop;
        return Math.abs(touch.pageX - this.startX) > zoomAdjustedSlop || Math.abs(touch.pageY - this.startY) > zoomAdjustedSlop;
    };
    Discrete.prototype.GetParams = function (e) {
        var param = new Gesture_1.GestureEventInfo();
        param.pageX = e.changedTouches[0].pageX;
        param.pageY = e.changedTouches[0].pageY;
        param.clientX = e.changedTouches[0].clientX;
        param.clientY = e.changedTouches[0].clientY;
        // For discrete gestures, (PageX, PageY) is also the start of the gesture.
        param.startX = e.changedTouches[0].pageX;
        param.startY = e.changedTouches[0].pageY;
        return param;
    };
    return Discrete;
}(Gesture_1.Gesture));
exports.Discrete = Discrete;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
* Tableau Event handler needs this data to properly remove event listeners.
*/
var DomSubscriptionHandle = /** @class */ (function () {
    function DomSubscriptionHandle(domElement, eventHandler) {
        this.DomElement = domElement;
        this.EventHandler = eventHandler;
    }
    return DomSubscriptionHandle;
}());
exports.DomSubscriptionHandle = DomSubscriptionHandle;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// NOTE: See ApiCommand.cs for an explanation on why we need to fiddle with the namespaces
// #if BOOTSTRAP
// namespace Tableau.JavaScript.Vql.Bootstrap
// #else
// namespace Tableau.JavaScript.Vql.ApiShared
// #endif
var NonApiCommandName;
(function (NonApiCommandName) {
    NonApiCommandName["Bootstrap"] = "tableau.bootstrap";
    NonApiCommandName["Completed"] = "completed";
    NonApiCommandName["VisibleRectRequest"] = "layoutInfoReq";
    NonApiCommandName["VisibleRectResponse"] = "layoutInfoResp";
    NonApiCommandName["LegacyVizOffsetResp"] = "vizOffsetResp";
    NonApiCommandName["EnableVisibleRectCommunication"] = "tableau.enableVisibleRectCommunication";
    NonApiCommandName["TableauCompleted"] = "tableau.completed";
    NonApiCommandName["UnhandledException"] = "tableau.unhandledException";
    NonApiCommandName["Listening"] = "tableau.listening";
    NonApiCommandName["Responsive"] = "tableau.responsive";
    NonApiCommandName["ScaleFactorRequest"] = "sf?";
    NonApiCommandName["ScaleFactorResponse"] = "sf";
})(NonApiCommandName || (NonApiCommandName = {}));
exports.NonApiCommandName = NonApiCommandName;
/**
* Represents a legacy command that is sent across the iframe boundary.
* If you're making a new command, please use <see cref="ApiCommand"/> instead. This version is only intended to
* wrap legacy commands from viz_v1.
*/
/*[ScriptNamespace("tab")]*/
var NonApiCommand = /** @class */ (function () {
    // NOTE: this used to be a variadic param: parameters: (typescript ...string[]) (c# params string[] parameters)
    function NonApiCommand(name, parameters) {
        this.Name = name;
        this.parameters = parameters;
    }
    Object.defineProperty(NonApiCommand.prototype, "Parameters", {
        get: function () {
            return this.parameters;
        },
        enumerable: true,
        configurable: true
    });
    NonApiCommand.Parse = function (serialized) {
        var args = serialized.split(',');
        var name = args[0];
        var parameters = args.slice(1);
        return new NonApiCommand(name, parameters);
    };
    NonApiCommand.prototype.Serialize = function () {
        var message = new Array();
        message.push(this.Name.toString());
        message = message.concat(this.parameters);
        return message.join(',');
    };
    return NonApiCommand;
}());
exports.NonApiCommand = NonApiCommand;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiscUtil_1 = __webpack_require__(0);
var TypeUtil_1 = __webpack_require__(2);
var Param = /** @class */ (function () {
    function Param() {
    }
    Param.VerifyValue = function (param, paramName) {
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(param)) {
            var ex = Param.CreateArgumentNullOrUndefinedException(paramName);
            Param.ShowParameterAlert(ex);
            throw ex;
        }
    };
    Param.CreateArgumentNullOrUndefinedException = function (paramName) {
        var ex = new DOMException("{paramName} is null or undefined");
        TypeUtil_1.TypeUtil.SetField(ex, paramName, paramName);
        return ex;
    };
    Param.ShowParameterAlert = function (ex) {
        if (this.SuppressAlerts) {
            return;
        }
        // this try/catch block is so we can get the stack trace to display in the alert dialog
        try {
            throw ex;
        }
        catch (exceptionWithStack) {
            window.alert(Param.FormatExceptionMessage(exceptionWithStack));
        }
    };
    Param.FormatExceptionMessage = function (ex) {
        var message = '';
        // tslint:disable-next-line:no-any whitespace
        var stack = ex.stack;
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(stack)) {
            message = stack;
        }
        else {
            message = ex.message;
        }
        return message;
    };
    Param.SuppressAlerts = false;
    return Param;
}());
exports.Param = Param;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Gesture_1 = __webpack_require__(6);
/**
 * This class implements the pinch gesture
 */
var Pinch = /** @class */ (function (_super) {
    __extends(Pinch, _super);
    /**
     * Initializes a new instance of the Pinch class
     * @param {EventHandleSpec} config - GestureEventHandleSpec object
     */
    function Pinch(config) {
        var _this = _super.call(this, config, "pinch" /* Pinch */, /*hasSlop:*/ true, /*numTouches:*/ 2) || this;
        _this.pinching = false;
        return _this;
    }
    Pinch.prototype.Start = function (e) {
        if (e.touches.length < this.numTouches) {
            return;
        }
        if (this.pinching) {
            return;
        }
        this.touch1 = e.touches[0];
        this.touch2 = e.touches[1];
        this.startParams = this.GetStartParams();
        this.lastParams = this.startParams;
        var param = this.GetParams();
        this.Fire("pinchStart" /* PinchStart */, e, param);
        this.pinching = true;
    };
    Pinch.prototype.Move = function (e) {
        if (!this.pinching) {
            return;
        }
        if (e.touches.length < 2) {
            this.End(e); // Let's end the pinch
            return;
        }
        this.touch1 = e.touches[0];
        this.touch2 = e.touches[1];
        this.lastParams = this.GetParams();
        this.Fire("pinchMove" /* PinchMove */, e, this.lastParams);
    };
    Pinch.prototype.End = function (e) {
        if (e.touches.length > this.numTouches) {
            return;
        }
        if (this.pinching) {
            this.pinching = false;
            var param = this.GetParams();
            this.Fire("pinchEnd" /* PinchEnd */, e, param);
        }
    };
    Pinch.prototype.Cancel = function () {
        // Do nothing
    };
    Pinch.prototype.GetStartParams = function () {
        var t1 = this.touch1;
        var t2 = this.touch2;
        var distX = t2.pageX - t1.pageX;
        var distY = t2.pageY - t1.pageY;
        var distance = Math.sqrt((distX * distX) + (distY * distY));
        var centerX = (distX / 2) + t1.pageX;
        var centerY = (distY / 2) + t1.pageY;
        var params = new Gesture_1.GestureEventInfo();
        params.pageX = centerX;
        params.pageY = centerY;
        params.distance = distance;
        return params;
    };
    Pinch.prototype.GetParams = function () {
        var t1 = this.touch1;
        var t2 = this.touch2;
        var distX = t2.pageX - t1.pageX;
        var distY = t2.pageY - t1.pageY;
        var distance = Math.sqrt((distX * distX) + (distY * distY));
        var centerX = (distX / 2) + t1.pageX;
        var centerY = (distY / 2) + t1.pageY;
        var params = new Gesture_1.GestureEventInfo();
        params.pageX = centerX;
        params.pageY = centerY;
        params.scale = distance / this.startParams.distance;
        params.deltaX = centerX - this.startParams.pageX;
        params.deltaY = centerY - this.startParams.pageY;
        params.startX = this.startParams.pageX;
        params.startY = this.startParams.pageY;
        params.deltaXSinceLast = centerX - this.lastParams.pageX;
        params.deltaYSinceLast = centerY - this.lastParams.pageY;
        return params;
    };
    return Pinch;
}(Gesture_1.Gesture));
exports.Pinch = Pinch;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(3);
var browser_support_1 = __webpack_require__(4);
var MiscUtil_1 = __webpack_require__(0);
var NormalizedEvent_1 = __webpack_require__(5);
var VizclientUtils_1 = __webpack_require__(1);
/**
* Create and set <see cref="EventHandleSpec"/> object's properties with appropriate values.
*/
var NormalizedEventBuilder = /** @class */ (function () {
    function NormalizedEventBuilder() {
    }
    Object.defineProperty(NormalizedEventBuilder, "HandledEvents", {
        get: function () {
            NormalizedEventBuilder.SetupEventNames();
            return NormalizedEventBuilder.handledEvents;
        },
        enumerable: true,
        configurable: true
    });
    NormalizedEventBuilder.CreateNormalizedEvent = function (evt, listeningNode, reactEvent) {
        if (reactEvent === void 0) { reactEvent = null; }
        NormalizedEventBuilder.SetupEventNames();
        var normalizedEvent = new NormalizedEvent_1.NormalizedEvent(evt, listeningNode, reactEvent);
        normalizedEvent.source = NormalizedEventBuilder.HandledEvents[normalizedEvent.type];
        normalizedEvent.inputType = NormalizedEventBuilder.GetEventInputType(normalizedEvent.type);
        return normalizedEvent;
    };
    NormalizedEventBuilder.GetEventInputType = function (eventName) {
        NormalizedEventBuilder.SetupEventNames();
        var inputType = 6 /* UnSupported */;
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(NormalizedEventBuilder.startEvents[eventName])) {
            inputType = 0 /* Start */;
        }
        else if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(NormalizedEventBuilder.moveEvents[eventName])) {
            inputType = 1 /* Move */;
        }
        else if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(NormalizedEventBuilder.endEvents[eventName])) {
            inputType = 2 /* End */;
        }
        else if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(NormalizedEventBuilder.outEvents[eventName])) {
            inputType = 3 /* Out */;
        }
        else if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(NormalizedEventBuilder.cancelEvents[eventName])) {
            inputType = 5 /* Cancel */;
        }
        else if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(NormalizedEventBuilder.scrollEvents[eventName])) {
            inputType = 4 /* Scroll */;
        }
        return inputType;
    };
    NormalizedEventBuilder.SetupEventNames = function () {
        if (NormalizedEventBuilder.initialized) {
            return;
        }
        // Always watch for touch events, whether web or mobile
        NormalizedEventBuilder.startEvents["touchstart" /* TouchStart */] = 2 /* Touch */;
        NormalizedEventBuilder.moveEvents["touchmove" /* TouchMove */] = 2 /* Touch */;
        NormalizedEventBuilder.endEvents["touchend" /* TouchEnd */] = 2 /* Touch */;
        NormalizedEventBuilder.cancelEvents["touchcancel" /* TouchCancel */] = 2 /* Touch */;
        // if doing development with ?:mobile=true, mouse masquerades as touch so watch for subset
        // of mouse events that masquerade as touch. BUGZID 98802
        if (VizclientUtils_1.TsConfig.IsMobile()) {
            if (!browser_support_1.BrowserSupport.IsTouch()) {
                NormalizedEventBuilder.startEvents["mousedown" /* MouseDown */] = 1 /* Mouse */;
                NormalizedEventBuilder.moveEvents["mousemove" /* MouseMove */] = 1 /* Mouse */;
                NormalizedEventBuilder.endEvents["mouseup" /* MouseUp */] = 1 /* Mouse */;
                NormalizedEventBuilder.outEvents["mouseout" /* MouseOut */] = 1 /* Mouse */;
            }
            // else if in normal mobile environment, ignore mouse events. BUGZID 97746
        }
        else {
            // else if web, watch for mouse events
            NormalizedEventBuilder.startEvents["mousedown" /* MouseDown */] = 1 /* Mouse */;
            NormalizedEventBuilder.moveEvents["mousemove" /* MouseMove */] = 1 /* Mouse */;
            NormalizedEventBuilder.endEvents["mouseup" /* MouseUp */] = 1 /* Mouse */;
            NormalizedEventBuilder.outEvents["mouseout" /* MouseOut */] = 1 /* Mouse */;
            NormalizedEventBuilder.scrollEvents["scroll" /* Scroll */] = 1 /* Mouse */;
            NormalizedEventBuilder.endEvents["contextmenu" /* ContextMenu */] = 1 /* Mouse */;
        }
        $.extend(NormalizedEventBuilder.handledEvents, NormalizedEventBuilder.startEvents, NormalizedEventBuilder.moveEvents, NormalizedEventBuilder.endEvents, NormalizedEventBuilder.outEvents, NormalizedEventBuilder.scrollEvents, NormalizedEventBuilder.cancelEvents);
        NormalizedEventBuilder.initialized = true;
    };
    // All events that we listen to
    NormalizedEventBuilder.handledEvents = {};
    // string names of events that we listen to
    NormalizedEventBuilder.startEvents = {};
    NormalizedEventBuilder.moveEvents = {};
    NormalizedEventBuilder.endEvents = {};
    NormalizedEventBuilder.outEvents = {};
    NormalizedEventBuilder.scrollEvents = {};
    NormalizedEventBuilder.cancelEvents = {};
    NormalizedEventBuilder.initialized = false;
    return NormalizedEventBuilder;
}());
exports.NormalizedEventBuilder = NormalizedEventBuilder;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: move these to generated enums
Object.defineProperty(exports, "__esModule", { value: true });
var SelectAction;
(function (SelectAction) {
    SelectAction["Simple"] = "simple";
    SelectAction["Toggle"] = "toggle";
    SelectAction["Range"] = "range";
    SelectAction["Menu"] = "menu";
})(SelectAction || (SelectAction = {}));
exports.SelectAction = SelectAction;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(12);
var $ = __webpack_require__(3);
var React = __webpack_require__(34);
var ReactDOM = __webpack_require__(35);
var MiscUtil_1 = __webpack_require__(0);
var TableauEventHandlerForReact_1 = __webpack_require__(21);
// ------------------------------------
/**
* A component that handles Tableau Events by forwarding raw React events to TableauEventHandler.
* Wrap your components under this to provide hooks to Tableau Events.
*/
var EventForwarder = /** @class */ (function (_super) {
    __extends(EventForwarder, _super);
    function EventForwarder(props) {
        var _this = _super.call(this, props, null) || this;
        _this.eventHandler = null;
        // EventForwarder maintains a reference to the current element and spec objects for equality comparison
        // when updates to the component occur. The should be used for no other purpose.
        _this.element = null;
        _this.spec = null;
        _this.eventHandler = TableauEventHandlerForReact_1.TableauEventHandlerForReact.CreateEmpty();
        return _this;
    }
    /**
    * Shorthand for creating an EventForward component.
    */
    EventForwarder.createElement = function (tagName, spec, attrs) {
        var children = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            children[_i - 3] = arguments[_i];
        }
        var evtFwdrProps = {
            TagName: tagName,
            HtmlAttributes: attrs,
            Spec: spec,
            key: attrs.key
        };
        // move ref to the wrapper level so lookup through ref on event forwarder wrapper object works.
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(attrs.ref)) {
            evtFwdrProps.ref = attrs.ref;
            delete attrs.ref;
        }
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(children) && children.length === 1) {
            // TFSID 479359 if only one child, don't pass an array so React doesn't complain about it needing a key
            return React.createElement(EventForwarder, evtFwdrProps, children[0]);
        }
        return React.createElement(EventForwarder, evtFwdrProps, children);
    };
    EventForwarder.div = function (spec, attrs) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        return EventForwarder.createElement('div', spec, attrs, children);
    };
    EventForwarder.span = function (spec, attrs) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        return EventForwarder.createElement('span', spec, attrs, children);
    };
    EventForwarder.prototype.render = function () {
        return React.createElement(this.props.TagName, 
        // tslint:disable-next-line:align
        $.extend({}, this.eventHandler.EventHandlingAttributesForReact, this.props.HtmlAttributes), this.props.children);
    };
    EventForwarder.prototype.componentDidMount = function () {
        this.UpdateElementSpec();
    };
    EventForwarder.prototype.componentDidUpdate = function () {
        this.UpdateElementSpec();
    };
    EventForwarder.prototype.componentWillUnmount = function () {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.eventHandler)) {
            this.eventHandler.dispose();
        }
    };
    EventForwarder.prototype.UpdateElementSpec = function () {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.props.Spec)) {
            var newElement = ReactDOM.findDOMNode(this);
            // If either the DOM element associated with this React component OR the spec object has changed,
            // the eventHandler needs to be updated so it is working with the new objects in play. Without this
            // update to the eventHandler, this EventForwarder may stop working since it may still be listening
            // to events on a discarded DOM element or it may be triggering calls to handlers on an old spec.
            if (newElement instanceof HTMLElement) {
                if (this.element !== newElement || EventForwarder.HasEventHandleSpecChanged(this.spec, this.props.Spec)) {
                    this.eventHandler.UpdateEventHandleSpec(newElement, this.props.Spec);
                    this.element = newElement;
                    this.spec = this.props.Spec;
                }
            }
        }
    };
    /**
    * Returns whether the event handle spec for the react element has changed. Make sure all event handlers
    * defined on the new spec are defined in the existing spec and they are structurally equal.
    * @param {EventHandleSpec} curSpec - current spec from
    * @param {EventHandleSpec} newSpec- new event spec from the props
    * @returns {boolean} if the spec is listening to new events
    */
    EventForwarder.HasEventHandleSpecChanged = function (curSpec, newSpec) {
        // this check is to prevent reloading the spec when it hasn't changed meaningfully,
        // so that single click events that casue the component to update do not prevent double-click events from being recognized
        // (TFSID: 404282, TFSID:415028, TFSID:423538)
        // Right now, it only recognizes adding event handlers as changes that require updates - in future, we might want to expand that
        return !_.every(Object.keys(newSpec), function (key) { return Object.keys(curSpec).indexOf(key) !== -1; });
    };
    return EventForwarder;
}(React.Component));
exports.EventForwarder = EventForwarder;


/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_34__;

/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_35__;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiscUtil_1 = __webpack_require__(0);
var CallOnDispose = /** @class */ (function () {
    function CallOnDispose(callOnDispose) {
        this.callOnDispose = callOnDispose;
    }
    CallOnDispose.prototype.dispose = function () {
        if (MiscUtil_1.MiscUtil.IsNullOrUndefined(this.callOnDispose)) {
            return;
        }
        this.callOnDispose();
        this.callOnDispose = null;
    };
    return CallOnDispose;
}());
exports.CallOnDispose = CallOnDispose;
var DisposableHolder = /** @class */ (function () {
    function DisposableHolder() {
        this.disposables = [];
    }
    DisposableHolder.prototype.add = function (ds) {
        var _this = this;
        if (typeof ds === 'function') {
            this.disposables.push(new CallOnDispose(ds));
        }
        else if (ds.dispose !== undefined) {
            this.disposables.push(ds);
        }
        else if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(ds)) {
            ds.forEach(function (disposable) {
                _this.disposables.push(disposable);
            });
        }
    };
    DisposableHolder.prototype.dispose = function () {
        this.disposables.forEach(function (disposable) {
            disposable.dispose();
        });
        this.disposables = [];
    };
    return DisposableHolder;
}());
exports.DisposableHolder = DisposableHolder;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(3);
var DragDropManager_1 = __webpack_require__(22);
var SimplifiedDragSafeGlass = /** @class */ (function () {
    function SimplifiedDragSafeGlass() {
        this.parentElement = null;
        this.Element = $(SimplifiedDragSafeGlass.HtmlTemplate);
        this.parentElement = document.body;
        DragDropManager_1.DragDropManager.registerDragGlass(this);
    }
    SimplifiedDragSafeGlass.prototype.dispose = function () {
        DragDropManager_1.DragDropManager.unregisterDragGlass(this);
        this.Element.remove();
    };
    SimplifiedDragSafeGlass.prototype.disableHitTests = function () {
        this.Element.css('pointer-events', 'none');
    };
    SimplifiedDragSafeGlass.prototype.enableHitTests = function () {
        this.Element.css('pointer-events', 'auto');
    };
    SimplifiedDragSafeGlass.prototype.show = function () {
        if (this.Element.parent()[0] !== this.parentElement) {
            this.Element.appendTo(this.parentElement);
        }
        if (this.opaque) {
            this.Element.toggleClass('glass-fade-in-immediate', true);
        }
        this.Element.show();
    };
    Object.defineProperty(SimplifiedDragSafeGlass.prototype, "opaque", {
        get: function () {
            return this.Element.hasClass(SimplifiedDragSafeGlass.OpaqueGlassClass);
        },
        set: function (value) {
            this.Element.toggleClass(SimplifiedDragSafeGlass.ClearGlassClass, !value);
            this.Element.toggleClass(SimplifiedDragSafeGlass.OpaqueGlassClass, value);
        },
        enumerable: true,
        configurable: true
    });
    SimplifiedDragSafeGlass.GlassClass = 'tab-glass';
    SimplifiedDragSafeGlass.ClearGlassClass = 'clear-glass';
    SimplifiedDragSafeGlass.OpaqueGlassClass = 'opaque-glass';
    SimplifiedDragSafeGlass.HtmlTemplate = "<div class='" + SimplifiedDragSafeGlass.GlassClass + " " + SimplifiedDragSafeGlass.ClearGlassClass + "'/>";
    return SimplifiedDragSafeGlass;
}());
exports.SimplifiedDragSafeGlass = SimplifiedDragSafeGlass;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiscUtil_1 = __webpack_require__(0);
var TypeUtil_1 = __webpack_require__(2);
var WindowHelper = /** @class */ (function () {
    function WindowHelper() {
    }
    Object.defineProperty(WindowHelper, "Selection", {
        get: function () {
            if (TypeUtil_1.TypeUtil.HasMethod(/*typeof*/ window, 'getSelection')) {
                return window.getSelection();
            }
            if (TypeUtil_1.TypeUtil.HasMethod(/*typeof*/ document, 'getSelection')) {
                return document.getSelection();
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /// <summary>
    /// Clears the selection object at the window/document level
    /// </summary>
    WindowHelper.ClearSelection = function () {
        var selection = this.Selection;
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(selection)) {
            if (TypeUtil_1.TypeUtil.HasMethod(selection, 'removeAllRanges')) {
                selection.removeAllRanges();
            }
            else if (TypeUtil_1.TypeUtil.HasMethod(selection, 'empty')) {
                selection.empty();
            }
        }
    };
    /// <summary>
    /// Requests an animation frame
    /// Falls back to using Window.SetTimeout if the browser does not support RequestAnimationFrame
    /// </summary>
    /// <param name="action">Action to execute</param>
    /// <returns>animation id used to cancel the animation</returns>
    WindowHelper.RequestAnimationFrame = function (action) {
        return WindowHelper.requestAnimationFrameFunc(action);
    };
    /// <summary>
    /// Cancels an animation
    /// </summary>
    /// <param name="animationId">id of animation to cancel</param>
    WindowHelper.CancelAnimationFrame = function (animationId) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(animationId)) {
            WindowHelper.cancelAnimationFrameFunc(animationId);
        }
    };
    WindowHelper.SetDefaultRequestAnimationFrameImpl = function () {
        var lastTime = 0;
        WindowHelper.requestAnimationFrameFunc = function (callback) {
            var curTime = Date.now();
            var timeToCall = Math.max(0, 16 - (curTime - lastTime));
            lastTime = curTime + timeToCall;
            var id = window.setTimeout(callback, timeToCall);
            return id;
        };
    };
    WindowHelper.PolyFillRequestAnimationFrame = function () {
        // Polyfill for RequestAnimationFrame - http://paulirish.com/2011/requestanimationframe-for-smart-animating/
        var DefaultRequestName = 'requestAnimationFrame';
        var DefaultCancelName = 'cancelAnimationFrame';
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        var requestFuncName = null;
        var cancelFuncName = null;
        if (TypeUtil_1.TypeUtil.HasMethod(window, DefaultRequestName)) {
            requestFuncName = DefaultRequestName;
        }
        if (TypeUtil_1.TypeUtil.HasMethod(window, DefaultCancelName)) {
            cancelFuncName = DefaultCancelName;
        }
        for (var ii = 0; ii < vendors.length && (requestFuncName === null || cancelFuncName === null); ++ii) {
            var vendor = vendors[ii];
            var funcName = vendor + 'RequestAnimationFrame';
            if (requestFuncName === null && TypeUtil_1.TypeUtil.HasMethod(window, funcName)) {
                requestFuncName = funcName;
            }
            if (cancelFuncName === null) {
                funcName = vendor + 'CancelAnimationFrame';
                if (TypeUtil_1.TypeUtil.HasMethod(window, funcName)) {
                    cancelFuncName = funcName;
                }
                funcName = vendor + 'CancelRequestAnimationFrame';
                if (TypeUtil_1.TypeUtil.HasMethod(window, funcName)) {
                    cancelFuncName = funcName;
                }
            }
        }
        if (requestFuncName !== null) {
            WindowHelper.requestAnimationFrameFunc
                = function (callback) { return TypeUtil_1.TypeUtil.GetField(window, requestFuncName)(callback); };
        }
        else {
            this.SetDefaultRequestAnimationFrameImpl();
        }
        if (cancelFuncName !== null) {
            WindowHelper.cancelAnimationFrameFunc
                = function (animationId) { return TypeUtil_1.TypeUtil.GetField(window, cancelFuncName)(animationId); };
        }
        else {
            WindowHelper.cancelAnimationFrameFunc = window.clearTimeout;
        }
    };
    WindowHelper.requestAnimationFrameFunc = undefined;
    WindowHelper.cancelAnimationFrameFunc = undefined;
    return WindowHelper;
}());
exports.WindowHelper = WindowHelper;
// initialize
WindowHelper.PolyFillRequestAnimationFrame();


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(3);
var SimpleAvatar = /** @class */ (function () {
    function SimpleAvatar(innerHtml, delta, source) {
        this.avatarDelta = delta;
        this.avatarSource = source;
        this.Element = $("<span>" + innerHtml + "</span>");
    }
    SimpleAvatar.prototype.get_rootElement = function () {
        return this.Element;
    };
    SimpleAvatar.prototype.addToDom = function (parent) {
        parent.append(this.Element);
    };
    SimpleAvatar.prototype.dispose = function () {
        /** */
    };
    return SimpleAvatar;
}());
exports.SimpleAvatar = SimpleAvatar;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Delegate_1 = __webpack_require__(9);
var EmbeddedCustomCursor_1 = __webpack_require__(10);
var MiscUtil_1 = __webpack_require__(0);
var TypeUtil_1 = __webpack_require__(2);
var DragInstance = /** @class */ (function () {
    function DragInstance(dragged, dragAvatar) {
        this.shiftStateChanged = new Delegate_1.Delegate();
        this.draggedObject = dragged;
        this.DragAvatar = dragAvatar;
        this.isCopyDrag = false;
        this.IsShiftDrag = false;
        this.isRightDrag = false;
        // Check if the payload contains a dragpresmodel
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(dragged) && TypeUtil_1.TypeUtil.HasField(dragged, 'dragInstanceType')) {
            this.presmodelType = dragged.dragInstanceType;
        }
    }
    DragInstance.prototype.add_shiftStateChanged = function (ev) {
        this.shiftStateChanged.add(ev);
    };
    DragInstance.prototype.remove_shiftStateChanged = function (ev) {
        this.shiftStateChanged.remove(ev);
    };
    Object.defineProperty(DragInstance.prototype, "payload", {
        get: function () {
            return this.draggedObject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragInstance.prototype, "hasPayload", {
        get: function () {
            return !MiscUtil_1.MiscUtil.IsNullOrUndefined(this.draggedObject);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragInstance.prototype, "isShiftDrag", {
        get: function () {
            return this.IsShiftDrag;
        },
        set: function (value) {
            if (this.IsShiftDrag !== value) {
                this.IsShiftDrag = value;
                if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.shiftStateChanged)) {
                    this.shiftStateChanged.invoke();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragInstance.prototype, "dragAvatar", {
        get: function () {
            return this.DragAvatar;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragInstance.prototype, "dragType", {
        get: function () {
            return "dragdrop" /* dragdrop */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragInstance.prototype, "readyToDrop", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragInstance.prototype, "defaultDropCursor", {
        get: function () {
            return EmbeddedCustomCursor_1.EmbeddedCustomCursor.noOp;
        },
        enumerable: true,
        configurable: true
    });
    /*virtual*/ DragInstance.prototype.moveTo = function (e) { };
    /*virtual*/ DragInstance.prototype.endDragAt = function (e) { };
    /*virtual*/ DragInstance.prototype.cancelDrag = function () { };
    /// <summary>
    /// Checks the payload to see if the object being dragged is the given object.
    /// </summary>
    /// <returns>true if testObject is the draggedObject or draggedObject is an array of one item, and
    /// that item is testObject</returns>
    DragInstance.prototype.payloadEquals = function (value) {
        if (this.draggedObject === value) {
            return true;
        }
        if (Array.isArray(this.draggedObject)) {
            var draggedObjects = this.draggedObject;
            if (draggedObjects.length === 1
                && draggedObjects[0] === value) {
                return true;
            }
        }
        return false;
    };
    /// <summary>
    /// Action that will be executed if the drag instance is not dropped on a drop target
    /// or is dropped on a drop target that refuses the drop
    /// </summary>
    /*virtual*/ DragInstance.prototype.dropToNowhereAction = function () { };
    // redirection for saltarelle generated javascript getters
    /*virtual*/ DragInstance.prototype.get_payload = function () { return this.payload; };
    /*virtual*/ DragInstance.prototype.get_hasPayload = function () { return this.hasPayload; };
    /*virtual*/ DragInstance.prototype.get_dragAvatar = function () { return this.dragAvatar; };
    /*virtual*/ DragInstance.prototype.get_dragType = function () { return this.dragType; };
    /*virtual*/ DragInstance.prototype.get_readyToDrop = function () { return this.readyToDrop; };
    /*virtual*/ DragInstance.prototype.get_defaultDropCursor = function () { return this.defaultDropCursor; };
    return DragInstance;
}());
exports.DragInstance = DragInstance;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(3);
var EmbeddedCustomCursor_1 = __webpack_require__(10);
var MiscUtil_1 = __webpack_require__(0);
/// <summary>
/// A drop target which uses delegates to replace inheritance.
///
/// Each implementation has a default behavior so you can specify just the minimum
/// set of properties to customize your behavior.  This makes it simpler to add new
/// custom drag handling to elements without having to define a new DropTarget class.
///
/// Example:
/// <![CDATA[
///   var dropTarget = new DelegateDropTarget
///   {
///       CanAccept = dragInstance => dragInstance is MyCustomDragInstance,
///       OnAcceptDrop = dragInstance =>
///       {
///           this.DoSomethingWithDroppedObject(dragInstance);
///           return jQuery.DeferredData<bool>().Resolve(true);
///       },
///       OnGetDropCursor = dragInstance => CustomCursor.Copy
///   };
///   DragDropManager.AttachDropTarget(element, dropTarget);
/// ]]>
///
/// Note: For interface methods which return IDropTarget, an additional
/// 'self' parameter is passed to make it easier to use anonymous functions in
/// the object initializer list.
///
///  Example:
///
///  var dropTarget = new DelegateDropTarget
///  {
///      OnDragOver = (dragInstance, self) => self
///  };
///
/// </summary>
var DelegateDropTarget = /** @class */ (function () {
    function DelegateDropTarget() {
    }
    DelegateDropTarget.prototype.get_feedbackType = function () {
        return (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.onFeedbackType)) ? this.onFeedbackType() : "dropfeedbackuponentry" /* dropfeedbackuponentry */;
    };
    DelegateDropTarget.prototype.dragOver = function (d) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.canAccept) && !this.canAccept(d)) {
            return null;
        }
        return (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.onDragOver)) ? this.onDragOver(d, this) : this;
    };
    DelegateDropTarget.prototype.dragExit = function (d) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.onDragExit)) {
            this.onDragExit(d);
        }
    };
    DelegateDropTarget.prototype.acceptDrop = function (d) {
        if (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.canAccept) && !this.canAccept(d)) {
            return $.Deferred().resolve(false);
        }
        return (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.onAcceptDrop)) ? this.onAcceptDrop(d) : $.Deferred().resolve(false);
    };
    DelegateDropTarget.prototype.getDropTarget = function (hit) {
        return (!MiscUtil_1.MiscUtil.IsNullOrUndefined(this.onGetDropTarget)) ? this.onGetDropTarget(hit, this) : this;
    };
    DelegateDropTarget.prototype.getDropCursor = function (currentDrag) {
        return (this.onGetDropCursor !== null) ? this.onGetDropCursor(currentDrag) : EmbeddedCustomCursor_1.EmbeddedCustomCursor.noOp;
    };
    return DelegateDropTarget;
}());
exports.DelegateDropTarget = DelegateDropTarget;


/***/ })
/******/ ]);
});
//# sourceMappingURL=eventutils.js.map// END eventutils

(function() {
	'dont use strict';
	var $asm = {};
	global.spiff = global.spiff || {};
	ss.initAssembly($asm, 'spiffui');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.AugmentedIScroll
	var $spiff_$AugmentedIScroll = function(wrapper, scrollProps) {
		this.$wrapper = null;
		this.$augmentedScrollX = true;
		this.$augmentedScrollY = true;
		IScroll.call(this, wrapper, scrollProps.iScrollOptions);
		this.$wrapper = wrapper;
		this.$augmentedScrollX = scrollProps.augmentedScrollX;
		this.$augmentedScrollY = scrollProps.augmentedScrollY;
	};
	$spiff_$AugmentedIScroll.__typeName = 'spiff.$AugmentedIScroll';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DefaultListViewScrollHandler
	var $spiff_$DefaultListViewScrollHandler = function(listRoot) {
		this.$listRoot = null;
		this.$listRoot = listRoot;
	};
	$spiff_$DefaultListViewScrollHandler.__typeName = 'spiff.$DefaultListViewScrollHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.EditableTextViewTemplate
	var $spiff_$EditableTextViewTemplate = function() {
		this.$textElement = null;
		this.$inputElement = null;
		this.$textSpan = null;
		$spiff_Template.call(this, $($spiff_$EditableTextViewTemplate.$htmlTemplate));
		this.$textElement = this.getElementBySelector('.view-mode');
		this.$inputElement = this.getElementBySelector('.edit-mode');
		this.$textSpan = this.$textElement.find('.text-span');
	};
	$spiff_$EditableTextViewTemplate.__typeName = 'spiff.$EditableTextViewTemplate';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.FocusManager.InputType
	var $spiff_$FocusManager$InputType = function() {
	};
	$spiff_$FocusManager$InputType.__typeName = 'spiff.$FocusManager$InputType';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.FocusManager.NavigationKeyState
	var $spiff_$FocusManager$NavigationKeyState = function() {
	};
	$spiff_$FocusManager$NavigationKeyState.__typeName = 'spiff.$FocusManager$NavigationKeyState';
	$spiff_$FocusManager$NavigationKeyState.$set = function NavigationKeyState$Set(keyCode, state) {
		if (keyCode === 9) {
			$spiff_$FocusManager$NavigationKeyState.$navKeysDown[0] = state;
		}
		else if (keyCode === 27) {
			$spiff_$FocusManager$NavigationKeyState.$navKeysDown[1] = state;
		}
		else if (keyCode >= 33 && keyCode <= 40) {
			$spiff_$FocusManager$NavigationKeyState.$navKeysDown[keyCode - 31] = state;
		}
	};
	$spiff_$FocusManager$NavigationKeyState.$clear = function NavigationKeyState$Clear() {
		$spiff_$FocusManager$NavigationKeyState.$navKeysDown = new Array(10);
	};
	$spiff_$FocusManager$NavigationKeyState.$isAnyDown = function NavigationKeyState$IsAnyDown() {
		for (var i = 0; i < $spiff_$FocusManager$NavigationKeyState.$navKeysDown.length; i++) {
			if ($spiff_$FocusManager$NavigationKeyState.$navKeysDown[i]) {
				return true;
			}
		}
		return false;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IScrollScrollingComponent
	var $spiff_$IScrollScrollingComponent = function(props, context) {
		$spiff_ScrollingComponent.call(this, props, context);
	};
	$spiff_$IScrollScrollingComponent.__typeName = 'spiff.$IScrollScrollingComponent';
	$spiff_$IScrollScrollingComponent.get_$defaultProps = function IScrollScrollingComponent$get_DefaultProps() {
		var $t1 = new $spiff_IScrollProps();
		$t1.iScrollOptions = { preventDefaultException: ss.mkdict(['tagName', new RegExp('^(INPUT|TEXTAREA|BUTTON|SELECT|A)$')]), disableMouse: true, interactiveScrollbars: true, mouseWheel: true };
		$t1.ref = 'iscroll-component';
		return $t1;
	};
	$spiff_$IScrollScrollingComponent.$convertProps = function IScrollScrollingComponent$ConvertProps(props) {
		var result = $spiff_$IScrollScrollingComponent.get_$defaultProps();
		result.augmentedScrollX = props.augmentedScrollX;
		result.augmentedScrollY = props.augmentedScrollY;
		result.extraCssClass = props.extraCssClass;
		result.iScrollOptions.scrollX = props.scrollX;
		result.iScrollOptions.scrollY = props.scrollY;
		result.scrollStopCallback = props.onScrollStop;
		result.scrollCallback = props.onScroll;
		result.alwaysShowScrollbarsIfScrollable = props.alwaysShowScrollbarsIfScrollable;
		result.startingY = ss.Nullable$1.neg(props.startingY);
		result.customStyle = props.customStyle;
		if (props.scrollbars) {
			result.iScrollOptions.scrollbars = 'custom';
		}
		return result;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IScrollScrollingComponent.IScrollScrollingControl
	var $spiff_$IScrollScrollingComponent$IScrollScrollingControl = function(control) {
		this.$control = null;
		this.$control = control;
	};
	$spiff_$IScrollScrollingComponent$IScrollScrollingControl.__typeName = 'spiff.$IScrollScrollingComponent$IScrollScrollingControl';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuItemTemplate
	var $spiff_$MenuItemTemplate = function() {
		this.$nameArea = null;
		this.$name = null;
		this.$icon = null;
		this.$iconTwo = null;
		this.$description = null;
		this.$subMenu = null;
		this.$hasDescription = false;
		this.$hasIcon = false;
		this.$hasIconTwo = false;
		$spiff_Template.call(this, $($spiff_$MenuItemTemplate.$html));
	};
	$spiff_$MenuItemTemplate.__typeName = 'spiff.$MenuItemTemplate';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuItemTemplate.MenuTemplateBuilder
	var $spiff_$MenuItemTemplate$MenuTemplateBuilder = function(name, isEnabled) {
		this.$templ = new $spiff_$MenuItemTemplate();
		this.$templ.$name = this.$templ.getElementBySelector('.tabMenuItemName');
		this.$templ.$name.text(name);
		if (!isEnabled) {
			this.$templ.domRoot.addClass('tabDisabled').attr('aria-disabled', 'true');
		}
	};
	$spiff_$MenuItemTemplate$MenuTemplateBuilder.__typeName = 'spiff.$MenuItemTemplate$MenuTemplateBuilder';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ScrollableViewListViewScrollHandler
	var $spiff_$ScrollableViewListViewScrollHandler = function(scrollableView) {
		this.$scrollableView = null;
		this.$scrollableView = scrollableView;
	};
	$spiff_$ScrollableViewListViewScrollHandler.__typeName = 'spiff.$ScrollableViewListViewScrollHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.TabControlLabelTemplate
	var $spiff_$TabControlLabelTemplate = function() {
		$spiff_Template.call(this, $($spiff_$TabControlLabelTemplate.$html));
	};
	$spiff_$TabControlLabelTemplate.__typeName = 'spiff.$TabControlLabelTemplate';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.TabControlTemplate
	var $spiff_$TabControlTemplate = function() {
		this.$tabs = null;
		this.$contentArea = null;
		$spiff_Template.call(this, $($spiff_$TabControlTemplate.$html));
		this.$tabs = this.getElementBySelector('.tabTabLabels');
		this.$contentArea = this.getElementBySelector('.tabTabContentArea');
	};
	$spiff_$TabControlTemplate.__typeName = 'spiff.$TabControlTemplate';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.TextInputViewTemplate
	var $spiff_$TextInputViewTemplate = function() {
		this.$inputElement = null;
		$spiff_Template.call(this, $($spiff_$TextInputViewTemplate.$html));
		this.$inputElement = this.getElementBySelector('.tabTextInputViewInputElement');
	};
	$spiff_$TextInputViewTemplate.__typeName = 'spiff.$TextInputViewTemplate';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.AriaAttrName
	var $spiff_AriaAttrName = function() {
	};
	$spiff_AriaAttrName.__typeName = 'spiff.AriaAttrName';
	global.spiff.AriaAttrName = $spiff_AriaAttrName;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.AriaRole
	var $spiff_AriaRole = function() {
	};
	$spiff_AriaRole.__typeName = 'spiff.AriaRole';
	global.spiff.AriaRole = $spiff_AriaRole;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ArrowDropdownButtonComponent
	var $spiff_ArrowDropdownButtonComponent = function(props) {
		$spiff_PureRenderComponent.call(this, props);
	};
	$spiff_ArrowDropdownButtonComponent.__typeName = 'spiff.ArrowDropdownButtonComponent';
	global.spiff.ArrowDropdownButtonComponent = $spiff_ArrowDropdownButtonComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.BaseComponentViewModel
	var $spiff_BaseComponentViewModel$1 = function(TProps) {
		var $type = function() {
			this.$2$PropsUpdatedField = null;
			this.$2$PropsField = ss.getDefaultValue(TProps);
			$spiff_BaseViewModel.call(this);
		};
		ss.registerGenericClassInstance($type, $spiff_BaseComponentViewModel$1, [TProps], {
			add_propsUpdated: function BaseComponentViewModel$add_PropsUpdated(value) {
				this.$2$PropsUpdatedField = ss.delegateCombine(this.$2$PropsUpdatedField, value);
			},
			remove_propsUpdated: function BaseComponentViewModel$remove_PropsUpdated(value) {
				this.$2$PropsUpdatedField = ss.delegateRemove(this.$2$PropsUpdatedField, value);
			},
			get_props: function BaseComponentViewModel$get_Props() {
				return this.$2$PropsField;
			},
			set_props: function BaseComponentViewModel$set_Props(value) {
				this.$2$PropsField = value;
			},
			updateProps$1: function BaseComponentViewModel$UpdateProps(p) {
				this.set_props(p);
				this.raiseActionEvent(this.$2$PropsUpdatedField);
			},
			updateProps: function BaseComponentViewModel$UpdateProps() {
				this.raiseActionEvent(this.$2$PropsUpdatedField);
			}
		}, function() {
			return $spiff_BaseViewModel;
		}, function() {
			return [ss.IDisposable, tab.IViewModel, ss.makeGenericType($spiff_IPropsProvider$1, [TProps])];
		});
		return $type;
	};
	$spiff_BaseComponentViewModel$1.__typeName = 'spiff.BaseComponentViewModel$1';
	ss.initGenericClass($spiff_BaseComponentViewModel$1, $asm, 1);
	global.spiff.BaseComponentViewModel$1 = $spiff_BaseComponentViewModel$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.BaseMenuView
	var $spiff_BaseMenuView$1 = function(T) {
		var $type = function(viewModel, template) {
			ss.makeGenericType($spiff_BaseView$1, [T]).call(this, viewModel, template);
		};
		ss.registerGenericClassInstance($type, $spiff_BaseMenuView$1, [T], {
			positionMenu: function BaseMenuView$PositionMenu(spiffBrowserViewport, options, menu) {
				var maxWidth = Math.min(document.documentElement.clientWidth, tab.WindowHelper.get_windowSelf().innerWidth) - 10;
				menu.domRoot.css('max-width', maxWidth + 'px');
				var viewportWidth = (tsConfig.is_mobile ? tab.WindowHelper.get_windowSelf().innerWidth : document.documentElement.clientWidth);
				var minMenuLeft = $(window).scrollLeft() + $type.$menuPadding;
				var maxMenuRight = minMenuLeft + viewportWidth - 10;
				var menuHeight = menu.domRoot.outerHeight(false);
				var menuWidth = Math.min(menu.domRoot.outerWidth(false), maxWidth);
				var menuVerticalPaddingBorder = menuHeight - menu.domRoot.height();
				var offset = tab.PointUtil.fromPosition(tab.DomUtil.getPageOffset$1(options.relativeDom));
				var relativeObjWidth = options.relativeDom.outerWidth(false);
				var relativeObjHeight = options.relativeDom.outerHeight(false);
				if (ss.isValue(options.cursorPosition)) {
					offset = tab.PointUtil.fromPosition(options.cursorPosition);
					relativeObjWidth = 0;
					relativeObjHeight = 0;
				}
				var left, top;
				var room = spiffBrowserViewport.getVisibleRoom(offset);
				var maxHeight = null;
				if (!options.preferUp && room.roomBelow >= menuHeight + relativeObjHeight) {
					top = offset.y + relativeObjHeight;
				}
				else if (room.roomAbove > menuHeight) {
					top = offset.y - menuHeight;
				}
				else if (room.roomBelow - relativeObjHeight >= room.roomAbove) {
					top = offset.y + relativeObjHeight;
					maxHeight = room.roomBelow - relativeObjHeight - menuVerticalPaddingBorder - 5;
				}
				else {
					top = offset.y - room.roomAbove + 5;
					maxHeight = room.roomAbove - menuVerticalPaddingBorder - 5;
				}
				if (options.preferLeft) {
					left = offset.x + relativeObjWidth - menuWidth;
				}
				else {
					left = offset.x;
				}
				left = Math.max(left, minMenuLeft);
				if (left + menuWidth > maxMenuRight) {
					left = maxMenuRight - menuWidth;
				}
				left = Math.max(5, left);
				top -= $spiff_FullscreenUtil.centeringContainerOffset();
				var position = {};
				position['top'] = top + 'px';
				position['left'] = left + 'px';
				position['max-height'] = (ss.isValue(maxHeight) ? (maxHeight + 'px') : '');
				menu.domRoot.css(position);
			}
		}, function() {
			return ss.makeGenericType($spiff_BaseView$1, [T]);
		}, function() {
			return [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [T])];
		});
		$type.$menuPadding = 5;
		return $type;
	};
	$spiff_BaseMenuView$1.__typeName = 'spiff.BaseMenuView$1';
	ss.initGenericClass($spiff_BaseMenuView$1, $asm, 1);
	global.spiff.BaseMenuView$1 = $spiff_BaseMenuView$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.BaseReactViewModel
	var $spiff_BaseReactViewModel$1 = function(TProps) {
		var $type = function() {
			this.$props = null;
			this.$2$PropsUpdatedField = null;
			$spiff_BaseViewModel.call(this);
		};
		ss.registerGenericClassInstance($type, $spiff_BaseReactViewModel$1, [TProps], {
			add_propsUpdated: function BaseReactViewModel$add_PropsUpdated(value) {
				this.$2$PropsUpdatedField = ss.delegateCombine(this.$2$PropsUpdatedField, value);
			},
			remove_propsUpdated: function BaseReactViewModel$remove_PropsUpdated(value) {
				this.$2$PropsUpdatedField = ss.delegateRemove(this.$2$PropsUpdatedField, value);
			},
			get_props: function BaseReactViewModel$get_Props() {
				if (ss.isNullOrUndefined(this.$props)) {
					this.$initProps();
				}
				return this.$props;
			},
			set_props: function BaseReactViewModel$set_Props(value) {
				this.$props = value;
			},
			incrementProps: function BaseReactViewModel$IncrementProps() {
				var updatedProps = this.createUpdatedProps();
				var newProps = $.extend(false, new Object(), this.get_props(), updatedProps);
				this.set_props(newProps);
				if (ss.isNullOrUndefined(updatedProps)) {
					tab.Log.get(this).debug('No updated props, skipping...', []);
				}
				else {
					this.raiseActionEvent(this.$2$PropsUpdatedField);
				}
			},
			addChildViewModel: function BaseReactViewModel$AddChildViewModel(child) {
				var onPropsUpdated = ss.mkdel(this, this.incrementProps);
				child.add_propsUpdated(onPropsUpdated);
				return new tab.CallOnDispose(function() {
					child.remove_propsUpdated(onPropsUpdated);
				});
			},
			$initProps: function BaseReactViewModel$InitProps() {
				ss.Debug.assert(ss.isNullOrUndefined(this.$props), 'Props already initialized');
				this.set_props(this.createInitialProps());
				this.incrementProps();
			},
			createInitialProps: function BaseReactViewModel$CreateInitialProps() {
				return new Object();
			},
			createUpdatedProps: function BaseReactViewModel$CreateUpdatedProps() {
				return null;
			}
		}, function() {
			return $spiff_BaseViewModel;
		}, function() {
			return [ss.IDisposable, tab.IViewModel, ss.makeGenericType($spiff_IPropsProvider$1, [TProps])];
		});
		return $type;
	};
	$spiff_BaseReactViewModel$1.__typeName = 'spiff.BaseReactViewModel$1';
	ss.initGenericClass($spiff_BaseReactViewModel$1, $asm, 1);
	global.spiff.BaseReactViewModel$1 = $spiff_BaseReactViewModel$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.BaseView
	var $spiff_BaseView$1 = function(TViewModel) {
		var $type = function(viewModel, template) {
			this.$template = null;
			this.$viewModel = ss.getDefaultValue(TViewModel);
			$spiff_Widget.call(this, template.domRoot);
			tab.Param.verifyValue(viewModel, 'viewModel');
			tab.Param.verifyValue(template, 't');
			this.$template = template;
			this.$viewModel = viewModel;
			this.$viewModel.add_disposed(ss.mkdel(this, this.$onViewModelDispose));
			this.$viewModel.add_propertyChanged(ss.mkdel(this, this.onViewModelPropertyChanged));
		};
		ss.registerGenericClassInstance($type, $spiff_BaseView$1, [TViewModel], {
			get_template: function BaseView$get_Template() {
				return this.$template;
			},
			get_rootElement: function BaseView$get_RootElement() {
				return this.element;
			},
			get_viewModel: function BaseView$get_ViewModel() {
				return this.$viewModel;
			},
			dispose: function BaseView$Dispose() {
				tab.Log.get(this).debug('Dispose', []);
				this.$viewModel.remove_propertyChanged(ss.mkdel(this, this.onViewModelPropertyChanged));
				this.$viewModel.remove_disposed(ss.mkdel(this, this.$onViewModelDispose));
				this.$template.dispose();
				$spiff_Widget.prototype.dispose.call(this);
			},
			onViewModelPropertyChanged: function BaseView$OnViewModelPropertyChanged(sender, e) {
			},
			$onViewModelDispose: function BaseView$OnViewModelDispose(vm) {
				this.dispose();
			}
		}, function() {
			return $spiff_Widget;
		}, function() {
			return [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [TViewModel])];
		});
		return $type;
	};
	$spiff_BaseView$1.__typeName = 'spiff.BaseView$1';
	ss.initGenericClass($spiff_BaseView$1, $asm, 1);
	global.spiff.BaseView$1 = $spiff_BaseView$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.BaseViewModel
	var $spiff_BaseViewModel = function() {
		this.disposables = new tab.DisposableHolder();
		this.$1$DisposedField = null;
		this.$1$PropertyChangedField = null;
	};
	$spiff_BaseViewModel.__typeName = 'spiff.BaseViewModel';
	global.spiff.BaseViewModel = $spiff_BaseViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Button
	var $spiff_Button = function(element) {
		this.$hoverClass = 'hover';
		this.$focusClass = 'focus';
		this.$disabledClass = 'disabled';
		this.$context = null;
		this.$tableauClickHandler = null;
		this.$2$PressField = null;
		this.$2$ClickField = null;
		this.$2$ShiftClickField = null;
		this.$2$CtrlClickField = null;
		this.$2$HoverField = null;
		this.$2$MouseEnterField = null;
		this.$2$MouseLeaveField = null;
		this.$2$DoubleClickField = null;
		$spiff_Widget.call(this, element);
		this.$bindEvents();
	};
	$spiff_Button.__typeName = 'spiff.Button';
	global.spiff.Button = $spiff_Button;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ButtonBaseComponent
	var $spiff_ButtonBaseComponent$1 = function(P) {
		var $type = function(props) {
			React.Component.call(this, props);
		};
		ss.registerGenericClassInstance($type, $spiff_ButtonBaseComponent$1, [P], {
			get_className: function ButtonBaseComponent$get_ClassName() {
				var classNames = [$spiff_UnificationClassNames.button];
				if (ss.isValue(this.props.customClassName)) {
					classNames.push(this.props.customClassName);
				}
				if (this.props.border) {
					classNames.push($spiff_UnificationClassNames.bordered);
				}
				if (this.props.disabled) {
					classNames.push($spiff_UnificationClassNames.disabled);
				}
				return classNames.join(' ');
			},
			customContentBefore: function ButtonBaseComponent$CustomContentBefore() {
				return (!ss.staticEquals(this.props.getCustomContentBefore, null) ? this.props.getCustomContentBefore() : null);
			},
			customContentAfter: function ButtonBaseComponent$CustomContentAfter() {
				return (!ss.staticEquals(this.props.getCustomContentAfter, null) ? this.props.getCustomContentAfter() : null);
			},
			render: function ButtonBaseComponent$Render() {
				var htmlProps = { className: this.get_className(), style: this.props.buttonStyle, title: (ss.isNullOrUndefined(this.props.tooltip) ? this.props.label : this.props.tooltip), onKeyDown: ss.mkdel(this, function(e) {
					var enteredKey = e.keyCode;
					if (enteredKey === 32 || enteredKey === 13) {
						this.$onTap(EventUtils.NormalizedEvent.Create(e, ReactDOM.findDOMNode(this), null));
						e.preventDefault();
						e.stopPropagation();
					}
				}), 'data-test-id': this.props.testId, role: 'button' };
				if (ss.isValue(this.props.tabIndex)) {
					htmlProps.tabIndex = ss.unbox(this.props.tabIndex);
				}
				if (ss.isValue(this.props.additionalRoles) && this.props.additionalRoles.length > 0) {
					htmlProps.role += ' ' + this.props.additionalRoles.join(' ');
				}
				var $t1 = new EventUtils.EventHandleSpec();
				$t1.tap = ss.mkdel(this, this.$onTap);
				$t1.doubleTap = ss.mkdel(this, this.$onDoubleTap);
				return EventUtils.EventForwarder.div($t1, htmlProps, this.customContentBefore(), $spiff_DOMElements.span({ className: $spiff_UnificationClassNames.text, style: this.props.labelStyle, key: 'textContent' }, this.props.label), this.customContentAfter());
			},
			$onTap: function ButtonBaseComponent$OnTap(e) {
				if (!this.props.disabled && !ss.staticEquals(this.props.onTap, null)) {
					this.props.onTap(e);
				}
			},
			$onDoubleTap: function ButtonBaseComponent$OnDoubleTap(e) {
				if (!this.props.disabled && !ss.staticEquals(this.props.onDoubleTap, null)) {
					this.props.onDoubleTap(e);
				}
			}
		}, function() {
			return React.Component;
		}, function() {
			return [];
		});
		return $type;
	};
	$spiff_ButtonBaseComponent$1.__typeName = 'spiff.ButtonBaseComponent$1';
	ss.initGenericClass($spiff_ButtonBaseComponent$1, $asm, 1);
	global.spiff.ButtonBaseComponent$1 = $spiff_ButtonBaseComponent$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ButtonComponent
	var $spiff_ButtonComponent = function(props) {
		ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]).call(this, props);
	};
	$spiff_ButtonComponent.__typeName = 'spiff.ButtonComponent';
	$spiff_ButtonComponent.create = function ButtonComponent$Create(className, label, onTap) {
		return React.createElement($spiff_ButtonComponent, { customClassName: 'tabStyledTextButton tabMediumStyledTextButton ' + className, label: label, onTap: onTap });
	};
	global.spiff.ButtonComponent = $spiff_ButtonComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ButtonSize
	var $spiff_ButtonSize = function() {
	};
	$spiff_ButtonSize.__typeName = 'spiff.ButtonSize';
	global.spiff.ButtonSize = $spiff_ButtonSize;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ClearableTextInputView
	var $spiff_ClearableTextInputView = function(template, initialText, placeHoderText, clearButtonToolTip) {
		this.$dom = null;
		this.$searchBoxClearButton = null;
		this.$3$ClearButtonClickedField = null;
		$spiff_TextInputView.call(this, template, initialText, placeHoderText, null, false);
		this.$dom = template;
		this.add_propertyChanged(ss.mkdel(this, this.$onSearchTextInputView));
		this.$searchBoxClearButton = new $spiff_Button(this.$dom.get_searchBoxClear());
		this.$searchBoxClearButton.onClick(ss.mkdel(this, this.$onSearchBoxClearClick));
		this.$searchBoxClearButton.set_hoverTooltipText(clearButtonToolTip);
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.remove_propertyChanged(ss.mkdel(this, this.$onSearchTextInputView));
			this.$searchBoxClearButton.dispose();
		})));
		this.$handleSearchBoxChange();
	};
	$spiff_ClearableTextInputView.__typeName = 'spiff.ClearableTextInputView';
	$spiff_ClearableTextInputView.newClearableTextInputView = function ClearableTextInputView$NewClearableTextInputView(initialContent, placeHoderText, clearButtonToolTip) {
		var template = new $spiff_ClearableTextInputViewTemplate();
		return new $spiff_ClearableTextInputView(template, initialContent, placeHoderText, clearButtonToolTip);
	};
	global.spiff.ClearableTextInputView = $spiff_ClearableTextInputView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ClearableTextInputViewTemplate
	var $spiff_ClearableTextInputViewTemplate = function() {
		this.$inputElement = null;
		this.$inputElementContainer = null;
		this.$searchBoxClear = null;
		$spiff_Template.call(this, $($spiff_ClearableTextInputViewTemplate.$html));
		this.$inputElement = this.getElementBySelector('.tabTextInputViewInputElement');
		this.$inputElementContainer = this.getElementBySelector('.tabTextInputViewInputElementContainer');
		this.$searchBoxClear = this.getElementBySelector('.tabClearableTextBoxClearButton');
	};
	$spiff_ClearableTextInputViewTemplate.__typeName = 'spiff.ClearableTextInputViewTemplate';
	global.spiff.ClearableTextInputViewTemplate = $spiff_ClearableTextInputViewTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ClickBuster
	var $spiff_ClickBuster = function() {
	};
	$spiff_ClickBuster.__typeName = 'spiff.ClickBuster';
	$spiff_ClickBuster.add_clickBustDetected = function ClickBuster$add_ClickBustDetected(value) {
		$spiff_ClickBuster.$1$ClickBustDetectedField = ss.delegateCombine($spiff_ClickBuster.$1$ClickBustDetectedField, value);
	};
	$spiff_ClickBuster.remove_clickBustDetected = function ClickBuster$remove_ClickBustDetected(value) {
		$spiff_ClickBuster.$1$ClickBustDetectedField = ss.delegateRemove($spiff_ClickBuster.$1$ClickBustDetectedField, value);
	};
	$spiff_ClickBuster.preventGhostClick = function ClickBuster$PreventGhostClick(pageX, pageY, target) {
		if (!BrowserSupport.BrowserSupport.IsTouch() || !BrowserSupport.BrowserSupport.AddEventListener()) {
			return;
		}
		if (ss.isNullOrUndefined($spiff_ClickBuster.$coordinates)) {
			$spiff_ClickBuster.$coordinates = [];
			document.addEventListener('click', $spiff_ClickBuster.$onClick, true);
		}
		var suppressClickBusting = $(target).closest('.' + $spiff_ClickBuster.suppressClickBustingClass).length > 0;
		if (!suppressClickBusting) {
			$spiff_ClickBuster.$coordinates.push({ item1: pageX, item2: pageY });
			window.setTimeout($spiff_ClickBuster.$pop, 600);
		}
	};
	$spiff_ClickBuster.$pop = function ClickBuster$Pop() {
		ss.removeAt($spiff_ClickBuster.$coordinates, 0);
	};
	$spiff_ClickBuster.$onClick = function ClickBuster$OnClick(e) {
		var me = ss.cast(e, MouseEvent);
		var pageX = me.pageX;
		var pageY = me.pageY;
		for (var $t1 = 0; $t1 < $spiff_ClickBuster.$coordinates.length; $t1++) {
			var coordinate = $spiff_ClickBuster.$coordinates[$t1];
			if (Math.abs(coordinate.item1 - pageX) < $spiff_ClickBuster.$clickRadius && Math.abs(coordinate.item2 - pageY) < $spiff_ClickBuster.$clickRadius) {
				tab.Logger.getLogger($spiff_ClickBuster, null).debug('Busting click!', []);
				e.stopPropagation();
				e.preventDefault();
				if (ss.isValue($spiff_ClickBuster.$1$ClickBustDetectedField)) {
					$spiff_ClickBuster.$1$ClickBustDetectedField(e);
				}
			}
		}
	};
	global.spiff.ClickBuster = $spiff_ClickBuster;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ClickHandler
	var $spiff_ClickHandler = function() {
		this.$disposables = new tab.DisposableHolder();
		this.$startX = 0;
		this.$startY = 0;
		this.$target = null;
		this.$eventNamespace = 'clickHandler' + $spiff_ClickHandler.$instanceId++;
		this.$moveListener = null;
		this.$clickTimeoutHandle = null;
		this.$1$PressField = null;
		this.$1$ClickField = null;
		this.$1$RightClickField = null;
	};
	$spiff_ClickHandler.__typeName = 'spiff.ClickHandler';
	$spiff_ClickHandler.targetAndClick = function ClickHandler$TargetAndClick(o, onClick) {
		return (new $spiff_ClickHandler()).setTarget(o).onClick(onClick);
	};
	$spiff_ClickHandler.targetAndRightClick = function ClickHandler$TargetAndRightClick(o, onRightClick) {
		return (new $spiff_ClickHandler()).setTarget(o).onRightClick(onRightClick);
	};
	$spiff_ClickHandler.targetAndPress = function ClickHandler$TargetAndPress(o, onClick) {
		return (new $spiff_ClickHandler()).setTarget(o).onPress(onClick);
	};
	global.spiff.ClickHandler = $spiff_ClickHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Components.ComboBoxComponent
	var $spiff_ComboBoxComponent = function() {
		React.Component.call(this);
		var $t1 = new $spiff_ComboBoxState();
		$t1.isSelecting = false;
		this.state = $t1;
	};
	$spiff_ComboBoxComponent.__typeName = 'spiff.ComboBoxComponent';
	$spiff_ComboBoxComponent.createCustomIconElements = function ComboBoxComponent$CreateCustomIconElements(iconClass) {
		if (ss.isNullOrEmptyString(iconClass)) {
			return null;
		}
		return [$spiff_DOMElements.div({ className: 'tab-Icon ' + iconClass })];
	};
	global.spiff.ComboBoxComponent = $spiff_ComboBoxComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ComboBoxDropdownMenuTheme
	var $spiff_ComboBoxDropdownMenuTheme = function(extraMenuClass) {
		$spiff_MenuViewTheme.call(this);
		this.itemClass = 'tabMenuItemComboDropdownTheme tab-ctrl-formatted-text';
		this.menuClass = 'tabMenuComboDropdownTheme tab-ctrl-formatted-widget ' + extraMenuClass;
	};
	$spiff_ComboBoxDropdownMenuTheme.__typeName = 'spiff.ComboBoxDropdownMenuTheme';
	global.spiff.ComboBoxDropdownMenuTheme = $spiff_ComboBoxDropdownMenuTheme;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ComboBoxItem
	var $spiff_ComboBoxItem = function(iconClass, name, data, description, title) {
		this.$1$IconClassField = null;
		this.$1$NameField = null;
		this.$1$DataField = null;
		this.$1$DescriptionField = null;
		this.$1$TitleField = null;
		this.set_iconClass(iconClass);
		this.set_name(name);
		this.set_data(data);
		this.set_description(description);
		this.set_title(title);
	};
	$spiff_ComboBoxItem.__typeName = 'spiff.ComboBoxItem';
	global.spiff.ComboBoxItem = $spiff_ComboBoxItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ComboBoxMenuTheme
	var $spiff_ComboBoxMenuTheme = function() {
		$spiff_MenuViewTheme.call(this);
		this.itemClass = 'tabMenuItemComboTheme';
		this.menuClass = 'tabMenuComboTheme';
	};
	$spiff_ComboBoxMenuTheme.__typeName = 'spiff.ComboBoxMenuTheme';
	global.spiff.ComboBoxMenuTheme = $spiff_ComboBoxMenuTheme;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ComboBoxMenuThemeChoice
	var $spiff_ComboBoxMenuThemeChoice = function() {
	};
	$spiff_ComboBoxMenuThemeChoice.__typeName = 'spiff.ComboBoxMenuThemeChoice';
	global.spiff.ComboBoxMenuThemeChoice = $spiff_ComboBoxMenuThemeChoice;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Components.ComboBoxProps
	var $spiff_ComboBoxProps = function() {
		this.styleClass = null;
		this.buttonStyleClass = null;
		this.selectedText = null;
		this.selectedIconClass = null;
		this.hasTooltip = false;
		this.enabled = false;
		Object.call(this);
	};
	$spiff_ComboBoxProps.__typeName = 'spiff.ComboBoxProps';
	global.spiff.ComboBoxProps = $spiff_ComboBoxProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ComboBoxSizing
	var $spiff_ComboBoxSizing = function() {
	};
	$spiff_ComboBoxSizing.__typeName = 'spiff.ComboBoxSizing';
	global.spiff.ComboBoxSizing = $spiff_ComboBoxSizing;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Components.ComboBoxState
	var $spiff_ComboBoxState = function() {
		this.isSelecting = false;
	};
	$spiff_ComboBoxState.__typeName = 'spiff.ComboBoxState';
	global.spiff.ComboBoxState = $spiff_ComboBoxState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ComboBoxTemplate
	var $spiff_ComboBoxTemplate = function() {
		this.icon = null;
		this.name = null;
		this.button = null;
		$spiff_Template.call(this, $($spiff_ComboBoxTemplate.$htmlTemplate));
		this.icon = this.getElementBySelector('.tabComboBoxIcon');
		this.name = this.getElementBySelector('.tabComboBoxName');
		this.button = this.getElementBySelector('.tabComboBoxButtonHolder');
	};
	$spiff_ComboBoxTemplate.__typeName = 'spiff.ComboBoxTemplate';
	global.spiff.ComboBoxTemplate = $spiff_ComboBoxTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ComboBoxTheme
	var $spiff_ComboBoxTheme = function() {
	};
	$spiff_ComboBoxTheme.__typeName = 'spiff.ComboBoxTheme';
	global.spiff.ComboBoxTheme = $spiff_ComboBoxTheme;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ComboBoxView
	var $spiff_ComboBoxView = function(viewModel, dom) {
		this.clickHandler = null;
		this.$viewModel$1 = null;
		this.$dom = null;
		ss.makeGenericType($spiff_BaseView$1, [$spiff_ComboBoxViewModel]).call(this, viewModel, dom);
		this.$viewModel$1 = viewModel;
		this.$dom = dom;
		this.$viewModel$1.add_selectedItemChanged(ss.mkdel(this, this.$selectedItemChanged));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel$1.remove_selectedItemChanged(ss.mkdel(this, this.$selectedItemChanged));
		})));
		this.$viewModel$1.add_itemsChanged(ss.mkdel(this, this.$handleItemsChanged));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel$1.remove_itemsChanged(ss.mkdel(this, this.$handleItemsChanged));
		})));
		this.$viewModel$1.add_enabledChanged(ss.mkdel(this, this.$handleEnabledChanged));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel$1.remove_enabledChanged(ss.mkdel(this, this.$handleEnabledChanged));
		})));
		this.$viewModel$1.add_isSelectionInvalidChanged(ss.mkdel(this, this.$handleIsSelectionInvalidChanged));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel$1.remove_isSelectionInvalidChanged(ss.mkdel(this, this.$handleIsSelectionInvalidChanged));
		})));
		this.clickHandler = $spiff_TableauClickHandler.targetAndClick(this.$dom.domRoot[0], ss.mkdel(this, this.$onClick));
		this.clickHandler.set_stopPropagationOnEvent(false);
		this.disposables.add$1(this.clickHandler);
		this.$dom.domRoot.keydown(ss.mkdel(this, this.$onDomKeydown));
		this.$dom.domRoot.addClass($spiff_ComboBoxView.classesForTheme[this.$viewModel$1.get_theme()]);
		this.$viewModel$1.add_menuHidden(ss.mkdel(this, this.$handleMenuHidden));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel$1.remove_menuHidden(ss.mkdel(this, this.$handleMenuHidden));
		})));
		this.$selectedItemChanged(this.$viewModel$1.get_selectedItem());
		this.$handleEnabledChanged();
		this.$handleIsSelectionInvalidChanged();
	};
	$spiff_ComboBoxView.__typeName = 'spiff.ComboBoxView';
	global.spiff.ComboBoxView = $spiff_ComboBoxView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ComboBoxViewModel
	var $spiff_ComboBoxViewModel = function() {
		this.$items = [];
		this.$selectedItem = null;
		this.$currentMenu = null;
		this.$theme = 0;
		this.$menuTheme = 0;
		this.$sizing = 0;
		this.$showSelectedItem = true;
		this.$enabled = true;
		this.$isSelectionInvalid = false;
		this.$menuStyleClass = '';
		this.$additionalMenuClass = null;
		this.$hasTooltip = true;
		this.$3$ItemsChangedField = null;
		this.$3$SelectedItemChangedField = null;
		this.$3$MenuHiddenField = null;
		this.$3$EnabledChangedField = null;
		this.$3$IsSelectionInvalidChangedField = null;
		this.$3$SummaryField = null;
		this.$3$ShowDropdownIconField = false;
		this.menuItems = null;
		this.selectedMenuItem = null;
		this.generateProps = false;
		this.$3$AllowSetToSameValueField = false;
		this.$3$DropdownStyleClassField = null;
		ss.makeGenericType($spiff_BaseReactViewModel$1, [$spiff_ComboBoxProps]).call(this);
		this.set_showDropdownIcon(false);
		this.generateProps = false;
	};
	$spiff_ComboBoxViewModel.__typeName = 'spiff.ComboBoxViewModel';
	$spiff_ComboBoxViewModel.newUnificationComboBoxViewModel = function ComboBoxViewModel$NewUnificationComboBoxViewModel() {
		var $t1 = new $spiff_ComboBoxViewModel();
		$t1.set_theme(2);
		$t1.set_menuTheme(2);
		return $t1;
	};
	$spiff_ComboBoxViewModel.newLineAndArrowComboBoxViewModel = function ComboBoxViewModel$NewLineAndArrowComboBoxViewModel() {
		var $t1 = new $spiff_ComboBoxViewModel();
		$t1.set_theme(3);
		$t1.set_menuTheme(2);
		return $t1;
	};
	$spiff_ComboBoxViewModel.newReactLineAndArrowComboBoxViewModel = function ComboBoxViewModel$NewReactLineAndArrowComboBoxViewModel() {
		var $t1 = new $spiff_ComboBoxViewModel();
		$t1.set_theme(3);
		$t1.set_menuTheme(2);
		$t1.generateProps = true;
		return $t1;
	};
	global.spiff.ComboBoxViewModel = $spiff_ComboBoxViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.CompositeSearchWidget
	var $spiff_CompositeSearchWidget = function(compositeSearchWidgetTemplate) {
		this.compositeSearchWidgetTemplate = null;
		this.$popupVM = null;
		this.initialSearchTextInfo = null;
		this.$currentlySettingSearchText = false;
		this.$2$InputTextChangedField = null;
		this.$2$ListItemClickedField = null;
		this.$2$ListItemMouseEnterField = null;
		this.$2$ListItemMouseMoveField = null;
		this.$2$TextInputElementClickedField = null;
		this.$2$TextInputClearButtonClickedField = null;
		this.$2$TextInputSearchButtonClickedField = null;
		this.$2$ListViewModelField = null;
		$spiff_Widget.call(this, compositeSearchWidgetTemplate.get_domRootElement());
		this.compositeSearchWidgetTemplate = compositeSearchWidgetTemplate;
		this.compositeSearchWidgetTemplate.get_clearButton().add_click(ss.mkdel(this, this.$clearButtonClicked));
		this.compositeSearchWidgetTemplate.get_searchButton().add_click(ss.mkdel(this, this.$searchButtonClicked));
		this.compositeSearchWidgetTemplate.get_textInputView().add_propertyChanged(ss.mkdel(this, this.$handleInputTextChange));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.compositeSearchWidgetTemplate.get_clearButton().remove_click(ss.mkdel(this, this.$clearButtonClicked));
			this.compositeSearchWidgetTemplate.get_searchButton().remove_click(ss.mkdel(this, this.$searchButtonClicked));
			this.compositeSearchWidgetTemplate.get_textInputView().remove_propertyChanged(ss.mkdel(this, this.$handleInputTextChange));
			this.compositeSearchWidgetTemplate.disposeTemplate();
		})));
		this.disposables.add$1($spiff_EventUtil.bindWithDispose(this.get_textInputView().get_inputElement(), 'mousedown', ss.mkdel(this, this.$onInputElementClick)));
		this.disposables.add$1($spiff_EventUtil.bindWithDispose(this.get_textInputView().get_inputElement(), 'touchstart', ss.mkdel(this, this.$onInputElementClick)));
		this.get_textInputView().get_inputElement().attr('autocomplete', 'off');
		this.get_textInputView().get_inputElement().attr('autocorrect', 'off');
		this.get_textInputView().get_inputElement().attr('autocapitalize', 'off');
		this.get_textInputView().get_inputElement().attr('spellcheck', 'false');
	};
	$spiff_CompositeSearchWidget.__typeName = 'spiff.CompositeSearchWidget';
	global.spiff.CompositeSearchWidget = $spiff_CompositeSearchWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.CompositeSearchWidgetInitialSearchTextInfo
	var $spiff_CompositeSearchWidgetInitialSearchTextInfo = function() {
		this.initialSearchText = '';
		this.initialSearchTextDomClassName = '';
	};
	$spiff_CompositeSearchWidgetInitialSearchTextInfo.__typeName = 'spiff.CompositeSearchWidgetInitialSearchTextInfo';
	global.spiff.CompositeSearchWidgetInitialSearchTextInfo = $spiff_CompositeSearchWidgetInitialSearchTextInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.CompositeSearchWidgetTemplate
	var $spiff_CompositeSearchWidgetTemplate = function() {
		this.searchTextInputView = null;
		this.$searchButton = null;
		this.$clearButton = null;
		$spiff_Template.call(this, $($spiff_CompositeSearchWidgetTemplate.$htmlTemplate));
		this.searchTextInputView = $spiff_TextInputView.newTextInputView('', '', null, false);
		this.get_textInputView().addToDom(this.domRoot);
		this.$searchButton = $spiff_LabelButton.newNativeButton();
		this.$searchButton.addClass('tabCompositeSearchWidget-SearchButton');
		this.get_searchButton().addToDom(this.domRoot);
		this.get_searchButton().element.attr('title', tab.Strings.MapsSearchViewInitialText);
		this.$clearButton = $spiff_LabelButton.newNativeButton();
		this.$clearButton.addClass('tabCompositeSearchWidget-ClearButton');
		this.$clearButton.element.attr('title', tab.Strings.MapsSearchViewClearInputTooltip);
		this.get_clearButton().get_labelElement().css('display', 'none');
		this.$clearButton.addToDom(this.domRoot);
	};
	$spiff_CompositeSearchWidgetTemplate.__typeName = 'spiff.CompositeSearchWidgetTemplate';
	global.spiff.CompositeSearchWidgetTemplate = $spiff_CompositeSearchWidgetTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.CustomComboBoxItem
	var $spiff_CustomComboBoxItem = function(domRoot, iconClass, name, data, description) {
		this.$domRoot = null;
		$spiff_ComboBoxItem.call(this, iconClass, name, data, description, null);
		this.$domRoot = domRoot;
	};
	$spiff_CustomComboBoxItem.__typeName = 'spiff.CustomComboBoxItem';
	global.spiff.CustomComboBoxItem = $spiff_CustomComboBoxItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.CustomCursor
	var $spiff_CustomCursor = function(assetURL, fallback) {
		this.$cssString = null;
		if (ss.isValue(assetURL)) {
			this.$cssString = 'url(' + tableau.util.assetUrl(assetURL, true) + '), ' + fallback;
		}
		else {
			this.$cssString = fallback;
		}
	};
	$spiff_CustomCursor.__typeName = 'spiff.CustomCursor';
	$spiff_CustomCursor.copyFromElement = function CustomCursor$CopyFromElement(element) {
		var cursor = (ss.isValue(element) ? element.css('cursor') : '');
		return new $spiff_CustomCursor(null, cursor);
	};
	global.spiff.CustomCursor = $spiff_CustomCursor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.CustomIScrollTemplate
	var $spiff_CustomIScrollTemplate = function() {
		this.contentWindow = null;
		this.verticalScrollbar = null;
		this.verticalScrollbarIndicator = null;
		this.horizontalScrollbar = null;
		this.horizontalScrollbarIndicator = null;
		$spiff_IScrollTemplate.call(this, $spiff_CustomIScrollTemplate.$htmlTemplate);
		this.content = this.getElementBySelector('.tabScrollerContent');
		this.scroll = this.domRoot;
		this.contentWindow = this.getElementBySelector('.tabScrollerContentWindow');
		this.verticalScrollbar = this.getElementBySelector('.tabVerticalScrollbar');
		this.verticalScrollbarIndicator = this.getElementBySelector('.tabVerticalScrollbar .tabScrollbarIndicator');
		this.horizontalScrollbar = this.getElementBySelector('.tabHorizontalScrollbar');
		this.horizontalScrollbarIndicator = this.getElementBySelector('.tabHorizontalScrollbar .tabScrollbarIndicator');
	};
	$spiff_CustomIScrollTemplate.__typeName = 'spiff.CustomIScrollTemplate';
	global.spiff.CustomIScrollTemplate = $spiff_CustomIScrollTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.CustomIScrollView
	var $spiff_CustomIScrollView = function(viewModel) {
		$spiff_IScrollView.call(this, viewModel, new $spiff_CustomIScrollTemplate());
		this.$addScrollbarToIScrollOptions();
		this.$formatControls();
		if (viewModel.get_hasScrollBars()) {
			this.addScroller();
			this.setUpEvents();
			this.$listenToTopLevelEvents();
		}
	};
	$spiff_CustomIScrollView.__typeName = 'spiff.CustomIScrollView';
	$spiff_CustomIScrollView.$indicatorSize = function CustomIScrollView$IndicatorSize(scrollbarSize, windowSize, contentSize) {
		return Math.max(ss.round(scrollbarSize * windowSize / Math.max(contentSize, 1)), $spiff_CustomIScrollView.$minimumIndicatorLength);
	};
	global.spiff.CustomIScrollView = $spiff_CustomIScrollView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.CustomMenuItem
	var $spiff_CustomMenuItem = function() {
		this.$domRoot = null;
		$spiff_MenuItem.call(this);
	};
	$spiff_CustomMenuItem.__typeName = 'spiff.CustomMenuItem';
	$spiff_CustomMenuItem.newCustomMenuItem = function CustomMenuItem$NewCustomMenuItem(domRoot) {
		var $t1 = new $spiff_CustomMenuItem();
		$t1.set_domRoot(domRoot);
		var mi = $t1;
		return mi;
	};
	global.spiff.CustomMenuItem = $spiff_CustomMenuItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DefaultIScrollTemplate
	var $spiff_DefaultIScrollTemplate = function() {
		$spiff_IScrollTemplate.call(this, $spiff_DefaultIScrollTemplate.$htmlTemplate);
		this.content = this.getElementBySelector('.tabScrollerContent');
		this.scroll = this.domRoot;
	};
	$spiff_DefaultIScrollTemplate.__typeName = 'spiff.DefaultIScrollTemplate';
	global.spiff.DefaultIScrollTemplate = $spiff_DefaultIScrollTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DefaultIScrollView
	var $spiff_DefaultIScrollView = function(viewModel) {
		this.$verticalScrollbarObject = null;
		this.$horizontalScrollbarObject = null;
		$spiff_IScrollView.call(this, viewModel, new $spiff_DefaultIScrollTemplate());
		this.addScroller();
		this.setUpEvents();
	};
	$spiff_DefaultIScrollView.__typeName = 'spiff.DefaultIScrollView';
	global.spiff.DefaultIScrollView = $spiff_DefaultIScrollView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Dialog
	var $spiff_Dialog = function(titleUnescaped, body) {
		this.$dialogElement = null;
		this.$titleBarElement = null;
		this.$resizerElement = null;
		this.$spinnerContainerElement = null;
		this.$bodyElement = null;
		this.$closeButton = null;
		this.$isShown = false;
		this.$useClosingAnimation = false;
		this.$setFocusOnShow = true;
		this.$moveDragSource = null;
		this.$resizeDragSource = null;
		this.$maximized = false;
		this.$stayInWindow = false;
		this.$positionX = 0;
		this.$positionY = 0;
		this.$isActive = false;
		this.$mouseDownOnMe = false;
		this.$sawMouseDown = false;
		this.$afterCloseCallback = null;
		this.$2$ClosingField = null;
		this.$2$ClosedField = null;
		this.$2$ResizeMoveField = null;
		this.$2$ResizeEndField = null;
		this.$2$StartingPositionXField = null;
		this.$2$StartingPositionYField = null;
		this.showTitleTooltip = false;
		$spiff_Widget.call(this, $($spiff_Dialog.$htmlTemplate));
		this.set_titleUnescaped(titleUnescaped);
		this.set_body(body);
		this.$closeButton = $spiff_LabelButton.newNativeButton();
		this.$closeButton.add_click(ss.mkdel(this, this.$onCloseButtonClick));
		this.element.find($spiff_Dialog.$closeButtonSelector).append(this.$closeButton.element);
		this.$closeButton.tabIndex(-2);
		this.$dialogElement = this.element;
		this.$titleBarElement = this.element.find($spiff_Dialog.$titleBarSelector);
		this.$resizerElement = this.element.find($spiff_Dialog.$resizerSelector);
		this.$spinnerContainerElement = this.element.find($spiff_Dialog.$spinnerContainerSelector);
		this.$spinnerContainerElement.hide();
		var pageSpinner = $('#loadingSpinner');
		if (pageSpinner.length === 1) {
			this.$spinnerContainerElement.append(pageSpinner.html());
		}
		this.set_resizeable(false);
		this.$dialogElement.attr('tabindex', '-1');
		EventUtils.GlobalUIEvents.add_FirstTouch(ss.mkdel(this, this.$handleGlobalFirstTouch));
		EventUtils.GlobalUIEvents.add_LastTouch(ss.mkdel(this, this.$handleGlobalLastTouch));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			EventUtils.GlobalUIEvents.remove_FirstTouch(ss.mkdel(this, this.$handleGlobalFirstTouch));
		})));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			EventUtils.GlobalUIEvents.remove_LastTouch(ss.mkdel(this, this.$handleGlobalLastTouch));
		})));
		EventUtils.DragDropManager.attachDropTarget(this.$dialogElement, $spiff_Dialog.$defaultDropTarget);
	};
	$spiff_Dialog.__typeName = 'spiff.Dialog';
	global.spiff.Dialog = $spiff_Dialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DividerComboBoxItem
	var $spiff_DividerComboBoxItem = function() {
		$spiff_ComboBoxItem.call(this, null, null, null, null, null);
	};
	$spiff_DividerComboBoxItem.__typeName = 'spiff.DividerComboBoxItem';
	global.spiff.DividerComboBoxItem = $spiff_DividerComboBoxItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DockableSideDialog
	var $spiff_DockableSideDialog = function(titleUnescaped, dialogContent, useGlass, verticalSpaceAbove) {
		this.$useGlass = false;
		this.$verticalSpaceAbove = 0;
		this.$glass = null;
		this.template = null;
		$spiff_Dialog.call(this, titleUnescaped, dialogContent);
		this.template = new $spiff_Template(dialogContent);
		this.$useGlass = useGlass;
		this.$verticalSpaceAbove = verticalSpaceAbove;
		this.$init();
	};
	$spiff_DockableSideDialog.__typeName = 'spiff.DockableSideDialog';
	global.spiff.DockableSideDialog = $spiff_DockableSideDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DocumentBodySizeUsage
	var $spiff_DocumentBodySizeUsage = function() {
	};
	$spiff_DocumentBodySizeUsage.__typeName = 'spiff.DocumentBodySizeUsage';
	global.spiff.DocumentBodySizeUsage = $spiff_DocumentBodySizeUsage;
	////////////////////////////////////////////////////////////////////////////////
	// React.DOMElements
	var $spiff_DOMElements = function() {
	};
	$spiff_DOMElements.__typeName = 'spiff.DOMElements';
	$spiff_DOMElements.$htmlFactory = function DOMElements$HtmlFactory(type) {
		return React.createFactory(type);
	};
	$spiff_DOMElements.$svgFactory = function DOMElements$SvgFactory(type) {
		return React.createFactory(type);
	};
	global.spiff.DOMElements = $spiff_DOMElements;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DragSafeGlass
	var $spiff_DragSafeGlass = function() {
		$spiff_Glass.call(this, null, false);
		EventUtils.DragDropManager.registerDragGlass(this);
	};
	$spiff_DragSafeGlass.__typeName = 'spiff.DragSafeGlass';
	global.spiff.DragSafeGlass = $spiff_DragSafeGlass;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DragSortListItemDragAvatar
	var $spiff_DragSortListItemDragAvatar = function(listItemView) {
		this.$element = null;
		this.$element = listItemView.element.clone(false).addClass('dragAvatar');
	};
	$spiff_DragSortListItemDragAvatar.__typeName = 'spiff.DragSortListItemDragAvatar';
	global.spiff.DragSortListItemDragAvatar = $spiff_DragSortListItemDragAvatar;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DropdownComponent
	var $spiff_DropdownComponent = function() {
		React.Component.call(this);
		this.state = { isSelecting: false };
	};
	$spiff_DropdownComponent.__typeName = 'spiff.DropdownComponent';
	global.spiff.DropdownComponent = $spiff_DropdownComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.EditableTextLabelComponent
	var $spiff_EditableTextLabelComponent = function(props, context) {
		ss.makeGenericType($spiff_ReactSpiffAdapter$3, [$spiff_EditableTextView, Object, Object]).call(this, $spiff_EditableTextLabelComponent.$createFromProps(props), props, context);
	};
	$spiff_EditableTextLabelComponent.__typeName = 'spiff.EditableTextLabelComponent';
	$spiff_EditableTextLabelComponent.$createFromProps = function EditableTextLabelComponent$CreateFromProps(props) {
		var widget = $spiff_EditableTextView.newEditableTextView(props.initialContent, props.placeHolderText, props.editOnDoubleClick);
		if (!tab.MiscUtil.isNullOrEmpty$3(props.tooltip)) {
			widget.get_inputElement().attr('title', props.tooltip);
			widget.get_textElement().find('.text-span').get(0).title = props.tooltip;
		}
		widget.showHover = ss.isNullOrUndefined(props.showHover) || props.showHover;
		widget.showTooltip = props.showTooltip;
		widget.add_committed(function() {
			props.onCommit(widget.get_text());
		});
		if (!ss.isNullOrEmptyString(props.styleOverrideClass)) {
			tab.StyleUtil.appendCSSRuleToStyleSheet$1(props.styleOverrideClass + '-override-style', '.' + props.styleOverrideClass + ' .tab-editable-text-view > div', props.styleOverride);
		}
		return widget;
	};
	global.spiff.EditableTextLabelComponent = $spiff_EditableTextLabelComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.EditableTextView
	var $spiff_EditableTextView = function(template, initialText, placeHolderText, editOnDoubleClick) {
		this.$template$1 = null;
		this.$3$HoverStateChangedField = null;
		this.$3$EditingField = null;
		this.$3$CommittedField = null;
		this.$3$IsEditingField = false;
		this.showHover = false;
		this.showTooltip = false;
		$spiff_TextInputView.call(this, template, initialText, placeHolderText, null, false);
		this.$template$1 = template;
		this.updateTextElement(initialText);
		var textButton = new $spiff_Button(this.get_textElement());
		if (editOnDoubleClick) {
			this.disposables.add$1($spiff_TableauClickHandler.targetAndDoubleClick(textButton.element.get(0), ss.mkdel(this, function(e) {
				this.edit();
			})));
		}
		else {
			textButton.add_click(ss.mkdel(this, this.edit));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				textButton.remove_click(ss.mkdel(this, this.edit));
				textButton.dispose();
			})));
		}
		this.get_textElement().show();
		this.get_inputElement().hide();
		this.get_inputElement().blur(ss.mkdel(this, function(e1) {
			this.commit();
		}));
		this.add_enterKeyPressed(ss.mkdel(this, function() {
			this.commit();
		}));
		this.add_propertyChanged(ss.mkdel(this, function() {
			this.updateTextElement(this.get_text());
		}));
		if (!tsConfig.is_mobile) {
			var hoverHandler = new $spiff_HoverBehavior(this, null, ss.mkdel(this, function(jQueryEvent) {
				if (this.showHover) {
					this.element.addClass($spiff_EditableTextView.$hoverClassName);
					this.$handleHoverStateChanged(true);
				}
			}), ss.mkdel(this, function(jQueryEvent1) {
				if (this.showHover) {
					this.element.removeClass($spiff_EditableTextView.$hoverClassName);
					this.$handleHoverStateChanged(false);
				}
			}));
			this.disposables.add$1(hoverHandler);
		}
		this.set_isEditing(false);
		this.showHover = true;
	};
	$spiff_EditableTextView.__typeName = 'spiff.EditableTextView';
	$spiff_EditableTextView.newEditableTextView = function EditableTextView$NewEditableTextView(initialContent, placeHolderText, editOnDoubleClick) {
		var template = new $spiff_$EditableTextViewTemplate();
		return new $spiff_EditableTextView(template, initialContent, placeHolderText, editOnDoubleClick);
	};
	global.spiff.EditableTextView = $spiff_EditableTextView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.EnsureElementVisibleHelper
	var $spiff_EnsureElementVisibleHelper = function() {
		this.$scrollingComponent = null;
		this.$boundScrollingComponentRef = null;
		this.$scrollingComponent = null;
		this.$boundScrollingComponentRef = ss.mkdel(this, function(c) {
			this.$scrollingComponent = c;
		});
	};
	$spiff_EnsureElementVisibleHelper.__typeName = 'spiff.EnsureElementVisibleHelper';
	$spiff_EnsureElementVisibleHelper.create = function EnsureElementVisibleHelper$Create() {
		return new $spiff_EnsureElementVisibleHelper();
	};
	global.spiff.EnsureElementVisibleHelper = $spiff_EnsureElementVisibleHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.EventUtil
	var $spiff_EventUtil = function() {
	};
	$spiff_EventUtil.__typeName = 'spiff.EventUtil';
	$spiff_EventUtil.bindWithDispose = function EventUtil$BindWithDispose(element, eventName, handler) {
		var eventId = ss.formatString('{0}.{1}', eventName, ++$spiff_EventUtil.$eventCounter);
		element.on(eventId, handler);
		return new tab.CallOnDispose(function() {
			element.off(eventId);
		});
	};
	$spiff_EventUtil.addEventListenerWithDispose = function EventUtil$AddEventListenerWithDispose(element, eventName, handler, capture) {
		element.addEventListener(eventName.toString(), handler, capture);
		return new tab.CallOnDispose(function() {
			element.removeEventListener(eventName.toString(), handler, capture);
		});
	};
	$spiff_EventUtil.isCtrlKey = function EventUtil$IsCtrlKey(e) {
		if (ss.isNullOrUndefined(e)) {
			return false;
		}
		return (BrowserSupport.BrowserSupport.IsMac() ? e.metaKey : e.ctrlKey);
	};
	$spiff_EventUtil.getDragFileList = function EventUtil$GetDragFileList(de) {
		if (ss.isNullOrUndefined(de) || ss.isNullOrUndefined(de.dataTransfer) || ss.isNullOrUndefined(de.dataTransfer.files) || de.dataTransfer.files.length === 0) {
			return null;
		}
		return de.dataTransfer.files;
	};
	$spiff_EventUtil.stopEvent = function EventUtil$StopEvent(e) {
		e.stopPropagation();
		e.preventDefault();
	};
	$spiff_EventUtil.stopEvent$1 = function EventUtil$StopEvent(e) {
		e.stopPropagation();
		e.preventDefault();
	};
	$spiff_EventUtil.stopEvent$2 = function EventUtil$StopEvent(e) {
		e.stopPropagation();
		e.preventDefault();
	};
	global.spiff.EventUtil = $spiff_EventUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.EventUtilsInitializer
	var $spiff_EventUtilsInitializer = function() {
	};
	$spiff_EventUtilsInitializer.__typeName = 'spiff.EventUtilsInitializer';
	global.spiff.EventUtilsInitializer = $spiff_EventUtilsInitializer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ExclusiveMultiSelectGroupSelection
	var $spiff_ExclusiveMultiSelectGroupSelection = function(groupSize) {
		$spiff_MultiSelectGroupSelection.call(this, groupSize);
	};
	$spiff_ExclusiveMultiSelectGroupSelection.__typeName = 'spiff.ExclusiveMultiSelectGroupSelection';
	$spiff_ExclusiveMultiSelectGroupSelection.buildExclusiveMultiSelectGroupSelection = function(T) {
		return function ExclusiveMultiSelectGroupSelection$BuildExclusiveMultiSelectGroupSelection(group, isSelected) {
			ss.Debug.assert(ss.isValue(group));
			ss.Debug.assert(!ss.staticEquals(isSelected, null));
			var groupSelection = new $spiff_ExclusiveMultiSelectGroupSelection(group.length);
			var groupLength = group.length;
			for (var i = 0; i < groupLength; ++i) {
				if (isSelected(group[i])) {
					groupSelection.get_selectedIndexes()[i] = true;
				}
			}
			groupSelection.validateAllSelectedState();
			ss.Debug.assert(groupSelection.get_selectedCount() >= 1 || groupSelection.get_theAllItemIsSelected() && groupSelection.get_selectedCount() === 0);
			return groupSelection;
		};
	};
	global.spiff.ExclusiveMultiSelectGroupSelection = $spiff_ExclusiveMultiSelectGroupSelection;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ExclusiveSingleSelectGroupSelection
	var $spiff_ExclusiveSingleSelectGroupSelection = function(groupSize) {
		$spiff_SingleSelectGroupSelection.call(this, groupSize);
	};
	$spiff_ExclusiveSingleSelectGroupSelection.__typeName = 'spiff.ExclusiveSingleSelectGroupSelection';
	$spiff_ExclusiveSingleSelectGroupSelection.buildExclusiveSingleSelectGroupSelection = function(T) {
		return function ExclusiveSingleSelectGroupSelection$BuildExclusiveSingleSelectGroupSelection(group, isSelected) {
			ss.Debug.assert(ss.isValue(group));
			ss.Debug.assert(!ss.staticEquals(isSelected, null));
			var groupSelection = new $spiff_ExclusiveSingleSelectGroupSelection(group.length);
			var groupLength = group.length;
			for (var i = 0; i < groupLength; ++i) {
				if (isSelected(group[i])) {
					groupSelection.get_selectedIndexes()[i] = true;
				}
			}
			groupSelection.validateAllSelectedState();
			ss.Debug.assert(groupSelection.get_selectedCount() === 1 || groupSelection.get_theAllItemIsSelected() && groupSelection.get_selectedCount() === 0);
			return groupSelection;
		};
	};
	global.spiff.ExclusiveSingleSelectGroupSelection = $spiff_ExclusiveSingleSelectGroupSelection;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.FocusManager
	var $spiff_FocusManager = function() {
		{
			$spiff_FocusManager.$bindCapturedEventHandler('focus', $spiff_FocusManager.$handleFocus);
			$spiff_FocusManager.$bindCapturedEventHandler('blur', $spiff_FocusManager.$handleBlur);
			$spiff_FocusManager.$bindCapturedEventHandler('keydown', $spiff_FocusManager.$handleKey);
			$spiff_FocusManager.$bindCapturedEventHandler('keyup', $spiff_FocusManager.$handleKey);
			EventUtils.GlobalUIEvents.add_FirstTouch($spiff_FocusManager.$handleFirstTouch);
			if (!ss.referenceEquals(window.self, window.top)) {
				$spiff_FocusManager.$lastInput = 1;
			}
		}
	};
	$spiff_FocusManager.__typeName = 'spiff.FocusManager';
	$spiff_FocusManager.shutdown = function FocusManager$Shutdown() {
		if (ss.isNullOrUndefined($spiff_FocusManager.$instance)) {
			return;
		}
		$spiff_FocusManager.$unbindCapturedEventHandler('focus', $spiff_FocusManager.$handleFocus);
		$spiff_FocusManager.$unbindCapturedEventHandler('blur', $spiff_FocusManager.$handleBlur);
		$spiff_FocusManager.$unbindCapturedEventHandler('keydown', $spiff_FocusManager.$handleKey);
		$spiff_FocusManager.$unbindCapturedEventHandler('keyup', $spiff_FocusManager.$handleKey);
		EventUtils.GlobalUIEvents.remove_FirstTouch($spiff_FocusManager.$handleFirstTouch);
		$spiff_FocusManager.$instance = null;
	};
	$spiff_FocusManager.initialize = function FocusManager$Initialize() {
		if (ss.isNullOrUndefined($spiff_FocusManager.$instance)) {
			$spiff_FocusManager.$instance = new $spiff_FocusManager();
		}
	};
	$spiff_FocusManager.$bindCapturedEventHandler = function FocusManager$BindCapturedEventHandler(type, handler) {
		document.addEventListener(type, handler, true);
	};
	$spiff_FocusManager.$unbindCapturedEventHandler = function FocusManager$UnbindCapturedEventHandler(type, handler) {
		document.removeEventListener(type, handler, true);
	};
	$spiff_FocusManager.updateFocusIndicatorVisibility = function FocusManager$UpdateFocusIndicatorVisibility() {
		$(document.activeElement).toggleClass($spiff_FocusManager.$showIndicatorClass, $spiff_FocusManager.$lastInput === 1);
	};
	$spiff_FocusManager.$handleFocus = function FocusManager$HandleFocus(e) {
		if (ss.referenceEquals(document.activeElement, document.body)) {
			return;
		}
		if (document.hasFocus() && ss.referenceEquals(document.activeElement, e.target) && $spiff_$FocusManager$NavigationKeyState.$isAnyDown()) {
			$spiff_FocusManager.$lastInput = 1;
		}
		$spiff_FocusManager.updateFocusIndicatorVisibility();
	};
	$spiff_FocusManager.$handleBlur = function FocusManager$HandleBlur(e) {
		window.setTimeout(function() {
			if (document.hasFocus()) {
				$(e.target).removeClass($spiff_FocusManager.$showIndicatorClass);
			}
			else {
				$spiff_$FocusManager$NavigationKeyState.$clear();
			}
		});
	};
	$spiff_FocusManager.$handleKey = function FocusManager$HandleKey(e) {
		var code = e.keyCode;
		$spiff_$FocusManager$NavigationKeyState.$set(code, e.type === 'keydown');
		if (ss.isNullOrUndefined(document.activeElement)) {
			document.body.focus();
		}
	};
	$spiff_FocusManager.$handleFirstTouch = function FocusManager$HandleFirstTouch(e, cancelCallback) {
		$spiff_FocusManager.$lastInput = 0;
	};
	$spiff_FocusManager.wasFocusedByClick = function FocusManager$WasFocusedByClick() {
		return $spiff_FocusManager.$lastInput === 0;
	};
	$spiff_FocusManager.trapFocus = function FocusManager$TrapFocus(container) {
		container.off($spiff_FocusManager.$keyDownEventName).on($spiff_FocusManager.$keyDownEventName, $spiff_FocusManager.$onTrappedKeyDown);
	};
	$spiff_FocusManager.untrapFocus = function FocusManager$UntrapFocus(container) {
		container.off($spiff_FocusManager.$keyDownEventName);
	};
	$spiff_FocusManager.$onTrappedKeyDown = function FocusManager$OnTrappedKeyDown(e) {
		if (e.which === 9) {
			var tabbables = $(e.currentTarget).find(':tabbable');
			if (ss.referenceEquals(e.target, tabbables.last()[0]) && !e.shiftKey) {
				tabbables.first().focus();
			}
			else if (ss.referenceEquals(e.target, tabbables.first()[0]) && e.shiftKey) {
				tabbables.last().focus();
			}
			else if (tabbables.length > 0) {
				return;
			}
			e.preventDefault();
			e.stopPropagation();
		}
	};
	global.spiff.FocusManager = $spiff_FocusManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.FullscreenUtil
	var $spiff_FullscreenUtil = function() {
	};
	$spiff_FullscreenUtil.__typeName = 'spiff.FullscreenUtil';
	$spiff_FullscreenUtil.add_fullscreenStateChanged = function FullscreenUtil$add_FullscreenStateChanged(value) {
		$spiff_FullscreenUtil.$1$FullscreenStateChangedField = ss.delegateCombine($spiff_FullscreenUtil.$1$FullscreenStateChangedField, value);
	};
	$spiff_FullscreenUtil.remove_fullscreenStateChanged = function FullscreenUtil$remove_FullscreenStateChanged(value) {
		$spiff_FullscreenUtil.$1$FullscreenStateChangedField = ss.delegateRemove($spiff_FullscreenUtil.$1$FullscreenStateChangedField, value);
	};
	$spiff_FullscreenUtil.get_fullscreenChangeEventName = function FullscreenUtil$get_FullscreenChangeEventName() {
		return $spiff_FullscreenUtil.$onfullscreenchangeProperty.substring(2);
	};
	$spiff_FullscreenUtil.get_fullscreenEnabled = function FullscreenUtil$get_FullscreenEnabled() {
		if (ss.isNullOrUndefined($spiff_FullscreenUtil.$fullscreenEnabledProperty)) {
			return false;
		}
		return !!document[$spiff_FullscreenUtil.$fullscreenEnabledProperty];
	};
	$spiff_FullscreenUtil.get_fullscreenElement = function FullscreenUtil$get_FullscreenElement() {
		if (ss.isNullOrUndefined($spiff_FullscreenUtil.$fullscreenElementProperty)) {
			return null;
		}
		return ss.cast(document[$spiff_FullscreenUtil.$fullscreenElementProperty], HTMLElement);
	};
	$spiff_FullscreenUtil.get_inFullscreenMode = function FullscreenUtil$get_InFullscreenMode() {
		return ss.isValue($spiff_FullscreenUtil.get_fullscreenElement());
	};
	$spiff_FullscreenUtil.$findFirstAvailableProperty = function FullscreenUtil$FindFirstAvailableProperty(obj, candidates) {
		for (var $t1 = 0; $t1 < candidates.length; $t1++) {
			var property = candidates[$t1];
			if (property in obj || property.toLowerCase() in obj) {
				return property;
			}
		}
		return null;
	};
	$spiff_FullscreenUtil.exitFullscreen = function FullscreenUtil$ExitFullscreen() {
		if (ss.isNullOrUndefined($spiff_FullscreenUtil.$exitFullscreenProperty)) {
			return;
		}
		document[$spiff_FullscreenUtil.$exitFullscreenProperty]();
	};
	$spiff_FullscreenUtil.requestFullscreen = function FullscreenUtil$RequestFullscreen(element) {
		if (ss.isNullOrUndefined($spiff_FullscreenUtil.$requestFullscreenProperty)) {
			return;
		}
		element[$spiff_FullscreenUtil.$requestFullscreenProperty]();
	};
	$spiff_FullscreenUtil.$handleFullscreenChange = function FullscreenUtil$HandleFullscreenChange(e) {
		document.documentElement.classList.toggle('fullscreen', $spiff_FullscreenUtil.get_inFullscreenMode());
		window.setTimeout(function() {
			if (!ss.staticEquals($spiff_FullscreenUtil.$1$FullscreenStateChangedField, null)) {
				$spiff_FullscreenUtil.$1$FullscreenStateChangedField();
			}
		});
	};
	$spiff_FullscreenUtil.$updateTrapFocus = function FullscreenUtil$UpdateTrapFocus() {
		var documentElement = $(document.documentElement);
		if ($spiff_FullscreenUtil.get_inFullscreenMode()) {
			$spiff_FocusManager.trapFocus(documentElement);
		}
		else {
			$spiff_FocusManager.untrapFocus(documentElement);
		}
	};
	$spiff_FullscreenUtil.centeringContainerOffset = function FullscreenUtil$CenteringContainerOffset() {
		if (!$spiff_FullscreenUtil.get_inFullscreenMode()) {
			return 0;
		}
		var container = $($spiff_FullscreenUtil.$centeringContainerSelector);
		return container.offset().top;
	};
	global.spiff.FullscreenUtil = $spiff_FullscreenUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.GenericDropdownButtonComponent
	var $spiff_GenericDropdownButtonComponent = function(props) {
		$spiff_PureRenderComponent.call(this, props);
	};
	$spiff_GenericDropdownButtonComponent.__typeName = 'spiff.GenericDropdownButtonComponent';
	$spiff_GenericDropdownButtonComponent.create = function GenericDropdownButtonComponent$Create(props) {
		return React.createElement($spiff_GenericDropdownButtonComponent, props);
	};
	global.spiff.GenericDropdownButtonComponent = $spiff_GenericDropdownButtonComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Glass
	var $spiff_Glass = function(parentEl, disableTouchPageZoom) {
		this.$parentElement = null;
		this.$clickHandler = null;
		this.$2$ClickField = null;
		$spiff_Widget.call(this, $($spiff_Glass.$htmlTemplate));
		this.$parentElement = parentEl || document.body;
		if (!ss.referenceEquals(this.$parentElement, document.body)) {
			this.element.css('position', 'absolute');
		}
		var config = new EventUtils.EventHandleSpec();
		config.SetHandler('firstTouch', ss.mkdel(this, this.handleClick));
		if (disableTouchPageZoom) {
			config.doubleTap = function(e) {
				e.preventDefault();
			};
			config.pinchStart = function(e1) {
				e1.preventDefault();
			};
		}
		this.$clickHandler = $spiff_TableauClickHandler.targetAndConfig(this.element[0], config).onClick(ss.mkdel(this, this.handleClick)).onRightClick(ss.mkdel(this, this.handleClick));
	};
	$spiff_Glass.__typeName = 'spiff.Glass';
	global.spiff.Glass = $spiff_Glass;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Components.GridIScrollHandler
	var $spiff_GridIScrollHandler = function(props) {
		this.$scrollingControl = null;
		this.$bindToScrollingControl = null;
		this.$callOnScrollToEnd = null;
		React.Component.call(this, props);
		this.state = {};
		this.$bindToScrollingControl = ss.mkdel(this, function(scrollControl) {
			this.$scrollingControl = scrollControl;
		});
	};
	$spiff_GridIScrollHandler.__typeName = 'spiff.GridIScrollHandler';
	global.spiff.GridIScrollHandler = $spiff_GridIScrollHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.GroupSelection
	var $spiff_GroupSelection = function(groupSize) {
		this.groupSize = 0;
		this.allSelected = false;
		this.$1$SelectedIndexesField = null;
		this.groupSize = groupSize;
		this.allSelected = false;
		this.set_selectedIndexes({});
	};
	$spiff_GroupSelection.__typeName = 'spiff.GroupSelection';
	global.spiff.GroupSelection = $spiff_GroupSelection;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.HorizontalSliderComponent
	var $spiff_HorizontalSliderComponent = function(props, context) {
		this.$locallyModified = false;
		$spiff_PureRenderComponent.$ctor1.call(this, props, context);
		this.state = { value: props.initialValue, emptyTextBox: false };
	};
	$spiff_HorizontalSliderComponent.__typeName = 'spiff.HorizontalSliderComponent';
	global.spiff.HorizontalSliderComponent = $spiff_HorizontalSliderComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.HoverAddClassBehavior
	var $spiff_HoverAddClassBehavior = function() {
	};
	$spiff_HoverAddClassBehavior.__typeName = 'spiff.HoverAddClassBehavior';
	$spiff_HoverAddClassBehavior.attach = function HoverAddClassBehavior$Attach(widget, classToAdd, childSelector) {
		classToAdd = ss.coalesce(classToAdd, 'hover');
		return new $spiff_HoverBehavior(widget, childSelector, function(e) {
			$spiff_HoverAddClassBehavior.$handleEnter(e, classToAdd);
		}, function(e1) {
			$spiff_HoverAddClassBehavior.$handleLeave(e1, classToAdd);
		});
	};
	$spiff_HoverAddClassBehavior.$handleEnter = function HoverAddClassBehavior$HandleEnter(e, classToAdd) {
		tab.Logger.getLogger($spiff_HoverAddClassBehavior, null).debug('Hover, element=%o, class=%s', [e.currentTarget, classToAdd]);
		$(e.currentTarget).addClass(classToAdd);
	};
	$spiff_HoverAddClassBehavior.$handleLeave = function HoverAddClassBehavior$HandleLeave(e, classToAdd) {
		tab.Logger.getLogger($spiff_HoverAddClassBehavior, null).debug('Leave, element=%o, class=%s', [e.currentTarget, classToAdd]);
		$(e.currentTarget).removeClass(classToAdd);
	};
	global.spiff.HoverAddClassBehavior = $spiff_HoverAddClassBehavior;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.HoverBehavior
	var $spiff_HoverBehavior = function(widget, childSelector, onEnter, onExit) {
		this.$childSelector = null;
		this.$onEnter = null;
		this.$onExit = null;
		this.$widget = null;
		this.$widget = widget;
		this.$childSelector = childSelector;
		this.$onEnter = onEnter;
		this.$onExit = onExit;
		this.$widget.add_disposed(ss.mkdel(this, this.$handleWidgetDispose));
		if (ss.isValue(childSelector)) {
			this.$widget.element.on('mouseenter' + this.get_$eventNamespace(), childSelector, ss.mkdel(this, this.$handleEnter));
			this.$widget.element.on('mouseleave' + this.get_$eventNamespace(), childSelector, ss.mkdel(this, this.$handleLeave));
		}
		else {
			this.$widget.element.on('mouseenter' + this.get_$eventNamespace(), ss.mkdel(this, this.$handleEnter));
			this.$widget.element.on('mouseleave' + this.get_$eventNamespace(), ss.mkdel(this, this.$handleLeave));
		}
		tab.Log.get(this).debug('New HoverBehavior: widget=%o', [this.$widget]);
	};
	$spiff_HoverBehavior.__typeName = 'spiff.HoverBehavior';
	global.spiff.HoverBehavior = $spiff_HoverBehavior;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ICompositeSearchWidgetTemplate
	var $spiff_ICompositeSearchWidgetTemplate = function() {
	};
	$spiff_ICompositeSearchWidgetTemplate.__typeName = 'spiff.ICompositeSearchWidgetTemplate';
	global.spiff.ICompositeSearchWidgetTemplate = $spiff_ICompositeSearchWidgetTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IconButton
	var $spiff_IconButton = function() {
		this.iconElement = null;
		$spiff_Button.call(this, $('<a>').addClass('tab-iconButton'));
		this.setEnabled(true);
	};
	$spiff_IconButton.__typeName = 'spiff.IconButton';
	global.spiff.IconButton = $spiff_IconButton;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IconButtonComponent
	var $spiff_IconButtonComponent = function(props) {
		React.Component.call(this, props);
		this.state = this.$buildState();
	};
	$spiff_IconButtonComponent.__typeName = 'spiff.IconButtonComponent';
	global.spiff.IconButtonComponent = $spiff_IconButtonComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IconButtonState
	var $spiff_IconButtonState = function() {
		this.isActive = false;
	};
	$spiff_IconButtonState.__typeName = 'spiff.IconButtonState';
	global.spiff.IconButtonState = $spiff_IconButtonState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IContent
	var $spiff_IContent = function() {
	};
	$spiff_IContent.__typeName = 'spiff.IContent';
	global.spiff.IContent = $spiff_IContent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IDialogContent
	var $spiff_IDialogContent = function() {
	};
	$spiff_IDialogContent.__typeName = 'spiff.IDialogContent';
	global.spiff.IDialogContent = $spiff_IDialogContent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IHasEnabledState
	var $spiff_IHasEnabledState = function() {
	};
	$spiff_IHasEnabledState.__typeName = 'spiff.IHasEnabledState';
	global.spiff.IHasEnabledState = $spiff_IHasEnabledState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IListItemContentCreator
	var $spiff_IListItemContentCreator = function() {
	};
	$spiff_IListItemContentCreator.__typeName = 'spiff.IListItemContentCreator';
	global.spiff.IListItemContentCreator = $spiff_IListItemContentCreator;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IListItemDragAvatarCreator
	var $spiff_IListItemDragAvatarCreator = function() {
	};
	$spiff_IListItemDragAvatarCreator.__typeName = 'spiff.IListItemDragAvatarCreator';
	global.spiff.IListItemDragAvatarCreator = $spiff_IListItemDragAvatarCreator;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IListViewDragFeedback
	var $spiff_IListViewDragFeedback = function() {
	};
	$spiff_IListViewDragFeedback.__typeName = 'spiff.IListViewDragFeedback';
	global.spiff.IListViewDragFeedback = $spiff_IListViewDragFeedback;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IListViewScrollHandler
	var $spiff_IListViewScrollHandler = function() {
	};
	$spiff_IListViewScrollHandler.__typeName = 'spiff.IListViewScrollHandler';
	global.spiff.IListViewScrollHandler = $spiff_IListViewScrollHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.InputType
	var $spiff_InputType = function() {
	};
	$spiff_InputType.__typeName = 'spiff.InputType';
	global.spiff.InputType = $spiff_InputType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.InteractAsButtonWrapperComponent
	var $spiff_InteractAsButtonWrapperComponent = function(props, context) {
		this.$eventHandleSpec = null;
		$spiff_PureRenderComponent.$ctor1.call(this, props, context);
		var $t1 = new EventUtils.EventHandleSpec();
		$t1.tap = ss.mkdel(this, function(event) {
			this.$handleInteraction();
			this.$handleClickEvent(event);
		});
		this.$eventHandleSpec = $t1;
	};
	$spiff_InteractAsButtonWrapperComponent.__typeName = 'spiff.InteractAsButtonWrapperComponent';
	$spiff_InteractAsButtonWrapperComponent.create = function InteractAsButtonWrapperComponent$Create(props) {
		return React.createElement($spiff_InteractAsButtonWrapperComponent, props);
	};
	global.spiff.InteractAsButtonWrapperComponent = $spiff_InteractAsButtonWrapperComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IPropsProvider
	var $spiff_IPropsProvider$1 = function(TProps) {
		var $type = function() {
		};
		ss.registerGenericInterfaceInstance($type, $spiff_IPropsProvider$1, [TProps], { add_propsUpdated: null, remove_propsUpdated: null, get_props: null }, function() {
			return [];
		});
		return $type;
	};
	$spiff_IPropsProvider$1.__typeName = 'spiff.IPropsProvider$1';
	ss.initGenericInterface($spiff_IPropsProvider$1, $asm, 1);
	global.spiff.IPropsProvider$1 = $spiff_IPropsProvider$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IScrollable
	var $spiff_IScrollable = function() {
	};
	$spiff_IScrollable.__typeName = 'spiff.IScrollable';
	global.spiff.IScrollable = $spiff_IScrollable;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IScrollComponent
	var $spiff_IScrollComponent = function(props, context) {
		this.$refreshTimeout = null;
		this.$windowDisposable = null;
		this.iScroll = null;
		React.Component.call(this, props, context);
		this.state = { hovered: false, scrolling: false };
	};
	$spiff_IScrollComponent.__typeName = 'spiff.IScrollComponent';
	global.spiff.IScrollComponent = $spiff_IScrollComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IScroller
	var $spiff_IScroller = function() {
	};
	$spiff_IScroller.__typeName = 'spiff.IScroller';
	global.spiff.IScroller = $spiff_IScroller;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IScrollingControl
	var $spiff_IScrollingControl = function() {
	};
	$spiff_IScrollingControl.__typeName = 'spiff.IScrollingControl';
	global.spiff.IScrollingControl = $spiff_IScrollingControl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IScrollProps
	var $spiff_IScrollProps = function() {
		this.extraCssClass = null;
		this.iScrollOptions = null;
		this.refreshDelay = 0;
		this.keepPositionOnRecreate = true;
		this.alwaysShowScrollbarsIfScrollable = false;
		this.startingY = null;
		this.augmentedScrollX = true;
		this.augmentedScrollY = true;
		this.customStyle = null;
		this.scrollStopCallback = null;
		this.scrollCallback = null;
	};
	$spiff_IScrollProps.__typeName = 'spiff.IScrollProps';
	global.spiff.IScrollProps = $spiff_IScrollProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IScrollTemplate
	var $spiff_IScrollTemplate = function(htmlTemplate) {
		this.content = null;
		this.scroll = null;
		$spiff_Template.call(this, $(htmlTemplate));
	};
	$spiff_IScrollTemplate.__typeName = 'spiff.IScrollTemplate';
	global.spiff.IScrollTemplate = $spiff_IScrollTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IScrollView
	var $spiff_IScrollView = function(viewModel, template) {
		this.scrollEndCleanup = new tab.DisposableHolder();
		this.scroller = null;
		$spiff_ScrollableView.call(this, viewModel, template);
	};
	$spiff_IScrollView.__typeName = 'spiff.IScrollView';
	global.spiff.IScrollView = $spiff_IScrollView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ISelectable
	var $spiff_ISelectable = function() {
	};
	$spiff_ISelectable.__typeName = 'spiff.ISelectable';
	global.spiff.ISelectable = $spiff_ISelectable;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ITabControlTemplate
	var $spiff_ITabControlTemplate = function() {
	};
	$spiff_ITabControlTemplate.__typeName = 'spiff.ITabControlTemplate';
	global.spiff.ITabControlTemplate = $spiff_ITabControlTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ITextInputViewTemplate
	var $spiff_ITextInputViewTemplate = function() {
	};
	$spiff_ITextInputViewTemplate.__typeName = 'spiff.ITextInputViewTemplate';
	global.spiff.ITextInputViewTemplate = $spiff_ITextInputViewTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.IUberPopupContent
	var $spiff_IUberPopupContent = function() {
	};
	$spiff_IUberPopupContent.__typeName = 'spiff.IUberPopupContent';
	global.spiff.IUberPopupContent = $spiff_IUberPopupContent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Testhooks.JQueryGestureExtensions
	var $spiff_JQueryGestureExtensions = function() {
	};
	$spiff_JQueryGestureExtensions.__typeName = 'spiff.JQueryGestureExtensions';
	$spiff_JQueryGestureExtensions.fireTableauGesture = function JQueryGestureExtensions$FireTableauGesture(targetElement, callbackName, evt, param) {
		if (ss.isNullOrUndefined(evt)) {
			var fakeEvent = new Object();
			fakeEvent.type = 'touchend';
			fakeEvent.timeStamp = tab.DateUtil.get_nowAsTime();
			fakeEvent.keyCode = null;
			fakeEvent.ctrlKey = false;
			fakeEvent.altKey = false;
			fakeEvent.metaKey = false;
			fakeEvent.shiftKey = false;
			fakeEvent.charOrCode = null;
			fakeEvent.clientX = 0;
			fakeEvent.clientY = 0;
			fakeEvent.touches = new Array();
			fakeEvent.targetTouches = new Array();
			fakeEvent.changedTouches = new Array();
			fakeEvent.target = targetElement;
			evt = fakeEvent;
		}
		var type;
		switch (callbackName) {
			case 'dragMove':
			case 'dragStart':
			case 'dragEnd': {
				type = 'drag';
				break;
			}
			case 'hover':
			case 'moving':
			case 'mouseleave': {
				type = 'hover';
				break;
			}
			case 'pinchStart':
			case 'pinchMove':
			case 'pinchEnd': {
				type = 'pinch';
				break;
			}
			default: {
				type = 'discrete';
				break;
			}
		}
		var normalizedEvent = EventUtils.NormalizedEvent.Create(evt, targetElement, null);
		EventUtils.Gesture.FromHtml(targetElement, type).Fire(callbackName, normalizedEvent, param || {});
	};
	global.spiff.JQueryGestureExtensions = $spiff_JQueryGestureExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.LabelButton
	var $spiff_LabelButton = function(dom, labelSelector) {
		this.$labelSelector = $spiff_LabelButton.$labelSelectorDefault;
		$spiff_Button.call(this, dom);
		this.$labelSelector = labelSelector;
	};
	$spiff_LabelButton.__typeName = 'spiff.LabelButton';
	$spiff_LabelButton.newAnchorButton = function LabelButton$NewAnchorButton() {
		return new $spiff_LabelButton($($spiff_LabelButton.$htmlTemplateLink), $spiff_LabelButton.$labelSelectorDefault);
	};
	$spiff_LabelButton.newNativeButton = function LabelButton$NewNativeButton() {
		return new $spiff_LabelButton($($spiff_LabelButton.$htmlTemplateButton), $spiff_LabelButton.$labelSelectorDefault);
	};
	$spiff_LabelButton.newMenuButton = function LabelButton$NewMenuButton() {
		return new $spiff_LabelButton($($spiff_LabelButton.$htmlTemplateMenuButton), $spiff_LabelButton.$labelSelectorDefault);
	};
	$spiff_LabelButton.newTextButton = function LabelButton$NewTextButton(clickHandler, label) {
		var button = new $spiff_LabelButton($($spiff_LabelButton.$htmlTextButton), $spiff_LabelButton.$labelSelectorDefault);
		if (ss.isValue(clickHandler)) {
			button.add_click(clickHandler);
			button.disposables.add$1(new tab.CallOnDispose(function() {
				button.remove_click(clickHandler);
			}));
		}
		if (ss.isValue(label)) {
			button.set_label(label);
		}
		return button;
	};
	global.spiff.LabelButton = $spiff_LabelButton;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.LabelToggleButton
	var $spiff_LabelToggleButton = function(dom, labelSelector) {
		this.$labelSelector = $spiff_LabelToggleButton.$labelSelectorDefault;
		$spiff_ToggleButton.call(this, dom, null);
		this.$labelSelector = labelSelector;
	};
	$spiff_LabelToggleButton.__typeName = 'spiff.LabelToggleButton';
	$spiff_LabelToggleButton.newCheckbox = function LabelToggleButton$NewCheckbox(label, isSelected) {
		var btn = $spiff_LabelToggleButton.$createToggleButton($spiff_LabelToggleButton.$htmlToggleButton, label, isSelected);
		btn.element.addClass($spiff_LabelToggleButton.$unificationCheckboxClass).find('.icon').append($($spiff_LabelToggleButton.$htmlInnerIcon).addClass($spiff_LabelToggleButton.$unificationCheckboxImageClass));
		return btn;
	};
	$spiff_LabelToggleButton.newRadioButton = function LabelToggleButton$NewRadioButton(label, isSelected) {
		var btn = $spiff_LabelToggleButton.$createToggleButton($spiff_LabelToggleButton.$htmlToggleButton, label, isSelected);
		btn.element.addClass($spiff_LabelToggleButton.$unificationRadioButtonClass).find('.icon').append($($spiff_LabelToggleButton.$htmlInnerIcon));
		return btn;
	};
	$spiff_LabelToggleButton.$createToggleButton = function LabelToggleButton$CreateToggleButton(html, label, isSelected) {
		var $t1 = new $spiff_LabelToggleButton($(html), $spiff_LabelToggleButton.$labelSelectorDefault);
		$t1.set_label(label);
		$t1.set_selected(isSelected);
		var btn = $t1;
		var input = btn.get_inputElement();
		if (ss.isValue(input)) {
			input.click(function(e) {
				e.preventDefault();
			});
		}
		return btn;
	};
	global.spiff.LabelToggleButton = $spiff_LabelToggleButton;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.LineEditWithButtonComponent
	var $spiff_LineEditWithButtonComponent = function(props) {
		this.$eventHandleSpec = null;
		React.Component.call(this, props, null);
		this.state = this.$buildState();
		var $t1 = new EventUtils.EventHandleSpec();
		$t1.firstTouch = ss.mkdel(this, function(event) {
			this.handleEnterPress();
		});
		this.$eventHandleSpec = $t1;
	};
	$spiff_LineEditWithButtonComponent.__typeName = 'spiff.LineEditWithButtonComponent';
	global.spiff.LineEditWithButtonComponent = $spiff_LineEditWithButtonComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListComponent
	var $spiff_ListComponent$2 = function(TListProps, TListItemData) {
		var $type = function(props, context) {
			React.Component.call(this, props, context);
		};
		ss.registerGenericClassInstance($type, $spiff_ListComponent$2, [TListProps, TListItemData], {
			render: function ListComponent$Render() {
				var items = _.map(this.props.items, ss.mkdel(this, function(item) {
					var spec = this.getEventHandleSpecForItem(item);
					var itemProps = { className: 'tabListItem', key: this.getItemKey(item.data) };
					if (ss.isNullOrUndefined(spec)) {
						return $spiff_DOMElements.div(itemProps, this.buildItem(item.data));
					}
					else {
						return EventUtils.EventForwarder.div(spec, itemProps, this.buildItem(item.data));
					}
				}));
				return $spiff_DOMElements.div({ className: 'tabList' }, items);
			},
			getItemKey: null,
			buildItem: null,
			getEventHandleSpecForItem: function ListComponent$GetEventHandleSpecForItem(itemProps) {
				return null;
			}
		}, function() {
			return React.Component;
		}, function() {
			return [];
		});
		return $type;
	};
	$spiff_ListComponent$2.__typeName = 'spiff.ListComponent$2';
	ss.initGenericClass($spiff_ListComponent$2, $asm, 2);
	global.spiff.ListComponent$2 = $spiff_ListComponent$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListItemDragSource
	var $spiff_ListItemDragSource = function(parentListView, listItemView) {
		this.$1$ParentListViewField = null;
		this.$1$DraggableListItemViewField = null;
		this.set_parentListView(parentListView);
		this.set_draggableListItemView(listItemView);
	};
	$spiff_ListItemDragSource.__typeName = 'spiff.ListItemDragSource';
	global.spiff.ListItemDragSource = $spiff_ListItemDragSource;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListItemGroup
	var $spiff_ListItemGroup = function(selectionType) {
		this.$anchorIndex = null;
		this.$rangeAnchorIndex = null;
		$spiff_SelectableGroup.call(this);
		this.set_selectionType(selectionType);
	};
	$spiff_ListItemGroup.__typeName = 'spiff.ListItemGroup';
	global.spiff.ListItemGroup = $spiff_ListItemGroup;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListItemView
	var $spiff_ListItemView = function(contentElement, viewModel) {
		this.$viewModel = null;
		this.$contentElement = null;
		$spiff_ToggleButton.call(this, $spiff_ListItemView.$wrapContentElement(contentElement), null);
		tab.Param.verifyValue(viewModel, 'viewModel');
		tab.Param.verifyValue(viewModel.get_id(), 'viewModel.Id');
		this.$viewModel = viewModel;
		this.$viewModel.add_propertyChanged(ss.mkdel(this, this.$onViewModelChange));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel.remove_propertyChanged(ss.mkdel(this, this.$onViewModelChange));
		})));
		this.set_selectionId(viewModel.get_id());
		this.set_widgetId(viewModel.get_id());
		this.$contentElement = contentElement;
	};
	$spiff_ListItemView.__typeName = 'spiff.ListItemView';
	$spiff_ListItemView.$wrapContentElement = function ListItemView$WrapContentElement(contentElement) {
		var wrapperElement = $('<div/>').addClass('tab-list-item');
		wrapperElement.append(contentElement);
		return wrapperElement;
	};
	global.spiff.ListItemView = $spiff_ListItemView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListItemViewModel
	var $spiff_ListItemViewModel = function(itemId, itemData, isSelected, isInvalid, isBold) {
		this.$id = null;
		this.$data = null;
		this.$selected = false;
		this.$isInvalid = false;
		this.$draggable = false;
		this.$spotlighted = false;
		this.$isBold = false;
		$spiff_BaseViewModel.call(this);
		this.$id = itemId;
		if (ss.isValue(itemData)) {
			this.$data = itemData;
		}
		this.$selected = isSelected;
		this.$isInvalid = isInvalid;
		this.$isBold = isBold;
	};
	$spiff_ListItemViewModel.__typeName = 'spiff.ListItemViewModel';
	$spiff_ListItemViewModel.newListItem = function ListItemViewModel$NewListItem(id, data, selected, isInvalid, isBold) {
		tab.Param.verifyString(id, 'id');
		return new $spiff_ListItemViewModel(id, data, selected, isInvalid, isBold);
	};
	global.spiff.ListItemViewModel = $spiff_ListItemViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListItemViewModelCollectionBuilder
	var $spiff_ListItemViewModelCollectionBuilder = function() {
		this.itemDatas = null;
		this.selectionIndexes = null;
		this.invalidIndexes = null;
		this.itemIds = null;
	};
	$spiff_ListItemViewModelCollectionBuilder.__typeName = 'spiff.ListItemViewModelCollectionBuilder';
	global.spiff.ListItemViewModelCollectionBuilder = $spiff_ListItemViewModelCollectionBuilder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListView
	var $spiff_ListView = function(viewModel, itemCreator) {
		this.$itemViews = [];
		this.$itemCreator = null;
		this.$3$DragFeedbackField = null;
		this.$scrollHandler = null;
		this.$3$ListItemsUpdatedField = null;
		ss.makeGenericType($spiff_BaseView$1, [$spiff_ListViewModel]).call(this, viewModel, new $spiff_ListViewTemplate());
		this.get_viewModel().add_selectionModelUpdated(ss.mkdel(this, this.$handleSelectionModelUpdated));
		this.get_viewModel().add_spotlightedItemChanged(ss.mkdel(this, this.$handleSpotlightedItemChanged));
		this.get_viewModel().add_itemMoved(ss.mkdel(this, this.$moveListItem));
		this.disposables.add(ss.mkdel(this, function() {
			this.get_viewModel().remove_selectionModelUpdated(ss.mkdel(this, this.$handleSelectionModelUpdated));
			this.get_viewModel().remove_spotlightedItemChanged(ss.mkdel(this, this.$handleSpotlightedItemChanged));
			this.get_viewModel().remove_itemMoved(ss.mkdel(this, this.$moveListItem));
		}));
		this.set_scrollHandler(new $spiff_$DefaultListViewScrollHandler(this.element));
		this.get_dom().get_listItemContainer().keypress(ss.mkdel(this, this.$handleKeyPress)).keydown(ss.mkdel(this, this.$handleKeyPress));
		this.$itemCreator = itemCreator;
		this.$buildListItems();
	};
	$spiff_ListView.__typeName = 'spiff.ListView';
	$spiff_ListView.createListView = function ListView$CreateListView(viewModel, creator) {
		return new $spiff_ListView(viewModel, creator);
	};
	global.spiff.ListView = $spiff_ListView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListViewDragSortFeedback
	var $spiff_ListViewDragSortFeedback = function() {
		this.$dragClassName = 'dragging';
		this.$dragHoverClassName = 'dragHover';
		this.$draggedElem = null;
		this.$draggedItemViewModel = null;
		this.$startIndex = 0;
		this.$moveToIndex = 0;
		this.$insertionPointerElem = null;
		this.$insertionPointerYOffset = 0;
		this.$listView = null;
		this.$numListItems = 0;
		this.$listTopPageY = 0;
		this.$listBottomPageY = 0;
		this.$dragTimer = null;
		this.$1$DragStartingField = null;
		this.$1$DragEndedField = null;
		this.$1$AvatarCreatorField = null;
	};
	$spiff_ListViewDragSortFeedback.__typeName = 'spiff.ListViewDragSortFeedback';
	global.spiff.ListViewDragSortFeedback = $spiff_ListViewDragSortFeedback;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListViewModel
	var $spiff_ListViewModel = function(collection, selectionType) {
		this.$props = null;
		this.$listItemGroup = null;
		this.$originalCollection = null;
		this.$filteredSortedCollection = null;
		this.$filter = null;
		this.$sort = null;
		this.$enabled = true;
		this.$spotlightedItemIndex = null;
		this.$2$PropsUpdatedField = null;
		this.$2$SelectionChangedField = null;
		this.$2$SubmitSelectionField = null;
		this.$2$ListItemMouseEnterField = null;
		this.$2$ListItemMouseMoveField = null;
		this.$2$SelectionModelUpdatedField = null;
		this.$2$SpotlightedItemChangedField = null;
		this.$2$ItemMovedField = null;
		$spiff_BaseViewModel.call(this);
		this.$props = {};
		this.$listItemGroup = new $spiff_ListItemGroup(selectionType);
		this.$listItemGroup.add_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
		this.update(collection);
	};
	$spiff_ListViewModel.__typeName = 'spiff.ListViewModel';
	global.spiff.ListViewModel = $spiff_ListViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ListViewTemplate
	var $spiff_ListViewTemplate = function() {
		this.$listItemContainer = null;
		$spiff_Template.call(this, $($spiff_ListViewTemplate.$html));
		this.$listItemContainer = this.getElementBySelector('.tab-list-itemHolder');
	};
	$spiff_ListViewTemplate.__typeName = 'spiff.ListViewTemplate';
	global.spiff.ListViewTemplate = $spiff_ListViewTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Menu
	var $spiff_Menu = function(items) {
		this.menuItems = null;
		this.defaultItem = null;
		this.menuItems = items;
		this.defaultItem = _.find(items, function(item) {
			return item.isDefault;
		});
	};
	$spiff_Menu.__typeName = 'spiff.Menu';
	global.spiff.Menu = $spiff_Menu;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuItem
	var $spiff_MenuItem = function() {
		this.name = null;
		this.description = null;
		this.title = null;
		this.readId = null;
		this.iconClass = null;
		this.iconClassTwo = null;
		this.itemClass = null;
		this.checkState = 0;
		this.enabled = false;
		this.isDivider = false;
		this.isTextInput = false;
		this.isDefault = false;
		this.subMenu = null;
		this.data = null;
		this.id = null;
		++$spiff_MenuItem.$nextIdentifier;
		this.id = 'menuItem' + $spiff_MenuItem.$nextIdentifier;
	};
	$spiff_MenuItem.__typeName = 'spiff.MenuItem';
	$spiff_MenuItem.newDivider = function MenuItem$NewDivider() {
		return (new $spiff_MenuItemBuilder()).isDivider(true).enabled(false).build();
	};
	$spiff_MenuItem.newActionItem = function MenuItem$NewActionItem(name, action, enabled, readId) {
		return (new $spiff_MenuItemBuilder()).name(name).readId(readId).data(action).enabled(!ss.staticEquals(action, null) && enabled).build();
	};
	$spiff_MenuItem.newActionItemWithItemClass = function MenuItem$NewActionItemWithItemClass(name, action, itemClass) {
		return (new $spiff_MenuItemBuilder()).name(name).itemClass(itemClass).data(action).enabled(!ss.staticEquals(action, null)).build();
	};
	$spiff_MenuItem.newItem = function MenuItem$NewItem(data, name, checkState, subMenu) {
		return (new $spiff_MenuItemBuilder()).data(data).name(name).checkState(ss.coalesce(checkState, 0)).subMenu(subMenu).enabled(ss.isNullOrUndefined(subMenu) || subMenu.menuItems.some(function(item) {
			return item.enabled;
		})).build();
	};
	global.spiff.MenuItem = $spiff_MenuItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuItemBuilder
	var $spiff_MenuItemBuilder = function() {
		this.$mi = null;
		this.$mi = new $spiff_MenuItem();
	};
	$spiff_MenuItemBuilder.__typeName = 'spiff.MenuItemBuilder';
	global.spiff.MenuItemBuilder = $spiff_MenuItemBuilder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuItemCheckState
	var $spiff_MenuItemCheckState = function() {
	};
	$spiff_MenuItemCheckState.__typeName = 'spiff.MenuItemCheckState';
	global.spiff.MenuItemCheckState = $spiff_MenuItemCheckState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuItemDividerTemplate
	var $spiff_MenuItemDividerTemplate = function() {
		$spiff_Template.call(this, $($spiff_MenuItemDividerTemplate.$html));
	};
	$spiff_MenuItemDividerTemplate.__typeName = 'spiff.MenuItemDividerTemplate';
	global.spiff.MenuItemDividerTemplate = $spiff_MenuItemDividerTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuItemTextInputTemplate
	var $spiff_MenuItemTextInputTemplate = function() {
		this.textInput = null;
		$spiff_Template.call(this, $($spiff_MenuItemTextInputTemplate.$html));
		this.textInput = this.getElementBySelector('.tabMenuItemTextInput');
	};
	$spiff_MenuItemTextInputTemplate.__typeName = 'spiff.MenuItemTextInputTemplate';
	global.spiff.MenuItemTextInputTemplate = $spiff_MenuItemTextInputTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuTemplate
	var $spiff_MenuTemplate = function() {
		this.content = null;
		$spiff_Template.call(this, $($spiff_MenuTemplate.$htmlTemplate));
		this.content = this.getElementBySelector('.tabMenuContent');
	};
	$spiff_MenuTemplate.__typeName = 'spiff.MenuTemplate';
	global.spiff.MenuTemplate = $spiff_MenuTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuView
	var $spiff_MenuView = function(viewModel, template) {
		this.menuStack = [];
		this.dom = null;
		this.menuViewModel = null;
		this.glass = null;
		this.$menuItemMap = {};
		this.menuDisposables = new tab.DisposableHolder();
		ss.makeGenericType($spiff_BaseMenuView$1, [$spiff_MenuViewModel]).call(this, viewModel, template);
		this.menuViewModel = viewModel;
		this.dom = template;
		this.menuStack[0] = this.dom;
		this.menuViewModel.add_menuChanged(ss.mkdel(this, this.updateMenu));
		this.menuViewModel.add_shown(ss.mkdel(this, this.shown));
		this.menuViewModel.add_hidden(ss.mkdel(this, this.hidden));
		this.menuViewModel.add_menuItemSelectionChanged(ss.mkdel(this, this.$selectionChanged));
		this.element.addClass(this.menuViewModel.get_theme().menuClass);
		this.element.on('blur', ss.mkdel(this, this.onBlur));
	};
	$spiff_MenuView.__typeName = 'spiff.MenuView';
	$spiff_MenuView.getMenuItem = function MenuView$GetMenuItem(menuItemDom) {
		return ss.cast(menuItemDom.data($spiff_MenuView.keyMenuItem), $spiff_MenuItem);
	};
	$spiff_MenuView.getMenuItemLevel = function MenuView$GetMenuItemLevel(menuItemDom) {
		return ss.unbox(ss.cast(ss.coalesce(menuItemDom.data($spiff_MenuView.$keyMenuItemLevel), 1), ss.Int32));
	};
	$spiff_MenuView.$menuItemTextInputKeypress = function MenuView$MenuItemTextInputKeypress(e) {
		e.stopPropagation();
	};
	global.spiff.MenuView = $spiff_MenuView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuViewModel
	var $spiff_MenuViewModel = function(shouldAnimateOnClose) {
		this.$disposeLater = null;
		this.$menu = null;
		this.$selectedItem = null;
		this.$focusedItem = null;
		this.$2$ShownField = null;
		this.$2$HiddenField = null;
		this.$2$MenuChangedField = null;
		this.$2$MenuItemClickedField = null;
		this.$2$MenuItemSelectionChangedField = null;
		this.$2$MenuItemFocusChangedField = null;
		this.$2$VisibleField = false;
		this.$2$IsExpandedField = false;
		this.$2$ShouldAnimateOnCloseField = false;
		this.$2$ThemeField = null;
		$spiff_BaseViewModel.call(this);
		this.set_shouldAnimateOnClose(shouldAnimateOnClose);
		this.set_theme(new $spiff_UnificationLightMenuTheme());
		this.$disposeLater = ss.mkdel(this, function() {
			_.defer(ss.mkdel(this, this.dispose));
		});
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.remove_hidden(this.$disposeLater);
		})));
	};
	$spiff_MenuViewModel.__typeName = 'spiff.MenuViewModel';
	$spiff_MenuViewModel.createForMenu = function MenuViewModel$CreateForMenu(menu, clickHandler, theme, onHideAction, onShowAction, shouldAnimateOnClose) {
		var $t1 = new $spiff_MenuViewModel(shouldAnimateOnClose);
		$t1.set_menu(menu);
		var vm = $t1;
		if (ss.isValue(clickHandler)) {
			vm.add_menuItemClicked(clickHandler);
			vm.disposables.add$1(new tab.CallOnDispose(function() {
				vm.remove_menuItemClicked(clickHandler);
			}));
		}
		vm.set_disposeOnHide(true);
		vm.set_theme(theme || new $spiff_UnificationLightMenuTheme());
		if (ss.isValue(onHideAction)) {
			vm.add_hidden(onHideAction);
			vm.disposables.add$1(new tab.CallOnDispose(function() {
				vm.remove_hidden(onHideAction);
			}));
		}
		if (ss.isValue(onShowAction)) {
			vm.add_shown(onShowAction);
			vm.disposables.add$1(new tab.CallOnDispose(function() {
				vm.remove_shown(onShowAction);
			}));
		}
		tab.ObjectRegistry.newView($spiff_MenuView).call(null, [vm]);
		return vm;
	};
	$spiff_MenuViewModel.handleMenuActionItemClicked = function MenuViewModel$HandleMenuActionItemClicked(arg) {
		if ($.isFunction(arg.data)) {
			ss.cast(arg.data, Function)();
		}
	};
	global.spiff.MenuViewModel = $spiff_MenuViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MenuViewTheme
	var $spiff_MenuViewTheme = function() {
		this.menuClass = 'tabMenuBaseTheme';
		this.itemClass = 'tabMenuItemBaseTheme';
		this.dividerClass = 'tabMenuItemDividerBaseTheme';
		this.noIconClass = 'tabMenuNoIcons';
		this.noDescClass = 'tabMenuNoDesc';
	};
	$spiff_MenuViewTheme.__typeName = 'spiff.MenuViewTheme';
	global.spiff.MenuViewTheme = $spiff_MenuViewTheme;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ModalDialog
	var $spiff_ModalDialog = function(titleUnescaped, template) {
		this.$glass = null;
		this.template = null;
		$spiff_Dialog.call(this, titleUnescaped, template.domRoot);
		this.template = template;
		this.$init();
		this.element.attr('aria-modal', 'true');
	};
	$spiff_ModalDialog.__typeName = 'spiff.ModalDialog';
	$spiff_ModalDialog.$ctor1 = function(titleUnescaped, body) {
		$spiff_ModalDialog.call(this, titleUnescaped, new $spiff_Template(body));
	};
	global.spiff.ModalDialog = $spiff_ModalDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MoveDragInstance
	var $spiff_MoveDragInstance = function(dragged, moveCallback, dropCallback, dragAvatar) {
		$spiff_MoveDragInstance.$ctor1.call(this, dragged, moveCallback, dropCallback, $spiff_MoveDragInstance.$noOpCallback, dragAvatar);
	};
	$spiff_MoveDragInstance.__typeName = 'spiff.MoveDragInstance';
	$spiff_MoveDragInstance.$ctor1 = function(dragged, moveCallback, dropCallback, cancelCallback, dragAvatar) {
		this.$moveCallback = null;
		this.$dropCallback = null;
		this.$cancelCallback = null;
		EventUtils.DragInstance.call(this, dragged, dragAvatar);
		this.$moveCallback = moveCallback;
		this.$dropCallback = dropCallback;
		this.$cancelCallback = cancelCallback;
	};
	global.spiff.MoveDragInstance = $spiff_MoveDragInstance;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MoveDragSource
	var $spiff_MoveDragSource = function(elementToDrag, elementToChange, addDraggingCSSToElementToChange) {
		this.$elementToDrag = null;
		this.$elementToChange = null;
		this.$offset = null;
		this.$documentBodySize = null;
		this.$addDraggingCSSToElementToChange = false;
		this.$1$MoveActionField = null;
		this.$1$EndActionField = null;
		this.$elementToDrag = elementToDrag;
		this.$elementToChange = elementToChange;
		this.$documentBodySize = 'useScrollSize';
		this.$addDraggingCSSToElementToChange = addDraggingCSSToElementToChange;
		EventUtils.DragDropManager.attachDragSource(this.$elementToDrag, this);
	};
	$spiff_MoveDragSource.__typeName = 'spiff.MoveDragSource';
	global.spiff.MoveDragSource = $spiff_MoveDragSource;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MultiSelectGroupSelection
	var $spiff_MultiSelectGroupSelection = function(groupSize) {
		$spiff_GroupSelection.call(this, groupSize);
	};
	$spiff_MultiSelectGroupSelection.__typeName = 'spiff.MultiSelectGroupSelection';
	$spiff_MultiSelectGroupSelection.buildMultiSelectGroupSelection$1 = function(T) {
		return function MultiSelectGroupSelection$BuildMultiSelectGroupSelection(group, isSelected) {
			ss.Debug.assert(ss.isValue(group));
			ss.Debug.assert(!ss.staticEquals(isSelected, null));
			var groupSelection = new $spiff_MultiSelectGroupSelection(group.length);
			var groupLength = group.length;
			for (var i = 0; i < groupLength; ++i) {
				if (isSelected(group[i])) {
					groupSelection.get_selectedIndexes()[i] = true;
				}
			}
			groupSelection.validateAllSelectedState();
			return groupSelection;
		};
	};
	$spiff_MultiSelectGroupSelection.buildMultiSelectGroupSelection = function(T) {
		return function MultiSelectGroupSelection$BuildMultiSelectGroupSelection(group, allSelected) {
			ss.Debug.assert(ss.isValue(group));
			var groupSelection = new $spiff_MultiSelectGroupSelection(group.length);
			if (allSelected) {
				groupSelection.handleTapAll();
			}
			return groupSelection;
		};
	};
	global.spiff.MultiSelectGroupSelection = $spiff_MultiSelectGroupSelection;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.DragDrop.NoopDropTarget
	var $spiff_NoopDropTarget = function() {
		EventUtils.DelegateDropTarget.call(this);
		this.onFeedbackType = function() {
			return 'dropfeedbackuponentry';
		};
		this.onDragOver = function(dragInstance, self) {
			return self;
		};
		this.onAcceptDrop = function(dragInstance1) {
			return $.Deferred().resolve(false);
		};
		this.onGetDropCursor = function(dragInstance2) {
			return $spiff_CustomCursor.noOp;
		};
	};
	$spiff_NoopDropTarget.__typeName = 'spiff.NoopDropTarget';
	global.spiff.NoopDropTarget = $spiff_NoopDropTarget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.OnBlurBehavior
	var $spiff_OnBlurBehavior = function() {
	};
	$spiff_OnBlurBehavior.__typeName = 'spiff.OnBlurBehavior';
	global.spiff.OnBlurBehavior = $spiff_OnBlurBehavior;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.OrientationHandler
	var $spiff_OrientationHandler = function() {
	};
	$spiff_OrientationHandler.__typeName = 'spiff.OrientationHandler';
	$spiff_OrientationHandler.add_orientationChanged = function OrientationHandler$add_OrientationChanged(value) {
		$spiff_OrientationHandler.$1$OrientationChangedField = ss.delegateCombine($spiff_OrientationHandler.$1$OrientationChangedField, value);
	};
	$spiff_OrientationHandler.remove_orientationChanged = function OrientationHandler$remove_OrientationChanged(value) {
		$spiff_OrientationHandler.$1$OrientationChangedField = ss.delegateRemove($spiff_OrientationHandler.$1$OrientationChangedField, value);
	};
	$spiff_OrientationHandler.get_isLandscape = function OrientationHandler$get_IsLandscape() {
		return $spiff_OrientationHandler.$currentOrientation === 90 || $spiff_OrientationHandler.$currentOrientation === -90;
	};
	$spiff_OrientationHandler.get_isPortrait = function OrientationHandler$get_IsPortrait() {
		return $spiff_OrientationHandler.$currentOrientation === 0 || $spiff_OrientationHandler.$currentOrientation === 180;
	};
	$spiff_OrientationHandler.get_windowInstHelper = function OrientationHandler$get_WindowInstHelper() {
		return $spiff_OrientationHandler.$windowInstHelper;
	};
	$spiff_OrientationHandler.init = function OrientationHandler$Init() {
		if (!tsConfig.is_mobile_device) {
			$spiff_OrientationHandler.$currentOrientation = 0;
			return;
		}
		$spiff_OrientationHandler.$windowInst = $spiff_OrientationHandler.$findWindow();
		$spiff_OrientationHandler.$windowInstHelper = new tab.WindowHelper($spiff_OrientationHandler.$windowInst);
		$spiff_OrientationHandler.$currentOrientation = $spiff_OrientationHandler.$getOrientation();
		$spiff_OrientationHandler.$currentWidth = $spiff_OrientationHandler.$windowInstHelper.get_innerWidth();
		if (BrowserSupport.BrowserSupport.OrientationChange()) {
			$($spiff_OrientationHandler.$windowInst).on('orientationchange'.toString(), $spiff_OrientationHandler.$handleOrientationChange);
		}
		$($spiff_OrientationHandler.$windowInst).on('resize'.toString(), $spiff_OrientationHandler.$handleResize);
		if ('addEventListener' in window.self) {
			window.addEventListener('unload', $spiff_OrientationHandler.$onUnload, true);
		}
	};
	$spiff_OrientationHandler.$onUnload = function OrientationHandler$OnUnload(e) {
		$spiff_OrientationHandler.unbindEvents();
	};
	$spiff_OrientationHandler.unbindEvents = function OrientationHandler$UnbindEvents() {
		if (ss.isNullOrUndefined($spiff_OrientationHandler.$windowInst)) {
			return;
		}
		$($spiff_OrientationHandler.$windowInst).off('orientationchange'.toString(), $spiff_OrientationHandler.$handleOrientationChange);
		$($spiff_OrientationHandler.$windowInst).off('resize'.toString(), $spiff_OrientationHandler.$handleResize);
	};
	$spiff_OrientationHandler.$findWindow = function OrientationHandler$FindWindow() {
		var win = tab.WindowHelper.get_windowSelf();
		if (tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
			try {
				while (ss.isValue(win.parent) && !ss.referenceEquals(win.parent, win)) {
					var parentWindow = win.parent;
					var parentHelper = new tab.WindowHelper(parentWindow);
					if (ss.isNullOrUndefined(parentHelper.get_outerWidth())) {
						break;
					}
					win = parentWindow;
				}
			}
			catch ($t1) {
			}
		}
		return win;
	};
	$spiff_OrientationHandler.$handleOrientationChange = function OrientationHandler$HandleOrientationChange(e) {
		$spiff_OrientationHandler.$startTime = new Date();
		$spiff_OrientationHandler.$handleDelayedOrientationChange();
	};
	$spiff_OrientationHandler.$handleDelayedOrientationChange = function OrientationHandler$HandleDelayedOrientationChange() {
		var now = new Date();
		if (now - $spiff_OrientationHandler.$startTime >= $spiff_OrientationHandler.$waitTimeMax || $spiff_OrientationHandler.$newWidthIsSet || $spiff_OrientationHandler.$isWidthChanged() || $spiff_OrientationHandler.$isOrientationChanged()) {
			$spiff_OrientationHandler.$updateWidth();
			$spiff_OrientationHandler.$finishOrientationChange();
		}
		else {
			$spiff_OrientationHandler.$clearTimeout();
			$spiff_OrientationHandler.$timerId = window.setTimeout($spiff_OrientationHandler.$handleDelayedOrientationChange, $spiff_OrientationHandler.$waitTimePartition);
		}
	};
	$spiff_OrientationHandler.$handleResize = function OrientationHandler$HandleResize(e) {
		if ($spiff_OrientationHandler.$newWidthIsSet || $spiff_OrientationHandler.$isWidthChanged()) {
			$spiff_OrientationHandler.$updateWidth();
			$spiff_OrientationHandler.$finishOrientationChange();
		}
	};
	$spiff_OrientationHandler.$finishOrientationChange = function OrientationHandler$FinishOrientationChange() {
		$spiff_OrientationHandler.$clearTimeout();
		if ($spiff_OrientationHandler.$isOrientationChanged()) {
			$spiff_OrientationHandler.$currentOrientation = $spiff_OrientationHandler.$getOrientation();
			$spiff_OrientationHandler.$newWidthIsSet = false;
			if (ss.isValue($spiff_OrientationHandler.$1$OrientationChangedField)) {
				$spiff_OrientationHandler.$1$OrientationChangedField();
			}
		}
	};
	$spiff_OrientationHandler.$isWidthChanged = function OrientationHandler$IsWidthChanged() {
		var newWidth = $spiff_OrientationHandler.$windowInstHelper.get_innerWidth();
		if ($spiff_OrientationHandler.$currentWidth !== newWidth) {
			return true;
		}
		return false;
	};
	$spiff_OrientationHandler.$isOrientationChanged = function OrientationHandler$IsOrientationChanged() {
		var newOrientation = $spiff_OrientationHandler.$getOrientation();
		if ($spiff_OrientationHandler.$currentOrientation !== newOrientation) {
			return true;
		}
		return false;
	};
	$spiff_OrientationHandler.$updateWidth = function OrientationHandler$UpdateWidth() {
		$spiff_OrientationHandler.$currentWidth = $spiff_OrientationHandler.$windowInstHelper.get_innerWidth();
		$spiff_OrientationHandler.$newWidthIsSet = true;
	};
	$spiff_OrientationHandler.$getOrientation = function OrientationHandler$GetOrientation() {
		var orientation;
		if (!BrowserSupport.BrowserSupport.IsAndroid()) {
			orientation = $spiff_OrientationHandler.$getWindowOrientation();
			if (ss.isValue(orientation)) {
				return ss.unbox(orientation);
			}
		}
		orientation = (($spiff_OrientationHandler.$windowInstHelper.get_innerWidth() < $spiff_OrientationHandler.$windowInstHelper.get_innerHeight()) ? 0 : 90);
		return ss.unbox(orientation);
	};
	$spiff_OrientationHandler.$getWindowOrientation = function OrientationHandler$GetWindowOrientation() {
		try {
			return $spiff_OrientationHandler.$windowInst.orientation;
		}
		catch ($t1) {
		}
		return null;
	};
	$spiff_OrientationHandler.$clearTimeout = function OrientationHandler$ClearTimeout() {
		$spiff_OrientationHandler.$timerId = tab.MiscUtil.clearTimeout($spiff_OrientationHandler.$timerId);
	};
	global.spiff.OrientationHandler = $spiff_OrientationHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.PagableListComponent
	var $spiff_PagableListComponent$2 = function(TPagableListProps, TListItemData) {
		var $type = function(props) {
			React.Component.call(this, props);
		};
		ss.registerGenericClassInstance($type, $spiff_PagableListComponent$2, [TPagableListProps, TListItemData], {
			render: function PagableListComponent$Render() {
				var items = _.map(this.props.items, ss.mkdel(this, function(item, index) {
					var spec = this.getEventHandleSpecForItem(item);
					var classes = ['tabListItem'];
					if (index % 2 === 1) {
						classes.push('tabListItemAlternate');
					}
					var htmlProps = { className: classes.join(' '), key: this.getUniqueKey(item.data) };
					if (ss.isNullOrUndefined(spec)) {
						return $spiff_DOMElements.div(htmlProps, this.buildItem(item.data));
					}
					else {
						return EventUtils.EventForwarder.div(spec, htmlProps, this.buildItem(item.data));
					}
				}));
				var $t1 = new $spiff_ScrollingProps();
				$t1.scrollY = true;
				$t1.scrollbars = true;
				$t1.onScrollStop = ss.mkdel(this, this.onScrollStop);
				$t1.alwaysShowScrollbarsIfScrollable = this.shouldScrollbarAlwaysBeShown();
				$t1.startingY = this.props.startingY;
				var scrollingProps = $t1;
				var pagableList = $spiff_ScrollingComponent.createScroller(scrollingProps, items);
				return $spiff_DOMElements.div({ className: 'tabPagableList' }, pagableList);
			},
			buildItem: null,
			getUniqueKey: null,
			onScrollStop: null,
			getEventHandleSpecForItem: function PagableListComponent$GetEventHandleSpecForItem(itemProps) {
				return null;
			},
			shouldScrollbarAlwaysBeShown: function PagableListComponent$ShouldScrollbarAlwaysBeShown() {
				return false;
			}
		}, function() {
			return React.Component;
		}, function() {
			return [];
		});
		return $type;
	};
	$spiff_PagableListComponent$2.__typeName = 'spiff.PagableListComponent$2';
	ss.initGenericClass($spiff_PagableListComponent$2, $asm, 2);
	global.spiff.PagableListComponent$2 = $spiff_PagableListComponent$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.PopupListView
	var $spiff_PopupListView = function(viewModel) {
		$spiff_ListView.call(this, viewModel, viewModel.get_listItemCreator());
	};
	$spiff_PopupListView.__typeName = 'spiff.PopupListView';
	global.spiff.PopupListView = $spiff_PopupListView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.PopupListViewModel
	var $spiff_PopupListViewModel = function(collection, listItemCreator, selectionType) {
		this.$listItemCreator = null;
		$spiff_ListViewModel.call(this, collection, selectionType);
		this.$listItemCreator = listItemCreator;
	};
	$spiff_PopupListViewModel.__typeName = 'spiff.PopupListViewModel';
	global.spiff.PopupListViewModel = $spiff_PopupListViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Components.PureRender
	var $spiff_PureRender = function() {
	};
	$spiff_PureRender.__typeName = 'spiff.PureRender';
	$spiff_PureRender.mixIn = function PureRender$MixIn(c) {
		var shouldUpdate = function(props, state) {
			return $spiff_PureRender.$shouldUpdate(c, props, state);
		};
		c['shouldComponentUpdate'] = shouldUpdate;
	};
	$spiff_PureRender.$shouldUpdate = function PureRender$ShouldUpdate(c, newProps, newState) {
		var notEqual = !tab.MiscUtil.shallowEquals(c.props, newProps) || !tab.MiscUtil.shallowEquals(c.state, newState);
		if (!notEqual) {
			tab.Log.get(c).debug('Skipping render, shallow equals', []);
		}
		return notEqual;
	};
	global.spiff.PureRender = $spiff_PureRender;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Components.PureRenderComponent
	var $spiff_PureRenderComponent = function(props) {
		React.Component.call(this, props);
	};
	$spiff_PureRenderComponent.__typeName = 'spiff.PureRenderComponent';
	$spiff_PureRenderComponent.$ctor1 = function(props, context) {
		React.Component.call(this, props, context);
	};
	global.spiff.PureRenderComponent = $spiff_PureRenderComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ReactExtensions.ReactComponentExtensions
	var $spiff_ReactComponentExtensions = function() {
	};
	$spiff_ReactComponentExtensions.__typeName = 'spiff.ReactComponentExtensions';
	$spiff_ReactComponentExtensions.generateUniqueKeys = function(T) {
		return function ReactComponentExtensions$GenerateUniqueKeys(items, reservedKeys) {
			var keyLookup = {};
			for (var i = 0; i < items.length; ++i) {
				keyLookup[items[i].toString()] = 0;
			}
			for (var i1 = 0; i1 < reservedKeys.length; ++i1) {
				keyLookup[reservedKeys[i1]] = 1;
			}
			return _.map(items, function(item) {
				var label = item.toString();
				var count = ss.unbox(ss.cast(keyLookup[label], ss.Int32));
				if (count === 0) {
					keyLookup[label] = 1;
					return label;
				}
				var key = null;
				do {
					key = [label, '_', ++count].join('');
				} while (ss.isValue(keyLookup[key]));
				keyLookup[label] = count;
				keyLookup[key] = 1;
				return key;
			});
		};
	};
	global.spiff.ReactComponentExtensions = $spiff_ReactComponentExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ReactElement
	var $spiff_ReactElement = function() {
	};
	$spiff_ReactElement.__typeName = 'spiff.ReactElement';
	$spiff_ReactElement.div$1 = function ReactElement$Div(className, children) {
		return $spiff_DOMElements.div.apply(null, [{ className: className }].concat(children));
	};
	$spiff_ReactElement.div = function ReactElement$Div(classNames, children) {
		var className = (ss.isValue(classNames) ? classNames.join(' ') : null);
		return $spiff_DOMElements.div.apply(null, [{ className: className }].concat(children));
	};
	$spiff_ReactElement.span$1 = function ReactElement$Span(className, children) {
		return $spiff_DOMElements.span.apply(null, [{ className: className }].concat(children));
	};
	$spiff_ReactElement.span = function ReactElement$Span(classNames, children) {
		var className = (ss.isValue(classNames) ? classNames.join(' ') : null);
		return $spiff_DOMElements.span.apply(null, [{ className: className }].concat(children));
	};
	$spiff_ReactElement.br = function ReactElement$Br(className) {
		return $spiff_DOMElements.br({ className: className });
	};
	global.spiff.ReactElement = $spiff_ReactElement;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ReactHostView
	var $spiff_ReactHostView$3 = function(TViewModel, TComponent, TProps) {
		var $type = function(viewModel) {
			this.$viewModel = ss.getDefaultValue(TViewModel);
			this.$1$RootElementField = null;
			this.$1$ElementField = null;
			this.set_rootElement($($type.$htmlTemplate));
			this.set_$element(this.get_rootElement().get(0));
			this.$viewModel = viewModel;
			this.$viewModel.add_disposed(ss.mkdel(this, this.$onViewModelDispose));
			this.$viewModel.add_propsUpdated(ss.mkdel(this, this.$onPropsUpdated));
		};
		ss.registerGenericClassInstance($type, $spiff_ReactHostView$3, [TViewModel, TComponent, TProps], {
			get_viewModel: function ReactHostView$get_ViewModel() {
				return this.$viewModel;
			},
			get_rootElement: function ReactHostView$get_RootElement() {
				return this.$1$RootElementField;
			},
			set_rootElement: function ReactHostView$set_RootElement(value) {
				this.$1$RootElementField = value;
			},
			get_$element: function ReactHostView$get_Element() {
				return this.$1$ElementField;
			},
			set_$element: function ReactHostView$set_Element(value) {
				this.$1$ElementField = value;
			},
			addToDom: function ReactHostView$AddToDom(parent) {
				parent.append(this.get_$element());
				this.$render(this.$viewModel.get_props());
			},
			onAddedToDom: function ReactHostView$OnAddedToDom() {
			},
			$onPropsUpdated: function ReactHostView$OnPropsUpdated() {
				this.$render(this.$viewModel.get_props());
			},
			$render: function ReactHostView$Render(props) {
				ReactDOM.render(React.createElement(TComponent, props), this.get_$element());
			},
			dispose: function ReactHostView$Dispose() {
				tab.Log.get(this).debug('Dispose', []);
				ReactDOM.unmountComponentAtNode(this.get_$element());
				this.get_rootElement().remove();
				this.$viewModel.remove_propsUpdated(ss.mkdel(this, this.$onPropsUpdated));
				this.$viewModel.remove_disposed(ss.mkdel(this, this.$onViewModelDispose));
			},
			$onViewModelDispose: function ReactHostView$OnViewModelDispose(vm) {
				this.dispose();
			},
			addClass: function ReactHostView$AddClass(className) {
				this.get_rootElement().addClass(className);
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IDisposable, tab.IAppendableView, ss.makeGenericType(tab.IView$1, [TViewModel])];
		});
		$type.$htmlTemplate = "<div class='tab-ReactView' />";
		tab.ObjectRegistry.registerType($type, $type).call(null);
		return $type;
	};
	$spiff_ReactHostView$3.__typeName = 'spiff.ReactHostView$3';
	ss.initGenericClass($spiff_ReactHostView$3, $asm, 3);
	global.spiff.ReactHostView$3 = $spiff_ReactHostView$3;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ReactRefs
	var $spiff_ReactRefs = function() {
	};
	$spiff_ReactRefs.__typeName = 'spiff.ReactRefs';
	$spiff_ReactRefs.attachDragSource = function ReactRefs$AttachDragSource(sourceFactory) {
		var mountedElement = null;
		return function(e) {
			if (ss.isValue(e)) {
				mountedElement = ReactDOM.findDOMNode(e);
				EventUtils.DragDropManager.attachDragSource($(mountedElement), sourceFactory());
			}
			else {
				EventUtils.DragDropManager.removeDragSource($(mountedElement));
			}
		};
	};
	$spiff_ReactRefs.attachDropTarget = function ReactRefs$AttachDropTarget(targetFactory) {
		var mountedElement = null;
		return function(e) {
			if (ss.isValue(e)) {
				mountedElement = ReactDOM.findDOMNode(e);
				EventUtils.DragDropManager.attachDropTarget($(mountedElement), targetFactory());
			}
			else {
				EventUtils.DragDropManager.detachDropTarget($(mountedElement));
			}
		};
	};
	global.spiff.ReactRefs = $spiff_ReactRefs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ReactSpiffAdapter
	var $spiff_ReactSpiffAdapter$3 = function(TW, TP, TS) {
		var $type = function(widget, props, context) {
			this.$3$WidgetField = null;
			React.Component.call(this, props, context);
			this.set_widget(widget);
			this.get_widget().add_propertyChanged(ss.mkdel(this, this.handleWidgetPropertyChanged));
		};
		ss.registerGenericClassInstance($type, $spiff_ReactSpiffAdapter$3, [TW, TP, TS], {
			get_widget: function ReactSpiffAdapter$get_Widget() {
				return this.$3$WidgetField;
			},
			set_widget: function ReactSpiffAdapter$set_Widget(value) {
				this.$3$WidgetField = value;
			},
			render: function ReactSpiffAdapter$Render() {
				return $spiff_DOMElements.div(null, '');
			},
			componentDidMount: function ReactSpiffAdapter$ComponentDidMount() {
				var domNode = $(ReactDOM.findDOMNode(this));
				this.get_widget().addToDom(domNode);
			},
			componentWillUnmount: function ReactSpiffAdapter$ComponentWillUnmount() {
				this.get_widget().remove_propertyChanged(ss.mkdel(this, this.handleWidgetPropertyChanged));
				this.get_widget().dispose();
			},
			componentWillReceiveProps: function ReactSpiffAdapter$ComponentWillReceiveProps(nextProps) {
				this.updateWidgetState(nextProps);
			},
			handleWidgetPropertyChanged: null,
			updateWidgetState: null
		}, function() {
			return React.Component;
		}, function() {
			return [];
		});
		return $type;
	};
	$spiff_ReactSpiffAdapter$3.__typeName = 'spiff.ReactSpiffAdapter$3';
	ss.initGenericClass($spiff_ReactSpiffAdapter$3, $asm, 3);
	global.spiff.ReactSpiffAdapter$3 = $spiff_ReactSpiffAdapter$3;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ResizeDragSource
	var $spiff_ResizeDragSource = function(elementToDrag, elementToChange, location) {
		this.$location = 'bottomRight';
		$spiff_MoveDragSource.call(this, elementToDrag, elementToChange, false);
		this.$location = location;
	};
	$spiff_ResizeDragSource.__typeName = 'spiff.ResizeDragSource';
	global.spiff.ResizeDragSource = $spiff_ResizeDragSource;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ScrollableView
	var $spiff_ScrollableView = function(viewModel, scrollableTemplate) {
		ss.makeGenericType($spiff_BaseView$1, [$spiff_ScrollableViewModel]).call(this, viewModel, scrollableTemplate);
	};
	$spiff_ScrollableView.__typeName = 'spiff.ScrollableView';
	$spiff_ScrollableView.createScrollableView = function ScrollableView$CreateScrollableView(viewModel) {
		if (viewModel.get_hasCustomIndicator()) {
			return new $spiff_CustomIScrollView(viewModel);
		}
		else {
			return new $spiff_DefaultIScrollView(viewModel);
		}
	};
	global.spiff.ScrollableView = $spiff_ScrollableView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ScrollableViewModel
	var $spiff_ScrollableViewModel = function() {
		this.$content = null;
		this.$options = null;
		this.$2$ContentChangedField = null;
		this.$2$RefreshField = null;
		this.isCenteredVertically = false;
		$spiff_BaseViewModel.call(this);
		this.$createOptions(true);
	};
	$spiff_ScrollableViewModel.__typeName = 'spiff.ScrollableViewModel';
	$spiff_ScrollableViewModel.$ctor1 = function(useCustomScrollbars) {
		this.$content = null;
		this.$options = null;
		this.$2$ContentChangedField = null;
		this.$2$RefreshField = null;
		this.isCenteredVertically = false;
		$spiff_BaseViewModel.call(this);
		this.$createOptions(useCustomScrollbars);
	};
	global.spiff.ScrollableViewModel = $spiff_ScrollableViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Components.ScrollEdgeAreaComponent
	var $spiff_ScrollEdgeAreaComponent$1 = function(T) {
		var $type = function(props) {
			this.$delegateDropTarget = null;
			this.$timerHandle = 0;
			$spiff_PureRenderComponent.call(this, props);
			var $t1 = new EventUtils.DelegateDropTarget();
			$t1.canAccept = function(dragInstance) {
				return ss.isInstanceOfType(dragInstance.get_payload(), T);
			};
			$t1.onAcceptDrop = ss.mkdel(this, function(dragInstance1) {
				window.clearInterval(this.$timerHandle);
				return $.Deferred().resolve(true);
			});
			$t1.onDragOver = ss.mkdel(this, function(dragInstance2, self) {
				this.props.scrollCallback();
				window.clearInterval(this.$timerHandle);
				this.$timerHandle = window.setInterval(this.props.scrollCallback, $type.$scrollCallbackIntervalMilliseconds);
				return self;
			});
			$t1.onDragExit = ss.mkdel(this, function(dragInstance3) {
				window.clearInterval(this.$timerHandle);
			});
			this.$delegateDropTarget = $t1;
		};
		ss.registerGenericClassInstance($type, $spiff_ScrollEdgeAreaComponent$1, [T], {
			render: function ScrollEdgeAreaComponent$Render() {
				return $spiff_DOMElements.div({ style: this.props.cssProps, ref: this.props.dropTargetRefConnectorCallback(this.$delegateDropTarget) });
			},
			componentWillUnmount: function ScrollEdgeAreaComponent$ComponentWillUnmount() {
				window.clearInterval(this.$timerHandle);
			}
		}, function() {
			return $spiff_PureRenderComponent;
		}, function() {
			return [];
		});
		$type.$scrollCallbackIntervalMilliseconds = 100;
		return $type;
	};
	$spiff_ScrollEdgeAreaComponent$1.__typeName = 'spiff.ScrollEdgeAreaComponent$1';
	ss.initGenericClass($spiff_ScrollEdgeAreaComponent$1, $asm, 1);
	global.spiff.ScrollEdgeAreaComponent$1 = $spiff_ScrollEdgeAreaComponent$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ScrollerType
	var $spiff_ScrollerType = function() {
	};
	$spiff_ScrollerType.__typeName = 'spiff.ScrollerType';
	global.spiff.ScrollerType = $spiff_ScrollerType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ScrollingComponent
	var $spiff_ScrollingComponent = function(props, context) {
		React.Component.call(this, props, context);
	};
	$spiff_ScrollingComponent.__typeName = 'spiff.ScrollingComponent';
	$spiff_ScrollingComponent.$chooseScrollerType = function ScrollingComponent$ChooseScrollerType(props) {
		var result = props.forceScrollerType;
		if (ss.isNullOrUndefined(result)) {
			result = 0;
		}
		return ss.unbox(result);
	};
	$spiff_ScrollingComponent.createScroller = function ScrollingComponent$CreateScroller(props, children) {
		var scrollerType = $spiff_ScrollingComponent.$chooseScrollerType(props);
		var scrollerComponentClass = $spiff_ScrollingComponent.$classesDictionary[scrollerType];
		if (children.length === 1) {
			return React.createElement(scrollerComponentClass, props, children[0]);
		}
		return React.createElement(scrollerComponentClass, props, children);
	};
	global.spiff.ScrollingComponent = $spiff_ScrollingComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ScrollingProps
	var $spiff_ScrollingProps = function() {
		this.extraCssClass = null;
		this.customStyle = null;
		this.forceScrollerType = null;
		this.scrollX = false;
		this.scrollY = false;
		this.scrollbars = true;
		this.mouseWheel = true;
		this.alwaysShowScrollbarsIfScrollable = false;
		this.onScrollStop = null;
		this.onScroll = null;
		this.startingY = null;
		this.augmentedScrollX = true;
		this.augmentedScrollY = true;
		this.onScrollingControlRefUpdated = null;
	};
	$spiff_ScrollingProps.__typeName = 'spiff.ScrollingProps';
	global.spiff.ScrollingProps = $spiff_ScrollingProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.SelectableButtonComponent
	var $spiff_SelectableButtonComponent = function(props) {
		ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]).call(this, props);
	};
	$spiff_SelectableButtonComponent.__typeName = 'spiff.SelectableButtonComponent';
	global.spiff.SelectableButtonComponent = $spiff_SelectableButtonComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.SelectableButtonGroupComponent
	var $spiff_SelectableButtonGroupComponent = function(props) {
		React.Component.call(this, props);
		ss.Debug.assert(ss.isValue(props.selection), 'Instantiator must provide a selection.');
		this.state = this.$buildState(this.props.selection);
	};
	$spiff_SelectableButtonGroupComponent.__typeName = 'spiff.SelectableButtonGroupComponent';
	$spiff_SelectableButtonGroupComponent.getDesiredHeight = function SelectableButtonGroupComponent$GetDesiredHeight(parentEl) {
		return $('.tab-vScrollable', parentEl).get(0).scrollHeight;
	};
	$spiff_SelectableButtonGroupComponent.getMinimumWidth = function SelectableButtonGroupComponent$GetMinimumWidth(parentEl) {
		return $('.tab-vScrollable', parentEl).get(0).scrollWidth;
	};
	global.spiff.SelectableButtonGroupComponent = $spiff_SelectableButtonGroupComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.SelectableButtonGroupItem
	var $spiff_SelectableButtonGroupItem = function() {
		this.disabled = false;
		this.isTabbable = false;
		this.label = null;
		this.tooltip = null;
		this.getCustomContentBefore = null;
		this.getCustomContentAfter = null;
		this.testId = null;
		this.onDoubleClick = null;
	};
	$spiff_SelectableButtonGroupItem.__typeName = 'spiff.SelectableButtonGroupItem';
	global.spiff.SelectableButtonGroupItem = $spiff_SelectableButtonGroupItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.SelectableGroup
	var $spiff_SelectableGroup = function() {
		this.$items = null;
		this.$selectedItems = null;
		this.$selectionType = 0;
		this.$selectedClass = 'tabSelected';
		this.$1$SelectionChangedField = null;
		this.$items = [];
		this.$selectedItems = {};
	};
	$spiff_SelectableGroup.__typeName = 'spiff.SelectableGroup';
	global.spiff.SelectableGroup = $spiff_SelectableGroup;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.SelectionEventArgs
	var $spiff_SelectionEventArgs = function(selecting, shiftKey, ctrlKey) {
		this.$selecting = false;
		this.$shiftKey = false;
		this.$ctrlKey = false;
		ss.CancelEventArgs.call(this);
		this.$selecting = selecting;
		this.$shiftKey = shiftKey;
		this.$ctrlKey = ctrlKey;
	};
	$spiff_SelectionEventArgs.__typeName = 'spiff.SelectionEventArgs';
	global.spiff.SelectionEventArgs = $spiff_SelectionEventArgs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.SelectionMethod
	var $spiff_SelectionMethod = function() {
	};
	$spiff_SelectionMethod.__typeName = 'spiff.SelectionMethod';
	global.spiff.SelectionMethod = $spiff_SelectionMethod;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Events.SharedWidgetsPointerEventAdapter
	var $spiff_SharedWidgetsPointerEventAdapter = function() {
		this.$eventHandler = null;
		this.$eventHandler = EventUtils.TableauEventHandlerForReact.CreateEmpty();
	};
	$spiff_SharedWidgetsPointerEventAdapter.__typeName = 'spiff.SharedWidgetsPointerEventAdapter';
	global.spiff.SharedWidgetsPointerEventAdapter = $spiff_SharedWidgetsPointerEventAdapter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ShowMenuOptions
	var $spiff_ShowMenuOptions = function(relativeDom, setMinWidth) {
		this.relativeDom = null;
		this.preferUp = false;
		this.preferLeft = false;
		this.expanded = false;
		this.additionalMenuClass = null;
		this.cursorPosition = null;
		this.activatedBy = null;
		this.openedFrom = null;
		this.$1$MinWidthField = 0;
		this.relativeDom = relativeDom;
		this.set_minWidth((setMinWidth ? tab.DoubleUtil.roundToInt(relativeDom.outerWidth()) : 0));
	};
	$spiff_ShowMenuOptions.__typeName = 'spiff.ShowMenuOptions';
	global.spiff.ShowMenuOptions = $spiff_ShowMenuOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.SingleSelectGroupSelection
	var $spiff_SingleSelectGroupSelection = function(groupSize) {
		$spiff_GroupSelection.call(this, groupSize);
	};
	$spiff_SingleSelectGroupSelection.__typeName = 'spiff.SingleSelectGroupSelection';
	$spiff_SingleSelectGroupSelection.buildSingleSelectGroupSelection$1 = function(T) {
		return function SingleSelectGroupSelection$BuildSingleSelectGroupSelection(group, isSelected) {
			ss.Debug.assert(ss.isValue(group));
			ss.Debug.assert(!ss.staticEquals(isSelected, null));
			var groupSelection = new $spiff_SingleSelectGroupSelection(group.length);
			var groupLength = group.length;
			if (groupLength === 0) {
				tab.Log.get(groupSelection).debug('Group Selection with group size = 0/. This should only happen in unit test.', []);
			}
			for (var i = 0; i < groupLength; ++i) {
				if (isSelected(group[i])) {
					groupSelection.get_selectedIndexes()[i] = true;
				}
			}
			groupSelection.validateAllSelectedState();
			ss.Debug.assert(groupSelection.get_selectedCount() === 1 || groupLength === 0 || groupSelection.get_theAllItemIsSelected() && groupSelection.get_selectedCount() === 0);
			return groupSelection;
		};
	};
	$spiff_SingleSelectGroupSelection.buildSingleSelectGroupSelection = function(T) {
		return function SingleSelectGroupSelection$BuildSingleSelectGroupSelection(group, allSelected) {
			ss.Debug.assert(ss.isValue(group));
			var groupSelection = new $spiff_SingleSelectGroupSelection(group.length);
			if (allSelected) {
				groupSelection.handleTapAll();
			}
			return groupSelection;
		};
	};
	global.spiff.SingleSelectGroupSelection = $spiff_SingleSelectGroupSelection;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.SpiffBrowserViewport
	var $spiff_SpiffBrowserViewport = function(dimensions, getVisibleRoomFunc) {
		this.$dimensions = null;
		this.$getVisibleRoomFunc = null;
		this.$dimensions = dimensions;
		this.$getVisibleRoomFunc = getVisibleRoomFunc;
	};
	$spiff_SpiffBrowserViewport.__typeName = 'spiff.SpiffBrowserViewport';
	$spiff_SpiffBrowserViewport.getViewport = function SpiffBrowserViewport$GetViewport(callback) {
		if (!ss.staticEquals($spiff_SpiffBrowserViewport.getSpiffBrowserViewportFunc, null)) {
			$spiff_SpiffBrowserViewport.getSpiffBrowserViewportFunc(callback);
		}
		else {
			callback(new $spiff_SpiffBrowserViewport(null, null));
		}
	};
	global.spiff.SpiffBrowserViewport = $spiff_SpiffBrowserViewport;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.StatelessDropdownComponent
	var $spiff_StatelessDropdownComponent = function(props, context) {
		this.$boundTrackDropdownFunc = null;
		this.$dropdownElement = null;
		React.Component.call(this, props, context);
		this.$boundTrackDropdownFunc = ss.mkdel(this, function(element) {
			this.$dropdownElement = element;
		});
	};
	$spiff_StatelessDropdownComponent.__typeName = 'spiff.StatelessDropdownComponent';
	global.spiff.StatelessDropdownComponent = $spiff_StatelessDropdownComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Components.StatelessHorizontalSliderComponent
	var $spiff_StatelessHorizontalSliderComponent = function(props) {
		this.$sliderInputElement = null;
		this.$sliderBoxElement = null;
		this.$dragStartedOnSlider = false;
		$spiff_PureRenderComponent.call(this, props);
	};
	$spiff_StatelessHorizontalSliderComponent.__typeName = 'spiff.StatelessHorizontalSliderComponent';
	$spiff_StatelessHorizontalSliderComponent.create = function StatelessHorizontalSliderComponent$Create(props) {
		return React.createElement($spiff_StatelessHorizontalSliderComponent, props);
	};
	global.spiff.StatelessHorizontalSliderComponent = $spiff_StatelessHorizontalSliderComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.StyledButton
	var $spiff_StyledButton = function(buttonClass) {
		$spiff_LabelButton.call(this, $spiff_StyledButton.$createDom(buttonClass), '.tab-styled-button-middle');
		this.set_focusClass('tab-focus');
		this.set_disabledClass('tab-disabled');
	};
	$spiff_StyledButton.__typeName = 'spiff.StyledButton';
	$spiff_StyledButton.createStyledButton = function StyledButton$CreateStyledButton(clickHandler, label, buttonClass, tabIndex) {
		var sb = new $spiff_StyledButton(buttonClass);
		sb.set_label(label);
		sb.add_click(clickHandler);
		sb.disposables.add$1(new tab.CallOnDispose(function() {
			sb.remove_click(clickHandler);
		}));
		if (ss.isValue(tabIndex)) {
			sb.tabIndex(ss.unbox(tabIndex));
		}
		return sb;
	};
	$spiff_StyledButton.$createDom = function StyledButton$CreateDom(buttonClass) {
		return $('<span>').addClass('tab-styled-button').addClass(buttonClass).append($('<span>').addClass('tab-styled-button-left')).append($('<span>').addClass('tab-styled-button-middle')).append($('<span>').addClass('tab-styled-button-right'));
	};
	global.spiff.StyledButton = $spiff_StyledButton;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.StyledTextButton
	var $spiff_StyledTextButton = function() {
	};
	$spiff_StyledTextButton.__typeName = 'spiff.StyledTextButton';
	$spiff_StyledTextButton.createUnificationLabelButton = function StyledTextButton$CreateUnificationLabelButton(clickHandler, label, buttonClass, style, tabIndex) {
		var button = $spiff_StyledTextButton.$createInternal(clickHandler, label, buttonClass, 1, tabIndex);
		var styleButtonClass;
		switch (style) {
			case 0: {
				styleButtonClass = 'tabStyledTextButtonFilledGreen';
				break;
			}
			case 1: {
				styleButtonClass = 'tabStyledTextButtonFilledRed';
				break;
			}
			case 2: {
				styleButtonClass = 'tabStyledTextButtonFilledGrey';
				break;
			}
			case 3: {
				styleButtonClass = 'tabStyledTextButtonOutline';
				break;
			}
			default: {
				ss.Debug.assert(false, 'Unknown button style: ' + style);
				styleButtonClass = '';
				break;
			}
		}
		button.addClass(styleButtonClass);
		return button;
	};
	$spiff_StyledTextButton.createUnificationIconTextButton = function StyledTextButton$CreateUnificationIconTextButton(clickHandler, label, buttonClass) {
		var button = new $spiff_LabelButton($($spiff_StyledTextButton.$textIconButtonHtml), '.label');
		if (!ss.staticEquals(clickHandler, null)) {
			button.onClick(function(b) {
				clickHandler();
			});
		}
		if (!ss.isNullOrEmptyString(label)) {
			button.set_label(label);
		}
		if (!ss.isNullOrEmptyString(buttonClass)) {
			button.addClass(buttonClass);
		}
		return button;
	};
	$spiff_StyledTextButton.createActionButton = function StyledTextButton$CreateActionButton(clickHandler, label, buttonClass, size, tabIndex) {
		var button = $spiff_StyledTextButton.$createInternal(clickHandler, label, buttonClass, size, tabIndex);
		button.addClass('tabStyledTextButtonAction');
		return button;
	};
	$spiff_StyledTextButton.$createInternal = function StyledTextButton$CreateInternal(clickHandler, label, buttonClass, size, tabIndex) {
		var button = $spiff_LabelButton.newTextButton(clickHandler, label);
		button.addClass('tabStyledTextButton');
		switch (size) {
			case 2: {
				button.addClass('tabLargeStyledTextButton');
				break;
			}
			case 1: {
				button.addClass('tabMediumStyledTextButton');
				break;
			}
		}
		button.addClass(buttonClass);
		if (ss.isValue(tabIndex)) {
			button.tabIndex(ss.unbox(tabIndex));
		}
		return button;
	};
	global.spiff.StyledTextButton = $spiff_StyledTextButton;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.TabControl
	var $spiff_TabControl = function(tabControlTemplate) {
		this.$buttonGroup = new $spiff_SelectableGroup();
		this.$template = null;
		this.$idButtonMap = {};
		this.$disposableHolder = new tab.DisposableHolder();
		this.$selectedTab = null;
		this.$1$TabChangedField = null;
		this.$template = tabControlTemplate || new $spiff_$TabControlTemplate();
	};
	$spiff_TabControl.__typeName = 'spiff.TabControl';
	global.spiff.TabControl = $spiff_TabControl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.TableauClickHandler
	var $spiff_TableauClickHandler = function(element, config) {
		this.$eventConfig = null;
		this.$handler = null;
		this.$disposables = new tab.DisposableHolder();
		this.$startX = 0;
		this.$startY = 0;
		this.$stopPropagationOnEvent = true;
		this.$1$PressField = null;
		this.$1$ClickField = null;
		this.$1$DoubleClickField = null;
		this.$1$RightClickField = null;
		this.$eventConfig = config || new EventUtils.EventHandleSpec();
		this.$eventConfig.SetHandler('firstTouch', ss.mkdel(this, this.$handlePressEvent));
		this.$eventConfig.SetHandler('tap', ss.mkdel(this, this.$handleClickEvent));
		this.$eventConfig.SetHandler('rightClick', ss.mkdel(this, this.$handleRightClickEvent));
		this.$handler = new EventUtils.TableauEventHandler(element, this.$eventConfig);
	};
	$spiff_TableauClickHandler.__typeName = 'spiff.TableauClickHandler';
	$spiff_TableauClickHandler.target = function TableauClickHandler$Target(element) {
		return new $spiff_TableauClickHandler(element, null);
	};
	$spiff_TableauClickHandler.targetAndConfig = function TableauClickHandler$TargetAndConfig(element, config) {
		return new $spiff_TableauClickHandler(element, config);
	};
	$spiff_TableauClickHandler.targetAndClick = function TableauClickHandler$TargetAndClick(element, action) {
		return (new $spiff_TableauClickHandler(element, null)).onClick(action);
	};
	$spiff_TableauClickHandler.targetAndRightClick = function TableauClickHandler$TargetAndRightClick(element, action) {
		return (new $spiff_TableauClickHandler(element, null)).onRightClick(action);
	};
	$spiff_TableauClickHandler.targetAndDoubleClick = function TableauClickHandler$TargetAndDoubleClick(element, action) {
		return (new $spiff_TableauClickHandler(element, null)).onDoubleClick(action);
	};
	global.spiff.TableauClickHandler = $spiff_TableauClickHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.TableauEventHandlerTracker
	var $spiff_TableauEventHandlerTracker = function() {
	};
	$spiff_TableauEventHandlerTracker.__typeName = 'spiff.TableauEventHandlerTracker';
	$spiff_TableauEventHandlerTracker.add_handlerAddedForKey = function TableauEventHandlerTracker$add_HandlerAddedForKey(value) {
		$spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField = ss.delegateCombine($spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField, value);
	};
	$spiff_TableauEventHandlerTracker.remove_handlerAddedForKey = function TableauEventHandlerTracker$remove_HandlerAddedForKey(value) {
		$spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField = ss.delegateRemove($spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField, value);
	};
	$spiff_TableauEventHandlerTracker.add_handlerRemovedForKey = function TableauEventHandlerTracker$add_HandlerRemovedForKey(value) {
		$spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField = ss.delegateCombine($spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField, value);
	};
	$spiff_TableauEventHandlerTracker.remove_handlerRemovedForKey = function TableauEventHandlerTracker$remove_HandlerRemovedForKey(value) {
		$spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField = ss.delegateRemove($spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField, value);
	};
	$spiff_TableauEventHandlerTracker.get_trackers = function TableauEventHandlerTracker$get_Trackers() {
		return $spiff_TableauEventHandlerTracker.$trackers;
	};
	$spiff_TableauEventHandlerTracker.getHandlersForTrackerId = function TableauEventHandlerTracker$GetHandlersForTrackerId(trackerId) {
		return (ss.keyExists($spiff_TableauEventHandlerTracker.$trackers, trackerId) ? $spiff_TableauEventHandlerTracker.$trackers[trackerId] : null);
	};
	$spiff_TableauEventHandlerTracker.dispose = function TableauEventHandlerTracker$Dispose() {
		EventUtils.TableauEventHandler.remove_TableauEventHandlerCreated($spiff_TableauEventHandlerTracker.$startTrackingHandler);
		EventUtils.TableauEventHandler.remove_TableauEventHandlerToBeDisposed($spiff_TableauEventHandlerTracker.$stopTrackingHandler);
		ss.clearKeys($spiff_TableauEventHandlerTracker.$trackers);
	};
	$spiff_TableauEventHandlerTracker.$startTrackingHandler = function TableauEventHandlerTracker$StartTrackingHandler(handler) {
		var domRefValue = $spiff_TableauEventHandlerTracker.$referenceAttributeName + $spiff_TableauEventHandlerTracker.$eventHandlerCount;
		if (handler.DomElement.hasAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName)) {
			domRefValue = handler.DomElement.getAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName);
		}
		else {
			handler.DomElement.setAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName, domRefValue);
			$spiff_TableauEventHandlerTracker.$eventHandlerCount++;
		}
		if (ss.keyExists($spiff_TableauEventHandlerTracker.$trackers, domRefValue)) {
			$spiff_TableauEventHandlerTracker.$trackers[domRefValue].push(handler);
		}
		else {
			$spiff_TableauEventHandlerTracker.$trackers[domRefValue] = [handler];
		}
		if (!ss.staticEquals($spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField, null)) {
			$spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField(domRefValue);
		}
	};
	$spiff_TableauEventHandlerTracker.$stopTrackingHandler = function TableauEventHandlerTracker$StopTrackingHandler(handler) {
		if (!handler.DomElement.hasAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName)) {
			return;
		}
		var domRefValue = handler.DomElement.getAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName);
		if (!ss.keyExists($spiff_TableauEventHandlerTracker.$trackers, domRefValue)) {
			return;
		}
		var handlers = $spiff_TableauEventHandlerTracker.$trackers[domRefValue];
		ss.remove(handlers, handler);
		if (handlers.length === 0) {
			handler.DomElement.removeAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName);
			delete $spiff_TableauEventHandlerTracker.$trackers[domRefValue];
		}
		if (!ss.staticEquals($spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField, null)) {
			$spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField(domRefValue);
		}
	};
	global.spiff.TableauEventHandlerTracker = $spiff_TableauEventHandlerTracker;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Template
	var $spiff_Template = function(root) {
		this.disposables = new tab.DisposableHolder();
		this.domRoot = null;
		this.domRoot = root;
	};
	$spiff_Template.__typeName = 'spiff.Template';
	$spiff_Template.fromHtml = function Template$FromHtml(html) {
		return new $spiff_Template($(html));
	};
	global.spiff.Template = $spiff_Template;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.TextDropdownButtonComponent
	var $spiff_TextDropdownButtonComponent = function(props, context) {
		$spiff_PureRenderComponent.$ctor1.call(this, props, context);
	};
	$spiff_TextDropdownButtonComponent.__typeName = 'spiff.TextDropdownButtonComponent';
	global.spiff.TextDropdownButtonComponent = $spiff_TextDropdownButtonComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.TextInputView
	var $spiff_TextInputView = function(template, initialText, placeHolderText, label, isReadOnly) {
		this.$template = null;
		this.$text = null;
		this.$isComposing = false;
		this.$2$EnterKeyPressedField = null;
		this.$2$EscapeKeyPressedField = null;
		$spiff_Widget.call(this, template.get_domRootElement());
		this.$template = template;
		this.$text = initialText;
		this.$template.get_inputElement().val(this.$text);
		this.$template.get_inputElement().attr('placeholder', placeHolderText);
		this.$template.get_inputElement().attr('title', placeHolderText);
		if (ss.isValue(label)) {
			var id = 'textinput-' + this.get_instanceId();
			template.get_inputElement().attr('id', id);
			template.get_inputElement().before($(ss.formatString("<label for='{0}'>{1}</label>", id, label)));
		}
		if (isReadOnly) {
			template.get_inputElement().attr('readonly', 'readonly');
		}
		this.$template.get_inputElement().on('compositionstart compositionupdate', ss.mkdel(this, function(e) {
			this.$isComposing = true;
		})).on('compositionend', ss.mkdel(this, function(e1) {
			this.$isComposing = false;
		})).on('keydown', ss.mkdel(this, this.$handleInputKeyDown)).on('input', ss.mkdel(this, this.$handleInputInput));
	};
	$spiff_TextInputView.__typeName = 'spiff.TextInputView';
	$spiff_TextInputView.newTextInputView = function TextInputView$NewTextInputView(initialContent, placeHolderText, label, isReadOnly) {
		var template = new $spiff_$TextInputViewTemplate();
		return new $spiff_TextInputView(template, initialContent, placeHolderText, label, isReadOnly);
	};
	global.spiff.TextInputView = $spiff_TextInputView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ToggleButton
	var $spiff_ToggleButton = function(element, selectedClass) {
		this.$selectedClass = null;
		this.$selectionId = null;
		this.$3$SelectableDisposedField = null;
		this.$3$SelectedChangingField = null;
		this.$3$SelectedChangedField = null;
		this.$3$PreventMouseDeselectField = false;
		$spiff_Button.call(this, element);
		this.$selectionId = $spiff_ToggleButton.$getUniqueSelectionId();
		var $t1 = selectedClass;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = $spiff_ToggleButton.defaultSelectedClassName;
		}
		this.$selectedClass = $t1;
	};
	$spiff_ToggleButton.__typeName = 'spiff.ToggleButton';
	$spiff_ToggleButton.createButton = function ToggleButton$CreateButton(element, selectedClass, viewModel) {
		var tb = new $spiff_ToggleButton(element, selectedClass);
		tb.set_selected(viewModel.get_toggleValue());
		var selectedHandler = function(button, eventArgs) {
			if (ss.referenceEquals(eventArgs.get_propertyName(), $spiff_ToggleButton.selectedProperty)) {
				viewModel.raiseToggled();
			}
		};
		tb.add_propertyChanged(selectedHandler);
		tb.disposables.add$1(new tab.CallOnDispose(function() {
			tb.remove_propertyChanged(selectedHandler);
		}));
		return tb;
	};
	$spiff_ToggleButton.$getUniqueSelectionId = function ToggleButton$GetUniqueSelectionId() {
		$spiff_ToggleButton.$uniqueSelectionIdCounter++;
		return 'toggleBtn-' + $spiff_ToggleButton.$uniqueSelectionIdCounter.toString();
	};
	global.spiff.ToggleButton = $spiff_ToggleButton;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.ToggleButtonViewModel
	var $spiff_ToggleButtonViewModel = function(onToggled, toggleValue) {
		this.$toggleValue = false;
		this.$2$ToggledField = null;
		this.$2$DataField = null;
		$spiff_BaseViewModel.call(this);
		this.$toggleValue = toggleValue;
		this.set_data({});
		this.add_toggled(onToggled);
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.remove_toggled(onToggled);
		})));
	};
	$spiff_ToggleButtonViewModel.__typeName = 'spiff.ToggleButtonViewModel';
	global.spiff.ToggleButtonViewModel = $spiff_ToggleButtonViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UberPopupHorizontalAlign
	var $spiff_UberPopupHorizontalAlign = function() {
	};
	$spiff_UberPopupHorizontalAlign.__typeName = 'spiff.UberPopupHorizontalAlign';
	global.spiff.UberPopupHorizontalAlign = $spiff_UberPopupHorizontalAlign;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UberPopupHorizontalAttach
	var $spiff_UberPopupHorizontalAttach = function() {
	};
	$spiff_UberPopupHorizontalAttach.__typeName = 'spiff.UberPopupHorizontalAttach';
	global.spiff.UberPopupHorizontalAttach = $spiff_UberPopupHorizontalAttach;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UberPopupMode
	var $spiff_UberPopupMode = function() {
	};
	$spiff_UberPopupMode.__typeName = 'spiff.UberPopupMode';
	global.spiff.UberPopupMode = $spiff_UberPopupMode;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UberPopupShowOptions
	var $spiff_UberPopupShowOptions = function() {
		this.horizontalAlign = 0;
		this.horizontalAttach = 0;
		this.theme = 0;
		this.preferUp = false;
		this.coverRelativeElement = false;
		this.limitPopupHeight = false;
		this.maxPopupHeight = null;
		this.additionalClassNames = null;
		this.isToolbarFlyout = false;
		this.isBeingPositionedRelativeToASharedDialogWidget = false;
		this.focusOnShown = true;
		this.popupMode = 0;
		this.globalTouchWhitelist = null;
		this.glassZIndex = $spiff_UberPopupShowOptions.startingGlassZIndex;
		this.useCaret = false;
	};
	$spiff_UberPopupShowOptions.__typeName = 'spiff.UberPopupShowOptions';
	$spiff_UberPopupShowOptions.$ctor1 = function(horizontalAlign, attach, theme, preferUp, coverRelativeElement, limitPopupHeight, maxPopupHeight, additionalClassNames, isToolbarFlyout, popupMode, globalTouchWhitelist, glassZIndex, focusOnShown) {
		this.horizontalAlign = 0;
		this.horizontalAttach = 0;
		this.theme = 0;
		this.preferUp = false;
		this.coverRelativeElement = false;
		this.limitPopupHeight = false;
		this.maxPopupHeight = null;
		this.additionalClassNames = null;
		this.isToolbarFlyout = false;
		this.isBeingPositionedRelativeToASharedDialogWidget = false;
		this.focusOnShown = true;
		this.popupMode = 0;
		this.globalTouchWhitelist = null;
		this.glassZIndex = $spiff_UberPopupShowOptions.startingGlassZIndex;
		this.useCaret = false;
		this.horizontalAlign = horizontalAlign;
		this.horizontalAttach = attach;
		this.theme = theme;
		this.preferUp = preferUp;
		this.coverRelativeElement = coverRelativeElement;
		this.limitPopupHeight = limitPopupHeight;
		this.maxPopupHeight = maxPopupHeight;
		this.additionalClassNames = additionalClassNames;
		this.isToolbarFlyout = isToolbarFlyout;
		this.popupMode = popupMode;
		this.globalTouchWhitelist = globalTouchWhitelist;
		this.glassZIndex = glassZIndex;
		this.focusOnShown = focusOnShown;
	};
	global.spiff.UberPopupShowOptions = $spiff_UberPopupShowOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UberPopupTemplate
	var $spiff_UberPopupTemplate = function() {
		this.content = null;
		this.caret = null;
		this.caretBorder = null;
		$spiff_Template.call(this, $($spiff_UberPopupTemplate.$htmlTemplate));
		this.content = this.getElementBySelector('.tabUberPopupContent');
		this.caret = this.getElementBySelector('.tabUberArrow');
		this.caretBorder = this.getElementBySelector('.tabUberArrow2');
		this.caret.hide();
		this.caretBorder.hide();
	};
	$spiff_UberPopupTemplate.__typeName = 'spiff.UberPopupTemplate';
	global.spiff.UberPopupTemplate = $spiff_UberPopupTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UberPopupTheme
	var $spiff_UberPopupTheme = function() {
	};
	$spiff_UberPopupTheme.__typeName = 'spiff.UberPopupTheme';
	global.spiff.UberPopupTheme = $spiff_UberPopupTheme;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UberPopupView
	var $spiff_UberPopupView = function(viewModel, t) {
		this.popupViewModel = null;
		this.glass = null;
		this.contentView = null;
		this.visible = false;
		ss.makeGenericType($spiff_BaseView$1, [$spiff_UberPopupViewModel]).call(this, viewModel, t);
		this.popupViewModel = viewModel;
		this.popupViewModel.add_shown(ss.mkdel(this, this.shown));
		this.popupViewModel.add_hidden(ss.mkdel(this, this.hidden));
		this.$addKeyboardAccessibility();
	};
	$spiff_UberPopupView.__typeName = 'spiff.UberPopupView';
	global.spiff.UberPopupView = $spiff_UberPopupView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UberPopupViewModel
	var $spiff_UberPopupViewModel = function(findRelativeElement) {
		this.$content = null;
		this.$relativeElementFunc = null;
		this.options = new $spiff_UberPopupShowOptions();
		this.$2$ShownField = null;
		this.$2$HiddenField = null;
		this.$2$CommitField = null;
		this.$2$ResizeContentField = null;
		$spiff_BaseViewModel.call(this);
		this.$relativeElementFunc = findRelativeElement;
		this.set_resizeContent(function() {
		});
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.remove_hidden(ss.mkdel(this, this.dispose));
		})));
	};
	$spiff_UberPopupViewModel.__typeName = 'spiff.UberPopupViewModel';
	$spiff_UberPopupViewModel.$ctor1 = function(relativeElement) {
		$spiff_UberPopupViewModel.call(this, function() {
			return relativeElement;
		});
	};
	$spiff_UberPopupViewModel.createForContent = function UberPopupViewModel$CreateForContent(content, findRelativeElement, onHidden, disposeContentWithPopup) {
		var popupVm = new $spiff_UberPopupViewModel(findRelativeElement);
		if (!ss.staticEquals(onHidden, null)) {
			popupVm.add_hidden(onHidden);
			popupVm.addDisposables(new tab.CallOnDispose(function() {
				popupVm.remove_hidden(onHidden);
			}));
		}
		popupVm.set_content(content);
		popupVm.set_disposeOnHide(true);
		tab.ObjectRegistry.newView($spiff_UberPopupView).call(null, [popupVm]);
		if (disposeContentWithPopup) {
			popupVm.disposables.add$1(new tab.CallOnDispose(function() {
				content.disposeViewModel();
			}));
		}
		return popupVm;
	};
	$spiff_UberPopupViewModel.createForContent$1 = function UberPopupViewModel$CreateForContent(content, relativeElement, onHidden, disposeContentWithPopup) {
		return $spiff_UberPopupViewModel.createForContent(content, function() {
			return relativeElement;
		}, onHidden, disposeContentWithPopup);
	};
	$spiff_UberPopupViewModel.createForContentUsingCaretStyle = function UberPopupViewModel$CreateForContentUsingCaretStyle(content, relativeElement, customClass, onHidden, disposeContentWithPopup) {
		var viewModel = $spiff_UberPopupViewModel.createForContent(content, function() {
			return relativeElement;
		}, onHidden, disposeContentWithPopup);
		viewModel.set_mode(2);
		var $t1 = new $spiff_UberPopupShowOptions();
		$t1.popupMode = 2;
		$t1.preferUp = true;
		$t1.additionalClassNames = ['tabUberCaretStyle', customClass];
		$t1.horizontalAttach = 0;
		$t1.horizontalAlign = 1;
		$t1.useCaret = true;
		viewModel.options = $t1;
		return viewModel;
	};
	global.spiff.UberPopupViewModel = $spiff_UberPopupViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UnificationClassNames
	var $spiff_UnificationClassNames = function() {
	};
	$spiff_UnificationClassNames.__typeName = 'spiff.UnificationClassNames';
	global.spiff.UnificationClassNames = $spiff_UnificationClassNames;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UnificationDarkMenuTheme
	var $spiff_UnificationDarkMenuTheme = function() {
		$spiff_MenuViewTheme.call(this);
		this.menuClass = 'tabMenuUnificationTheme dark';
		this.itemClass = 'tabMenuItemUnificationTheme';
		this.dividerClass = 'tabMenuItemDividerUnificationTheme';
	};
	$spiff_UnificationDarkMenuTheme.__typeName = 'spiff.UnificationDarkMenuTheme';
	global.spiff.UnificationDarkMenuTheme = $spiff_UnificationDarkMenuTheme;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.UnificationLightMenuTheme
	var $spiff_UnificationLightMenuTheme = function() {
		$spiff_MenuViewTheme.call(this);
		this.menuClass = 'tabMenuUnificationTheme light';
		this.itemClass = 'tabMenuItemUnificationTheme';
		this.dividerClass = 'tabMenuItemDividerUnificationTheme';
	};
	$spiff_UnificationLightMenuTheme.__typeName = 'spiff.UnificationLightMenuTheme';
	global.spiff.UnificationLightMenuTheme = $spiff_UnificationLightMenuTheme;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.VerticalSpinnerComponent
	var $spiff_VerticalSpinnerComponent = function(props, context) {
		this.$applyTimer = null;
		React.Component.call(this, props, context);
		this.state = $spiff_VerticalSpinnerComponent.$stateFromValue(this.props.initialValue);
	};
	$spiff_VerticalSpinnerComponent.__typeName = 'spiff.VerticalSpinnerComponent';
	$spiff_VerticalSpinnerComponent.$stateFromValue = function VerticalSpinnerComponent$StateFromValue(value) {
		return { value: value, pendingValue: value, displayValue: value.toString() };
	};
	global.spiff.VerticalSpinnerComponent = $spiff_VerticalSpinnerComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.VerticalSpinnerProps
	var $spiff_VerticalSpinnerProps = function() {
		this.styleClass = 'tab-outline-spinner';
		this.extraCssClass = null;
		this.label = null;
		this.initialValue = 0;
		this.maxValue = null;
		this.minValue = null;
		this.maxLength = 16;
		this.stepSize = 1;
		this.disabled = false;
		this.disabledText = null;
		this.onValueChanged = null;
		this.actionDelay = 0;
		this.updateWhenKeyDown = false;
	};
	$spiff_VerticalSpinnerProps.__typeName = 'spiff.VerticalSpinnerProps';
	global.spiff.VerticalSpinnerProps = $spiff_VerticalSpinnerProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.Widget
	var $spiff_Widget = function(element) {
		this.disposables = new tab.DisposableHolder();
		this.$instanceId = 0;
		this.$widgetId = null;
		this.$1$DisposedField = null;
		this.$1$PropertyChangedField = null;
		this.element = null;
		this.addedToDom = false;
		tab.Param.verifyValue(element, 'element');
		this.element = element;
		element.addClass($spiff_Widget.$widgetCssClass);
		element.data($spiff_Widget.$widgetInstanceDataKey, this);
		$spiff_Widget.$nextInstanceId++;
		this.$instanceId = $spiff_Widget.$nextInstanceId;
	};
	$spiff_Widget.__typeName = 'spiff.Widget';
	$spiff_Widget.enableTextSelectionOnElement = function Widget$EnableTextSelectionOnElement(element) {
		element.removeClass('tab-unselectable');
		element.addClass($spiff_Widget.selectableNodeClass);
		element.off($spiff_Widget.$selectionEventNamespace);
	};
	$spiff_Widget.disableTextSelectionOnElement = function Widget$DisableTextSelectionOnElement(element) {
		if (BrowserSupport.BrowserSupport.IsIE()) {
			return;
		}
		if (BrowserSupport.BrowserSupport.IsMobile()) {
			return;
		}
		element.removeClass($spiff_Widget.selectableNodeClass);
		element.addClass('tab-unselectable');
		if (BrowserSupport.BrowserSupport.SelectStart()) {
			var eventName = 'selectstart' + $spiff_Widget.$selectionEventNamespace;
			element.on(eventName, function(e) {
				if (tab.DomUtil.isFocusableTextElement(e.target)) {
					return;
				}
				e.preventDefault();
			});
		}
	};
	$spiff_Widget.findWidget = function Widget$FindWidget(element, widgetType) {
		tab.Param.verifyValue(element, 'element');
		var current = element;
		var widget;
		widgetType = widgetType || $spiff_Widget;
		do {
			widget = ss.cast(current.data($spiff_Widget.$widgetInstanceDataKey), $spiff_Widget);
			if (ss.isValue(widget) && !ss.isAssignableFrom(widgetType, ss.getInstanceType(widget))) {
				widget = null;
			}
			current = current.parent('.tab-widget');
		} while (ss.isNullOrUndefined(widget) && !current.is('body') && current.length > 0);
		return (ss.isNullOrUndefined(widget) ? null : widget);
	};
	$spiff_Widget.getWidgets = function Widget$GetWidgets(elements, widgetType) {
		var widgets = [];
		widgetType = widgetType || $spiff_Widget;
		var widget;
		elements.each(function(i, e) {
			widget = ss.cast($(e).data($spiff_Widget.$widgetInstanceDataKey), $spiff_Widget);
			if (ss.isValue(widget) && ss.isAssignableFrom(widgetType, ss.getInstanceType(widget))) {
				widgets.push(widget);
			}
		});
		return widgets;
	};
	global.spiff.Widget = $spiff_Widget;
	ss.initClass($spiff_$AugmentedIScroll, $asm, {
		refresh: function AugmentedIScroll$Refresh() {
			IScroll.prototype.refresh.call(this);
			if (this.$augmentedScrollX) {
				var horizontalScrollBar = $(this.$wrapper).find('.iScrollHorizontalScrollbar');
				horizontalScrollBar.toggleClass('noScroll', !this.hasHorizontalScroll);
			}
			if (this.$augmentedScrollY) {
				var verticalScrollBar = $(this.$wrapper).find('.iScrollVerticalScrollbar');
				verticalScrollBar.toggleClass('noScroll', !this.hasVerticalScroll);
			}
		}
	}, IScroll);
	ss.initInterface($spiff_IListViewScrollHandler, $asm, { get_scrollViewPagePosition: null, get_scrollViewSize: null, scrollToElement: null });
	ss.initClass($spiff_$DefaultListViewScrollHandler, $asm, {
		get_scrollViewPagePosition: function DefaultListViewScrollHandler$get_ScrollViewPagePosition() {
			return tab.DomUtil.getElementPosition(this.$listRoot);
		},
		get_scrollViewSize: function DefaultListViewScrollHandler$get_ScrollViewSize() {
			return { w: this.$listRoot[0].offsetWidth, h: this.$listRoot[0].offsetHeight };
		},
		scrollToElement: function DefaultListViewScrollHandler$ScrollToElement(item, listTopOffset) {
			var itemTop = item.offsetTop;
			var itemBottom = itemTop + item.offsetHeight;
			var scrollViewTop = tab.DoubleUtil.roundToInt(this.$listRoot.scrollTop());
			var scrollViewBottom = scrollViewTop + this.$listRoot[0].offsetHeight;
			if (itemTop < scrollViewTop) {
				var y = ((itemTop <= listTopOffset) ? 0 : itemTop);
				this.$listRoot.scrollTop(y);
			}
			else if (itemBottom > scrollViewBottom) {
				this.$listRoot.scrollTop(scrollViewTop + itemBottom - scrollViewBottom);
			}
		}
	}, null, [$spiff_IListViewScrollHandler]);
	ss.initClass($spiff_Template, $asm, {
		getElementsBySelector: function Template$GetElementsBySelector(selector) {
			return this.domRoot.find(selector);
		},
		getElementBySelector: function Template$GetElementBySelector(selector) {
			var ret = this.getElementsBySelector(selector);
			if (ret.length !== 1) {
				throw new ss.Exception('Bad attach-point class');
			}
			return ret;
		},
		dispose: function Template$Dispose() {
			this.disposables.dispose();
			this.domRoot.remove();
		},
		addDisposable: function Template$AddDisposable(disposable) {
			if (ss.isValue(disposable)) {
				this.disposables.add$1(disposable);
			}
		}
	}, null, [ss.IDisposable]);
	ss.initInterface($spiff_ITextInputViewTemplate, $asm, { get_domRootElement: null, get_inputElement: null });
	ss.initClass($spiff_$EditableTextViewTemplate, $asm, {
		get_domRootElement: function EditableTextViewTemplate$get_DomRootElement() {
			return this.domRoot;
		},
		get_$textElement: function EditableTextViewTemplate$get_TextElement() {
			return this.$textElement;
		},
		get_inputElement: function EditableTextViewTemplate$get_InputElement() {
			return this.$inputElement;
		},
		get_$textSpan: function EditableTextViewTemplate$get_TextSpan() {
			return this.$textSpan;
		}
	}, $spiff_Template, [ss.IDisposable, $spiff_ITextInputViewTemplate]);
	ss.initEnum($spiff_$FocusManager$InputType, $asm, { $click: 0, $keyboard: 1, $unknown: 2 });
	ss.initClass($spiff_$FocusManager$NavigationKeyState, $asm, {});
	ss.initClass($spiff_ScrollingComponent, $asm, { get_scrollingControl: null, componentDidMount: null, componentWillUnmount: null, render: null }, React.Component);
	ss.initClass($spiff_$IScrollScrollingComponent, $asm, {
		get_scrollingControl: function IScrollScrollingComponent$get_ScrollingControl() {
			var scrollComponent = this.refs['iscroll-component'];
			if (ss.isValue(scrollComponent) && ss.isValue(scrollComponent.iScroll)) {
				return new $spiff_$IScrollScrollingComponent$IScrollScrollingControl(scrollComponent.iScroll);
			}
			return null;
		},
		componentDidMount: function IScrollScrollingComponent$ComponentDidMount() {
			if (!ss.staticEquals(this.props.onScrollingControlRefUpdated, null)) {
				this.props.onScrollingControlRefUpdated(this.get_scrollingControl());
			}
		},
		componentWillUnmount: function IScrollScrollingComponent$ComponentWillUnmount() {
			if (!ss.staticEquals(this.props.onScrollingControlRefUpdated, null)) {
				this.props.onScrollingControlRefUpdated(null);
			}
		},
		render: function IScrollScrollingComponent$Render() {
			var iscrollProps = $spiff_$IScrollScrollingComponent.$convertProps(this.props);
			return React.createElement($spiff_IScrollComponent, iscrollProps, this.props.children);
		}
	}, $spiff_ScrollingComponent);
	ss.initInterface($spiff_IScrollingControl, $asm, { get_x: null, get_y: null, get_maxScrollX: null, get_maxScrollY: null, get_canScroll: null, scrollBy: null, scrollTo: null, scrollToElement: null, destroy: null, resetPosition: null, refresh: null, handleEvent: null });
	ss.initClass($spiff_$IScrollScrollingComponent$IScrollScrollingControl, $asm, {
		get_x: function IScrollScrollingControl$get_X() {
			return this.$control.x;
		},
		get_y: function IScrollScrollingControl$get_Y() {
			return -this.$control.y;
		},
		get_maxScrollX: function IScrollScrollingControl$get_MaxScrollX() {
			return this.$control.maxScrollX;
		},
		get_maxScrollY: function IScrollScrollingControl$get_MaxScrollY() {
			return -this.$control.maxScrollY;
		},
		get_canScroll: function IScrollScrollingControl$get_CanScroll() {
			return this.$control.hasHorizontalScroll || this.$control.hasVerticalScroll;
		},
		scrollBy: function IScrollScrollingControl$ScrollBy(deltaX, deltaY) {
			this.$doScroll(ss.mkdel(this, function() {
				this.$control.scrollBy(-deltaX, -deltaY, 0, null);
			}));
		},
		scrollTo: function IScrollScrollingControl$ScrollTo(x, y) {
			this.$doScroll(ss.mkdel(this, function() {
				this.$control.scrollTo(-x, -y, 0, null);
			}));
		},
		scrollToElement: function IScrollScrollingControl$ScrollToElement(element, offsetX, offsetY) {
			this.$doScroll(ss.mkdel(this, function() {
				this.$control.scrollToElement(element, 0, offsetX, offsetY);
			}));
		},
		destroy: function IScrollScrollingControl$Destroy() {
			this.$control.destroy();
		},
		resetPosition: function IScrollScrollingControl$ResetPosition() {
			this.$control.resetPosition();
		},
		refresh: function IScrollScrollingControl$Refresh() {
			this.$control.refresh();
		},
		handleEvent: function IScrollScrollingControl$HandleEvent(e) {
			this.$control.handleEvent(e);
		},
		$doScroll: function IScrollScrollingControl$DoScroll(scrollAction) {
			window.setTimeout(ss.mkdel(this, function() {
				this.$control.refresh();
				scrollAction();
			}), 0);
		}
	}, null, [$spiff_IScrollingControl]);
	ss.initClass($spiff_$MenuItemTemplate, $asm, {
		get_$nameArea: function MenuItemTemplate$get_NameArea() {
			return this.$nameArea || (this.$nameArea = this.getElementBySelector('.tabMenuItemNameArea'));
		}
	}, $spiff_Template, [ss.IDisposable]);
	ss.initClass($spiff_$MenuItemTemplate$MenuTemplateBuilder, $asm, {
		$icon: function MenuTemplateBuilder$Icon(state, iconClass) {
			switch (state) {
				case 1: {
					this.$templ.$icon = $("<div class='tabMenuItemIcon tabMenuItemCheckIcon'/>");
					this.$templ.domRoot.attr('role', 'menuitemcheckbox').attr('aria-checked', 'true').prepend(this.$templ.$icon);
					this.$templ.$hasIcon = true;
					break;
				}
				case 2: {
					this.$templ.$icon = $("<div class='tabMenuItemIcon tabMenuItemRadioIcon'/>");
					this.$templ.domRoot.attr('role', 'menuitemcheckbox').attr('aria-checked', 'true').prepend(this.$templ.$icon);
					this.$templ.$hasIcon = true;
					break;
				}
				default: {
					if (state === 0 && !ss.isNullOrEmptyString(iconClass)) {
						this.$templ.$icon = $(ss.formatString("<div class='tabMenuItemIcon {0}'/>", iconClass));
						this.$templ.domRoot.prepend(this.$templ.$icon);
						this.$templ.$hasIcon = true;
					}
					break;
				}
			}
			return this;
		},
		$iconTwo: function MenuTemplateBuilder$IconTwo(iconTwoClass) {
			if (ss.isNullOrEmptyString(iconTwoClass)) {
				return this;
			}
			this.$templ.$iconTwo = $(ss.formatString("<span class='tabMenuItemIconTwo {0}'/>", iconTwoClass));
			this.$templ.get_$nameArea().append(this.$templ.$iconTwo);
			this.$templ.$hasIconTwo = true;
			return this;
		},
		$description: function MenuTemplateBuilder$Description(desc) {
			if (ss.isNullOrEmptyString(desc)) {
				return this;
			}
			this.$templ.$description = $("<div class='tabMenuItemDesc'/>");
			this.$templ.$description.text(desc);
			this.$templ.get_$nameArea().append(this.$templ.$description);
			this.$templ.$hasDescription = true;
			return this;
		},
		$title: function MenuTemplateBuilder$Title(title) {
			if (ss.isNullOrEmptyString(title)) {
				return this;
			}
			this.$templ.domRoot.attr('title', title);
			return this;
		},
		$subMenu: function MenuTemplateBuilder$SubMenu(sub) {
			if (ss.isNullOrUndefined(sub)) {
				return this;
			}
			this.$templ.$subMenu = $("<div class='tabMenuItemSubMenuIcon'/>");
			this.$templ.domRoot.append(this.$templ.$subMenu);
			return this;
		},
		$theme: function MenuTemplateBuilder$Theme(itemClasses) {
			for (var $t1 = 0; $t1 < itemClasses.length; $t1++) {
				var itemClass = itemClasses[$t1];
				if (ss.isValue(itemClass)) {
					this.$templ.domRoot.addClass(itemClass);
				}
			}
			return this;
		},
		$build: function MenuTemplateBuilder$Build() {
			var ret = this.$templ;
			this.$templ = null;
			return ret;
		},
		dispose: function MenuTemplateBuilder$Dispose() {
			this.$templ.dispose();
		}
	}, null, [ss.IDisposable]);
	ss.initClass($spiff_$ScrollableViewListViewScrollHandler, $asm, {
		get_scrollViewPagePosition: function ScrollableViewListViewScrollHandler$get_ScrollViewPagePosition() {
			return tab.DomUtil.getElementPosition(this.$scrollableView.element);
		},
		get_scrollViewSize: function ScrollableViewListViewScrollHandler$get_ScrollViewSize() {
			return { w: tab.DoubleUtil.roundToInt(this.$scrollableView.element.outerWidth()), h: tab.DoubleUtil.roundToInt(this.$scrollableView.element.outerHeight()) };
		},
		scrollToElement: function ScrollableViewListViewScrollHandler$ScrollToElement(item, listTopOffset) {
			var itemTop = item.offsetTop;
			var itemBottom = itemTop + item.offsetHeight;
			var scrollViewTop = this.$scrollableView.get_scrollerY();
			var scrollViewBottom = scrollViewTop + tab.DoubleUtil.roundToInt(this.$scrollableView.element.height());
			if (itemTop < scrollViewTop) {
				var y = ((itemTop <= listTopOffset) ? 0 : itemTop);
				this.$scrollableView.scrollTo(this.$scrollableView.get_scrollerX(), y, 0, null);
			}
			else if (itemBottom > scrollViewBottom) {
				this.$scrollableView.scrollTo(this.$scrollableView.get_scrollerX(), scrollViewTop + itemBottom - scrollViewBottom, 0, null);
			}
		}
	}, null, [$spiff_IListViewScrollHandler]);
	ss.initClass($spiff_$TabControlLabelTemplate, $asm, {}, $spiff_Template, [ss.IDisposable]);
	ss.initInterface($spiff_ITabControlTemplate, $asm, { get_root: null, get_tabs: null, get_contentArea: null, createTabLabel: null });
	ss.initClass($spiff_$TabControlTemplate, $asm, {
		get_root: function TabControlTemplate$get_Root() {
			return this.domRoot;
		},
		get_tabs: function TabControlTemplate$get_Tabs() {
			return this.$tabs;
		},
		get_contentArea: function TabControlTemplate$get_ContentArea() {
			return this.$contentArea;
		},
		createTabLabel: function TabControlTemplate$CreateTabLabel(id, label) {
			return new $spiff_$TabControlLabelTemplate();
		}
	}, $spiff_Template, [ss.IDisposable, $spiff_ITabControlTemplate]);
	ss.initClass($spiff_$TextInputViewTemplate, $asm, {
		get_domRootElement: function TextInputViewTemplate$get_DomRootElement() {
			return this.domRoot;
		},
		get_inputElement: function TextInputViewTemplate$get_InputElement() {
			return this.$inputElement;
		}
	}, $spiff_Template, [ss.IDisposable, $spiff_ITextInputViewTemplate]);
	ss.initClass($spiff_AriaAttrName, $asm, {});
	ss.initClass($spiff_AriaRole, $asm, {});
	ss.initClass($spiff_PureRenderComponent, $asm, {
		render: null,
		shouldComponentUpdate: function PureRenderComponent$ShouldComponentUpdate(newProps, newState) {
			return $spiff_PureRender.$shouldUpdate(this, newProps, newState);
		}
	}, React.Component);
	$spiff_PureRenderComponent.$ctor1.prototype = $spiff_PureRenderComponent.prototype;
	ss.initClass($spiff_ArrowDropdownButtonComponent, $asm, {
		render: function ArrowDropdownButtonComponent$Render() {
			return $spiff_DOMElements.div({ className: 'tab-ArrowDropdownButton' }, $spiff_DOMElements.div({ className: 'arrow down' }));
		}
	}, $spiff_PureRenderComponent);
	ss.initClass($spiff_BaseViewModel, $asm, {
		add_disposed: function BaseViewModel$add_Disposed(value) {
			this.$1$DisposedField = ss.delegateCombine(this.$1$DisposedField, value);
		},
		remove_disposed: function BaseViewModel$remove_Disposed(value) {
			this.$1$DisposedField = ss.delegateRemove(this.$1$DisposedField, value);
		},
		add_propertyChanged: function BaseViewModel$add_PropertyChanged(value) {
			this.$1$PropertyChangedField = ss.delegateCombine(this.$1$PropertyChangedField, value);
		},
		remove_propertyChanged: function BaseViewModel$remove_PropertyChanged(value) {
			this.$1$PropertyChangedField = ss.delegateRemove(this.$1$PropertyChangedField, value);
		},
		dispose: function BaseViewModel$Dispose() {
			tab.Log.get(this).debug('Dispose', []);
			if (ss.isValue(this.$1$DisposedField)) {
				this.$1$DisposedField(this);
				this.$1$DisposedField = null;
			}
			this.$1$PropertyChangedField = null;
			this.disposables.dispose();
		},
		notifyPropertyChanged: function BaseViewModel$NotifyPropertyChanged(propertyName) {
			if (!ss.staticEquals(this.$1$PropertyChangedField, null)) {
				this.$1$PropertyChangedField(this, new tab.PropertyChangedEventArgs(propertyName));
			}
		},
		raiseEvent: function BaseViewModel$RaiseEvent(handler, e) {
			if (ss.isValue(handler)) {
				handler(this, e || ss.EventArgs.Empty);
			}
		},
		raiseActionEvent$1: function(T) {
			return function BaseViewModel$RaiseActionEvent(handler, arg) {
				if (ss.isValue(handler)) {
					handler(arg);
				}
			};
		},
		raiseActionEvent: function BaseViewModel$RaiseActionEvent(handler) {
			if (ss.isValue(handler)) {
				handler();
			}
		}
	}, null, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($spiff_Widget, $asm, {
		add_disposed: function Widget$add_Disposed(value) {
			this.$1$DisposedField = ss.delegateCombine(this.$1$DisposedField, value);
		},
		remove_disposed: function Widget$remove_Disposed(value) {
			this.$1$DisposedField = ss.delegateRemove(this.$1$DisposedField, value);
		},
		add_propertyChanged: function Widget$add_PropertyChanged(value) {
			this.$1$PropertyChangedField = ss.delegateCombine(this.$1$PropertyChangedField, value);
		},
		remove_propertyChanged: function Widget$remove_PropertyChanged(value) {
			this.$1$PropertyChangedField = ss.delegateRemove(this.$1$PropertyChangedField, value);
		},
		get_name: function Widget$get_Name() {
			return ss.getTypeFullName(ss.getInstanceType(this));
		},
		get_instanceId: function Widget$get_InstanceId() {
			return this.$instanceId;
		},
		get_eventNamespace: function Widget$get_EventNamespace() {
			return ss.formatString('.{0}_{1}', this.$instanceId, ss.replaceAllString(ss.getTypeFullName(ss.getInstanceType(this)), '.', '_'));
		},
		get_widgetId: function Widget$get_WidgetId() {
			return this.$widgetId;
		},
		set_widgetId: function Widget$set_WidgetId(value) {
			if (!ss.isNullOrEmptyString(this.$widgetId) && tab.StyleUtil.isValidCssClassName(this.$widgetId)) {
				this.element.removeClass(this.$widgetId);
			}
			this.$widgetId = value;
			if (!ss.isNullOrEmptyString(this.$widgetId) && tab.StyleUtil.isValidCssClassName(this.$widgetId)) {
				this.element.addClass(this.$widgetId);
			}
		},
		get_hoverTooltipText: function Widget$get_HoverTooltipText() {
			return this.element.attr('title');
		},
		set_hoverTooltipText: function Widget$set_HoverTooltipText(value) {
			tab.DomUtil.setNativeTooltip(this.element, value);
		},
		enableTextSelection: function Widget$EnableTextSelection() {
			$spiff_Widget.enableTextSelectionOnElement(this.element);
			return this;
		},
		disableTextSelection: function Widget$DisableTextSelection() {
			$spiff_Widget.disableTextSelectionOnElement(this.element);
			return this;
		},
		dispose: function Widget$Dispose() {
			this.disposables.dispose();
			this.element.removeData($spiff_Widget.$widgetInstanceDataKey);
			this.element.remove();
			this.onDisposed(ss.EventArgs.Empty);
		},
		toString: function Widget$ToString() {
			return this.get_name();
		},
		raisePropertyChanged: function Widget$RaisePropertyChanged(property) {
			if (ss.isValue(this.$1$PropertyChangedField)) {
				this.$1$PropertyChangedField(this, new tab.PropertyChangedEventArgs(property));
			}
		},
		createNamespacedEventName: function Widget$CreateNamespacedEventName(eventName) {
			return eventName + this.get_eventNamespace();
		},
		stopPropogationOfInputEvents: function Widget$StopPropogationOfInputEvents() {
			tab.DomUtil.stopPropagationOfInputEvents(this.element, this.get_eventNamespace());
		},
		handleInputEvents: function Widget$HandleInputEvents(handler) {
			tab.DomUtil.handleInputEvents(this.element, this.get_eventNamespace(), handler);
		},
		onDisposed: function Widget$OnDisposed(args) {
			if (ss.isValue(this.$1$DisposedField)) {
				this.$1$DisposedField(this, ss.EventArgs.Empty);
			}
		},
		addToDom: function Widget$AddToDom(parent) {
			parent.append(this.element);
			this.onAddedToDom();
		},
		prependToDom: function Widget$PrependToDom(parent) {
			parent.prepend(this.element);
			this.onAddedToDom();
		},
		onAddedToDom: function Widget$OnAddedToDom() {
			tab.Log.get(this).debug('Added to DOM: alreadyAdded=%s', [this.addedToDom]);
			this.addedToDom = true;
		},
		addClass: function Widget$AddClass(className) {
			this.element.addClass(className);
		}
	}, null, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_Button, $asm, {
		add_press: function Button$add_Press(value) {
			this.$2$PressField = ss.delegateCombine(this.$2$PressField, value);
		},
		remove_press: function Button$remove_Press(value) {
			this.$2$PressField = ss.delegateRemove(this.$2$PressField, value);
		},
		add_click: function Button$add_Click(value) {
			this.$2$ClickField = ss.delegateCombine(this.$2$ClickField, value);
		},
		remove_click: function Button$remove_Click(value) {
			this.$2$ClickField = ss.delegateRemove(this.$2$ClickField, value);
		},
		add_shiftClick: function Button$add_ShiftClick(value) {
			this.$2$ShiftClickField = ss.delegateCombine(this.$2$ShiftClickField, value);
		},
		remove_shiftClick: function Button$remove_ShiftClick(value) {
			this.$2$ShiftClickField = ss.delegateRemove(this.$2$ShiftClickField, value);
		},
		add_ctrlClick: function Button$add_CtrlClick(value) {
			this.$2$CtrlClickField = ss.delegateCombine(this.$2$CtrlClickField, value);
		},
		remove_ctrlClick: function Button$remove_CtrlClick(value) {
			this.$2$CtrlClickField = ss.delegateRemove(this.$2$CtrlClickField, value);
		},
		add_hover: function Button$add_Hover(value) {
			this.$2$HoverField = ss.delegateCombine(this.$2$HoverField, value);
		},
		remove_hover: function Button$remove_Hover(value) {
			this.$2$HoverField = ss.delegateRemove(this.$2$HoverField, value);
		},
		add_mouseEnter: function Button$add_MouseEnter(value) {
			this.$2$MouseEnterField = ss.delegateCombine(this.$2$MouseEnterField, value);
		},
		remove_mouseEnter: function Button$remove_MouseEnter(value) {
			this.$2$MouseEnterField = ss.delegateRemove(this.$2$MouseEnterField, value);
		},
		add_mouseLeave: function Button$add_MouseLeave(value) {
			this.$2$MouseLeaveField = ss.delegateCombine(this.$2$MouseLeaveField, value);
		},
		remove_mouseLeave: function Button$remove_MouseLeave(value) {
			this.$2$MouseLeaveField = ss.delegateRemove(this.$2$MouseLeaveField, value);
		},
		add_$doubleClick: function Button$add_DoubleClick(value) {
			this.$2$DoubleClickField = ss.delegateCombine(this.$2$DoubleClickField, value);
		},
		remove_$doubleClick: function Button$remove_DoubleClick(value) {
			this.$2$DoubleClickField = ss.delegateRemove(this.$2$DoubleClickField, value);
		},
		get_disabled: function Button$get_Disabled() {
			return this.element.prop('disabled');
		},
		set_disabled: function Button$set_Disabled(value) {
			this.element.prop('disabled', value);
			this.element.toggleClass(this.$disabledClass, value);
			if (value) {
				this.element.removeClass(this.$hoverClass);
			}
		},
		get_hoverClass: function Button$get_HoverClass() {
			return this.$hoverClass;
		},
		set_hoverClass: function Button$set_HoverClass(value) {
			this.$hoverClass = value;
		},
		get_focusClass: function Button$get_FocusClass() {
			return this.$focusClass;
		},
		set_focusClass: function Button$set_FocusClass(value) {
			this.$focusClass = value;
		},
		get_disabledClass: function Button$get_DisabledClass() {
			return this.$disabledClass;
		},
		set_disabledClass: function Button$set_DisabledClass(value) {
			this.$disabledClass = value;
		},
		get_context: function Button$get_Context() {
			return this.$context;
		},
		set_context: function Button$set_Context(value) {
			this.$context = value;
		},
		get_tableauClickHandler: function Button$get_TableauClickHandler() {
			return this.$tableauClickHandler;
		},
		tabIndex: function Button$TabIndex(index) {
			this.element.attr('tabindex', index.toString());
			return this;
		},
		onClick: function Button$OnClick(callback) {
			var handler = ss.mkdel(this, function() {
				callback(this);
			});
			this.add_click(handler);
			return new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_click(handler);
			}));
		},
		onDoubleClick: function Button$OnDoubleClick(callback) {
			this.$tableauClickHandler.onDoubleClick(ss.mkdel(this, this.handleDoubleClick));
			var handler = ss.mkdel(this, function() {
				callback(this);
			});
			this.add_$doubleClick(handler);
			return new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_$doubleClick(handler);
			}));
		},
		onShiftClick: function Button$OnShiftClick(callback) {
			var handler = ss.mkdel(this, function() {
				callback(this);
			});
			this.add_shiftClick(handler);
			return new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_shiftClick(handler);
			}));
		},
		onMouseEnter: function Button$OnMouseEnter(callback) {
			var handler = ss.mkdel(this, function() {
				callback(this);
			});
			this.add_mouseEnter(handler);
			return new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_mouseEnter(handler);
			}));
		},
		onMouseMove: function Button$OnMouseMove(callback) {
			var handler = ss.mkdel(this, function() {
				callback(this);
			});
			this.add_hover(handler);
			return new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_hover(handler);
			}));
		},
		onMouseLeave: function Button$OnMouseLeave(callback) {
			var handler = ss.mkdel(this, function() {
				callback(this);
			});
			this.add_mouseLeave(handler);
			return new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_mouseLeave(handler);
			}));
		},
		$bindEvents: function Button$BindEvents() {
			this.element.focusin(ss.mkdel(this, this.handleFocusIn)).focusout(ss.mkdel(this, this.handleFocusOut)).keypress(ss.mkdel(this, this.$handleKeyPress));
			this.disposables.add$1($spiff_EventUtil.bindWithDispose(this.element, 'mouseenter', ss.mkdel(this, this.handleMouseEnter)));
			var config = new EventUtils.EventHandleSpec();
			config.hoverDelay = 0;
			config.SetHandler('mouseleave', ss.mkdel(this, this.handleMouseLeave));
			config.SetHandler('hover', ss.mkdel(this, this.handleHover));
			this.$tableauClickHandler = $spiff_TableauClickHandler.targetAndConfig(this.element.get(0), config).onClick(ss.mkdel(this, this.handleClick)).onPress(ss.mkdel(this, this.handlePress));
			this.disposables.add$1(this.$tableauClickHandler);
		},
		raiseEvent: function Button$RaiseEvent(callback) {
			if (ss.isValue(callback)) {
				callback();
			}
		},
		$handleKeyPress: function Button$HandleKeyPress(e) {
			if (e.which === 13) {
				$spiff_EventUtil.stopEvent$2(e);
				this.handleClick(null);
			}
			if (e.which === 32) {
				$spiff_EventUtil.stopEvent$2(e);
				this.handleClick(null);
			}
		},
		handleFocusOut: function Button$HandleFocusOut(e) {
			this.element.removeClass(this.$focusClass);
		},
		handleFocusIn: function Button$HandleFocusIn(e) {
			this.element.addClass(this.$focusClass);
		},
		handleHover: function Button$HandleHover() {
			if (!this.get_disabled()) {
				this.element.addClass(this.$hoverClass);
			}
			this.raiseEvent(this.$2$HoverField);
		},
		handleMouseEnter: function Button$HandleMouseEnter(e) {
			this.raiseEvent(this.$2$MouseEnterField);
		},
		handleMouseLeave: function Button$HandleMouseLeave() {
			this.element.removeClass(this.$hoverClass);
			this.raiseEvent(this.$2$MouseLeaveField);
		},
		handleClick: function Button$HandleClick(e) {
			if (this.get_disabled()) {
				return;
			}
			if (ss.isValue(this.$2$ShiftClickField) && ss.isValue(e) && e.shiftKey) {
				this.raiseEvent(this.$2$ShiftClickField);
			}
			else if (ss.isValue(this.$2$CtrlClickField) && $spiff_EventUtil.isCtrlKey(e)) {
				this.raiseEvent(this.$2$CtrlClickField);
			}
			else {
				this.raiseEvent(this.$2$ClickField);
			}
		},
		handleDoubleClick: function Button$HandleDoubleClick(e) {
			if (this.get_disabled()) {
				return;
			}
			this.raiseEvent(this.$2$DoubleClickField);
		},
		handlePress: function Button$HandlePress() {
			if (this.get_disabled()) {
				return;
			}
			this.raiseEvent(this.$2$PressField);
		}
	}, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_ButtonComponent, $asm, {}, ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]));
	ss.initEnum($spiff_ButtonSize, $asm, { medium: 1, large: 2 });
	ss.initClass($spiff_TextInputView, $asm, {
		add_enterKeyPressed: function TextInputView$add_EnterKeyPressed(value) {
			this.$2$EnterKeyPressedField = ss.delegateCombine(this.$2$EnterKeyPressedField, value);
		},
		remove_enterKeyPressed: function TextInputView$remove_EnterKeyPressed(value) {
			this.$2$EnterKeyPressedField = ss.delegateRemove(this.$2$EnterKeyPressedField, value);
		},
		add_escapeKeyPressed: function TextInputView$add_EscapeKeyPressed(value) {
			this.$2$EscapeKeyPressedField = ss.delegateCombine(this.$2$EscapeKeyPressedField, value);
		},
		remove_escapeKeyPressed: function TextInputView$remove_EscapeKeyPressed(value) {
			this.$2$EscapeKeyPressedField = ss.delegateRemove(this.$2$EscapeKeyPressedField, value);
		},
		get_text: function TextInputView$get_Text() {
			return this.$text;
		},
		set_text: function TextInputView$set_Text(value) {
			if (ss.referenceEquals(this.$text, value)) {
				return;
			}
			this.get_inputElement().val(value).trigger('input');
		},
		get_inputElement: function TextInputView$get_InputElement() {
			return this.$template.get_inputElement();
		},
		$handleInputInput: function TextInputView$HandleInputInput(evt) {
			var value = this.get_inputElement().val();
			if (!ss.referenceEquals(this.$text, value)) {
				this.$text = value;
				this.raisePropertyChanged($spiff_TextInputView.textPropertyName);
			}
		},
		$handleInputKeyDown: function TextInputView$HandleInputKeyDown(evt) {
			if (this.$isComposing) {
				return;
			}
			switch (evt.which) {
				case 13: {
					if (!ss.staticEquals(this.$2$EnterKeyPressedField, null)) {
						$spiff_EventUtil.stopEvent$2(evt);
						this.$2$EnterKeyPressedField();
					}
					break;
				}
				case 27: {
					if (!ss.staticEquals(this.$2$EscapeKeyPressedField, null)) {
						this.$2$EscapeKeyPressedField();
						evt.stopPropagation();
					}
					break;
				}
			}
		}
	}, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_ClearableTextInputView, $asm, {
		add_clearButtonClicked: function ClearableTextInputView$add_ClearButtonClicked(value) {
			this.$3$ClearButtonClickedField = ss.delegateCombine(this.$3$ClearButtonClickedField, value);
		},
		remove_clearButtonClicked: function ClearableTextInputView$remove_ClearButtonClicked(value) {
			this.$3$ClearButtonClickedField = ss.delegateRemove(this.$3$ClearButtonClickedField, value);
		},
		get_dom: function ClearableTextInputView$get_Dom() {
			return this.$dom;
		},
		get_searchBoxClearButton: function ClearableTextInputView$get_SearchBoxClearButton() {
			return this.$searchBoxClearButton;
		},
		$handleSearchBoxChange: function ClearableTextInputView$HandleSearchBoxChange() {
			if (!ss.isNullOrEmptyString(this.get_text())) {
				this.$dom.get_searchBoxClear().show();
				this.$dom.get_inputElementContainer().addClass('clearButtonOn');
			}
			else {
				this.$dom.get_searchBoxClear().hide();
				this.$dom.get_inputElementContainer().removeClass('clearButtonOn');
			}
		},
		$onSearchTextInputView: function ClearableTextInputView$OnSearchTextInputView(sender, e) {
			this.$handleSearchBoxChange();
		},
		$onSearchBoxClearClick: function ClearableTextInputView$OnSearchBoxClearClick(button) {
			this.set_text('');
			if (!ss.staticEquals(this.$3$ClearButtonClickedField, null)) {
				this.$3$ClearButtonClickedField();
			}
		}
	}, $spiff_TextInputView, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_ClearableTextInputViewTemplate, $asm, {
		get_domRootElement: function ClearableTextInputViewTemplate$get_DomRootElement() {
			return this.domRoot;
		},
		get_inputElement: function ClearableTextInputViewTemplate$get_InputElement() {
			return this.$inputElement;
		},
		get_inputElementContainer: function ClearableTextInputViewTemplate$get_InputElementContainer() {
			return this.$inputElementContainer;
		},
		get_searchBoxClear: function ClearableTextInputViewTemplate$get_SearchBoxClear() {
			return this.$searchBoxClear;
		}
	}, $spiff_Template, [ss.IDisposable, $spiff_ITextInputViewTemplate]);
	ss.initClass($spiff_ClickBuster, $asm, {});
	ss.initClass($spiff_ClickHandler, $asm, {
		add_$press: function ClickHandler$add_Press(value) {
			this.$1$PressField = ss.delegateCombine(this.$1$PressField, value);
		},
		remove_$press: function ClickHandler$remove_Press(value) {
			this.$1$PressField = ss.delegateRemove(this.$1$PressField, value);
		},
		add_$click: function ClickHandler$add_Click(value) {
			this.$1$ClickField = ss.delegateCombine(this.$1$ClickField, value);
		},
		remove_$click: function ClickHandler$remove_Click(value) {
			this.$1$ClickField = ss.delegateRemove(this.$1$ClickField, value);
		},
		add_$rightClick: function ClickHandler$add_RightClick(value) {
			this.$1$RightClickField = ss.delegateCombine(this.$1$RightClickField, value);
		},
		remove_$rightClick: function ClickHandler$remove_RightClick(value) {
			this.$1$RightClickField = ss.delegateRemove(this.$1$RightClickField, value);
		},
		get_target: function ClickHandler$get_Target() {
			return this.$target;
		},
		dispose: function ClickHandler$Dispose() {
			this.$reset();
			this.$disposables.dispose();
			if (!ss.isValue(this.$target)) {
				return;
			}
			this.$target.off('.' + this.$eventNamespace);
			this.$target = null;
		},
		onPress: function ClickHandler$OnPress(handler) {
			this.add_$press(handler);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_$press(handler);
			})));
			return this;
		},
		onClick: function ClickHandler$OnClick(handler) {
			this.add_$click(handler);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_$click(handler);
			})));
			return this;
		},
		onRightClick: function ClickHandler$OnRightClick(handler) {
			this.add_$rightClick(handler);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_$rightClick(handler);
			})));
			return this;
		},
		setTarget: function ClickHandler$SetTarget(dom) {
			this.$target = dom;
			dom.on(this.$eventName('touchstart'), ss.mkdel(this, this.$handleTouchStart));
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				dom.off(this.$eventName('touchstart'));
			})));
			if (tsConfig.is_mobile) {
				if (!BrowserSupport.BrowserSupport.IsTouch()) {
					dom.on(this.$eventName('mousedown'), ss.mkdel(this, this.$handleMouseDown)).on(this.$eventName('click'), ss.mkdel(this, this.$handleClick));
					this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
						dom.off(this.$eventName('mousedown')).off(this.$eventName('click'));
					})));
				}
			}
			else {
				dom.on(this.$eventName('mousedown'), ss.mkdel(this, this.$handleMouseDown)).on(this.$eventName('click'), ss.mkdel(this, this.$handleClick)).on(this.$eventName('contextmenu'), ss.mkdel(this, this.$handleClick));
				this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
					dom.off(this.$eventName('mousedown')).off(this.$eventName('click')).off(this.$eventName('contextmenu'));
				})));
			}
			return this;
		},
		$eventName: function ClickHandler$EventName(name) {
			return name + '.' + this.$eventNamespace;
		},
		$reset: function ClickHandler$Reset() {
			tab.Log.get(this).debug('Reset', []);
			if (ss.isValue(this.$target)) {
				this.$target.off(this.$eventName('touchend'));
				this.$target.off(this.$eventName('touchcancel'));
			}
			if (ss.isValue(this.$moveListener)) {
				document.body.removeEventListener('touchmove'.toString(), this.$moveListener, true);
				this.$moveListener = null;
			}
			this.$clickTimeoutHandle = tab.MiscUtil.clearTimeout(this.$clickTimeoutHandle);
		},
		$handleMouseDown: function ClickHandler$HandleMouseDown(e) {
			tab.Log.get(this).debug('MouseDown', []);
			this.$startX = e.pageX;
			this.$startY = e.pageY;
			this.$startClickTimeout();
			if (ss.isValue(this.$1$PressField)) {
				this.$1$PressField(e);
			}
		},
		$getTouchZero: function ClickHandler$GetTouchZero(e) {
			var te = (ss.isValue(e) ? e['originalEvent'] : null);
			if (ss.isValue(te) && ss.isValue(te.touches) && ss.isValue(te.touches[0])) {
				return te.touches[0];
			}
			return null;
		},
		$handleTouchStart: function ClickHandler$HandleTouchStart(e) {
			if (!tsConfig.is_mobile) {
				if (tab.DomUtil.handleTouchEvents(e.target)) {
					e.preventDefault();
				}
				else {
					return;
				}
			}
			var touch = this.$getTouchZero(e);
			var pageX = 0;
			var pageY = 0;
			if (ss.isValue(touch)) {
				pageX = ss.coalesce(touch.pageX, 0);
				pageY = ss.coalesce(touch.pageY, 0);
			}
			tab.Log.get(this).debug('TouchStart - x=%d, y=%d', [pageX, pageY]);
			this.$target.on(this.$eventName('touchend'), ss.mkdel(this, this.$handleTouchEnd));
			this.$target.on(this.$eventName('touchcancel'), ss.mkdel(this, this.$handleTouchCancel));
			this.$startClickTimeout();
			if (BrowserSupport.BrowserSupport.AddEventListener()) {
				this.$moveListener = ss.thisFix(ss.mkdel(this, this.$handleTouchMove));
				document.body.addEventListener('touchmove'.toString(), this.$moveListener, true);
			}
			this.$startX = pageX;
			this.$startY = pageY;
			if (ss.isValue(this.$1$PressField)) {
				this.$1$PressField(e);
			}
		},
		$handleTouchEnd: function ClickHandler$HandleTouchEnd(e) {
			if (!tsConfig.is_mobile) {
				if (tab.DomUtil.handleTouchEvents(e.target)) {
					e.preventDefault();
				}
				else {
					return;
				}
			}
			this.$handleClick(e);
		},
		$startClickTimeout: function ClickHandler$StartClickTimeout() {
			this.$clickTimeoutHandle = tab.MiscUtil.clearTimeout(this.$clickTimeoutHandle);
			this.$clickTimeoutHandle = window.setTimeout(ss.mkdel(this, this.$reset), $spiff_ClickHandler.$clickTimeout);
		},
		$handleTouchMove: function ClickHandler$HandleTouchMove(element, e) {
			var touchEvent = ss.cast(e, TouchEvent);
			if (!tsConfig.is_mobile) {
				if (tab.DomUtil.handleTouchEvents(element)) {
					e.preventDefault();
				}
				else {
					return;
				}
			}
			var pageX = touchEvent.touches[0].pageX;
			var pageY = touchEvent.touches[0].pageY;
			tab.Log.get(this).debug('TouchMove - x=%s, y=%s', [pageX, pageY]);
			if (Math.abs(pageX - this.$startX) > $spiff_ClickHandler.$moveSlop || Math.abs(pageY - this.$startY) > $spiff_ClickHandler.$moveSlop) {
				tab.Log.get(this).debug('Cancel click: moved too far', []);
				this.$reset();
			}
		},
		$handleTouchCancel: function ClickHandler$HandleTouchCancel(e) {
			if (!tsConfig.is_mobile) {
				if (tab.DomUtil.handleTouchEvents(e.target)) {
					e.preventDefault();
				}
				else {
					return;
				}
			}
			this.$reset();
		},
		$handleClick: function ClickHandler$HandleClick(e) {
			tab.Log.get(this).debug('Click - %s', [e.type]);
			e.stopPropagation();
			this.$reset();
			if (e.type === 'contextmenu') {
				e.preventDefault();
				if (ss.isValue(this.$1$RightClickField)) {
					this.$1$RightClickField(e);
				}
			}
			else {
				if (ss.isValue(this.$1$ClickField)) {
					this.$1$ClickField(e);
				}
				if (e.type === 'touchend') {
					$spiff_ClickBuster.preventGhostClick(this.$startX, this.$startY, e.target);
				}
			}
		}
	}, null, [ss.IDisposable]);
	ss.initClass($spiff_ComboBoxComponent, $asm, {
		render: function ComboBoxComponent$Render() {
			var buttonGroupProps = $.extend(new Object(), this.props);
			buttonGroupProps.onSelectionChanged = ss.mkdel(this, function(selection) {
				this.onSelect(selection, this.props.onSelectionChanged);
			});
			var contents = React.createElement($spiff_SelectableButtonGroupComponent, buttonGroupProps);
			var $t1 = new Object();
			$t1.styleClass = this.props.styleClass;
			$t1.isSelecting = this.state.isSelecting;
			$t1.getDesiredHeight = $spiff_SelectableButtonGroupComponent.getDesiredHeight;
			$t1.getMinimumWidth = $spiff_SelectableButtonGroupComponent.getMinimumWidth;
			$t1.onSelectorToggled = ss.mkdel(this, this.$toggleSelector);
			$t1.onFocusLost = ss.mkdel(this, this.$onFocusLost);
			$t1.tabIndex = -1;
			$t1.renderButton = ss.mkdel(this, function() {
				return React.createElement($spiff_TextDropdownButtonComponent, { styleClass: this.props.buttonStyleClass, selectionIconClass: this.props.selectedIconClass, selectionText: this.props.selectedText });
			});
			var element = React.createElement($spiff_StatelessDropdownComponent, $t1, contents);
			return element;
		},
		onSelect: function ComboBoxComponent$OnSelect(selection, callback) {
			var $t1 = new $spiff_ComboBoxState();
			$t1.isSelecting = false;
			this.setState($t1);
			if (!ss.staticEquals(callback, null)) {
				callback(selection);
			}
		},
		$toggleSelector: function ComboBoxComponent$ToggleSelector() {
			if (!this.props.enabled) {
				var $t1 = new $spiff_ComboBoxState();
				$t1.isSelecting = false;
				this.setState($t1);
			}
			else {
				var $t2 = new $spiff_ComboBoxState();
				$t2.isSelecting = !this.state.isSelecting;
				this.setState($t2);
			}
		},
		$onFocusLost: function ComboBoxComponent$OnFocusLost() {
			var $t1 = new $spiff_ComboBoxState();
			$t1.isSelecting = false;
			this.setState($t1);
		}
	}, React.Component);
	ss.initClass($spiff_MenuViewTheme, $asm, {});
	ss.initClass($spiff_ComboBoxDropdownMenuTheme, $asm, {}, $spiff_MenuViewTheme);
	ss.initClass($spiff_ComboBoxItem, $asm, {
		get_iconClass: function ComboBoxItem$get_IconClass() {
			return this.$1$IconClassField;
		},
		set_iconClass: function ComboBoxItem$set_IconClass(value) {
			this.$1$IconClassField = value;
		},
		get_name: function ComboBoxItem$get_Name() {
			return this.$1$NameField;
		},
		set_name: function ComboBoxItem$set_Name(value) {
			this.$1$NameField = value;
		},
		get_data: function ComboBoxItem$get_Data() {
			return this.$1$DataField;
		},
		set_data: function ComboBoxItem$set_Data(value) {
			this.$1$DataField = value;
		},
		get_description: function ComboBoxItem$get_Description() {
			return this.$1$DescriptionField;
		},
		set_description: function ComboBoxItem$set_Description(value) {
			this.$1$DescriptionField = value;
		},
		get_title: function ComboBoxItem$get_Title() {
			return this.$1$TitleField;
		},
		set_title: function ComboBoxItem$set_Title(value) {
			this.$1$TitleField = value;
		},
		asMenuItem: function ComboBoxItem$AsMenuItem() {
			return (new $spiff_MenuItemBuilder()).data(this).name(this.get_name()).iconClass(this.get_iconClass()).enabled(true).description(this.get_description()).title(this.get_title()).build();
		}
	});
	ss.initClass($spiff_ComboBoxMenuTheme, $asm, {}, $spiff_MenuViewTheme);
	ss.initEnum($spiff_ComboBoxMenuThemeChoice, $asm, { standard: 0, dropdown: 1, unification: 2 });
	ss.initClass($spiff_ComboBoxProps, $asm, {}, Object);
	ss.initEnum($spiff_ComboBoxSizing, $asm, { standard: 0, autoFit: 1 });
	ss.initClass($spiff_ComboBoxState, $asm, {});
	ss.initClass($spiff_ComboBoxTemplate, $asm, {}, $spiff_Template, [ss.IDisposable]);
	ss.initEnum($spiff_ComboBoxTheme, $asm, { standard: 0, compact: 1, unification: 2, lineAndArrow: 3 });
	ss.initClass($spiff_ComboBoxView, $asm, {
		$handleMenuHidden: function ComboBoxView$HandleMenuHidden() {
			this.$dom.icon.removeClass($spiff_ComboBoxView.iconPressedClass);
			this.$dom.domRoot.removeClass($spiff_ComboBoxView.pressedClass);
		},
		$onClick: function ComboBoxView$OnClick(e) {
			if (!this.$viewModel$1.get_enabled()) {
				return;
			}
			this.$dom.domRoot.addClass($spiff_ComboBoxView.pressedClass);
			if (this.$viewModel$1.get_showDropdownIcon()) {
				this.$dom.icon.addClass($spiff_ComboBoxView.iconPressedClass);
			}
			this.$viewModel$1.comboClicked(this.$dom.domRoot);
		},
		$onDomKeydown: function ComboBoxView$OnDomKeydown(e) {
			var indexChange = 0;
			switch (e.which) {
				case 40: {
					indexChange = 1;
					break;
				}
				case 38: {
					indexChange = -1;
					break;
				}
				default: {
					return;
				}
			}
			e.preventDefault();
			e.stopPropagation();
			var selectedIndex = ss.indexOf(this.$viewModel$1.get_items(), this.$viewModel$1.get_selectedItem());
			if (selectedIndex < 0) {
				return;
			}
			selectedIndex += indexChange;
			if (selectedIndex >= 0 && selectedIndex < this.$viewModel$1.get_items().length) {
				this.$viewModel$1.set_selectedItem(this.$viewModel$1.get_items()[selectedIndex]);
			}
		},
		$selectedItemChanged: function ComboBoxView$SelectedItemChanged(arg) {
			if (ss.isInstanceOfType(arg, $spiff_CustomComboBoxItem)) {
				return;
			}
			this.$dom.icon.remove();
			if (ss.isNullOrUndefined(arg)) {
				var str = (ss.isValue(this.$viewModel$1.get_summary()) ? this.$viewModel$1.get_summary() : '&nbsp;');
				this.$dom.name.html(str);
				return;
			}
			this.$dom.icon = $('<span/>').addClass('tabComboBoxIcon').addClass(arg.get_iconClass()).appendTo(this.$dom.domRoot);
			if (!ss.isValue(arg.get_iconClass())) {
				this.$dom.domRoot.addClass($spiff_ComboBoxView.noIconClass);
			}
			this.$dom.name.text(arg.get_name());
			if (!ss.isNullOrEmptyString(arg.get_title())) {
				this.$dom.domRoot.attr('title', arg.get_title());
			}
		},
		$handleItemsChanged: function ComboBoxView$HandleItemsChanged() {
			this.$selectedItemChanged(this.$viewModel$1.get_selectedItem());
		},
		$handleEnabledChanged: function ComboBoxView$HandleEnabledChanged() {
			this.$dom.domRoot.toggleClass($spiff_ComboBoxView.disabledClass, !this.$viewModel$1.get_enabled());
		},
		$handleIsSelectionInvalidChanged: function ComboBoxView$HandleIsSelectionInvalidChanged() {
			this.$dom.domRoot.toggleClass($spiff_ComboBoxView.invalidClass, this.$viewModel$1.get_isSelectionInvalid());
		},
		onAddedToDom: function ComboBoxView$OnAddedToDom() {
			$spiff_Widget.prototype.onAddedToDom.call(this);
			if (this.$viewModel$1.get_sizing() === 1) {
				var menuView = tab.ObjectRegistry.newView($spiff_MenuView).call(null, [this.$viewModel$1.get_menu()]);
				var hiddenContainer = $('<div>').css({ visibility: 'hidden', position: 'absolute', left: 0 + 'px', top: 0 + 'px' });
				$(document.body).append(hiddenContainer);
				menuView.addToDom(hiddenContainer);
				this.$dom.domRoot.css({ width: menuView.element.width() + 'px' });
				menuView.dispose();
				hiddenContainer.remove();
			}
		}
	}, ss.makeGenericType($spiff_BaseView$1, [$spiff_ComboBoxViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$spiff_ComboBoxViewModel])]);
	ss.initInterface($spiff_IHasEnabledState, $asm, { add_enabledChanged: null, remove_enabledChanged: null, get_enabled: null, set_enabled: null });
	ss.initClass($spiff_ComboBoxViewModel, $asm, {
		add_itemsChanged: function ComboBoxViewModel$add_ItemsChanged(value) {
			this.$3$ItemsChangedField = ss.delegateCombine(this.$3$ItemsChangedField, value);
		},
		remove_itemsChanged: function ComboBoxViewModel$remove_ItemsChanged(value) {
			this.$3$ItemsChangedField = ss.delegateRemove(this.$3$ItemsChangedField, value);
		},
		add_selectedItemChanged: function ComboBoxViewModel$add_SelectedItemChanged(value) {
			this.$3$SelectedItemChangedField = ss.delegateCombine(this.$3$SelectedItemChangedField, value);
		},
		remove_selectedItemChanged: function ComboBoxViewModel$remove_SelectedItemChanged(value) {
			this.$3$SelectedItemChangedField = ss.delegateRemove(this.$3$SelectedItemChangedField, value);
		},
		add_menuHidden: function ComboBoxViewModel$add_MenuHidden(value) {
			this.$3$MenuHiddenField = ss.delegateCombine(this.$3$MenuHiddenField, value);
		},
		remove_menuHidden: function ComboBoxViewModel$remove_MenuHidden(value) {
			this.$3$MenuHiddenField = ss.delegateRemove(this.$3$MenuHiddenField, value);
		},
		add_enabledChanged: function ComboBoxViewModel$add_EnabledChanged(value) {
			this.$3$EnabledChangedField = ss.delegateCombine(this.$3$EnabledChangedField, value);
		},
		remove_enabledChanged: function ComboBoxViewModel$remove_EnabledChanged(value) {
			this.$3$EnabledChangedField = ss.delegateRemove(this.$3$EnabledChangedField, value);
		},
		add_isSelectionInvalidChanged: function ComboBoxViewModel$add_IsSelectionInvalidChanged(value) {
			this.$3$IsSelectionInvalidChangedField = ss.delegateCombine(this.$3$IsSelectionInvalidChangedField, value);
		},
		remove_isSelectionInvalidChanged: function ComboBoxViewModel$remove_IsSelectionInvalidChanged(value) {
			this.$3$IsSelectionInvalidChangedField = ss.delegateRemove(this.$3$IsSelectionInvalidChangedField, value);
		},
		get_hasTooltip: function ComboBoxViewModel$get_HasTooltip() {
			return this.$hasTooltip;
		},
		set_hasTooltip: function ComboBoxViewModel$set_HasTooltip(value) {
			this.$hasTooltip = value;
		},
		get_theme: function ComboBoxViewModel$get_Theme() {
			return this.$theme;
		},
		set_theme: function ComboBoxViewModel$set_Theme(value) {
			this.$theme = value;
		},
		get_menu: function ComboBoxViewModel$get_Menu() {
			if (ss.isNullOrUndefined(this.$currentMenu)) {
				this.$initializeCurrentMenu();
			}
			return this.$currentMenu;
		},
		get_menuTheme: function ComboBoxViewModel$get_MenuTheme() {
			return this.$menuTheme;
		},
		set_menuTheme: function ComboBoxViewModel$set_MenuTheme(value) {
			this.$menuTheme = value;
		},
		get_sizing: function ComboBoxViewModel$get_Sizing() {
			return this.$sizing;
		},
		set_sizing: function ComboBoxViewModel$set_Sizing(value) {
			this.$sizing = value;
		},
		get_menuStyleClass: function ComboBoxViewModel$get_MenuStyleClass() {
			return this.$menuStyleClass;
		},
		set_menuStyleClass: function ComboBoxViewModel$set_MenuStyleClass(value) {
			this.$menuStyleClass = value;
		},
		get_items: function ComboBoxViewModel$get_Items() {
			return this.$items;
		},
		get_selectedItem: function ComboBoxViewModel$get_SelectedItem() {
			return this.$selectedItem;
		},
		set_selectedItem: function ComboBoxViewModel$set_SelectedItem(value) {
			if (ss.referenceEquals(this.$selectedItem, value) && !this.get_allowSetToSameValue()) {
				return;
			}
			this.$selectedItem = value;
			this.$updateReactProps();
			this.raiseActionEvent$1($spiff_ComboBoxItem).call(this, this.$3$SelectedItemChangedField, this.$selectedItem);
		},
		get_summary: function ComboBoxViewModel$get_Summary() {
			return this.$3$SummaryField;
		},
		set_summary: function ComboBoxViewModel$set_Summary(value) {
			this.$3$SummaryField = value;
		},
		get_showSelectedItem: function ComboBoxViewModel$get_ShowSelectedItem() {
			return this.$showSelectedItem;
		},
		set_showSelectedItem: function ComboBoxViewModel$set_ShowSelectedItem(value) {
			this.$showSelectedItem = value;
		},
		get_showDropdownIcon: function ComboBoxViewModel$get_ShowDropdownIcon() {
			return this.$3$ShowDropdownIconField;
		},
		set_showDropdownIcon: function ComboBoxViewModel$set_ShowDropdownIcon(value) {
			this.$3$ShowDropdownIconField = value;
		},
		get_enabled: function ComboBoxViewModel$get_Enabled() {
			return this.$enabled;
		},
		set_enabled: function ComboBoxViewModel$set_Enabled(value) {
			if (this.$enabled === value) {
				return;
			}
			this.$enabled = value;
			this.$updateReactProps();
			this.raiseActionEvent(this.$3$EnabledChangedField);
		},
		get_isSelectionInvalid: function ComboBoxViewModel$get_IsSelectionInvalid() {
			return this.$isSelectionInvalid;
		},
		set_isSelectionInvalid: function ComboBoxViewModel$set_IsSelectionInvalid(value) {
			if (this.$isSelectionInvalid === value) {
				return;
			}
			this.$isSelectionInvalid = value;
			this.raiseActionEvent(this.$3$IsSelectionInvalidChangedField);
		},
		get_additionalMenuClass: function ComboBoxViewModel$get_AdditionalMenuClass() {
			return this.$additionalMenuClass;
		},
		set_additionalMenuClass: function ComboBoxViewModel$set_AdditionalMenuClass(value) {
			this.$additionalMenuClass = value;
		},
		get_allowSetToSameValue: function ComboBoxViewModel$get_AllowSetToSameValue() {
			return this.$3$AllowSetToSameValueField;
		},
		set_allowSetToSameValue: function ComboBoxViewModel$set_AllowSetToSameValue(value) {
			this.$3$AllowSetToSameValueField = value;
		},
		get_selectedText: function ComboBoxViewModel$get_SelectedText() {
			return (ss.isValue(this.get_selectedItem()) ? this.get_selectedItem().get_name() : '');
		},
		get_selectedIconClass: function ComboBoxViewModel$get_SelectedIconClass() {
			return (ss.isValue(this.get_selectedItem()) ? this.get_selectedItem().get_iconClass() : '');
		},
		get_$hasAnyIcons: function ComboBoxViewModel$get_HasAnyIcons() {
			var $t1 = this.get_items();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var item = $t1[$t2];
				if (!tab.MiscUtil.isNullOrEmpty$3(item.get_iconClass())) {
					return true;
				}
			}
			return false;
		},
		get_dropdownStyleClass: function ComboBoxViewModel$get_DropdownStyleClass() {
			return this.$3$DropdownStyleClassField;
		},
		set_dropdownStyleClass: function ComboBoxViewModel$set_DropdownStyleClass(value) {
			this.$3$DropdownStyleClassField = value;
		},
		get_$styleClass: function ComboBoxViewModel$get_StyleClass() {
			var styleClass = 'tab-unification-line-arrow-dropdown';
			if (!this.get_enabled()) {
				styleClass += ' disabled';
			}
			if (this.get_$hasAnyIcons()) {
				styleClass += ' hasIcons';
			}
			return styleClass;
		},
		dispose: function ComboBoxViewModel$Dispose() {
			if (ss.isValue(this.$currentMenu)) {
				this.$currentMenu.dispose();
			}
			$spiff_BaseViewModel.prototype.dispose.call(this);
			this.$currentMenu = null;
		},
		setItems: function ComboBoxViewModel$SetItems(newItems) {
			ss.clear(this.$items);
			var $t1 = ss.getEnumerator(newItems);
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					this.$items.push(item);
				}
			}
			finally {
				$t1.dispose();
			}
			this.$raiseItemsChanged();
			this.$updateReactProps();
		},
		setItemsWithInitialSelection: function ComboBoxViewModel$SetItemsWithInitialSelection(newItems, selected) {
			ss.clear(this.$items);
			var $t1 = ss.getEnumerator(newItems);
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					this.$items.push(item);
				}
			}
			finally {
				$t1.dispose();
			}
			this.$selectedItem = selected;
			this.$raiseItemsChanged();
			this.$updateReactProps();
		},
		addItem: function ComboBoxViewModel$AddItem(item) {
			this.$items.push(item);
			this.$raiseItemsChanged();
			this.$updateReactProps();
		},
		clearItems: function ComboBoxViewModel$ClearItems() {
			ss.clear(this.$items);
			this.$raiseItemsChanged();
			this.set_selectedItem(null);
			this.$updateReactProps();
		},
		$shouldBuildMenu: function ComboBoxViewModel$ShouldBuildMenu() {
			return this.$items.length > 0 && (this.$enabled || this.get_sizing() === 1);
		},
		updateCurrentMenu: function ComboBoxViewModel$UpdateCurrentMenu() {
			if (!this.$shouldBuildMenu() || !ss.isValue(this.$currentMenu)) {
				return;
			}
			this.$buildMenuItems();
			this.$currentMenu.set_menu(new $spiff_Menu(this.menuItems));
			this.$currentMenu.set_selectedItem(this.selectedMenuItem);
		},
		$initializeCurrentMenu: function ComboBoxViewModel$InitializeCurrentMenu() {
			if (!this.$shouldBuildMenu()) {
				return;
			}
			this.$buildMenuItems();
			this.$currentMenu = $spiff_MenuViewModel.createForMenu(new $spiff_Menu(this.menuItems), ss.mkdel(this, this.$menuItemClicked), this.$createMenuTheme(), ss.mkdel(this, this.$raiseMenuHidden), null, true);
			this.$currentMenu.set_selectedItem(this.selectedMenuItem);
			this.$currentMenu.set_focusedItem(this.selectedMenuItem);
		},
		comboClicked: function ComboBoxViewModel$ComboClicked(relativeTo) {
			if (!this.$shouldBuildMenu()) {
				return;
			}
			this.$initializeCurrentMenu();
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$currentMenu.remove_hidden(ss.mkdel(this, this.$raiseMenuHidden));
			})));
			var $t1 = new $spiff_ShowMenuOptions(relativeTo, true);
			$t1.additionalMenuClass = 'tabComboBoxMenu';
			var options = $t1;
			if (ss.isValue(this.$additionalMenuClass)) {
				options.additionalMenuClass += ' ' + this.$additionalMenuClass;
			}
			this.$currentMenu.show(options);
		},
		$updateReactProps: function ComboBoxViewModel$UpdateReactProps() {
			if (this.generateProps) {
				this.incrementProps();
			}
		},
		$buildMenuItems: function ComboBoxViewModel$BuildMenuItems() {
			var menuItems = [];
			var selectedMenuItem = null;
			if (ss.isValue(this.$items)) {
				for (var $t1 = 0; $t1 < this.$items.length; $t1++) {
					var i = this.$items[$t1];
					if (this.$showSelectedItem || !ss.referenceEquals(i, this.$selectedItem)) {
						var mi = i.asMenuItem();
						if (ss.referenceEquals(i, this.$selectedItem)) {
							selectedMenuItem = mi;
						}
						menuItems.push(mi);
					}
				}
			}
			this.menuItems = menuItems;
			this.selectedMenuItem = selectedMenuItem;
		},
		$createMenuTheme: function ComboBoxViewModel$CreateMenuTheme() {
			switch (this.$menuTheme) {
				case 0: {
					return new $spiff_ComboBoxMenuTheme();
				}
				case 1: {
					return new $spiff_ComboBoxDropdownMenuTheme(this.get_menuStyleClass());
				}
				case 2: {
					return new $spiff_UnificationLightMenuTheme();
				}
				default: {
					return new $spiff_ComboBoxMenuTheme();
				}
			}
		},
		$raiseMenuHidden: function ComboBoxViewModel$RaiseMenuHidden() {
			if (ss.isValue(this.$3$MenuHiddenField)) {
				this.$3$MenuHiddenField();
			}
		},
		$raiseItemsChanged: function ComboBoxViewModel$RaiseItemsChanged() {
			if (ss.isValue(this.$3$ItemsChangedField)) {
				this.$3$ItemsChangedField();
			}
		},
		$menuItemClicked: function ComboBoxViewModel$MenuItemClicked(arg) {
			var ci = ss.cast(arg.data, $spiff_ComboBoxItem);
			tab.Log.get(this).debug('item selected: %o', [ci]);
			this.set_selectedItem(ci);
		},
		$onSelectionChanged: function ComboBoxViewModel$OnSelectionChanged(selection) {
			this.set_selectedItem(selection.mapSelected($spiff_ComboBoxItem).call(selection, ss.mkdel(this, function(index) {
				return this.get_items()[index];
			}))[0]);
		},
		$getCustomContentBefore: function ComboBoxViewModel$GetCustomContentBefore(item) {
			return $spiff_ComboBoxComponent.createCustomIconElements(item.get_iconClass());
		},
		createUpdatedProps: function ComboBoxViewModel$CreateUpdatedProps() {
			if (!this.generateProps) {
				return null;
			}
			var $t1 = new $spiff_ComboBoxProps();
			$t1.items = _.map(this.get_items(), ss.mkdel(this, function(item) {
				var $t2 = new $spiff_SelectableButtonGroupItem();
				$t2.label = item.get_name();
				$t2.getCustomContentBefore = ss.mkdel(this, function() {
					return this.$getCustomContentBefore(item);
				});
				$t2.tooltip = (!this.get_props().hasTooltip ? '' : null);
				return $t2;
			}));
			$t1.selection = $spiff_SingleSelectGroupSelection.buildSingleSelectGroupSelection$1($spiff_ComboBoxItem).call(null, Array.prototype.slice.call(this.get_items()), ss.mkdel(this, function(item1) {
				return ss.equals(item1, this.get_selectedItem());
			}));
			$t1.selectedText = this.get_selectedText();
			$t1.selectedIconClass = this.get_selectedIconClass();
			$t1.onSelectionChanged = ss.mkdel(this, this.$onSelectionChanged);
			$t1.hasTooltip = this.get_hasTooltip();
			$t1.hasAnyIcons = this.get_$hasAnyIcons();
			$t1.buttonStyleClass = this.get_$styleClass();
			$t1.styleClass = this.get_dropdownStyleClass();
			$t1.enabled = this.get_enabled();
			return $t1;
		}
	}, ss.makeGenericType($spiff_BaseReactViewModel$1, [$spiff_ComboBoxProps]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType($spiff_IPropsProvider$1, [$spiff_ComboBoxProps]), $spiff_IHasEnabledState]);
	ss.initClass($spiff_CompositeSearchWidget, $asm, {
		add_inputTextChanged: function CompositeSearchWidget$add_InputTextChanged(value) {
			this.$2$InputTextChangedField = ss.delegateCombine(this.$2$InputTextChangedField, value);
		},
		remove_inputTextChanged: function CompositeSearchWidget$remove_InputTextChanged(value) {
			this.$2$InputTextChangedField = ss.delegateRemove(this.$2$InputTextChangedField, value);
		},
		add_listItemClicked: function CompositeSearchWidget$add_ListItemClicked(value) {
			this.$2$ListItemClickedField = ss.delegateCombine(this.$2$ListItemClickedField, value);
		},
		remove_listItemClicked: function CompositeSearchWidget$remove_ListItemClicked(value) {
			this.$2$ListItemClickedField = ss.delegateRemove(this.$2$ListItemClickedField, value);
		},
		add_listItemMouseEnter: function CompositeSearchWidget$add_ListItemMouseEnter(value) {
			this.$2$ListItemMouseEnterField = ss.delegateCombine(this.$2$ListItemMouseEnterField, value);
		},
		remove_listItemMouseEnter: function CompositeSearchWidget$remove_ListItemMouseEnter(value) {
			this.$2$ListItemMouseEnterField = ss.delegateRemove(this.$2$ListItemMouseEnterField, value);
		},
		add_listItemMouseMove: function CompositeSearchWidget$add_ListItemMouseMove(value) {
			this.$2$ListItemMouseMoveField = ss.delegateCombine(this.$2$ListItemMouseMoveField, value);
		},
		remove_listItemMouseMove: function CompositeSearchWidget$remove_ListItemMouseMove(value) {
			this.$2$ListItemMouseMoveField = ss.delegateRemove(this.$2$ListItemMouseMoveField, value);
		},
		add_textInputElementClicked: function CompositeSearchWidget$add_TextInputElementClicked(value) {
			this.$2$TextInputElementClickedField = ss.delegateCombine(this.$2$TextInputElementClickedField, value);
		},
		remove_textInputElementClicked: function CompositeSearchWidget$remove_TextInputElementClicked(value) {
			this.$2$TextInputElementClickedField = ss.delegateRemove(this.$2$TextInputElementClickedField, value);
		},
		add_textInputClearButtonClicked: function CompositeSearchWidget$add_TextInputClearButtonClicked(value) {
			this.$2$TextInputClearButtonClickedField = ss.delegateCombine(this.$2$TextInputClearButtonClickedField, value);
		},
		remove_textInputClearButtonClicked: function CompositeSearchWidget$remove_TextInputClearButtonClicked(value) {
			this.$2$TextInputClearButtonClickedField = ss.delegateRemove(this.$2$TextInputClearButtonClickedField, value);
		},
		add_textInputSearchButtonClicked: function CompositeSearchWidget$add_TextInputSearchButtonClicked(value) {
			this.$2$TextInputSearchButtonClickedField = ss.delegateCombine(this.$2$TextInputSearchButtonClickedField, value);
		},
		remove_textInputSearchButtonClicked: function CompositeSearchWidget$remove_TextInputSearchButtonClicked(value) {
			this.$2$TextInputSearchButtonClickedField = ss.delegateRemove(this.$2$TextInputSearchButtonClickedField, value);
		},
		get_template: function CompositeSearchWidget$get_Template() {
			return this.compositeSearchWidgetTemplate.get_template();
		},
		get_domRoot: function CompositeSearchWidget$get_DomRoot() {
			return this.compositeSearchWidgetTemplate.get_domRootElement();
		},
		get_textInputView: function CompositeSearchWidget$get_TextInputView() {
			return this.compositeSearchWidgetTemplate.get_textInputView();
		},
		get_searchButton: function CompositeSearchWidget$get_SearchButton() {
			return this.compositeSearchWidgetTemplate.get_searchButton();
		},
		get_clearButton: function CompositeSearchWidget$get_ClearButton() {
			return this.compositeSearchWidgetTemplate.get_clearButton();
		},
		get_listViewModel: function CompositeSearchWidget$get_ListViewModel() {
			return this.$2$ListViewModelField;
		},
		set_listViewModel: function CompositeSearchWidget$set_ListViewModel(value) {
			this.$2$ListViewModelField = value;
		},
		setPlaceholderText: function CompositeSearchWidget$SetPlaceholderText(text) {
			this.get_textInputView().get_inputElement().attr('placeholder', text);
		},
		showList: function CompositeSearchWidget$ShowList(listItems, itemCreator, parent) {
			this.removeList();
			if (listItems.length > 0) {
				this.set_listViewModel(new $spiff_PopupListViewModel(listItems, itemCreator, 0));
				if (!ss.staticEquals(this.$2$ListItemClickedField, null)) {
					this.get_listViewModel().add_selectionChanged(ss.mkdel(this, function() {
						this.$2$ListItemClickedField(this.get_listViewModel().get_firstSelectedItem());
					}));
				}
				if (!ss.staticEquals(this.$2$ListItemMouseEnterField, null)) {
					this.get_listViewModel().add_listItemMouseEnter(ss.mkdel(this, function(item) {
						this.$2$ListItemMouseEnterField(item);
					}));
				}
				if (!ss.staticEquals(this.$2$ListItemMouseMoveField, null)) {
					this.get_listViewModel().add_listItemMouseMove(ss.mkdel(this, function(item1) {
						this.$2$ListItemMouseMoveField(item1);
					}));
				}
				var listView = new $spiff_PopupListView(this.get_listViewModel());
				listView.addClass($spiff_CompositeSearchWidget.listClassName);
				listView.addToDom(parent || this.get_domRoot());
			}
		},
		showListInsideUberPopup: function CompositeSearchWidget$ShowListInsideUberPopup(listItems, itemCreator, relativeElement, additionalClassName, maxPopupHeight) {
			if (listItems.length <= 0) {
				this.removeList();
				return;
			}
			this.set_listViewModel(new $spiff_PopupListViewModel(listItems, itemCreator, 0));
			if (!ss.staticEquals(this.$2$ListItemClickedField, null)) {
				this.get_listViewModel().add_selectionChanged(ss.mkdel(this, function() {
					this.$2$ListItemClickedField(this.get_listViewModel().get_firstSelectedItem());
				}));
			}
			if (!ss.staticEquals(this.$2$ListItemMouseEnterField, null)) {
				this.get_listViewModel().add_listItemMouseEnter(ss.mkdel(this, function(item) {
					this.$2$ListItemMouseEnterField(item);
				}));
			}
			if (!ss.staticEquals(this.$2$ListItemMouseMoveField, null)) {
				this.get_listViewModel().add_listItemMouseMove(ss.mkdel(this, function(item1) {
					this.$2$ListItemMouseMoveField(item1);
				}));
			}
			if (ss.isNullOrUndefined(this.$popupVM)) {
				this.$popupVM = $spiff_UberPopupViewModel.createForContent$1(this.get_listViewModel(), relativeElement, null, true);
				this.$popupVM.set_resizeContent(ss.mkdel(this, this.$resizeListInsideUberPopup));
				var additionalClassNames = (ss.isValue(additionalClassName) ? [$spiff_CompositeSearchWidget.listClassName, additionalClassName] : [$spiff_CompositeSearchWidget.listClassName]);
				var $t2 = this.$popupVM;
				var $t1 = new $spiff_UberPopupShowOptions();
				$t1.additionalClassNames = additionalClassNames;
				$t1.globalTouchWhitelist = [this.get_textInputView().element.get(0), this.get_searchButton().element.get(0), this.get_clearButton().element.get(0)];
				$t1.horizontalAttach = 1;
				$t1.limitPopupHeight = true;
				$t1.maxPopupHeight = maxPopupHeight;
				$t1.popupMode = 1;
				$t1.theme = 1;
				$t1.focusOnShown = false;
				$t2.options = $t1;
				this.$popupVM.add_hidden(ss.mkdel(this, function() {
					this.$popupVM = null;
					this.handleRemoveList();
				}));
				this.$popupVM.show();
			}
			else {
				this.$popupVM.set_content(this.get_listViewModel());
			}
		},
		$resizeListInsideUberPopup: function CompositeSearchWidget$ResizeListInsideUberPopup(contentWrapper, element) {
			var dropdownList = contentWrapper.children('.tab-list').eq(0);
			var dropdownFullHeight = dropdownList.prop('scrollHeight');
			if (dropdownFullHeight < 1) {
				element.show();
				dropdownFullHeight = dropdownList.prop('scrollHeight');
				element.hide();
			}
			var inputBoxWidth = this.$popupVM.get_relativeElement().outerWidth();
			dropdownList.css('min-width', inputBoxWidth + 'px').css('max-width', Math.max(inputBoxWidth, 400) + 'px');
			var options = this.$popupVM.options;
			if (ss.isValue(options.maxPopupHeight) && dropdownFullHeight > ss.unbox(options.maxPopupHeight)) {
				dropdownList.css('overflow-y', 'scroll');
			}
		},
		removeList: function CompositeSearchWidget$RemoveList() {
			if (ss.isValue(this.$popupVM)) {
				this.$popupVM.hide(false);
			}
			else {
				this.handleRemoveList();
			}
		},
		handleRemoveList: function CompositeSearchWidget$HandleRemoveList() {
			if (ss.isValue(this.get_listViewModel())) {
				this.get_listViewModel().dispose();
				this.set_listViewModel(null);
			}
		},
		$clearButtonClicked: function CompositeSearchWidget$ClearButtonClicked() {
			this.get_textInputView().get_inputElement().focus();
			this.get_textInputView().set_text('');
			if (!ss.staticEquals(this.$2$TextInputClearButtonClickedField, null)) {
				this.$2$TextInputClearButtonClickedField();
			}
		},
		$searchButtonClicked: function CompositeSearchWidget$SearchButtonClicked() {
			if (!ss.staticEquals(this.$2$TextInputSearchButtonClickedField, null)) {
				this.$2$TextInputSearchButtonClickedField();
			}
		},
		setSearchText: function CompositeSearchWidget$SetSearchText(newText) {
			this.$currentlySettingSearchText = true;
			this.get_textInputView().set_text(newText);
			this.$currentlySettingSearchText = false;
		},
		$handleInputTextChange: function CompositeSearchWidget$HandleInputTextChange(sender, args) {
			if (!ss.staticEquals(this.$2$InputTextChangedField, null) && !this.$currentlySettingSearchText) {
				this.$2$InputTextChangedField(this.get_textInputView().get_text());
			}
		},
		$onInputElementClick: function CompositeSearchWidget$OnInputElementClick(e) {
			this.get_textInputView().get_inputElement().get(0).focus();
			if (!ss.staticEquals(this.$2$TextInputElementClickedField, null)) {
				this.$2$TextInputElementClickedField();
			}
		}
	}, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_CompositeSearchWidgetInitialSearchTextInfo, $asm, {});
	ss.initInterface($spiff_ICompositeSearchWidgetTemplate, $asm, { get_template: null, get_domRootElement: null, get_textInputView: null, get_searchButton: null, get_clearButton: null, disposeTemplate: null });
	ss.initClass($spiff_CompositeSearchWidgetTemplate, $asm, {
		get_domRootElement: function CompositeSearchWidgetTemplate$get_DomRootElement() {
			return this.domRoot;
		},
		get_template: function CompositeSearchWidgetTemplate$get_Template() {
			return this;
		},
		get_textInputView: function CompositeSearchWidgetTemplate$get_TextInputView() {
			return this.searchTextInputView;
		},
		get_searchButton: function CompositeSearchWidgetTemplate$get_SearchButton() {
			return this.$searchButton;
		},
		get_clearButton: function CompositeSearchWidgetTemplate$get_ClearButton() {
			return this.$clearButton;
		},
		disposeTemplate: function CompositeSearchWidgetTemplate$DisposeTemplate() {
			this.dispose();
		}
	}, $spiff_Template, [ss.IDisposable, $spiff_ICompositeSearchWidgetTemplate]);
	ss.initClass($spiff_CustomComboBoxItem, $asm, {
		get_domRoot: function CustomComboBoxItem$get_DomRoot() {
			return this.$domRoot;
		},
		asMenuItem: function CustomComboBoxItem$AsMenuItem() {
			return $spiff_CustomMenuItem.newCustomMenuItem(this.get_domRoot());
		}
	}, $spiff_ComboBoxItem);
	ss.initClass($spiff_CustomCursor, $asm, {
		setCursor: function CustomCursor$SetCursor(element) {
			element.css('cursor', this.$cssString);
		}
	});
	ss.initClass($spiff_IScrollTemplate, $asm, {}, $spiff_Template, [ss.IDisposable]);
	ss.initClass($spiff_CustomIScrollTemplate, $asm, {}, $spiff_IScrollTemplate, [ss.IDisposable]);
	ss.initClass($spiff_ScrollableView, $asm, { get_scrollbarBuffer: null, get_scrollerX: null, get_scrollerY: null, scrollTo: null, scrollToElement: null }, ss.makeGenericType($spiff_BaseView$1, [$spiff_ScrollableViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$spiff_ScrollableViewModel])]);
	ss.initClass($spiff_IScrollView, $asm, {
		get_scrollerX: function IScrollView$get_ScrollerX() {
			return (ss.isNullOrUndefined(this.scroller) ? 0 : -this.scroller.x);
		},
		get_scrollerY: function IScrollView$get_ScrollerY() {
			return (ss.isNullOrUndefined(this.scroller) ? 0 : -this.scroller.y);
		},
		get_dom: function IScrollView$get_Dom() {
			return ss.cast(this.get_template(), $spiff_IScrollTemplate);
		},
		get_scrollableViewModel: function IScrollView$get_ScrollableViewModel() {
			return this.get_viewModel();
		},
		get_scrollbarBuffer: null,
		get_verticalScrollbar: null,
		get_horizontalScrollbar: null,
		addScroller: function IScrollView$AddScroller() {
			this.createScroller();
			this.postCreationScrollerSetup();
			this.get_dom().scroll.toggleClass('tabScrollerCanScrollX', this.get_scrollableViewModel().get_scrollX());
			this.get_dom().scroll.toggleClass('tabScrollerCanScrollY', this.get_scrollableViewModel().get_scrollY());
		},
		createScroller: null,
		postCreationScrollerSetup: function IScrollView$PostCreationScrollerSetup() {
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.scroller.destroy();
			})));
			this.scroller.on('scrollStart', ss.mkdel(this, this.$scrollStart));
			this.scroller.on('scrollEnd', ss.mkdel(this, this.$scrollEnd));
			this.get_dom().scroll.addClass('tabScrollerIScroll');
			this.disposables.add$1($spiff_ClickHandler.targetAndClick(this.get_verticalScrollbar(), function(e) {
				e.stopPropagation();
			}));
			this.disposables.add$1($spiff_ClickHandler.targetAndClick(this.get_horizontalScrollbar(), function(e1) {
				e1.stopPropagation();
			}));
			this.get_dom().domRoot.on(BrowserSupport.BrowserSupport.MouseWheelEvent(), function(e2) {
				e2.stopPropagation();
			});
		},
		setUpEvents: function IScrollView$SetUpEvents() {
			this.get_scrollableViewModel().add_contentChanged(ss.mkdel(this, this.$handleContentChanged));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.get_scrollableViewModel().remove_contentChanged(ss.mkdel(this, this.$handleContentChanged));
			})));
			this.get_scrollableViewModel().add_refresh(ss.mkdel(this, this.handleRefresh));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.get_scrollableViewModel().remove_refresh(ss.mkdel(this, this.handleRefresh));
			})));
		},
		onAddedToDom: function IScrollView$OnAddedToDom() {
			$spiff_Widget.prototype.onAddedToDom.call(this);
			this.addNewContent();
		},
		$handleContentChanged: function IScrollView$HandleContentChanged() {
			this.get_dom().content.empty();
			this.addNewContent();
		},
		addNewContent: null,
		handleRefresh: function IScrollView$HandleRefresh() {
			if (this.get_viewModel().get_hasScrollBars()) {
				this.scroller.refresh();
				this.$hideUnneededScrollers();
			}
			else {
				this.get_verticalScrollbar().addClass('noScroll');
				this.get_horizontalScrollbar().addClass('noScroll');
			}
		},
		$hideUnneededScrollers: function IScrollView$HideUnneededScrollers() {
			this.get_verticalScrollbar().removeClass('noScroll');
			if (!this.scroller.hasVerticalScroll) {
				this.get_verticalScrollbar().addClass('noScroll');
			}
			this.get_horizontalScrollbar().removeClass('noScroll');
			if (!this.scroller.hasHorizontalScroll) {
				this.get_horizontalScrollbar().addClass('noScroll');
			}
		},
		$scrollStart: function IScrollView$ScrollStart() {
			if (tsConfig.is_mobile && (this.scroller.directionX === 0 || !this.scroller.hasHorizontalScroll) && (this.scroller.directionY === 0 || !this.scroller.hasVerticalScroll)) {
				return;
			}
			if (BrowserSupport.BrowserSupport.MouseCapture()) {
				tab.Log.get(this).debug('Start scroll, browser supports setCapture', []);
				tab.DomUtil.setCapture(this.get_dom().scroll[0], true);
				this.scrollEndCleanup.add$1(new tab.CallOnDispose(function() {
					tab.DomUtil.releaseCapture();
				}));
			}
			else if (BrowserSupport.BrowserSupport.AddEventListener() && !tsConfig.is_mobile) {
				tab.Log.get(this).debug('Start scroll, using capture phase', []);
				var handleEvent = ss.mkdel(this, function(e) {
					this.sendEventToScroller(e);
				});
				var handleMouseOut = ss.mkdel(this, function(e1) {
					var toElement = ss.cast(e1.toElement, HTMLElement);
					if (ss.isNullOrUndefined(toElement) || toElement.nodeName === 'HTML') {
						tab.Log.get(this).debug('Exiting document, stop scrolling', []);
						if ('createEvent' in document) {
							var mouseEvent = document.createEvent('MouseEvent');
							mouseEvent.initEvent('mouseup', false, false);
							this.sendEventToScroller(mouseEvent);
						}
					}
				});
				document.addEventListener('mousemove', handleEvent, true);
				document.addEventListener('mouseup', handleEvent, true);
				document.addEventListener('mouseout', handleMouseOut, true);
				this.scrollEndCleanup.add$1(new tab.CallOnDispose(function() {
					document.removeEventListener('mousemove', handleEvent, true);
					document.removeEventListener('mouseup', handleEvent, true);
					document.removeEventListener('mouseout', handleMouseOut, true);
				}));
			}
			this.get_dom().scroll.addClass('tabScrolling');
		},
		sendEventToScroller: function IScrollView$SendEventToScroller(e) {
			this.scroller.handleEvent(e);
			for (var $t1 = 0; $t1 < this.scroller.indicators.length; $t1++) {
				var indicator = this.scroller.indicators[$t1];
				if (!ss.referenceEquals(e.type, 'mousemove'.toString()) || indicator.moved) {
					indicator.handleEvent(e);
				}
			}
		},
		$scrollEnd: function IScrollView$ScrollEnd() {
			tab.Log.get(this).debug('ScrollEnd', []);
			this.scrollEndCleanup.dispose();
			this.get_dom().scroll.removeClass('tabScrolling');
		},
		scrollTo: function IScrollView$ScrollTo(x, y, time, easing) {
			this.scroller.scrollTo(-x, -y, time, easing);
		},
		scrollToElement: function IScrollView$ScrollToElement(elem, time, xOffset, yOffset) {
			this.scroller.scrollToElement(elem, time, xOffset, yOffset);
		}
	}, $spiff_ScrollableView, [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$spiff_ScrollableViewModel])]);
	ss.initClass($spiff_CustomIScrollView, $asm, {
		get_scrollbarBuffer: function CustomIScrollView$get_ScrollbarBuffer() {
			return 0;
		},
		get_customDom: function CustomIScrollView$get_CustomDom() {
			return ss.cast(this.get_template(), $spiff_CustomIScrollTemplate);
		},
		get_verticalScrollbar: function CustomIScrollView$get_VerticalScrollbar() {
			return this.get_customDom().verticalScrollbar;
		},
		get_horizontalScrollbar: function CustomIScrollView$get_HorizontalScrollbar() {
			return this.get_customDom().horizontalScrollbar;
		},
		$addScrollbarToIScrollOptions: function CustomIScrollView$AddScrollbarToIScrollOptions() {
			this.get_scrollableViewModel().get_indicatorOptions().resize = false;
			this.get_scrollableViewModel().add_refresh(ss.mkdel(this, this.$resizeScrollBarIndicatorIndicator));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.get_scrollableViewModel().remove_refresh(ss.mkdel(this, this.$resizeScrollBarIndicatorIndicator));
			})));
			if (!tsConfig.is_mobile) {
				this.get_scrollableViewModel().get_indicatorOptions().interactive = true;
			}
			if (this.get_scrollableViewModel().get_scrollY()) {
				this.get_scrollableViewModel().get_indicatorOptions().el = this.get_verticalScrollbar()[0];
			}
			else if (this.get_scrollableViewModel().get_scrollX()) {
				this.get_scrollableViewModel().get_indicatorOptions().el = this.get_horizontalScrollbar()[0];
			}
		},
		$formatControls: function CustomIScrollView$FormatControls() {
			if (this.get_scrollableViewModel().isCenteredVertically) {
				this.get_customDom().contentWindow.addClass($spiff_CustomIScrollView.centeredVerticallyClassName);
			}
			if (this.get_scrollableViewModel().get_hasScrollBars()) {
				this.get_customDom().contentWindow.addClass($spiff_CustomIScrollView.scrollableClassName);
			}
		},
		createScroller: function CustomIScrollView$CreateScroller() {
			this.scroller = new IScroll(this.get_customDom().contentWindow[0], this.get_scrollableViewModel().get_options());
		},
		$listenToTopLevelEvents: function CustomIScrollView$ListenToTopLevelEvents() {
			if (BrowserSupport.BrowserSupport.AddEventListener()) {
				var handleEvent = ss.mkdel(this, function(e) {
					this.sendEventToScroller(e);
				});
				if (!tsConfig.is_mobile) {
					this.get_template().domRoot[0].addEventListener(BrowserSupport.BrowserSupport.MouseWheelEvent(), handleEvent, false);
					this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
						this.get_template().domRoot[0].removeEventListener(BrowserSupport.BrowserSupport.MouseWheelEvent(), handleEvent, false);
					})));
				}
			}
		},
		addNewContent: function CustomIScrollView$AddNewContent() {
			this.get_dom().content.append(this.get_scrollableViewModel().get_content());
			this.$resizeScrollBarIndicatorIndicator();
			this.handleRefresh();
		},
		$resizeScrollBarIndicatorIndicator: function CustomIScrollView$ResizeScrollBarIndicatorIndicator() {
			if (this.get_scrollableViewModel().get_scrollY()) {
				this.get_customDom().verticalScrollbarIndicator.height($spiff_CustomIScrollView.$indicatorSize(tab.DoubleUtil.roundToInt(this.get_customDom().verticalScrollbar.height()), tab.DoubleUtil.roundToInt(this.get_customDom().contentWindow.height()), tab.DoubleUtil.roundToInt(this.get_customDom().content.height())) + 'px');
			}
			else if (this.get_scrollableViewModel().get_scrollX()) {
				this.get_customDom().horizontalScrollbarIndicator.width($spiff_CustomIScrollView.$indicatorSize(tab.DoubleUtil.roundToInt(this.get_customDom().horizontalScrollbar.width()), tab.DoubleUtil.roundToInt(this.get_customDom().contentWindow.width()), tab.DoubleUtil.roundToInt(this.get_customDom().content.width())) + 'px');
			}
		}
	}, $spiff_IScrollView, [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$spiff_ScrollableViewModel])]);
	ss.initClass($spiff_MenuItem, $asm, {
		get_selectable: function MenuItem$get_Selectable() {
			return this.enabled && !this.isDivider;
		}
	});
	ss.initClass($spiff_CustomMenuItem, $asm, {
		get_domRoot: function CustomMenuItem$get_DomRoot() {
			return this.$domRoot;
		},
		set_domRoot: function CustomMenuItem$set_DomRoot(value) {
			this.$domRoot = value;
		}
	}, $spiff_MenuItem);
	ss.initClass($spiff_DefaultIScrollTemplate, $asm, {}, $spiff_IScrollTemplate, [ss.IDisposable]);
	ss.initClass($spiff_DefaultIScrollView, $asm, {
		get_scrollbarSize: function DefaultIScrollView$get_ScrollbarSize() {
			return $spiff_DefaultIScrollView.$iScrollScrollbarSize;
		},
		get_scrollbarBuffer: function DefaultIScrollView$get_ScrollbarBuffer() {
			return 10;
		},
		get_verticalScrollbar: function DefaultIScrollView$get_VerticalScrollbar() {
			return this.$verticalScrollbarObject;
		},
		get_horizontalScrollbar: function DefaultIScrollView$get_HorizontalScrollbar() {
			return this.$horizontalScrollbarObject;
		},
		createScroller: function DefaultIScrollView$CreateScroller() {
			this.scroller = new IScroll(this.get_dom().scroll[0], this.get_scrollableViewModel().get_options());
			if (this.get_scrollableViewModel().get_scrollY()) {
				this.get_dom().content.css('margin-right', this.get_scrollbarBuffer() + 'px');
			}
			if (this.get_scrollableViewModel().get_scrollX()) {
				this.get_dom().content.css('margin-bottom', this.get_scrollbarBuffer() + 'px');
			}
			this.$verticalScrollbarObject = this.get_dom().scroll.find('.iScrollVerticalScrollbar').css('width', this.get_scrollbarSize() + 'px');
			this.$horizontalScrollbarObject = this.get_dom().scroll.find('.iScrollHorizontalScrollbar').css('height', this.get_scrollbarSize() + 'px');
		},
		addNewContent: function DefaultIScrollView$AddNewContent() {
			this.get_dom().content.append(this.get_scrollableViewModel().get_content());
			this.handleRefresh();
		}
	}, $spiff_IScrollView, [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$spiff_ScrollableViewModel])]);
	ss.initClass($spiff_Dialog, $asm, {
		add_closing: function Dialog$add_Closing(value) {
			this.$2$ClosingField = ss.delegateCombine(this.$2$ClosingField, value);
		},
		remove_closing: function Dialog$remove_Closing(value) {
			this.$2$ClosingField = ss.delegateRemove(this.$2$ClosingField, value);
		},
		add_closed: function Dialog$add_Closed(value) {
			this.$2$ClosedField = ss.delegateCombine(this.$2$ClosedField, value);
		},
		remove_closed: function Dialog$remove_Closed(value) {
			this.$2$ClosedField = ss.delegateRemove(this.$2$ClosedField, value);
		},
		add_resizeMove: function Dialog$add_ResizeMove(value) {
			this.$2$ResizeMoveField = ss.delegateCombine(this.$2$ResizeMoveField, value);
		},
		remove_resizeMove: function Dialog$remove_ResizeMove(value) {
			this.$2$ResizeMoveField = ss.delegateRemove(this.$2$ResizeMoveField, value);
		},
		add_resizeEnd: function Dialog$add_ResizeEnd(value) {
			this.$2$ResizeEndField = ss.delegateCombine(this.$2$ResizeEndField, value);
		},
		remove_resizeEnd: function Dialog$remove_ResizeEnd(value) {
			this.$2$ResizeEndField = ss.delegateRemove(this.$2$ResizeEndField, value);
		},
		get_body: function Dialog$get_Body() {
			return this.$bodyElement;
		},
		set_body: function Dialog$set_Body(value) {
			if (ss.referenceEquals(this.$bodyElement, value)) {
				return;
			}
			if (ss.isValue(this.$bodyElement)) {
				this.$bodyElement.off(this.get_eventNamespace());
			}
			this.$bodyElement = value;
			this.element.find($spiff_Dialog.$bodyContainerSelector).html('').append(value);
			this.setInitialFocus();
		},
		get_bodyHeight: function Dialog$get_BodyHeight() {
			return tab.DoubleUtil.roundToInt(this.$dialogElement.height());
		},
		get_position: function Dialog$get_Position() {
			return { x: this.$positionX, y: this.$positionY };
		},
		set_position: function Dialog$set_Position(value) {
			if (this.get_maximized()) {
				return;
			}
			if (ss.isNullOrUndefined(value)) {
				this.positionInWindow();
			}
			else {
				this.$positionX = value.x;
				this.$positionY = value.y;
				tab.DomUtil.setElementPosition(this.$dialogElement, this.$positionX, this.$positionY, null, false);
				this.$dialogElement.css('position', 'fixed');
			}
			this.raisePropertyChanged($spiff_Dialog.positionProperty);
		},
		get_isActive: function Dialog$get_IsActive() {
			return this.$isActive;
		},
		set_isActive: function Dialog$set_IsActive(value) {
			if (value !== this.$isActive) {
				this.$isActive = value;
				this.$dialogElement.toggleClass($spiff_Dialog.$activeClass, value);
				this.raisePropertyChanged($spiff_Dialog.isActiveProperty);
			}
		},
		get_draggable: function Dialog$get_Draggable() {
			return !this.get_maximized() && ss.isValue(this.$moveDragSource);
		},
		get_resizeable: function Dialog$get_Resizeable() {
			return !this.get_maximized() && ss.isValue(this.$resizeDragSource);
		},
		set_resizeable: function Dialog$set_Resizeable(value) {
			if (this.get_maximized()) {
				return;
			}
			if (value) {
				if (ss.isNullOrUndefined(this.$resizeDragSource)) {
					this.$resizeDragSource = new $spiff_ResizeDragSource(this.$resizerElement, this.$dialogElement, 'bottomRight');
					this.$resizeDragSource.add_endAction(ss.mkdel(this, this.$resizeDragSourceOnEndAction));
					this.$resizeDragSource.add_moveAction(ss.mkdel(this, this.$resizeDragSourceOnMoveAction));
				}
				this.$dialogElement.addClass('resizeable');
			}
			else {
				if (ss.isValue(this.$resizeDragSource)) {
					this.$resizeDragSource.remove_endAction(ss.mkdel(this, this.$resizeDragSourceOnEndAction));
					this.$resizeDragSource.remove_moveAction(ss.mkdel(this, this.$resizeDragSourceOnMoveAction));
					this.$resizeDragSource.dispose();
					this.$resizeDragSource = null;
				}
				this.$dialogElement.removeClass('resizeable');
			}
		},
		get_zIndex: function Dialog$get_ZIndex() {
			return tab.DomUtil.getComputedZIndex(this.element[0]);
		},
		set_zIndex: function Dialog$set_ZIndex(value) {
			this.element.css('z-index', value.toString());
		},
		get_maximized: function Dialog$get_Maximized() {
			return this.$maximized;
		},
		set_maximized: function Dialog$set_Maximized(value) {
			this.$maximized = value;
			this.$dialogElement.toggleClass('maximized', value);
		},
		get_startingPositionX: function Dialog$get_StartingPositionX() {
			return this.$2$StartingPositionXField;
		},
		set_startingPositionX: function Dialog$set_StartingPositionX(value) {
			this.$2$StartingPositionXField = value;
		},
		get_startingPositionY: function Dialog$get_StartingPositionY() {
			return this.$2$StartingPositionYField;
		},
		set_startingPositionY: function Dialog$set_StartingPositionY(value) {
			this.$2$StartingPositionYField = value;
		},
		get_titleUnescaped: function Dialog$get_TitleUnescaped() {
			return this.get_titleElement().text();
		},
		set_titleUnescaped: function Dialog$set_TitleUnescaped(value) {
			this.get_titleElement().text(value);
			if (this.showTitleTooltip) {
				this.get_titleElement().attr('title', this.get_titleElement().text());
			}
		},
		get_isShown: function Dialog$get_IsShown() {
			return this.$isShown;
		},
		get_setFocusOnShow: function Dialog$get_SetFocusOnShow() {
			return this.$setFocusOnShow;
		},
		set_setFocusOnShow: function Dialog$set_SetFocusOnShow(value) {
			this.$setFocusOnShow = value;
		},
		get_closeButton: function Dialog$get_CloseButton() {
			return this.$closeButton;
		},
		get_closeButtonVisible: function Dialog$get_CloseButtonVisible() {
			return this.element.find($spiff_Dialog.$closeButtonSelector).is(':visible');
		},
		set_closeButtonVisible: function Dialog$set_CloseButtonVisible(value) {
			if (value) {
				this.element.find($spiff_Dialog.$closeButtonSelector).show();
			}
			else {
				this.element.find($spiff_Dialog.$closeButtonSelector).hide();
			}
		},
		get_stayInWindow: function Dialog$get_StayInWindow() {
			return this.$stayInWindow;
		},
		set_stayInWindow: function Dialog$set_StayInWindow(value) {
			if (value && !this.$stayInWindow) {
				this.$addStayInWindowHandlers();
			}
			else if (!value) {
				this.$removeStayInWindowHandlers();
			}
			this.$stayInWindow = value;
		},
		get_useClosingAnimation: function Dialog$get_UseClosingAnimation() {
			return this.$useClosingAnimation;
		},
		set_useClosingAnimation: function Dialog$set_UseClosingAnimation(value) {
			this.$useClosingAnimation = value;
		},
		get_dialogElement: function Dialog$get_DialogElement() {
			return this.$dialogElement;
		},
		get_titleBarElement: function Dialog$get_TitleBarElement() {
			return this.$titleBarElement;
		},
		get_titleElement: function Dialog$get_TitleElement() {
			return this.element.find($spiff_Dialog.$titleSelector);
		},
		get_resizerElement: function Dialog$get_ResizerElement() {
			return this.$resizerElement;
		},
		configMoveDragSource: function Dialog$ConfigMoveDragSource(factory) {
			if (ss.isValue(this.$moveDragSource)) {
				throw new ss.Exception('dialog can only be configured once.');
			}
			this.$moveDragSource = factory(this);
			if (ss.isValue(this.$moveDragSource)) {
				this.$moveDragSource.add_endAction(ss.mkdel(this, this.$onMoveEnd));
				this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
					this.$moveDragSource.remove_endAction(ss.mkdel(this, this.$onMoveEnd));
					this.$moveDragSource.dispose();
				})));
			}
		},
		showSpinner: function Dialog$ShowSpinner() {
			this.$spinnerContainerElement.show();
		},
		hideSpinner: function Dialog$HideSpinner() {
			this.$spinnerContainerElement.hide();
		},
		show: function Dialog$Show() {
			this.ensureAttachedAndSized();
			this.element.show();
			this.$isShown = true;
			this.moveToTop();
			if (this.get_setFocusOnShow()) {
				this.setInitialFocus();
			}
			this.set_isActive(true);
		},
		close: function Dialog$Close(callbackWhenClosed) {
			this.$resetMouseState();
			if (!this.get_isShown()) {
				if (!ss.staticEquals(callbackWhenClosed, null)) {
					callbackWhenClosed();
				}
				return;
			}
			var cancelEventArgs = new ss.CancelEventArgs();
			this.onClosing(cancelEventArgs);
			if (cancelEventArgs.cancel) {
				return;
			}
			tab.DomUtil.blur();
			this.$afterCloseCallback = callbackWhenClosed;
			if (this.get_useClosingAnimation()) {
				this.element.fadeOut('fast', ss.mkdel(this, this.$afterCloseAction));
			}
			else {
				this.element.hide();
				this.$afterCloseAction();
			}
		},
		closeAndDispose: function Dialog$CloseAndDispose() {
			this.close(ss.mkdel(this, this.dispose));
		},
		$afterCloseAction: function Dialog$AfterCloseAction() {
			this.detach();
			if (!ss.staticEquals(this.$afterCloseCallback, null)) {
				this.$afterCloseCallback();
				this.$afterCloseCallback = null;
			}
			this.onClosed(new ss.EventArgs());
		},
		onClosing: function Dialog$OnClosing(e) {
			if (!ss.staticEquals(this.$2$ClosingField, null)) {
				this.$2$ClosingField(this, e);
			}
		},
		onClosed: function Dialog$OnClosed(e) {
			if (!ss.staticEquals(this.$2$ClosedField, null)) {
				this.$2$ClosedField(this, e);
			}
		},
		isAttached: function Dialog$IsAttached() {
			return ss.referenceEquals(this.element.parent().get(0), document.body);
		},
		ensureAttachedAndSized: function Dialog$EnsureAttachedAndSized() {
			if (!this.isAttached()) {
				this.element.appendTo(document.body);
				this.bindToEvents();
			}
			this.positionInWindow();
		},
		bindToEvents: function Dialog$BindToEvents() {
			this.element.on(this.createNamespacedEventName('keydown'), ss.mkdel(this, this.onKeyDown));
		},
		$resetMouseState: function Dialog$ResetMouseState() {
			this.$mouseDownOnMe = false;
			this.$sawMouseDown = false;
		},
		$handleGlobalFirstTouch: function Dialog$HandleGlobalFirstTouch(e, cancelCallback) {
			if (!this.$isShown) {
				return;
			}
			this.$resetMouseState();
			this.$sawMouseDown = true;
			if (ss.isValue(e) && !tab.DomUtil.isEqualOrAncestorOf(this.get_closeButton().element[0], e.target) && tab.DomUtil.isEqualOrAncestorOf(this.element[0], e.target)) {
				this.moveToTop();
				this.$mouseDownOnMe = true;
			}
		},
		$handleGlobalLastTouch: function Dialog$HandleGlobalLastTouch(e, cancelCallback) {
			if (!this.$isShown || !this.$sawMouseDown) {
				return;
			}
			if (this.$mouseDownOnMe && tab.DomUtil.isEqualOrAncestorOf(this.element.get(0), e.target) || ss.isNullOrUndefined(e)) {
				if (!this.get_isActive()) {
					this.set_isActive(true);
				}
			}
			else {
				if ($('body').children('.tab-glass').length !== 0) {
					this.$resetMouseState();
					return;
				}
				this.set_isActive(false);
			}
		},
		unbindEvents: function Dialog$UnbindEvents() {
			this.element.off(this.get_eventNamespace());
		},
		$addStayInWindowHandlers: function Dialog$AddStayInWindowHandlers() {
			$spiff_OrientationHandler.add_orientationChanged(ss.mkdel(this, this.ensureOnScreen));
			$(window).on(this.createNamespacedEventName('resize'), ss.mkdel(this, function() {
				this.ensureOnScreen();
			}));
		},
		$removeStayInWindowHandlers: function Dialog$RemoveStayInWindowHandlers() {
			$spiff_OrientationHandler.remove_orientationChanged(ss.mkdel(this, this.ensureOnScreen));
			$(window).off(this.createNamespacedEventName('resize'));
		},
		detach: function Dialog$Detach() {
			this.$isShown = false;
			this.element.hide();
			this.element.detach();
			this.unbindEvents();
			if (ss.referenceEquals($spiff_Dialog.$topDialog, this)) {
				$spiff_Dialog.$topDialog = null;
			}
		},
		dispose: function Dialog$Dispose() {
			if (ss.isValue(this.$closeButton)) {
				this.$closeButton.remove_click(ss.mkdel(this, this.$onCloseButtonClick));
				this.$closeButton.dispose();
				this.$closeButton = null;
			}
			if (ss.isValue(this.$resizeDragSource)) {
				this.$resizeDragSource.remove_endAction(ss.mkdel(this, this.$resizeDragSourceOnEndAction));
				this.$resizeDragSource.remove_moveAction(ss.mkdel(this, this.$resizeDragSourceOnMoveAction));
				this.$resizeDragSource.dispose();
				this.$resizeDragSource = null;
			}
			this.$removeStayInWindowHandlers();
			this.$isShown = false;
			this.$2$ClosedField = null;
			this.$2$ClosingField = null;
			this.unbindEvents();
			$spiff_Widget.prototype.dispose.call(this);
			if (ss.referenceEquals($spiff_Dialog.$topDialog, this)) {
				$spiff_Dialog.$topDialog = null;
			}
		},
		setInitialFocus: function Dialog$SetInitialFocus() {
			if (this.$isShown) {
				var contentTabbableItems = this.element.find('.tab-dialogBodyContainer :tabbable');
				if (contentTabbableItems.length > 0) {
					contentTabbableItems.eq(0).focus();
				}
				else {
					this.$dialogElement.eq(0).focus();
				}
			}
		},
		ensureOnScreen: function Dialog$EnsureOnScreen() {
			if (!this.get_isShown() || this.get_maximized()) {
				return;
			}
			$spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, function(v) {
				if (ss.isNullOrUndefined(v) || ss.isNullOrUndefined(v.get_dimensions())) {
					tab.Log.get(this).warn('Bad viewport given to Dialog', []);
					return;
				}
				var width = tab.DoubleUtil.roundToInt(this.$dialogElement.outerWidth(true));
				var height = tab.DoubleUtil.roundToInt(this.$dialogElement.outerHeight(true));
				if (this.get_resizeable()) {
					if (width > v.get_dimensions().w) {
						var innerWidth = tab.DoubleUtil.roundToInt(this.$dialogElement.width());
						this.$dialogElement.width(v.get_dimensions().w - (width - innerWidth));
						width = v.get_dimensions().w;
					}
					if (height > v.get_dimensions().h) {
						var innerHeight = tab.DoubleUtil.roundToInt(this.$dialogElement.height());
						this.$dialogElement.height(v.get_dimensions().h - (height - innerHeight));
						height = v.get_dimensions().h;
					}
				}
				var newX = null;
				if (this.$positionX + width > v.get_dimensions().w) {
					newX = Math.max(0, v.get_dimensions().w - width);
				}
				var newY = null;
				if (this.$positionY + height > v.get_dimensions().h) {
					newY = Math.max(0, v.get_dimensions().h - height);
				}
				if (ss.isValue(newX) || ss.isValue(newY)) {
					var $t1 = newX;
					if (ss.isNullOrUndefined($t1)) {
						$t1 = this.$positionX;
					}
					newX = $t1;
					var $t2 = newY;
					if (ss.isNullOrUndefined($t2)) {
						$t2 = this.$positionY;
					}
					newY = $t2;
					tab.Log.get(this).debug('Moving dialog to be in view: newPos:{%s, %s}', [newX, newY]);
					this.set_position({ x: ss.unbox(newX), y: ss.unbox(newY) });
				}
			}));
		},
		positionInWindow: function Dialog$PositionInWindow() {
			this.positionInWindow$1(0, 0);
		},
		positionInWindow$1: function Dialog$PositionInWindow(xBuffer, yBuffer) {
			if (this.get_maximized()) {
				return;
			}
			$spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, function(viewport) {
				var newPositionX = 0;
				var newPositionY = 0;
				var dialogWidth = tab.DoubleUtil.roundToInt(this.$dialogElement.outerWidth(true)) + xBuffer;
				var dialogHeight = tab.DoubleUtil.roundToInt(this.$dialogElement.outerHeight(true)) + yBuffer;
				var windowWidth = tab.DoubleUtil.roundToInt($(window).width());
				var windowHeight = tab.DoubleUtil.roundToInt($(window).height());
				var leftOffset = 0;
				var topOffset = 0;
				if (ss.isValue(viewport.get_dimensions())) {
					windowWidth = viewport.get_dimensions().w;
					windowHeight = viewport.get_dimensions().h;
					var h = new tab.WindowHelper(window.self);
					leftOffset = viewport.get_dimensions().l - h.get_pageXOffset();
					topOffset = viewport.get_dimensions().t - h.get_pageYOffset();
				}
				if (ss.isValue(this.get_startingPositionX())) {
					var right = Math.min(ss.unbox(this.get_startingPositionX()) + dialogWidth, windowWidth);
					newPositionX = Math.max(0, right - dialogWidth);
				}
				else {
					newPositionX = Math.max(0, Math.round((windowWidth - dialogWidth) / 2) + leftOffset);
				}
				if (ss.isValue(this.get_startingPositionY())) {
					var bottom = Math.min(ss.unbox(this.get_startingPositionY()) + dialogHeight, windowHeight);
					newPositionY = Math.max(0, bottom - dialogHeight);
				}
				else {
					newPositionY = Math.max(0, Math.round((windowHeight - dialogHeight) / 2) + topOffset);
				}
				this.set_position({ x: newPositionX, y: newPositionY });
			}));
		},
		moveToTop: function Dialog$MoveToTop() {
			if (!this.$isShown) {
				return;
			}
			this.set_isActive(true);
			if (ss.isNullOrUndefined($spiff_Dialog.$topDialog)) {
				$spiff_Dialog.$topDialog = this;
			}
			else if (!ss.referenceEquals($spiff_Dialog.$topDialog, this)) {
				$spiff_Dialog.$topDialog.set_isActive(false);
				$spiff_Dialog.$topDialog = this;
				this.element.appendTo(document.body);
				tab.DomUtil.blur();
			}
		},
		$resizeDragSourceOnEndAction: function Dialog$ResizeDragSourceOnEndAction(arg) {
			if (!ss.staticEquals(this.$2$ResizeEndField, null)) {
				this.$2$ResizeEndField();
			}
			this.set_isActive(true);
			this.$resetMouseState();
		},
		$resizeDragSourceOnMoveAction: function Dialog$ResizeDragSourceOnMoveAction(arg) {
			if (!ss.staticEquals(this.$2$ResizeMoveField, null)) {
				this.$2$ResizeMoveField();
			}
		},
		$onMoveEnd: function Dialog$OnMoveEnd(e) {
			this.set_position(tab.PointUtil.fromPosition(this.$dialogElement.position()));
			this.set_isActive(true);
			this.$resetMouseState();
		},
		$onCloseButtonClick: function Dialog$OnCloseButtonClick() {
			this.close(null);
		},
		onKeyDown: function Dialog$OnKeyDown(e) {
			if (e.which === 9) {
				this.$handleTabKey(e);
				return;
			}
		},
		$handleTabKey: function Dialog$HandleTabKey(e) {
			var tabbables = this.element.find(':tabbable');
			var first = tabbables.filter(':first');
			var last = tabbables.filter(':last');
			if (ss.referenceEquals(e.target, first[0]) && e.shiftKey) {
				last.focusDelayed(1);
				$spiff_EventUtil.stopEvent$2(e);
			}
			else if (ss.referenceEquals(e.target, last[0]) && !e.shiftKey) {
				first.focusDelayed(1);
				$spiff_EventUtil.stopEvent$2(e);
			}
		}
	}, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_DividerComboBoxItem, $asm, {
		asMenuItem: function DividerComboBoxItem$AsMenuItem() {
			return $spiff_MenuItem.newDivider();
		}
	}, $spiff_ComboBoxItem);
	ss.initClass($spiff_DockableSideDialog, $asm, {
		get_glass: function DockableSideDialog$get_Glass() {
			return this.$glass;
		},
		ensureAttachedAndSized: function DockableSideDialog$EnsureAttachedAndSized() {
			if (ss.isValue(this.$glass) || this.isAttached()) {
				return;
			}
			if (this.$useGlass) {
				this.$glass = new $spiff_Glass(null, false);
				this.$glass.set_opaque(true);
				this.$glass.show();
				this.element.css('z-index', (this.$glass.get_zIndex() + 1).toString());
			}
			$spiff_Dialog.prototype.ensureAttachedAndSized.call(this);
		},
		bindToEvents: function DockableSideDialog$BindToEvents() {
			$spiff_Dialog.prototype.bindToEvents.call(this);
			this.disposables.add$1($spiff_EventUtil.bindWithDispose($(window), 'resize', ss.mkdel(this, this.onWindowResize)));
			this.disposables.add$1($spiff_EventUtil.bindWithDispose($(window), 'keydown', ss.mkdel(this, this.onDocumentKeyDown)));
		},
		detach: function DockableSideDialog$Detach() {
			this.$removeGlass();
			$spiff_Dialog.prototype.detach.call(this);
		},
		dispose: function DockableSideDialog$Dispose() {
			this.$removeGlass();
			if (ss.isValue(this.template)) {
				this.template.dispose();
				this.template = null;
			}
			$spiff_Dialog.prototype.dispose.call(this);
		},
		$removeGlass: function DockableSideDialog$RemoveGlass() {
			if (this.$useGlass && ss.isValue(this.$glass)) {
				this.$glass.dispose();
				this.$glass = null;
			}
		},
		$init: function DockableSideDialog$Init() {
			this.configMoveDragSource($spiff_Dialog.defaultStationaryDialogConfigurer);
			if (tsConfig.is_mobile) {
				this.set_startingPositionY(100);
				this.set_startingPositionX(0);
				this.get_dialogElement().css('height', '50%');
			}
			else {
				this.set_startingPositionX(2000);
				this.set_startingPositionY(this.$verticalSpaceAbove);
				this.get_dialogElement().css('height', '95%');
			}
		},
		onWindowResize: function DockableSideDialog$OnWindowResize(e) {
			this.positionInWindow();
		},
		onDocumentKeyDown: function DockableSideDialog$OnDocumentKeyDown(e) {
			if (e.which === 27) {
				this.close(null);
				e.preventDefault();
				return;
			}
		}
	}, $spiff_Dialog, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initEnum($spiff_DocumentBodySizeUsage, $asm, { useScrollSize: 'useScrollSize', useClientSize: 'useClientSize' }, true);
	ss.initClass($spiff_DOMElements, $asm, {});
	ss.initClass($spiff_Glass, $asm, {
		add_click: function Glass$add_Click(value) {
			this.$2$ClickField = ss.delegateCombine(this.$2$ClickField, value);
		},
		remove_click: function Glass$remove_Click(value) {
			this.$2$ClickField = ss.delegateRemove(this.$2$ClickField, value);
		},
		get_zIndex: function Glass$get_ZIndex() {
			return tab.DomUtil.getComputedZIndex(this.element[0]);
		},
		set_zIndex: function Glass$set_ZIndex(value) {
			this.element.css('z-index', value.toString());
		},
		get_opaque: function Glass$get_Opaque() {
			return this.element.hasClass($spiff_Glass.$opaqueGlassClass);
		},
		set_opaque: function Glass$set_Opaque(value) {
			this.element.toggleClass($spiff_Glass.$clearGlassClass, !value);
			this.element.toggleClass($spiff_Glass.$opaqueGlassClass, value);
		},
		set_preventWebPageScroll: function Glass$set_PreventWebPageScroll(value) {
			if (value) {
				this.element.on(BrowserSupport.BrowserSupport.MouseWheelEvent(), function(e) {
					e.preventDefault();
				});
			}
			else {
				this.element.off(BrowserSupport.BrowserSupport.MouseWheelEvent(), function(e1) {
					e1.preventDefault();
				});
			}
		},
		show: function Glass$Show() {
			if (!ss.referenceEquals(this.element.parent()[0], this.$parentElement)) {
				this.element.appendTo(this.$parentElement);
			}
			if (this.get_opaque()) {
				this.element.toggleClass('glass-fade-in-immediate', true);
			}
			this.element.show();
		},
		hide: function Glass$Hide() {
			this.element.hide();
		},
		setColor: function Glass$SetColor(color) {
			this.element.css('background-color', color);
		},
		dispose: function Glass$Dispose() {
			tab.Log.get(this).debug('Dispose', []);
			this.set_preventWebPageScroll(false);
			if (ss.isValue(this.$clickHandler)) {
				this.$clickHandler.dispose();
				this.$clickHandler = null;
			}
			$spiff_Widget.prototype.dispose.call(this);
		},
		handleClick: function Glass$HandleClick(e) {
			if (ss.isValue(this.$2$ClickField)) {
				this.$2$ClickField();
			}
		}
	}, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_DragSafeGlass, $asm, {
		dispose: function DragSafeGlass$Dispose() {
			EventUtils.DragDropManager.unregisterDragGlass(this);
			$spiff_Glass.prototype.dispose.call(this);
		},
		disableHitTests: function DragSafeGlass$DisableHitTests() {
			this.element.css('pointer-events', 'none');
		},
		enableHitTests: function DragSafeGlass$EnableHitTests() {
			this.element.css('pointer-events', 'auto');
		}
	}, $spiff_Glass, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_DragSortListItemDragAvatar, $asm, {
		get_rootElement: function DragSortListItemDragAvatar$get_RootElement() {
			return this.$element;
		},
		get_viewModel: function DragSortListItemDragAvatar$get_ViewModel() {
			return null;
		},
		dispose: function DragSortListItemDragAvatar$Dispose() {
			this.$element = null;
		},
		addToDom: function DragSortListItemDragAvatar$AddToDom(parent) {
			parent.append(this.get_rootElement());
			this.onAddedToDom();
		},
		onAddedToDom: function DragSortListItemDragAvatar$OnAddedToDom() {
		}
	}, null, [ss.IDisposable, tab.IAppendableView, ss.makeGenericType(tab.IView$1, [tab.IViewModel])]);
	ss.initClass($spiff_DropdownComponent, $asm, {
		componentWillReceiveProps: function DropdownComponent$ComponentWillReceiveProps(nextProps) {
			if (nextProps.resetSelector) {
				this.setState({ isSelecting: false });
			}
		},
		render: function DropdownComponent$Render() {
			var $t1 = new Object();
			$t1.styleClass = this.props.styleClass;
			$t1.isSelecting = this.state.isSelecting;
			$t1.getDesiredHeight = this.props.getDesiredHeight;
			$t1.getMinimumWidth = this.props.getMinimumWidth;
			$t1.children = this.props.children;
			$t1.renderButton = this.props.renderButton;
			$t1.tabIndex = this.props.tabIndex;
			$t1.onSelectorToggled = ss.mkdel(this, this.$toggleSelector);
			$t1.onFocusLost = ss.mkdel(this, this.$onFocusLost);
			return React.createElement($spiff_StatelessDropdownComponent, $t1);
		},
		$toggleSelector: function DropdownComponent$ToggleSelector() {
			this.setState({ isSelecting: !this.state.isSelecting });
		},
		$onFocusLost: function DropdownComponent$OnFocusLost() {
			this.setState({ isSelecting: false });
		}
	}, React.Component);
	ss.initClass($spiff_EditableTextLabelComponent, $asm, {
		handleWidgetPropertyChanged: function EditableTextLabelComponent$HandleWidgetPropertyChanged(sender, propertyChangedEventArgs) {
		},
		updateWidgetState: function EditableTextLabelComponent$UpdateWidgetState(newProps) {
			if (!this.get_widget().get_isEditing()) {
				this.get_widget().set_text(newProps.initialContent);
				this.get_widget().updateTextElement(newProps.initialContent);
				this.get_widget().get_inputElement().val(newProps.initialContent);
				if (!tab.MiscUtil.isNullOrEmpty$3(newProps.tooltip)) {
					this.get_widget().get_textElement().find('.text-span').get(0).title = newProps.tooltip;
					this.get_widget().get_inputElement().attr('title', newProps.tooltip);
				}
			}
		}
	}, ss.makeGenericType($spiff_ReactSpiffAdapter$3, [$spiff_EditableTextView, Object, Object]));
	ss.initClass($spiff_EditableTextView, $asm, {
		add_hoverStateChanged: function EditableTextView$add_HoverStateChanged(value) {
			this.$3$HoverStateChangedField = ss.delegateCombine(this.$3$HoverStateChangedField, value);
		},
		remove_hoverStateChanged: function EditableTextView$remove_HoverStateChanged(value) {
			this.$3$HoverStateChangedField = ss.delegateRemove(this.$3$HoverStateChangedField, value);
		},
		add_editing: function EditableTextView$add_Editing(value) {
			this.$3$EditingField = ss.delegateCombine(this.$3$EditingField, value);
		},
		remove_editing: function EditableTextView$remove_Editing(value) {
			this.$3$EditingField = ss.delegateRemove(this.$3$EditingField, value);
		},
		add_committed: function EditableTextView$add_Committed(value) {
			this.$3$CommittedField = ss.delegateCombine(this.$3$CommittedField, value);
		},
		remove_committed: function EditableTextView$remove_Committed(value) {
			this.$3$CommittedField = ss.delegateRemove(this.$3$CommittedField, value);
		},
		get_textElement: function EditableTextView$get_TextElement() {
			return this.$template$1.get_$textElement();
		},
		get_isEditing: function EditableTextView$get_IsEditing() {
			return this.$3$IsEditingField;
		},
		set_isEditing: function EditableTextView$set_IsEditing(value) {
			this.$3$IsEditingField = value;
		},
		get_textDisplayWidth: function EditableTextView$get_TextDisplayWidth() {
			return Math.min(tab.DoubleUtil.roundToInt(this.$template$1.get_$textSpan().width()), tab.DoubleUtil.roundToInt(this.$template$1.get_$textElement().width()));
		},
		$handleHoverStateChanged: function EditableTextView$HandleHoverStateChanged(onHover) {
			if (ss.isValue(this.$3$HoverStateChangedField)) {
				this.$3$HoverStateChangedField(onHover);
			}
		},
		updateTextElement: function EditableTextView$UpdateTextElement(text) {
			this.$template$1.get_$textSpan().text(text);
			var spanElt = this.$template$1.get_$textSpan().get(0);
			spanElt.title = (this.showTooltip ? text : '');
		},
		edit: function EditableTextView$Edit() {
			this.get_textElement().hide();
			this.get_inputElement().show();
			this.get_inputElement().focus();
			tab.DomUtil.selectAllInputText(this.get_inputElement());
			this.set_isEditing(true);
			this.element.addClass($spiff_EditableTextView.$editingClassName);
			if (ss.isValue(this.$3$EditingField)) {
				this.$3$EditingField();
			}
		},
		commit: function EditableTextView$Commit() {
			if (this.get_isEditing()) {
				this.set_isEditing(false);
				this.get_inputElement().hide();
				this.get_textElement().show();
				this.element.removeClass($spiff_EditableTextView.$editingClassName);
				if (ss.isValue(this.$3$CommittedField)) {
					this.$3$CommittedField();
				}
			}
		},
		$adjustHeight: function EditableTextView$AdjustHeight() {
			var containerHeight = tab.DoubleUtil.roundToInt(this.element.parent().height());
			this.element.height(containerHeight);
			var boundingDiv = this.element.children('div');
			var insideHeight = tab.DoubleUtil.roundToInt(boundingDiv.height());
			this.get_textElement().css('height', insideHeight + 'px');
			this.get_textElement().css('line-height', insideHeight + 'px');
			this.get_inputElement().css('height', insideHeight + 'px');
			this.get_inputElement().css('line-height', insideHeight + 'px');
		},
		onAddedToDom: function EditableTextView$OnAddedToDom() {
			this.$adjustHeight();
			$spiff_Widget.prototype.onAddedToDom.call(this);
		}
	}, $spiff_TextInputView, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_EnsureElementVisibleHelper, $asm, {
		get_scrollingComponentRef: function EnsureElementVisibleHelper$get_ScrollingComponentRef() {
			return this.$boundScrollingComponentRef;
		},
		ensureVisible: function EnsureElementVisibleHelper$EnsureVisible(e) {
			window.setTimeout(ss.mkdel(this, function() {
				if (ss.isValue(this.$scrollingComponent)) {
					var scrollingContainer = $(ReactDOM.findDOMNode(this.$scrollingComponent));
					var selectedNode = $(e);
					var currentNode = selectedNode;
					var top = 0;
					var left = 0;
					while (scrollingContainer.find(currentNode[0]).length > 0) {
						var currentPosition = currentNode.position();
						top += currentPosition.top;
						left += currentPosition.left;
						currentNode = currentNode.offsetParent();
					}
					var needsScroll = top < 0 || left < 0 || top + selectedNode.height() > scrollingContainer.height() || left + selectedNode.width() > scrollingContainer.width();
					if (needsScroll) {
						this.$scrollingComponent.get_scrollingControl().scrollToElement(e);
					}
				}
			}), 0);
		}
	});
	ss.initClass($spiff_EventUtil, $asm, {});
	ss.initClass($spiff_EventUtilsInitializer, $asm, {});
	ss.initClass($spiff_GroupSelection, $asm, {
		get_theAllItemIsSelected: function GroupSelection$get_TheAllItemIsSelected() {
			return this.allSelected;
		},
		set_theAllItemIsSelected: function GroupSelection$set_TheAllItemIsSelected(value) {
			if (this.groupSize > 0) {
				this.allSelected = value;
				if (value === true) {
					this.set_selectedIndexes(null);
				}
				else {
					this.set_selectedIndexes({});
				}
			}
		},
		get_selectedIndexes: function GroupSelection$get_SelectedIndexes() {
			return this.$1$SelectedIndexesField;
		},
		set_selectedIndexes: function GroupSelection$set_SelectedIndexes(value) {
			this.$1$SelectedIndexesField = value;
		},
		get_selectedCount: function GroupSelection$get_SelectedCount() {
			return (ss.isValue(this.get_selectedIndexes()) ? ss.count(Object.keys(this.get_selectedIndexes())) : 0);
		},
		validateAllSelectedState: function GroupSelection$ValidateAllSelectedState() {
			if (ss.isValue(this.get_selectedIndexes()) && ss.count(Object.keys(this.get_selectedIndexes())) === this.groupSize) {
				this.set_theAllItemIsSelected(true);
			}
		},
		mapSelected: function(T) {
			return function GroupSelection$MapSelected(projection) {
				return this.mapSelected$1(T).call(this, projection, true);
			};
		},
		mapSelected$1: function(T) {
			return function GroupSelection$MapSelected(projection, populateAllForAllSelected) {
				var selectedIndexesArray;
				if (this.get_theAllItemIsSelected() && populateAllForAllSelected) {
					selectedIndexesArray = [];
					var groupSize = this.groupSize;
					for (var i = 0; i < groupSize; ++i) {
						selectedIndexesArray.push(i);
					}
				}
				else {
					selectedIndexesArray = _.map(this.get_selectedIndexes(), function(value, index) {
						return index;
					}).sort();
				}
				return _.map(selectedIndexesArray, function(index1) {
					return projection(index1);
				});
			};
		},
		handleTap: null,
		handleTapAll: null,
		isSelected: null,
		clone: null
	});
	ss.initClass($spiff_MultiSelectGroupSelection, $asm, {
		get_selectedCount: function MultiSelectGroupSelection$get_SelectedCount() {
			return (this.get_theAllItemIsSelected() ? this.groupSize : ss.count(Object.keys(this.get_selectedIndexes())));
		},
		handleTap: function MultiSelectGroupSelection$HandleTap(index) {
			ss.Debug.assert(index >= 0 && index < this.groupSize);
			if (this.get_theAllItemIsSelected()) {
				this.set_theAllItemIsSelected(false);
				for (var i = 0; i < this.groupSize; ++i) {
					if (i !== index) {
						this.get_selectedIndexes()[i] = true;
					}
				}
			}
			else {
				ss.Debug.assert(ss.isValue(this.get_selectedIndexes()));
				if (this.get_selectedIndexes()[index]) {
					delete this.get_selectedIndexes()[index];
				}
				else {
					this.get_selectedIndexes()[index] = true;
					this.validateAllSelectedState();
				}
			}
		},
		handleTapAll: function MultiSelectGroupSelection$HandleTapAll() {
			this.set_theAllItemIsSelected(!this.get_theAllItemIsSelected());
		},
		clone: function MultiSelectGroupSelection$Clone() {
			var clone = new $spiff_MultiSelectGroupSelection(this.groupSize);
			clone.allSelected = this.allSelected;
			clone.set_selectedIndexes(_.clone(this.get_selectedIndexes()));
			return clone;
		},
		isSelected: function MultiSelectGroupSelection$IsSelected(index) {
			ss.Debug.assert(index >= 0 && index < this.groupSize);
			return this.get_theAllItemIsSelected() || ss.isValue(this.get_selectedIndexes()) && ss.keyExists(this.get_selectedIndexes(), index);
		}
	}, $spiff_GroupSelection);
	ss.initClass($spiff_ExclusiveMultiSelectGroupSelection, $asm, {
		get_selectedCount: function ExclusiveMultiSelectGroupSelection$get_SelectedCount() {
			return (ss.isValue(this.get_selectedIndexes()) ? ss.count(Object.keys(this.get_selectedIndexes())) : 0);
		},
		mapSelected: function(T) {
			return function ExclusiveMultiSelectGroupSelection$MapSelected(projection) {
				return this.mapSelected$1(T).call(this, projection, false);
			};
		},
		validateAllSelectedState: function ExclusiveMultiSelectGroupSelection$ValidateAllSelectedState() {
			if (ss.isValue(this.get_selectedIndexes()) && ss.count(Object.keys(this.get_selectedIndexes())) === 0) {
				this.set_theAllItemIsSelected(true);
			}
		},
		handleTap: function ExclusiveMultiSelectGroupSelection$HandleTap(index) {
			ss.Debug.assert(index >= 0 && index < this.groupSize);
			if (this.get_theAllItemIsSelected()) {
				this.set_theAllItemIsSelected(false);
				this.get_selectedIndexes()[index] = true;
			}
			else {
				ss.Debug.assert(ss.isValue(this.get_selectedIndexes()));
				if (this.get_selectedIndexes()[index]) {
					delete this.get_selectedIndexes()[index];
					this.validateAllSelectedState();
				}
				else {
					this.get_selectedIndexes()[index] = true;
				}
			}
		},
		handleTapAll: function ExclusiveMultiSelectGroupSelection$HandleTapAll() {
			if (this.get_theAllItemIsSelected()) {
				this.set_theAllItemIsSelected(false);
				for (var i = 0; i < this.groupSize; ++i) {
					this.get_selectedIndexes()[i] = true;
				}
			}
			else {
				this.set_theAllItemIsSelected(true);
			}
		},
		clone: function ExclusiveMultiSelectGroupSelection$Clone() {
			var clone = new $spiff_ExclusiveMultiSelectGroupSelection(this.groupSize);
			clone.allSelected = this.allSelected;
			clone.set_selectedIndexes(_.clone(this.get_selectedIndexes()));
			return clone;
		},
		isSelected: function ExclusiveMultiSelectGroupSelection$IsSelected(index) {
			ss.Debug.assert(index >= 0 && index < this.groupSize);
			return ss.isValue(this.get_selectedIndexes()) && ss.keyExists(this.get_selectedIndexes(), index);
		}
	}, $spiff_MultiSelectGroupSelection);
	ss.initClass($spiff_SingleSelectGroupSelection, $asm, {
		validateAllSelectedState: function SingleSelectGroupSelection$ValidateAllSelectedState() {
			if (ss.isValue(this.get_selectedIndexes()) && (ss.count(Object.keys(this.get_selectedIndexes())) === this.groupSize || ss.count(Object.keys(this.get_selectedIndexes())) === 0)) {
				{
					this.set_theAllItemIsSelected(true);
				}
			}
		},
		handleTap: function SingleSelectGroupSelection$HandleTap(index) {
			ss.Debug.assert(index >= 0 && index < this.groupSize);
			if (this.get_theAllItemIsSelected()) {
				this.set_theAllItemIsSelected(false);
			}
			ss.Debug.assert(ss.isValue(this.get_selectedIndexes()));
			if (!this.get_selectedIndexes()[index]) {
				if (ss.count(Object.keys(this.get_selectedIndexes())) > 0) {
					ss.clearKeys(this.get_selectedIndexes());
				}
				this.get_selectedIndexes()[index] = true;
			}
			this.validateAllSelectedState();
		},
		handleTapAll: function SingleSelectGroupSelection$HandleTapAll() {
			if (!this.get_theAllItemIsSelected()) {
				this.set_theAllItemIsSelected(true);
			}
		},
		clone: function SingleSelectGroupSelection$Clone() {
			var clone = new $spiff_SingleSelectGroupSelection(this.groupSize);
			clone.allSelected = this.allSelected;
			clone.set_selectedIndexes(_.clone(this.get_selectedIndexes()));
			return clone;
		},
		isSelected: function SingleSelectGroupSelection$IsSelected(index) {
			ss.Debug.assert(index >= 0 && index < this.groupSize);
			return ss.isValue(this.get_selectedIndexes()) && ss.keyExists(this.get_selectedIndexes(), index);
		},
		selectNext: function SingleSelectGroupSelection$SelectNext(increment) {
			var initialSelectedIndex = 0;
			var selectedIndex = initialSelectedIndex;
			if (this.get_selectedCount() === 1) {
				initialSelectedIndex = this.mapSelected(ss.Int32).call(this, function(i) {
					return i - 0;
				})[0];
				selectedIndex = initialSelectedIndex + increment;
			}
			if (selectedIndex >= this.groupSize) {
				if (initialSelectedIndex === this.groupSize - 1) {
					selectedIndex = 0;
				}
				else {
					selectedIndex = this.groupSize - 1;
				}
			}
			this.$setSelection(selectedIndex);
		},
		selectPrevious: function SingleSelectGroupSelection$SelectPrevious(increment) {
			var initialSelectedIndex = this.groupSize - 1;
			var selectedIndex = initialSelectedIndex;
			if (this.get_selectedCount() === 1) {
				initialSelectedIndex = this.mapSelected(ss.Int32).call(this, function(i) {
					return i - 0;
				})[0];
				selectedIndex = initialSelectedIndex - increment;
			}
			if (selectedIndex < 0) {
				if (initialSelectedIndex === 0) {
					selectedIndex = this.groupSize - 1;
				}
				else {
					selectedIndex = 0;
				}
			}
			this.$setSelection(selectedIndex);
		},
		selectFirst: function SingleSelectGroupSelection$SelectFirst() {
			this.$setSelection(0);
		},
		selectLast: function SingleSelectGroupSelection$SelectLast() {
			this.$setSelection(this.groupSize - 1);
		},
		$setSelection: function SingleSelectGroupSelection$SetSelection(index) {
			index = Math.max(0, index);
			index = Math.min(this.groupSize - 1, index);
			if (this.groupSize > 0) {
				this.allSelected = false;
				this.set_selectedIndexes({});
				this.get_selectedIndexes()[index] = true;
			}
		}
	}, $spiff_GroupSelection);
	ss.initClass($spiff_ExclusiveSingleSelectGroupSelection, $asm, {
		mapSelected: function(T) {
			return function ExclusiveSingleSelectGroupSelection$MapSelected(projection) {
				return this.mapSelected$1(T).call(this, projection, false);
			};
		},
		validateAllSelectedState: function ExclusiveSingleSelectGroupSelection$ValidateAllSelectedState() {
			if (ss.isValue(this.get_selectedIndexes()) && ss.count(Object.keys(this.get_selectedIndexes())) === 0) {
				this.set_theAllItemIsSelected(true);
			}
		},
		clone: function ExclusiveSingleSelectGroupSelection$Clone() {
			var clone = new $spiff_ExclusiveSingleSelectGroupSelection(this.groupSize);
			clone.allSelected = this.allSelected;
			clone.set_selectedIndexes(_.clone(this.get_selectedIndexes()));
			return clone;
		}
	}, $spiff_SingleSelectGroupSelection);
	ss.initClass($spiff_FocusManager, $asm, {});
	ss.initClass($spiff_FullscreenUtil, $asm, {});
	ss.initClass($spiff_GenericDropdownButtonComponent, $asm, {
		render: function GenericDropdownButtonComponent$Render() {
			var styleClass = ss.coalesce(this.props.styleClass, 'tab-unification-line-arrow-dropdown');
			var arrowDownStyle = null;
			if (this.props.isDisabled) {
				styleClass = styleClass + ' disabled';
			}
			if (this.props.disableArrowDown) {
				arrowDownStyle = { display: 'none' };
			}
			return $spiff_DOMElements.div({ className: 'tab-GenericDropdownButton ' + styleClass, 'data-test-id': ss.coalesce(this.props.testId, 'tab-GenericDropdownButton') }, $spiff_DOMElements.div({ className: 'tab-SelectionDisplay', key: 'tab-SelectionDisplay' }, this.props.selectionDisplay()), $spiff_DOMElements.div({ className: 'tab-DownArrowButton', style: arrowDownStyle, key: 'tab-DownArrowButton' }, $spiff_DOMElements.div({ className: 'arrow down' })));
		}
	}, $spiff_PureRenderComponent);
	ss.initClass($spiff_GridIScrollHandler, $asm, {
		render: function GridIScrollHandler$Render() {
			var $t1 = new $spiff_ScrollingProps();
			$t1.customStyle = { top: this.props.marginTop };
			$t1.extraCssClass = this.props.rootCssClass;
			$t1.scrollX = true;
			$t1.scrollY = true;
			$t1.onScroll = ss.mkdel(this, function(position) {
				this.props.onScroll(-position.x, -position.y);
			});
			$t1.onScrollStop = ss.mkdel(this, function(position1, maxPosition) {
				this.props.onScroll(-position1.x, -position1.y);
				if (position1.y === maxPosition.y && !ss.staticEquals(this.$callOnScrollToEnd, null)) {
					this.$callOnScrollToEnd();
				}
			});
			$t1.startingY = this.state.writeOnlyScrollTop;
			$t1.onScrollingControlRefUpdated = this.$bindToScrollingControl;
			return $spiff_ScrollingComponent.createScroller($t1, [this.props.children]);
		},
		componentDidMount: function GridIScrollHandler$ComponentDidMount() {
			if (!ss.staticEquals(this.props.onRefUpdated, null)) {
				this.props.onRefUpdated(this);
			}
		},
		componentWillUnmount: function GridIScrollHandler$ComponentWillUnmount() {
			if (!ss.staticEquals(this.props.onRefUpdated, null)) {
				this.props.onRefUpdated(null);
			}
		},
		callOnScrollToEnd: function GridIScrollHandler$CallOnScrollToEnd(functionToCallOnScrollToEnd) {
			this.$callOnScrollToEnd = functionToCallOnScrollToEnd;
		},
		setScrollPosition$1: function GridIScrollHandler$SetScrollPosition(scrollLeft, scrollTop) {
			this.setState({ writeOnlyScrollTop: scrollTop });
		},
		scrollBy$1: function GridIScrollHandler$ScrollBy(x, y) {
			var sc = this.$scrollingControl;
			this.scrollBy$2(x, y, sc.get_x(), sc.get_y(), sc.get_maxScrollX(), sc.get_maxScrollY());
		},
		scrollBy$2: function GridIScrollHandler$ScrollBy(x, y, currentX, currentY, maxScrollX, maxScrollY) {
			var newX = currentX + x;
			var clampedNewX = Math.min(Math.max(newX, 0), maxScrollX);
			var newY = currentY + y;
			var clampedNewY = Math.min(Math.max(newY, 0), maxScrollY);
			this.setScrollPosition$1(clampedNewX, clampedNewY);
		},
		setScrollPosition: function GridIScrollHandler$SetScrollPosition(scrollLeft, scrollTop) {
			this.$scrollingControl.scrollTo(scrollLeft, scrollTop);
		},
		getScrollPosition: function GridIScrollHandler$GetScrollPosition() {
			var sc = this.$scrollingControl;
			var left = Math.min(Math.max(sc.get_x(), 0), sc.get_maxScrollX());
			var top = Math.min(Math.max(sc.get_y(), 0), sc.get_maxScrollY());
			return { scrollLeft: left, scrollTop: top };
		},
		scrollBy: function GridIScrollHandler$ScrollBy(x, y) {
			var sc = this.$scrollingControl;
			this.scrollBy$2(x, y, sc.get_x(), sc.get_y(), sc.get_maxScrollX(), sc.get_maxScrollY());
		},
		getScrollbarWidth: function GridIScrollHandler$GetScrollbarWidth() {
			return 9;
		},
		canScroll: function GridIScrollHandler$CanScroll() {
			return this.$scrollingControl.get_canScroll();
		},
		dispose: function GridIScrollHandler$Dispose() {
			this.$scrollingControl.destroy();
		},
		resetPosition: function GridIScrollHandler$ResetPosition() {
			this.$scrollingControl.resetPosition();
		},
		refresh: function GridIScrollHandler$Refresh() {
			this.$scrollingControl.refresh();
		},
		handleEvent: function GridIScrollHandler$HandleEvent(e) {
			this.$scrollingControl.handleEvent(e);
		},
		getScrollContainer: function GridIScrollHandler$GetScrollContainer() {
			return ReactDOM.findDOMNode(this);
		}
	}, React.Component, [Object]);
	ss.initClass($spiff_HorizontalSliderComponent, $asm, {
		render: function HorizontalSliderComponent$Render() {
			return $spiff_StatelessHorizontalSliderComponent.create({ commitValue: ss.mkdel(this, this.$commitValueChange), disabled: this.props.disabled, emptyTextBox: this.state.emptyTextBox, extraCssClass: this.props.extraCssClass, maxValue: this.props.maxValue, minValue: this.props.minValue, showValueTextBox: this.props.showValueTextBox, showPercentageSign: this.props.showPercentageSign, styleClass: this.props.styleClass, tabIndex: this.props.tabIndex, value: this.state.value, displayValueChanged: ss.mkdel(this, this.$setValueInState), width: this.props.width });
		},
		$setValueInState: function HorizontalSliderComponent$SetValueInState(newValue) {
			if (this.props.disabled) {
				return;
			}
			if (ss.isNullOrUndefined(newValue)) {
				this.setState({ value: 0, emptyTextBox: true });
			}
			else {
				this.setState({ value: ss.unbox(newValue), emptyTextBox: false });
			}
			this.$locallyModified = true;
		},
		$commitValueChange: function HorizontalSliderComponent$CommitValueChange(newValue, forceCommit) {
			if (this.props.disabled) {
				return;
			}
			var isChanged = this.$locallyModified || newValue !== this.state.value || forceCommit;
			if (!ss.staticEquals(this.props.onValueChanged, null) && isChanged) {
				this.props.onValueChanged(newValue);
				this.$locallyModified = false;
			}
		}
	}, $spiff_PureRenderComponent);
	ss.initClass($spiff_HoverAddClassBehavior, $asm, {});
	ss.initClass($spiff_HoverBehavior, $asm, {
		get_$eventNamespace: function HoverBehavior$get_EventNamespace() {
			return ss.formatString('.{0}', ss.replaceAllString(ss.getTypeFullName(ss.getInstanceType(this)), '.', '_'));
		},
		dispose: function HoverBehavior$Dispose() {
			if (ss.isNullOrUndefined(this.$widget)) {
				return;
			}
			tab.Log.get(this).debug('Dispose', []);
			this.$widget.remove_disposed(ss.mkdel(this, this.$handleWidgetDispose));
			if (ss.isValue(this.$childSelector)) {
				var $t1 = this.$widget.element;
				var $t2 = this.$childSelector;
				$t1.off(this.get_$eventNamespace(), $t2);
			}
			else {
				this.$widget.element.off(this.get_$eventNamespace());
			}
			this.$widget = null;
		},
		$handleEnter: function HoverBehavior$HandleEnter(e) {
			tab.Log.get(this).debug('Hover, element=%o', [e.currentTarget]);
			if (ss.isValue(this.$onEnter)) {
				this.$onEnter(e);
			}
		},
		$handleLeave: function HoverBehavior$HandleLeave(e) {
			tab.Log.get(this).debug('Leave, element=%o', [e.currentTarget]);
			if (ss.isValue(this.$onExit)) {
				this.$onExit(e);
			}
		},
		$handleWidgetDispose: function HoverBehavior$HandleWidgetDispose(source, args) {
			this.dispose();
		}
	}, null, [ss.IDisposable]);
	ss.initClass($spiff_IconButton, $asm, {
		get_buttonElement: function IconButton$get_ButtonElement() {
			return this.element;
		},
		setEnabled: function IconButton$SetEnabled(enabled) {
			if (enabled) {
				this.get_buttonElement().removeClass('tab-disabled');
				this.get_buttonElement().addClass('tab-enabled');
			}
			else {
				this.get_buttonElement().removeClass('tab-enabled');
				this.get_buttonElement().addClass('tab-disabled');
			}
			return this;
		},
		setIcon: function IconButton$SetIcon(iconClass) {
			if (!ss.isValue(this.iconElement)) {
				this.iconElement = $('<span>');
				this.iconElement.appendTo(this.get_buttonElement());
			}
			this.iconElement.removeClass().addClass('tab-iconButtonIcon').addClass(iconClass);
			return this;
		}
	}, $spiff_Button, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_IconButtonComponent, $asm, {
		get_className: function IconButtonComponent$get_ClassName() {
			var classNames = [$spiff_UnificationClassNames.iconButton];
			ss.Debug.assert(ss.isValue(this.props.customClassName), 'IconButton needs to have specific button name.');
			classNames.push(this.props.customClassName);
			if (this.props.disabled) {
				classNames.push($spiff_UnificationClassNames.disabled);
			}
			return classNames.join(' ');
		},
		$buildState: function IconButtonComponent$BuildState() {
			var $t1 = new $spiff_IconButtonState();
			$t1.isActive = (ss.isValue(this.state) ? this.state.isActive : false);
			return $t1;
		},
		render: function IconButtonComponent$Render() {
			ss.Debug.assert(ss.isValue(this.props.iconClassName), 'IconButton should have a valid icon.');
			var $t1 = new EventUtils.EventHandleSpec();
			$t1.tap = ss.mkdel(this, this.$onTap);
			$t1.firstTouch = ss.mkdel(this, function(e) {
				if (tsConfig.is_mobile) {
					var $t2 = new $spiff_IconButtonState();
					$t2.isActive = true;
					this.setState($t2);
				}
			});
			$t1.lastTouch = ss.mkdel(this, function(e1) {
				if (tsConfig.is_mobile) {
					var $t3 = new $spiff_IconButtonState();
					$t3.isActive = false;
					this.setState($t3);
				}
			});
			return EventUtils.EventForwarder.div($t1, { className: this.get_className(), title: this.props.title, onMouseEnter: ss.mkdel(this, function(e2) {
				if (!tsConfig.is_mobile) {
					var $t4 = new $spiff_IconButtonState();
					$t4.isActive = true;
					this.setState($t4);
				}
			}), onMouseLeave: ss.mkdel(this, function(e3) {
				if (!tsConfig.is_mobile) {
					var $t5 = new $spiff_IconButtonState();
					$t5.isActive = false;
					this.setState($t5);
				}
			}) }, $spiff_DOMElements.div({ className: 'tab-Icon ' + this.props.iconClassName + (this.state.isActive ? ' active' : ''), key: this.props.customClassName, tabIndex: this.props.tabIndex, role: 'button', onKeyPress: ss.mkdel(this, function(e4) {
				this.props.onKeyPress(e4);
			}) }));
		},
		$onTap: function IconButtonComponent$OnTap(e) {
			if (!this.props.disabled && !ss.staticEquals(this.props.onTap, null)) {
				this.props.onTap(e);
			}
		}
	}, React.Component);
	ss.initClass($spiff_IconButtonState, $asm, {});
	ss.initInterface($spiff_IContent, $asm, { get_viewType: null, get_viewModel: null, disposeViewModel: null });
	ss.initInterface($spiff_IDialogContent, $asm, { add_hideDialogRequested: null, remove_hideDialogRequested: null, onDialogHidden: null }, [ss.makeGenericType($spiff_IPropsProvider$1, [Object])]);
	ss.initInterface($spiff_IListItemContentCreator, $asm, { createListItemContent: null });
	ss.initInterface($spiff_IListItemDragAvatarCreator, $asm, { createListItemDragAvatar: null });
	ss.initInterface($spiff_IListViewDragFeedback, $asm, { add_dragStarting: null, remove_dragStarting: null, add_dragEnded: null, remove_dragEnded: null, get_avatarCreator: null, set_avatarCreator: null, startDrag: null });
	ss.initEnum($spiff_InputType, $asm, { positiveInteger: 0, string: 1 });
	ss.initClass($spiff_InteractAsButtonWrapperComponent, $asm, {
		render: function InteractAsButtonWrapperComponent$Render() {
			var className = 'tab-custom-button';
			var htmlProps = { role: 'button' };
			if (!this.props.disabled) {
				htmlProps.onKeyDown = ss.mkdel(this, this.$handleKeyDown);
				htmlProps.tabIndex = 0;
			}
			else {
				className += ' disabled';
			}
			htmlProps.className = className;
			return EventUtils.EventForwarder.div(this.$eventHandleSpec, htmlProps, this.props.buttonContent());
		},
		$handleKeyDown: function InteractAsButtonWrapperComponent$HandleKeyDown(keyboardEvent) {
			switch (keyboardEvent.which) {
				case 13:
				case 32: {
					this.$handleInteraction();
					this.$handleEnterAndSpaceKeyDown();
					break;
				}
				default: {
					return;
				}
			}
			keyboardEvent.stopPropagation();
			keyboardEvent.preventDefault();
		},
		$handleInteraction: function InteractAsButtonWrapperComponent$HandleInteraction() {
			if (!this.props.disabled && !ss.staticEquals(this.props.handleAllTriggers, null)) {
				this.props.handleAllTriggers();
			}
		},
		$handleEnterAndSpaceKeyDown: function InteractAsButtonWrapperComponent$HandleEnterAndSpaceKeyDown() {
			if (!this.props.disabled && !ss.staticEquals(this.props.handleEnterSpaceOnly, null)) {
				this.props.handleEnterSpaceOnly();
			}
		},
		$handleClickEvent: function InteractAsButtonWrapperComponent$HandleClickEvent(e) {
			if (!this.props.disabled && !ss.staticEquals(this.props.handleClickOnly, null)) {
				this.props.handleClickOnly(e);
			}
		}
	}, $spiff_PureRenderComponent);
	ss.initInterface($spiff_IScrollable, $asm, { get_canScrollX: null, get_canScrollY: null, get_docSize: null, get_actualViewSize: null, set_actualViewSize: null, get_effectiveViewSize: null, get_scrollPos: null, set_scrollPos: null, setXPos: null, setYPos: null });
	ss.initClass($spiff_IScrollComponent, $asm, {
		render: function IScrollComponent$Render() {
			var classes = ['tab-iscroll-component'];
			if (this.state.hovered) {
				classes.push('hover');
			}
			if (this.state.scrolling) {
				classes.push('tabScrolling');
			}
			if (ss.isValue(this.props.extraCssClass)) {
				classes.push(this.props.extraCssClass);
			}
			if (this.props.alwaysShowScrollbarsIfScrollable) {
				classes.push('showIfScrollable');
			}
			var className = ss.arrayFromEnumerable(classes).join(' ');
			return $spiff_DOMElements.div({ ref: 'iscroll-wrapper', className: className, style: this.props.customStyle, onMouseOver: ss.mkdel(this, this.handleOnMouseOver), onMouseOut: ss.mkdel(this, this.handleOnMouseOut) }, $spiff_DOMElements.div({ className: 'tab-iscroll-content' }, this.props.children));
		},
		componentDidMount: function IScrollComponent$ComponentDidMount() {
			this.$windowDisposable = $spiff_EventUtil.bindWithDispose($(window), 'resize', ss.mkdel(this, this.$handleBrowserResize));
			var wrapper = ReactDOM.findDOMNode(this.refs['iscroll-wrapper']);
			this.iScroll = new $spiff_$AugmentedIScroll(wrapper, this.props);
			this.iScroll.on('scrollStart', ss.mkdel(this, this.handleScrollStart));
			this.iScroll.on('scroll', ss.mkdel(this, this.$handleScroll));
			this.iScroll.on('scrollEnd', ss.mkdel(this, function() {
				this.handleScrollStop();
				this.$callScrollStopCallback();
			}));
			this.$refresh();
		},
		componentWillUnmount: function IScrollComponent$ComponentWillUnmount() {
			this.$windowDisposable = tab.MiscUtil.dispose$1(this.$windowDisposable);
			this.iScroll.destroy();
			this.iScroll = null;
			this.$refreshTimeout = tab.MiscUtil.clearTimeout(this.$refreshTimeout);
		},
		componentDidUpdate: function IScrollComponent$ComponentDidUpdate(prevProps) {
			ss.Debug.assert(_.isEqual(prevProps.iScrollOptions, this.props.iScrollOptions), "IScrollComponent doesn't handle IScrollOptions changing");
			if (!ss.referenceEquals(this.props.startingY, prevProps.startingY) && ss.isValue(this.props.startingY)) {
				this.iScroll.scrollTo(this.iScroll.x, ss.unbox(this.props.startingY), 0, null);
				this.$callScrollStopCallback();
			}
			this.$refresh();
		},
		handleOnMouseOver: function IScrollComponent$HandleOnMouseOver(mouseEvent) {
			this.setState({ hovered: true, scrolling: this.state.scrolling });
		},
		handleOnMouseOut: function IScrollComponent$HandleOnMouseOut(mouseEvent) {
			this.setState({ hovered: false, scrolling: this.state.scrolling });
		},
		handleScrollStart: function IScrollComponent$HandleScrollStart() {
			this.setState({ hovered: this.state.hovered, scrolling: true });
		},
		$handleScroll: function IScrollComponent$HandleScroll() {
			if (!ss.staticEquals(this.props.scrollCallback, null)) {
				this.props.scrollCallback(this.iScroll.getComputedPosition());
			}
		},
		handleScrollStop: function IScrollComponent$HandleScrollStop() {
			this.setState({ hovered: this.state.hovered, scrolling: false });
		},
		$handleBrowserResize: function IScrollComponent$HandleBrowserResize(queryEvent) {
			this.$refresh();
		},
		$refresh: function IScrollComponent$Refresh() {
			this.$refreshTimeout = window.setTimeout(ss.mkdel(this, function() {
				if (ss.isValue(this.iScroll)) {
					this.iScroll.refresh();
				}
			}), this.props.refreshDelay);
		},
		$callScrollStopCallback: function IScrollComponent$CallScrollStopCallback() {
			if (!ss.staticEquals(this.props.scrollStopCallback, null)) {
				var $t1 = new Object();
				$t1.x = this.iScroll.maxScrollX;
				$t1.y = this.iScroll.maxScrollY;
				var maxScrollPosition = $t1;
				this.props.scrollStopCallback(this.iScroll.getComputedPosition(), maxScrollPosition);
			}
		}
	}, React.Component);
	ss.initInterface($spiff_IScroller, $asm, { get_canScrollX: null, get_canScrollY: null, get_scrollPos: null, get_maxScroll: null, get_visibleArea: null, scrollX: null, scrollY: null, setScrollTarget: null, refresh: null });
	ss.initClass($spiff_IScrollProps, $asm, {});
	ss.initInterface($spiff_ISelectable, $asm, { add_selectableDisposed: null, remove_selectableDisposed: null, add_selectedChanging: null, remove_selectedChanging: null, add_selectedChanged: null, remove_selectedChanged: null, get_selectionId: null, set_selectionId: null, get_selected: null, set_selected: null, get_selectedClass: null, set_selectedClass: null });
	ss.initInterface($spiff_IUberPopupContent, $asm, { updateUberPopupViewModel: null }, [$spiff_IContent]);
	ss.initClass($spiff_JQueryGestureExtensions, $asm, {});
	ss.initClass($spiff_LabelButton, $asm, {
		get_labelElement: function LabelButton$get_LabelElement() {
			return this.element.find(this.$labelSelector);
		},
		get_label: function LabelButton$get_Label() {
			return this.get_labelElement().text();
		},
		set_label: function LabelButton$set_Label(value) {
			this.get_labelElement().text(value);
			if (ss.isNullOrEmptyString(value)) {
				this.get_labelElement().addClass('hide');
			}
			else {
				this.get_labelElement().removeClass('hide');
			}
		},
		setLabelContents: function LabelButton$SetLabelContents(element) {
			if (ss.isValue(element)) {
				this.get_labelElement().html(element);
				this.get_labelElement().removeClass('hide');
			}
			else {
				this.get_labelElement().html('');
				this.get_labelElement().addClass('hide');
			}
		}
	}, $spiff_Button, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_ToggleButton, $asm, {
		add_selectableDisposed: function ToggleButton$add_SelectableDisposed(value) {
			this.$3$SelectableDisposedField = ss.delegateCombine(this.$3$SelectableDisposedField, value);
		},
		remove_selectableDisposed: function ToggleButton$remove_SelectableDisposed(value) {
			this.$3$SelectableDisposedField = ss.delegateRemove(this.$3$SelectableDisposedField, value);
		},
		add_selectedChanging: function ToggleButton$add_SelectedChanging(value) {
			this.$3$SelectedChangingField = ss.delegateCombine(this.$3$SelectedChangingField, value);
		},
		remove_selectedChanging: function ToggleButton$remove_SelectedChanging(value) {
			this.$3$SelectedChangingField = ss.delegateRemove(this.$3$SelectedChangingField, value);
		},
		add_selectedChanged: function ToggleButton$add_SelectedChanged(value) {
			this.$3$SelectedChangedField = ss.delegateCombine(this.$3$SelectedChangedField, value);
		},
		remove_selectedChanged: function ToggleButton$remove_SelectedChanged(value) {
			this.$3$SelectedChangedField = ss.delegateRemove(this.$3$SelectedChangedField, value);
		},
		get_selectedClass: function ToggleButton$get_SelectedClass() {
			return this.$selectedClass;
		},
		set_selectedClass: function ToggleButton$set_SelectedClass(value) {
			if (ss.referenceEquals(this.$selectedClass, value)) {
				return;
			}
			if (this.get_selected()) {
				this.element.toggleClass(this.$selectedClass, false);
				this.element.toggleClass(value, true);
			}
			this.$selectedClass = value;
		},
		get_selectionId: function ToggleButton$get_SelectionId() {
			return this.$selectionId;
		},
		set_selectionId: function ToggleButton$set_SelectionId(value) {
			this.$selectionId = value;
		},
		get_selected: function ToggleButton$get_Selected() {
			return this.element.hasClass(this.$selectedClass);
		},
		set_selected: function ToggleButton$set_Selected(value) {
			if (this.get_selected() === value) {
				return;
			}
			this.element.toggleClass(this.$selectedClass, value);
			this.raisePropertyChanged($spiff_ToggleButton.selectedProperty);
			this.$raiseEventHandler(this.$3$SelectedChangedField, null);
		},
		get_preventMouseDeselect: function ToggleButton$get_PreventMouseDeselect() {
			return this.$3$PreventMouseDeselectField;
		},
		set_preventMouseDeselect: function ToggleButton$set_PreventMouseDeselect(value) {
			this.$3$PreventMouseDeselectField = value;
		},
		handleClick: function ToggleButton$HandleClick(e) {
			if (this.get_disabled()) {
				return;
			}
			var select = !this.get_selected();
			if (this.get_preventMouseDeselect() && !select) {
				return;
			}
			if (!ss.staticEquals(this.$3$SelectedChangingField, null)) {
				var eventArgs = new $spiff_SelectionEventArgs(select, ss.isValue(e) && e.shiftKey, $spiff_EventUtil.isCtrlKey(e));
				this.$3$SelectedChangingField(this, eventArgs);
				if (eventArgs.cancel) {
					return;
				}
			}
			this.set_selected(select);
			$spiff_Button.prototype.handleClick.call(this, e);
		},
		$raiseEventHandler: function ToggleButton$RaiseEventHandler(handler, args) {
			if (!ss.staticEquals(handler, null)) {
				handler(this, args);
			}
		},
		onDisposed: function ToggleButton$OnDisposed(args) {
			this.$raiseEventHandler(this.$3$SelectableDisposedField, null);
			$spiff_Widget.prototype.onDisposed.call(this, args);
		}
	}, $spiff_Button, [tab.IWidget, tab.IAppendableView, ss.IDisposable, $spiff_ISelectable]);
	ss.initClass($spiff_LabelToggleButton, $asm, {
		get_labelElement: function LabelToggleButton$get_LabelElement() {
			return this.element.find(this.$labelSelector);
		},
		get_inputElement: function LabelToggleButton$get_InputElement() {
			return this.element.find('input');
		},
		get_label: function LabelToggleButton$get_Label() {
			return this.get_labelElement().text();
		},
		set_label: function LabelToggleButton$set_Label(value) {
			this.get_labelElement().text(value);
			if (ss.isNullOrEmptyString(value)) {
				this.get_labelElement().addClass($spiff_LabelToggleButton.$hideClass);
			}
			else {
				this.get_labelElement().removeClass($spiff_LabelToggleButton.$hideClass);
			}
		},
		get_selected: function LabelToggleButton$get_Selected() {
			return $spiff_ToggleButton.prototype.get_selected.call(this);
		},
		set_selected: function LabelToggleButton$set_Selected(value) {
			if (this.get_selected() === value) {
				return;
			}
			var input = this.get_inputElement();
			if (ss.isValue(input)) {
				input.prop('checked', (value ? 'checked' : ''));
			}
			$spiff_ToggleButton.prototype.set_selected.call(this, value);
		},
		get_disabled: function LabelToggleButton$get_Disabled() {
			return $spiff_Button.prototype.get_disabled.call(this);
		},
		set_disabled: function LabelToggleButton$set_Disabled(value) {
			var input = this.get_inputElement();
			if (ss.isValue(input)) {
				input.prop('disabled', value);
			}
			$spiff_Button.prototype.set_disabled.call(this, value);
		}
	}, $spiff_ToggleButton, [tab.IWidget, tab.IAppendableView, ss.IDisposable, $spiff_ISelectable]);
	ss.initClass($spiff_LineEditWithButtonComponent, $asm, {
		handleBlur: function LineEditWithButtonComponent$HandleBlur(e) {
			if (this.props.blurBehavior === 0) {
				this.$resetText();
			}
			else if (this.props.blurBehavior === 1) {
				this.handleEnterPress();
			}
		},
		componentWillReceiveProps: function LineEditWithButtonComponent$ComponentWillReceiveProps(nextProps) {
			if (!ss.referenceEquals(this.props.initialValue, nextProps.initialValue)) {
				this.setState({ displayedText: nextProps.initialValue });
			}
		},
		$resetText: function LineEditWithButtonComponent$ResetText() {
			this.setState({ displayedText: this.props.initialValue });
		},
		$buildState: function LineEditWithButtonComponent$BuildState() {
			return { displayedText: (tab.MiscUtil.isNullOrEmpty$3(this.props.initialValue) ? '' : this.props.initialValue) };
		},
		handleInput: function LineEditWithButtonComponent$HandleInput(value) {
			if (this.props.inputFilter === 0) {
				value = ss.replaceAllString(value, ',', '');
				value = ss.replaceAllString(value, '.', '');
				value = ss.replaceAllString(value, '-', '');
				var result = {};
				if (ss.isNullOrEmptyString(value) || ss.Int32.tryParse(value, result)) {
					this.setState({ displayedText: value });
				}
			}
			else {
				this.setState({ displayedText: value });
			}
		},
		$handleKeyPress: function LineEditWithButtonComponent$HandleKeyPress(e) {
			if (e.keyCode === 27) {
				e.preventDefault();
				e.stopPropagation();
				this.$resetText();
			}
		},
		handleEnterPress: function LineEditWithButtonComponent$HandleEnterPress() {
			var valueToCommit = this.$getValueToCommit();
			if (!ss.staticEquals(this.props.onCommit, null)) {
				this.props.onCommit(valueToCommit);
			}
			if (this.props.blurBehavior === 0) {
				this.$resetText();
			}
			else if (!ss.referenceEquals(this.state.displayedText, valueToCommit)) {
				this.setState({ displayedText: valueToCommit });
			}
		},
		$getValueToCommit: function LineEditWithButtonComponent$GetValueToCommit() {
			var result = {};
			if (ss.Int32.tryParse(this.state.displayedText, result)) {
				return ((ss.isValue(this.props.maxValue) && ss.Nullable$1.gt(result.$, this.props.maxValue)) ? this.props.maxValue.toString() : this.state.displayedText);
			}
			else {
				return this.state.displayedText;
			}
		},
		render: function LineEditWithButtonComponent$Render() {
			var $t2 = this.$eventHandleSpec;
			var $t1 = new Object();
			$t1.iconClassName = 'confirmArrowIcon';
			$t1.customClassName = 'confirmButton';
			var confirmButton = EventUtils.EventForwarder.div($t2, { className: 'confirmButtonDiv' }, React.createElement($spiff_IconButtonComponent, $t1));
			var $t4 = this.state.displayedText;
			var $t5 = ss.mkdel(this, this.handleInput);
			var $t6 = ss.mkdel(this, this.handleEnterPress);
			var $t3 = this.props.maxLength;
			if (ss.isNullOrUndefined($t3)) {
				$t3 = $spiff_LineEditWithButtonComponent.$defaultMaxLength;
			}
			var inputTextBox = React.createElement(SharedWidgets.OutlineTextFieldWidget, { text: $t4, testId: 'lineEdit', handleChange: $t5, handleEnter: $t6, maxLength: $t3 });
			return $spiff_DOMElements.div({ className: 'lineEditWithButtonComponent', onKeyDown: ss.mkdel(this, this.$handleKeyPress), onBlur: ss.mkdel(this, this.handleBlur), style: { width: ss.coalesce(this.props.textBoxWidth, 'auto') } }, inputTextBox, confirmButton);
		}
	}, React.Component);
	ss.initClass($spiff_ListItemDragSource, $asm, {
		get_parentListView: function ListItemDragSource$get_ParentListView() {
			return this.$1$ParentListViewField;
		},
		set_parentListView: function ListItemDragSource$set_ParentListView(value) {
			this.$1$ParentListViewField = value;
		},
		get_draggableListItemView: function ListItemDragSource$get_DraggableListItemView() {
			return this.$1$DraggableListItemViewField;
		},
		set_draggableListItemView: function ListItemDragSource$set_DraggableListItemView(value) {
			this.$1$DraggableListItemViewField = value;
		},
		startDrag: function ListItemDragSource$StartDrag(e) {
			if (ss.isNullOrUndefined(this.get_parentListView()) || ss.isNullOrUndefined(this.get_draggableListItemView()) || ss.isNullOrUndefined(this.get_parentListView().get_dragFeedback())) {
				return null;
			}
			return this.get_parentListView().get_dragFeedback().startDrag(this.get_parentListView(), this.get_draggableListItemView());
		},
		acceptsDragType: function ListItemDragSource$AcceptsDragType() {
			return 1;
		}
	});
	ss.initClass($spiff_SelectableGroup, $asm, {
		add_selectionChanged: function SelectableGroup$add_SelectionChanged(value) {
			this.$1$SelectionChangedField = ss.delegateCombine(this.$1$SelectionChangedField, value);
		},
		remove_selectionChanged: function SelectableGroup$remove_SelectionChanged(value) {
			this.$1$SelectionChangedField = ss.delegateRemove(this.$1$SelectionChangedField, value);
		},
		get_selectedClass: function SelectableGroup$get_SelectedClass() {
			return this.$selectedClass;
		},
		set_selectedClass: function SelectableGroup$set_SelectedClass(value) {
			this.$selectedClass = value;
		},
		get_selectionType: function SelectableGroup$get_SelectionType() {
			return this.$selectionType;
		},
		set_selectionType: function SelectableGroup$set_SelectionType(value) {
			this.$selectionType = value;
		},
		get_items: function SelectableGroup$get_Items() {
			return this.$items;
		},
		get_selectedItems: function SelectableGroup$get_SelectedItems() {
			var selectedList = [];
			var $t1 = ss.getEnumerator(Object.keys(this.$selectedItems));
			try {
				while ($t1.moveNext()) {
					var key = $t1.current();
					selectedList.push(this.$selectedItems[key]);
				}
			}
			finally {
				$t1.dispose();
			}
			return selectedList;
		},
		get_selectedItem: function SelectableGroup$get_SelectedItem() {
			if (this.get_numberOfSelectedItems() === 0) {
				return null;
			}
			var firstKey = Object.keys(this.$selectedItems)[0];
			return this.$selectedItems[firstKey];
		},
		get_numberOfSelectedItems: function SelectableGroup$get_NumberOfSelectedItems() {
			return ss.getKeyCount(this.$selectedItems);
		},
		addItem: function SelectableGroup$AddItem(item) {
			item.set_selectedClass(this.$selectedClass);
			this.$items.push(item);
			if (item.get_selected()) {
				this.$selectItemInternal(item, false, false);
			}
			this.$addItemEventHandlers(item);
		},
		containsItem: function SelectableGroup$ContainsItem(item) {
			return ss.contains(this.get_items(), item);
		},
		dispose: function SelectableGroup$Dispose() {
			ss.clearKeys(this.$selectedItems);
			this.get_items().forEach(ss.mkdel(this, this.$removeItemEventHandlers));
			ss.clear(this.get_items());
		},
		onItemDisposed: function SelectableGroup$OnItemDisposed(sender, args) {
			var item = ss.cast(sender, $spiff_ISelectable);
			this.$removeItemEventHandlers(item);
			if (this.isItemSelected$1(item)) {
				delete this.$selectedItems[item.get_selectionId()];
			}
			ss.remove(this.$items, item);
		},
		$addItemEventHandlers: function SelectableGroup$AddItemEventHandlers(item) {
			item.add_selectableDisposed(ss.mkdel(this, this.onItemDisposed));
			item.add_selectedChanging(ss.mkdel(this, this.handleSelectionChanging));
			item.add_selectedChanged(ss.mkdel(this, this.handleSelectionChanged));
		},
		$removeItemEventHandlers: function SelectableGroup$RemoveItemEventHandlers(item) {
			item.remove_selectableDisposed(ss.mkdel(this, this.onItemDisposed));
			item.remove_selectedChanging(ss.mkdel(this, this.handleSelectionChanging));
			item.remove_selectedChanged(ss.mkdel(this, this.handleSelectionChanged));
		},
		selectAll: function SelectableGroup$SelectAll() {
			this.selectItems(this.get_items(), false);
		},
		isItemSelected$1: function SelectableGroup$IsItemSelected(item) {
			return ss.isValue(item) && ss.keyExists(this.$selectedItems, item.get_selectionId());
		},
		isItemSelected: function SelectableGroup$IsItemSelected(itemSelectionId) {
			return ss.keyExists(this.$selectedItems, itemSelectionId);
		},
		selectItem: function SelectableGroup$SelectItem(item) {
			this.$selectItemInternal(item, false, true);
		},
		selectSingleItem: function SelectableGroup$SelectSingleItem(item) {
			this.$selectItemInternal(item, true, true);
		},
		$selectItemInternal: function SelectableGroup$SelectItemInternal(item, forceSingleSelection, fireChangeEvent) {
			var changed = false;
			if (forceSingleSelection || this.get_selectionType() === 0) {
				changed = this.$doClearSelection(item);
			}
			changed = this.$doSelectItem(item) || changed;
			if (fireChangeEvent && changed) {
				this.$raiseSelectionChanged();
			}
		},
		selectItems: function SelectableGroup$SelectItems(itemsToSelect, unselectOthers) {
			switch (this.get_selectionType()) {
				case 0: {
					var item = ((ss.isValue(itemsToSelect) && itemsToSelect.length > 0) ? itemsToSelect[0] : null);
					this.selectItem(item);
					break;
				}
				case 1:
				case 2: {
					var changed = false;
					if (unselectOthers) {
						changed = this.$doClearSelection(null);
					}
					if (ss.isValue(itemsToSelect)) {
						for (var i = 0, len = itemsToSelect.length; i < len; i++) {
							changed = this.$doSelectItem(itemsToSelect[i]) || changed;
						}
					}
					if (changed) {
						this.$raiseSelectionChanged();
					}
					break;
				}
			}
		},
		$doSelectItem: function SelectableGroup$DoSelectItem(item) {
			if (ss.isNullOrUndefined(item)) {
				return false;
			}
			ss.Debug.assert(ss.isValue(item.get_selectionId()), 'ISelectable requires a SelectionId');
			if (ss.isNullOrUndefined(item.get_selectionId())) {
				return false;
			}
			if (this.isItemSelected$1(item)) {
				return false;
			}
			if (!this.containsItem(item)) {
				ss.Debug.assert(false, "Can't select an item that hasn't been added to the group");
				return false;
			}
			this.$selectedItems[item.get_selectionId()] = item;
			item.set_selected(true);
			return true;
		},
		clearSelection: function SelectableGroup$ClearSelection(itemToRemainSelected) {
			if (this.$doClearSelection(itemToRemainSelected)) {
				this.$raiseSelectionChanged();
			}
		},
		$doClearSelection: function SelectableGroup$DoClearSelection(itemToRemainSelected) {
			var oldSelectedCount = ss.getKeyCount(this.$selectedItems);
			var $t1 = ss.getEnumerator(Object.keys(this.$selectedItems));
			try {
				while ($t1.moveNext()) {
					var key = $t1.current();
					if (ss.isValue(itemToRemainSelected) && ss.referenceEquals(key, itemToRemainSelected.get_selectionId())) {
						continue;
					}
					this.$doUnselectItem(this.$selectedItems[key]);
				}
			}
			finally {
				$t1.dispose();
			}
			return oldSelectedCount > 0 && ss.getKeyCount(this.$selectedItems) !== oldSelectedCount;
		},
		unselectItem: function SelectableGroup$UnselectItem(item) {
			if (!this.isItemSelected$1(item)) {
				return;
			}
			this.$doUnselectItem(item);
			this.$raiseSelectionChanged();
		},
		$doUnselectItem: function SelectableGroup$DoUnselectItem(item) {
			delete this.$selectedItems[item.get_selectionId()];
			item.set_selected(false);
		},
		handleSelectionChanging: function SelectableGroup$HandleSelectionChanging(sender, selectArgs) {
			var item = ss.cast(sender, $spiff_ISelectable);
			if (selectArgs.get_selecting()) {
				this.selectItem(item);
			}
			else if (this.get_selectionType() !== 0) {
				this.unselectItem(item);
			}
			else if (ss.referenceEquals(this.get_selectedItem(), item)) {
				selectArgs.cancel = true;
			}
		},
		handleSelectionChanged: function SelectableGroup$HandleSelectionChanged(sender, args) {
			var item = ss.cast(sender, $spiff_ISelectable);
			var isSelected = this.isItemSelected$1(item);
			if (item.get_selected() && !isSelected) {
				this.$doSelectItem(item);
			}
			else if (!item.get_selected() && isSelected) {
				this.$doUnselectItem(item);
			}
		},
		$raiseSelectionChanged: function SelectableGroup$RaiseSelectionChanged() {
			if (!ss.staticEquals(this.$1$SelectionChangedField, null)) {
				this.$1$SelectionChangedField();
			}
		}
	}, null, [ss.IDisposable]);
	ss.initClass($spiff_ListItemGroup, $asm, {
		$setAnchor$1: function ListItemGroup$SetAnchor(item) {
			this.$setAnchor(ss.indexOf(this.get_items(), item));
		},
		$setAnchor: function ListItemGroup$SetAnchor(index) {
			if (index < 0 || index >= this.get_items().length) {
				return;
			}
			this.$anchorIndex = index;
			this.$rangeAnchorIndex = null;
		},
		$clearAnchor: function ListItemGroup$ClearAnchor() {
			this.$anchorIndex = null;
			this.$rangeAnchorIndex = null;
		},
		addItem: function ListItemGroup$AddItem(item) {
			$spiff_SelectableGroup.prototype.addItem.call(this, item);
			if (item.get_selected() && ss.isNullOrUndefined(this.$anchorIndex) && this.get_selectionType() === 0) {
				this.$setAnchor$1(item);
			}
		},
		onItemDisposed: function ListItemGroup$OnItemDisposed(sender, args) {
			this.$clearAnchor();
			$spiff_SelectableGroup.prototype.onItemDisposed.call(this, sender, args);
		},
		dispose: function ListItemGroup$Dispose() {
			this.$clearAnchor();
			$spiff_SelectableGroup.prototype.dispose.call(this);
		},
		selectItem: function ListItemGroup$SelectItem(item) {
			this.selectItemAtIndex(ss.indexOf(this.get_items(), item));
		},
		selectSingleItem: function ListItemGroup$SelectSingleItem(item) {
			var index = ss.indexOf(this.get_items(), item);
			if (index < 0) {
				return;
			}
			$spiff_SelectableGroup.prototype.selectSingleItem.call(this, item);
			this.$setAnchor(index);
		},
		selectItemAtIndex: function ListItemGroup$SelectItemAtIndex(index) {
			ss.Debug.assert(index >= 0 && index < this.get_items().length, 'invalid index');
			$spiff_SelectableGroup.prototype.selectItem.call(this, this.get_items()[index]);
			this.$setAnchor(index);
		},
		selectItems: function ListItemGroup$SelectItems(itemsToSelect, unselectOthers) {
			this.$selectItemsInternal(itemsToSelect, unselectOthers);
			this.$rangeAnchorIndex = null;
		},
		$selectItemsInternal: function ListItemGroup$SelectItemsInternal(itemsToSelect, unselectOthers) {
			$spiff_SelectableGroup.prototype.selectItems.call(this, itemsToSelect, unselectOthers);
		},
		clearSelection: function ListItemGroup$ClearSelection(itemToRemainSelected) {
			$spiff_SelectableGroup.prototype.clearSelection.call(this, itemToRemainSelected);
			this.$clearAnchor();
		},
		selectItemForKey: function ListItemGroup$SelectItemForKey(key, shiftKey) {
			if (this.get_selectionType() === 2) {
				return null;
			}
			if (!ss.isValue(this.$anchorIndex)) {
				return null;
			}
			var keyUpArrow = key === 38;
			var keyDownArrow = key === 40;
			if (keyUpArrow || keyDownArrow) {
				if (!this.get_items()[ss.unbox(this.$anchorIndex)].get_selected()) {
					this.selectItem(this.get_items()[ss.unbox(this.$anchorIndex)]);
				}
				var newAnchor = ss.unbox(this.$anchorIndex) + (keyUpArrow ? -1 : 1);
				if (newAnchor < 0 || newAnchor >= this.get_items().length) {
					return null;
				}
				if (this.get_selectionType() === 1 && shiftKey) {
					var newRangeAnchorIndex = this.$rangeAnchorIndex;
					if (ss.isValue(this.$rangeAnchorIndex)) {
						var min = Math.min(ss.unbox(this.$rangeAnchorIndex), ss.unbox(this.$anchorIndex));
						var max = Math.max(ss.unbox(this.$rangeAnchorIndex), ss.unbox(this.$anchorIndex));
						if (newAnchor >= min && newAnchor <= max) {
							this.unselectItem(this.get_items()[ss.unbox(this.$anchorIndex)]);
						}
					}
					else {
						newRangeAnchorIndex = this.$anchorIndex;
					}
					this.selectItem(this.get_items()[newAnchor]);
					this.$rangeAnchorIndex = newRangeAnchorIndex;
				}
				else {
					this.selectSingleItem(this.get_items()[newAnchor]);
					this.$rangeAnchorIndex = null;
				}
				this.$anchorIndex = newAnchor;
				return this.get_items()[newAnchor];
			}
			return null;
		},
		handleSelectionChanging: function ListItemGroup$HandleSelectionChanging(sender, selectArgs) {
			var item = ss.cast(sender, $spiff_ISelectable);
			var newAnchor = ss.indexOf(this.get_items(), item);
			if (newAnchor < 0) {
				return;
			}
			if (this.get_selectionType() === 0) {
				$spiff_SelectableGroup.prototype.handleSelectionChanging.call(this, sender, selectArgs);
				return;
			}
			var prevAnchor = this.$anchorIndex;
			var prevRangeAnchor = this.$rangeAnchorIndex;
			this.$setAnchor(newAnchor);
			if (this.get_selectionType() === 2 || selectArgs.get_ctrlKey()) {
				if (selectArgs.get_selecting()) {
					this.selectItem(item);
				}
				else {
					this.unselectItem(item);
				}
				return;
			}
			if (selectArgs.get_shiftKey() && (ss.isValue(prevAnchor) || ss.isValue(prevRangeAnchor))) {
				this.$rangeAnchorIndex = ss.coalesce(prevRangeAnchor, prevAnchor);
				var min = Math.min(ss.unbox(this.$rangeAnchorIndex), ss.unbox(this.$anchorIndex));
				var max = Math.max(ss.unbox(this.$rangeAnchorIndex), ss.unbox(this.$anchorIndex));
				var items = [];
				for (var i = min; i <= max; i++) {
					items.push(this.get_items()[i]);
				}
				this.$selectItemsInternal(items, true);
				selectArgs.cancel = true;
				return;
			}
			this.selectSingleItem(item);
			if (ss.referenceEquals(this.get_selectedItem(), item)) {
				selectArgs.cancel = true;
			}
		},
		handleSelectionChanged: function ListItemGroup$HandleSelectionChanged(sender, args) {
			$spiff_SelectableGroup.prototype.handleSelectionChanged.call(this, sender, args);
			this.$setAnchor$1(ss.cast(sender, $spiff_ISelectable));
		}
	}, $spiff_SelectableGroup, [ss.IDisposable]);
	ss.initClass($spiff_ListItemView, $asm, {
		get_viewModel: function ListItemView$get_ViewModel() {
			return this.$viewModel;
		},
		get_selected: function ListItemView$get_Selected() {
			return (this.addedToDom ? $spiff_ToggleButton.prototype.get_selected.call(this) : this.$viewModel.get_selected());
		},
		set_selected: function ListItemView$set_Selected(value) {
			$spiff_ToggleButton.prototype.set_selected.call(this, value);
			this.get_viewModel().set_selected(value);
		},
		get_isInvalid: function ListItemView$get_IsInvalid() {
			return this.$viewModel.get_isInvalid();
		},
		set_isInvalid: function ListItemView$set_IsInvalid(value) {
			this.$contentElement.toggleClass($spiff_ListItemView.invalidClass, value);
			this.get_viewModel().set_isInvalid(value);
		},
		get_isBold: function ListItemView$get_IsBold() {
			return this.$viewModel.get_isBold();
		},
		set_isBold: function ListItemView$set_IsBold(value) {
			this.$contentElement.toggleClass($spiff_ListItemView.boldClass, value);
			this.get_viewModel().set_isBold(value);
		},
		get_disabled: function ListItemView$get_Disabled() {
			return $spiff_Button.prototype.get_disabled.call(this);
		},
		set_disabled: function ListItemView$set_Disabled(value) {
			this.$contentElement.toggleClass(this.get_disabledClass(), value);
			$spiff_Button.prototype.set_disabled.call(this, value);
		},
		init: function ListItemView$Init() {
			this.set_selected(this.$viewModel.get_selected());
		},
		$onViewModelChange: function ListItemView$OnViewModelChange(sender, e) {
			switch (e.get_propertyName()) {
				case 'selected': {
					this.set_selected(this.get_viewModel().get_selected());
					break;
				}
				case 'invalid': {
					this.set_isInvalid(this.get_viewModel().get_isInvalid());
					break;
				}
				case 'bold': {
					this.set_isBold(this.get_viewModel().get_isBold());
					break;
				}
				case 'spotlighted': {
					this.element.toggleClass($spiff_ListItemView.listItemSpotlightedClassName, this.get_viewModel().get_spotlighted());
					break;
				}
			}
		}
	}, $spiff_ToggleButton, [tab.IWidget, tab.IAppendableView, ss.IDisposable, $spiff_ISelectable]);
	ss.initClass($spiff_ListItemViewModel, $asm, {
		get_id: function ListItemViewModel$get_Id() {
			return this.$id;
		},
		get_data: function ListItemViewModel$get_Data() {
			return this.$data;
		},
		get_selected: function ListItemViewModel$get_Selected() {
			return this.$selected;
		},
		set_selected: function ListItemViewModel$set_Selected(value) {
			if (this.$selected === value) {
				return;
			}
			this.$selected = value;
			this.notifyPropertyChanged($spiff_ListItemViewModel.selectedProperty);
		},
		get_isInvalid: function ListItemViewModel$get_IsInvalid() {
			return this.$isInvalid;
		},
		set_isInvalid: function ListItemViewModel$set_IsInvalid(value) {
			if (this.$isInvalid === value) {
				return;
			}
			this.$isInvalid = value;
			this.notifyPropertyChanged($spiff_ListItemViewModel.invalidProperty);
		},
		get_isBold: function ListItemViewModel$get_IsBold() {
			return this.$isBold;
		},
		set_isBold: function ListItemViewModel$set_IsBold(value) {
			if (this.$isBold === value) {
				return;
			}
			this.$isBold = value;
			this.notifyPropertyChanged($spiff_ListItemViewModel.boldProperty);
		},
		get_draggable: function ListItemViewModel$get_Draggable() {
			return this.$draggable;
		},
		set_draggable: function ListItemViewModel$set_Draggable(value) {
			if (this.$draggable === value) {
				return;
			}
			this.$draggable = value;
			this.notifyPropertyChanged($spiff_ListItemViewModel.draggableProperty);
		},
		get_spotlighted: function ListItemViewModel$get_Spotlighted() {
			return this.$spotlighted;
		},
		set_spotlighted: function ListItemViewModel$set_Spotlighted(value) {
			if (this.$spotlighted === value) {
				return;
			}
			this.$spotlighted = value;
			this.notifyPropertyChanged($spiff_ListItemViewModel.spotlightedProperty);
		}
	}, $spiff_BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($spiff_ListItemViewModelCollectionBuilder, $asm, {
		create: function ListItemViewModelCollectionBuilder$Create() {
			this.$validateInput();
			var listItemVMs = [];
			for (var listIndex = 0, valuesCount = this.itemDatas.length; listIndex < valuesCount; listIndex++) {
				var itemId = this.itemIds[listIndex];
				var isSelected = (ss.isValue(this.selectionIndexes) ? ss.contains(this.selectionIndexes, listIndex) : false);
				var isInvalid = (ss.isValue(this.invalidIndexes) ? ss.contains(this.invalidIndexes, listIndex) : false);
				var itemData = this.itemDatas[listIndex];
				var $t1 = new $spiff_ListItemViewModel(itemId, itemData, isSelected, isInvalid, false);
				$t1.set_draggable(valuesCount > 1);
				var itemViewModel = $t1;
				listItemVMs.push(itemViewModel);
			}
			return listItemVMs;
		},
		$validateInput: function ListItemViewModelCollectionBuilder$ValidateInput() {
			tab.Param.verifyValue(this.itemDatas, 'ItemDatas');
			tab.Param.verifyValue(this.itemIds, 'ItemIds');
			ss.Debug.assert(this.itemDatas.length === this.itemIds.length, 'itemDatas and itemIds not allowed to have different number of items');
		}
	});
	ss.initClass($spiff_ListView, $asm, {
		get_dragFeedback: function ListView$get_DragFeedback() {
			return this.$3$DragFeedbackField;
		},
		set_dragFeedback: function ListView$set_DragFeedback(value) {
			this.$3$DragFeedbackField = value;
		},
		add_listItemsUpdated: function ListView$add_ListItemsUpdated(value) {
			this.$3$ListItemsUpdatedField = ss.delegateCombine(this.$3$ListItemsUpdatedField, value);
		},
		remove_listItemsUpdated: function ListView$remove_ListItemsUpdated(value) {
			this.$3$ListItemsUpdatedField = ss.delegateRemove(this.$3$ListItemsUpdatedField, value);
		},
		get_dom: function ListView$get_Dom() {
			return ss.cast(this.get_template(), $spiff_ListViewTemplate);
		},
		get_domRoot: function ListView$get_DomRoot() {
			return this.get_dom().domRoot;
		},
		get_itemViews: function ListView$get_ItemViews() {
			return this.$itemViews;
		},
		get_$firstItemOffsetTop: function ListView$get_FirstItemOffsetTop() {
			return ((this.$itemViews.length > 0) ? this.$itemViews[0].element[0].offsetTop : 0);
		},
		get_scrollerPosition: function ListView$get_ScrollerPosition() {
			return this.get_scrollHandler().get_scrollViewPagePosition();
		},
		get_scrollerSize: function ListView$get_ScrollerSize() {
			return this.get_scrollHandler().get_scrollViewSize();
		},
		get_scrollHandler: function ListView$get_ScrollHandler() {
			return this.$scrollHandler;
		},
		set_scrollHandler: function ListView$set_ScrollHandler(value) {
			this.$scrollHandler = value || new $spiff_$DefaultListViewScrollHandler(this.element);
		},
		useScrollableView: function ListView$UseScrollableView(sv) {
			this.set_scrollHandler(new $spiff_$ScrollableViewListViewScrollHandler(sv));
		},
		$buildListItems: function ListView$BuildListItems() {
			var startTime = new Date();
			for (var i = 0; i < this.get_viewModel().get_collection().length; i++) {
				var itemViewModel = { $: this.get_viewModel().get_collection()[i] };
				if (ss.isValue(itemViewModel.$)) {
					var contentElement = this.$itemCreator.createListItemContent(itemViewModel.$);
					var itemView = new $spiff_ListItemView(contentElement, itemViewModel.$);
					itemView.init();
					itemView.onDoubleClick(ss.mkdel(this, this.$handleDoubleClickItem));
					itemView.set_disabled(!this.get_viewModel().get_enabled());
					itemView.set_isInvalid(itemViewModel.$.get_isInvalid());
					itemView.set_isBold(itemViewModel.$.get_isBold());
					itemView.onMouseEnter(ss.mkdel({ itemViewModel: itemViewModel, $this: this }, function(button) {
						this.$this.$handleListItemMouseEnter(this.itemViewModel.$);
					}));
					itemView.onMouseMove(ss.mkdel({ itemViewModel: itemViewModel, $this: this }, function(button1) {
						this.$this.$handleListItemMouseMove(this.itemViewModel.$);
					}));
					this.$updateItemDraggableState(itemView);
					this.$itemViews.push(itemView);
					this.get_viewModel().addItemToGroup(itemView);
					itemView.addToDom(this.get_dom().get_listItemContainer());
					itemViewModel.$.add_propertyChanged(ss.mkdel(this, this.$onItemViewModelPropertyChanged));
				}
			}
			var endTime = new Date();
			tab.Log.get(this).debug('Time to render list: ' + (endTime - startTime) + 'ms', []);
			this.$raiseEvent(this.$3$ListItemsUpdatedField);
		},
		$handleSelectionModelUpdated: function ListView$HandleSelectionModelUpdated(topMostIndex) {
			if (!ss.isValue(topMostIndex)) {
				return;
			}
			this.$showItem(this.$itemViews[ss.unbox(topMostIndex)]);
		},
		$handleSpotlightedItemChanged: function ListView$HandleSpotlightedItemChanged(spotlightedItemIndex) {
			if (ss.isValue(spotlightedItemIndex)) {
				this.$showItem(this.$itemViews[ss.unbox(spotlightedItemIndex)]);
			}
		},
		$handleDoubleClickItem: function ListView$HandleDoubleClickItem(itemView) {
			this.get_viewModel().selectionSubmitted();
		},
		$handleListItemMouseEnter: function ListView$HandleListItemMouseEnter(item) {
			this.get_viewModel().handleListItemMouseEnter(item);
		},
		$handleListItemMouseMove: function ListView$HandleListItemMouseMove(item) {
			this.get_viewModel().handleListItemMouseMove(item);
		},
		$handleKeyPress: function ListView$HandleKeyPress(e) {
			var item = ss.cast(this.get_viewModel().get_listItemGroup().selectItemForKey(e.which, e.shiftKey), $spiff_ListItemView);
			if (ss.isValue(item)) {
				$spiff_EventUtil.stopEvent$2(e);
				this.$showItem(item);
			}
		},
		onViewModelPropertyChanged: function ListView$OnViewModelPropertyChanged(sender, e) {
			if (ss.referenceEquals(e.get_propertyName(), $spiff_ListViewModel.collectionProperty)) {
				this.$disposeItemButtons();
				this.get_dom().get_listItemContainer().empty();
				this.$buildListItems();
			}
			else if (ss.referenceEquals(e.get_propertyName(), $spiff_ListViewModel.enabledProperty)) {
				this.$itemViews.forEach(ss.mkdel(this, function(item) {
					item.set_disabled(!this.get_viewModel().get_enabled());
					this.$updateItemDraggableState(item);
				}));
			}
			ss.makeGenericType($spiff_BaseView$1, [$spiff_ListViewModel]).prototype.onViewModelPropertyChanged.call(this, sender, e);
		},
		$onItemViewModelPropertyChanged: function ListView$OnItemViewModelPropertyChanged(sender, e) {
			if (ss.referenceEquals(e.get_propertyName(), $spiff_ListItemViewModel.draggableProperty)) {
				var itemView = this.$findItemViewForItemViewModel(ss.cast(sender, $spiff_ListItemViewModel));
				this.$updateItemDraggableState(itemView);
			}
		},
		$updateItemDraggableState: function ListView$UpdateItemDraggableState(itemView) {
			if (itemView.get_viewModel().get_draggable() && !itemView.get_disabled()) {
				itemView.element.addClass('tabDraggable');
				EventUtils.DragDropManager.attachDragSource(itemView.element, new $spiff_ListItemDragSource(this, itemView));
			}
			else {
				itemView.element.removeClass('tabDraggable');
				EventUtils.DragDropManager.removeDragSource(itemView.element);
			}
		},
		tabIndex: function ListView$TabIndex(index) {
			this.get_dom().get_listItemContainer().attr('tabindex', index.toString());
			return this;
		},
		showItemAtIndex: function ListView$ShowItemAtIndex(index) {
			ss.Debug.assert(index >= 0 && index < this.get_itemViews().length, 'invalid item index');
			this.$showItem(this.get_itemViews()[index]);
		},
		$showItem: function ListView$ShowItem(itemView) {
			if (ss.isNullOrUndefined(itemView)) {
				return;
			}
			var item = itemView.element[0];
			this.$scrollHandler.scrollToElement(item, this.get_$firstItemOffsetTop());
		},
		$moveListItem: function ListView$MoveListItem(itemIndex, moveToIndex) {
			if (itemIndex === moveToIndex || itemIndex < 0 || itemIndex >= this.get_itemViews().length || moveToIndex < 0 || moveToIndex >= this.get_itemViews().length) {
				return;
			}
			var itemView = this.get_itemViews()[itemIndex];
			itemView.element.hide();
			if (moveToIndex < itemIndex) {
				itemView.element.insertBefore(this.get_itemViews()[moveToIndex].element);
			}
			else {
				itemView.element.insertAfter(this.get_itemViews()[moveToIndex].element);
			}
			itemView.element.fadeIn();
			ss.removeAt(this.get_itemViews(), itemIndex);
			ss.insert(this.get_itemViews(), moveToIndex, itemView);
		},
		dispose: function ListView$Dispose() {
			this.get_viewModel().remove_selectionModelUpdated(ss.mkdel(this, this.$handleSelectionModelUpdated));
			this.get_viewModel().remove_itemMoved(ss.mkdel(this, this.$moveListItem));
			this.$disposeItemButtons();
			ss.makeGenericType($spiff_BaseView$1, [$spiff_ListViewModel]).prototype.dispose.call(this);
		},
		$disposeItemButtons: function ListView$DisposeItemButtons() {
			this.$itemViews.forEach(ss.mkdel(this, function(itemView) {
				itemView.get_viewModel().remove_propertyChanged(ss.mkdel(this, this.$onItemViewModelPropertyChanged));
				itemView.dispose();
			}));
			ss.clear(this.$itemViews);
		},
		$raiseEvent: function ListView$RaiseEvent(callback) {
			if (ss.isValue(callback)) {
				callback();
			}
		},
		$findItemViewForItemViewModel: function ListView$FindItemViewForItemViewModel(itemViewModel) {
			for (var i = 0, len = this.$itemViews.length; i < len; i++) {
				if (ss.referenceEquals(this.$itemViews[i].get_selectionId(), itemViewModel.get_id())) {
					return this.$itemViews[i];
				}
			}
			return null;
		}
	}, ss.makeGenericType($spiff_BaseView$1, [$spiff_ListViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$spiff_ListViewModel])]);
	ss.initClass($spiff_ListViewDragSortFeedback, $asm, {
		add_dragStarting: function ListViewDragSortFeedback$add_DragStarting(value) {
			this.$1$DragStartingField = ss.delegateCombine(this.$1$DragStartingField, value);
		},
		remove_dragStarting: function ListViewDragSortFeedback$remove_DragStarting(value) {
			this.$1$DragStartingField = ss.delegateRemove(this.$1$DragStartingField, value);
		},
		add_dragEnded: function ListViewDragSortFeedback$add_DragEnded(value) {
			this.$1$DragEndedField = ss.delegateCombine(this.$1$DragEndedField, value);
		},
		remove_dragEnded: function ListViewDragSortFeedback$remove_DragEnded(value) {
			this.$1$DragEndedField = ss.delegateRemove(this.$1$DragEndedField, value);
		},
		get_dragClassName: function ListViewDragSortFeedback$get_DragClassName() {
			return this.$dragClassName;
		},
		set_dragClassName: function ListViewDragSortFeedback$set_DragClassName(value) {
			this.$dragClassName = value;
		},
		get_dragHoverClassName: function ListViewDragSortFeedback$get_DragHoverClassName() {
			return this.$dragHoverClassName;
		},
		set_dragHoverClassName: function ListViewDragSortFeedback$set_DragHoverClassName(value) {
			this.$dragHoverClassName = value;
		},
		get_avatarCreator: function ListViewDragSortFeedback$get_AvatarCreator() {
			return this.$1$AvatarCreatorField;
		},
		set_avatarCreator: function ListViewDragSortFeedback$set_AvatarCreator(value) {
			this.$1$AvatarCreatorField = value;
		},
		dispose: function ListViewDragSortFeedback$Dispose() {
			EventUtils.DragDropManager.remove_dragStarted(ss.mkdel(this, this.$onDragStarted));
			EventUtils.DragDropManager.remove_dragEnded(ss.mkdel(this, this.$onDragEnded));
			this.$removeInsertionFeedback();
			this.$clearDragTimer();
		},
		startDrag: function ListViewDragSortFeedback$StartDrag(dragListView, draggedListItem) {
			if (ss.isNullOrUndefined(dragListView) || ss.isNullOrUndefined(dragListView.get_itemViews())) {
				return null;
			}
			var itemIndex = ss.indexOf(dragListView.get_itemViews(), draggedListItem);
			if (itemIndex < 0) {
				return null;
			}
			this.$initDragInfo(dragListView, itemIndex);
			ss.Debug.assert(ss.isValue(this.$draggedElem), 'draggedElem was not properly initialized');
			ss.Debug.assert(ss.isValue(this.$draggedItemViewModel), 'draggedItemViewModel was not properly initialized');
			this.$initInsertionPointer(tab.DoubleUtil.roundToInt(this.$draggedElem.outerWidth()));
			this.$draggedElem.toggleClass(this.get_dragClassName(), true);
			this.$showInsertionFeedback();
			if (!ss.staticEquals(this.$1$DragStartingField, null)) {
				this.$1$DragStartingField(this.$draggedItemViewModel);
			}
			EventUtils.DragDropManager.add_dragStarted(ss.mkdel(this, this.$onDragStarted));
			EventUtils.DragDropManager.add_dragEnded(ss.mkdel(this, this.$onDragEnded));
			var avatar = this.$createAvatar(dragListView.get_itemViews()[itemIndex]);
			return new $spiff_MoveDragInstance(this.$draggedElem, ss.mkdel(this, this.$handleItemDrag), ss.mkdel(this, this.$handleItemDragEnd), avatar);
		},
		$initDragInfo: function ListViewDragSortFeedback$InitDragInfo(dragListView, itemIndex) {
			this.$listView = dragListView;
			this.$numListItems = this.$listView.get_itemViews().length;
			this.$listTopPageY = this.$listView.get_scrollerPosition().y;
			this.$listBottomPageY = this.$listTopPageY + this.$listView.get_scrollerSize().h;
			this.$startIndex = itemIndex;
			this.$moveToIndex = itemIndex;
			var itemView = dragListView.get_itemViews()[itemIndex];
			this.$draggedItemViewModel = itemView.get_viewModel();
			this.$draggedElem = itemView.element;
		},
		$initInsertionPointer: function ListViewDragSortFeedback$InitInsertionPointer(width) {
			this.$insertionPointerElem = this.$createInsertionPointerElem(width).appendTo($('body')).hide();
			this.$insertionPointerYOffset = ss.Int32.div(tab.DoubleUtil.roundToInt(this.$insertionPointerElem.outerHeight()), 2);
		},
		$createInsertionPointerElem: function ListViewDragSortFeedback$CreateInsertionPointerElem(width) {
			return $("<div class='tab-list-item-insertion-pointer'>").width(width);
		},
		$createAvatar: function ListViewDragSortFeedback$CreateAvatar(itemView) {
			if (ss.isValue(this.get_avatarCreator())) {
				return this.get_avatarCreator().createListItemDragAvatar(itemView.get_viewModel());
			}
			return new $spiff_DragSortListItemDragAvatar(itemView);
		},
		$onDragStarted: function ListViewDragSortFeedback$OnDragStarted(dragInstance) {
			EventUtils.DragDropManager.remove_dragStarted(ss.mkdel(this, this.$onDragStarted));
			EventUtils.DragDropManager.setDragCursor(new $spiff_CustomCursor(null, 'move'));
			EventUtils.DragDropManager.setDragCursor(new $spiff_CustomCursor(null, '-webkit-grabbing'));
			EventUtils.DragDropManager.setDragCursor(new $spiff_CustomCursor(null, '-moz-grabbing'));
			EventUtils.DragDropManager.setDragCursor(new $spiff_CustomCursor(null, 'grabbing'));
		},
		$onDragEnded: function ListViewDragSortFeedback$OnDragEnded(result) {
			EventUtils.DragDropManager.remove_dragEnded(ss.mkdel(this, this.$onDragEnded));
			this.$clearDragTimer();
			this.$removeInsertionFeedback();
		},
		$handleItemDrag: function ListViewDragSortFeedback$HandleItemDrag(e) {
			if (ss.isNullOrUndefined(this.$draggedElem)) {
				return;
			}
			this.$clearDragTimer();
			var moveToElem = this.$listView.get_itemViews()[this.$moveToIndex].element;
			var moveToItemPagePt = tab.DomUtil.getElementPosition(moveToElem);
			var movingUp = this.$moveToIndex > 0 && (e.pageY < this.$listTopPageY || e.pageY < moveToItemPagePt.y);
			var movingDown = this.$moveToIndex < this.$numListItems - 1 && (e.pageY > this.$listBottomPageY || e.pageY > moveToItemPagePt.y + moveToElem.outerHeight());
			if (!movingUp && !movingDown) {
				return;
			}
			var offset = (movingUp ? -1 : 1);
			this.$moveToIndex += offset;
			this.$listView.showItemAtIndex(this.$moveToIndex);
			this.$showInsertionFeedback();
			this.$dragTimer = window.setTimeout(ss.mkdel(this, function() {
				this.$handleItemDrag(EventUtils.DragDropManager.get_lastDragEvent());
			}), $spiff_ListViewDragSortFeedback.$dragScrollTimeout);
		},
		$showInsertionFeedback: function ListViewDragSortFeedback$ShowInsertionFeedback() {
			ss.Debug.assert(this.$moveToIndex >= 0 && this.$moveToIndex < this.$numListItems, 'invalid dragged item index');
			if (this.$moveToIndex === this.$startIndex) {
				this.$insertionPointerElem.hide();
				this.$draggedElem.toggleClass(this.get_dragHoverClassName(), true);
				return;
			}
			this.$draggedElem.toggleClass(this.get_dragHoverClassName(), false);
			var moveToElem = this.$listView.get_itemViews()[this.$moveToIndex].element;
			var insertionCoord = tab.DomUtil.getElementPosition(moveToElem);
			if (this.$moveToIndex > this.$startIndex) {
				insertionCoord.y += tab.DoubleUtil.roundToInt(moveToElem.outerHeight());
			}
			tab.DomUtil.setElementPosition(this.$insertionPointerElem, insertionCoord.x, insertionCoord.y - this.$insertionPointerYOffset, null, false);
			this.$insertionPointerElem.show();
		},
		$handleItemDragEnd: function ListViewDragSortFeedback$HandleItemDragEnd(e) {
			this.$clearDragTimer();
			this.$removeInsertionFeedback();
			if (this.$startIndex !== this.$moveToIndex) {
				this.$listView.get_viewModel().moveItem(this.$startIndex, this.$moveToIndex);
			}
			if (!ss.staticEquals(this.$1$DragEndedField, null)) {
				this.$1$DragEndedField(this.$draggedItemViewModel, this.$startIndex !== this.$moveToIndex);
			}
		},
		$removeInsertionFeedback: function ListViewDragSortFeedback$RemoveInsertionFeedback() {
			if (ss.isValue(this.$insertionPointerElem)) {
				this.$insertionPointerElem.remove();
				this.$insertionPointerElem = null;
			}
			if (ss.isValue(this.$draggedElem)) {
				this.$draggedElem.removeClass(this.get_dragHoverClassName());
				this.$draggedElem.removeClass(this.get_dragClassName());
				this.$draggedElem = null;
			}
		},
		$clearDragTimer: function ListViewDragSortFeedback$ClearDragTimer() {
			this.$dragTimer = tab.MiscUtil.clearTimeout(this.$dragTimer);
		}
	}, null, [$spiff_IListViewDragFeedback, ss.IDisposable]);
	ss.initClass($spiff_ListViewModel, $asm, {
		add_propsUpdated: function ListViewModel$add_PropsUpdated(value) {
			this.$2$PropsUpdatedField = ss.delegateCombine(this.$2$PropsUpdatedField, value);
		},
		remove_propsUpdated: function ListViewModel$remove_PropsUpdated(value) {
			this.$2$PropsUpdatedField = ss.delegateRemove(this.$2$PropsUpdatedField, value);
		},
		add_selectionChanged: function ListViewModel$add_SelectionChanged(value) {
			this.$2$SelectionChangedField = ss.delegateCombine(this.$2$SelectionChangedField, value);
		},
		remove_selectionChanged: function ListViewModel$remove_SelectionChanged(value) {
			this.$2$SelectionChangedField = ss.delegateRemove(this.$2$SelectionChangedField, value);
		},
		add_submitSelection: function ListViewModel$add_SubmitSelection(value) {
			this.$2$SubmitSelectionField = ss.delegateCombine(this.$2$SubmitSelectionField, value);
		},
		remove_submitSelection: function ListViewModel$remove_SubmitSelection(value) {
			this.$2$SubmitSelectionField = ss.delegateRemove(this.$2$SubmitSelectionField, value);
		},
		add_listItemMouseEnter: function ListViewModel$add_ListItemMouseEnter(value) {
			this.$2$ListItemMouseEnterField = ss.delegateCombine(this.$2$ListItemMouseEnterField, value);
		},
		remove_listItemMouseEnter: function ListViewModel$remove_ListItemMouseEnter(value) {
			this.$2$ListItemMouseEnterField = ss.delegateRemove(this.$2$ListItemMouseEnterField, value);
		},
		add_listItemMouseMove: function ListViewModel$add_ListItemMouseMove(value) {
			this.$2$ListItemMouseMoveField = ss.delegateCombine(this.$2$ListItemMouseMoveField, value);
		},
		remove_listItemMouseMove: function ListViewModel$remove_ListItemMouseMove(value) {
			this.$2$ListItemMouseMoveField = ss.delegateRemove(this.$2$ListItemMouseMoveField, value);
		},
		add_selectionModelUpdated: function ListViewModel$add_SelectionModelUpdated(value) {
			this.$2$SelectionModelUpdatedField = ss.delegateCombine(this.$2$SelectionModelUpdatedField, value);
		},
		remove_selectionModelUpdated: function ListViewModel$remove_SelectionModelUpdated(value) {
			this.$2$SelectionModelUpdatedField = ss.delegateRemove(this.$2$SelectionModelUpdatedField, value);
		},
		add_spotlightedItemChanged: function ListViewModel$add_SpotlightedItemChanged(value) {
			this.$2$SpotlightedItemChangedField = ss.delegateCombine(this.$2$SpotlightedItemChangedField, value);
		},
		remove_spotlightedItemChanged: function ListViewModel$remove_SpotlightedItemChanged(value) {
			this.$2$SpotlightedItemChangedField = ss.delegateRemove(this.$2$SpotlightedItemChangedField, value);
		},
		add_itemMoved: function ListViewModel$add_ItemMoved(value) {
			this.$2$ItemMovedField = ss.delegateCombine(this.$2$ItemMovedField, value);
		},
		remove_itemMoved: function ListViewModel$remove_ItemMoved(value) {
			this.$2$ItemMovedField = ss.delegateRemove(this.$2$ItemMovedField, value);
		},
		get_originalCollection: function ListViewModel$get_OriginalCollection() {
			return this.$originalCollection;
		},
		get_collection: function ListViewModel$get_Collection() {
			return this.$filteredSortedCollection;
		},
		get_filter: function ListViewModel$get_Filter() {
			return this.$filter;
		},
		set_filter: function ListViewModel$set_Filter(value) {
			this.$filter = value;
			this.$applyFilterAndSort();
		},
		get_sort: function ListViewModel$get_Sort() {
			return this.$sort;
		},
		set_sort: function ListViewModel$set_Sort(value) {
			this.$sort = value;
			this.$applyFilterAndSort();
		},
		get_$operateOnClonedCollection: function ListViewModel$get_OperateOnClonedCollection() {
			return !ss.staticEquals(this.$filter, null) || !ss.staticEquals(this.$sort, null);
		},
		get_props: function ListViewModel$get_Props() {
			return this.$props;
		},
		get_selectionType: function ListViewModel$get_SelectionType() {
			return this.$listItemGroup.get_selectionType();
		},
		get_listItemGroup: function ListViewModel$get_ListItemGroup() {
			return this.$listItemGroup;
		},
		get_firstSelectedItem: function ListViewModel$get_FirstSelectedItem() {
			var selectedItemList = this.$getTopNSelectedItems(1);
			return ((selectedItemList.length > 0) ? selectedItemList[0] : null);
		},
		get_selectedItems: function ListViewModel$get_SelectedItems() {
			return this.$getTopNSelectedItems(this.$listItemGroup.get_numberOfSelectedItems());
		},
		get_enabled: function ListViewModel$get_Enabled() {
			return this.$enabled;
		},
		set_enabled: function ListViewModel$set_Enabled(value) {
			if (this.$enabled === value) {
				return;
			}
			this.$enabled = value;
			this.notifyPropertyChanged($spiff_ListViewModel.enabledProperty);
		},
		dispose: function ListViewModel$Dispose() {
			this.$listItemGroup.remove_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
			this.$listItemGroup.dispose();
			ss.clear(this.$originalCollection);
			ss.clear(this.$filteredSortedCollection);
			$spiff_BaseViewModel.prototype.dispose.call(this);
		},
		selectionSubmitted: function ListViewModel$SelectionSubmitted() {
			this.raiseActionEvent(this.$2$SubmitSelectionField);
		},
		handleListItemMouseEnter: function ListViewModel$HandleListItemMouseEnter(item) {
			this.raiseActionEvent$1($spiff_ListItemViewModel).call(this, this.$2$ListItemMouseEnterField, item);
		},
		handleListItemMouseMove: function ListViewModel$HandleListItemMouseMove(item) {
			this.raiseActionEvent$1($spiff_ListItemViewModel).call(this, this.$2$ListItemMouseMoveField, item);
		},
		update: function ListViewModel$Update(collection) {
			this.$originalCollection = ss.arrayClone(collection);
			this.$applyFilterAndSort();
			this.$props.items = _.map(this.get_collection(), function(item) {
				return { data: item.get_data() };
			});
			this.raiseActionEvent(this.$2$PropsUpdatedField);
		},
		addItemToGroup: function ListViewModel$AddItemToGroup(item) {
			this.$listItemGroup.addItem(item);
		},
		$applyFilterAndSort: function ListViewModel$ApplyFilterAndSort() {
			if (this.get_$operateOnClonedCollection()) {
				this.$filteredSortedCollection = (ss.isValue(this.$filter) ? this.$originalCollection.filter(this.$filter) : ss.arrayClone(this.$originalCollection));
				if (ss.isValue(this.$sort)) {
					this.$filteredSortedCollection.sort(this.$sort);
				}
			}
			else {
				this.$filteredSortedCollection = this.$originalCollection;
			}
			this.notifyPropertyChanged($spiff_ListViewModel.collectionProperty);
		},
		onSelectionChanged: function ListViewModel$OnSelectionChanged() {
			this.raiseActionEvent(this.$2$SelectionChangedField);
		},
		$getTopNSelectedItems: function ListViewModel$GetTopNSelectedItems(numWanted) {
			var selectedViewModels = [];
			var totalSelectedItems = this.$listItemGroup.get_numberOfSelectedItems();
			if (totalSelectedItems === 1) {
				selectedViewModels.push(this.$listItemGroup.get_selectedItem().get_viewModel());
				return selectedViewModels;
			}
			var numToReturn = Math.min(totalSelectedItems, numWanted);
			for (var i = 0, len = this.get_collection().length; i < len && selectedViewModels.length < numToReturn; i++) {
				if (this.$listItemGroup.isItemSelected(this.get_collection()[i].get_id())) {
					selectedViewModels.push(this.get_collection()[i]);
				}
			}
			return selectedViewModels;
		},
		setSelectedItems: function ListViewModel$SetSelectedItems(indexesToSelect) {
			if (this.get_collection().length === 0) {
				return;
			}
			this.$listItemGroup.remove_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
			this.get_listItemGroup().clearSelection(null);
			var topMostSelectedIndex = null;
			for (var i = 0, len = indexesToSelect.length; i < len; i++) {
				var index = indexesToSelect[i];
				ss.Debug.assert(index < this.get_collection().length, 'invalid index');
				topMostSelectedIndex = Math.min(ss.coalesce(topMostSelectedIndex, index), index);
				this.get_collection()[index].set_selected(true);
				if (this.get_listItemGroup().get_selectionType() === 0) {
					break;
				}
			}
			this.raiseActionEvent$1(ss.makeGenericType(ss.Nullable$1, [ss.Int32])).call(this, this.$2$SelectionModelUpdatedField, ss.coalesce(topMostSelectedIndex, 0));
			this.$listItemGroup.add_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
		},
		setInvalidItems: function ListViewModel$SetInvalidItems(indexesToInvalidate) {
			for (var ii = 0, len = this.get_collection().length; ii < len; ++ii) {
				this.get_collection()[ii].set_isInvalid(ss.contains(indexesToInvalidate, ii));
			}
		},
		selectItemById: function ListViewModel$SelectItemById(itemId) {
			for (var i = 0, len = this.get_collection().length; i < len; i++) {
				var item = this.get_collection()[i];
				if (ss.referenceEquals(item.get_id(), itemId)) {
					this.selectItemAtIndex(i);
					break;
				}
			}
		},
		selectItemAtIndex: function ListViewModel$SelectItemAtIndex(index) {
			ss.Debug.assert(index < this.get_collection().length, 'invalid item index');
			this.$listItemGroup.remove_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
			var item = this.get_collection()[index];
			var changed = !item.get_selected();
			if (this.$listItemGroup.get_selectionType() === 0) {
				this.clearSelection();
			}
			item.set_selected(true);
			if (changed) {
				this.raiseActionEvent(this.$2$SelectionChangedField);
			}
			this.raiseActionEvent$1(ss.makeGenericType(ss.Nullable$1, [ss.Int32])).call(this, this.$2$SelectionModelUpdatedField, index);
			this.$listItemGroup.add_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
		},
		clearSpotlighting: function ListViewModel$ClearSpotlighting() {
			if (ss.isValue(this.$spotlightedItemIndex) && ss.isValue(this.get_collection()[ss.unbox(this.$spotlightedItemIndex)])) {
				this.get_collection()[ss.unbox(this.$spotlightedItemIndex)].set_spotlighted(false);
			}
			this.$spotlightedItemIndex = null;
			this.raiseActionEvent$1(ss.makeGenericType(ss.Nullable$1, [ss.Int32])).call(this, this.$2$SpotlightedItemChangedField, this.$spotlightedItemIndex);
		},
		spotlightItemAtIndex: function ListViewModel$SpotlightItemAtIndex(newSpotlightedItemIndex) {
			ss.Debug.assert(newSpotlightedItemIndex < this.get_collection().length, 'invalid item index');
			if (ss.isValue(this.$spotlightedItemIndex) && ss.isValue(this.get_collection()[ss.unbox(this.$spotlightedItemIndex)])) {
				this.get_collection()[ss.unbox(this.$spotlightedItemIndex)].set_spotlighted(false);
			}
			var itemToSpotlight = this.get_collection()[newSpotlightedItemIndex];
			if (ss.isNullOrUndefined(itemToSpotlight)) {
				return;
			}
			itemToSpotlight.set_spotlighted(true);
			this.$spotlightedItemIndex = newSpotlightedItemIndex;
			this.raiseActionEvent$1(ss.makeGenericType(ss.Nullable$1, [ss.Int32])).call(this, this.$2$SpotlightedItemChangedField, this.$spotlightedItemIndex);
		},
		clearSelection: function ListViewModel$ClearSelection() {
			this.$listItemGroup.clearSelection(null);
		},
		moveItem: function ListViewModel$MoveItem(fromIndex, toIndex) {
			if (fromIndex === toIndex) {
				return;
			}
			ss.Debug.assert(fromIndex >= 0 && fromIndex < this.get_collection().length, 'invalid item index');
			ss.Debug.assert(toIndex >= 0 && toIndex < this.get_collection().length, 'invalid item index');
			var item = this.get_collection()[fromIndex];
			ss.removeAt(this.get_collection(), fromIndex);
			ss.insert(this.get_collection(), toIndex, item);
			if (!ss.staticEquals(this.$2$ItemMovedField, null)) {
				this.$2$ItemMovedField(fromIndex, toIndex);
			}
		}
	}, $spiff_BaseViewModel, [ss.IDisposable, tab.IViewModel, ss.makeGenericType($spiff_IPropsProvider$1, [Object])]);
	ss.initClass($spiff_ListViewTemplate, $asm, {
		get_domRootElement: function ListViewTemplate$get_DomRootElement() {
			return this.domRoot;
		},
		get_listItemContainer: function ListViewTemplate$get_ListItemContainer() {
			return this.$listItemContainer;
		}
	}, $spiff_Template, [ss.IDisposable]);
	ss.initClass($spiff_Menu, $asm, {});
	ss.initClass($spiff_MenuItemBuilder, $asm, {
		checkState: function MenuItemBuilder$CheckState(value) {
			this.$mi.checkState = value;
			return this;
		},
		data: function MenuItemBuilder$Data(value) {
			this.$mi.data = value;
			return this;
		},
		description: function MenuItemBuilder$Description(value) {
			this.$mi.description = value;
			return this;
		},
		enabled: function MenuItemBuilder$Enabled(value) {
			this.$mi.enabled = value;
			return this;
		},
		isDivider: function MenuItemBuilder$IsDivider(value) {
			this.$mi.isDivider = value;
			return this;
		},
		isTextInput: function MenuItemBuilder$IsTextInput(value) {
			this.$mi.isTextInput = value;
			return this;
		},
		iconClass: function MenuItemBuilder$IconClass(value) {
			this.$mi.iconClass = value;
			return this;
		},
		iconClassTwo: function MenuItemBuilder$IconClassTwo(value) {
			this.$mi.iconClassTwo = value;
			return this;
		},
		itemClass: function MenuItemBuilder$ItemClass(value) {
			this.$mi.itemClass = value;
			return this;
		},
		name: function MenuItemBuilder$Name(value) {
			this.$mi.name = value;
			return this;
		},
		readId: function MenuItemBuilder$ReadId(value) {
			this.$mi.readId = value;
			return this;
		},
		subMenu: function MenuItemBuilder$SubMenu(value) {
			this.$mi.subMenu = value;
			return this;
		},
		title: function MenuItemBuilder$Title(value) {
			this.$mi.title = value;
			return this;
		},
		build: function MenuItemBuilder$Build() {
			var item = this.$mi;
			this.$mi = null;
			return item;
		}
	});
	ss.initEnum($spiff_MenuItemCheckState, $asm, { none: 0, check: 1, radio: 2 });
	ss.initClass($spiff_MenuItemDividerTemplate, $asm, {}, $spiff_Template, [ss.IDisposable]);
	ss.initClass($spiff_MenuItemTextInputTemplate, $asm, {}, $spiff_Template, [ss.IDisposable]);
	ss.initClass($spiff_MenuTemplate, $asm, {}, $spiff_Template, [ss.IDisposable]);
	ss.initClass($spiff_MenuView, $asm, {
		get_$menuAndSubMenuDom: function MenuView$get_MenuAndSubMenuDom() {
			var allMenus = this.dom.domRoot;
			for (var $t1 = 0; $t1 < this.menuStack.length; $t1++) {
				var menuTemplate = this.menuStack[$t1];
				allMenus = allMenus.add(menuTemplate.domRoot);
			}
			return allMenus;
		},
		dispose: function MenuView$Dispose() {
			this.menuViewModel.remove_menuChanged(ss.mkdel(this, this.updateMenu));
			this.menuViewModel.remove_shown(ss.mkdel(this, this.shown));
			this.menuViewModel.remove_hidden(ss.mkdel(this, this.hidden));
			this.menuViewModel.remove_menuItemSelectionChanged(ss.mkdel(this, this.$selectionChanged));
			var afterFade = ss.mkdel(this, function() {
				this.menuDisposables.dispose();
				for (var $t1 = 0; $t1 < this.menuStack.length; $t1++) {
					var menuTemplate = this.menuStack[$t1];
					menuTemplate.dispose();
				}
				ss.clear(this.menuStack);
				this.removeGlass();
				ss.makeGenericType($spiff_BaseView$1, [$spiff_MenuViewModel]).prototype.dispose.call(this);
			});
			this.$fadeOutMenus(afterFade);
		},
		removeGlass: function MenuView$RemoveGlass() {
			if (ss.isValue(this.glass)) {
				this.glass.remove_click(ss.mkdel(this, this.glassClicked));
				this.glass.dispose();
				this.glass = null;
			}
		},
		getElementForMenuItem: function MenuView$GetElementForMenuItem(mi) {
			return (ss.isValue(mi) ? this.$menuItemMap[mi.id] : null);
		},
		getMenuElementForMenuItem: function MenuView$GetMenuElementForMenuItem(mi) {
			var menuItem = this.getElementForMenuItem(mi);
			if (ss.isNullOrUndefined(menuItem)) {
				return null;
			}
			var menu = this.menuStack[$spiff_MenuView.getMenuItemLevel(menuItem) - 1];
			if (ss.isNullOrUndefined(menu)) {
				return null;
			}
			else {
				return menu.domRoot;
			}
		},
		updateMenu: function MenuView$UpdateMenu() {
			this.dom.content.children().remove();
			this.$menuItemMap = {};
			this.menuDisposables.dispose();
			this.menuDisposables = new tab.DisposableHolder();
			this.buildMenu(this.dom, this.menuViewModel.get_menu());
		},
		hidden: function MenuView$Hidden() {
			var afterFade = ss.mkdel(this, function() {
				this.dom.domRoot.detach();
				this.removeGlass();
			});
			this.$fadeOutMenus(afterFade);
		},
		shown: function MenuView$Shown(options) {
			if (options.get_minWidth() !== 0) {
				var nonClientWidth = tab.DoubleUtil.roundToInt(this.dom.domRoot.outerWidth(true)) - tab.DoubleUtil.roundToInt(this.dom.domRoot.width());
				this.dom.domRoot.css('min-width', options.get_minWidth() - nonClientWidth + 'px');
			}
			var menuZIndex = $spiff_MenuView.$baseLayerZIndex;
			if (options.relativeDom.length > 0) {
				var relativeZIndex = tab.DomUtil.getComputedZIndex(options.relativeDom[0]);
				if (relativeZIndex >= menuZIndex) {
					menuZIndex = Math.max($spiff_MenuView.$dialogLayerZIndex, relativeZIndex + 1);
				}
			}
			this.removeGlass();
			var $t1 = new $spiff_Glass(null, false);
			$t1.set_zIndex(menuZIndex - 1);
			this.glass = $t1;
			this.glass.add_click(ss.mkdel(this, this.glassClicked));
			this.glass.show();
			this.dom.domRoot.css('z-index', menuZIndex);
			if (ss.isValue(options.additionalMenuClass)) {
				this.dom.domRoot.addClass(options.additionalMenuClass);
			}
			$spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, function(spiffBrowserViewport) {
				this.dom.domRoot.appendTo($('body'));
				this.positionMenu(spiffBrowserViewport, options, this.dom);
				this.dom.domRoot.css('visibility', 'visible');
				this.onAddedToDom();
				this.dom.domRoot.show();
				this.onSized();
			}));
			this.disposables.add$1($spiff_EventUtil.bindWithDispose($(window), 'resize', ss.mkdel(this, function(e) {
				this.menuViewModel.hide();
			})));
			var hideEvent = ss.mkdel(this, function(e1) {
				this.menuViewModel.hide();
			});
			tab.WindowHelper.addListener(window.self, 'popstate', hideEvent);
			this.disposables.add$1(new tab.CallOnDispose(function() {
				tab.WindowHelper.removeListener(window.self, 'popstate', hideEvent);
			}));
			EventUtils.GlobalUIEvents.add_DismissTemporaryElements(ss.mkdel(this, this.onDismissTemporaryElements));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				EventUtils.GlobalUIEvents.remove_DismissTemporaryElements(ss.mkdel(this, this.onDismissTemporaryElements));
			})));
		},
		onSized: function MenuView$OnSized() {
		},
		$selectionChanged: function MenuView$SelectionChanged(mi, isSelected) {
			var menuElem = this.$menuItemMap[mi.id];
			if (ss.isValue(menuElem) && menuElem.is(':visible')) {
				menuElem.toggleClass('tabMenuSelectedItem', isSelected);
				if (isSelected) {
					this.scrollToMenuItem(menuElem);
				}
			}
		},
		scrollToMenuItem: function MenuView$ScrollToMenuItem(elem) {
			elem.offsetParent().scrollTop(tab.DoubleUtil.roundToInt(elem.position().top));
		},
		glassClicked: function MenuView$GlassClicked() {
			this.menuViewModel.hide();
		},
		onDismissTemporaryElements: function MenuView$OnDismissTemporaryElements() {
			this.menuViewModel.hide();
		},
		showSubmenu: null,
		activateSubmenu: function MenuView$ActivateSubmenu(mi, relativeObj) {
			var itemLevel = ss.unbox(ss.cast(relativeObj.data($spiff_MenuView.$keyMenuItemLevel), ss.Int32));
			if (ss.isValue(itemLevel) && itemLevel < this.menuStack.length) {
				return;
			}
			var template = new $spiff_MenuTemplate();
			template.domRoot.addClass(this.menuViewModel.get_theme().menuClass);
			template.domRoot.attr('data-sub-menu-depth', this.menuStack.length.toString());
			this.menuStack.push(template);
			this.buildMenu(template, mi.subMenu);
			this.showSubmenu(mi, relativeObj, template);
			template.domRoot.focus();
			template.domRoot.on('blur', ss.mkdel(this, this.onBlur));
		},
		buildMenu: function MenuView$BuildMenu(root, m) {
			var seenIcon = false;
			var seenIconTwo = false;
			var seenDesc = false;
			var items = [];
			var menuClickHandler = $spiff_TableauClickHandler.targetAndClick(root.domRoot.get(0), ss.mkdel(this, this.$onMenuClicked));
			this.menuDisposables.add$1(menuClickHandler);
			for (var $t1 = 0; $t1 < m.menuItems.length; $t1++) {
				var mi = m.menuItems[$t1];
				var newMenuItemElement;
				if (mi.isDivider) {
					newMenuItemElement = (new $spiff_MenuItemDividerTemplate()).domRoot.addClass(this.menuViewModel.get_theme().dividerClass);
				}
				else {
					if (mi.isTextInput) {
						var textItemTemplate = this.$makeMenuItemTextInputTemplate(mi);
						newMenuItemElement = textItemTemplate.domRoot;
					}
					else if (ss.isInstanceOfType(mi, $spiff_CustomMenuItem)) {
						newMenuItemElement = ss.cast(mi, $spiff_CustomMenuItem).get_domRoot();
					}
					else {
						var mit = (new $spiff_$MenuItemTemplate$MenuTemplateBuilder(mi.name, mi.enabled)).$icon(mi.checkState, mi.iconClass).$iconTwo(mi.iconClassTwo).$description(mi.description).$title(mi.title).$subMenu(mi.subMenu).$theme([this.menuViewModel.get_theme().itemClass, mi.itemClass]).$build();
						seenIcon = seenIcon || mit.$hasIcon;
						seenIconTwo = seenIconTwo || mit.$hasIconTwo;
						seenDesc = seenDesc || mit.$hasDescription;
						mit.domRoot.data($spiff_MenuView.keyMenuItem, mi);
						mit.domRoot.data($spiff_MenuView.$keyMenuItemLevel, this.menuStack.length);
						newMenuItemElement = mit.domRoot;
					}
					newMenuItemElement.addClass($spiff_MenuView.classMenuItem);
					if (mi.isDefault) {
						newMenuItemElement.addClass($spiff_MenuView.defaultMenuItem);
					}
				}
				items.push(newMenuItemElement);
				this.$menuItemMap[mi.id] = newMenuItemElement;
			}
			root.content.append(items);
			if (!seenIcon) {
				root.domRoot.addClass(this.menuViewModel.get_theme().noIconClass);
			}
			if (seenIconTwo) {
				root.domRoot.addClass($spiff_MenuView.$classMenuHasIconTwo);
			}
			if (!seenDesc) {
				root.domRoot.addClass(this.menuViewModel.get_theme().noDescClass);
			}
			if (ss.isValue(this.menuViewModel.get_selectedItem())) {
				this.$selectionChanged(this.menuViewModel.get_selectedItem(), true);
			}
		},
		$onMenuClicked: function MenuView$OnMenuClicked(evt) {
			var mit = $(evt.target).closest('.tabMenuMenuItem');
			var mi = ss.cast(mit.data($spiff_MenuView.keyMenuItem), $spiff_MenuItem);
			if (ss.isNullOrUndefined(mi)) {
				return;
			}
			else if (ss.isValue(mi.subMenu)) {
				this.activateSubmenu(mi, mit);
			}
			else {
				this.menuViewModel.clickMenuItem(mi);
			}
		},
		onBlur: function MenuView$OnBlur(e) {
			window.setTimeout(ss.mkdel(this, function() {
				var menusDom = this.get_$menuAndSubMenuDom();
				if (menusDom.index(document.activeElement) < 0 && menusDom.find(document.activeElement).length === 0) {
					this.get_viewModel().hide();
				}
			}));
		},
		$menuItemTextInputKeydown: function MenuView$MenuItemTextInputKeydown(e) {
			e.stopPropagation();
			switch (e.which) {
				case 13: {
					var callback = e.data['callback'];
					if ($.isFunction(callback)) {
						ss.cast(callback, Function)($(e.target).val());
					}
					break;
				}
				case 9: {
					e.preventDefault();
					e.target.blur();
					this.menuViewModel.iterateFocus((e.shiftKey ? -1 : 1), null);
					break;
				}
			}
		},
		$makeMenuItemTextInputTemplate: function MenuView$MakeMenuItemTextInputTemplate(menuItem) {
			var template = new $spiff_MenuItemTextInputTemplate();
			template.textInput.keydown(ss.mkdict(['callback', menuItem.data]), ss.mkdel(this, this.$menuItemTextInputKeydown)).keypress($spiff_MenuView.$menuItemTextInputKeypress).focus(ss.mkdel(this, function(e) {
				this.get_viewModel().set_focusedItem(menuItem);
			})).attr('placeholder', menuItem.description);
			if (!ss.isNullOrEmptyString(menuItem.itemClass)) {
				template.domRoot.addClass(menuItem.itemClass);
			}
			this.disposables.add$1(new tab.CallOnDispose(function() {
				template.textInput.off();
			}));
			return template;
		},
		$fadeOutMenus: function MenuView$FadeOutMenus(afterFade) {
			if ($.fx.off || !this.menuViewModel.get_shouldAnimateOnClose()) {
				afterFade();
			}
			else {
				this.get_$menuAndSubMenuDom().fadeOut($spiff_MenuView.menuFadeDurationMs, afterFade);
			}
		}
	}, ss.makeGenericType($spiff_BaseMenuView$1, [$spiff_MenuViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$spiff_MenuViewModel])]);
	ss.initClass($spiff_MenuViewModel, $asm, {
		add_shown: function MenuViewModel$add_Shown(value) {
			this.$2$ShownField = ss.delegateCombine(this.$2$ShownField, value);
		},
		remove_shown: function MenuViewModel$remove_Shown(value) {
			this.$2$ShownField = ss.delegateRemove(this.$2$ShownField, value);
		},
		add_hidden: function MenuViewModel$add_Hidden(value) {
			this.$2$HiddenField = ss.delegateCombine(this.$2$HiddenField, value);
		},
		remove_hidden: function MenuViewModel$remove_Hidden(value) {
			this.$2$HiddenField = ss.delegateRemove(this.$2$HiddenField, value);
		},
		add_menuChanged: function MenuViewModel$add_MenuChanged(value) {
			this.$2$MenuChangedField = ss.delegateCombine(this.$2$MenuChangedField, value);
		},
		remove_menuChanged: function MenuViewModel$remove_MenuChanged(value) {
			this.$2$MenuChangedField = ss.delegateRemove(this.$2$MenuChangedField, value);
		},
		add_menuItemClicked: function MenuViewModel$add_MenuItemClicked(value) {
			this.$2$MenuItemClickedField = ss.delegateCombine(this.$2$MenuItemClickedField, value);
		},
		remove_menuItemClicked: function MenuViewModel$remove_MenuItemClicked(value) {
			this.$2$MenuItemClickedField = ss.delegateRemove(this.$2$MenuItemClickedField, value);
		},
		add_menuItemSelectionChanged: function MenuViewModel$add_MenuItemSelectionChanged(value) {
			this.$2$MenuItemSelectionChangedField = ss.delegateCombine(this.$2$MenuItemSelectionChangedField, value);
		},
		remove_menuItemSelectionChanged: function MenuViewModel$remove_MenuItemSelectionChanged(value) {
			this.$2$MenuItemSelectionChangedField = ss.delegateRemove(this.$2$MenuItemSelectionChangedField, value);
		},
		add_menuItemFocusChanged: function MenuViewModel$add_MenuItemFocusChanged(value) {
			this.$2$MenuItemFocusChangedField = ss.delegateCombine(this.$2$MenuItemFocusChangedField, value);
		},
		remove_menuItemFocusChanged: function MenuViewModel$remove_MenuItemFocusChanged(value) {
			this.$2$MenuItemFocusChangedField = ss.delegateRemove(this.$2$MenuItemFocusChangedField, value);
		},
		get_visible: function MenuViewModel$get_Visible() {
			return this.$2$VisibleField;
		},
		set_visible: function MenuViewModel$set_Visible(value) {
			this.$2$VisibleField = value;
		},
		get_isExpanded: function MenuViewModel$get_IsExpanded() {
			return this.$2$IsExpandedField;
		},
		set_isExpanded: function MenuViewModel$set_IsExpanded(value) {
			this.$2$IsExpandedField = value;
		},
		get_shouldAnimateOnClose: function MenuViewModel$get_ShouldAnimateOnClose() {
			return this.$2$ShouldAnimateOnCloseField;
		},
		set_shouldAnimateOnClose: function MenuViewModel$set_ShouldAnimateOnClose(value) {
			this.$2$ShouldAnimateOnCloseField = value;
		},
		set_disposeOnHide: function MenuViewModel$set_DisposeOnHide(value) {
			this.remove_hidden(this.$disposeLater);
			if (value) {
				this.add_hidden(this.$disposeLater);
			}
		},
		get_menu: function MenuViewModel$get_Menu() {
			return this.$menu;
		},
		set_menu: function MenuViewModel$set_Menu(value) {
			if (_.isEqual(this.$menu, value)) {
				return;
			}
			this.$menu = value;
			if (!ss.staticEquals(this.$2$MenuChangedField, null)) {
				this.$2$MenuChangedField();
			}
		},
		get_theme: function MenuViewModel$get_Theme() {
			return this.$2$ThemeField;
		},
		set_theme: function MenuViewModel$set_Theme(value) {
			this.$2$ThemeField = value;
		},
		get_selectedItem: function MenuViewModel$get_SelectedItem() {
			return this.$selectedItem;
		},
		set_selectedItem: function MenuViewModel$set_SelectedItem(value) {
			if (ss.isValue(this.$selectedItem)) {
				if (ss.isValue(this.$2$MenuItemSelectionChangedField)) {
					this.$2$MenuItemSelectionChangedField(this.$selectedItem, false);
				}
			}
			if (ss.isNullOrUndefined(value)) {
				this.$selectedItem = null;
				return;
			}
			this.$selectedItem = value;
			if (!ss.staticEquals(this.$2$MenuItemSelectionChangedField, null)) {
				this.$2$MenuItemSelectionChangedField(this.$selectedItem, true);
			}
		},
		get_focusedItem: function MenuViewModel$get_FocusedItem() {
			return this.$focusedItem;
		},
		set_focusedItem: function MenuViewModel$set_FocusedItem(value) {
			if (ss.referenceEquals(this.$focusedItem, value)) {
				return;
			}
			if (ss.isValue(this.$focusedItem) && !ss.staticEquals(this.$2$MenuItemFocusChangedField, null)) {
				this.$2$MenuItemFocusChangedField(this.$focusedItem, false);
			}
			if (ss.isNullOrUndefined(value) || !value.enabled) {
				this.$focusedItem = null;
				return;
			}
			this.$focusedItem = value;
			if (!ss.staticEquals(this.$2$MenuItemFocusChangedField, null)) {
				this.$2$MenuItemFocusChangedField(this.$focusedItem, true);
			}
		},
		show: function MenuViewModel$Show(options) {
			this.set_isExpanded(options.expanded);
			if (this.get_visible()) {
				return;
			}
			this.set_visible(true);
			if (!ss.staticEquals(this.$2$ShownField, null)) {
				this.$2$ShownField(options);
			}
		},
		dispose: function MenuViewModel$Dispose() {
			this.hide();
			$spiff_BaseViewModel.prototype.dispose.call(this);
		},
		hide: function MenuViewModel$Hide() {
			if (this.get_visible() === false) {
				return;
			}
			this.set_visible(false);
			this.raiseActionEvent(this.$2$HiddenField);
		},
		clickMenuItem: function MenuViewModel$ClickMenuItem(mi) {
			if (!mi.enabled) {
				return;
			}
			tab.Log.get(this).debug('Clicking: %o', [mi]);
			this.hide();
			if (!ss.staticEquals(this.$2$MenuItemClickedField, null)) {
				this.$2$MenuItemClickedField(mi);
			}
		},
		iterateFocus: function MenuViewModel$IterateFocus(indexChange, startIndex) {
			var focusedMenu = this.findMenuForMenuItem(this.get_focusedItem());
			if (ss.isNullOrUndefined(focusedMenu)) {
				return;
			}
			var $t1 = startIndex;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = ss.indexOf(focusedMenu.menuItems, this.get_focusedItem());
			}
			var currentIndex = $t1;
			var newIndex = currentIndex;
			do {
				newIndex += indexChange;
				if (newIndex >= focusedMenu.menuItems.length) {
					newIndex = 0;
				}
				else if (newIndex < 0) {
					newIndex = focusedMenu.menuItems.length - 1;
				}
			} while (!focusedMenu.menuItems[newIndex].get_selectable() && newIndex !== currentIndex);
			if (newIndex !== currentIndex) {
				this.set_focusedItem(focusedMenu.menuItems[newIndex]);
			}
		},
		focusByNamePrefix: function MenuViewModel$FocusByNamePrefix(prefix) {
			prefix = prefix.toLowerCase();
			var focusedMenu = this.findMenuForMenuItem(this.get_focusedItem());
			if (ss.isNullOrUndefined(focusedMenu)) {
				return;
			}
			var startIndex = ss.indexOf(focusedMenu.menuItems, this.get_focusedItem()) + 1;
			if (startIndex >= focusedMenu.menuItems.length) {
				startIndex = 0;
			}
			var searchIndex = startIndex;
			do {
				if (focusedMenu.menuItems[searchIndex].enabled && !focusedMenu.menuItems[searchIndex].isDivider) {
					if (ss.isValue(focusedMenu.menuItems[searchIndex].name) && ss.startsWithString(focusedMenu.menuItems[searchIndex].name.toLowerCase(), prefix)) {
						this.set_focusedItem(focusedMenu.menuItems[searchIndex]);
						return;
					}
				}
				++searchIndex;
				if (searchIndex >= focusedMenu.menuItems.length) {
					searchIndex = 0;
				}
			} while (searchIndex !== startIndex);
		},
		findMenuForMenuItem: function MenuViewModel$FindMenuForMenuItem(item) {
			if (ss.isNullOrUndefined(item)) {
				return null;
			}
			var lookThroughSubMenu = null;
			lookThroughSubMenu = function(subMenu) {
				if (ss.contains(subMenu.menuItems, item)) {
					return subMenu;
				}
				for (var $t1 = 0; $t1 < subMenu.menuItems.length; $t1++) {
					var mi = subMenu.menuItems[$t1];
					if (ss.isValue(mi.subMenu)) {
						var itemToReturn = lookThroughSubMenu(mi.subMenu);
						if (ss.isValue(itemToReturn)) {
							return itemToReturn;
						}
					}
				}
				return null;
			};
			return lookThroughSubMenu(this.get_menu());
		},
		findItemContainingSubMenu: function MenuViewModel$FindItemContainingSubMenu(subMenu) {
			if (ss.isNullOrUndefined(subMenu) || ss.referenceEquals(this.get_menu(), subMenu)) {
				return null;
			}
			var lookForSubMenu = null;
			lookForSubMenu = function(currentMenu) {
				var itemToReturn = null;
				for (var $t1 = 0; $t1 < currentMenu.menuItems.length; $t1++) {
					var item = currentMenu.menuItems[$t1];
					if (ss.isValue(item.subMenu)) {
						itemToReturn = (ss.referenceEquals(item.subMenu, subMenu) ? item : lookForSubMenu(item.subMenu));
						if (ss.isValue(itemToReturn)) {
							break;
						}
					}
				}
				return itemToReturn;
			};
			return lookForSubMenu(this.get_menu());
		}
	}, $spiff_BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($spiff_ModalDialog, $asm, {
		get_glass: function ModalDialog$get_Glass() {
			return this.$glass;
		},
		ensureAttachedAndSized: function ModalDialog$EnsureAttachedAndSized() {
			if (ss.isValue(this.$glass) || this.isAttached()) {
				return;
			}
			this.$glass = new $spiff_Glass(null, false);
			this.$glass.set_opaque(true);
			this.$glass.show();
			this.element.css('z-index', (this.$glass.get_zIndex() + 1).toString());
			$spiff_Dialog.prototype.ensureAttachedAndSized.call(this);
		},
		bindToEvents: function ModalDialog$BindToEvents() {
			$spiff_Dialog.prototype.bindToEvents.call(this);
			this.disposables.add$1($spiff_EventUtil.bindWithDispose($(window), 'resize', ss.mkdel(this, this.onWindowResize)));
			this.disposables.add$1($spiff_EventUtil.bindWithDispose($(window), 'keyup', ss.mkdel(this, this.onDocumentKeyUp)));
		},
		detach: function ModalDialog$Detach() {
			this.$removeGlass();
			$spiff_Dialog.prototype.detach.call(this);
		},
		dispose: function ModalDialog$Dispose() {
			this.$removeGlass();
			if (ss.isValue(this.template)) {
				this.template.dispose();
				this.template = null;
			}
			$spiff_Dialog.prototype.dispose.call(this);
		},
		$removeGlass: function ModalDialog$RemoveGlass() {
			if (ss.isValue(this.$glass)) {
				this.$glass.dispose();
				this.$glass = null;
			}
		},
		$init: function ModalDialog$Init() {
			this.configMoveDragSource($spiff_Dialog.defaultStationaryDialogConfigurer);
		},
		onWindowResize: function ModalDialog$OnWindowResize(e) {
			this.positionInWindow();
		},
		onDocumentKeyUp: function ModalDialog$OnDocumentKeyUp(e) {
			if (e.which === 27) {
				this.close(null);
				e.preventDefault();
				e.stopPropagation();
				return;
			}
		}
	}, $spiff_Dialog, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	$spiff_ModalDialog.$ctor1.prototype = $spiff_ModalDialog.prototype;
	ss.initClass($spiff_MoveDragInstance, $asm, {
		get_dragType: function MoveDragInstance$get_DragType() {
			return 'dragmove';
		},
		moveTo: function MoveDragInstance$MoveTo(e) {
			if (ss.isValue(this.$moveCallback)) {
				this.$moveCallback(e);
			}
		},
		endDragAt: function MoveDragInstance$EndDragAt(e) {
			if (ss.isValue(this.$dropCallback)) {
				this.$dropCallback(e);
			}
		},
		cancelDrag: function MoveDragInstance$CancelDrag() {
			if (ss.isValue(this.$cancelCallback)) {
				this.$cancelCallback();
			}
		}
	}, EventUtils.DragInstance);
	$spiff_MoveDragInstance.$ctor1.prototype = $spiff_MoveDragInstance.prototype;
	ss.initClass($spiff_MoveDragSource, $asm, {
		add_moveAction: function MoveDragSource$add_MoveAction(value) {
			this.$1$MoveActionField = ss.delegateCombine(this.$1$MoveActionField, value);
		},
		remove_moveAction: function MoveDragSource$remove_MoveAction(value) {
			this.$1$MoveActionField = ss.delegateRemove(this.$1$MoveActionField, value);
		},
		add_endAction: function MoveDragSource$add_EndAction(value) {
			this.$1$EndActionField = ss.delegateCombine(this.$1$EndActionField, value);
		},
		remove_endAction: function MoveDragSource$remove_EndAction(value) {
			this.$1$EndActionField = ss.delegateRemove(this.$1$EndActionField, value);
		},
		get_offset: function MoveDragSource$get_Offset() {
			return this.$offset;
		},
		set_offset: function MoveDragSource$set_Offset(value) {
			this.$offset = value;
		},
		get_elementToDrag: function MoveDragSource$get_ElementToDrag() {
			return this.$elementToDrag;
		},
		get_elementToChange: function MoveDragSource$get_ElementToChange() {
			return this.$elementToChange;
		},
		get_documentBodySize: function MoveDragSource$get_DocumentBodySize() {
			return this.$documentBodySize;
		},
		set_documentBodySize: function MoveDragSource$set_DocumentBodySize(value) {
			this.$documentBodySize = value;
		},
		dispose: function MoveDragSource$Dispose() {
			EventUtils.DragDropManager.removeDragSource(this.$elementToDrag);
		},
		calculateOffset: function MoveDragSource$CalculateOffset(e) {
			var elementToChangePos = this.$elementToChange.position();
			return { x: e.pageX - tab.DoubleUtil.roundToInt(elementToChangePos.left), y: e.pageY - tab.DoubleUtil.roundToInt(elementToChangePos.top) };
		},
		startDrag: function MoveDragSource$StartDrag(e) {
			this.$offset = this.calculateOffset(e);
			this.$elementToDrag.addClass('dragging');
			if (this.$addDraggingCSSToElementToChange) {
				this.$elementToChange.addClass('dragging');
			}
			return new $spiff_MoveDragInstance(this.$elementToDrag, ss.mkdel(this, this.dragMove), ss.mkdel(this, this.dragEnd), null);
		},
		acceptsDragType: function MoveDragSource$AcceptsDragType() {
			return 1;
		},
		dragMove: function MoveDragSource$DragMove(e) {
			this.performMove(e);
			if (ss.isValue(this.$1$MoveActionField)) {
				this.$1$MoveActionField(e);
			}
		},
		performMove: function MoveDragSource$PerformMove(e) {
			var x = e.pageX - this.$offset.x;
			var y = e.pageY - this.$offset.y;
			var bodyWidth = ((this.$documentBodySize === 'useClientSize') ? document.body.clientWidth : document.body.scrollWidth);
			var bodyHeight = ((this.$documentBodySize === 'useClientSize') ? document.body.clientHeight : document.body.scrollHeight);
			x = Math.max(0, Math.min(bodyWidth - tab.DoubleUtil.roundToInt(this.$elementToChange.outerWidth()), x));
			y = Math.max(0, Math.min(bodyHeight - tab.DoubleUtil.roundToInt(this.$elementToChange.outerHeight()), y));
			tab.DomUtil.setElementPosition(this.$elementToChange, x, y, null, null);
		},
		dragEnd: function MoveDragSource$DragEnd(e) {
			this.performMove(e);
			this.$elementToDrag.removeClass('dragging');
			if (this.$addDraggingCSSToElementToChange) {
				this.$elementToChange.removeClass('dragging');
			}
			if (ss.isValue(this.$1$EndActionField)) {
				this.$1$EndActionField(e);
			}
		}
	}, null, [ss.IDisposable]);
	ss.initClass($spiff_NoopDropTarget, $asm, {}, EventUtils.DelegateDropTarget);
	ss.initEnum($spiff_OnBlurBehavior, $asm, { reset: 0, commit: 1, none: 2 });
	ss.initClass($spiff_OrientationHandler, $asm, {});
	ss.initClass($spiff_PopupListView, $asm, {}, $spiff_ListView, [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$spiff_ListViewModel])]);
	ss.initClass($spiff_PopupListViewModel, $asm, {
		get_viewType: function PopupListViewModel$get_ViewType() {
			return $spiff_PopupListView;
		},
		get_viewModel: function PopupListViewModel$get_ViewModel() {
			return this;
		},
		get_listItemCreator: function PopupListViewModel$get_ListItemCreator() {
			return this.$listItemCreator;
		},
		disposeViewModel: function PopupListViewModel$DisposeViewModel() {
			this.dispose();
		},
		updateUberPopupViewModel: function PopupListViewModel$UpdateUberPopupViewModel(vm) {
		}
	}, $spiff_ListViewModel, [ss.IDisposable, tab.IViewModel, ss.makeGenericType($spiff_IPropsProvider$1, [Object]), $spiff_IContent, $spiff_IUberPopupContent]);
	ss.initClass($spiff_PureRender, $asm, {});
	ss.initClass($spiff_ReactComponentExtensions, $asm, {});
	ss.initClass($spiff_ReactElement, $asm, {});
	ss.initClass($spiff_ReactRefs, $asm, {});
	ss.initClass($spiff_ResizeDragSource, $asm, {
		calculateOffset: function ResizeDragSource$CalculateOffset(e) {
			var elementToChangePos = tab.PointUtil.fromPosition(this.get_elementToChange().position());
			var offset = { x: 0, y: 0 };
			switch (this.$location) {
				case 'bottomRight': {
					offset.x = elementToChangePos.x + tab.DoubleUtil.roundToInt(this.get_elementToChange().width()) - e.pageX;
					offset.y = elementToChangePos.y + tab.DoubleUtil.roundToInt(this.get_elementToChange().height()) - e.pageY;
					break;
				}
				case 'topLeft': {
					offset.x = e.pageX - elementToChangePos.x;
					offset.y = e.pageY - elementToChangePos.y;
					break;
				}
				case 'left': {
					offset.x = e.pageX - elementToChangePos.x;
					break;
				}
				case 'right': {
					offset.x = elementToChangePos.x + tab.DoubleUtil.roundToInt(this.get_elementToChange().width()) - e.pageX;
					break;
				}
				case 'top': {
					offset.y = e.pageY - elementToChangePos.y;
					break;
				}
				case 'bottom': {
					offset.y = elementToChangePos.y + tab.DoubleUtil.roundToInt(this.get_elementToChange().height()) - e.pageY;
					break;
				}
			}
			return offset;
		},
		performMove: function ResizeDragSource$PerformMove(e) {
			var elementToChangePos = tab.PointUtil.fromPosition(this.get_elementToChange().position());
			var width = tab.DoubleUtil.roundToInt(this.get_elementToChange().width());
			var height = tab.DoubleUtil.roundToInt(this.get_elementToChange().height());
			var bodyWidth = ((this.get_documentBodySize() === 'useClientSize') ? tab.DomUtil.get_documentBody().clientWidth : tab.DomUtil.get_documentBody().scrollWidth);
			var bodyHeight = ((this.get_documentBodySize() === 'useClientSize') ? tab.DomUtil.get_documentBody().clientHeight : tab.DomUtil.get_documentBody().scrollHeight);
			switch (this.$location) {
				case 'bottomRight': {
					this.get_elementToChange().width(Math.min(e.pageX + this.get_offset().x, bodyWidth) - elementToChangePos.x);
					this.get_elementToChange().height(Math.min(e.pageY + this.get_offset().y, bodyHeight) - elementToChangePos.y);
					break;
				}
				case 'topLeft': {
					this.get_elementToChange().width(width + (elementToChangePos.x - Math.max(e.pageX - this.get_offset().x, 0)));
					this.get_elementToChange().height(height + (elementToChangePos.y - Math.max(e.pageY - this.get_offset().y, 0)));
					tab.DomUtil.setElementPosition(this.get_elementToChange(), elementToChangePos.x + width - tab.DoubleUtil.roundToInt(this.get_elementToChange().width()), elementToChangePos.y + height - tab.DoubleUtil.roundToInt(this.get_elementToChange().height()), null, null);
					break;
				}
				case 'left': {
					this.get_elementToChange().width(width + (elementToChangePos.x - Math.max(e.pageX - this.get_offset().x, 0)));
					tab.DomUtil.setElementPosition(this.get_elementToChange(), elementToChangePos.x + width - tab.DoubleUtil.roundToInt(this.get_elementToChange().width()), elementToChangePos.y, null, null);
					break;
				}
				case 'right': {
					this.get_elementToChange().width(Math.min(e.pageX + this.get_offset().x, bodyWidth) - elementToChangePos.x);
					break;
				}
				case 'top': {
					this.get_elementToChange().height(height + (elementToChangePos.y - Math.max(e.pageY - this.get_offset().y, 0)));
					tab.DomUtil.setElementPosition(this.get_elementToChange(), elementToChangePos.x, elementToChangePos.y + height - tab.DoubleUtil.roundToInt(this.get_elementToChange().height()), null, null);
					break;
				}
				case 'bottom': {
					this.get_elementToChange().height(Math.min(e.pageY + this.get_offset().y, bodyHeight) - elementToChangePos.y);
					break;
				}
			}
		}
	}, $spiff_MoveDragSource, [ss.IDisposable]);
	ss.initClass($spiff_ScrollableViewModel, $asm, {
		add_contentChanged: function ScrollableViewModel$add_ContentChanged(value) {
			this.$2$ContentChangedField = ss.delegateCombine(this.$2$ContentChangedField, value);
		},
		remove_contentChanged: function ScrollableViewModel$remove_ContentChanged(value) {
			this.$2$ContentChangedField = ss.delegateRemove(this.$2$ContentChangedField, value);
		},
		add_refresh: function ScrollableViewModel$add_Refresh(value) {
			this.$2$RefreshField = ss.delegateCombine(this.$2$RefreshField, value);
		},
		remove_refresh: function ScrollableViewModel$remove_Refresh(value) {
			this.$2$RefreshField = ss.delegateRemove(this.$2$RefreshField, value);
		},
		get_content: function ScrollableViewModel$get_Content() {
			return this.$content;
		},
		set_content: function ScrollableViewModel$set_Content(value) {
			this.$content = value;
			this.raiseActionEvent(this.$2$ContentChangedField);
		},
		get_options: function ScrollableViewModel$get_Options() {
			return this.$options;
		},
		get_scrollX: function ScrollableViewModel$get_ScrollX() {
			return (ss.isValue(this.$options.scrollX) ? this.$options.scrollX : false);
		},
		set_scrollX: function ScrollableViewModel$set_ScrollX(value) {
			this.$options.scrollX = value;
			if (this.get_hasCustomIndicator()) {
				this.get_indicatorOptions().listenX = value;
			}
		},
		get_scrollY: function ScrollableViewModel$get_ScrollY() {
			return (ss.isValue(this.$options.scrollY) ? this.$options.scrollY : false);
		},
		set_scrollY: function ScrollableViewModel$set_ScrollY(value) {
			this.$options.scrollY = value;
			if (this.get_hasCustomIndicator()) {
				this.get_indicatorOptions().listenY = value;
			}
		},
		get_hasScrollBars: function ScrollableViewModel$get_HasScrollBars() {
			return this.get_scrollY() || this.get_scrollX();
		},
		get_hasCustomIndicator: function ScrollableViewModel$get_HasCustomIndicator() {
			return ss.isValue(this.$options.indicators);
		},
		set_hasCustomIndicator: function ScrollableViewModel$set_HasCustomIndicator(value) {
			if (value) {
				if (ss.isNullOrUndefined(this.$options.indicators)) {
					this.get_options().indicators = new Object();
					this.get_options().indicators.listenX = this.get_scrollX();
					this.get_options().indicators.listenY = this.get_scrollY();
				}
			}
			else {
				this.get_options().indicators = null;
			}
		},
		get_indicatorOptions: function ScrollableViewModel$get_IndicatorOptions() {
			return this.get_options().indicators;
		},
		$createOptions: function ScrollableViewModel$CreateOptions(useCustomScrollbars) {
			this.$options = {};
			this.set_hasCustomIndicator(useCustomScrollbars);
			if (tsConfig.is_mobile) {
				this.$setDefaultMobileOptions();
			}
			else {
				this.$setDefaultWebOptions();
			}
		},
		$setDefaultWebOptions: function ScrollableViewModel$SetDefaultWebOptions() {
			if (!this.get_hasCustomIndicator()) {
				this.$options.scrollbars = 'custom';
				this.$options.interactiveScrollbars = true;
			}
			this.$options.mouseWheel = true;
			this.$options.disableMouse = true;
		},
		$setDefaultMobileOptions: function ScrollableViewModel$SetDefaultMobileOptions() {
			if (!this.get_hasCustomIndicator()) {
				this.$options.scrollbars = 'custom';
			}
		},
		triggerRefresh: function ScrollableViewModel$TriggerRefresh() {
			this.raiseActionEvent(this.$2$RefreshField);
		}
	}, $spiff_BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	$spiff_ScrollableViewModel.$ctor1.prototype = $spiff_ScrollableViewModel.prototype;
	ss.initEnum($spiff_ScrollerType, $asm, { iScroll: 0 });
	ss.initClass($spiff_ScrollingProps, $asm, {});
	ss.initClass($spiff_SelectableButtonComponent, $asm, {
		get_className: function SelectableButtonComponent$get_ClassName() {
			var classNames = [ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]).prototype.get_className.call(this)];
			classNames.push($spiff_UnificationClassNames.selectable);
			if (this.props.isSelected) {
				classNames.push($spiff_UnificationClassNames.selected);
				if (this.props.isButtonTextMarkedAsExcluded) {
					classNames.push($spiff_UnificationClassNames.excluded);
				}
			}
			else {
				classNames.push($spiff_UnificationClassNames.unselected);
				classNames.push($spiff_UnificationClassNames.designTint);
			}
			return classNames.join(' ');
		}
	}, ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]));
	ss.initClass($spiff_SelectableButtonGroupComponent, $asm, {
		get_$selection: function SelectableButtonGroupComponent$get_Selection() {
			return this.state.currentSelection;
		},
		get_$applyCancelEnabled: function SelectableButtonGroupComponent$get_ApplyCancelEnabled() {
			return this.props.showApplyAndCancelButtons && !ss.referenceEquals(this.state.currentSelection, this.state.currentlyAppliedSelection);
		},
		$buildState: function SelectableButtonGroupComponent$BuildState(selection) {
			var newSelection = selection;
			if (ss.isValue(newSelection)) {
				newSelection = newSelection.clone();
			}
			return { currentlyAppliedSelection: selection, currentSelection: newSelection };
		},
		componentWillReceiveProps: function SelectableButtonGroupComponent$ComponentWillReceiveProps(nextProps) {
			if (!ss.referenceEquals(nextProps.selection, this.state.currentlyAppliedSelection)) {
				this.setState(this.$buildState(nextProps.selection));
			}
		},
		$applyCurrentSelection: function SelectableButtonGroupComponent$ApplyCurrentSelection() {
			if (ss.referenceEquals(this.get_$selection(), this.state.currentlyAppliedSelection)) {
				return;
			}
			this.setState(this.$buildState(this.get_$selection()));
			if (!ss.staticEquals(this.props.onSelectionChanged, null)) {
				this.props.onSelectionChanged(this.get_$selection());
			}
		},
		$revertCurrentSelection: function SelectableButtonGroupComponent$RevertCurrentSelection() {
			this.setState(this.$buildState(this.state.currentlyAppliedSelection));
		},
		render: function SelectableButtonGroupComponent$Render() {
			var renderAllOption = this.props.allOption && this.get_$selection().groupSize > 0;
			var buttonKeys;
			buttonKeys = $spiff_ReactComponentExtensions.generateUniqueKeys(String).call(null, _.map(this.props.items, function(item) {
				return item.label;
			}), [(renderAllOption ? $spiff_SelectableButtonGroupComponent.$allKey : null)]);
			var className = (!ss.isNullOrEmptyString(this.props.className) ? ('tab-vScrollable ' + this.props.className) : $spiff_UnificationClassNames.vScrollable);
			if (this.props.showApplyAndCancelButtons) {
				className += ' apply-cancel';
			}
			var buttonGroupClassName = $spiff_UnificationClassNames.selectableButtonGroup + (this.props.hasAnyIcons ? ' hasIcons' : '');
			return $spiff_DOMElements.div({ className: buttonGroupClassName }, $spiff_DOMElements.div({ className: className, role: 'listbox' }, (renderAllOption ? ss.mkdel(this, function() {
				return React.createElement($spiff_SelectableButtonComponent, { border: this.props.borders, label: this.props.allItem.label, tooltip: this.props.allItem.tooltip, buttonStyle: this.props.buttonStyle, labelStyle: this.props.labelStyle, isSelected: this.get_$selection().get_theAllItemIsSelected(), isButtonTextMarkedAsExcluded: false, onTap: ss.mkdel(this, function(e) {
					this.$onAllButtonTap();
				}), key: $spiff_SelectableButtonGroupComponent.$allKey, getCustomContentBefore: this.props.allItem.getCustomContentBefore, getCustomContentAfter: this.props.allItem.getCustomContentAfter, additionalRoles: ['option'] });
			})() : null), _.map(this.props.items, ss.mkdel(this, function(item1, index) {
				return React.createElement($spiff_SelectableButtonComponent, { border: this.props.borders, disabled: item1.disabled, label: item1.label, tooltip: item1.tooltip, buttonStyle: this.props.buttonStyle, labelStyle: this.props.labelStyle, isSelected: this.get_$selection().isSelected(index), isButtonTextMarkedAsExcluded: this.props.isSelectionExclusive, onTap: ss.mkdel(this, function(e1) {
					this.$onButtonTap(index);
				}), onDoubleTap: ss.mkdel(this, function(e2) {
					this.$onButtonDoubleTap(e2, item1.onDoubleClick);
				}), key: buttonKeys[index], testId: item1.testId, getCustomContentBefore: item1.getCustomContentBefore, getCustomContentAfter: item1.getCustomContentAfter, tabIndex: (item1.isTabbable ? 0 : null), additionalRoles: ['option'] });
			}))), (this.props.showApplyAndCancelButtons ? ss.mkdel(this, function() {
				return $spiff_DOMElements.div({ className: $spiff_UnificationClassNames.applyCancelPanel }, React.createElement($spiff_ButtonComponent, { label: this.props.applyButtonLabel, customClassName: $spiff_UnificationClassNames.apply$1, border: false, onTap: ss.mkdel(this, function(e3) {
					this.$applyCurrentSelection();
				}), disabled: !this.get_$applyCancelEnabled() }), React.createElement($spiff_ButtonComponent, { label: this.props.cancelButtonLabel, customClassName: $spiff_UnificationClassNames.cancel, border: false, onTap: ss.mkdel(this, function(e4) {
					this.$revertCurrentSelection();
				}), disabled: !this.get_$applyCancelEnabled() }));
			})() : null));
		},
		$onAllButtonTap: function SelectableButtonGroupComponent$OnAllButtonTap() {
			this.get_$selection().handleTapAll();
			this.$notifySelectionChanged();
		},
		$onButtonTap: function SelectableButtonGroupComponent$OnButtonTap(index) {
			this.get_$selection().handleTap(index);
			this.$notifySelectionChanged();
		},
		$onButtonDoubleTap: function SelectableButtonGroupComponent$OnButtonDoubleTap(e, onDoubleClick) {
			if (!ss.staticEquals(onDoubleClick, null)) {
				onDoubleClick(e);
			}
		},
		$notifySelectionChanged: function SelectableButtonGroupComponent$NotifySelectionChanged() {
			if (this.props.showApplyAndCancelButtons) {
				this.setState(this.state);
			}
			else {
				this.$applyCurrentSelection();
			}
		}
	}, React.Component);
	ss.initClass($spiff_SelectableButtonGroupItem, $asm, {});
	ss.initClass($spiff_SelectionEventArgs, $asm, {
		get_selecting: function SelectionEventArgs$get_Selecting() {
			return this.$selecting;
		},
		get_shiftKey: function SelectionEventArgs$get_ShiftKey() {
			return this.$shiftKey;
		},
		get_ctrlKey: function SelectionEventArgs$get_CtrlKey() {
			return this.$ctrlKey;
		}
	}, ss.CancelEventArgs);
	ss.initEnum($spiff_SelectionMethod, $asm, { single: 0, multiGrouped: 1, multiToggle: 2 });
	ss.initClass($spiff_SharedWidgetsPointerEventAdapter, $asm, {
		didMount: function SharedWidgetsPointerEventAdapter$DidMount(domNode, props) {
			var spec = new EventUtils.EventHandleSpec();
			if (!ss.staticEquals(props.pointerClick, null)) {
				spec.tap = function(e) {
					props.pointerClick(e.reactEvent);
				};
			}
			if (!ss.staticEquals(props.pointerDown, null)) {
				spec.firstTouch = function(e1) {
					props.pointerDown(e1.reactEvent);
				};
			}
			if (!ss.staticEquals(props.pointerUp, null)) {
				spec.lastTouch = function(e2) {
					props.pointerUp(e2.reactEvent);
				};
			}
			if (!ss.staticEquals(props.pointerDoubleClick, null)) {
				spec.doubleTap = function(e3) {
					props.pointerDoubleClick(e3.reactEvent);
				};
			}
			this.$eventHandler.UpdateEventHandleSpec(domNode, spec);
		},
		getHtmlAttributes: function SharedWidgetsPointerEventAdapter$GetHtmlAttributes(props) {
			return this.$eventHandler.EventHandlingAttributesForReact;
		},
		willUnmount: function SharedWidgetsPointerEventAdapter$WillUnmount() {
			this.$eventHandler.dispose();
		}
	}, null, [Object]);
	ss.initClass($spiff_ShowMenuOptions, $asm, {
		get_minWidth: function ShowMenuOptions$get_MinWidth() {
			return this.$1$MinWidthField;
		},
		set_minWidth: function ShowMenuOptions$set_MinWidth(value) {
			this.$1$MinWidthField = value;
		}
	});
	ss.initClass($spiff_SpiffBrowserViewport, $asm, {
		get_dimensions: function SpiffBrowserViewport$get_Dimensions() {
			return this.$dimensions;
		},
		get_getVisibleRoomFunc: function SpiffBrowserViewport$get_GetVisibleRoomFunc() {
			return this.$getVisibleRoomFunc;
		},
		getVisibleRoom: function SpiffBrowserViewport$GetVisibleRoom(position) {
			if (!ss.staticEquals(this.get_getVisibleRoomFunc(), null)) {
				return this.get_getVisibleRoomFunc()(position);
			}
			var MaxInt = 2147483647;
			return { roomAbove: 2147483647, roomBelow: 2147483647, roomLeft: 2147483647, roomRight: 2147483647 };
		}
	});
	ss.initClass($spiff_StatelessDropdownComponent, $asm, {
		componentDidMount: function StatelessDropdownComponent$ComponentDidMount() {
			EventUtils.GlobalUIEvents.add_FirstTouch(ss.mkdel(this, this.$handleGlobalTouch));
			EventUtils.GlobalUIEvents.add_DismissTemporaryElements(ss.mkdel(this, this.$handleDismissTemporaryElements));
			$(window).on('resize'.toString(), ss.mkdel(this, this.$handleBrowserResize));
		},
		componentWillUnmount: function StatelessDropdownComponent$ComponentWillUnmount() {
			EventUtils.GlobalUIEvents.remove_FirstTouch(ss.mkdel(this, this.$handleGlobalTouch));
			EventUtils.GlobalUIEvents.remove_DismissTemporaryElements(ss.mkdel(this, this.$handleDismissTemporaryElements));
			$(window).off('resize'.toString(), ss.mkdel(this, this.$handleBrowserResize));
		},
		componentDidUpdate: function StatelessDropdownComponent$ComponentDidUpdate() {
			if (this.props.isSelecting) {
				$spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, this.$positionAndSizeContents));
			}
		},
		$handleGlobalTouch: function StatelessDropdownComponent$HandleGlobalTouch(e, cancelCallback) {
			if (ss.isValue(this.$dropdownElement) && this.$dropdownElement.contains(e.target)) {
				return;
			}
			this.props.onFocusLost();
		},
		$handleDismissTemporaryElements: function StatelessDropdownComponent$HandleDismissTemporaryElements() {
			this.props.onFocusLost();
		},
		$handleBrowserResize: function StatelessDropdownComponent$HandleBrowserResize(e) {
			if (this.props.isSelecting) {
				$spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, this.$positionAndSizeContents));
			}
		},
		$positionAndSizeContents: function StatelessDropdownComponent$PositionAndSizeContents(viewport) {
			var containerElem = ReactDOM.findDOMNode(this.refs[$spiff_StatelessDropdownComponent.$selectorOuterContainerRef]);
			var relativeElem = ReactDOM.findDOMNode(this.refs[$spiff_StatelessDropdownComponent.$positioningElementRef]);
			if (ss.isNullOrUndefined(containerElem) || ss.isNullOrUndefined(relativeElem)) {
				return;
			}
			var container = $(containerElem);
			var height = this.props.getDesiredHeight(container);
			var relativeTo = $(relativeElem);
			var relativePos = tab.PointUtil.fromPosition(relativeTo.offset());
			var room = viewport.getVisibleRoom(relativePos);
			var selectorOffset = relativeTo.innerHeight();
			var actualRoomBelow = room.roomBelow - selectorOffset - 3;
			var actualRoomAbove = room.roomAbove - 3;
			var shouldRenderBelow = actualRoomBelow >= Math.min(height, actualRoomAbove);
			var spaceAvailable = (shouldRenderBelow ? actualRoomBelow : actualRoomAbove);
			height = Math.min(height, ss.Int32.trunc(spaceAvailable));
			var bottomPos = (shouldRenderBelow ? 'auto' : (selectorOffset + 'px'));
			var topPos = (shouldRenderBelow ? (selectorOffset + 'px') : 'auto');
			container.css('bottom', bottomPos);
			container.css('top', topPos);
			container.height(height);
			if (!ss.staticEquals(this.props.getMinimumWidth, null)) {
				var minimumWidth = this.props.getMinimumWidth(container);
				if (minimumWidth > room.roomRight) {
					var shift = minimumWidth - room.roomRight + 13;
					container.css('left', -1 * shift + 'px');
				}
				container.css('min-width', minimumWidth);
			}
		},
		$onDropdownKeyDown: function StatelessDropdownComponent$OnDropdownKeyDown(e) {
			if (!ss.staticEquals(this.props.onKeyDown, null)) {
				this.props.onKeyDown(e);
			}
		},
		render: function StatelessDropdownComponent$Render() {
			var dropDownClassName = 'tab-Dropdown';
			if (!ss.isNullOrUndefined(this.props.styleClass)) {
				dropDownClassName += ' ' + this.props.styleClass;
			}
			var $t2 = $spiff_DOMElements.div;
			var $t3 = { className: dropDownClassName, role: 'combobox', onKeyDown: ss.mkdel(this, this.$onDropdownKeyDown), 'aria-expanded': this.props.isSelecting, ref: this.$boundTrackDropdownFunc };
			var $t1 = new EventUtils.EventHandleSpec();
			$t1.tap = ss.mkdel(this, function(e) {
				this.props.onSelectorToggled();
			});
			return $t2($t3, EventUtils.EventForwarder.div($t1, { className: 'tab-DropdownButton', role: 'button', tabIndex: ss.coalesce(this.props.tabIndex, 0), ref: $spiff_StatelessDropdownComponent.$positioningElementRef }, this.props.renderButton()), (this.props.isSelecting ? this.renderSelector() : null));
		},
		renderSelector: function StatelessDropdownComponent$RenderSelector() {
			return [$spiff_DOMElements.div({ className: 'tab-SelectorContainerOuter', key: 'selector-container-outer', ref: $spiff_StatelessDropdownComponent.$selectorOuterContainerRef }, $spiff_DOMElements.div({ className: 'tab-SelectorContainer', key: 'selector-container' }, this.props.children))];
		}
	}, React.Component);
	ss.initClass($spiff_StatelessHorizontalSliderComponent, $asm, {
		get_$sliderBoxValue: function StatelessHorizontalSliderComponent$get_SliderBoxValue() {
			if (ss.isNullOrUndefined(this.$sliderBoxElement)) {
				return null;
			}
			var value = this.$sliderBoxElement.value;
			if (ss.isNullOrEmptyString(value)) {
				return null;
			}
			var sliderBoxValue = parseInt(tableau.format.convertFullwidthNumberToAscii(value));
			return this.$sanitizeNewValue(sliderBoxValue);
		},
		get_$sliderInputValue: function StatelessHorizontalSliderComponent$get_SliderInputValue() {
			if (ss.isNullOrUndefined(this.$sliderInputElement)) {
				return 0;
			}
			var sliderInputValue = parseInt(this.$sliderInputElement.value);
			return this.$sanitizeNewValue(sliderInputValue);
		},
		componentWillMount: function StatelessHorizontalSliderComponent$ComponentWillMount() {
			this.$addClickDetector();
		},
		componentWillUnmount: function StatelessHorizontalSliderComponent$ComponentWillUnmount() {
			this.$removeClickDetector();
		},
		$addClickDetector: function StatelessHorizontalSliderComponent$AddClickDetector() {
			this.$resetMouseState();
			EventUtils.GlobalUIEvents.add_DragEnd(ss.mkdel(this, this.$handleDragEnd));
		},
		$removeClickDetector: function StatelessHorizontalSliderComponent$RemoveClickDetector() {
			EventUtils.GlobalUIEvents.remove_DragEnd(ss.mkdel(this, this.$handleDragEnd));
		},
		$resetMouseState: function StatelessHorizontalSliderComponent$ResetMouseState() {
			this.$dragStartedOnSlider = false;
		},
		$handleDragEnd: function StatelessHorizontalSliderComponent$HandleDragEnd(e, cancelCallback) {
			if (this.$dragStartedOnSlider) {
				this.$commitValue(this.get_$sliderInputValue(), false);
				this.$resetMouseState();
			}
		},
		$renderSlider: function StatelessHorizontalSliderComponent$RenderSlider() {
			var sliderProps = { type: 'range', value: this.props.value.toString(), min: this.props.minValue, max: this.props.maxValue, className: $spiff_UnificationClassNames.sliderInputClass, style: { width: this.props.width }, disabled: this.props.disabled, onInput: ss.mkdel(this, this.$onSliderControlInput), onChange: ss.mkdel(this, this.$onSliderControlInput), onMouseUp: ss.mkdel(this, this.$onSliderControlMouseUp), onMouseDown: ss.mkdel(this, this.$onSliderControlMouseDown), onTouchEnd: ss.mkdel(this, this.$onSliderControlTouchEnd), onTouchStart: ss.mkdel(this, this.$onSliderControlTouchStart), ref: ss.mkdel(this, this.$trackSliderInput), key: 'sliderInput' };
			return $spiff_DOMElements.input(sliderProps);
		},
		$renderValueTextBox: function StatelessHorizontalSliderComponent$RenderValueTextBox() {
			var sliderBoxProps = { type: 'text', value: (this.props.emptyTextBox ? '' : this.props.value.toString()), className: $spiff_UnificationClassNames.sliderTextBoxClass, disabled: this.props.disabled, onInput: ss.mkdel(this, this.$onTextInput), onChange: ss.mkdel(this, this.$onTextInput), onKeyUp: ss.mkdel(this, this.$onTextKeyUp), onBlur: ss.mkdel(this, this.$onTextBlur), ref: ss.mkdel(this, this.$trackSliderBox), key: 'sliderBox' };
			if (ss.isValue(this.props.tabIndex)) {
				sliderBoxProps.tabIndex = ss.unbox(this.props.tabIndex);
			}
			return $spiff_DOMElements.input(sliderBoxProps);
		},
		render: function StatelessHorizontalSliderComponent$Render() {
			var sliderElements = [];
			if (this.props.showValueTextBox) {
				var sliderBox = this.$renderValueTextBox();
				sliderElements.push(sliderBox);
				if (this.props.showPercentageSign) {
					sliderElements.push($spiff_DOMElements.div({ className: $spiff_UnificationClassNames.sliderPercentageClass, key: 'percentageSign' }, '%'));
				}
			}
			var sliderInput = this.$renderSlider();
			return $spiff_DOMElements.div({ className: this.props.styleClass + (this.props.disabled ? ' disabled' : '') + (ss.isNullOrUndefined(this.props.extraCssClass) ? '' : (' ' + this.props.extraCssClass)) }, $spiff_DOMElements.div({ className: 'unification-slider-control tabHorizontalSliderContainer' }, sliderInput), sliderElements);
		},
		$onTextBlur: function StatelessHorizontalSliderComponent$OnTextBlur(event) {
			this.$commitValue(ss.coalesce(this.get_$sliderBoxValue(), 0), false);
		},
		$onTextKeyUp: function StatelessHorizontalSliderComponent$OnTextKeyUp(keyboardEvent) {
			if (keyboardEvent.which === 13) {
				this.$commitValue(ss.coalesce(this.get_$sliderBoxValue(), 0), true);
			}
		},
		$onTextInput: function StatelessHorizontalSliderComponent$OnTextInput(event) {
			this.$changeDisplayValue(this.get_$sliderBoxValue());
		},
		$onSliderControlMouseUp: function StatelessHorizontalSliderComponent$OnSliderControlMouseUp(event) {
			this.$onSliderControlDragEnd();
		},
		$onSliderControlMouseDown: function StatelessHorizontalSliderComponent$OnSliderControlMouseDown(event) {
			this.$onSliderControlDragStart();
		},
		$onSliderControlTouchEnd: function StatelessHorizontalSliderComponent$OnSliderControlTouchEnd(event) {
			this.$onSliderControlDragEnd();
		},
		$onSliderControlTouchStart: function StatelessHorizontalSliderComponent$OnSliderControlTouchStart(event) {
			this.$onSliderControlDragStart();
		},
		$onSliderControlDragStart: function StatelessHorizontalSliderComponent$OnSliderControlDragStart() {
			this.$dragStartedOnSlider = true;
		},
		$onSliderControlDragEnd: function StatelessHorizontalSliderComponent$OnSliderControlDragEnd() {
			if (this.$dragStartedOnSlider) {
				this.$commitValue(this.get_$sliderInputValue(), false);
			}
			else {
				this.$changeDisplayValue(this.get_$sliderInputValue());
			}
		},
		$onSliderControlInput: function StatelessHorizontalSliderComponent$OnSliderControlInput(event) {
			this.$changeDisplayValue(this.get_$sliderInputValue());
		},
		$changeDisplayValue: function StatelessHorizontalSliderComponent$ChangeDisplayValue(newValue) {
			if (this.props.disabled) {
				return;
			}
			this.props.displayValueChanged(newValue);
		},
		$commitValue: function StatelessHorizontalSliderComponent$CommitValue(newValue, forceCommit) {
			if (this.props.disabled) {
				return;
			}
			this.props.commitValue(newValue, forceCommit);
		},
		$trackSliderInput: function StatelessHorizontalSliderComponent$TrackSliderInput(inputElement) {
			this.$sliderInputElement = null;
			if (ss.isValue(inputElement)) {
				this.$sliderInputElement = inputElement;
			}
		},
		$trackSliderBox: function StatelessHorizontalSliderComponent$TrackSliderBox(inputElement) {
			this.$sliderBoxElement = null;
			if (ss.isValue(inputElement)) {
				this.$sliderBoxElement = inputElement;
			}
		},
		$sanitizeNewValue: function StatelessHorizontalSliderComponent$SanitizeNewValue(newValue) {
			if (_.isNaN(newValue) || newValue < this.props.minValue) {
				return this.props.minValue;
			}
			else if (newValue > this.props.maxValue) {
				return this.props.maxValue;
			}
			return newValue;
		}
	}, $spiff_PureRenderComponent);
	ss.initClass($spiff_StyledButton, $asm, {}, $spiff_LabelButton, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($spiff_StyledTextButton, $asm, {});
	ss.initClass($spiff_TabControl, $asm, {
		add_tabChanged: function TabControl$add_TabChanged(value) {
			this.$1$TabChangedField = ss.delegateCombine(this.$1$TabChangedField, value);
		},
		remove_tabChanged: function TabControl$remove_TabChanged(value) {
			this.$1$TabChangedField = ss.delegateRemove(this.$1$TabChangedField, value);
		},
		get_domRoot: function TabControl$get_DomRoot() {
			return this.$template.get_root();
		},
		get_tabs: function TabControl$get_Tabs() {
			return this.$template.get_tabs();
		},
		get_contentArea: function TabControl$get_ContentArea() {
			return this.$template.get_contentArea();
		},
		get_activeTabId: function TabControl$get_ActiveTabId() {
			return this.$selectedTab;
		},
		set_activeTabId: function TabControl$set_ActiveTabId(value) {
			if (!ss.referenceEquals(this.$selectedTab, value)) {
				this.$selectedTab = value;
				if (ss.isValue(this.$1$TabChangedField)) {
					this.$1$TabChangedField();
				}
			}
		},
		addTab: function TabControl$AddTab(id, label, content, enabled) {
			if (ss.keyExists(this.$idButtonMap, id)) {
				tab.Log.get(this).error('Trying to add a tab that already exists: ' + id, []);
				return;
			}
			var tabLabel = this.$template.createTabLabel(id, label);
			tabLabel.domRoot.addClass('tabTabLabelId-' + id);
			var tabButton = new $spiff_ToggleButton(tabLabel.domRoot, null);
			var tabPropertyHandler = ss.mkdel(this, function(sender, e) {
				if (ss.referenceEquals(e.get_propertyName(), $spiff_ToggleButton.selectedProperty) && tabButton.get_selected()) {
					this.$showTabContent(content.get_rootElement(), id);
				}
			});
			tabButton.add_propertyChanged(tabPropertyHandler);
			this.$disposableHolder.add$1(new tab.CallOnDispose(function() {
				tabButton.remove_propertyChanged(tabPropertyHandler);
			}));
			this.$disposableHolder.add$1(tabButton);
			this.$buttonGroup.addItem(tabButton);
			this.$idButtonMap[id] = tabButton;
			this.$template.get_tabs().append(tabLabel.domRoot);
			content.addToDom(this.$template.get_contentArea());
			if (enabled) {
				this.selectTab(id);
			}
			else {
				tabButton.set_disabled(true);
			}
		},
		selectTab: function TabControl$SelectTab(tabId) {
			if (!ss.keyExists(this.$idButtonMap, tabId)) {
				tab.Log.get(this).error('Trying to select a tab that does not exist: ' + tabId, []);
				return;
			}
			this.$buttonGroup.selectItem(this.$idButtonMap[tabId]);
		},
		enableTab: function TabControl$EnableTab(tabId, enable) {
			if (!ss.keyExists(this.$idButtonMap, tabId)) {
				tab.Log.get(this).error('Trying to select a tab that does not exist: ' + tabId, []);
				return;
			}
			this.$idButtonMap[tabId].set_disabled(!enable);
			this.selectTab(this.get_activeTabId());
		},
		dispose: function TabControl$Dispose() {
			this.$disposableHolder.dispose();
			this.$buttonGroup.dispose();
		},
		$showTabContent: function TabControl$ShowTabContent(content, tabId) {
			this.$template.get_contentArea().children().hide();
			content.show();
			this.set_activeTabId(tabId);
		}
	}, null, [ss.IDisposable]);
	ss.initClass($spiff_TableauClickHandler, $asm, {
		add_$press: function TableauClickHandler$add_Press(value) {
			this.$1$PressField = ss.delegateCombine(this.$1$PressField, value);
		},
		remove_$press: function TableauClickHandler$remove_Press(value) {
			this.$1$PressField = ss.delegateRemove(this.$1$PressField, value);
		},
		add_$click: function TableauClickHandler$add_Click(value) {
			this.$1$ClickField = ss.delegateCombine(this.$1$ClickField, value);
		},
		remove_$click: function TableauClickHandler$remove_Click(value) {
			this.$1$ClickField = ss.delegateRemove(this.$1$ClickField, value);
		},
		add_$doubleClick: function TableauClickHandler$add_DoubleClick(value) {
			this.$1$DoubleClickField = ss.delegateCombine(this.$1$DoubleClickField, value);
		},
		remove_$doubleClick: function TableauClickHandler$remove_DoubleClick(value) {
			this.$1$DoubleClickField = ss.delegateRemove(this.$1$DoubleClickField, value);
		},
		add_$rightClick: function TableauClickHandler$add_RightClick(value) {
			this.$1$RightClickField = ss.delegateCombine(this.$1$RightClickField, value);
		},
		remove_$rightClick: function TableauClickHandler$remove_RightClick(value) {
			this.$1$RightClickField = ss.delegateRemove(this.$1$RightClickField, value);
		},
		get_stopPropagationOnEvent: function TableauClickHandler$get_StopPropagationOnEvent() {
			return this.$stopPropagationOnEvent;
		},
		set_stopPropagationOnEvent: function TableauClickHandler$set_StopPropagationOnEvent(value) {
			this.$stopPropagationOnEvent = value;
		},
		dispose: function TableauClickHandler$Dispose() {
			if (ss.isValue(this.$handler)) {
				this.$handler.dispose();
				this.$handler = null;
			}
			this.$disposables.dispose();
		},
		onPress: function TableauClickHandler$OnPress(action) {
			this.add_$press(action);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_$press(action);
			})));
			return this;
		},
		onClick: function TableauClickHandler$OnClick(action) {
			this.add_$click(action);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_$click(action);
			})));
			return this;
		},
		onDoubleClick: function TableauClickHandler$OnDoubleClick(action) {
			this.add_$doubleClick(action);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_$doubleClick(action);
			})));
			this.$addEventHandler('doubleTap', ss.mkdel(this, this.$handleDoubleClickEvent));
			return this;
		},
		onRightClick: function TableauClickHandler$OnRightClick(action) {
			this.add_$rightClick(action);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_$rightClick(action);
			})));
			return this;
		},
		$addEventHandler: function TableauClickHandler$AddEventHandler(eventName, action) {
			if (!this.$eventConfig.IsHandling(eventName)) {
				var tempSpec = new EventUtils.EventHandleSpec();
				tempSpec.SetHandler(eventName, action);
				this.$handler.Update(tempSpec);
				$.extend(this.$eventConfig, tempSpec);
			}
		},
		$raiseEvent: function TableauClickHandler$RaiseEvent(e, callback, stopPropagation) {
			if (ss.isValue(callback)) {
				if (stopPropagation) {
					e.stopPropagation();
				}
				callback(e);
			}
		},
		$handlePressEvent: function TableauClickHandler$HandlePressEvent(e) {
			tab.Log.get(this).debug('Press - %s', [e.type]);
			this.$startX = e.pageX;
			this.$startY = e.pageY;
			this.$raiseEvent(e, this.$1$PressField, false);
		},
		$handleClickEvent: function TableauClickHandler$HandleClickEvent(e) {
			tab.Log.get(this).debug('Click - %s', [e.type]);
			this.$raiseEvent(e, this.$1$ClickField, this.$stopPropagationOnEvent);
			if (e.type === 'touchend') {
				$spiff_ClickBuster.preventGhostClick(this.$startX, this.$startY, e.target);
			}
		},
		$handleDoubleClickEvent: function TableauClickHandler$HandleDoubleClickEvent(e) {
			tab.Log.get(this).debug('DoubleClick - %s', [e.type]);
			this.$raiseEvent(e, this.$1$DoubleClickField, this.$stopPropagationOnEvent);
		},
		$handleRightClickEvent: function TableauClickHandler$HandleRightClickEvent(e) {
			tab.Log.get(this).debug('RightClick - %s', [e.type]);
			var domObjectHandleTouchEvent = tab.DomUtil.handleTouchEvents(e.target);
			if (domObjectHandleTouchEvent) {
				e.preventDefault();
			}
			this.$raiseEvent(e, this.$1$RightClickField, this.$stopPropagationOnEvent);
		}
	}, null, [ss.IDisposable]);
	ss.initClass($spiff_TableauEventHandlerTracker, $asm, {});
	ss.initClass($spiff_TextDropdownButtonComponent, $asm, {
		render: function TextDropdownButtonComponent$Render() {
			var selectionTextClass = 'tab-SelectionText' + (this.props.isSelectionTextMarkedAsExcluded ? ' excluded' : '');
			var styleClass = ss.coalesce(this.props.styleClass, 'tab-unification-outline-dropdown');
			return React.createElement($spiff_GenericDropdownButtonComponent, { styleClass: 'tab-TextDropdownButton ' + styleClass, selectionDisplay: ss.mkdel(this, function() {
				return [(!ss.isNullOrEmptyString(this.props.selectionIconClass) ? ss.mkdel(this, function() {
					return $spiff_DOMElements.span({ className: 'tab-Icon ' + this.props.selectionIconClass, key: 'icon' });
				})() : null), $spiff_DOMElements.span({ className: selectionTextClass, key: 'text' }, this.props.selectionText)];
			}) });
		}
	}, $spiff_PureRenderComponent);
	ss.initClass($spiff_ToggleButtonViewModel, $asm, {
		add_toggled: function ToggleButtonViewModel$add_Toggled(value) {
			this.$2$ToggledField = ss.delegateCombine(this.$2$ToggledField, value);
		},
		remove_toggled: function ToggleButtonViewModel$remove_Toggled(value) {
			this.$2$ToggledField = ss.delegateRemove(this.$2$ToggledField, value);
		},
		get_toggleValue: function ToggleButtonViewModel$get_ToggleValue() {
			return this.$toggleValue;
		},
		set_toggleValue: function ToggleButtonViewModel$set_ToggleValue(value) {
			if (value !== this.get_toggleValue()) {
				this.raiseToggled();
			}
			this.$toggleValue = value;
		},
		get_data: function ToggleButtonViewModel$get_Data() {
			return this.$2$DataField;
		},
		set_data: function ToggleButtonViewModel$set_Data(value) {
			this.$2$DataField = value;
		},
		raiseToggled: function ToggleButtonViewModel$RaiseToggled() {
			if (!ss.staticEquals(this.$2$ToggledField, null)) {
				this.$2$ToggledField();
			}
		}
	}, $spiff_BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initEnum($spiff_UberPopupHorizontalAlign, $asm, { left: 0, center: 1, right: 2 });
	ss.initEnum($spiff_UberPopupHorizontalAttach, $asm, { left: 0, right: 1 });
	ss.initEnum($spiff_UberPopupMode, $asm, { blockAndAutoHide: 0, doNotBlockAndAutoHide: 1, doNotBlockAndStayOpen: 2 });
	ss.initClass($spiff_UberPopupShowOptions, $asm, {
		isPopupHeightLimited: function UberPopupShowOptions$IsPopupHeightLimited() {
			return this.limitPopupHeight || ss.isValue(this.maxPopupHeight);
		}
	});
	$spiff_UberPopupShowOptions.$ctor1.prototype = $spiff_UberPopupShowOptions.prototype;
	ss.initClass($spiff_UberPopupTemplate, $asm, {
		get_caretHeight: function UberPopupTemplate$get_CaretHeight() {
			if (!ss.isValue($spiff_UberPopupTemplate.$caretHeight)) {
				$spiff_UberPopupTemplate.$caretHeight = tab.DoubleUtil.roundToInt(this.caret.outerHeight());
			}
			return ss.unbox($spiff_UberPopupTemplate.$caretHeight);
		}
	}, $spiff_Template, [ss.IDisposable]);
	ss.initEnum($spiff_UberPopupTheme, $asm, { standard: 0, minimalist: 1 });
	ss.initClass($spiff_UberPopupView, $asm, {
		get_uberPopupShadowHeight: null,
		get_uberPopupMinimalistShadowHeight: function UberPopupView$get_UberPopupMinimalistShadowHeight() {
			return 0;
		},
		get_width: function UberPopupView$get_Width() {
			return this.element.outerWidth(false);
		},
		get_height: function UberPopupView$get_Height() {
			return this.element.outerHeight(false);
		},
		get_dom: function UberPopupView$get_Dom() {
			return this.get_template();
		},
		$addKeyboardAccessibility: function UberPopupView$AddKeyboardAccessibility() {
			this.element.attr('tabindex', '-1').on('keydown', ss.mkdel(this, function(e) {
				if (e.which === 27 && !(e.metaKey || e.shiftKey || e.ctrlKey || e.altKey)) {
					this.get_viewModel().hide(false);
					e.preventDefault();
					e.stopPropagation();
				}
			}));
			if (this.get_viewModel().options.popupMode === 0) {
				this.get_viewModel().add_shown(ss.mkdel(this, function() {
					$spiff_FocusManager.trapFocus(this.element);
				}));
			}
		},
		dispose: function UberPopupView$Dispose() {
			this.disposeContent();
			this.popupViewModel.remove_shown(ss.mkdel(this, this.shown));
			this.popupViewModel.remove_hidden(ss.mkdel(this, this.hidden));
			this.disposeGlass();
			this.$removeGlobalUIEventHandlers();
			ss.makeGenericType($spiff_BaseView$1, [$spiff_UberPopupViewModel]).prototype.dispose.call(this);
		},
		disposeContent: function UberPopupView$DisposeContent() {
			if (ss.isValue(this.contentView)) {
				this.contentView.dispose();
			}
		},
		updateMode: function UberPopupView$UpdateMode() {
			if (!this.visible) {
				return;
			}
			switch (this.popupViewModel.get_mode()) {
				case 0: {
					this.$removeGlobalUIEventHandlers();
					this.showGlass();
					break;
				}
				case 1: {
					this.hideGlass();
					this.$addGlobalUIEventHandlers();
					break;
				}
				case 2: {
					this.$removeGlobalUIEventHandlers();
					this.hideGlass();
					break;
				}
			}
		},
		onViewModelPropertyChanged: function UberPopupView$OnViewModelPropertyChanged(sender, e) {
			if (e.get_propertyName() === 'mode') {
				this.updateMode();
			}
			else if (e.get_propertyName() === 'size') {
				this.positionPopup();
			}
			else if (e.get_propertyName() === 'content') {
				this.updateContent();
			}
		},
		shown: function UberPopupView$Shown() {
			var options = this.get_viewModel().options;
			this.updateContent();
			this.visible = true;
			this.updateMode();
			if (options.theme === 1) {
				this.element.addClass($spiff_UberPopupView.minimalistThemeClass);
			}
			if (options.useCaret) {
				this.get_dom().domRoot.addClass('tabUberCaretStyle');
			}
			this.element.css('left', '0px').css('top', '0px');
			this.element.appendTo('body');
			this.contentView.addToDom(ss.cast(this.get_template(), $spiff_UberPopupTemplate).content);
			if (ss.isValue(options.additionalClassNames)) {
				options.additionalClassNames.forEach(ss.mkdel(this, function(className) {
					this.element.addClass(className);
				}));
			}
			if (this.popupViewModel.options.isToolbarFlyout && tsConfig.is_mobile) {
				this.element.show();
				this.positionPopup();
			}
			else {
				this.element.hide();
				this.positionPopup();
				this.element.show();
				if (this.get_viewModel().options.focusOnShown) {
					window.setTimeout(ss.mkdel(this, function() {
						if (!$.contains(this.element[0], document.activeElement)) {
							this.element.focus();
						}
					}));
				}
			}
		},
		hidden: function UberPopupView$Hidden() {
			this.visible = false;
			this.hideGlass();
			this.element.hide();
			this.element.detach();
		},
		showGlass: function UberPopupView$ShowGlass() {
			if (ss.isNullOrUndefined(this.glass)) {
				this.glass = new $spiff_Glass(null, false);
				this.glass.set_zIndex(this.popupViewModel.options.glassZIndex);
				this.glass.add_click(ss.mkdel(this, this.glassClicked));
			}
			this.glass.show();
		},
		hideGlass: function UberPopupView$HideGlass() {
			if (ss.isValue(this.glass)) {
				this.glass.hide();
			}
		},
		disposeGlass: function UberPopupView$DisposeGlass() {
			if (ss.isValue(this.glass)) {
				this.glass.remove_click(ss.mkdel(this, this.glassClicked));
				this.glass.dispose();
				this.glass = null;
			}
		},
		glassClicked: function UberPopupView$GlassClicked() {
			this.element.fadeOut(50, ss.mkdel(this, function() {
				this.popupViewModel.hide(true);
			}));
		},
		$addGlobalUIEventHandlers: function UberPopupView$AddGlobalUIEventHandlers() {
			EventUtils.GlobalUIEvents.add_FirstTouch(ss.mkdel(this, this.$handleGlobalTouch));
			EventUtils.GlobalUIEvents.add_DismissTemporaryElements(ss.mkdel(this, this.$handleDismissTemporaryElements));
		},
		$removeGlobalUIEventHandlers: function UberPopupView$RemoveGlobalUIEventHandlers() {
			EventUtils.GlobalUIEvents.remove_FirstTouch(ss.mkdel(this, this.$handleGlobalTouch));
			EventUtils.GlobalUIEvents.remove_DismissTemporaryElements(ss.mkdel(this, this.$handleDismissTemporaryElements));
		},
		$handleGlobalTouch: function UberPopupView$HandleGlobalTouch(e, callback) {
			if (this.get_template().domRoot.get(0).contains(e.target)) {
				return;
			}
			if (ss.isValue(this.popupViewModel.options.globalTouchWhitelist)) {
				for (var $t1 = 0; $t1 < this.popupViewModel.options.globalTouchWhitelist.length; $t1++) {
					var ignorableElement = this.popupViewModel.options.globalTouchWhitelist[$t1];
					if (ignorableElement.contains(e.target)) {
						return;
					}
				}
			}
			this.popupViewModel.hide(false);
		},
		$handleDismissTemporaryElements: function UberPopupView$HandleDismissTemporaryElements() {
			this.popupViewModel.hide(false);
		},
		positionPopup: function UberPopupView$PositionPopup() {
			if (ss.isNullOrUndefined(this.get_viewModel().get_relativeElement()) || this.get_viewModel().get_relativeElement().length < 1) {
				ss.Debug.assert(false, "Popup's relative element should exist.");
				return;
			}
			this.get_viewModel().get_resizeContent()(ss.cast(this.get_template(), $spiff_UberPopupTemplate).content, this.element);
			this.element.css('z-index', this.popupViewModel.options.glassZIndex + 1);
			var options = this.get_viewModel().options;
			if (!options.isPopupHeightLimited()) {
				this.element.css('max-height', '100%');
			}
			this.positionPopupHorizontally();
			if (options.isToolbarFlyout) {
				this.$positionFlyoutVertically();
			}
			else {
				this.positionPopupVertically();
			}
			this.get_dom().caret.toggle(options.useCaret);
			this.get_dom().caretBorder.toggle(options.useCaret);
		},
		positionPopupHorizontally: function UberPopupView$PositionPopupHorizontally() {
			var options = this.get_viewModel().options;
			var relativeObj = this.get_viewModel().get_relativeElement();
			var doc = $(relativeObj.prop('ownerDocument'));
			var popupWidth = this.get_width();
			var left = tab.DomUtil.getPageOffset$1(relativeObj).left;
			if (options.horizontalAlign === 1) {
				left += relativeObj.outerWidth(false) / 2;
				left -= popupWidth / 2;
			}
			else if (options.horizontalAlign === 2) {
				left += relativeObj.outerWidth(false);
				left -= popupWidth;
			}
			var overlap = left + popupWidth - doc.width();
			if (overlap > 0) {
				left -= overlap;
			}
			if (options.horizontalAttach === 0) {
				this.element.css('right', '');
				this.element.css('left', Math.max(left, 0) + 'px');
			}
			else {
				var bodyWidth = $('body').outerWidth(true);
				var right = bodyWidth - (left + popupWidth);
				right -= Math.max(0, right + popupWidth - bodyWidth);
				this.element.css('left', '');
				this.element.css('right', right + 'px');
			}
			if (options.isToolbarFlyout) {
				this.element.css('min-width', tab.DoubleUtil.roundToInt(relativeObj.outerWidth(false)));
			}
		},
		$positionFlyoutVertically: function UberPopupView$PositionFlyoutVertically() {
			var options = this.get_viewModel().options;
			var relativeObj = this.get_viewModel().get_relativeElement();
			var body = $('body');
			var top = tab.DomUtil.getPageOffset$1(relativeObj).top;
			if (options.preferUp) {
				top += 1;
				top += (options.coverRelativeElement ? relativeObj.outerHeight(false) : 0);
				var height = body.outerHeight(true);
				this.element.css('top', '');
				this.element.css('bottom', ss.Int32.trunc(height - top) + 'px');
			}
			else {
				top -= 1;
				top += (options.coverRelativeElement ? 0 : relativeObj.outerHeight(false));
				this.element.css('bottom', '');
				this.element.css('top', ss.Int32.trunc(top) + 'px');
			}
		},
		positionPopupVertically: function UberPopupView$PositionPopupVertically() {
			var options = this.get_viewModel().options;
			var relativeObj = this.get_viewModel().get_relativeElement();
			var relativePos = tab.DomUtil.getPageOffset$1(relativeObj);
			var room = tab.DomUtil.roomAroundPosition(relativePos);
			var relativeObjHeight = relativeObj.outerHeight(false);
			var uberPopupShadowHeight = ((options.theme === 1) ? this.get_uberPopupMinimalistShadowHeight() : this.get_uberPopupShadowHeight());
			if (options.isPopupHeightLimited()) {
				this.$setMaxHeight(room, uberPopupShadowHeight, relativeObjHeight);
			}
			var popupHeight = this.get_height();
			var enoughRoomBelow = room.roomBelow >= popupHeight + relativeObjHeight + uberPopupShadowHeight;
			var enoughRoomAbove = room.roomAbove > popupHeight + uberPopupShadowHeight;
			var useCaret = this.popupViewModel.options.useCaret;
			if (useCaret) {
				enoughRoomAbove = room.roomAbove > popupHeight + this.get_dom().get_caretHeight() + 4 + uberPopupShadowHeight;
			}
			var belowYPosition = relativePos.top + relativeObjHeight;
			var aboveYPosition = relativePos.top - popupHeight;
			var posY;
			if (options.preferUp && enoughRoomAbove) {
				posY = aboveYPosition;
			}
			else if (enoughRoomBelow && !useCaret) {
				posY = belowYPosition;
			}
			else if (enoughRoomAbove) {
				posY = aboveYPosition;
			}
			else if (room.roomBelow >= room.roomAbove && !useCaret) {
				posY = relativePos.top - (popupHeight - room.roomBelow + uberPopupShadowHeight);
			}
			else {
				posY = relativePos.top - room.roomAbove + uberPopupShadowHeight;
			}
			if (useCaret) {
				posY -= this.get_dom().get_caretHeight() + 4;
			}
			this.element.css('top', posY + 'px');
		},
		$setMaxHeight: function UberPopupView$SetMaxHeight(room, uberPopupShadowHeight, relativeObjHeight) {
			var options = this.get_viewModel().options;
			var maxHeight = null;
			if (options.limitPopupHeight) {
				maxHeight = Math.max(room.roomAbove, room.roomBelow - relativeObjHeight) - uberPopupShadowHeight;
			}
			if (ss.isValue(options.maxPopupHeight)) {
				var $t1 = maxHeight;
				if (ss.isNullOrUndefined($t1)) {
					$t1 = Number.MAX_VALUE;
				}
				var maxAvailableHeight = $t1;
				maxHeight = Math.min(maxAvailableHeight, ss.unbox(options.maxPopupHeight));
			}
			if (ss.isValue(maxHeight)) {
				this.element.css('max-height', maxHeight + 'px');
			}
		},
		updateContent: function UberPopupView$UpdateContent() {
			this.disposeContent();
			var content = ss.cast(this.get_template(), $spiff_UberPopupTemplate).content;
			content.children().detach();
			this.contentView = this.get_viewModel().createContentView();
			if (this.visible) {
				this.contentView.addToDom(content);
			}
		}
	}, ss.makeGenericType($spiff_BaseView$1, [$spiff_UberPopupViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$spiff_UberPopupViewModel])]);
	ss.initClass($spiff_UberPopupViewModel, $asm, {
		add_shown: function UberPopupViewModel$add_Shown(value) {
			this.$2$ShownField = ss.delegateCombine(this.$2$ShownField, value);
		},
		remove_shown: function UberPopupViewModel$remove_Shown(value) {
			this.$2$ShownField = ss.delegateRemove(this.$2$ShownField, value);
		},
		add_hidden: function UberPopupViewModel$add_Hidden(value) {
			this.$2$HiddenField = ss.delegateCombine(this.$2$HiddenField, value);
		},
		remove_hidden: function UberPopupViewModel$remove_Hidden(value) {
			this.$2$HiddenField = ss.delegateRemove(this.$2$HiddenField, value);
		},
		add_commit: function UberPopupViewModel$add_Commit(value) {
			this.$2$CommitField = ss.delegateCombine(this.$2$CommitField, value);
		},
		remove_commit: function UberPopupViewModel$remove_Commit(value) {
			this.$2$CommitField = ss.delegateRemove(this.$2$CommitField, value);
		},
		get_mode: function UberPopupViewModel$get_Mode() {
			return this.options.popupMode;
		},
		set_mode: function UberPopupViewModel$set_Mode(value) {
			if (this.options.popupMode === value) {
				return;
			}
			this.options.popupMode = value;
			this.notifyPropertyChanged('mode');
		},
		get_content: function UberPopupViewModel$get_Content() {
			return this.$content;
		},
		set_content: function UberPopupViewModel$set_Content(value) {
			this.$content = value;
			if (ss.isValue(this.$content)) {
				this.$content.updateUberPopupViewModel(this);
			}
			this.notifyPropertyChanged('content');
			this.notifyPropertyChanged('size');
		},
		set_disposeOnHide: function UberPopupViewModel$set_DisposeOnHide(value) {
			this.remove_hidden(ss.mkdel(this, this.dispose));
			if (value) {
				this.add_hidden(ss.mkdel(this, this.dispose));
			}
		},
		get_relativeElement: function UberPopupViewModel$get_RelativeElement() {
			return this.$relativeElementFunc();
		},
		set_relativeElement: function UberPopupViewModel$set_RelativeElement(value) {
			this.$relativeElementFunc = function() {
				return value;
			};
		},
		get_resizeContent: function UberPopupViewModel$get_ResizeContent() {
			return this.$2$ResizeContentField;
		},
		set_resizeContent: function UberPopupViewModel$set_ResizeContent(value) {
			this.$2$ResizeContentField = value;
		},
		createContentView: function UberPopupViewModel$CreateContentView() {
			return tab.ObjectRegistry.newView$1(ss.makeGenericType(tab.IView$1, [tab.IViewModel])).call(null, this.get_content().get_viewType(), [this.get_content().get_viewModel()]);
		},
		updatePosition: function UberPopupViewModel$UpdatePosition() {
			this.notifyPropertyChanged('size');
		},
		show: function UberPopupViewModel$Show() {
			if (ss.isNullOrUndefined(this.$2$ShownField)) {
				return;
			}
			this.$2$ShownField();
		},
		hide: function UberPopupViewModel$Hide(commitOnHide) {
			if (commitOnHide && ss.isValue(this.$2$CommitField)) {
				this.$2$CommitField();
			}
			this.raiseActionEvent(this.$2$HiddenField);
		},
		addDisposables: function UberPopupViewModel$AddDisposables(disposable) {
			this.disposables.add$1(disposable);
		}
	}, $spiff_BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	$spiff_UberPopupViewModel.$ctor1.prototype = $spiff_UberPopupViewModel.prototype;
	ss.initClass($spiff_UnificationClassNames, $asm, {});
	ss.initClass($spiff_UnificationDarkMenuTheme, $asm, {}, $spiff_MenuViewTheme);
	ss.initClass($spiff_UnificationLightMenuTheme, $asm, {}, $spiff_MenuViewTheme);
	ss.initClass($spiff_VerticalSpinnerComponent, $asm, {
		render: function VerticalSpinnerComponent$Render() {
			var value = this.state.displayValue;
			if (this.props.disabled && ss.isValue(this.props.disabledText)) {
				value = this.props.disabledText;
			}
			var htmlProps = { type: 'text', value: value, onChange: ss.mkdel(this, this.$onInputChange), onBlur: ss.mkdel(this, this.$acceptInput), disabled: this.props.disabled, maxLength: this.props.maxLength, onKeyDown: ss.mkdel(this, this.$handleKeyDown), onKeyUp: ss.mkdel(this, this.$handleKeyUp) };
			var textInput = $spiff_DOMElements.input(htmlProps);
			var $t4 = $spiff_DOMElements.div;
			var $t1 = new EventUtils.EventHandleSpec();
			$t1.tap = ss.mkdel(this, function(e) {
				this.$increment();
			});
			var $t3 = EventUtils.EventForwarder.div($t1, { className: 'tab-unification-spinner-btn' }, $spiff_DOMElements.span({ className: 'tab-img-triangle-up', key: 'tab-img-triangle-up' }));
			var $t2 = new EventUtils.EventHandleSpec();
			$t2.tap = ss.mkdel(this, function(e1) {
				this.$decrement();
			});
			var buttonGroup = $t4({ className: 'tab-unification-spinner-btn-group tab-unification-spinner-btn-group-vertical' }, $t3, EventUtils.EventForwarder.div($t2, { className: 'tab-unification-spinner-btn' }, $spiff_DOMElements.span({ className: 'tab-img-triangle-down', key: 'tab-img-triangle-down' })));
			var spinner = $spiff_DOMElements.div({ className: 'tab-unification-spinner-ctrl' + (this.props.disabled ? ' disabled' : '') }, textInput, buttonGroup);
			if (ss.isValue(this.props.label)) {
				spinner = $spiff_DOMElements.div(null, $spiff_DOMElements.span({ className: 'tab-unification-spinner-label' + (this.props.disabled ? ' disabled' : '') }, this.props.label), spinner);
			}
			spinner = $spiff_DOMElements.div({ className: ss.coalesce(this.props.styleClass, 'tab-outline-spinner') }, spinner);
			if (ss.isValue(this.props.extraCssClass)) {
				spinner = $spiff_DOMElements.div({ className: this.props.extraCssClass }, spinner);
			}
			return spinner;
		},
		componentWillReceiveProps: function VerticalSpinnerComponent$ComponentWillReceiveProps(nextProps) {
			this.setState($spiff_VerticalSpinnerComponent.$stateFromValue(nextProps.initialValue));
		},
		componentWillUnmount: function VerticalSpinnerComponent$ComponentWillUnmount() {
			this.$clearDelayedUpdate();
		},
		$onInputChange: function VerticalSpinnerComponent$OnInputChange(formEvent) {
			this.$clearDelayedUpdate();
			var element = ss.cast(formEvent.target, ss.isValue(formEvent.target) && (ss.isInstanceOfType(formEvent.target, Element) && formEvent.target.tagName === 'INPUT'));
			this.setState({ value: this.state.value, pendingValue: this.state.pendingValue, displayValue: element.value });
		},
		$acceptInput: function VerticalSpinnerComponent$AcceptInput(ignored) {
			this.$clearDelayedUpdate();
			var newValue = {};
			if (!ss.Int32.tryParse(this.state.displayValue, newValue)) {
				newValue.$ = this.state.value;
			}
			this.$updateValue(newValue.$);
		},
		$handleKeyDown: function VerticalSpinnerComponent$HandleKeyDown(e) {
			var newValue = this.state.pendingValue;
			switch (e.keyCode) {
				case 38: {
					this.$clearDelayedUpdate();
					newValue += this.props.stepSize;
					this.$setPendingState(newValue);
					this.$updateWhenKeydown(newValue);
					break;
				}
				case 40: {
					this.$clearDelayedUpdate();
					newValue -= this.props.stepSize;
					this.$setPendingState(newValue);
					this.$updateWhenKeydown(newValue);
					break;
				}
				case 13: {
					this.$acceptInput(null);
					break;
				}
			}
		},
		$updateWhenKeydown: function VerticalSpinnerComponent$UpdateWhenKeydown(newValue) {
			if (this.props.updateWhenKeyDown) {
				this.$doDelayedUpdate(newValue);
			}
		},
		$handleKeyUp: function VerticalSpinnerComponent$HandleKeyUp(e) {
			if (this.props.updateWhenKeyDown) {
				return;
			}
			switch (e.keyCode) {
				case 38:
				case 40: {
					this.$doDelayedUpdate(this.state.pendingValue);
					break;
				}
			}
		},
		$increment: function VerticalSpinnerComponent$Increment() {
			if (this.props.disabled) {
				return;
			}
			this.$doDelayedUpdate(this.state.pendingValue + this.props.stepSize);
		},
		$decrement: function VerticalSpinnerComponent$Decrement() {
			if (this.props.disabled) {
				return;
			}
			this.$doDelayedUpdate(this.state.pendingValue - this.props.stepSize);
		},
		$doDelayedUpdate: function VerticalSpinnerComponent$DoDelayedUpdate(newValue) {
			this.$clearDelayedUpdate();
			if (this.props.actionDelay === 0) {
				this.$updateValue(newValue);
			}
			else {
				this.$setPendingState(newValue);
				this.$applyTimer = window.setTimeout(ss.mkdel(this, function() {
					this.$updateValue(this.state.pendingValue);
				}), this.props.actionDelay);
			}
		},
		$clearDelayedUpdate: function VerticalSpinnerComponent$ClearDelayedUpdate() {
			this.$applyTimer = tab.MiscUtil.clearTimeout(this.$applyTimer);
		},
		$updateValue: function VerticalSpinnerComponent$UpdateValue(newValue) {
			newValue = this.$forceInBounds(newValue);
			var shouldNotify = newValue !== this.state.value;
			this.setState($spiff_VerticalSpinnerComponent.$stateFromValue(newValue));
			if (shouldNotify && !ss.staticEquals(this.props.onValueChanged, null)) {
				this.props.onValueChanged(newValue);
			}
		},
		$forceInBounds: function VerticalSpinnerComponent$ForceInBounds(newValue) {
			if (ss.isValue(this.props.minValue)) {
				newValue = Math.max(newValue, ss.unbox(this.props.minValue));
			}
			if (ss.isValue(this.props.maxValue)) {
				newValue = Math.min(newValue, ss.unbox(this.props.maxValue));
			}
			return newValue;
		},
		$setPendingState: function VerticalSpinnerComponent$SetPendingState(newValue) {
			newValue = this.$forceInBounds(newValue);
			this.setState({ value: this.state.value, pendingValue: newValue, displayValue: newValue.toString() });
		}
	}, React.Component);
	ss.initClass($spiff_VerticalSpinnerProps, $asm, {});
	(function() {
		$spiff_$EditableTextViewTemplate.$htmlTemplate = "<div class='tab-editable-text-view'><div><div class='view-mode'><span class = 'text-span'/></div><input class='edit-mode' type='text'/></div></div>";
	})();
	(function() {
		$spiff_$FocusManager$NavigationKeyState.$navKeysDown = new Array(10);
	})();
	(function() {
		$spiff_DOMElements.a = $spiff_DOMElements.$htmlFactory('a');
		$spiff_DOMElements.abbr = $spiff_DOMElements.$htmlFactory('abbr');
		$spiff_DOMElements.address = $spiff_DOMElements.$htmlFactory('address');
		$spiff_DOMElements.area = $spiff_DOMElements.$htmlFactory('area');
		$spiff_DOMElements.article = $spiff_DOMElements.$htmlFactory('article');
		$spiff_DOMElements.aside = $spiff_DOMElements.$htmlFactory('aside');
		$spiff_DOMElements.audio = $spiff_DOMElements.$htmlFactory('audio');
		$spiff_DOMElements.b = $spiff_DOMElements.$htmlFactory('b');
		$spiff_DOMElements.base = $spiff_DOMElements.$htmlFactory('base');
		$spiff_DOMElements.bdi = $spiff_DOMElements.$htmlFactory('bdi');
		$spiff_DOMElements.bdo = $spiff_DOMElements.$htmlFactory('bdo');
		$spiff_DOMElements.big = $spiff_DOMElements.$htmlFactory('big');
		$spiff_DOMElements.blockquote = $spiff_DOMElements.$htmlFactory('blockquote');
		$spiff_DOMElements.body = $spiff_DOMElements.$htmlFactory('body');
		$spiff_DOMElements.br = $spiff_DOMElements.$htmlFactory('br');
		$spiff_DOMElements.button = $spiff_DOMElements.$htmlFactory('button');
		$spiff_DOMElements.canvas = $spiff_DOMElements.$htmlFactory('canvas');
		$spiff_DOMElements.caption = $spiff_DOMElements.$htmlFactory('caption');
		$spiff_DOMElements.cite = $spiff_DOMElements.$htmlFactory('cite');
		$spiff_DOMElements.code = $spiff_DOMElements.$htmlFactory('code');
		$spiff_DOMElements.col = $spiff_DOMElements.$htmlFactory('col');
		$spiff_DOMElements.colgroup = $spiff_DOMElements.$htmlFactory('colgroup');
		$spiff_DOMElements.data = $spiff_DOMElements.$htmlFactory('data');
		$spiff_DOMElements.datalist = $spiff_DOMElements.$htmlFactory('datalist');
		$spiff_DOMElements.dd = $spiff_DOMElements.$htmlFactory('dd');
		$spiff_DOMElements.del = $spiff_DOMElements.$htmlFactory('del');
		$spiff_DOMElements.details = $spiff_DOMElements.$htmlFactory('details');
		$spiff_DOMElements.dfn = $spiff_DOMElements.$htmlFactory('dfn');
		$spiff_DOMElements.dialog = $spiff_DOMElements.$htmlFactory('dialog');
		$spiff_DOMElements.div = $spiff_DOMElements.$htmlFactory('div');
		$spiff_DOMElements.dl = $spiff_DOMElements.$htmlFactory('dl');
		$spiff_DOMElements.dt = $spiff_DOMElements.$htmlFactory('dt');
		$spiff_DOMElements.em = $spiff_DOMElements.$htmlFactory('em');
		$spiff_DOMElements.embed = $spiff_DOMElements.$htmlFactory('embed');
		$spiff_DOMElements.fieldset = $spiff_DOMElements.$htmlFactory('fieldset');
		$spiff_DOMElements.figcaption = $spiff_DOMElements.$htmlFactory('figcaption');
		$spiff_DOMElements.figure = $spiff_DOMElements.$htmlFactory('figure');
		$spiff_DOMElements.footer = $spiff_DOMElements.$htmlFactory('footer');
		$spiff_DOMElements.form = $spiff_DOMElements.$htmlFactory('form');
		$spiff_DOMElements.h1 = $spiff_DOMElements.$htmlFactory('h1');
		$spiff_DOMElements.h2 = $spiff_DOMElements.$htmlFactory('h2');
		$spiff_DOMElements.h3 = $spiff_DOMElements.$htmlFactory('h3');
		$spiff_DOMElements.h4 = $spiff_DOMElements.$htmlFactory('h4');
		$spiff_DOMElements.h5 = $spiff_DOMElements.$htmlFactory('h5');
		$spiff_DOMElements.h6 = $spiff_DOMElements.$htmlFactory('h6');
		$spiff_DOMElements.head = $spiff_DOMElements.$htmlFactory('head');
		$spiff_DOMElements.header = $spiff_DOMElements.$htmlFactory('header');
		$spiff_DOMElements.hgroup = $spiff_DOMElements.$htmlFactory('hgroup');
		$spiff_DOMElements.hr = $spiff_DOMElements.$htmlFactory('hr');
		$spiff_DOMElements.html = $spiff_DOMElements.$htmlFactory('html');
		$spiff_DOMElements.i = $spiff_DOMElements.$htmlFactory('i');
		$spiff_DOMElements.iframe = $spiff_DOMElements.$htmlFactory('iframe');
		$spiff_DOMElements.img = $spiff_DOMElements.$htmlFactory('img');
		$spiff_DOMElements.input = $spiff_DOMElements.$htmlFactory('input');
		$spiff_DOMElements.ins = $spiff_DOMElements.$htmlFactory('ins');
		$spiff_DOMElements.kbd = $spiff_DOMElements.$htmlFactory('kbd');
		$spiff_DOMElements.keygen = $spiff_DOMElements.$htmlFactory('keygen');
		$spiff_DOMElements.label = $spiff_DOMElements.$htmlFactory('label');
		$spiff_DOMElements.legend = $spiff_DOMElements.$htmlFactory('legend');
		$spiff_DOMElements.li = $spiff_DOMElements.$htmlFactory('li');
		$spiff_DOMElements.link = $spiff_DOMElements.$htmlFactory('link');
		$spiff_DOMElements.main = $spiff_DOMElements.$htmlFactory('main');
		$spiff_DOMElements.map = $spiff_DOMElements.$htmlFactory('map');
		$spiff_DOMElements.mark = $spiff_DOMElements.$htmlFactory('mark');
		$spiff_DOMElements.menu = $spiff_DOMElements.$htmlFactory('menu');
		$spiff_DOMElements.menuitem = $spiff_DOMElements.$htmlFactory('menuitem');
		$spiff_DOMElements.meta = $spiff_DOMElements.$htmlFactory('meta');
		$spiff_DOMElements.meter = $spiff_DOMElements.$htmlFactory('meter');
		$spiff_DOMElements.nav = $spiff_DOMElements.$htmlFactory('nav');
		$spiff_DOMElements.noscript = $spiff_DOMElements.$htmlFactory('noscript');
		$spiff_DOMElements.object = $spiff_DOMElements.$htmlFactory('object');
		$spiff_DOMElements.ol = $spiff_DOMElements.$htmlFactory('ol');
		$spiff_DOMElements.optgroup = $spiff_DOMElements.$htmlFactory('optgroup');
		$spiff_DOMElements.option = $spiff_DOMElements.$htmlFactory('option');
		$spiff_DOMElements.output = $spiff_DOMElements.$htmlFactory('output');
		$spiff_DOMElements.p = $spiff_DOMElements.$htmlFactory('p');
		$spiff_DOMElements.param = $spiff_DOMElements.$htmlFactory('param');
		$spiff_DOMElements.picture = $spiff_DOMElements.$htmlFactory('picture');
		$spiff_DOMElements.pre = $spiff_DOMElements.$htmlFactory('pre');
		$spiff_DOMElements.progress = $spiff_DOMElements.$htmlFactory('progress');
		$spiff_DOMElements.q = $spiff_DOMElements.$htmlFactory('q');
		$spiff_DOMElements.rp = $spiff_DOMElements.$htmlFactory('rp');
		$spiff_DOMElements.rt = $spiff_DOMElements.$htmlFactory('rt');
		$spiff_DOMElements.ruby = $spiff_DOMElements.$htmlFactory('ruby');
		$spiff_DOMElements.s = $spiff_DOMElements.$htmlFactory('s');
		$spiff_DOMElements.samp = $spiff_DOMElements.$htmlFactory('samp');
		$spiff_DOMElements.script = $spiff_DOMElements.$htmlFactory('script');
		$spiff_DOMElements.section = $spiff_DOMElements.$htmlFactory('section');
		$spiff_DOMElements.select = $spiff_DOMElements.$htmlFactory('select');
		$spiff_DOMElements.small = $spiff_DOMElements.$htmlFactory('small');
		$spiff_DOMElements.source = $spiff_DOMElements.$htmlFactory('source');
		$spiff_DOMElements.span = $spiff_DOMElements.$htmlFactory('span');
		$spiff_DOMElements.strong = $spiff_DOMElements.$htmlFactory('strong');
		$spiff_DOMElements.style = $spiff_DOMElements.$htmlFactory('style');
		$spiff_DOMElements.sub = $spiff_DOMElements.$htmlFactory('sub');
		$spiff_DOMElements.summary = $spiff_DOMElements.$htmlFactory('summary');
		$spiff_DOMElements.sup = $spiff_DOMElements.$htmlFactory('sup');
		$spiff_DOMElements.table = $spiff_DOMElements.$htmlFactory('table');
		$spiff_DOMElements.tbody = $spiff_DOMElements.$htmlFactory('tbody');
		$spiff_DOMElements.td = $spiff_DOMElements.$htmlFactory('td');
		$spiff_DOMElements.textarea = $spiff_DOMElements.$htmlFactory('textarea');
		$spiff_DOMElements.tfoot = $spiff_DOMElements.$htmlFactory('tfoot');
		$spiff_DOMElements.th = $spiff_DOMElements.$htmlFactory('th');
		$spiff_DOMElements.thead = $spiff_DOMElements.$htmlFactory('thead');
		$spiff_DOMElements.time = $spiff_DOMElements.$htmlFactory('time');
		$spiff_DOMElements.title = $spiff_DOMElements.$htmlFactory('title');
		$spiff_DOMElements.tr = $spiff_DOMElements.$htmlFactory('tr');
		$spiff_DOMElements.track = $spiff_DOMElements.$htmlFactory('track');
		$spiff_DOMElements.u = $spiff_DOMElements.$htmlFactory('u');
		$spiff_DOMElements.ul = $spiff_DOMElements.$htmlFactory('ul');
		$spiff_DOMElements.var = $spiff_DOMElements.$htmlFactory('var');
		$spiff_DOMElements.video = $spiff_DOMElements.$htmlFactory('video');
		$spiff_DOMElements.wbr = $spiff_DOMElements.$htmlFactory('wbr');
		$spiff_DOMElements.circle = $spiff_DOMElements.$svgFactory('circle');
		$spiff_DOMElements.clipPath = $spiff_DOMElements.$svgFactory('clipPath');
		$spiff_DOMElements.defs = $spiff_DOMElements.$svgFactory('defs');
		$spiff_DOMElements.ellipse = $spiff_DOMElements.$svgFactory('ellipse');
		$spiff_DOMElements.feColorMatrix = $spiff_DOMElements.$svgFactory('feColorMatrix');
		$spiff_DOMElements.filter = $spiff_DOMElements.$svgFactory('filter');
		$spiff_DOMElements.g = $spiff_DOMElements.$svgFactory('g');
		$spiff_DOMElements.height = $spiff_DOMElements.$svgFactory('height');
		$spiff_DOMElements.image = $spiff_DOMElements.$svgFactory('image');
		$spiff_DOMElements.line = $spiff_DOMElements.$svgFactory('line');
		$spiff_DOMElements.linearGradient = $spiff_DOMElements.$svgFactory('linearGradient');
		$spiff_DOMElements.mask = $spiff_DOMElements.$svgFactory('mask');
		$spiff_DOMElements.path = $spiff_DOMElements.$svgFactory('path');
		$spiff_DOMElements.pattern = $spiff_DOMElements.$svgFactory('pattern');
		$spiff_DOMElements.polygon = $spiff_DOMElements.$svgFactory('polygon');
		$spiff_DOMElements.polyline = $spiff_DOMElements.$svgFactory('polyline');
		$spiff_DOMElements.radialGradient = $spiff_DOMElements.$svgFactory('radialGradient');
		$spiff_DOMElements.rect = $spiff_DOMElements.$svgFactory('rect');
		$spiff_DOMElements.stop = $spiff_DOMElements.$svgFactory('stop');
		$spiff_DOMElements.svg = $spiff_DOMElements.$svgFactory('svg');
		$spiff_DOMElements.text = $spiff_DOMElements.$svgFactory('text');
		$spiff_DOMElements.tspan = $spiff_DOMElements.$svgFactory('tspan');
		$spiff_DOMElements.width = $spiff_DOMElements.$svgFactory('width');
	})();
	(function() {
		$spiff_EventUtil.$eventCounter = 0;
	})();
	(function() {
		$spiff_ScrollingComponent.$classesDictionary = null;
		$spiff_ScrollingComponent.$classesDictionary = {};
		$spiff_ScrollingComponent.$classesDictionary[0] = $spiff_$IScrollScrollingComponent;
	})();
	(function() {
		$spiff_$MenuItemTemplate.$html = "\n<div class='tabMenuItem' role='menuitem' data-test-id='tabMenuItem'>\n  <div class='tabMenuItemNameArea'>\n    <span class='tabMenuItemName' data-test-id='tabMenuItemName'/>\n  </div>\n</div>";
	})();
	(function() {
		$spiff_$TabControlLabelTemplate.$html = "<span class='tabTabLabel' />";
	})();
	(function() {
		$spiff_$TabControlTemplate.$html = "<div><div class='tabTabLabels'/><div class='tabTabContentArea'/></div>";
	})();
	(function() {
		$spiff_$TextInputViewTemplate.$html = "<div class='tabTextInputView'><input class='tabTextInputViewInputElement' type='text'/></div>";
	})();
	(function() {
		$spiff_FocusManager.$showIndicatorClass = 'tab-showFocusIndicator';
		$spiff_FocusManager.$keyDownEventName = 'keydown.' + ss.getTypeName($spiff_FocusManager);
		$spiff_FocusManager.$lastInput = 2;
		$spiff_FocusManager.$instance = null;
	})();
	(function() {
		$spiff_FullscreenUtil.$fullscreenEnabledProperty = null;
		$spiff_FullscreenUtil.$fullscreenElementProperty = null;
		$spiff_FullscreenUtil.$exitFullscreenProperty = null;
		$spiff_FullscreenUtil.$requestFullscreenProperty = null;
		$spiff_FullscreenUtil.$onfullscreenchangeProperty = null;
		$spiff_FullscreenUtil.$centeringContainerSelector = '#centeringContainer';
		$spiff_FullscreenUtil.$1$FullscreenStateChangedField = null;
		$spiff_FullscreenUtil.$fullscreenEnabledProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document, ['fullscreenEnabled', 'webkitFullscreenEnabled', 'msFullscreenEnabled', 'mozFullScreenEnabled']);
		$spiff_FullscreenUtil.$fullscreenElementProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document, ['fullscreenElement', 'webkitFullscreenElement', 'msFullscreenElement', 'mozFullScreenElement']);
		$spiff_FullscreenUtil.$exitFullscreenProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document, ['exitFullscreen', 'webkitExitFullscreen', 'msExitFullscreen', 'mozCancelFullScreen']);
		$spiff_FullscreenUtil.$requestFullscreenProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document.documentElement, ['requestFullscreen', 'webkitRequestFullscreen', 'msRequestFullscreen', 'mozRequestFullScreen']);
		$spiff_FullscreenUtil.$onfullscreenchangeProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document, ['onfullscreenchange', 'onwebkitfullscreenchange', 'onMSFullscreenChange', 'onmozfullscreenchange']);
		if (ss.isValue($spiff_FullscreenUtil.$onfullscreenchangeProperty) && $spiff_FullscreenUtil.get_fullscreenEnabled()) {
			document.addEventListener($spiff_FullscreenUtil.get_fullscreenChangeEventName().toString(), $spiff_FullscreenUtil.$handleFullscreenChange);
		}
		$spiff_FullscreenUtil.add_fullscreenStateChanged($spiff_FullscreenUtil.$updateTrapFocus);
	})();
	(function() {
		$spiff_Widget.$widgetInstanceDataKey = 'widgetInstance';
		$spiff_Widget.$widgetCssClass = 'tab-widget';
		$spiff_Widget.$selectionEventNamespace = '.tab-disableSelection';
		$spiff_Widget.$nextInstanceId = 0;
		$spiff_Widget.selectableNodeClass = null;
		if (tab.FeatureParamsLookup.getBool(33) === true) {
			$(document.head).append('<style type="text/css">.tab-DesignTint { background-color: #F1F1FC; }</style>');
		}
		$spiff_Widget.selectableNodeClass = 'tab-selectable';
	})();
	(function() {
		$spiff_ClickBuster.suppressClickBustingClass = 'suppressClickBusting';
		$spiff_ClickBuster.$clickRadius = 25;
		$spiff_ClickBuster.$coordinates = null;
		$spiff_ClickBuster.$1$ClickBustDetectedField = null;
	})();
	(function() {
		$spiff_UnificationClassNames.designTint = 'tab-DesignTint';
		$spiff_UnificationClassNames.text = 'tab-Text';
		$spiff_UnificationClassNames.darkBackground = 'tab-darkBackground';
		$spiff_UnificationClassNames.button = 'tab-UnifiedButton';
		$spiff_UnificationClassNames.icon = 'tab-Icon';
		$spiff_UnificationClassNames.iconButton = 'tab-IconBtn';
		$spiff_UnificationClassNames.vScrollable = 'tab-vScrollable';
		$spiff_UnificationClassNames.selectableButtonGroup = 'tab-SelectableButtonGroup';
		$spiff_UnificationClassNames.selectionMark = 'tab-SelectionMark';
		$spiff_UnificationClassNames.active = 'active';
		$spiff_UnificationClassNames.hover = 'hover';
		$spiff_UnificationClassNames.hitTestArea = 'tab-HitTestArea';
		$spiff_UnificationClassNames.focused = 'focused';
		$spiff_UnificationClassNames.bordered = 'bordered';
		$spiff_UnificationClassNames.disabled = 'disabled';
		$spiff_UnificationClassNames.selectable = 'selectable';
		$spiff_UnificationClassNames.selected = 'selected';
		$spiff_UnificationClassNames.unselected = 'unselected';
		$spiff_UnificationClassNames.excluded = 'excluded';
		$spiff_UnificationClassNames.textInput = 'tab-TextInput';
		$spiff_UnificationClassNames.horizontalLayout = 'tab-HorizontalLayout';
		$spiff_UnificationClassNames.applyCancelPanel = 'tab-ApplyCancelPanel';
		$spiff_UnificationClassNames.applyCancel = 'apply-cancel';
		$spiff_UnificationClassNames.apply$1 = 'apply';
		$spiff_UnificationClassNames.cancel = 'cancel';
		$spiff_UnificationClassNames.sliderControlClass = 'unification-slider-control';
		$spiff_UnificationClassNames.sliderContainerClass = 'tabHorizontalSliderContainer';
		$spiff_UnificationClassNames.sliderInputClass = 'tabHorizontalSlider';
		$spiff_UnificationClassNames.sliderTextBoxClass = 'tabHorizontalSliderPercentageText';
		$spiff_UnificationClassNames.sliderPercentageClass = 'tabHorizontalSliderPercentageSign';
	})();
	(function() {
		$spiff_TextInputView.textPropertyName = 'text';
	})();
	(function() {
		$spiff_ClearableTextInputViewTemplate.$html = "<div class='tabTextInputView'><span class='tabClearableTextBoxClearButton'/><div class='tabTextInputViewInputElementContainer'><input class='tabTextInputViewInputElement' type='text'/></div></div>";
	})();
	(function() {
		$spiff_ClickHandler.$moveSlop = 10;
		$spiff_ClickHandler.$clickTimeout = 300;
		$spiff_ClickHandler.$instanceId = 0;
	})();
	(function() {
		$spiff_SelectableButtonGroupComponent.$allKey = '__ALL__';
	})();
	(function() {
		$spiff_SpiffBrowserViewport.getSpiffBrowserViewportFunc = null;
	})();
	(function() {
		$spiff_StatelessDropdownComponent.$selectorOuterContainerRef = 'selector';
		$spiff_StatelessDropdownComponent.$positioningElementRef = 'relative';
		$spiff_StatelessDropdownComponent.$selectorEndMargin = 3;
		$spiff_StatelessDropdownComponent.$shiftBuffer = 13;
	})();
	(function() {
		$spiff_MenuItem.$nextIdentifier = 0;
	})();
	(function() {
		$spiff_ComboBoxTemplate.$htmlTemplate = "<span class='tabComboBox tab-ctrl-formatted-widget tab-ctrl-formatted-darker-border-hover'>\n    <span class='tabComboBoxIcon'/>\n    <div class='tabComboBoxNameContainer tab-ctrl-formatted-fixedsize'><span class='tabComboBoxName'/></div>\n    <div class='tabComboBoxButtonHolder'><span class='tabComboBoxButton'/></div>\n</span>";
	})();
	(function() {
		$spiff_Glass.glassClass = 'tab-glass';
		$spiff_Glass.$htmlTemplate = "<div class='tab-glass clear-glass'></div>";
		$spiff_Glass.$clearGlassClass = 'clear-glass';
		$spiff_Glass.$opaqueGlassClass = 'opaque-glass';
	})();
	(function() {
		$spiff_MenuTemplate.$htmlTemplate = "<div class='tabMenu' tabindex='-1' role='menu'><div class='tabMenuContent'/></div>";
	})();
	(function() {
		$spiff_MenuItemDividerTemplate.$html = "<div class='tabMenuItemDivider' role='separator' />";
	})();
	(function() {
		$spiff_MenuItemTextInputTemplate.$html = "\n<div class='tabMenuItemTextInputPanel' role='menuitem'>\n  <div class='tabMenuItemTextInputHolder'>\n    <input class='tabMenuItemTextInput' type='text'>\n  </div>\n</div>";
	})();
	(function() {
		$spiff_MenuView.defaultMenuItem = 'tabMenuDefaultItem';
		$spiff_MenuView.classMenuItem = 'tabMenuMenuItem';
		$spiff_MenuView.keyMenuItem = 'tabMenuMenuItem';
		$spiff_MenuView.menuFadeDurationMs = 50;
		$spiff_MenuView.$keyMenuItemLevel = 'tabMenuMenuItemLevel';
		$spiff_MenuView.$classMenuHasIconTwo = 'tabMenuHasIconTwo';
		$spiff_MenuView.$baseLayerZIndex = 989;
		$spiff_MenuView.$dialogLayerZIndex = tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex;
	})();
	(function() {
		$spiff_ComboBoxViewModel.$hasIconsClass = 'hasIcons';
	})();
	(function() {
		$spiff_ComboBoxView.iconPressedClass = 'tabComboBoxNoIconPressed';
		$spiff_ComboBoxView.invalidClass = 'invalid';
		$spiff_ComboBoxView.noIconClass = 'tabComboBoxNoIcon';
		$spiff_ComboBoxView.pressedClass = 'pressed';
		$spiff_ComboBoxView.disabledClass = 'disabled';
		$spiff_ComboBoxView.classesForTheme = ss.mkdict([0, 'tabComboStdTheme', 1, 'tabComboCompactTheme', 2, 'tabComboStdTheme tabUnification', 3, 'tabComboStdTheme tab-unification-line-arrow-dropdown']);
	})();
	(function() {
		$spiff_ListViewTemplate.$html = "<div class='tab-list'><div class='tab-list-itemHolder'></div></div>";
	})();
	(function() {
		$spiff_ToggleButton.defaultSelectedClassName = 'selected';
		$spiff_ToggleButton.selectedProperty = 'selected';
		$spiff_ToggleButton.toggleClassProperty = 'selectedClass';
		$spiff_ToggleButton.$uniqueSelectionIdCounter = 0;
	})();
	(function() {
		$spiff_ListItemView.listItemSpotlightedClassName = 'tab-list-item-spotlighted';
		$spiff_ListItemView.boldClass = 'bold';
		$spiff_ListItemView.invalidClass = 'invalid';
	})();
	(function() {
		$spiff_ListItemViewModel.selectedProperty = 'selected';
		$spiff_ListItemViewModel.invalidProperty = 'invalid';
		$spiff_ListItemViewModel.draggableProperty = 'draggable';
		$spiff_ListItemViewModel.spotlightedProperty = 'spotlighted';
		$spiff_ListItemViewModel.boldProperty = 'bold';
	})();
	(function() {
		$spiff_ListViewModel.collectionProperty = 'collection';
		$spiff_ListViewModel.enabledProperty = 'enabled';
	})();
	(function() {
		tab.ObjectRegistry.registerType($spiff_PopupListView, $spiff_PopupListView).call(null);
	})();
	(function() {
		$spiff_UberPopupShowOptions.startingGlassZIndex = 987;
	})();
	(function() {
		$spiff_UberPopupTemplate.contentClassName = 'tabUberPopupContent';
		$spiff_UberPopupTemplate.caretClassName = 'tabUberArrow';
		$spiff_UberPopupTemplate.caretBorderClassName = 'tabUberArrow2';
		$spiff_UberPopupTemplate.$htmlTemplate = "<div class='tabUberPopup'><div class='tabUberPopupContent'/><div class='tabUberArrow'/><div class='tabUberArrow2'/></div>";
		$spiff_UberPopupTemplate.$caretHeight = null;
	})();
	(function() {
		$spiff_UberPopupView.minimalistThemeClass = 'tabUberPopupMinimal';
	})();
	(function() {
		$spiff_CompositeSearchWidget.listClassName = 'tabCompositeSearchWidgetList';
		$spiff_CompositeSearchWidget.$listInsideUberPopupMaxWidth = 400;
	})();
	(function() {
		$spiff_LabelButton.$htmlTemplateLink = "<a href='#' class='tab-link-button'><span class='label hide'></span></a>";
		$spiff_LabelButton.$htmlTemplateButton = "<button class='tab-button' type='button'><span class='icon'></span><span class='label hide'></span></button>";
		$spiff_LabelButton.$htmlTemplateMenuButton = "<button class='tab-button' type='button'>\n            <div class='paired-icon'>\n                <span class='icon menu-button'></span>\n                <span class='tabComboBoxButton'></span>\n            </div>\n            <span class='label hide'></span></button>";
		$spiff_LabelButton.$htmlTextButton = "<span class='tab-text-button'><span class='label hide'></span></span>";
		$spiff_LabelButton.$labelSelectorDefault = '.label';
	})();
	(function() {
		$spiff_CompositeSearchWidgetTemplate.$htmlTemplate = "<div class='tabCompositeSearchWidget'><div>";
	})();
	(function() {
		$spiff_CustomCursor.noOp = new $spiff_CustomCursor('cursors/dragnop-black.cur', 'auto');
		$spiff_CustomCursor.delete$1 = new $spiff_CustomCursor('cursors/dragdel-black.cur', 'auto');
		$spiff_CustomCursor.copy = new $spiff_CustomCursor('cursors/dragcopy-black.cur', 'auto');
		$spiff_CustomCursor.move = new $spiff_CustomCursor('cursors/dragmove-black.cur', 'auto');
	})();
	(function() {
		$spiff_CustomIScrollTemplate.$htmlTemplate = "<div class='tabCustomScroller'>\n            <div class='tabScrollerContentWindow'><span class='tabScrollerContent'/></div>\n            <div class='tabVerticalScrollbar'><div class='tabScrollbarIndicator'/></div>\n            <div class='tabHorizontalScrollbar'><div class='tabScrollbarIndicator'/></div>\n        </div>";
	})();
	(function() {
		$spiff_DefaultIScrollTemplate.$htmlTemplate = "<div class='tabScroller'><span class='tabScrollerContent'/></div>";
	})();
	(function() {
		$spiff_DefaultIScrollView.$iScrollScrollbarWhiteSpace = 1;
		$spiff_DefaultIScrollView.$iScrollScrollbarSize = 9;
	})();
	(function() {
		$spiff_CustomIScrollView.centeredVerticallyClassName = 'centeredVertically';
		$spiff_CustomIScrollView.scrollableClassName = 'scrollable';
		$spiff_CustomIScrollView.$minimumIndicatorLength = 8;
	})();
	(function() {
		$spiff_MoveDragInstance.$noOpCallback = function() {
		};
	})();
	(function() {
		$spiff_OrientationHandler.$waitTimeMax = 2500;
		$spiff_OrientationHandler.$waitTimePartition = 75;
		$spiff_OrientationHandler.$windowInst = null;
		$spiff_OrientationHandler.$windowInstHelper = null;
		$spiff_OrientationHandler.$currentOrientation = 0;
		$spiff_OrientationHandler.$currentWidth = 0;
		$spiff_OrientationHandler.$timerId = null;
		$spiff_OrientationHandler.$startTime = null;
		$spiff_OrientationHandler.$newWidthIsSet = false;
		$spiff_OrientationHandler.$1$OrientationChangedField = null;
		$spiff_OrientationHandler.init();
	})();
	(function() {
		$spiff_Dialog.positionProperty = 'position';
		$spiff_Dialog.isActiveProperty = 'isActive';
		$spiff_Dialog.$activeClass = 'active';
		$spiff_Dialog.$closeButtonSelector = '.tab-dialogCloseButton';
		$spiff_Dialog.$bodyContainerSelector = '.tab-dialogBodyContainer';
		$spiff_Dialog.$titleBarSelector = '.tab-dialogTitleBar';
		$spiff_Dialog.$titleSelector = '.tab-dialogTitle';
		$spiff_Dialog.$resizerSelector = '.tab-dialogResizer';
		$spiff_Dialog.$spinnerContainerSelector = '.tab-dialogSpinnerContainer';
		$spiff_Dialog.$htmlTemplate = "\n<div class='tab-dialog' role='dialog'>\n  <div class='tab-dialogTitleBar'>\n    <div class='tab-dialogTitle'></div>\n    <div class='tab-dialogCloseButton'></div>\n  </div>\n  <div class='tab-dialogBodyContainer'></div>\n  <div class='tab-dialogResizer tab-icon-resize-se'><div class='tab-dialogResizerHit'/></div>\n  <div class='tab-dialogSpinnerContainer'></div>\n</div>\n";
		$spiff_Dialog.$topDialog = null;
		$spiff_Dialog.$defaultDropTarget = new $spiff_NoopDropTarget();
		$spiff_Dialog.defaultDraggableDialogConfigurer = null;
		$spiff_Dialog.defaultStationaryDialogConfigurer = null;
		$spiff_Dialog.defaultDraggableDialogConfigurer = function(dialog) {
			var $t1 = new $spiff_MoveDragSource(dialog.$titleBarElement, dialog.$dialogElement, false);
			$t1.set_documentBodySize('useClientSize');
			return $t1;
		};
		$spiff_Dialog.defaultStationaryDialogConfigurer = function() {
			return null;
		};
	})();
	(function() {
		$spiff_EditableTextView.$editingClassName = 'editing';
		$spiff_EditableTextView.$hoverClassName = 'hover';
	})();
	(function() {
		EventUtils.FeatureFlagUtils.SetFFWebAuthoringDragAggregation(function() {
			return tab.FeatureFlags.isEnabled('WebAuthoringDragAggregation');
		});
		EventUtils.FeatureFlagUtils.SetFeatureParamDebugTools(function() {
			return tab.FeatureParamsLookup.getBool(46);
		});
		EventUtils.FeatureFlagUtils.SetTsConfigIsMobile(function() {
			return tsConfig.is_mobile;
		});
		EventUtils.FeatureFlagUtils.SetBootStrapUtilIsEmbedded(function() {
			return tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage();
		});
		EventUtils.FeatureFlagUtils.SetLoggerDebug(function(msg) {
			tab.Log.get$1(EventUtils).debug(msg, []);
		});
	})();
	(function() {
		$spiff_LabelToggleButton.$htmlToggleButton = "<span class='tab-icon-toggle'><span class='icon'></span><span class='label hide'></span></span>";
		$spiff_LabelToggleButton.$htmlInnerIcon = "<span class='innerIcon'></span>";
		$spiff_LabelToggleButton.$labelSelectorDefault = '.label';
		$spiff_LabelToggleButton.$hideClass = 'hide';
		$spiff_LabelToggleButton.$unificationCheckboxClass = 'tab-unification-check';
		$spiff_LabelToggleButton.$unificationCheckboxImageClass = 'tab-img-check';
		$spiff_LabelToggleButton.$unificationRadioButtonClass = 'tab-unification-radio';
	})();
	(function() {
		$spiff_LineEditWithButtonComponent.$defaultMaxLength = 6;
	})();
	(function() {
		$spiff_ListViewDragSortFeedback.$dragScrollTimeout = 10;
	})();
	(function() {
		SharedWidgets.PointerEventAdapterManager.adapterFactory = function() {
			return new $spiff_SharedWidgetsPointerEventAdapter();
		};
	})();
	(function() {
		$spiff_StyledTextButton.$textIconButtonHtml = "<span class='tabTextIconButton'><span class='icon'/><span class='label hide'/></span>";
	})();
	(function() {
		tab.ObjectRegistry.registerType($spiff_TabControl, $spiff_TabControl).call(null);
	})();
	(function() {
		$spiff_TableauEventHandlerTracker.$referenceAttributeName = 'tabEvtHndlr';
		$spiff_TableauEventHandlerTracker.$eventHandlerCount = 0;
		$spiff_TableauEventHandlerTracker.$trackers = null;
		$spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField = null;
		$spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField = null;
		$spiff_TableauEventHandlerTracker.$trackers = {};
		EventUtils.TableauEventHandler.add_TableauEventHandlerCreated($spiff_TableauEventHandlerTracker.$startTrackingHandler);
		EventUtils.TableauEventHandler.add_TableauEventHandlerToBeDisposed($spiff_TableauEventHandlerTracker.$stopTrackingHandler);
	})();
})();
// END SpiffUI
