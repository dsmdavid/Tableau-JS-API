/*! BEGIN Domain */

// BEGIN KeyboardShortcutModule
/*! BEGIN KeyboardShortcutModule */

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	ss.initAssembly($asm, 'vqlkeyboardshortcutmodule');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.AdditionalShortcutOptions
	var $tab_AdditionalShortcutOptions = function() {
		this.throttleTimeInMs = null;
		this.shouldUseKeyUp = false;
		this.propagation = 2;
		this.areAllLocalesSupported = true;
	};
	$tab_AdditionalShortcutOptions.__typeName = 'tab.AdditionalShortcutOptions';
	global.tab.AdditionalShortcutOptions = $tab_AdditionalShortcutOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.CommandKeyboardShortcut
	var $tab_CommandKeyboardShortcut = function() {
		$tab_GlobalKeyboardShortcut.call(this);
	};
	$tab_CommandKeyboardShortcut.__typeName = 'tab.CommandKeyboardShortcut';
	global.tab.CommandKeyboardShortcut = $tab_CommandKeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.GlobalKeyboardShortcut
	var $tab_GlobalKeyboardShortcut = function() {
		$tab_KeyboardShortcut.call(this);
	};
	$tab_GlobalKeyboardShortcut.__typeName = 'tab.GlobalKeyboardShortcut';
	global.tab.GlobalKeyboardShortcut = $tab_GlobalKeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.IKeyboardShortcut
	var $tab_IKeyboardShortcut = function() {
	};
	$tab_IKeyboardShortcut.__typeName = 'tab.IKeyboardShortcut';
	global.tab.IKeyboardShortcut = $tab_IKeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.IShortcutAction
	var $tab_IShortcutAction = function() {
	};
	$tab_IShortcutAction.__typeName = 'tab.IShortcutAction';
	global.tab.IShortcutAction = $tab_IShortcutAction;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.IUpdatableKeyboardShortcut
	var $tab_IUpdatableKeyboardShortcut = function() {
	};
	$tab_IUpdatableKeyboardShortcut.__typeName = 'tab.IUpdatableKeyboardShortcut';
	global.tab.IUpdatableKeyboardShortcut = $tab_IUpdatableKeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.KeyboardShortcut
	var $tab_KeyboardShortcut = function() {
	};
	$tab_KeyboardShortcut.__typeName = 'tab.KeyboardShortcut';
	global.tab.KeyboardShortcut = $tab_KeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.KeyboardShortcutManager
	var $tab_KeyboardShortcutManager = function() {
	};
	$tab_KeyboardShortcutManager.__typeName = 'tab.KeyboardShortcutManager';
	$tab_KeyboardShortcutManager.unregisterShortcut = function KeyboardShortcutManager$UnregisterShortcut(commandName) {
		if ($tab_KeyboardShortcutManager.$hasAssociatedShortcut(commandName)) {
			$tab_KeyboardShortcutManager.unregisterShortcut$1($tab_KeyboardShortcutManager.$commandNameToShortcut[commandName]);
			delete $tab_KeyboardShortcutManager.$commandNameToShortcut[commandName];
		}
	};
	$tab_KeyboardShortcutManager.tryUpdateKeyboardShortcut = function KeyboardShortcutManager$TryUpdateKeyboardShortcut(commandName, shortcutAction) {
		if (ss.isNullOrUndefined(shortcutAction)) {
			ss.Debug.assert(false, 'shortcutAction cannot be null');
			return;
		}
		var shortcut = $tab_KeyboardShortcutManager.$findAssociatedShortcut(commandName);
		if (ss.isValue(shortcut)) {
			var isUpdateActionSuccessful = $tab_KeyboardShortcutManager.$tryUpdateCommandAction(commandName, shortcutAction);
			if (!isUpdateActionSuccessful) {
				$tab_KeyboardShortcutManager.$commandNameToShortcutAction[commandName] = shortcutAction;
			}
			if (ss.isNullOrEmptyString(shortcutAction.get_description()) && (isUpdateActionSuccessful || ss.isValue(shortcut.get_commandId()))) {
				shortcutAction.set_description(shortcut.get_hintText());
			}
		}
	};
	$tab_KeyboardShortcutManager.findAssociatedShortcut = function KeyboardShortcutManager$FindAssociatedShortcut(shortcutAction) {
		return (ss.isNullOrUndefined(shortcutAction) ? null : $tab_KeyboardShortcutManager.$findAssociatedShortcut(shortcutAction.get_key()));
	};
	$tab_KeyboardShortcutManager.findAssociatedShortcut$1 = function KeyboardShortcutManager$FindAssociatedShortcut(commandId) {
		return $tab_KeyboardShortcutManager.$commandNameToShortcut[commandId.cmd] || $tab_KeyboardShortcutManager.$commandNameToShortcut[commandId.ns + ':' + commandId.cmd];
	};
	$tab_KeyboardShortcutManager.associateShortcutWithCommand = function KeyboardShortcutManager$AssociateShortcutWithCommand(shortcut, commandId, additionalCommandIds) {
		if (tsConfig.debugMode) {
			if (ss.isValue($tab_KeyboardShortcutManager.$findAssociatedShortcut(commandId.cmd)) || _.any(additionalCommandIds, function(additionalCommand) {
				return ss.isValue($tab_KeyboardShortcutManager.$findAssociatedShortcut(additionalCommand.cmd));
			})) {
				$tab_KeyboardShortcutManager.get_$logger().warn('Overwriting existing shortcut with ' + shortcut, []);
			}
		}
		$tab_KeyboardShortcutManager.$commandNameToShortcut[commandId.cmd] = shortcut;
		_.each(additionalCommandIds, function(additionalCommand1) {
			$tab_KeyboardShortcutManager.$commandNameToShortcut[additionalCommand1.cmd] = shortcut;
		});
	};
	$tab_KeyboardShortcutManager.removeCommandAssociation = function KeyboardShortcutManager$RemoveCommandAssociation(commandId) {
		delete $tab_KeyboardShortcutManager.$commandNameToShortcut[commandId.cmd];
	};
	$tab_KeyboardShortcutManager.findShortcutAction = function KeyboardShortcutManager$FindShortcutAction(commandId) {
		return $tab_KeyboardShortcutManager.$commandNameToShortcutAction[commandId.ns + ':' + commandId.cmd] || $tab_KeyboardShortcutManager.$commandNameToShortcutAction[commandId.cmd];
	};
	$tab_KeyboardShortcutManager.$tryAddCommandMapping = function KeyboardShortcutManager$TryAddCommandMapping(shortcut) {
		var commandShortcut = ss.safeCast(shortcut, $tab_CommandKeyboardShortcut);
		if (ss.isNullOrUndefined(commandShortcut)) {
			return;
		}
		var commandId = commandShortcut.get_commandId();
		if (ss.isNullOrUndefined(commandId)) {
			return;
		}
		var commandName = commandId.ns + ':' + commandId.cmd;
		if ($tab_KeyboardShortcutManager.$hasAssociatedShortcut(commandName)) {
			tab.Logger.getLogger($tab_KeyboardShortcutManager, null).warn('Overwriting ' + commandName + ' keyboard shortcut with' + shortcut, []);
		}
		$tab_KeyboardShortcutManager.$commandNameToShortcut[commandName] = commandShortcut;
	};
	$tab_KeyboardShortcutManager.$tryUpdateCommandAction = function KeyboardShortcutManager$TryUpdateCommandAction(commandName, shortcutAction) {
		if ($tab_KeyboardShortcutManager.$hasAssociatedShortcut(commandName)) {
			var updateKeyboardShortcut = ss.safeCast($tab_KeyboardShortcutManager.$commandNameToShortcut[commandName], $tab_IUpdatableKeyboardShortcut);
			if (ss.isValue(updateKeyboardShortcut)) {
				updateKeyboardShortcut.updateShortcutAction(shortcutAction);
				return true;
			}
		}
		return false;
	};
	$tab_KeyboardShortcutManager.$hasAssociatedShortcut = function KeyboardShortcutManager$HasAssociatedShortcut(commandName) {
		return ss.keyExists($tab_KeyboardShortcutManager.$commandNameToShortcut, commandName);
	};
	$tab_KeyboardShortcutManager.$findAssociatedShortcut = function KeyboardShortcutManager$FindAssociatedShortcut(commandName) {
		return $tab_KeyboardShortcutManager.$commandNameToShortcut[commandName];
	};
	$tab_KeyboardShortcutManager.get_$logger = function KeyboardShortcutManager$get_Logger() {
		return tab.Log.get$1($tab_KeyboardShortcutManager);
	};
	$tab_KeyboardShortcutManager.registerShortcut = function KeyboardShortcutManager$RegisterShortcut(shortcut) {
		shortcut.get_keyCombos().removeUnsupportedCombos(shortcut.get_additionalOptions().areAllLocalesSupported);
		if (!shortcut.get_keyCombos().get_hasCombos()) {
			return;
		}
		if (tsConfig.debugMode) {
			$tab_KeyboardShortcutManager.$detectDuplicateShortcuts(shortcut);
		}
		$tab_KeyboardShortcutManager.$addShortcut(shortcut);
	};
	$tab_KeyboardShortcutManager.unregisterShortcut$1 = function KeyboardShortcutManager$UnregisterShortcut(shortcut) {
		if (ss.isNullOrUndefined(shortcut)) {
			$tab_KeyboardShortcutManager.get_$logger().error('Attempted to unregister a null shortcut', []);
			return;
		}
		shortcut.get_element().off($tab_KeyboardShortcutManager.$eventName(shortcut), $tab_KeyboardShortcutManager.$registeredShortcuts[shortcut.toString()]);
		delete $tab_KeyboardShortcutManager.$registeredShortcuts[shortcut.toString()];
		var $t1 = shortcut.get_keyCombos();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var combo = $t1[$t2];
			delete $tab_KeyboardShortcutManager.$registeredKeyCombos[combo.toString()];
		}
	};
	$tab_KeyboardShortcutManager.isGloballyAllowed = function KeyboardShortcutManager$IsGloballyAllowed(e, shortcut) {
		var glass = $('.tab-glass');
		var loadingGlass = $('#loadingGlassPane');
		var isModalGlass = $tab_KeyboardShortcutManager.$isViewableModalGlass(glass);
		var isModalLoading = $tab_KeyboardShortcutManager.$isViewableModalGlass(loadingGlass);
		var isDialogOpen = _.any($('[role=dialog]').get(), $tab_KeyboardUtilities.isShown);
		var isTextInput = $tab_KeyboardUtilities.isTargetTextInput(e);
		$tab_KeyboardShortcutTelemetry.logKeyboardShortcut(new $tab_KeyboardShortcutTelemetryEvent(shortcut, e, null, null, null, null, true, isDialogOpen, isModalGlass, isModalLoading, isTextInput));
		return !isModalGlass && !isModalLoading && !isTextInput && !isDialogOpen;
	};
	$tab_KeyboardShortcutManager.$isViewableModalGlass = function KeyboardShortcutManager$IsViewableModalGlass(glass) {
		var body = $(document.body);
		var PixelTolerance = 2;
		var $t1 = glass.get();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var glassElement = $t1[$t2];
			if (!$tab_KeyboardUtilities.isShown(glassElement)) {
				continue;
			}
			var currentGlass = $(glassElement);
			var fitsEntireWidth = Math.abs(currentGlass.width() - body.width()) <= 2;
			var fitsEntireHeight = Math.abs(currentGlass.height() - body.height()) <= 2;
			var hasFullScreenGlass = fitsEntireWidth && fitsEntireHeight;
			if (hasFullScreenGlass) {
				return true;
			}
		}
		return false;
	};
	$tab_KeyboardShortcutManager.$detectDuplicateShortcuts = function KeyboardShortcutManager$DetectDuplicateShortcuts(shortcut) {
		if (ss.keyExists($tab_KeyboardShortcutManager.$registeredShortcuts, shortcut.toString())) {
			$tab_KeyboardShortcutManager.$logConflictWarning(shortcut, null, null);
		}
		var $t1 = shortcut.get_keyCombos();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var combo = $t1[$t2];
			var comboKey = combo.toString();
			if (ss.keyExists($tab_KeyboardShortcutManager.$registeredKeyCombos, comboKey)) {
				for (var $t3 = 0; $t3 < combo.supportedLocales.length; $t3++) {
					var supportedLocale = { $: combo.supportedLocales[$t3] };
					if (_.any($tab_KeyboardShortcutManager.$registeredKeyCombos[comboKey], ss.mkdel({ supportedLocale: supportedLocale }, function(locale) {
						return ss.isNullOrUndefined(locale) || ss.referenceEquals(locale, this.supportedLocale.$);
					}))) {
						$tab_KeyboardShortcutManager.$logConflictWarning(shortcut, null, 'Conflicts with the existing key combo:\n' + combo);
					}
				}
			}
		}
	};
	$tab_KeyboardShortcutManager.$addShortcut = function KeyboardShortcutManager$AddShortcut(shortcut) {
		var eventHandler = $tab_KeyboardShortcutManager.$createEventHandler(shortcut);
		$tab_KeyboardShortcutManager.$registeredShortcuts[shortcut.toString()] = eventHandler;
		shortcut.get_element().on($tab_KeyboardShortcutManager.$eventName(shortcut), eventHandler);
		$tab_KeyboardShortcutManager.$tryAddCommandMapping(shortcut);
		var $t1 = shortcut.get_keyCombos();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var combo = $t1[$t2];
			var comboKey = { $: combo.toString() };
			if (!ss.keyExists($tab_KeyboardShortcutManager.$registeredKeyCombos, comboKey.$)) {
				$tab_KeyboardShortcutManager.$registeredKeyCombos[comboKey.$] = combo.supportedLocales;
			}
			else {
				if (_.isEmpty(combo.supportedLocales)) {
					var $t3 = $tab_KeyboardShortcutManager.$registeredKeyCombos[comboKey.$];
					$t3.push.apply($t3, null);
				}
				_.each(combo.supportedLocales, ss.mkdel({ comboKey: comboKey }, function(locale) {
					$tab_KeyboardShortcutManager.$registeredKeyCombos[this.comboKey.$].push(locale);
				}));
			}
		}
	};
	$tab_KeyboardShortcutManager.$createEventHandler = function KeyboardShortcutManager$CreateEventHandler(shortcut) {
		var handleKeyEvent = function(e) {
			$tab_KeyboardShortcutManager.$handleKeyEvent(e, shortcut);
		};
		if (ss.isValue(shortcut.get_additionalOptions().throttleTimeInMs)) {
			handleKeyEvent = _.throttle(handleKeyEvent, ss.unbox(shortcut.get_additionalOptions().throttleTimeInMs));
		}
		return function(e1) {
			handleKeyEvent(e1);
		};
	};
	$tab_KeyboardShortcutManager.$handleKeyEvent = function KeyboardShortcutManager$HandleKeyEvent(e, shortcut) {
		if (ss.isNullOrUndefined(e)) {
			return;
		}
		var hasValidCombo = shortcut.get_keyCombos().hasValidCombo(e);
		$tab_KeyboardShortcutTelemetry.logKeyboardShortcut(new $tab_KeyboardShortcutTelemetryEvent(shortcut, e, tabBootstrap.MetricsController.getTiming(), null, null, hasValidCombo, false, null, null, null, null));
		if (hasValidCombo) {
			shortcut.onValidKeyCombo(e);
			if (shortcut.get_additionalOptions().propagation === 1) {
				$tab_KeyboardUtilities.stopPropagationAndDefault(e);
			}
			if (shortcut.isAllowed(e)) {
				shortcut.executeShortcut(e);
				$tab_KeyboardShortcutTelemetry.logKeyboardShortcut(new $tab_KeyboardShortcutTelemetryEvent(shortcut, e, null, tabBootstrap.MetricsController.getTiming(), true, null, false, null, null, null, null));
				if (shortcut.get_additionalOptions().propagation === 2) {
					$tab_KeyboardUtilities.stopPropagationAndDefault(e);
				}
			}
		}
	};
	$tab_KeyboardShortcutManager.$eventName = function KeyboardShortcutManager$EventName(shortcut) {
		return (shortcut.get_additionalOptions().shouldUseKeyUp ? 'keyup'.toString() : 'keydown'.toString());
	};
	$tab_KeyboardShortcutManager.$logConflictWarning = function KeyboardShortcutManager$LogConflictWarning(shortcut, newShortcut, additionalInfo) {
		var warning = 'Found conflict with shortcut:\n' + shortcut + '\n\n';
		if (ss.isValue(newShortcut)) {
			warning += 'Shortcut is being overwritten by:\n' + newShortcut + '\n\n';
		}
		if (ss.isValue(additionalInfo)) {
			warning += 'Additional info: ' + additionalInfo + '\n';
		}
		warning += 'activeElement: ' + document.activeElement;
		tab.Logger.getLogger($tab_KeyboardShortcutManager, null).warn(warning, []);
	};
	global.tab.KeyboardShortcutManager = $tab_KeyboardShortcutManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.KeyboardShortcutTelemetry
	var $tab_KeyboardShortcutTelemetry = function() {
	};
	$tab_KeyboardShortcutTelemetry.__typeName = 'tab.KeyboardShortcutTelemetry';
	$tab_KeyboardShortcutTelemetry.add_telemetryEvent = function KeyboardShortcutTelemetry$add_TelemetryEvent(value) {
		$tab_KeyboardShortcutTelemetry.$1$TelemetryEventField = ss.delegateCombine($tab_KeyboardShortcutTelemetry.$1$TelemetryEventField, value);
	};
	$tab_KeyboardShortcutTelemetry.remove_telemetryEvent = function KeyboardShortcutTelemetry$remove_TelemetryEvent(value) {
		$tab_KeyboardShortcutTelemetry.$1$TelemetryEventField = ss.delegateRemove($tab_KeyboardShortcutTelemetry.$1$TelemetryEventField, value);
	};
	$tab_KeyboardShortcutTelemetry.logKeyboardShortcut = function KeyboardShortcutTelemetry$LogKeyboardShortcut(shortcutEvent) {
		var shortcutKey = shortcutEvent.comboName;
		if (ss.keyExists($tab_KeyboardShortcutTelemetry.$shortcutToEvent, shortcutKey)) {
			$tab_KeyboardShortcutTelemetry.$shortcutToEvent[shortcutKey] = $tab_KeyboardShortcutTelemetryEvent.mergeEvents($tab_KeyboardShortcutTelemetry.$shortcutToEvent[shortcutKey], shortcutEvent);
		}
		else {
			$tab_KeyboardShortcutTelemetry.$shortcutToEvent[shortcutKey] = shortcutEvent;
			_.delay(function(key) {
				var mergedEvents = $tab_KeyboardShortcutTelemetry.$shortcutToEvent[key];
				if (!ss.staticEquals($tab_KeyboardShortcutTelemetry.$1$TelemetryEventField, null) && mergedEvents.shouldAllowLogging()) {
					$tab_KeyboardShortcutTelemetry.$1$TelemetryEventField($tab_KeyboardShortcutTelemetry.$telemetryType, mergedEvents.generateTelemetryPairs());
				}
				delete $tab_KeyboardShortcutTelemetry.$shortcutToEvent[key];
			}, $tab_KeyboardShortcutTelemetry.$loggingWindowsInMs, shortcutKey);
		}
	};
	global.tab.KeyboardShortcutTelemetry = $tab_KeyboardShortcutTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.KeyboardShortcutTelemetryEvent
	var $tab_KeyboardShortcutTelemetryEvent = function(shortcut, e, startTime, completeTime, wasExecuted, wasComboRecognized, isGlobalShortcut, wasBlockedByDialog, wasBlockedByGlass, wasBlockedByLoading, wasBlockedByTextInput) {
		this.comboName = null;
		this.$shortcutName = null;
		this.$isGlobalShortcut = false;
		this.$isKnownShortcut = false;
		this.$wasBlockedByDialog = false;
		this.$wasBlockedByGlass = false;
		this.$wasBlockedByLoading = false;
		this.$wasBlockedByTextInput = false;
		this.$numExecutions = 0;
		this.$evnt = null;
		this.$shortcut = null;
		this.$startTime = null;
		this.$completeTime = null;
		this.$evnt = e;
		this.$startTime = startTime;
		this.$completeTime = completeTime;
		this.$isKnownShortcut = wasComboRecognized === true;
		this.$wasBlockedByDialog = wasBlockedByDialog === true;
		this.$wasBlockedByGlass = wasBlockedByGlass === true;
		this.$wasBlockedByLoading = wasBlockedByLoading === true;
		this.$wasBlockedByTextInput = wasBlockedByTextInput === true;
		this.$isGlobalShortcut = isGlobalShortcut;
		this.$shortcut = shortcut;
		if (wasExecuted === true) {
			++this.$numExecutions;
		}
		this.$addNames();
	};
	$tab_KeyboardShortcutTelemetryEvent.__typeName = 'tab.KeyboardShortcutTelemetryEvent';
	$tab_KeyboardShortcutTelemetryEvent.$ctor1 = function(shortcutName, comboName, e, numExecutions, isGlobalShortcut, startTime, completeTime, isKnownShortcut, wasBlockedByDialog, wasBlockedByGlass, wasBlockedByLoading, wasBlockedByTextInput) {
		this.comboName = null;
		this.$shortcutName = null;
		this.$isGlobalShortcut = false;
		this.$isKnownShortcut = false;
		this.$wasBlockedByDialog = false;
		this.$wasBlockedByGlass = false;
		this.$wasBlockedByLoading = false;
		this.$wasBlockedByTextInput = false;
		this.$numExecutions = 0;
		this.$evnt = null;
		this.$shortcut = null;
		this.$startTime = null;
		this.$completeTime = null;
		this.$shortcutName = shortcutName;
		this.comboName = comboName;
		this.$evnt = e;
		this.$numExecutions = numExecutions;
		this.$wasBlockedByDialog = wasBlockedByDialog;
		this.$isGlobalShortcut = isGlobalShortcut;
		this.$startTime = startTime;
		this.$completeTime = completeTime;
		this.$isKnownShortcut = isKnownShortcut;
		this.$wasBlockedByGlass = wasBlockedByGlass;
		this.$wasBlockedByLoading = wasBlockedByLoading;
		this.$wasBlockedByTextInput = wasBlockedByTextInput;
	};
	$tab_KeyboardShortcutTelemetryEvent.mergeEvents = function KeyboardShortcutTelemetryEvent$MergeEvents(eventOne, eventTwo) {
		ss.Debug.assert(ss.referenceEquals(eventOne.comboName, eventTwo.comboName), 'merges are only allowed on the same shortcut');
		var $t2 = ((eventOne.$numExecutions > 0) ? eventOne : (eventOne.$isKnownShortcut ? eventOne : eventTwo)).$shortcutName;
		var $t3 = eventOne.comboName;
		var $t4 = eventOne.$evnt || eventTwo.$evnt;
		var $t5 = eventOne.$isGlobalShortcut || eventTwo.$isGlobalShortcut;
		var $t6 = eventOne.$numExecutions + eventTwo.$numExecutions;
		var $t1 = eventOne.$startTime;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = eventTwo.$startTime;
		}
		var $t7 = eventOne.$completeTime;
		if (ss.isNullOrUndefined($t7)) {
			$t7 = eventTwo.$completeTime;
		}
		return new $tab_KeyboardShortcutTelemetryEvent.$ctor1($t2, $t3, $t4, $t6, $t5, $t1, $t7, eventOne.$isKnownShortcut || eventTwo.$isKnownShortcut, eventOne.$wasBlockedByDialog || eventTwo.$wasBlockedByDialog, eventOne.$wasBlockedByGlass || eventTwo.$wasBlockedByGlass, eventOne.$wasBlockedByLoading || eventTwo.$wasBlockedByLoading, eventOne.$wasBlockedByTextInput || eventTwo.$wasBlockedByTextInput);
	};
	global.tab.KeyboardShortcutTelemetryEvent = $tab_KeyboardShortcutTelemetryEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.KeyboardUtilities
	var $tab_KeyboardUtilities = function() {
	};
	$tab_KeyboardUtilities.__typeName = 'tab.KeyboardUtilities';
	$tab_KeyboardUtilities.isOnlyMetaKeyPressed = function KeyboardUtilities$IsOnlyMetaKeyPressed(e) {
		return e.metaKey && e.which === 91;
	};
	$tab_KeyboardUtilities.isTargetTextInput = function KeyboardUtilities$IsTargetTextInput(e) {
		return $(e.target).is('input,textarea,[contenteditable=true]');
	};
	$tab_KeyboardUtilities.stopPropagationAndDefault = function KeyboardUtilities$StopPropagationAndDefault(e) {
		e.stopPropagation();
		e.preventDefault();
	};
	$tab_KeyboardUtilities.isShown = function KeyboardUtilities$IsShown(element) {
		var jqueryElement = $(element);
		return element.offsetHeight !== 0 && element.offsetWidth !== 0 && $tab_KeyboardUtilities.$isVisible(jqueryElement) && _.every(jqueryElement.parents().get(), function(ancestorElement) {
			return $tab_KeyboardUtilities.$isVisible($(ancestorElement));
		});
	};
	$tab_KeyboardUtilities.$isVisible = function KeyboardUtilities$IsVisible(element) {
		return element.is(':visible') && element.css('display') !== 'none' && element.css('visibility') !== 'hidden';
	};
	global.tab.KeyboardUtilities = $tab_KeyboardUtilities;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.KeyCodeNames
	var $tab_KeyCodeNames = function() {
	};
	$tab_KeyCodeNames.__typeName = 'tab.KeyCodeNames';
	$tab_KeyCodeNames.$add = function KeyCodeNames$Add(code, name) {
		$tab_KeyCodeNames.$keyCodeToName[code] = name;
		$tab_KeyCodeNames.$nameToKeyCode[name] = code;
	};
	$tab_KeyCodeNames.hasName$1 = function KeyCodeNames$HasName(code) {
		return ss.keyExists($tab_KeyCodeNames.$keyCodeToName, code);
	};
	$tab_KeyCodeNames.hasName = function KeyCodeNames$HasName(name) {
		return ss.keyExists($tab_KeyCodeNames.$nameToKeyCode, name);
	};
	$tab_KeyCodeNames.hasKeyCode = function KeyCodeNames$HasKeyCode(name) {
		return ss.keyExists($tab_KeyCodeNames.$nameToKeyCode, name);
	};
	$tab_KeyCodeNames.hasKeyCode$1 = function KeyCodeNames$HasKeyCode(code) {
		return ss.keyExists($tab_KeyCodeNames.$keyCodeToName, code);
	};
	$tab_KeyCodeNames.findName = function KeyCodeNames$FindName(code) {
		return $tab_KeyCodeNames.$keyCodeToName[code];
	};
	$tab_KeyCodeNames.findKeyCode = function KeyCodeNames$FindKeyCode(name) {
		return $tab_KeyCodeNames.$nameToKeyCode[name];
	};
	global.tab.KeyCodeNames = $tab_KeyCodeNames;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.KeyCombo
	var $tab_KeyCombo = function(comboText) {
		this.supportedLocales = null;
		this.$1$ModifiersField = null;
		this.$1$TriggerKeyField = 0;
		if (ss.isNullOrEmptyString(comboText)) {
			ss.Debug.assert(false, 'combo must have text');
			return;
		}
		var hasModifierCode = function(keyCode) {
			return comboText.indexOf(keyCode.toString() + $tab_KeyCombo.delimiter) !== -1 || comboText.indexOf($tab_KeyCodeNames.findName(keyCode) + $tab_KeyCombo.delimiter) !== -1;
		};
		var hasModifierName = function(name) {
			return comboText.indexOf(name + $tab_KeyCombo.delimiter) !== -1;
		};
		var $t1 = new $tab_KeyModifiers(false, false, false, false, false, false, false, false, false);
		$t1.alt = hasModifierCode(18);
		$t1.command = hasModifierCode(91) && BrowserSupport.BrowserSupport.IsMac();
		$t1.control = hasModifierCode(17);
		$t1.controlOrCommand = hasModifierName($tab_KeyCombo.controlOrCommand);
		$t1.macControl = hasModifierName($tab_KeyCombo.macControl);
		$t1.shift = hasModifierCode(16);
		$t1.winControl = hasModifierName($tab_KeyCombo.winControl);
		$t1.windows = hasModifierCode(91) && BrowserSupport.BrowserSupport.IsWindows();
		this.set_modifiers($t1);
		if (comboText.indexOf('++') !== -1) {
			this.set_triggerKey(187);
		}
		else {
			var triggerText = comboText.split($tab_KeyCombo.delimiter);
			var triggerKey = triggerText[triggerText.length - 1];
			var directKeyCode = {};
			if (ss.Int32.tryParse(triggerKey, directKeyCode)) {
				this.set_triggerKey(directKeyCode.$);
			}
			else if ($tab_KeyCodeNames.hasName(triggerKey)) {
				this.set_triggerKey($tab_KeyCodeNames.findKeyCode(triggerKey));
			}
			else {
				var chars = triggerKey.split('').map(function(s) {
					return s.charCodeAt(0);
				});
				ss.Debug.assert(chars.length === 1, 'unexpected trigger key: ' + chars);
				this.set_triggerKey(chars[0]);
			}
		}
	};
	$tab_KeyCombo.__typeName = 'tab.KeyCombo';
	$tab_KeyCombo.$ctor3 = function(modifiers, triggerKey, supportedLocales) {
		this.supportedLocales = null;
		this.$1$ModifiersField = null;
		this.$1$TriggerKeyField = 0;
		this.set_modifiers(modifiers);
		this.set_triggerKey(triggerKey);
		this.supportedLocales = supportedLocales;
	};
	$tab_KeyCombo.$ctor4 = function(modifiers, triggerKey, supportedLocales) {
		$tab_KeyCombo.$ctor3.call(this, modifiers, triggerKey, supportedLocales);
	};
	$tab_KeyCombo.$ctor2 = function(triggerKey, supportedLocales) {
		$tab_KeyCombo.$ctor4.call(this, new $tab_KeyModifiers(false, false, false, false, false, false, false, false, false), triggerKey, supportedLocales);
	};
	$tab_KeyCombo.$ctor1 = function(triggerKey, supportedLocales) {
		$tab_KeyCombo.$ctor3.call(this, new $tab_KeyModifiers(false, false, false, false, false, false, false, false, false), triggerKey, supportedLocales);
	};
	global.tab.KeyCombo = $tab_KeyCombo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.KeyCombos
	var $tab_KeyCombos = function(keyCombo, keyCombos) {
		this.supportedLocales = null;
		this.isCurrentLocalAllowed = false;
		this.$1$CombosField = null;
		this.set_$combos([keyCombo].concat(keyCombos));
		this.supportedLocales = this.$findSupportedLocales();
		this.isCurrentLocalAllowed = this.$checkIfCurrentLocaleIsAllowed();
	};
	$tab_KeyCombos.__typeName = 'tab.KeyCombos';
	$tab_KeyCombos.op_Implicit = function KeyCombos$op_Implicit(keyCombo) {
		return new $tab_KeyCombos(keyCombo, []);
	};
	global.tab.KeyCombos = $tab_KeyCombos;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.KeyModifiers
	var $tab_KeyModifiers = function(alt, command, control, controlOrCommand, macControl, nonMacControl, shift, winControl, windows) {
		this.alt = false;
		this.command = false;
		this.control = false;
		this.controlOrCommand = false;
		this.macControl = false;
		this.nonMacControl = false;
		this.shift = false;
		this.winControl = false;
		this.windows = false;
		this.alt = alt;
		this.command = command;
		this.control = control || winControl || macControl || nonMacControl;
		this.nonMacControl = nonMacControl;
		this.controlOrCommand = controlOrCommand;
		this.macControl = macControl;
		this.shift = shift;
		this.winControl = winControl;
		this.windows = windows;
		if (this.controlOrCommand) {
			this.$setControlOrCommand();
		}
	};
	$tab_KeyModifiers.__typeName = 'tab.KeyModifiers';
	$tab_KeyModifiers.isControlOrCommandPressed = function KeyModifiers$IsControlOrCommandPressed(e) {
		return (BrowserSupport.BrowserSupport.IsMac() ? e.metaKey : e.ctrlKey);
	};
	$tab_KeyModifiers.isCommandPressed = function KeyModifiers$IsCommandPressed(e) {
		return BrowserSupport.BrowserSupport.IsMac() && e.metaKey;
	};
	$tab_KeyModifiers.isWindowsPressed = function KeyModifiers$IsWindowsPressed(e) {
		return BrowserSupport.BrowserSupport.IsWindows() && e.metaKey;
	};
	$tab_KeyModifiers.isMacControlPressed = function KeyModifiers$IsMacControlPressed(e) {
		return BrowserSupport.BrowserSupport.IsMac() && e.ctrlKey;
	};
	$tab_KeyModifiers.isWinControlPressed = function KeyModifiers$IsWinControlPressed(e) {
		return BrowserSupport.BrowserSupport.IsWindows() && e.ctrlKey;
	};
	$tab_KeyModifiers.isNonMacControlPressed = function KeyModifiers$IsNonMacControlPressed(e) {
		return !BrowserSupport.BrowserSupport.IsMac() && e.ctrlKey;
	};
	global.tab.KeyModifiers = $tab_KeyModifiers;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.KeyboardShortcutModule.PropagationType
	var $tab_PropagationType = function() {
	};
	$tab_PropagationType.__typeName = 'tab.PropagationType';
	global.tab.PropagationType = $tab_PropagationType;
	ss.initClass($tab_AdditionalShortcutOptions, $asm, {
		toString: function AdditionalShortcutOptions$ToString() {
			return JSON.stringify(this);
		}
	});
	ss.initInterface($tab_IKeyboardShortcut, $asm, { get_keyCombos: null, get_element: null, get_hintText: null, get_additionalOptions: null, onValidKeyCombo: null, isAllowed: null, executeShortcut: null });
	ss.initClass($tab_KeyboardShortcut, $asm, {
		get_keyCombos: null,
		get_element: null,
		get_hintText: function KeyboardShortcut$get_HintText() {
			return this.get_keyCombos().removeUnsupportedCombos(this.get_additionalOptions().areAllLocalesSupported).get_hintText();
		},
		get_additionalOptions: function KeyboardShortcut$get_AdditionalOptions() {
			return new $tab_AdditionalShortcutOptions();
		},
		onValidKeyCombo: function KeyboardShortcut$OnValidKeyCombo(e) {
		},
		isAllowed: null,
		executeShortcut: null,
		toString: function KeyboardShortcut$ToString() {
			var $t1 = {};
			$t1[$tab_KeyboardShortcut.$nameKey] = ss.getTypeName(ss.getInstanceType(this));
			$t1[$tab_KeyboardShortcut.$classKey] = this.get_element().attr($tab_KeyboardShortcut.$classKey);
			$t1[$tab_KeyboardShortcut.$idKey] = this.get_element().attr($tab_KeyboardShortcut.$idKey);
			$t1[$tab_KeyboardShortcut.$hintTextKey] = this.get_hintText();
			$t1[$tab_KeyboardShortcut.$keyCombosKey] = this.get_keyCombos();
			$t1[$tab_KeyboardShortcut.$additionalOptionsKey] = this.get_additionalOptions();
			return JSON.stringify($t1);
		}
	}, null, [$tab_IKeyboardShortcut]);
	ss.initClass($tab_GlobalKeyboardShortcut, $asm, {
		get_element: function GlobalKeyboardShortcut$get_Element() {
			return $(document.body);
		},
		isAllowed: function GlobalKeyboardShortcut$IsAllowed(e) {
			return $tab_KeyboardShortcutManager.isGloballyAllowed(e, this);
		}
	}, $tab_KeyboardShortcut, [$tab_IKeyboardShortcut]);
	ss.initClass($tab_CommandKeyboardShortcut, $asm, {
		get_commandId: null,
		get_shouldRequireCommandCheck: function CommandKeyboardShortcut$get_ShouldRequireCommandCheck() {
			return true;
		},
		get_$shortcutAction: function CommandKeyboardShortcut$get_ShortcutAction() {
			return $tab_KeyboardShortcutManager.findShortcutAction(this.get_commandId());
		},
		isAllowed: function CommandKeyboardShortcut$IsAllowed(e) {
			return $tab_GlobalKeyboardShortcut.prototype.isAllowed.call(this, e) && (!this.get_shouldRequireCommandCheck() || ss.isValue(this.get_$shortcutAction()) && this.get_$shortcutAction().get_enabled() && this.get_$shortcutAction().get_isVisible());
		},
		executeShortcut: function CommandKeyboardShortcut$ExecuteShortcut(e) {
			this.get_$shortcutAction().execute();
		}
	}, $tab_GlobalKeyboardShortcut, [$tab_IKeyboardShortcut]);
	ss.initInterface($tab_IShortcutAction, $asm, { get_enabled: null, get_isVisible: null, get_description: null, set_description: null, get_key: null, execute: null });
	ss.initInterface($tab_IUpdatableKeyboardShortcut, $asm, { updateShortcutAction: null });
	ss.initClass($tab_KeyboardShortcutManager, $asm, {});
	ss.initClass($tab_KeyboardShortcutTelemetry, $asm, {});
	ss.initClass($tab_KeyboardShortcutTelemetryEvent, $asm, {
		generateTelemetryPairs: function KeyboardShortcutTelemetryEvent$GenerateTelemetryPairs() {
			return ss.mkdict([$tab_KeyboardShortcutTelemetryEvent.$shortcutNameText, this.$shortcutName, $tab_KeyboardShortcutTelemetryEvent.$comboText, this.comboName, $tab_KeyboardShortcutTelemetryEvent.$isKnownShortcutText, this.$isKnownShortcut, $tab_KeyboardShortcutTelemetryEvent.$wasBlockedByDialogText, this.$wasBlockedByDialog, $tab_KeyboardShortcutTelemetryEvent.$wasBlockedByGlassText, this.$wasBlockedByGlass, $tab_KeyboardShortcutTelemetryEvent.$wasBlockedByLoadingText, this.$wasBlockedByLoading, $tab_KeyboardShortcutTelemetryEvent.$wasBlockedByTextInputText, this.$wasBlockedByTextInput, $tab_KeyboardShortcutTelemetryEvent.$currentTargetIdText, this.$evnt.currentTarget.id, $tab_KeyboardShortcutTelemetryEvent.$currentTargetClassesText, this.$evnt.currentTarget.className, $tab_KeyboardShortcutTelemetryEvent.$currentTargetName, this.$evnt.currentTarget.nodeName, $tab_KeyboardShortcutTelemetryEvent.$numExecutionsText, this.$numExecutions, $tab_KeyboardShortcutTelemetryEvent.$isGlobalShortcutText, this.$isGlobalShortcut, $tab_KeyboardShortcutTelemetryEvent.$elapsedTimeInMsText, ((ss.isNullOrUndefined(this.$completeTime) || ss.isNullOrUndefined(this.$startTime)) ? 0 : ss.Nullable$1.sub(this.$completeTime, this.$startTime))]);
		},
		shouldAllowLogging: function KeyboardShortcutTelemetryEvent$ShouldAllowLogging() {
			var hasAllowedQualifiers = (this.$evnt.ctrlKey || this.$evnt.metaKey) && this.$evnt.which >= 32 && this.$evnt.which <= 126;
			return !$tab_KeyboardUtilities.isOnlyMetaKeyPressed(this.$evnt) && (this.$numExecutions > 0 || hasAllowedQualifiers);
		},
		createTriggerKeyName: function KeyboardShortcutTelemetryEvent$CreateTriggerKeyName() {
			if ($tab_KeyboardUtilities.isOnlyMetaKeyPressed(this.$evnt)) {
				return '';
			}
			if ($tab_KeyCodeNames.hasKeyCode$1(this.$evnt.which)) {
				return $tab_KeyCodeNames.findName(this.$evnt.which);
			}
			return String.fromCharCode(this.$evnt.which);
		},
		$addNames: function KeyboardShortcutTelemetryEvent$AddNames() {
			if (ss.isNullOrUndefined(this.$shortcut) || this.$isKnownShortcut !== true) {
				this.$shortcutName = $tab_KeyboardShortcutTelemetryEvent.$unregisterdShortcutText;
			}
			else {
				this.$shortcutName = (ss.isNullOrUndefined(this.$shortcut) ? '' : ss.getTypeName(ss.getInstanceType(this.$shortcut)));
			}
			var Ctrl = 'ctrl+';
			var Cmd = 'command+';
			var Alt = 'alt+';
			var Win = 'win+';
			var Shift = 'shift+';
			this.comboName = (this.$evnt.ctrlKey ? Ctrl : '') + ($tab_KeyModifiers.isCommandPressed(this.$evnt) ? Cmd : '') + (this.$evnt.altKey ? Alt : '') + ($tab_KeyModifiers.isWindowsPressed(this.$evnt) ? Win : '') + (this.$evnt.shiftKey ? Shift : '') + this.createTriggerKeyName();
		}
	});
	$tab_KeyboardShortcutTelemetryEvent.$ctor1.prototype = $tab_KeyboardShortcutTelemetryEvent.prototype;
	ss.initClass($tab_KeyboardUtilities, $asm, {});
	ss.initClass($tab_KeyCodeNames, $asm, {});
	ss.initClass($tab_KeyCombo, $asm, {
		get_modifiers: function KeyCombo$get_Modifiers() {
			return this.$1$ModifiersField;
		},
		set_modifiers: function KeyCombo$set_Modifiers(value) {
			this.$1$ModifiersField = value;
		},
		get_triggerKey: function KeyCombo$get_TriggerKey() {
			return this.$1$TriggerKeyField;
		},
		set_triggerKey: function KeyCombo$set_TriggerKey(value) {
			this.$1$TriggerKeyField = value;
		},
		get_hintText: function KeyCombo$get_HintText() {
			return (tsConfig.is_mobile ? null : (this.get_modifiers().get_hintText() + this.$createTriggerKeyName()));
		},
		isCurrentLocaleAllowed: function KeyCombo$IsCurrentLocaleAllowed() {
			return !this.isLocaleSpecified() || ss.isValue(tsConfig.locale) && _.any(this.supportedLocales, function(locale) {
				return ss.referenceEquals(tsConfig.locale.toString(), locale);
			});
		},
		isLocaleSpecified: function KeyCombo$IsLocaleSpecified() {
			return !_.isEmpty(this.supportedLocales);
		},
		hasValidCombo: function KeyCombo$HasValidCombo(e) {
			var pressedKey = e.which;
			return pressedKey === this.get_triggerKey() && this.get_modifiers().hasValidModifiers(e) && this.isCurrentLocaleAllowed();
		},
		isComboSupported: function KeyCombo$IsComboSupported(areAllLocalesAllowed) {
			return (areAllLocalesAllowed || this.isCurrentLocaleAllowed()) && this.$isPlatformSupported();
		},
		$createTriggerKeyName: function KeyCombo$CreateTriggerKeyName() {
			return ($tab_KeyCodeNames.hasName$1(this.get_triggerKey()) ? $tab_KeyCodeNames.findName(this.get_triggerKey()) : String.fromCharCode(this.get_triggerKey()));
		},
		$isPlatformSupported: function KeyCombo$IsPlatformSupported() {
			var isMacSpecific = this.get_modifiers().macControl || this.get_modifiers().command;
			var isNonMacSpecific = this.get_modifiers().winControl || this.get_modifiers().windows || this.get_modifiers().nonMacControl;
			return !isMacSpecific && !isNonMacSpecific || isMacSpecific && BrowserSupport.BrowserSupport.IsMac() || isNonMacSpecific && !BrowserSupport.BrowserSupport.IsMac();
		},
		toString: function KeyCombo$ToString() {
			return this.get_modifiers() + this.$createTriggerKeyName() + this.supportedLocales;
		}
	});
	$tab_KeyCombo.$ctor3.prototype = $tab_KeyCombo.$ctor4.prototype = $tab_KeyCombo.$ctor2.prototype = $tab_KeyCombo.$ctor1.prototype = $tab_KeyCombo.prototype;
	ss.initClass($tab_KeyCombos, $asm, {
		get_hasCombos: function KeyCombos$get_HasCombos() {
			return this.get_$combos().length > 0;
		},
		get_hintText: function KeyCombos$get_HintText() {
			return ((this.get_$combos().length === 0) ? '' : this.get_$combos()[0].get_hintText());
		},
		get_$combos: function KeyCombos$get_Combos() {
			return this.$1$CombosField;
		},
		set_$combos: function KeyCombos$set_Combos(value) {
			this.$1$CombosField = value;
		},
		removeUnsupportedCombos: function KeyCombos$RemoveUnsupportedCombos(areAllLocalesAllowed) {
			this.set_$combos(_.filter(this.get_$combos(), function(combo) {
				return combo.isComboSupported(areAllLocalesAllowed);
			}));
			return this;
		},
		$checkIfCurrentLocaleIsAllowed: function KeyCombos$CheckIfCurrentLocaleIsAllowed() {
			var isAnyLocaleSpecified = _.any(this.get_$combos(), function(combo) {
				return combo.isLocaleSpecified();
			});
			if (!isAnyLocaleSpecified) {
				return ss.isValue(tsConfig.locale) && ss.referenceEquals(tsConfig.locale.toString(), tab.LocaleStrings.unitedStates);
			}
			return _.any(this.get_$combos(), function(combo1) {
				return combo1.isCurrentLocaleAllowed();
			});
		},
		$findSupportedLocales: function KeyCombos$FindSupportedLocales() {
			var locales = [];
			for (var $t1 = 0; $t1 < this.length; $t1++) {
				var combo = this[$t1];
				for (var $t2 = 0; $t2 < combo.supportedLocales.length; $t2++) {
					var locale = combo.supportedLocales[$t2];
					locales.push(locale);
				}
			}
			return locales;
		},
		hasValidCombo: function KeyCombos$HasValidCombo(e) {
			return _.any(this.get_$combos(), function(combo) {
				return combo.hasValidCombo(e);
			});
		},
		getEnumerator: function KeyCombos$GetEnumerator() {
			return this.get_$combos().getEnumerator();
		},
		toString: function KeyCombos$ToString() {
			return this.get_$combos().toString();
		}
	}, null, [ss.IEnumerable, ss.IEnumerable]);
	ss.initClass($tab_KeyModifiers, $asm, {
		get_hintText: function KeyModifiers$get_HintText() {
			var ctrlHint = (BrowserSupport.BrowserSupport.IsMac() ? tab.Strings.ModifierKeyWithDelimiterHintTextMacControl : tab.Strings.ModifierKeyWithDelimiterHintTextControl);
			var altHint = (BrowserSupport.BrowserSupport.IsMac() ? tab.Strings.ModifierKeyWithDelimiterHintTextMacOption : tab.Strings.ModifierKeyWithDelimiterHintTextAlt);
			var shiftHint = (BrowserSupport.BrowserSupport.IsMac() ? tab.Strings.ModifierKeyWithDelimiterHintTextMacShift : tab.Strings.ModifierKeyWithDelimiterHintTextShift);
			var winHint = tab.Strings.ModifierKeyWithDelimiterHintTextWindows;
			var commandHint = tab.Strings.ModifierKeyWithDelimiterHintTextCommand;
			return (this.control ? ctrlHint : '') + (this.alt ? altHint : '') + (this.shift ? shiftHint : '') + (this.windows ? winHint : '') + (this.command ? commandHint : '');
		},
		hasValidModifiers: function KeyModifiers$HasValidModifiers(e) {
			var isSpecialControlValid = true;
			if (this.macControl) {
				isSpecialControlValid = !!(isSpecialControlValid & $tab_KeyModifiers.isMacControlPressed(e));
			}
			if (this.nonMacControl) {
				isSpecialControlValid = !!(isSpecialControlValid & $tab_KeyModifiers.isNonMacControlPressed(e));
			}
			if (this.winControl) {
				isSpecialControlValid = !!(isSpecialControlValid & $tab_KeyModifiers.isWinControlPressed(e));
			}
			return this.alt === e.altKey && this.command === $tab_KeyModifiers.isCommandPressed(e) && this.control === e.ctrlKey && this.shift === e.shiftKey && this.windows === $tab_KeyModifiers.isWindowsPressed(e) && isSpecialControlValid && this.$isControlOrCommandAllowed(e);
		},
		$setControlOrCommand: function KeyModifiers$SetControlOrCommand() {
			if (BrowserSupport.BrowserSupport.IsMac()) {
				this.command = true;
			}
			else {
				this.control = true;
			}
			if (BrowserSupport.BrowserSupport.IsWindows()) {
				this.winControl = true;
			}
		},
		$isControlOrCommandAllowed: function KeyModifiers$IsControlOrCommandAllowed(e) {
			return !this.controlOrCommand || $tab_KeyModifiers.isControlOrCommandPressed(e);
		},
		toString: function KeyModifiers$ToString() {
			return this.alt.toString() + this.command + this.control + this.controlOrCommand + this.macControl + this.shift + this.winControl + this.windows + this.nonMacControl;
		}
	});
	ss.initEnum($tab_PropagationType, $asm, { neverStopPropagation: 0, onValidKeyComboStopPropagation: 1, onValidAndAllowedKeyComboStopPropagation: 2 });
	(function() {
		$tab_KeyCodeNames.$keyCodeToName = null;
		$tab_KeyCodeNames.$nameToKeyCode = null;
		$tab_KeyCodeNames.$keyCodeToName = {};
		$tab_KeyCodeNames.$nameToKeyCode = {};
		$tab_KeyCodeNames.$add(18, 'Alt');
		$tab_KeyCodeNames.$add(8, 'Backspace');
		$tab_KeyCodeNames.$add(20, 'CapsLock');
		$tab_KeyCodeNames.$add(188, 'Comma');
		$tab_KeyCodeNames.$add(91, 'Command');
		$tab_KeyCodeNames.$add(91, 'CommandLeft');
		$tab_KeyCodeNames.$add(91, 'Windows');
		$tab_KeyCodeNames.$add(93, 'CommandRight');
		$tab_KeyCodeNames.$add(93, 'Menu');
		$tab_KeyCodeNames.$add(17, 'Control');
		$tab_KeyCodeNames.$add(46, 'DeleteKey');
		$tab_KeyCodeNames.$add(40, (BrowserSupport.BrowserSupport.IsMac() ? tab.Strings.KeyboardShortcutTriggerKeyMacArrowDown : tab.Strings.KeyboardShortcutTriggerKeyArrowDown));
		$tab_KeyCodeNames.$add(35, 'End');
		$tab_KeyCodeNames.$add(13, (BrowserSupport.BrowserSupport.IsMac() ? tab.Strings.KeyboardShortcutTriggerKeyMacEnter : tab.Strings.KeyboardShortcutTriggerKeyEnter));
		$tab_KeyCodeNames.$add(187, '=');
		$tab_KeyCodeNames.$add(187, '+');
		$tab_KeyCodeNames.$add(27, 'Escape');
		$tab_KeyCodeNames.$add(112, tab.Strings.KeyboardShortcutTriggerKeyF1);
		$tab_KeyCodeNames.$add(113, tab.Strings.KeyboardShortcutTriggerKeyF2);
		$tab_KeyCodeNames.$add(114, 'F3');
		$tab_KeyCodeNames.$add(115, 'F4');
		$tab_KeyCodeNames.$add(116, 'F5');
		$tab_KeyCodeNames.$add(117, 'F6');
		$tab_KeyCodeNames.$add(118, 'F7');
		$tab_KeyCodeNames.$add(119, 'F8');
		$tab_KeyCodeNames.$add(120, 'F9');
		$tab_KeyCodeNames.$add(121, 'F10');
		$tab_KeyCodeNames.$add(122, tab.Strings.KeyboardShortcutTriggerKeyF11);
		$tab_KeyCodeNames.$add(123, tab.Strings.KeyboardShortcutTriggerKeyF12);
		$tab_KeyCodeNames.$add(191, tab.Strings.KeyboardShortcutTriggerKeyForwardSlash);
		$tab_KeyCodeNames.$add(36, 'Home');
		$tab_KeyCodeNames.$add(45, 'Insert');
		$tab_KeyCodeNames.$add(37, (BrowserSupport.BrowserSupport.IsMac() ? tab.Strings.KeyboardShortcutTriggerKeyMacArrowLeft : tab.Strings.KeyboardShortcutTriggerKeyArrowLeft));
		$tab_KeyCodeNames.$add(96, 'NumpadZero');
		$tab_KeyCodeNames.$add(97, 'NumpadOne');
		$tab_KeyCodeNames.$add(98, 'NumpadTwo');
		$tab_KeyCodeNames.$add(99, 'NumpadThree');
		$tab_KeyCodeNames.$add(100, 'NumpadFour');
		$tab_KeyCodeNames.$add(101, 'NumpadFive');
		$tab_KeyCodeNames.$add(102, 'NumpadSix');
		$tab_KeyCodeNames.$add(103, 'NumpadSeven');
		$tab_KeyCodeNames.$add(104, 'NumpadEight');
		$tab_KeyCodeNames.$add(105, 'NumpadNine');
		$tab_KeyCodeNames.$add(107, 'NumpadAdd');
		$tab_KeyCodeNames.$add(110, 'NumpadDecimal');
		$tab_KeyCodeNames.$add(111, 'NumpadDivide');
		$tab_KeyCodeNames.$add(108, 'NumpadEnter');
		$tab_KeyCodeNames.$add(106, 'NumpadMultiply');
		$tab_KeyCodeNames.$add(109, 'NumpadSubtract');
		$tab_KeyCodeNames.$add(34, 'PageDown');
		$tab_KeyCodeNames.$add(33, 'PageUp');
		$tab_KeyCodeNames.$add(190, 'Period');
		$tab_KeyCodeNames.$add(39, (BrowserSupport.BrowserSupport.IsMac() ? tab.Strings.KeyboardShortcutTriggerKeyMacArrowRight : tab.Strings.KeyboardShortcutTriggerKeyArrowRight));
		$tab_KeyCodeNames.$add(16, 'Shift');
		$tab_KeyCodeNames.$add(32, 'Space');
		$tab_KeyCodeNames.$add(9, 'Tab');
		$tab_KeyCodeNames.$add(126, 'Tilde');
		$tab_KeyCodeNames.$add(38, (BrowserSupport.BrowserSupport.IsMac() ? tab.Strings.KeyboardShortcutTriggerKeyMacArrowUp : tab.Strings.KeyboardShortcutTriggerKeyArrowUp));
	})();
	(function() {
		$tab_KeyboardShortcutTelemetryEvent.$unregisterdShortcutText = 'UnregisteredShortcut';
		$tab_KeyboardShortcutTelemetryEvent.$shortcutNameText = 'ShortcutName';
		$tab_KeyboardShortcutTelemetryEvent.$comboText = 'Combo';
		$tab_KeyboardShortcutTelemetryEvent.$currentTargetIdText = 'CurrentTargetId';
		$tab_KeyboardShortcutTelemetryEvent.$currentTargetClassesText = 'CurrentTargetClasses';
		$tab_KeyboardShortcutTelemetryEvent.$currentTargetName = 'CurrentTargetName';
		$tab_KeyboardShortcutTelemetryEvent.$isKnownShortcutText = 'IsKnownShortcut';
		$tab_KeyboardShortcutTelemetryEvent.$numExecutionsText = 'NumTimesExecuted';
		$tab_KeyboardShortcutTelemetryEvent.$wasBlockedByDialogText = 'WasBlockedByDialog';
		$tab_KeyboardShortcutTelemetryEvent.$wasBlockedByGlassText = 'WasBlockedByGlass';
		$tab_KeyboardShortcutTelemetryEvent.$wasBlockedByLoadingText = 'WasBlockedByLoading';
		$tab_KeyboardShortcutTelemetryEvent.$wasBlockedByTextInputText = 'WasBlockedByTextInput';
		$tab_KeyboardShortcutTelemetryEvent.$isGlobalShortcutText = 'IsGlobalShortcut';
		$tab_KeyboardShortcutTelemetryEvent.$elapsedTimeInMsText = 'ElapsedTimeInMs';
	})();
	(function() {
		$tab_KeyboardShortcutTelemetry.$telemetryType = 'KeyboardShortcut';
		$tab_KeyboardShortcutTelemetry.$loggingWindowsInMs = 500;
		$tab_KeyboardShortcutTelemetry.$shortcutToEvent = {};
		$tab_KeyboardShortcutTelemetry.$1$TelemetryEventField = null;
	})();
	(function() {
		$tab_KeyboardShortcut.$nameKey = 'shortcut name';
		$tab_KeyboardShortcut.$classKey = 'class';
		$tab_KeyboardShortcut.$idKey = 'id';
		$tab_KeyboardShortcut.$hintTextKey = 'hint text';
		$tab_KeyboardShortcut.$keyCombosKey = 'key combos';
		$tab_KeyboardShortcut.$additionalOptionsKey = 'additional options';
	})();
	(function() {
		$tab_KeyboardShortcutManager.$commandNameToShortcut = {};
		$tab_KeyboardShortcutManager.$commandNameToShortcutAction = {};
		$tab_KeyboardShortcutManager.$registeredShortcuts = {};
		$tab_KeyboardShortcutManager.$registeredKeyCombos = {};
	})();
	(function() {
		$tab_KeyCombo.delimiter = '+';
		$tab_KeyCombo.controlOrCommand = 'Ctrl_Command';
		$tab_KeyCombo.macControl = 'Mac_Ctrl';
		$tab_KeyCombo.winControl = 'Win_Ctrl';
	})();
})();
// END KeyboardShortcutModule

// END KeyboardShortcutModule

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	ss.initAssembly($asm, 'vqldomain');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BaseSessionCommandHandler
	var $tab_$BaseSessionCommandHandler = function(session) {
		this.$session = null;
		this.$commandSequenceId = 0;
		this.$commandThrottlers = null;
		this.$1$OnRemoteCommandResponseField = null;
		this.$1$OnRemoteCommandExceptionField = null;
		this.$session = session;
		this.$commandSequenceId = 0;
		this.$commandThrottlers = [];
	};
	$tab_$BaseSessionCommandHandler.__typeName = 'tab.$BaseSessionCommandHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.BrushingDataUtils
	var $tab_$BrushingDataUtils = function() {
	};
	$tab_$BrushingDataUtils.__typeName = 'tab.$BrushingDataUtils';
	$tab_$BrushingDataUtils.get_$log = function BrushingDataUtils$get_Log() {
		return tab.Logger.lazyGetLogger($tab_SelectionClientCommands);
	};
	$tab_$BrushingDataUtils.$buildSelectorBrushingDataValues = function BrushingDataUtils$BuildSelectorBrushingDataValues(model, modelFieldCaptions, objectIds, vizData, fieldCaptions) {
		var vizDataFieldMap = $tab_$BrushingDataUtils.$buildVizDataFieldMap(vizData, fieldCaptions);
		var values = new $tab_$BrushingDataValues(fieldCaptions);
		if (ss.isNullOrUndefined(vizDataFieldMap)) {
			return values;
		}
		var colIndices = new Array(fieldCaptions.length);
		for (var ii = 0; ii < colIndices.length; ++ii) {
			var colIdx = vizData.getColumnIndex(fieldCaptions[ii]);
			colIndices[ii] = colIdx;
		}
		var reverseLookups = {};
		for (var $t1 = 0; $t1 < objectIds.length; $t1++) {
			var objId = objectIds[$t1];
			var itemNames = model.getItemNamesFromObjectId(objId);
			if (ss.isNullOrUndefined(itemNames)) {
				continue;
			}
			var success = true;
			var indices = [];
			for (var i = 0; i < itemNames.length; i++) {
				var caption = modelFieldCaptions[i];
				var vizDataField = vizDataFieldMap[caption];
				if (ss.isNullOrUndefined(vizDataField)) {
					continue;
				}
				reverseLookups[caption] = reverseLookups[caption] || $tab_VizDataLookup.buildAliasReverseLookup(vizData, vizDataField, $tab_ApplicationModel.get_instance().get_dataDictionary());
				var reverseAliasLookup = reverseLookups[caption];
				var alias = reverseAliasLookup[itemNames[i]];
				if (!ss.isValue(alias)) {
					success = false;
					break;
				}
				indices.push(alias);
			}
			if (success) {
				values.$addValues(indices, colIndices);
			}
		}
		return values;
	};
	$tab_$BrushingDataUtils.$buildNodeSelectionDataValues = function BrushingDataUtils$BuildNodeSelectionDataValues(source, selectedNodes) {
		var results = {};
		for (var $t1 = 0; $t1 < selectedNodes.length; $t1++) {
			var node = selectedNodes[$t1];
			var fieldNames = new Array(node.columnIndices.length);
			for (var i = 0; i < fieldNames.length; i++) {
				var col = source.getVizDataFieldByIndex(node.columnIndices[i]);
				fieldNames[i] = col.get_fieldName();
			}
			var combinedName = fieldNames.join(';');
			var values;
			if (ss.keyExists(results, combinedName)) {
				values = results[combinedName];
			}
			else {
				values = new $tab_$BrushingDataValues(fieldNames);
				results[combinedName] = values;
			}
			values.$addValues(ss.cast(node.aliasIndices, Array), node.columnIndices);
		}
		return _.map(results, function(o, s) {
			return o;
		});
	};
	$tab_$BrushingDataUtils.$getFieldsForNodes = function BrushingDataUtils$GetFieldsForNodes(viz, drawGroups) {
		var fields = [];
		for (var $t1 = 0; $t1 < drawGroups.length; $t1++) {
			var drawGroup = drawGroups[$t1];
			if (ss.isNullOrUndefined(drawGroup.node)) {
				continue;
			}
			var node = drawGroup.node;
			if (ss.isValue(node.columnIndices)) {
				for (var $t2 = 0; $t2 < node.columnIndices.length; $t2++) {
					var colIndex = node.columnIndices[$t2];
					var nodeCol = viz.get_vizDataModel().getVizDataFieldByIndex(colIndex);
					var colFieldName = nodeCol.get_fieldCaption();
					if (!ss.contains(fields, colFieldName)) {
						fields.push(colFieldName);
					}
				}
			}
			if (ss.isValue(node.fn)) {
				var nodeCol1 = viz.get_vizDataModel().getVizDataField(node.fn);
				var colFieldName1 = nodeCol1.get_fieldCaption();
				if (!ss.contains(fields, colFieldName1)) {
					fields.push(colFieldName1);
				}
			}
		}
		return Array.prototype.slice.call(fields);
	};
	$tab_$BrushingDataUtils.$buildTupleSelectionDataValues = function BrushingDataUtils$BuildTupleSelectionDataValues(source, tupleIds, fields) {
		var values = new $tab_$BrushingDataValues(fields);
		var vizDataFieldMap = $tab_$BrushingDataUtils.$buildVizDataFieldMap(source, fields);
		if (ss.isNullOrUndefined(vizDataFieldMap)) {
			return values;
		}
		for (var $t1 = 0; $t1 < tupleIds.length; $t1++) {
			var tupleId = tupleIds[$t1];
			var aliasRow = [];
			var columnRow = [];
			for (var $t2 = 0; $t2 < fields.length; $t2++) {
				var field = fields[$t2];
				var vizDataField = vizDataFieldMap[field];
				var aliasIndex = vizDataField.getAliasIndex(tupleId);
				aliasRow.push(aliasIndex);
				columnRow.push(source.getColumnIndex(field));
			}
			if (aliasRow.length !== fields.length) {
				$tab_$BrushingDataUtils.get_$log().error('Alias row created has different number of elements from the specified fields.', []);
			}
			values.$addValues(aliasRow, columnRow);
		}
		return values;
	};
	$tab_$BrushingDataUtils.$buildDateTimeTupleDataValues = function BrushingDataUtils$BuildDateTimeTupleDataValues(srcVizData, targetVizData, dataDict, tupleIds) {
		var overlapIndexes = [];
		var brushAggTypes = {};
		var sourceHasAggNone = false;
		srcVizData.forEachVizDataField(function(srcCol, srcColIdx) {
			if ($tab_$BrushingDataUtils.$isDateTimeColumn(srcCol)) {
				var colAggType = srcCol.get_aggType() || 'none';
				brushAggTypes[colAggType] = srcColIdx;
				if (colAggType === 'none') {
					sourceHasAggNone = true;
				}
			}
			return true;
		});
		var onlyOneBaseCol = true;
		var baseCol = null;
		targetVizData.forEachVizDataField(function(targetCol, targetColIdx) {
			if ($tab_$BrushingDataUtils.$isDateTimeColumn(targetCol)) {
				if (ss.isNullOrUndefined(baseCol)) {
					baseCol = targetCol.get_baseColumnName();
				}
				else if (!ss.referenceEquals(baseCol, targetCol.get_baseColumnName())) {
					onlyOneBaseCol = false;
				}
			}
			return true;
		});
		var overlapColumns = [];
		if (onlyOneBaseCol) {
			var aggTypes = [];
			targetVizData.forEachVizDataField(function(targetCol1, targetColIdx1) {
				if ($tab_$BrushingDataUtils.$isDateTimeColumn(targetCol1)) {
					var aggType = targetCol1.get_aggType() || 'none';
					if (!sourceHasAggNone && aggType === 'none') {
						var $t1 = ss.getEnumerator(Object.keys(brushAggTypes));
						try {
							while ($t1.moveNext()) {
								var srcAggType = $t1.current();
								if (!ss.contains(aggTypes, srcAggType)) {
									aggTypes.push(srcAggType);
									var srcColIdx1 = brushAggTypes[srcAggType];
									overlapIndexes.push(new $tab_$DateTimePartIndexes(srcColIdx1, targetColIdx1, srcAggType, 'none'));
									var srcCol1 = srcVizData.getVizDataFieldByIndex(srcColIdx1);
									overlapColumns.push(srcCol1);
								}
							}
						}
						finally {
							$t1.dispose();
						}
					}
					else if (ss.keyExists(brushAggTypes, aggType)) {
						if (!ss.contains(aggTypes, aggType)) {
							aggTypes.push(aggType);
							var srcColIdx2 = brushAggTypes[aggType];
							overlapIndexes.push(new $tab_$DateTimePartIndexes(srcColIdx2, targetColIdx1, 'none', 'none'));
							overlapColumns.push(targetCol1);
						}
					}
					else if (sourceHasAggNone) {
						var srcColIdx3 = brushAggTypes['none'];
						overlapIndexes.push(new $tab_$DateTimePartIndexes(srcColIdx3, targetColIdx1, 'none', aggType));
						overlapColumns.push(targetCol1);
					}
				}
				return true;
			});
		}
		var targetFieldCaptions = new Array(overlapColumns.length);
		for (var $t2 = 0; $t2 < overlapColumns.length; $t2++) {
			var col = overlapColumns[$t2];
			targetFieldCaptions.push(col.get_fieldCaption());
		}
		var values = new $tab_$BrushingDataValues(targetFieldCaptions);
		for (var $t3 = 0; $t3 < tupleIds.length; $t3++) {
			var tupleId = tupleIds[$t3];
			var valueRow = [];
			var colRow = [];
			for (var $t4 = 0; $t4 < overlapIndexes.length; $t4++) {
				var indices = overlapIndexes[$t4];
				var srcColumn = srcVizData.getVizDataFieldByIndex(indices.$srcColumnIndex);
				var valIdx = srcColumn.getDataValueIndex(tupleId);
				if (ss.isValue(valIdx)) {
					var srcRawVal = dataDict.getRawValue(srcColumn.get_dataType(), ss.unbox(valIdx));
					var srcBrushVal = $tab_$BrushingDataUtils.$convertToBrushValue(srcRawVal, indices.$srcAgg, indices.$destAgg, ss.unbox(valIdx));
					valueRow.push(srcBrushVal);
					colRow.push(indices.$srcColumnIndex);
				}
			}
			values.$addValues(valueRow, colRow);
		}
		return { item1: values, item2: overlapIndexes };
	};
	$tab_$BrushingDataUtils.$findMatchingTuplesDateTimeHighlighting = function BrushingDataUtils$FindMatchingTuplesDateTimeHighlighting(values, overlapIndexes, targetVizData, dataDict) {
		var tupleIds = [];
		if (ss.isNullOrUndefined(targetVizData) || values.get_$isEmpty()) {
			return tupleIds;
		}
		targetVizData.forEachTupleId(function(tupleId) {
			var valueRow = [];
			var colRow = [];
			for (var $t1 = 0; $t1 < overlapIndexes.length; $t1++) {
				var indices = overlapIndexes[$t1];
				var targetColumn = targetVizData.getVizDataFieldByIndex(indices.$destColumnIndex);
				var valIdx = targetColumn.getDataValueIndex(tupleId);
				if (ss.isValue(valIdx)) {
					var targetRawVal = dataDict.getRawValue(targetColumn.get_dataType(), ss.unbox(valIdx));
					var targetBrushVal = $tab_$BrushingDataUtils.$convertToBrushValue(targetRawVal, indices.$destAgg, indices.$srcAgg, ss.unbox(valIdx));
					valueRow.push(targetBrushVal);
					colRow.push(indices.$destColumnIndex);
				}
			}
			if (values.$findMatch(colRow, valueRow)) {
				tupleIds.push(tupleId);
			}
			return true;
		});
		return tupleIds;
	};
	$tab_$BrushingDataUtils.$findMatchingTuples = function BrushingDataUtils$FindMatchingTuples(dvs, vizData) {
		var tupleIds = [];
		if (ss.isNullOrUndefined(vizData) || dvs.get_$isEmpty()) {
			return tupleIds;
		}
		var fieldCaptions = dvs.get_$fieldCaptions();
		var vizDataFieldMap = $tab_$BrushingDataUtils.$buildVizDataFieldMap(vizData, fieldCaptions);
		if (ss.isNullOrUndefined(vizDataFieldMap)) {
			return tupleIds;
		}
		if (!vizData.get_hasTupleIdColumn()) {
			return tupleIds;
		}
		var columnIndices = new Array(fieldCaptions.length);
		for (var jj = 0; jj < fieldCaptions.length; jj++) {
			columnIndices[jj] = vizData.getColumnIndex(fieldCaptions[jj]);
		}
		vizData.forEachTupleId(function(tupleId) {
			var tupleAliasIndices = new Array(fieldCaptions.length);
			for (var ii = 0; ii < fieldCaptions.length; ii++) {
				var field = fieldCaptions[ii];
				var vizDataField = vizDataFieldMap[field];
				var aliasIndex = vizDataField.getAliasIndex(tupleId);
				tupleAliasIndices[ii] = aliasIndex;
			}
			if (dvs.$findMatch(columnIndices, tupleAliasIndices)) {
				tupleIds.push(tupleId);
			}
			return true;
		});
		return tupleIds;
	};
	$tab_$BrushingDataUtils.$findMatchingTrendlines = function BrushingDataUtils$FindMatchingTrendlines(scene, dvs, vizData) {
		var trendlineIds = [];
		if (ss.isNullOrUndefined(scene) || ss.isNullOrUndefined(vizData) || dvs.get_$isEmpty()) {
			return trendlineIds;
		}
		var fieldCaptions = dvs.get_$fieldCaptions();
		var dvsColumnIndexes = null;
		var panes = scene.get_sceneRuntimeData().get_panes();
		for (var $t1 = 0; $t1 < panes.length; $t1++) {
			var pane = panes[$t1];
			for (var $t2 = 0; $t2 < pane.drawPane.length; $t2++) {
				var visualList = pane.drawPane[$t2];
				if (visualList.visualPart === 'trend-lines') {
					for (var $t3 = 0; $t3 < visualList.drawItems.length; $t3++) {
						var item = visualList.drawItems[$t3];
						if (item.type === 'draw-group') {
							dvsColumnIndexes = new Array(fieldCaptions.length);
							for (var jj = 0; jj < fieldCaptions.length; jj++) {
								dvsColumnIndexes[jj] = vizData.getColumnIndex(fieldCaptions[jj]);
							}
							var drawGroup = item;
							var trendlineValueDictionary = {};
							if (ss.isValue(drawGroup.columnIndices)) {
								for (var i = 0; i < drawGroup.columnIndices.length; i++) {
									trendlineValueDictionary[drawGroup.columnIndices[i]] = drawGroup.aliasIndices[i];
								}
							}
							var trendlineAliasIndices = new Array(fieldCaptions.length);
							for (var ii = 0; ii < fieldCaptions.length; ii++) {
								if (ss.keyExists(trendlineValueDictionary, dvsColumnIndexes[ii])) {
									trendlineAliasIndices[ii] = trendlineValueDictionary[dvsColumnIndexes[ii]];
								}
								else {
									trendlineAliasIndices[ii] = null;
								}
							}
							if (dvs.$findMatch(dvsColumnIndexes, trendlineAliasIndices)) {
								trendlineIds.push(drawGroup.objectId);
							}
						}
					}
				}
			}
		}
		return trendlineIds;
	};
	$tab_$BrushingDataUtils.$buildVizDataFieldMap = function BrushingDataUtils$BuildVizDataFieldMap(vizDataModel, fields) {
		var map = {};
		for (var $t1 = 0; $t1 < fields.length; $t1++) {
			var field = fields[$t1];
			var vizDataField = vizDataModel.getVizDataField(field);
			if (ss.isNullOrUndefined(vizDataField)) {
				return null;
			}
			map[field] = vizDataField;
		}
		return map;
	};
	$tab_$BrushingDataUtils.$findMatchingLegendItems = function BrushingDataUtils$FindMatchingLegendItems(dvs, vizData, legend) {
		var results = [];
		if (ss.isNullOrUndefined(vizData) || legend.get_fieldCaptions().length !== dvs.get_$fieldCaptions().length) {
			return results;
		}
		var fieldCaptions = dvs.get_$fieldCaptions();
		var legendFieldCaptions = legend.get_fieldCaptions();
		var dvsFieldIdxs = [];
		for (var $t1 = 0; $t1 < legendFieldCaptions.length; $t1++) {
			var caption = legendFieldCaptions[$t1];
			var index = ss.indexOf(fieldCaptions, caption);
			if (index === -1) {
				return results;
			}
			dvsFieldIdxs.push(index);
		}
		var dataDictionary = $tab_ApplicationModel.get_instance().get_dataDictionary();
		var columnLookup = {};
		var valueLookup = {};
		var dataValues = [];
		var $t2 = dvs.get_$values();
		for (var $t3 = 0; $t3 < $t2.length; $t3++) {
			var dataIndices = $t2[$t3];
			var valid = true;
			dataValues.length = dataIndices.length;
			for (var i = 0; i < dataValues.length; i++) {
				var dvsFieldIdx = dvsFieldIdxs[i];
				var aliasIndex = dataIndices[dvsFieldIdx];
				if (!ss.isValue(aliasIndex)) {
					valid = false;
					break;
				}
				var fieldCaption = legendFieldCaptions[i];
				columnLookup[fieldCaption] = columnLookup[fieldCaption] || vizData.getVizDataField(fieldCaption);
				var col = columnLookup[fieldCaption];
				dataValues[i] = $tab_VizDataLookup.lookupAliasFromIndex(aliasIndex, col, dataDictionary);
			}
			if (valid) {
				valueLookup[dataValues.join(',')] = true;
			}
		}
		var $t4 = legend.get_items();
		for (var $t5 = 0; $t5 < $t4.length; $t5++) {
			var legendItem = $t4[$t5];
			if (valueLookup[legendItem.itemValues.join(',')] === true) {
				results.push(legendItem.objectId);
			}
		}
		return results;
	};
	$tab_$BrushingDataUtils.$findMatchingNodes = function BrushingDataUtils$FindMatchingNodes(dvs, viz, drawGroups) {
		var matchingNodes = [];
		if (ss.isNullOrUndefined(viz.get_vizDataModel())) {
			return matchingNodes;
		}
		var fieldCaptions = dvs.get_$fieldCaptions();
		for (var $t1 = 0; $t1 < drawGroups.length; $t1++) {
			var drawGroup = drawGroups[$t1];
			var isDrawGroupUnbrushable = ss.isNullOrUndefined(drawGroup.node) || ss.isNullOrUndefined(drawGroup.node.columnIndices) || ss.isNullOrUndefined(drawGroup.node.aliasIndices);
			if (isDrawGroupUnbrushable || drawGroup.node.aliasIndices.length < fieldCaptions.length) {
				continue;
			}
			var colIdxs = [];
			var aliasIdxs = [];
			var hasLeftmostField = false;
			for (var ii = 0; ii < drawGroup.node.columnIndices.length; ++ii) {
				var colIdx = drawGroup.node.columnIndices[ii];
				var fieldCaption = viz.get_vizDataModel().getVizDataFieldByIndex(colIdx).get_fieldCaption();
				if (ss.isValue(fieldCaption) && ss.contains(fieldCaptions, fieldCaption)) {
					colIdxs.push(colIdx);
					aliasIdxs.push(drawGroup.node.aliasIndices[ii]);
					if (ii === 0) {
						hasLeftmostField = true;
					}
				}
			}
			if (hasLeftmostField && dvs.$findMatch(colIdxs, aliasIdxs)) {
				var nodeSelection = $tab_SelectionUtils.nodeSelectionFromDrawGroup(drawGroup);
				matchingNodes.push(nodeSelection);
			}
		}
		return matchingNodes;
	};
	$tab_$BrushingDataUtils.$findMatchingNodesDateTimeHighlighting = function BrushingDataUtils$FindMatchingNodesDateTimeHighlighting(dvs, overlapIndexes, viz, dataDict) {
		var matchingNodes = [];
		if (ss.isNullOrUndefined(viz.get_vizDataModel())) {
			return matchingNodes;
		}
		var $t1 = new ss.ObjectEnumerator(viz.get_sceneModel().get_visualListModels());
		try {
			while ($t1.moveNext()) {
				var listModel = $t1.current();
				var $t2 = listModel.value.get_groupItemNodes();
				for (var $t3 = 0; $t3 < $t2.length; $t3++) {
					var drawGroup = $t2[$t3];
					if (ss.isNullOrUndefined(drawGroup.node.columnIndices) || ss.isNullOrUndefined(drawGroup.node.aliasIndices) || !tab.MiscUtil.isNullOrEmpty$3(drawGroup.node.fn)) {
						continue;
					}
					var valueRow = [];
					for (var ii = 0; ii < drawGroup.node.columnIndices.length; ++ii) {
						var nodeColIndex = { $: drawGroup.node.columnIndices[ii] };
						var partIndices = _.find(overlapIndexes, ss.mkdel({ nodeColIndex: nodeColIndex }, function(indices) {
							return indices.$destColumnIndex === this.nodeColIndex.$;
						}));
						if (ss.isValue(partIndices)) {
							var aliasIdx = drawGroup.node.aliasIndices[ii];
							var targetColumn = viz.get_vizDataModel().getVizDataFieldByIndex(partIndices.$destColumnIndex);
							var targetRawVal = dataDict.getRawValue(targetColumn.get_dataType(), aliasIdx);
							if (ss.isValue(targetRawVal)) {
								var targetBrushVal = $tab_$BrushingDataUtils.$convertToBrushValue(targetRawVal, partIndices.$destAgg, partIndices.$srcAgg, aliasIdx);
								valueRow.push(targetBrushVal);
							}
						}
					}
					if (valueRow.length === drawGroup.node.aliasIndices.length) {
						if (dvs.$findMatch(drawGroup.node.columnIndices, valueRow)) {
							matchingNodes.push($tab_SelectionUtils.nodeSelectionFromDrawGroup(drawGroup));
						}
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return matchingNodes;
	};
	$tab_$BrushingDataUtils.$isDateTimeColumn = function BrushingDataUtils$IsDateTimeColumn(column) {
		if (ss.isNullOrUndefined(column)) {
			return false;
		}
		var type = column.get_dataType();
		if (type === 'datetime' || type === 'date') {
			return true;
		}
		var dateTimeAggTypes = ['day', 'hour', 'mdy', 'minute', 'month', 'month-year', 'qtr', 'trunc-day', 'trunc-hour', 'trunc-minute', 'trunc-month', 'trunc-qtr', 'trunc-second', 'trunc-week', 'trunc-year', 'week', 'weekday', 'year'];
		return ss.contains(dateTimeAggTypes, column.get_aggType());
	};
	$tab_$BrushingDataUtils.$convertToBrushValue = function BrushingDataUtils$ConvertToBrushValue(value, aggThis, aggOther, valIdx) {
		if (_.isNumber(value)) {
			return ss.unbox(ss.cast(value, ss.Int32));
		}
		var dv = (_.isDate(value) ? ss.cast(value, ss.JsDate) : tab.DateUtil.parsePresModelDate(ss.cast(value, String)));
		var toRet = valIdx;
		if (aggThis === 'none' && aggOther !== 'none') {
			switch (aggOther) {
				case 'year': {
					toRet = tab.DateUtil.dateAsYear(dv);
					break;
				}
				case 'qtr': {
					toRet = tab.DateUtil.dateAsQuarter(dv);
					break;
				}
				case 'month': {
					toRet = tab.DateUtil.dateAsMonth(dv);
					break;
				}
				case 'day': {
					toRet = tab.DateUtil.dateAsDay(dv);
					break;
				}
				case 'hour': {
					toRet = tab.DateUtil.dateTimeAsHour(dv);
					break;
				}
				case 'minute': {
					toRet = tab.DateUtil.dateTimeAsMinute(dv);
					break;
				}
				case 'second': {
					toRet = tab.DateUtil.dateTimeAsSecond(dv);
					break;
				}
				case 'week': {
					toRet = tab.DateUtil.dateAsWeek(dv);
					break;
				}
				case 'weekday': {
					toRet = tab.DateUtil.dateAsDayOfWeek(dv);
					break;
				}
				case 'month-year': {
					toRet = tab.DateUtil.dateAsMonthYear(dv);
					break;
				}
				case 'mdy': {
					toRet = tab.DateUtil.dateAsMonthDayYear(dv);
					break;
				}
			}
			if (ss.isNullOrUndefined(toRet)) {
			}
		}
		return toRet;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.BrushingDataValues
	var $tab_$BrushingDataValues = function(fieldCaptions) {
		this.$fieldCaptions = null;
		this.$values = new Map();
		this.$colValTupleSets = [];
		this.$areValuesMissing = false;
		this.$fieldCaptions = fieldCaptions;
	};
	$tab_$BrushingDataValues.__typeName = 'tab.$BrushingDataValues';
	$tab_$BrushingDataValues.$createSortedColValPairs = function BrushingDataValues$CreateSortedColValPairs(colIndexes, valueIndexes) {
		var colValTuples = new Array(colIndexes.length);
		for (var ii = 0; ii < colIndexes.length; ++ii) {
			colValTuples[ii] = { item1: colIndexes[ii], item2: valueIndexes[ii] };
		}
		colValTuples.sort(function(tuple1, tuple2) {
			return tuple1.item1 - tuple2.item1;
		});
		return colValTuples;
	};
	$tab_$BrushingDataValues.$sortValsByColumnIndexes = function BrushingDataValues$SortValsByColumnIndexes(colIndexes, valIndexes) {
		var toRet;
		if (valIndexes.length === 1 || ss.isNullOrUndefined(colIndexes)) {
			toRet = valIndexes;
		}
		else {
			ss.Debug.assert(valIndexes.length === colIndexes.length, 'there must be the same number of columns and values');
			toRet = _.sortBy(ss.cast(valIndexes, Array), function(val, index) {
				return colIndexes[index];
			});
		}
		return toRet;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CacheRecord
	var $tab_$CacheRecord$2 = function(TKey, TValue) {
		var $type = function(key, value) {
			this.$key = ss.getDefaultValue(TKey);
			this.$value = ss.getDefaultValue(TValue);
			ss.Debug.assert(ss.isValue(key), 'Key is empty');
			ss.Debug.assert(ss.isValue(value), 'Value is empty');
			this.$key = key;
			this.$value = value;
		};
		ss.registerGenericClassInstance($type, $tab_$CacheRecord$2, [TKey, TValue], {}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_$CacheRecord$2.__typeName = 'tab.$CacheRecord$2';
	ss.initGenericClass($tab_$CacheRecord$2, $asm, 2);
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CaptionHeuristics
	var $tab_$CaptionHeuristics = function() {
		this.$1$LongestByWordField = 0;
		this.$1$LongestByCharField = 0;
		this.$1$AvgLengthByCharField = 0;
		this.$1$AvgLengthByWordField = 0;
		this.set_$avgLengthByChar(0);
		this.set_$avgLengthByWord(0);
		this.set_$longestByChar(0);
		this.set_$longestByWord(0);
	};
	$tab_$CaptionHeuristics.__typeName = 'tab.$CaptionHeuristics';
	$tab_$CaptionHeuristics.$ctor1 = function(avgLengthByChar, avgLengthByWord, longestByChar, longestByWord) {
		this.$1$LongestByWordField = 0;
		this.$1$LongestByCharField = 0;
		this.$1$AvgLengthByCharField = 0;
		this.$1$AvgLengthByWordField = 0;
		this.set_$avgLengthByChar(avgLengthByChar);
		this.set_$avgLengthByWord(avgLengthByWord);
		this.set_$longestByChar(longestByChar);
		this.set_$longestByWord(longestByWord);
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommandQueue
	var $tab_$ClientCommandQueue = function() {
		this.$commands = null;
		this.$commands = [];
	};
	$tab_$ClientCommandQueue.__typeName = 'tab.$ClientCommandQueue';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandThrottler
	var $tab_$CommandThrottler = function(handler, targets, rate, pendingCommandThreshold, pendingCommandDelay) {
		this.$commandHandler = null;
		this.$commandsToThrottle = null;
		this.$throttleRate = 0;
		this.$pendingCommandDelay = 0;
		this.$pendingCommandThreshold = 0;
		this.$queuedCommand = null;
		this.$queuedSuccessCallback = null;
		this.$queuedFailureCallback = null;
		this.$lastCommandTime = 0;
		this.$throttleTimer = null;
		this.$pendingCommandCount = 0;
		this.$currentlyExecuting = false;
		this.$1$CommandDroppedField = null;
		this.$commandHandler = handler;
		this.$commandsToThrottle = targets;
		this.$throttleRate = rate;
		var $t1 = pendingCommandThreshold;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = $tab_$CommandThrottler.$defaultPendingCommandThreshold;
		}
		this.$pendingCommandThreshold = $t1;
		var $t2 = pendingCommandDelay;
		if (ss.isNullOrUndefined($t2)) {
			$t2 = $tab_$CommandThrottler.$defaultPendingCommandDelay;
		}
		this.$pendingCommandDelay = $t2;
	};
	$tab_$CommandThrottler.__typeName = 'tab.$CommandThrottler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandThrottlerResponse
	var $tab_$CommandThrottlerResponse = function() {
	};
	$tab_$CommandThrottlerResponse.__typeName = 'tab.$CommandThrottlerResponse';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.DateTimePartIndexes
	var $tab_$DateTimePartIndexes = function(srcIdx, destIdx, srcA, destA) {
		this.$srcColumnIndex = 0;
		this.$destColumnIndex = 0;
		this.$srcAgg = null;
		this.$destAgg = null;
		this.$srcColumnIndex = srcIdx;
		this.$destColumnIndex = destIdx;
		this.$srcAgg = srcA || 'none';
		this.$destAgg = destA || 'none';
	};
	$tab_$DateTimePartIndexes.__typeName = 'tab.$DateTimePartIndexes';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.DefaultSessionErrorHandler.DataConnectionErrorCodeEnum
	var $tab_$DefaultSessionErrorHandler$DataConnectionErrorCodeEnum = function() {
	};
	$tab_$DefaultSessionErrorHandler$DataConnectionErrorCodeEnum.__typeName = 'tab.$DefaultSessionErrorHandler$DataConnectionErrorCodeEnum';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.DefaultSessionErrorHandler.DataSourceExceptionTypeEnum
	var $tab_$DefaultSessionErrorHandler$DataSourceExceptionTypeEnum = function() {
	};
	$tab_$DefaultSessionErrorHandler$DataSourceExceptionTypeEnum.__typeName = 'tab.$DefaultSessionErrorHandler$DataSourceExceptionTypeEnum';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DoubleLinkedList
	var $tab_$DoubleLinkedList$1 = function(TValue) {
		var $type = function() {
			this.$head = null;
			this.$tail = null;
		};
		ss.registerGenericClassInstance($type, $tab_$DoubleLinkedList$1, [TValue], {
			$addToFront: function DoubleLinkedList$AddToFront(node) {
				ss.Debug.assert(ss.isValue(node), 'Attempt to add empty node');
				var staleHead = this.$head;
				this.$head = node;
				node.$next = staleHead;
				node.$previous = null;
				if (ss.isValue(staleHead)) {
					staleHead.$previous = node;
				}
				if (ss.isNullOrUndefined(this.$tail)) {
					this.$tail = node;
				}
			},
			$delete: function DoubleLinkedList$Delete(node) {
				ss.Debug.assert(ss.isValue(node), 'Attempt to remove empty node');
				if (ss.referenceEquals(this.$head, node)) {
					this.$head = node.$next;
				}
				if (ss.referenceEquals(this.$tail, node)) {
					this.$tail = node.$previous;
				}
				if (ss.isValue(node.$previous)) {
					node.$previous.$next = node.$next;
				}
				if (ss.isValue(node.$next)) {
					node.$next.$previous = node.$previous;
				}
			}
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_$DoubleLinkedList$1.__typeName = 'tab.$DoubleLinkedList$1';
	ss.initGenericClass($tab_$DoubleLinkedList$1, $asm, 1);
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.E2eAutomationTestHooks
	var $tab_$E2eAutomationTestHooks = function(worldCheckpointHolder, serverResponseQueueSizeGetter, waitingOnCommandsGetter) {
		this.$worldCheckpointHolder = null;
		this.$serverResponseQueueSizeGetter = null;
		this.$waitingOnCommandsGetter = null;
		ss.Debug.assert(ss.isValue(worldCheckpointHolder), 'Checkpoint holder is null');
		ss.Debug.assert(ss.isValue(serverResponseQueueSizeGetter), 'serverResponseQueueSizeGetter holder is null');
		ss.Debug.assert(ss.isValue(waitingOnCommandsGetter), 'waitingOnCommandsGetter holder is null');
		this.$worldCheckpointHolder = worldCheckpointHolder;
		this.$serverResponseQueueSizeGetter = serverResponseQueueSizeGetter;
		this.$waitingOnCommandsGetter = waitingOnCommandsGetter;
	};
	$tab_$E2eAutomationTestHooks.__typeName = 'tab.$E2eAutomationTestHooks';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FetchParamsBuilder
	var $tab_$FetchParamsBuilder = function() {
		this.$page = null;
		this.$order = null;
		this.$filter = null;
		this.$params = null;
		this.$page = { startIndex: 0 };
		this.$order = [{ field: 'name', ascending: true }];
	};
	$tab_$FetchParamsBuilder.__typeName = 'tab.$FetchParamsBuilder';
	$tab_$FetchParamsBuilder.$ctor2 = function(order, filter) {
		this.$page = null;
		this.$order = null;
		this.$filter = null;
		this.$params = null;
		this.$page = { startIndex: 0 };
		this.$order = [order];
		this.$filter = filter;
	};
	$tab_$FetchParamsBuilder.$ctor1 = function(order, filter) {
		this.$page = null;
		this.$order = null;
		this.$filter = null;
		this.$params = null;
		this.$page = { startIndex: 0 };
		this.$order = (!tab.MiscUtil.isNullOrEmpty(order) ? order : [{ field: 'name', ascending: true }]);
		this.$filter = filter;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetUberTipClientCommand
	var $tab_$GetUberTipClientCommand = function(doLocal, cmd, successCallback, errorCallback) {
		$tab_ClientCommand.call(this, 'none', doLocal, cmd, successCallback, errorCallback);
	};
	$tab_$GetUberTipClientCommand.__typeName = 'tab.$GetUberTipClientCommand';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.KeyboardShortcutTelemetryLogger
	var $tab_$KeyboardShortcutTelemetryLogger = function() {
	};
	$tab_$KeyboardShortcutTelemetryLogger.__typeName = 'tab.$KeyboardShortcutTelemetryLogger';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacySessionWaitHandler
	var $tab_$LegacySessionWaitHandler = function(legacySession) {
		this.$legacySession = null;
		this.$1$IncrementCountField = 0;
		this.$legacySession = legacySession;
	};
	$tab_$LegacySessionWaitHandler.__typeName = 'tab.$LegacySessionWaitHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LinkedListNode
	var $tab_$LinkedListNode$1 = function(TValue) {
		var $type = function(data) {
			this.$data = ss.getDefaultValue(TValue);
			this.$next = null;
			this.$previous = null;
			ss.Debug.assert(ss.isValue(data), 'Data must not be empty.');
			this.$data = data;
		};
		ss.registerGenericClassInstance($type, $tab_$LinkedListNode$1, [TValue], {}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_$LinkedListNode$1.__typeName = 'tab.$LinkedListNode$1';
	ss.initGenericClass($tab_$LinkedListNode$1, $asm, 1);
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LocalClientCommand
	var $tab_$LocalClientCommand = function(doLocal) {
		$tab_ClientCommand.call(this, 'none', doLocal, null, null, null);
	};
	$tab_$LocalClientCommand.__typeName = 'tab.$LocalClientCommand';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Page
	var $tab_$Page = function() {
	};
	$tab_$Page.__typeName = 'tab.$Page';
	$tab_$Page.isInstanceOfType = function() {
		return true;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresetSizesContainerModel
	var $tab_$PresetSizesContainerModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sizeItemList'.toString(), null));
	};
	$tab_$PresetSizesContainerModel.__typeName = 'tab.$PresetSizesContainerModel';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReferenceLineElement.Fill
	var $tab_$ReferenceLineElement$Fill = function(fillAbove, fillBelow, fillColor) {
		this.$fillColor = null;
		this.$1$HasFillAboveField = false;
		this.$1$HasFillBelowField = false;
		this.set_$hasFillAbove(fillAbove);
		this.set_$hasFillBelow(fillBelow);
		this.$fillColor = new Array(fillColor.length);
		for (var i = 0; i < fillColor.length; i++) {
			this.$fillColor[i] = $tab_ColorModel.fromArgbInt(fillColor[i]);
		}
	};
	$tab_$ReferenceLineElement$Fill.__typeName = 'tab.$ReferenceLineElement$Fill';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReferenceLineElement.Label
	var $tab_$ReferenceLineElement$Label = function(labelTable, textRunTable, textStyleTable, backgroundColor) {
		this.$labelTable = null;
		this.$textTable = null;
		this.$styleTable = null;
		this.$backgroundColor = null;
		this.$labelTable = labelTable;
		this.$textTable = textRunTable;
		this.$styleTable = textStyleTable;
		this.$backgroundColor = backgroundColor;
	};
	$tab_$ReferenceLineElement$Label.__typeName = 'tab.$ReferenceLineElement$Label';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReferenceLineElement.Line
	var $tab_$ReferenceLineElement$Line = function(isForXAxis, values) {
		this.$linePositions = null;
		this.$isForXAxis = false;
		this.$linePositions = values;
		this.$isForXAxis = isForXAxis;
	};
	$tab_$ReferenceLineElement$Line.__typeName = 'tab.$ReferenceLineElement$Line';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReferenceLinesModel.PerPaneDescriptorRefLineData
	var $tab_$ReferenceLinesModel$PerPaneDescriptorRefLineData = function(refLineProducerOutput) {
		this.$specIdsInput = null;
		this.$zorders = null;
		this.$styleIds = null;
		this.$fillAbove = null;
		this.$fillBelow = null;
		this.$instantRefLineIsEnabled = null;
		this.$specIds = null;
		this.$paneIndexs = null;
		this.$axisOrientations = null;
		this.$calculationScopes = null;
		this.$cellIndex = null;
		this.$xValues = null;
		this.$yValues = null;
		this.$textRuns = null;
		this.$labels = null;
		this.$xTextStyles = null;
		this.$yTextStyles = null;
		this.$xAxisStyles = null;
		this.$yAxisStyles = null;
		this.$xFillColors = null;
		this.$yFillColors = null;
		var details = refLineProducerOutput.Details;
		this.$specIdsInput = details.SpecId;
		this.$zorders = details.ZOrder;
		this.$styleIds = details.StyleId;
		this.$fillAbove = details.FillAbove;
		this.$fillBelow = details.FillBelow;
		this.$instantRefLineIsEnabled = details.EnableInstantRefline;
		var layoutElements = refLineProducerOutput.LayoutElements;
		this.$specIds = layoutElements.SpecId;
		this.$paneIndexs = layoutElements.PaneIndex;
		this.$axisOrientations = layoutElements.AxisOrientation;
		this.$calculationScopes = layoutElements.CalculationScope;
		this.$cellIndex = layoutElements.CellIndex;
		this.$xValues = refLineProducerOutput.XValues;
		this.$yValues = refLineProducerOutput.YValues;
		this.$textRuns = refLineProducerOutput.TextRun;
		this.$labels = refLineProducerOutput.Labels;
		var xStyles = refLineProducerOutput.XStyles || refLineProducerOutput.YStyles;
		this.$xTextStyles = xStyles.TextStyles;
		this.$xAxisStyles = xStyles.AxisStyles;
		var yStyles = refLineProducerOutput.YStyles || refLineProducerOutput.XStyles;
		this.$yTextStyles = yStyles.TextStyles;
		this.$yAxisStyles = yStyles.AxisStyles;
		this.$xFillColors = xStyles.FillColors;
		this.$yFillColors = yStyles.FillColors;
	};
	$tab_$ReferenceLinesModel$PerPaneDescriptorRefLineData.__typeName = 'tab.$ReferenceLinesModel$PerPaneDescriptorRefLineData';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReferenceLinesModel.ReferenceLineElementLookup
	var $tab_$ReferenceLinesModel$ReferenceLineElementLookup = function() {
		this.$pdToRefLines = {};
		this.$pdToRefBands = {};
		this.$refLineIdMap = {};
	};
	$tab_$ReferenceLinesModel$ReferenceLineElementLookup.__typeName = 'tab.$ReferenceLinesModel$ReferenceLineElementLookup';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReferenceLinesModel.ReferenceLineElements
	var $tab_$ReferenceLinesModel$ReferenceLineElements = function(perPDRefLineData, inputIndex, layoutIndex, isXAxis, specId) {
		this.$lineAndLabel = null;
		this.$fill = null;
		var scope = perPDRefLineData.$calculationScopes[layoutIndex];
		var styleId = perPDRefLineData.$styleIds[inputIndex];
		var instantRefLineIsEnabled = perPDRefLineData.$instantRefLineIsEnabled[inputIndex];
		var axisStyles = (isXAxis ? perPDRefLineData.$xAxisStyles : perPDRefLineData.$yAxisStyles);
		var textStyles = (isXAxis ? perPDRefLineData.$xTextStyles : perPDRefLineData.$yTextStyles);
		var fillColor = (isXAxis ? perPDRefLineData.$xFillColors[styleId] : perPDRefLineData.$yFillColors[styleId]);
		var values = (isXAxis ? perPDRefLineData.$xValues : perPDRefLineData.$yValues);
		this.$lineAndLabel = new $tab_ReferenceLineElement.$ctor2(specId, isXAxis, scope, instantRefLineIsEnabled, axisStyles, styleId, perPDRefLineData.$cellIndex, values, perPDRefLineData.$textRuns, textStyles, perPDRefLineData.$labels);
		this.$fill = new $tab_ReferenceLineElement.$ctor1(specId, isXAxis, scope, instantRefLineIsEnabled, perPDRefLineData.$cellIndex, values, fillColor, perPDRefLineData.$fillAbove[inputIndex], perPDRefLineData.$fillBelow[inputIndex]);
		if (!this.$fill.get_hasFill()) {
			this.$fill = null;
		}
	};
	$tab_$ReferenceLinesModel$ReferenceLineElements.__typeName = 'tab.$ReferenceLinesModel$ReferenceLineElements';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SaveServerCommands.DataConnectionErrorCodeEnum
	var $tab_$SaveServerCommands$DataConnectionErrorCodeEnum = function() {
	};
	$tab_$SaveServerCommands$DataConnectionErrorCodeEnum.__typeName = 'tab.$SaveServerCommands$DataConnectionErrorCodeEnum';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetHeuristics
	var $tab_$SheetHeuristics = function(uniqueSheets, uniqueDashboards) {
		this.$1$UniqueDashboardsField = 0;
		this.$1$UniqueSheetsField = 0;
		this.set_$uniqueSheets(uniqueSheets);
		this.set_$uniqueDashboards(uniqueDashboards);
	};
	$tab_$SheetHeuristics.__typeName = 'tab.$SheetHeuristics';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetListItemArrayModel
	var $tab_$SheetListItemArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sheetListItems'.toString(), 1));
	};
	$tab_$SheetListItemArrayModel.__typeName = 'tab.$SheetListItemArrayModel';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SizeItemListModel
	var $tab_$SizeItemListModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sizeItems'.toString(), 1));
	};
	$tab_$SizeItemListModel.__typeName = 'tab.$SizeItemListModel';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SourceSheetWithHighlightAction
	var $tab_$SourceSheetWithHighlightAction = function() {
	};
	$tab_$SourceSheetWithHighlightAction.__typeName = 'tab.$SourceSheetWithHighlightAction';
	$tab_$SourceSheetWithHighlightAction.$getTargetSheetsToBrush = function SourceSheetWithHighlightAction$GetTargetSheetsToBrush(sheetName, actions, vizData) {
		var sheetsToBrush = new Set();
		for (var $t1 = 0; $t1 < actions.length; $t1++) {
			var action = actions[$t1];
			if (ss.contains(action.sourceWorksheets, sheetName) && $tab_$SourceSheetWithHighlightAction.$shouldBrushAllTargetSheets(action, vizData)) {
				tab.SetUtilities.addAll(Object).call(null, sheetsToBrush, action.targetWorksheets);
			}
		}
		return sheetsToBrush;
	};
	$tab_$SourceSheetWithHighlightAction.$shouldBrushAllTargetSheets = function SourceSheetWithHighlightAction$ShouldBrushAllTargetSheets(action, vizData) {
		var highlightCmd = $tab_CommandSerializer.deserialize($tab_SimpleCommandsPresModelWrapper.create(action.simpleCommandModel).get_simpleCommand(), true);
		if (ss.isNullOrUndefined(vizData) || $tab_BrushingComputer.isSpecialDateTimeHighlighting(highlightCmd)) {
			return true;
		}
		var commandFieldCaptions = $tab_BrushingComputer.getHighlightFieldCaptions(highlightCmd, vizData.get_highlightCaptions(), vizData.get_fieldCaptions());
		return !tab.MiscUtil.isNullOrEmpty$2(commandFieldCaptions);
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryCacheRecord
	var $tab_$StoryCacheRecord = function(story) {
		this.$storyPoint = null;
		this.$savedZonePresModels = null;
		this.$storyPoint = story;
		if (ss.isNullOrUndefined(this.$storyPoint.dashboardPresModel)) {
			return;
		}
		var zones = {};
		var sourceZones = this.$storyPoint.dashboardPresModel.zones;
		var keys = _.keys(this.$storyPoint.dashboardPresModel.zones);
		for (var i = 0, len = keys.length; i < len; i++) {
			var key = keys[i];
			var zone = sourceZones[key];
			if (ss.isNullOrUndefined(zone) || ss.isValue($tab_ZoneModel.getContent(zone, 'imageZone'))) {
				zones[key] = null;
			}
			else {
				zones[key] = zone.presModelHolder;
			}
		}
		this.$savedZonePresModels = zones;
	};
	$tab_$StoryCacheRecord.__typeName = 'tab.$StoryCacheRecord';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TransactionItem
	var $tab_$TransactionItem = function(path, presModel) {
		this.$itemPath = null;
		this.$itemModel = null;
		this.$itemPath = path;
		this.$itemModel = presModel;
	};
	$tab_$TransactionItem.__typeName = 'tab.$TransactionItem';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualColumnIterator.ConstVisualColumnIterator
	var $tab_$VisualColumnIterator$ConstVisualColumnIterator = function(column) {
		$tab_VisualColumnIterator.call(this, column);
		this.c = true;
		ss.Debug.assert(this.isValid, 'ConstantColumnIterator should have valid column');
	};
	$tab_$VisualColumnIterator$ConstVisualColumnIterator.__typeName = 'tab.$VisualColumnIterator$ConstVisualColumnIterator';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizPortalGetItemsUtil
	var $tab_$VizPortalGetItemsUtil = function() {
	};
	$tab_$VizPortalGetItemsUtil.__typeName = 'tab.$VizPortalGetItemsUtil';
	$tab_$VizPortalGetItemsUtil.$fetchPage = function(T) {
		return function VizPortalGetItemsUtil$FetchPage(methodName, paramsBuilder, parsePageOfItems) {
			var deferred = $.Deferred();
			var options = $tab_VizPortalServer.createRequest(methodName, paramsBuilder.get_$params(), function() {
			}, function() {
			});
			options.success = function(data, status, request) {
				$tab_SessionHeartbeat.onVizportalPinged();
				var result = $tab_VizPortalServer.$getResult(data);
				if ($tab_VizPortalServer.$hasErrors(result)) {
					tab.Logger.getLogger($tab_WorkgroupServerCommands, null).warn('Fetch failed: %s', [result]);
					deferred.reject();
					return;
				}
				var pageOfItems = parsePageOfItems(result);
				deferred.resolve(pageOfItems);
			};
			$tab_XhrUtil.helper(options, null);
			return deferred.promise();
		};
	};
	$tab_$VizPortalGetItemsUtil.$resolvePageOfItems = function(T) {
		return function VizPortalGetItemsUtil$ResolvePageOfItems(result, parsePageResult) {
			var items = parsePageResult(result);
			var hasMoreItems = result['moreItems'].toString().toLowerCase() === 'true';
			return { items: items, moreItems: hasMoreItems };
		};
	};
	$tab_$VizPortalGetItemsUtil.$fetchItems = function(T) {
		return function VizPortalGetItemsUtil$FetchItems(methodName, paramsBuilder, parsePageOfItems, onComplete) {
			var d = $tab_$VizPortalGetItemsUtil.$fetchPage(T).call(null, methodName, paramsBuilder, parsePageOfItems);
			d.done(function(pageOfItems) {
				if (!pageOfItems.moreItems) {
					onComplete();
					return;
				}
				paramsBuilder.set_$index(paramsBuilder.get_$index() + pageOfItems.items.length);
				$tab_$VizPortalGetItemsUtil.$fetchItems(T).call(null, methodName, paramsBuilder, parsePageOfItems, onComplete);
			});
			d.fail(onComplete);
		};
	};
	$tab_$VizPortalGetItemsUtil.$fetchItems$1 = function(T) {
		return function VizPortalGetItemsUtil$FetchItems(methodName, paramsBuilder, parsePageOfItems, onComplete, onError) {
			var d = $tab_$VizPortalGetItemsUtil.$fetchPage(T).call(null, methodName, paramsBuilder, parsePageOfItems);
			d.done(function(pageOfItems) {
				if (!pageOfItems.moreItems) {
					onComplete();
					return;
				}
				paramsBuilder.set_$index(paramsBuilder.get_$index() + pageOfItems.items.length);
				$tab_$VizPortalGetItemsUtil.$fetchItems$1(T).call(null, methodName, paramsBuilder, parsePageOfItems, onComplete, onError);
			});
			d.fail(onError);
		};
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZonePriority
	var $tab_$ZonePriority = function() {
	};
	$tab_$ZonePriority.__typeName = 'tab.$ZonePriority';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.AcceleratingRangeTransform
	var $tab_AcceleratingRangeTransform = function(min, max, inflectionFrac1, inflectionVal1, inflectionFrac2, inflectionVal2) {
		this.$min = 0;
		this.$inflectionFrac1 = 0;
		this.$inflectionVal1 = 0;
		this.$inflectionFrac2 = 0;
		this.$inflectionVal2 = 0;
		this.$a = 0;
		this.$b = 0;
		this.$c = 0;
		$tab_RangeTransform.call(this);
		if (ss.isNullOrUndefined(inflectionFrac2) && ss.isValue(inflectionVal2)) {
			inflectionFrac2 = inflectionFrac1;
			inflectionVal2 = inflectionVal1;
		}
		ss.Debug.assert(inflectionFrac1 > 0 && inflectionFrac1 <= inflectionFrac2 && inflectionFrac1 < 1, 'Inflections must be provided in order');
		ss.Debug.assert(min < inflectionVal1 && inflectionVal1 <= inflectionVal2 && inflectionVal1 < max, 'Inflections must be provided in order');
		this.$min = min;
		this.$inflectionFrac1 = inflectionFrac1;
		this.$inflectionVal1 = inflectionVal1;
		this.$inflectionFrac2 = inflectionFrac2;
		this.$inflectionVal2 = inflectionVal2;
		var m = max;
		var p = inflectionFrac2;
		var t = inflectionVal2;
		var s = inflectionVal2 / inflectionFrac2;
		this.$a = (t - s * p - m + s) / (-(p * p) + 2 * p - 1);
		this.$b = s - 2 * this.$a * p;
		this.$c = m - s + this.$a * (2 * p - 1);
		ss.Debug.assert(this.$a !== 0, 'The resulting equation is not quadratic');
	};
	$tab_AcceleratingRangeTransform.__typeName = 'tab.AcceleratingRangeTransform';
	global.tab.AcceleratingRangeTransform = $tab_AcceleratingRangeTransform;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AckbarEventsHelper
	var $tab_AckbarEventsHelper = function() {
		this.$1$DoLaunchAuthoringField = null;
		this.$1$NewLayoutIdField = null;
		this.$1$WorkbookModifiedChangedField = null;
		this.$1$OrientationChangeField = null;
	};
	$tab_AckbarEventsHelper.__typeName = 'tab.AckbarEventsHelper';
	$tab_AckbarEventsHelper.get = function AckbarEventsHelper$Get() {
		if (ss.isNullOrUndefined($tab_AckbarEventsHelper.instance)) {
			$tab_AckbarEventsHelper.instance = new $tab_AckbarEventsHelper();
		}
		return $tab_AckbarEventsHelper.instance;
	};
	global.tab.AckbarEventsHelper = $tab_AckbarEventsHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ActionType
	var $tab_ActionType = function() {
	};
	$tab_ActionType.__typeName = 'tab.ActionType';
	global.tab.ActionType = $tab_ActionType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ActionUtils
	var $tab_ActionUtils = function() {
	};
	$tab_ActionUtils.__typeName = 'tab.ActionUtils';
	$tab_ActionUtils.get_$log = function ActionUtils$get_Log() {
		return tab.Logger.lazyGetLogger($tab_ActionUtils);
	};
	$tab_ActionUtils.get_previousInteractedTupleInfo = function ActionUtils$get_PreviousInteractedTupleInfo() {
		return $tab_ActionUtils.$previousInteractedTupleInfo;
	};
	$tab_ActionUtils.set_previousInteractedTupleInfo = function ActionUtils$set_PreviousInteractedTupleInfo(value) {
		$tab_ActionUtils.$previousInteractedTupleInfo = value;
	};
	$tab_ActionUtils.isWorksheetSourceOfAction = function ActionUtils$IsWorksheetSourceOfAction(action, sheet) {
		return _.any(action.sourceWorksheets, function(worksheet) {
			return ss.referenceEquals(worksheet, sheet);
		});
	};
	$tab_ActionUtils.isActionTargetSheetOnCurrentDashboard = function ActionUtils$IsActionTargetSheetOnCurrentDashboard(action) {
		var vizPair = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		for (var $t1 = 0; $t1 < action.targetWorksheets.length; $t1++) {
			var targetName = action.targetWorksheets[$t1];
			if (ss.keyExists(vizPair, targetName)) {
				return true;
			}
		}
		return false;
	};
	$tab_ActionUtils.$isCorrectAction = function ActionUtils$IsCorrectAction(action, commandId) {
		if (ss.isNullOrUndefined(action)) {
			return false;
		}
		if (ss.isNullOrUndefined(action.simpleCommandModel)) {
			$tab_ActionUtils.get_$log().warn('Invalid ActionPresModel without a command. ActionPresModel info: %o. Serialized command: %s', [action, $tab_CommandUtils.serialize(commandId)]);
			return false;
		}
		return ss.startsWithString($tab_SimpleCommandsPresModelWrapper.create(action.simpleCommandModel).get_simpleCommand().toString(), $tab_CommandUtils.serialize(commandId));
	};
	$tab_ActionUtils.isFilterAction = function ActionUtils$IsFilterAction(action) {
		return $tab_ActionUtils.$isCorrectAction(action, { ns: 'tabdoc', cmd: 'filter-targets' });
	};
	$tab_ActionUtils.isHighlightAction = function ActionUtils$IsHighlightAction(action) {
		return $tab_ActionUtils.$isCorrectAction(action, { ns: 'tabdoc', cmd: 'highlight' });
	};
	$tab_ActionUtils.isGroupAction = function ActionUtils$IsGroupAction(action) {
		return $tab_ActionUtils.$isCorrectAction(action, { ns: 'tabdoc', cmd: 'modify-marks-in-set-v2' }) && action.sourceWorksheets.length > 0;
	};
	$tab_ActionUtils.isNavigationAction = function ActionUtils$IsNavigationAction(action) {
		return $tab_ActionUtils.$isCorrectAction(action, { ns: 'tabdoc', cmd: 'navigate-to-sheet' }) && action.sourceWorksheets.length > 0 && action.targetWorksheets.length > 0;
	};
	$tab_ActionUtils.isParameterAction = function ActionUtils$IsParameterAction(action) {
		return $tab_ActionUtils.$isCorrectAction(action, { ns: 'tabdoc', cmd: 'set-parameter-value-from-mark' }) && action.sourceWorksheets.length > 0;
	};
	$tab_ActionUtils.$canActionModifyFieldValue = function ActionUtils$CanActionModifyFieldValue(action) {
		return $tab_ActionUtils.isParameterAction(action) || $tab_ActionUtils.isGroupAction(action);
	};
	$tab_ActionUtils.isWorksheetSourceOfASelectTriggeredFilterAction = function ActionUtils$IsWorksheetSourceOfASelectTriggeredFilterAction(dashboardModel, sheet) {
		var dashboardPM = dashboardModel.pm;
		var actions = dashboardPM.userActions;
		for (var $t1 = 0; $t1 < actions.length; $t1++) {
			var action = actions[$t1];
			if (!$tab_ActionUtils.isWorksheetSourceOfAction(action, sheet) || action.activation !== 'on-select' || ss.isNullOrUndefined(action.simpleCommandModel) || !ss.referenceEquals($tab_ActionUtils.$parseCommandFromActionPresModel(action).commandName, { ns: 'tabdoc', cmd: 'filter-targets' }.cmd) || action.targetWorksheets.length === 0) {
				continue;
			}
			return true;
		}
		return false;
	};
	$tab_ActionUtils.$filterActionsByType = function ActionUtils$FilterActionsByType(type) {
		return function(model) {
			return $tab_ActionUtils.getActionType(model) === type;
		};
	};
	$tab_ActionUtils.$filterActionsWithValidData = function ActionUtils$FilterActionsWithValidData() {
		return function(model) {
			return $tab_ActionUtils.getActionType(model) === 'url' || ss.isValue(model.targetUrl) || model.targetWorksheets.length > 0 || $tab_ActionUtils.$canActionModifyFieldValue(model) || $tab_ActionUtils.isNavigationAction(model);
		};
	};
	$tab_ActionUtils.getApplicableActions = function ActionUtils$GetApplicableActions(sourceWorksheet, activationMethod, actionType) {
		var actions = $tab_ApplicationModel.get_instance().get_workbook().findContentDashboard().get_actionPresModels();
		var relatedActions = $tab_ActionUtils.$getRelatedActions(actions, sourceWorksheet, activationMethod);
		if (ss.isValue(actionType)) {
			relatedActions = _.filter(relatedActions, $tab_ActionUtils.$filterActionsByType(ss.unbox(actionType)));
		}
		relatedActions = _.filter(relatedActions, $tab_ActionUtils.$filterActionsWithValidData());
		return relatedActions;
	};
	$tab_ActionUtils.computeCommandBlockingOptionForLocallyRenderedSelection = function ActionUtils$ComputeCommandBlockingOptionForLocallyRenderedSelection(visualId) {
		return (($tab_ActionUtils.shouldBlockVizInteractionWhenExecutingActionOnSelection(visualId.worksheet) || $tab_ActionUtils.willActionCauseTabChange(visualId.worksheet, 'on-select')) ? 'afterDelay' : 'none');
	};
	$tab_ActionUtils.doesWorksheetContainHoverActionsThatInvalidateVisualPresModelAndRunRemotely = function ActionUtils$DoesWorksheetContainHoverActionsThatInvalidateVisualPresModelAndRunRemotely(sourceSheet) {
		return $tab_ActionUtils.getApplicableActions(sourceSheet, 'on-hover', 'group').length > 0 || $tab_ActionUtils.getApplicableActions(sourceSheet, 'on-hover', 'filter').length > 0 || $tab_ActionUtils.getApplicableActions(sourceSheet, 'on-hover', 'parameter').length > 0;
	};
	$tab_ActionUtils.computePossibleLocalWorkForRemoteHoverActions = function ActionUtils$ComputePossibleLocalWorkForRemoteHoverActions(visualId, interactedTupleIds, executeUrlActions) {
		var localWork = null;
		if (ss.isNullOrUndefined(interactedTupleIds)) {
			interactedTupleIds = [];
		}
		if (executeUrlActions || $tab_ActionUtils.doesWorksheetContainHoverActionsThatInvalidateVisualPresModelAndRunRemotely(visualId.worksheet)) {
			localWork = function(t) {
				$tab_ActionUtils.executeActions(visualId, 'on-hover', interactedTupleIds, t, false);
			};
		}
		return localWork;
	};
	$tab_ActionUtils.ubertipActionNeedsToWaitForServerPresModel = function ActionUtils$UbertipActionNeedsToWaitForServerPresModel(actionPM) {
		return $tab_ActionUtils.isFilterAction(actionPM) || $tab_ActionUtils.isHighlightAction(actionPM) && !$tab_ActionUtils.isActionTargetSheetOnCurrentDashboard(actionPM) || $tab_ActionUtils.isNavigationAction(actionPM) || $tab_ActionUtils.$canActionModifyFieldValue(actionPM);
	};
	$tab_ActionUtils.canSelectTriggeredFilterActionsModifyTheirSourceSheet = function ActionUtils$CanSelectTriggeredFilterActionsModifyTheirSourceSheet(worksheetName) {
		var sheetSelectFilterActions = $tab_ActionUtils.getApplicableActions(worksheetName, 'on-select', 'filter');
		return $tab_ActionUtils.$verifyThatRemoteOnSelectActionsCanBeApplied(sheetSelectFilterActions) && $tab_ActionUtils.$doFilterActionsTargetSpecifiedWorksheet(sheetSelectFilterActions, worksheetName);
	};
	$tab_ActionUtils.canSelectTriggeredParameterActionsModifyTheirSourceSheet = function ActionUtils$CanSelectTriggeredParameterActionsModifyTheirSourceSheet(worksheetName) {
		return $tab_ActionUtils.$verifyThatRemoteOnSelectActionsCanBeApplied($tab_ActionUtils.getApplicableActions(worksheetName, 'on-select', 'parameter'));
	};
	$tab_ActionUtils.canSelectTriggeredGroupActionsModifyTheirSourceSheet = function ActionUtils$CanSelectTriggeredGroupActionsModifyTheirSourceSheet(worksheetName) {
		return $tab_ActionUtils.$verifyThatRemoteOnSelectActionsCanBeApplied($tab_ActionUtils.getApplicableActions(worksheetName, 'on-select', 'group'));
	};
	$tab_ActionUtils.canRemoteSelectTriggeredActionsModifyTheirSourceSheet = function ActionUtils$CanRemoteSelectTriggeredActionsModifyTheirSourceSheet(worksheetName) {
		return $tab_ActionUtils.canSelectTriggeredFilterActionsModifyTheirSourceSheet(worksheetName) || $tab_ActionUtils.canSelectTriggeredGroupActionsModifyTheirSourceSheet(worksheetName) || $tab_ActionUtils.canSelectTriggeredParameterActionsModifyTheirSourceSheet(worksheetName);
	};
	$tab_ActionUtils.doesWorksheetHaveHoverOrMenuActions = function ActionUtils$DoesWorksheetHaveHoverOrMenuActions(worksheetName) {
		return $tab_ActionUtils.getApplicableActions(worksheetName, 'on-hover', null).length > 0 || $tab_ActionUtils.getApplicableActions(worksheetName, 'explicitly', null).length > 0;
	};
	$tab_ActionUtils.shouldBlockVizInteractionWhenExecutingActionOnSelection = function ActionUtils$ShouldBlockVizInteractionWhenExecutingActionOnSelection(worksheetName) {
		var sheetSelectActions = $tab_ActionUtils.getApplicableActions(worksheetName, 'on-select', 'filter').concat(Array.prototype.slice.call($tab_ActionUtils.getApplicableActions(worksheetName, 'on-select', 'group'))).concat(Array.prototype.slice.call($tab_ActionUtils.getApplicableActions(worksheetName, 'on-select', 'parameter')));
		return $tab_ActionUtils.$verifyThatRemoteOnSelectActionsCanBeApplied(sheetSelectActions);
	};
	$tab_ActionUtils.$verifyThatRemoteOnSelectActionsCanBeApplied = function ActionUtils$VerifyThatRemoteOnSelectActionsCanBeApplied(onSelectActions) {
		return onSelectActions.length > 0 && !$tab_ApplicationModel.get_instance().get_isOffline();
	};
	$tab_ActionUtils.$doFilterActionsTargetSpecifiedWorksheet = function ActionUtils$DoFilterActionsTargetSpecifiedWorksheet(filterActions, targetWorksheet) {
		for (var $t1 = 0; $t1 < filterActions.length; $t1++) {
			var cur = filterActions[$t1];
			for (var $t2 = 0; $t2 < cur.targetWorksheets.length; $t2++) {
				var curTarget = cur.targetWorksheets[$t2];
				if (ss.referenceEquals(curTarget, targetWorksheet)) {
					return true;
				}
			}
		}
		return false;
	};
	$tab_ActionUtils.executeActions = function ActionUtils$ExecuteActions(visualID, activationMethod, tupleIds, t, forceHighlight) {
		var visualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), visualID.worksheet);
		$tab_ActionUtils.$executeLocalActions(visualID, visualModel, activationMethod, tupleIds, t, forceHighlight);
		$tab_ActionUtils.$executeActionsThatInvalidateVisualPresModelAndRunRemotely(visualID, visualModel, activationMethod, tupleIds, t);
	};
	$tab_ActionUtils.executeAction = function ActionUtils$ExecuteAction(actionPresModel, tupleIds, visualModel, t) {
		if (!ss.isValue(actionPresModel)) {
			return;
		}
		var relevantActions = [actionPresModel];
		if (!ss.isNullOrUndefined(actionPresModel.linkSpec)) {
			$tab_ActionUtils.$executeUrlActions(relevantActions, tupleIds, visualModel);
		}
		else {
			$tab_ActionUtils.$executeHighlightActions(relevantActions, tupleIds, visualModel, t);
		}
	};
	$tab_ActionUtils.getActionType = function ActionUtils$GetActionType(model) {
		if (ss.isValue(model.simpleCommandModel)) {
			var c = $tab_ActionUtils.$parseCommandFromActionPresModel(model);
			if (ss.referenceEquals(c.commandName, { ns: 'tabdoc', cmd: 'highlight' }.cmd)) {
				return 'highlight';
			}
			if (ss.referenceEquals(c.commandName, { ns: 'tabdoc', cmd: 'filter-targets' }.cmd)) {
				return 'filter';
			}
			if (ss.referenceEquals(c.commandName, { ns: 'tabdoc', cmd: 'modify-marks-in-set-v2' }.cmd)) {
				return 'group';
			}
			if (ss.referenceEquals(c.commandName, { ns: 'tabdoc', cmd: 'goto-sheet' }.cmd)) {
				return 'navigation';
			}
			if (ss.referenceEquals(c.commandName, { ns: 'tabdoc', cmd: 'set-parameter-value-from-mark' }.cmd)) {
				return 'parameter';
			}
			return null;
		}
		if (ss.isValue(model.linkSpec)) {
			return 'url';
		}
		return null;
	};
	$tab_ActionUtils.willActionCauseTabChange = function ActionUtils$WillActionCauseTabChange(sheetID, activationMethod) {
		if ($tab_ApplicationModel.get_instance().get_isOffline()) {
			return false;
		}
		var actionsThatCouldCauseTabChange = $tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'filter').concat(Array.prototype.slice.call($tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'navigation')));
		for (var $t1 = 0; $t1 < actionsThatCouldCauseTabChange.length; $t1++) {
			var apm = actionsThatCouldCauseTabChange[$t1];
			if (ss.isValue(apm.simpleCommandModel)) {
				var cmd = $tab_ActionUtils.$parseCommandFromActionPresModel(apm);
				var targetSheetName = ss.cast(cmd.commandParams['targetSheet'], String);
				if (ss.isValue(targetSheetName) && !_.isEqual(targetSheetName, tsConfig.current_sheet_name)) {
					return true;
				}
			}
		}
		return false;
	};
	$tab_ActionUtils.getMenuUrlActionsForUbertipModel = function ActionUtils$GetMenuUrlActionsForUbertipModel(visualId) {
		var actionPMs = $tab_ActionUtils.getApplicableActions(visualId.worksheet, 'explicitly', null);
		return _.filter(actionPMs, function(action) {
			if ($tab_ActionUtils.getActionType(action) !== 'url' && !$tab_ActionUtils.$canActionModifyFieldValue(action) && action.targetWorksheets.length === 0) {
				return false;
			}
			return true;
		});
	};
	$tab_ActionUtils.getUrlActionPm = function ActionUtils$GetUrlActionPm(actionPresModel, vizModel, tupleIds) {
		if (ss.isValue(tupleIds) && !ss.isNullOrUndefined(actionPresModel.linkSpec)) {
			var vizData = vizModel.get_vizDataModel();
			var dataDictionary = $tab_ApplicationModel.get_instance().get_dataDictionary();
			var urlTuple = $tab_VizDataUtils.constructUrl(dataDictionary, actionPresModel.linkSpec, vizData, tupleIds, vizModel.get_worksheetName());
			return { item1: $tab_ActionUtils.$createActionPresModelFromUrl(urlTuple, actionPresModel.linkSpec), item2: urlTuple.item2 };
		}
		return { item1: null, item2: 'urlConstructionFail' };
	};
	$tab_ActionUtils.$createActionPresModelFromUrl = function ActionUtils$CreateActionPresModelFromUrl(urlTuple, linkInfo) {
		if (urlTuple.item2 !== 'success') {
			return null;
		}
		var urlActionPm = { url: urlTuple.item1 };
		switch (linkInfo.urlActionTargetType) {
			case 'default-zone-or-browser': {
				var target = $tab_ModelUtils.getFirstAvailableWebZoneName($tab_ApplicationModel.get_instance());
				if (ss.isValue(target)) {
					urlActionPm.target = target;
				}
				break;
			}
			case 'browser': {
				urlActionPm.target = '_blank';
				break;
			}
			case 'specific-zone': {
				urlActionPm.target = 'frame_' + linkInfo.zoneId.toString();
				break;
			}
		}
		return urlActionPm;
	};
	$tab_ActionUtils.$executeHighlightActions = function ActionUtils$ExecuteHighlightActions(relevantActions, tupleIds, visualModel, t) {
		var brushingComputer = $tab_BrushingComputer.computeFromTuples(visualModel, tupleIds, relevantActions);
		$tab_SelectionClientCommands.$updateBrushingFromComputedResults(brushingComputer, t);
	};
	$tab_ActionUtils.$resetAllHighlightingActions = function ActionUtils$ResetAllHighlightingActions(t) {
		$tab_SelectionClientCommands.$clearAllBrushing(t);
	};
	$tab_ActionUtils.$executeUrlActions = function ActionUtils$ExecuteUrlActions(relevantActions, tupleIds, visualModel) {
		if (ss.isValue(tupleIds) && tupleIds.length > 0) {
			var urlActions = [];
			for (var $t1 = 0; $t1 < relevantActions.length; $t1++) {
				var actionPresModel = relevantActions[$t1];
				var urlActionPm = $tab_ActionUtils.getUrlActionPm(actionPresModel, visualModel, tupleIds).item1;
				if (ss.isValue(urlActionPm)) {
					urlActions.push(urlActionPm);
				}
				else {
					$tab_CommandController.fireDeferredUrlActions = true;
					return;
				}
			}
			if (urlActions.length > 0) {
				$tab_CommandController.get().delayLocalUrlActions(urlActions);
			}
		}
	};
	$tab_ActionUtils.isCurrentTupleSameAsPrevious = function ActionUtils$IsCurrentTupleSameAsPrevious(visualID, tupleIds, actionType) {
		var previousInteractionTuple = (ss.keyExists($tab_ActionUtils.get_previousInteractedTupleInfo(), actionType) ? $tab_ActionUtils.get_previousInteractedTupleInfo()[actionType] : { item1: {}, item2: [] });
		var previousVisualID = previousInteractionTuple.item1;
		var previousInteractedTupleIds = previousInteractionTuple.item2;
		if (tupleIds.length === 0 && previousInteractedTupleIds.length === 0 || ss.referenceEquals(visualID, previousVisualID) && tupleIds.length === previousInteractedTupleIds.length && _.every(tupleIds, function(tupleId) {
			return ss.contains(previousInteractedTupleIds, tupleId);
		})) {
			return true;
		}
		return false;
	};
	$tab_ActionUtils.updatePreviousInteractedTupleInfo = function ActionUtils$UpdatePreviousInteractedTupleInfo(visualID, tupleIds, actionType) {
		$tab_ActionUtils.get_previousInteractedTupleInfo()[actionType] = { item1: visualID, item2: tupleIds };
	};
	$tab_ActionUtils.invalidateAllVisualPresModelsForRemoteActions = function ActionUtils$InvalidateAllVisualPresModelsForRemoteActions(visualID, remoteActions, transaction, tupleIds) {
		for (var $t1 = 0; $t1 < remoteActions.length; $t1++) {
			var action = remoteActions[$t1];
			var cmd = $tab_ActionUtils.$parseCommandFromActionPresModel(action);
			var actionType = $tab_ActionUtils.getActionType(action);
			if (ss.isNullOrUndefined(actionType) || (ss.referenceEquals('do-nothing'.toString(), ss.cast(cmd.commandParams['onClear'], String)) || actionType === 'parameter') && tupleIds.length === 0 || $tab_ActionUtils.isCurrentTupleSameAsPrevious(visualID, tupleIds, ss.unbox(actionType))) {
				continue;
			}
			$tab_ActionUtils.updatePreviousInteractedTupleInfo(visualID, tupleIds, ss.unbox(actionType));
			$tab_ModelUtils.invalidateAllVisualPresModels(transaction);
		}
	};
	$tab_ActionUtils.$executeLocalActions = function ActionUtils$ExecuteLocalActions(visualID, visualModel, activationMethod, tupleIds, t, forceHighlight) {
		var sheetID = visualID.worksheet;
		var highlightActions = $tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'highlight');
		var urlActions = $tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'url');
		if (ss.isValue(tupleIds)) {
			if (urlActions.length > 0 && tupleIds.length > 0) {
				$tab_ActionUtils.$executeUrlActions(urlActions, tupleIds, visualModel);
			}
			if (highlightActions.length > 0) {
				if (tupleIds.length > 0) {
					$tab_ActionUtils.$executeHighlightActions(highlightActions, tupleIds, visualModel, t);
				}
				else {
					$tab_ActionUtils.$resetAllHighlightingActions(t);
				}
			}
			else if (ss.isValue(forceHighlight) && forceHighlight) {
				$tab_ActionUtils.$executeHighlightActions(highlightActions, tupleIds, visualModel, t);
			}
		}
	};
	$tab_ActionUtils.$executeActionsThatInvalidateVisualPresModelAndRunRemotely = function ActionUtils$ExecuteActionsThatInvalidateVisualPresModelAndRunRemotely(visualID, visualModel, activationMethod, tupleIds, transaction) {
		var sheetID = visualID.worksheet;
		$tab_ActionUtils.$executeFilterActions(visualID.worksheet, $tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'filter'), tupleIds, transaction, visualModel);
		$tab_ActionUtils.invalidateAllVisualPresModelsForRemoteActions(visualID, $tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'group').concat(Array.prototype.slice.call($tab_ActionUtils.getApplicableActions(sheetID, activationMethod, 'parameter'))), transaction, tupleIds);
	};
	$tab_ActionUtils.$executeFilterActions = function ActionUtils$ExecuteFilterActions(sourceSheetId, relevantActions, tupleIds, transaction, visualModel) {
		if ($tab_ApplicationModel.get_instance().get_isOffline()) {
			return;
		}
		$tab_ActionUtils.get_$log().debug('Processing %s filter actions %o', [relevantActions.length, relevantActions]);
		if (ss.isValue(relevantActions)) {
			var relevantVisualModels = $tab_ActionUtils.$getRelevantVisualModelsForFilterActions(relevantActions);
			if (relevantVisualModels.length > 0) {
				var sourceSheetInfo = $tab_ModelUtils.getSheetInfoPresModel($tab_ApplicationModel.get_instance(), tsConfig.current_sheet_name);
				if (ss.isValue(sourceSheetInfo) && !(sourceSheetInfo.isDashboard && ss.isNullOrUndefined(sourceSheetInfo.namesOfSubsheets))) {
					var includeSourceSheet = !sourceSheetInfo.isDashboard || sourceSheetInfo.namesOfSubsheets.length === 1;
					for (var $t1 = 0; $t1 < relevantVisualModels.length; $t1++) {
						var relevantVisualModel = relevantVisualModels[$t1];
						if (includeSourceSheet || !ss.referenceEquals(relevantVisualModel.get_worksheetName(), sourceSheetId)) {
							$tab_ModelUtils.setVisualValidStateOnPresModel(transaction, relevantVisualModel);
						}
					}
				}
			}
			if (tupleIds.length > 0) {
				var urlActions = [];
				for (var $t2 = 0; $t2 < relevantActions.length; $t2++) {
					var action = relevantActions[$t2];
					if ((tupleIds.length === 1 || !action.singleSelectOnly) && ss.isValue(action.targetUrl)) {
						var urlAction = {};
						var targetURL = action.targetUrl + '&:exclude=' + encodeURIComponent(sourceSheetId);
						var vizData = visualModel.get_vizDataModel();
						var dataDictionary = $tab_ApplicationModel.get_instance().get_dataDictionary();
						urlAction.url = $tab_VizDataUtils.constructUrlForFilterActionFromTargetURL(dataDictionary, targetURL, action.linkSpec, vizData, tupleIds);
						urlActions.push(urlAction);
					}
				}
				if (urlActions.length > 0) {
					$tab_CommandController.get().delayLocalUrlActions(urlActions);
				}
			}
		}
	};
	$tab_ActionUtils.$getRelevantVisualModelsForFilterActions = function ActionUtils$GetRelevantVisualModelsForFilterActions(actionPresModels) {
		var relevantVisualModels = {};
		if (ss.isValue(actionPresModels)) {
			for (var $t1 = 0; $t1 < actionPresModels.length; $t1++) {
				var actionPresModel = actionPresModels[$t1];
				for (var $t2 = 0; $t2 < actionPresModel.targetWorksheets.length; $t2++) {
					var worksheet = actionPresModel.targetWorksheets[$t2];
					var vm = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), worksheet);
					if (ss.isValue(vm)) {
						relevantVisualModels[worksheet] = vm;
					}
				}
			}
		}
		return $tab_ActionUtils.$convertVisualModelDictToList(relevantVisualModels);
	};
	$tab_ActionUtils.$convertVisualModelDictToList = function ActionUtils$ConvertVisualModelDictToList(visualModelsDict) {
		var visualModelList = [];
		var $t1 = new ss.ObjectEnumerator(visualModelsDict);
		try {
			while ($t1.moveNext()) {
				var visualModel = $t1.current();
				visualModelList.push(visualModel.value);
			}
		}
		finally {
			$t1.dispose();
		}
		return visualModelList;
	};
	$tab_ActionUtils.$isAcceptableScheme = function ActionUtils$IsAcceptableScheme(urlToValidate) {
		if (!$tab_ActionUtils.$isCustomWhitelistParsed) {
			$tab_ActionUtils.$isCustomWhitelistParsed = true;
			var schemes = tsConfig.schemeWhitelist.split(',');
			for (var $t1 = 0; $t1 < schemes.length; $t1++) {
				var s = schemes[$t1];
				var sc = s.toLowerCase().trim();
				if (!ss.endsWithString(sc, ':')) {
					sc += ':';
				}
				if (sc.length > 1) {
					$tab_ActionUtils.$schemeWhitelist.push(sc);
				}
			}
		}
		var schemeExtract = new RegExp('(^[A-Za-z][A-Za-z0-9+\\-.]*:)');
		var results = schemeExtract.exec(urlToValidate);
		if (!ss.isValue(results)) {
			return true;
		}
		var scheme = results[0].toLowerCase();
		return ss.contains($tab_ActionUtils.$schemeWhitelist, scheme);
	};
	$tab_ActionUtils.$getRelatedActions = function ActionUtils$GetRelatedActions(actions, sourceWorksheet, activationMethod) {
		var relatedActions = _.filter(actions, function(action) {
			var sourceWorksheetMatch = ss.contains(action.sourceWorksheets, sourceWorksheet);
			var activationMethodMatch = !ss.isValue(activationMethod) || ss.unbox(activationMethod) === action.activation;
			return sourceWorksheetMatch && activationMethodMatch;
		});
		return relatedActions;
	};
	$tab_ActionUtils.$getNewWindowTargetFrame = function ActionUtils$GetNewWindowTargetFrame(uniqueId) {
		var target = '_' + tsConfig.layoutid.toString().replace(new RegExp('[^\\w]', 'g'), '');
		if (uniqueId > 0) {
			target += '_' + uniqueId.toString();
		}
		return { item1: target, item2: false };
	};
	$tab_ActionUtils.$getTargetFrameForUrlTarget = function ActionUtils$GetTargetFrameForUrlTarget(urlTarget, uniqueId) {
		if (urlTarget === '_blank') {
			return $tab_ActionUtils.$getNewWindowTargetFrame(uniqueId);
		}
		else if ($($tab_ActionUtils.$getSelectorStringForUrlActionTarget(urlTarget)).length > 0) {
			return { item1: urlTarget, item2: true };
		}
		else {
			return $tab_ActionUtils.$getNewWindowTargetFrame(uniqueId);
		}
	};
	$tab_ActionUtils.$getTargetFrame = function ActionUtils$GetTargetFrame(url, uniqueId) {
		if (ss.isValue($tab_BaseSession.linkTarget) && $tab_BaseSession.linkTarget.length > 0) {
			var linkTarget = $tab_BaseSession.linkTarget;
			return { item1: linkTarget, item2: false };
		}
		else if (ss.isValue(url.target)) {
			return $tab_ActionUtils.$getTargetFrameForUrlTarget(url.target, uniqueId);
		}
		else {
			return $tab_ActionUtils.$getNewWindowTargetFrame(uniqueId);
		}
	};
	$tab_ActionUtils.launchActionUrls = function ActionUtils$LaunchActionUrls(launch, commonDialogProvider) {
		var targetList = [];
		var targetUrls = {};
		if (ss.isNullOrUndefined(launch) || launch.length === 0) {
			return;
		}
		var uniqueId = 0;
		for (var $t1 = 0; $t1 < launch.length; $t1++) {
			var url = launch[$t1];
			if (!$tab_ActionUtils.$isAcceptableScheme(url.url)) {
				if (!$tab_ActionUtils.$hasShownBlockedAction) {
					$tab_ActionUtils.$hasShownBlockedAction = true;
					commonDialogProvider.ShowErrorDialog(tab.Strings.SecurityBlockedURLActionMessage, tab.Strings.SecurityBlockedURLActionHeader, null);
				}
				continue;
			}
			if (ss.isNullOrUndefined(url.target) || 't' in url) {
				url.target = url['t'];
			}
			var targetFrame = $tab_ActionUtils.$getTargetFrame(url, uniqueId);
			if (!ss.keyExists(targetUrls, targetFrame.item1)) {
				targetList.push(targetFrame);
			}
			targetUrls[targetFrame.item1] = url.url;
			uniqueId++;
		}
		for (var $t2 = 0; $t2 < targetList.length; $t2++) {
			var tuple = targetList[$t2];
			var target = tuple.item1;
			if (tuple.item2) {
				try {
					$($tab_ActionUtils.$getSelectorStringForUrlActionTarget(target)).prop('src', targetUrls[target]);
				}
				catch ($t3) {
				}
			}
			else {
				try {
					window.open(targetUrls[target], target);
				}
				catch ($t4) {
					var ex = ss.Exception.wrap($t4);
					tab.ErrorTrace.report(ex);
				}
			}
		}
	};
	$tab_ActionUtils.$getSelectorStringForUrlActionTarget = function ActionUtils$GetSelectorStringForUrlActionTarget(target) {
		return '[name=' + target + ']';
	};
	$tab_ActionUtils.$parseCommandFromActionPresModel = function ActionUtils$ParseCommandFromActionPresModel(actionPresModel) {
		var serializedCommand = ss.replaceAllString(actionPresModel.simpleCommandModel['simpleCommand'.toString()], 'simpleCommand=', '');
		return $tab_CommandSerializer.deserialize(serializedCommand, true);
	};
	global.tab.ActionUtils = $tab_ActionUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AddDataServerDataSourceCmd
	var $tab_AddDataServerDataSourceCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_AddDataServerDataSourceCmd$Response]).call(this);
	};
	$tab_AddDataServerDataSourceCmd.__typeName = 'tab.AddDataServerDataSourceCmd';
	global.tab.AddDataServerDataSourceCmd = $tab_AddDataServerDataSourceCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AddDataServerDataSourceCmd.Response
	var $tab_AddDataServerDataSourceCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_AddDataServerDataSourceCmd$Response.__typeName = 'tab.AddDataServerDataSourceCmd$Response';
	global.tab.AddDataServerDataSourceCmd$Response = $tab_AddDataServerDataSourceCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AddObjectToDashboardCmd
	var $tab_AddObjectToDashboardCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_AddObjectToDashboardCmd$Response]).call(this);
	};
	$tab_AddObjectToDashboardCmd.__typeName = 'tab.AddObjectToDashboardCmd';
	global.tab.AddObjectToDashboardCmd = $tab_AddObjectToDashboardCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AddObjectToDashboardCmd.Response
	var $tab_AddObjectToDashboardCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_AddObjectToDashboardCmd$Response.__typeName = 'tab.AddObjectToDashboardCmd$Response';
	global.tab.AddObjectToDashboardCmd$Response = $tab_AddObjectToDashboardCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AnalyticsPaneModel
	var $tab_AnalyticsPaneModel = function(parent) {
		this.$2$NewAnalyticsPaneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('analyticsPane'.toString(), null));
	};
	$tab_AnalyticsPaneModel.__typeName = 'tab.AnalyticsPaneModel';
	global.tab.AnalyticsPaneModel = $tab_AnalyticsPaneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.TableauAnimation.AnimationClock
	var $tab_AnimationClock = function() {
	};
	$tab_AnimationClock.__typeName = 'tab.AnimationClock';
	$tab_AnimationClock.start = function AnimationClock$Start() {
		if ($tab_AnimationClock.$isActive) {
			return true;
		}
		$tab_AnimationClock.$isActive = true;
		$tab_AnimationClock.$requestID = tab.WindowHelper.requestAnimationFrame($tab_AnimationClock.$doTick);
		return true;
	};
	$tab_AnimationClock.stop = function AnimationClock$Stop() {
		if ($tab_AnimationClock.$isActive) {
			tab.WindowHelper.cancelAnimationFrame($tab_AnimationClock.$requestID);
		}
		$tab_AnimationClock.$isActive = false;
		return true;
	};
	$tab_AnimationClock.isActive = function AnimationClock$IsActive() {
		return $tab_AnimationClock.$isActive;
	};
	$tab_AnimationClock.$doTick = function AnimationClock$DoTick() {
		var tickReturn = RuntimeWebModule._Tick(window.performance.now() / 1000);
		if (tickReturn) {
			$tab_AnimationUtil.$updateSceneModels();
		}
		$tab_AnimationClock.$requestID = tab.WindowHelper.requestAnimationFrame($tab_AnimationClock.$doTick);
	};
	global.tab.AnimationClock = $tab_AnimationClock;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.TableauAnimation.AnimationUtil
	var $tab_AnimationUtil = function() {
	};
	$tab_AnimationUtil.__typeName = 'tab.AnimationUtil';
	$tab_AnimationUtil.trackSceneModel = function AnimationUtil$TrackSceneModel(model) {
		$tab_AnimationUtil.$trackedSceneModels[model.get_markAnimationControllerHandle()] = model;
	};
	$tab_AnimationUtil.untrackSceneModel = function AnimationUtil$UntrackSceneModel(markAnimationControllerHandle) {
		delete $tab_AnimationUtil.$trackedSceneModels[markAnimationControllerHandle];
	};
	$tab_AnimationUtil.isUpdating = function AnimationUtil$IsUpdating() {
		return $tab_AnimationUtil.$isUpdating;
	};
	$tab_AnimationUtil.$updateSceneModels = function AnimationUtil$UpdateSceneModels() {
		try {
			$tab_AnimationUtil.$isUpdating = true;
			var cc = $tab_CommandController.get();
			var context = cc.createModelUpdateContext();
			var $t1 = ss.getEnumerator(Object.keys($tab_AnimationUtil.$trackedSceneModels));
			try {
				while ($t1.moveNext()) {
					var controllerHandle = $t1.current();
					if ($tab_AnimationUtil.$hasAnimationFrame(controllerHandle)) {
						var sceneModel = $tab_AnimationUtil.$trackedSceneModels[controllerHandle];
						if (tab.FeatureFlags.isEnabled('MarkAnimation')) {
							sceneModel.get_sceneRuntimeData().invalidatePanesCache();
						}
						sceneModel.update(sceneModel.pm, context);
						sceneModel.invokeNewSceneModel();
						var vm = sceneModel.get_parentVisualModel();
						vm.invokeNewVisual();
						cc.raiseModelsUpdated();
					}
				}
			}
			finally {
				$t1.dispose();
			}
		}
		finally {
			$tab_AnimationUtil.$isUpdating = false;
		}
	};
	$tab_AnimationUtil.$tabAnimIsInitialized = function AnimationUtil$TabAnimIsInitialized() {
		return ss.isValue($tab_ApplicationModel.get_instance().get_tabAnimInitialized()) && $tab_ApplicationModel.get_instance().get_tabAnimInitialized().state() === 'resolved';
	};
	$tab_AnimationUtil.$hasAnimationFrame = function AnimationUtil$HasAnimationFrame(handle) {
		if ($tab_AnimationUtil.$tabAnimIsInitialized()) {
			return RuntimeWebModule._AnimationFrameReady(handle);
		}
		return false;
	};
	$tab_AnimationUtil.$doAnimation = function AnimationUtil$DoAnimation(handle, dataStore) {
		if ($tab_AnimationUtil.$tabAnimIsInitialized()) {
			$tab_AnimationClock.start();
			var result = $tab_AnimationUtil.$animateDatastoreHex(handle, dataStore);
			if (result.state() === 'resolved') {
				return result;
			}
		}
		return false;
	};
	$tab_AnimationUtil.$animateDatastoreHex = function AnimationUtil$AnimateDatastoreHex(handle, bufferAsHex) {
		var buffer_size = tab.HexHeapDecoder.decodedLength(bufferAsHex);
		var buffer_ptr = RuntimeWebModule._malloc(buffer_size);
		tab.HexHeapDecoder.run(buffer_ptr, RuntimeWebModule.HEAPU8, bufferAsHex);
		var result = $tab_AnimationUtil.$animateDatastoreDirectBuffer(handle, buffer_ptr, buffer_size);
		RuntimeWebModule._free(buffer_ptr);
		return result;
	};
	$tab_AnimationUtil.$animateDatastoreDirectBuffer = function AnimationUtil$AnimateDatastoreDirectBuffer(handle, buffer_ptr, buffer_count) {
		var deferred = $.Deferred();
		var mc = tabBootstrap.MetricsController.createContext('RW_AnimateDatastore', 4, null);
		try {
			var result = RuntimeWebModule._AnimateDatastore(handle, buffer_ptr, buffer_count);
			deferred.resolve(result);
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			deferred.reject();
			e = tab.EmscriptenSupport.getExceptionInformation(e);
			e.name = 'RuntimeAnimWebModule Error in AnimateDatastore';
			console.error(e);
			tab.ErrorTrace.report(e);
		}
		mc.dispose();
		return deferred.promise();
	};
	$tab_AnimationUtil.$getAnimationFrame = function AnimationUtil$GetAnimationFrame(handle) {
		var deferred = $.Deferred();
		var mc = tabBootstrap.MetricsController.createContext('RW_MarshallDatastore', 4, null);
		try {
			var huttOffset = RuntimeWebModule._GetAnimationFrame(handle);
			var result = tab.JsHeapMarshaller.unmarshall$1(RuntimeWebModule.HEAPU8.buffer, huttOffset);
			deferred.resolve(result);
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			deferred.reject();
			e = tab.EmscriptenSupport.getExceptionInformation(e);
			e.name = 'TabAnim Error in GetAnimationFrame';
			console.error(e);
			tab.ErrorTrace.report(e);
		}
		mc.dispose();
		return deferred.promise();
	};
	$tab_AnimationUtil.$createMarkAnimationController = function AnimationUtil$CreateMarkAnimationController() {
		if ($tab_AnimationUtil.$tabAnimIsInitialized()) {
			var isSlow = tsConfig.features['MarkAnimationSlowDefault'];
			var isVerySlow = tsConfig.features['MarkAnimationVerySlowDefault'];
			var isPhased = tsConfig.features['MarkAnimationPhasedDefault'];
			RuntimeWebModule._SetAnimationTimingFeatureFlags(isSlow, isVerySlow, isPhased);
			return RuntimeWebModule._CreateMarkAnimationController();
		}
		else {
			return -1;
		}
	};
	global.tab.AnimationUtil = $tab_AnimationUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommands.AnnotationClientCommands
	var $tab_AnnotationClientCommands = function() {
	};
	$tab_AnnotationClientCommands.__typeName = 'tab.AnnotationClientCommands';
	$tab_AnnotationClientCommands.createMarkAnnotation = function AnnotationClientCommands$CreateMarkAnnotation(coords, tupleIds, visualId) {
		var $t1 = new $tab_CreateAnnotationCmd();
		$t1.cmdParams['visualIdPresModel'] = visualId;
		$t1.cmdParams['annotateEnum'] = 'mark';
		$t1.cmdParams['targetPoint'] = { x: coords.x | 0, y: coords.y | 0 };
		$t1.cmdParams['selectionList'] = [{ selectionType: 'tuples', objectIds: tupleIds }];
		$t1.cmdParams['formattedText'] = '<formatted-text/>';
		$t1.cmdParams['richTextEditorConfiguration'] = $tab_RichTextEditorConfigurationFactory.get_instance();
		$t1.invoke();
	};
	$tab_AnnotationClientCommands.createPointAnnotation = function AnnotationClientCommands$CreatePointAnnotation(coords, visualId) {
		var $t1 = new $tab_CreateAnnotationCmd();
		$t1.cmdParams['visualIdPresModel'] = visualId;
		$t1.cmdParams['annotateEnum'] = 'point';
		$t1.cmdParams['targetPoint'] = { x: coords.x | 0, y: coords.y | 0 };
		$t1.cmdParams['selectionList'] = [];
		$t1.cmdParams['formattedText'] = '<formatted-text/>';
		$t1.cmdParams['richTextEditorConfiguration'] = $tab_RichTextEditorConfigurationFactory.get_instance();
		$t1.invoke();
	};
	$tab_AnnotationClientCommands.createAreaAnnotation = function AnnotationClientCommands$CreateAreaAnnotation(coords, visualId) {
		var $t1 = new $tab_CreateAnnotationCmd();
		$t1.cmdParams['visualIdPresModel'] = visualId;
		$t1.cmdParams['annotateEnum'] = 'area';
		$t1.cmdParams['targetPoint'] = { x: coords.x | 0, y: coords.y | 0 };
		$t1.cmdParams['selectionList'] = [];
		$t1.cmdParams['formattedText'] = '<formatted-text/>';
		$t1.cmdParams['richTextEditorConfiguration'] = $tab_RichTextEditorConfigurationFactory.get_instance();
		$t1.invoke();
	};
	$tab_AnnotationClientCommands.removeAnnotation = function AnnotationClientCommands$RemoveAnnotation(ids, visualId) {
		var spmArray = [];
		spmArray.push({ selectionType: 'annotations', objectIds: ids });
		var $t1 = new $tab_RemoveAnnotationCmd();
		$t1.cmdParams['visualIdPresModel'] = visualId;
		$t1.cmdParams['selectionList'] = spmArray;
		$t1.invoke();
	};
	$tab_AnnotationClientCommands.moveAnnotation = function AnnotationClientCommands$MoveAnnotation(annotation, visualId, endPoint) {
		switch (annotation.annotateEnum) {
			case 'area': {
				var width = annotation.areaRect.w;
				var height = annotation.areaRect.h;
				var $t1 = new $tab_UpdateAreaAnnotationCmd();
				$t1.cmdParams['visualIdPresModel'] = visualId;
				$t1.cmdParams['uid'] = annotation.annotationId | 0;
				$t1.cmdParams['regionRect'] = tab.RectXYUtil.toPresModel({ x: endPoint.x, y: endPoint.y, w: width, h: height });
				$t1.cmdParams['pageNumber'] = annotation.pageNumber | 0;
				$t1.invoke();
				break;
			}
			case 'mark':
			case 'point': {
				endPoint.x += ss.Int32.div(annotation.areaRect.w, 2);
				endPoint.y += ss.Int32.div(annotation.areaRect.h, 2);
				var $t2 = new $tab_MovePointAnnotationCmd();
				$t2.cmdParams['visualIdPresModel'] = visualId;
				$t2.cmdParams['uid'] = annotation.annotationId | 0;
				$t2.cmdParams['pt1'] = annotation.targetPoint;
				$t2.cmdParams['endPoint'] = tab.PointUtil.toPresModel(endPoint);
				$t2.cmdParams['pageNumber'] = annotation.pageNumber | 0;
				$t2.invoke();
				break;
			}
			default: {
				break;
			}
		}
	};
	$tab_AnnotationClientCommands.resizeAnnotation = function AnnotationClientCommands$ResizeAnnotation(annotation, visualId, newRegion) {
		switch (annotation.annotateEnum) {
			case 'area': {
				var $t1 = new $tab_UpdateAreaAnnotationCmd();
				$t1.cmdParams['visualIdPresModel'] = visualId;
				$t1.cmdParams['uid'] = annotation.annotationId | 0;
				$t1.cmdParams['regionRect'] = tab.RectXYUtil.toPresModel(newRegion);
				$t1.cmdParams['pageNumber'] = annotation.pageNumber | 0;
				$t1.invoke();
				break;
			}
			case 'mark':
			case 'point': {
				var $t2 = new $tab_ResizePointAnnotationCmd();
				$t2.cmdParams['visualIdPresModel'] = visualId;
				$t2.cmdParams['uid'] = annotation.annotationId | 0;
				$t2.cmdParams['w'] = newRegion.w | 0;
				$t2.cmdParams['isRightDrag'] = newRegion.x === annotation.areaRect.x;
				$t2.cmdParams['pageNumber'] = annotation.pageNumber | 0;
				$t2.invoke();
				break;
			}
			default: {
				break;
			}
		}
	};
	$tab_AnnotationClientCommands.movePointTargetAnnotation = function AnnotationClientCommands$MovePointTargetAnnotation(annotation, visualId, endPoint) {
		var annotationCenter = tab.RectXYUtil.getCenter(tab.RectXYUtil.fromPresModel(annotation.areaRect));
		var $t1 = new $tab_MovePointAnnotationTargetCmd();
		$t1.cmdParams['visualIdPresModel'] = visualId;
		$t1.cmdParams['uid'] = annotation.annotationId | 0;
		$t1.cmdParams['pt1'] = tab.PointUtil.toPresModel(annotationCenter);
		$t1.cmdParams['endPoint'] = tab.PointUtil.toPresModel(endPoint);
		$t1.cmdParams['pageNumber'] = annotation.pageNumber | 0;
		$t1.invoke();
	};
	global.tab.AnnotationClientCommands = $tab_AnnotationClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ApiClientCommands
	var $tab_ApiClientCommands = function() {
	};
	$tab_ApiClientCommands.__typeName = 'tab.ApiClientCommands';
	$tab_ApiClientCommands.doApiCommand = function ApiClientCommands$DoApiCommand(c, onSuccess, onError) {
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', onSuccess, onError));
	};
	global.tab.ApiClientCommands = $tab_ApiClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ApplicationModel
	var $tab_ApplicationModel = function() {
		this.$shapeManager = null;
		this.$extensionPermissionsCache = null;
		this.$notificationHandlers = {};
		this.$models = {};
		this.$runtimeInitialized = null;
		this.$tabanimInitialized = null;
		this.$2$NewWorkbookField = null;
		this.$2$ApplicationUpdateField = null;
		this.$2$RightAreaDrawerField = null;
		this.$2$ToolbarField = null;
		this.$2$WorkbookField = null;
		this.$2$ColorPalettesField = null;
		this.$2$DataDictionaryField = null;
		this.$2$ServerFontsField = null;
		$tab_Model.call(this, null, null);
		this.presModelKey = new $tab_PresModelPathItem('applicationPresModel'.toString(), null);
		this.set_toolbar(new $tab_ToolbarModel(this));
		this.set_rightAreaDrawer(new $tab_RightAreaDrawerModel(this));
		this.set_workbook(new $tab_WorkbookModel(this));
		this.set_colorPalettes(new $tab_ColorPaletteCollectionModel(this));
		this.set_dataDictionary(new $tab_DataDictionaryModel(this));
		this.$shapeManager = new $tab_ShapeManager();
		this.$extensionPermissionsCache = new $tab_ExtensionPermissionsCache();
		this.set_serverFonts(null);
	};
	$tab_ApplicationModel.__typeName = 'tab.ApplicationModel';
	$tab_ApplicationModel.get_instance = function ApplicationModel$get_Instance() {
		if (ss.isNullOrUndefined($tab_ApplicationModel.$holder.get_model())) {
			$tab_ApplicationModel.$holder.set_model(new $tab_ApplicationModel());
		}
		return $tab_ApplicationModel.$holder.get_model();
	};
	$tab_ApplicationModel.get_holder = function ApplicationModel$get_Holder() {
		return $tab_ApplicationModel.$holder;
	};
	$tab_ApplicationModel.resetInstance = function ApplicationModel$ResetInstance() {
		$tab_ApplicationModel.$holder.set_model(null);
	};
	global.tab.ApplicationModel = $tab_ApplicationModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AuthenticationCommands
	var $tab_AuthenticationCommands = function() {
	};
	$tab_AuthenticationCommands.__typeName = 'tab.AuthenticationCommands';
	$tab_AuthenticationCommands.performAuthentication = function AuthenticationCommands$PerformAuthentication(connectionAttributes, password, reuse) {
		var result = $.Deferred();
		var authInfo = $tab_AuthenticationCommands.$getDataConnectionAuthInfo(connectionAttributes);
		authInfo.done(function(response) {
			$tab_ModuleManager.load$1('rsa', []).done(function(module) {
				var databaseParams = $tab_AuthenticationCommands.$createDatabaseParams(response);
				var encryptedPassword = (ss.isNullOrEmptyString(password) ? '' : rsa.encrypt(password, { n: response['modulus'], e: response['exponent'] }));
				databaseParams['crypted'] = encryptedPassword;
				if (reuse) {
					if (response['rememberPasswordsForever']) {
						databaseParams['reuse_forever'] = true;
					}
					else {
						databaseParams['reuse'] = true;
					}
				}
				var augment = $tab_AuthenticationCommands.$augmentKeychain(response['actionPath'], databaseParams);
				augment.done([function() {
					result.resolve();
				}]).fail([function(error) {
					result.reject(error);
				}]);
			});
		});
		return result.promise();
	};
	$tab_AuthenticationCommands.performAuthenticationWithConnectionName = function AuthenticationCommands$PerformAuthenticationWithConnectionName(connectionParams, connectionName) {
		return $tab_AuthenticationCommands.$performAuthenticationHelper(connectionParams.widgetAttrPassword, $tab_DataConnectionCommands.getDSParamsFromPresModelWithConnectionName(connectionParams, connectionName));
	};
	$tab_AuthenticationCommands.performAuthenticationWithConnectionClass = function AuthenticationCommands$PerformAuthenticationWithConnectionClass(connectionParams, connectionClass) {
		return $tab_AuthenticationCommands.$performAuthenticationHelper(connectionParams.widgetAttrPassword, $tab_DataConnectionCommands.getDSParamsFromPresModelWithConnectionClass(connectionParams, connectionClass));
	};
	$tab_AuthenticationCommands.$performAuthenticationHelper = function AuthenticationCommands$PerformAuthenticationHelper(password, dataSourceParams) {
		var result = $.Deferred();
		dataSourceParams.done(function(cmdResponse) {
			var auth = $tab_AuthenticationCommands.performAuthentication($tab_AuthenticationCommands.connectionAttributesFromArray(cmdResponse.$$cmdParams['strings']), password, false);
			auth.done([function() {
				result.resolve();
			}]).fail([function(error) {
				result.reject(error);
			}]);
		}).fail(function() {
			result.reject();
		});
		return result.promise();
	};
	$tab_AuthenticationCommands.$createDatabaseParams = function AuthenticationCommands$CreateDatabaseParams(response) {
		var databaseParams = {};
		databaseParams['username'] = response['defaultUsername'];
		databaseParams['authentication'] = response['authenticationMode'];
		databaseParams['connection'] = response['connection'];
		databaseParams['path'] = response['originalPath'];
		databaseParams['oauthrequest'] = false;
		return databaseParams;
	};
	$tab_AuthenticationCommands.$augmentKeychain = function AuthenticationCommands$AugmentKeychain(path, databaseParams) {
		var result = $.Deferred();
		var options = {
			type: 'POST',
			url: path,
			headers: ss.mkdict(['X-Requested-With', 'XMLHttpRequest']),
			contentType: 'application/x-www-form-urlencoded',
			data: databaseParams,
			success: function(data, status, request) {
				result.resolve();
			},
			error: function(request1, status1, error) {
				result.reject(error);
			}
		};
		$tab_SessionHeartbeat.onVizportalPinged();
		$tab_XhrUtil.helper(options, null);
		return result.promise();
	};
	$tab_AuthenticationCommands.connectionAttributesFromArray = function AuthenticationCommands$ConnectionAttributesFromArray(arr) {
		ss.Debug.assert(arr.length % 2 === 0, 'received DSParams array must be even in length!');
		var attr = {};
		for (var i = 0; i < arr.length - 1; i += 2) {
			attr[arr[i]] = arr[i + 1];
		}
		return attr;
	};
	$tab_AuthenticationCommands.$createAuthInfoParams = function AuthenticationCommands$CreateAuthInfoParams(connectionAttributes) {
		var requestParams = {};
		requestParams['path'] = tsConfig.requestURI;
		requestParams['vizqlSessionId'] = tsConfig.sessionid;
		var attributes = {};
		attributes['attributes'] = connectionAttributes;
		requestParams['attributes'] = JSON.stringify(attributes);
		return requestParams;
	};
	$tab_AuthenticationCommands.$getDataConnectionAuthInfo = function AuthenticationCommands$GetDataConnectionAuthInfo(connectionAttributes) {
		var result = $.Deferred();
		var authInfoParams = $tab_AuthenticationCommands.$createAuthInfoParams(connectionAttributes);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getDataConnectionAuthInfo', authInfoParams, function(response) {
			result.resolve(response);
		}, function() {
			tab.Logger.getLogger($tab_DataConnectionUtils, null).error('GetDataConnectionAuthInfo failed!', []);
			result.reject();
		}), null);
		return result.promise();
	};
	global.tab.AuthenticationCommands = $tab_AuthenticationCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.AxisAuthoringTelemetry
	var $tab_AxisAuthoringTelemetry = function() {
	};
	$tab_AxisAuthoringTelemetry.__typeName = 'tab.AxisAuthoringTelemetry';
	$tab_AxisAuthoringTelemetry.get_$axisAuthoringTelemetryEnabled = function AxisAuthoringTelemetry$get_AxisAuthoringTelemetryEnabled() {
		return $tab_OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('EditAxisWebAffordance') && tab.FeatureFlags.isEnabled('AxisAuthoringTelemetry');
	};
	$tab_AxisAuthoringTelemetry.logAxisCaretClickEvent = function AxisAuthoringTelemetry$LogAxisCaretClickEvent() {
		$tab_AxisAuthoringTelemetry.$executeTelemetry($tab_AxisAuthoringTelemetry.$axisAuthoringInteraction, ss.mkdict([$tab_AxisAuthoringTelemetry.$renderingMode, ($tab_ApplicationModel.get_instance().get_isLocalRenderMode() ? $tab_AxisAuthoringTelemetry.$browserRendered : $tab_AxisAuthoringTelemetry.$serverRendered), $tab_AxisAuthoringTelemetry.$axisInteractionType, $tab_AxisAuthoringTelemetry.$axisCaretIcon]));
	};
	$tab_AxisAuthoringTelemetry.logAxisContextMenuShownEvent = function AxisAuthoringTelemetry$LogAxisContextMenuShownEvent() {
		$tab_AxisAuthoringTelemetry.$executeTelemetry($tab_AxisAuthoringTelemetry.$axisAuthoringInteraction, ss.mkdict([$tab_AxisAuthoringTelemetry.$renderingMode, ($tab_ApplicationModel.get_instance().get_isLocalRenderMode() ? $tab_AxisAuthoringTelemetry.$browserRendered : $tab_AxisAuthoringTelemetry.$serverRendered), $tab_AxisAuthoringTelemetry.$axisInteractionType, $tab_AxisAuthoringTelemetry.$contextMenuShown]));
	};
	$tab_AxisAuthoringTelemetry.logDoubleTapAxisEvent = function AxisAuthoringTelemetry$LogDoubleTapAxisEvent() {
		$tab_AxisAuthoringTelemetry.$executeTelemetry($tab_AxisAuthoringTelemetry.$axisAuthoringInteraction, ss.mkdict([$tab_AxisAuthoringTelemetry.$renderingMode, ($tab_ApplicationModel.get_instance().get_isLocalRenderMode() ? $tab_AxisAuthoringTelemetry.$browserRendered : $tab_AxisAuthoringTelemetry.$serverRendered), $tab_AxisAuthoringTelemetry.$axisInteractionType, $tab_AxisAuthoringTelemetry.$doubleTap]));
	};
	$tab_AxisAuthoringTelemetry.logRightClickAxisEvent = function AxisAuthoringTelemetry$LogRightClickAxisEvent() {
		$tab_AxisAuthoringTelemetry.$executeTelemetry($tab_AxisAuthoringTelemetry.$axisAuthoringInteraction, ss.mkdict([$tab_AxisAuthoringTelemetry.$renderingMode, ($tab_ApplicationModel.get_instance().get_isLocalRenderMode() ? $tab_AxisAuthoringTelemetry.$browserRendered : $tab_AxisAuthoringTelemetry.$serverRendered), $tab_AxisAuthoringTelemetry.$axisInteractionType, $tab_AxisAuthoringTelemetry.$rightClick]));
	};
	$tab_AxisAuthoringTelemetry.$executeTelemetry = function AxisAuthoringTelemetry$ExecuteTelemetry(type, nameValuePairs) {
		if ($tab_AxisAuthoringTelemetry.get_$axisAuthoringTelemetryEnabled()) {
			$tab_OnlineAnalyticsClient.logEvent(type, nameValuePairs);
		}
	};
	global.tab.AxisAuthoringTelemetry = $tab_AxisAuthoringTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.AxisResizerDomElements
	var $tab_AxisResizerDomElements = function(topLeftSpacer, topRightSpacer, bottomLeftSpacer, view, topAxis, rightAxis, bottomAxis, leftAxis) {
		this.topLeftSpacer = null;
		this.topRightSpacer = null;
		this.bottomLeftSpacer = null;
		this.view = null;
		this.topAxis = null;
		this.rightAxis = null;
		this.bottomAxis = null;
		this.leftAxis = null;
		this.topLeftSpacer = topLeftSpacer;
		this.topRightSpacer = topRightSpacer;
		this.bottomLeftSpacer = bottomLeftSpacer;
		this.view = view;
		this.topAxis = topAxis;
		this.rightAxis = rightAxis;
		this.bottomAxis = bottomAxis;
		this.leftAxis = leftAxis;
	};
	$tab_AxisResizerDomElements.__typeName = 'tab.AxisResizerDomElements';
	global.tab.AxisResizerDomElements = $tab_AxisResizerDomElements;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BackgroundJobProgressState
	var $tab_BackgroundJobProgressState = function() {
	};
	$tab_BackgroundJobProgressState.__typeName = 'tab.BackgroundJobProgressState';
	global.tab.BackgroundJobProgressState = $tab_BackgroundJobProgressState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BaseCmd
	var $tab_BaseCmd$2 = function(TParam, TOut) {
		var $type = function() {
			this.cmdParams = {};
			this.$1$UIBlockingField = null;
			this.$1$LocalWorkField = null;
			this.$1$NoExceptionDialogField = false;
			this.$1$SuppressConnectionDialogField = false;
			this.$1$CommandDispatcherField = null;
			this.$1$CommandWaiterField = null;
			this.$1$RemoteCommandField = null;
			this.set_uiBlocking('none');
			this.set_suppressConnectionDialog(false);
		};
		ss.registerGenericClassInstance($type, $tab_BaseCmd$2, [TParam, TOut], {
			get_uiBlocking: function BaseCmd$get_UIBlocking() {
				return this.$1$UIBlockingField;
			},
			set_uiBlocking: function BaseCmd$set_UIBlocking(value) {
				this.$1$UIBlockingField = value;
			},
			get_localWork: function BaseCmd$get_LocalWork() {
				return this.$1$LocalWorkField;
			},
			set_localWork: function BaseCmd$set_LocalWork(value) {
				this.$1$LocalWorkField = value;
			},
			get_noExceptionDialog: function BaseCmd$get_NoExceptionDialog() {
				return this.$1$NoExceptionDialogField;
			},
			set_noExceptionDialog: function BaseCmd$set_NoExceptionDialog(value) {
				this.$1$NoExceptionDialogField = value;
			},
			get_suppressConnectionDialog: function BaseCmd$get_SuppressConnectionDialog() {
				return this.$1$SuppressConnectionDialogField;
			},
			set_suppressConnectionDialog: function BaseCmd$set_SuppressConnectionDialog(value) {
				this.$1$SuppressConnectionDialogField = value;
			},
			get_commandDispatcher: function BaseCmd$get_CommandDispatcher() {
				return this.$1$CommandDispatcherField;
			},
			set_commandDispatcher: function BaseCmd$set_CommandDispatcher(value) {
				this.$1$CommandDispatcherField = value;
			},
			get_commandWaiter: function BaseCmd$get_CommandWaiter() {
				return this.$1$CommandWaiterField;
			},
			set_commandWaiter: function BaseCmd$set_CommandWaiter(value) {
				this.$1$CommandWaiterField = value;
			},
			get_remoteCommand: function BaseCmd$get_RemoteCommand() {
				return this.$1$RemoteCommandField;
			},
			set_remoteCommand: function BaseCmd$set_RemoteCommand(value) {
				this.$1$RemoteCommandField = value;
			},
			invoke: null,
			invoke$1: function BaseCmd$Invoke(remoteCommand) {
				this.validateInvokeParams();
				remoteCommand.noExceptionDialog = this.get_noExceptionDialog();
				remoteCommand.preserveRootResult = true;
				this.set_remoteCommand(remoteCommand);
				var dispatcher = this.get_commandDispatcher() || $tab_DefaultCommandDispatcher.get_instance();
				return dispatcher.dispatch(TParam, TOut).call(dispatcher, this);
			},
			validateInvokeParams: null
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_BaseCmd$2.__typeName = 'tab.BaseCmd$2';
	ss.initGenericClass($tab_BaseCmd$2, $asm, 2);
	global.tab.BaseCmd$2 = $tab_BaseCmd$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BaseSession
	var $tab_BaseSession = function(urlRoot, commonDialogProvider) {
		this.defaultSessionErrorHandler = null;
		this.$commonDialogProvider = null;
		this.$errorHandlerChain = null;
		this.$urlRoot = null;
		this.$siteRoot = null;
		this.$history = null;
		this.fileDownloadHelper = null;
		tab.Param.verifyValue(commonDialogProvider, 'commonDialogProvider');
		this.$commonDialogProvider = commonDialogProvider;
		this.$history = new $tab_History(null);
		var baseUrl = tabBootstrap.BaseUrlFormatter.formatBaseUrl();
		var $t1 = urlRoot;
		if (ss.isNullOrUndefined($t1)) {
			$t1 = tabBootstrap.BaseUrlFormatter.formatUrlRoot(baseUrl, null);
		}
		this.$urlRoot = $t1;
		this.$siteRoot = ss.coalesce(tsConfig.site_root, baseUrl);
		this.defaultSessionErrorHandler = new $tab_DefaultSessionErrorHandler(commonDialogProvider, this.$urlRoot);
		var errorHandlers = [];
		if (tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
			errorHandlers.push(new $tab_DeferredConnectionsSessionErrorHandler());
		}
		if (tab.FeatureFlags.isEnabled('PortableSessionsCheckpoint')) {
			$tab_SessionRecoveryErrorHandler.subscribeToSessionRecoveryAttempt($tab_BaseSession.onSessionRecoveryAttempt);
			errorHandlers.push(new $tab_SessionRecoveryErrorHandler(this.$urlRoot));
		}
		errorHandlers.push(this.defaultSessionErrorHandler);
		this.$errorHandlerChain = new $tab_ErrorHandlerChain(Array.prototype.slice.call(errorHandlers));
		this.fileDownloadHelper = new $tab_FileDownloadHelper(commonDialogProvider, this);
	};
	$tab_BaseSession.__typeName = 'tab.BaseSession';
	$tab_BaseSession.add_stateChanged = function BaseSession$add_StateChanged(value) {
		$tab_BaseSession.$1$StateChangedField = ss.delegateCombine($tab_BaseSession.$1$StateChangedField, value);
	};
	$tab_BaseSession.remove_stateChanged = function BaseSession$remove_StateChanged(value) {
		$tab_BaseSession.$1$StateChangedField = ss.delegateRemove($tab_BaseSession.$1$StateChangedField, value);
	};
	$tab_BaseSession.add_$sessionRecoveryAttempt = function BaseSession$add_SessionRecoveryAttempt(value) {
		$tab_BaseSession.$1$SessionRecoveryAttemptField = ss.delegateCombine($tab_BaseSession.$1$SessionRecoveryAttemptField, value);
	};
	$tab_BaseSession.remove_$sessionRecoveryAttempt = function BaseSession$remove_SessionRecoveryAttempt(value) {
		$tab_BaseSession.$1$SessionRecoveryAttemptField = ss.delegateRemove($tab_BaseSession.$1$SessionRecoveryAttemptField, value);
	};
	$tab_BaseSession.get_waitHandler = function BaseSession$get_WaitHandler() {
		if (ss.isNullOrUndefined($tab_BaseSession.$waitHandler)) {
			$tab_BaseSession.$waitHandler = new $tab_WaitHandler();
		}
		return $tab_BaseSession.$waitHandler;
	};
	$tab_BaseSession.get_sessionRecoveryAttemptHandled = function BaseSession$get_SessionRecoveryAttemptHandled() {
		return !ss.staticEquals($tab_BaseSession.$1$SessionRecoveryAttemptField, null);
	};
	$tab_BaseSession.get_$log = function BaseSession$get_Log() {
		return tab.Logger.lazyGetLogger($tab_BaseSession);
	};
	$tab_BaseSession.onSessionRecoveryAttempt = function BaseSession$OnSessionRecoveryAttempt() {
		$tab_BaseSession.raiseSessionRecoveryAttemptEvent();
	};
	$tab_BaseSession.fireStateChanged = function BaseSession$FireStateChanged(data) {
		if (ss.isValue($tab_BaseSession.$1$StateChangedField)) {
			$tab_BaseSession.$1$StateChangedField(data);
		}
	};
	$tab_BaseSession.subscribeToSessionRecoveryAttempt = function BaseSession$SubscribeToSessionRecoveryAttempt(sessionRecoveryAttemptEventHandler) {
		if (!$tab_BaseSession.get_sessionRecoveryAttemptHandled()) {
			$tab_BaseSession.addSessionRecoveryAttemptHandler(sessionRecoveryAttemptEventHandler);
		}
	};
	$tab_BaseSession.addSessionRecoveryAttemptHandler = function BaseSession$AddSessionRecoveryAttemptHandler(sessionRecoveryAttemptEventHandler) {
		$tab_BaseSession.add_$sessionRecoveryAttempt(sessionRecoveryAttemptEventHandler);
	};
	$tab_BaseSession.removeSessionRecoveryAttemptHandler = function BaseSession$RemoveSessionRecoveryAttemptHandler(sessionRecoveryAttemptEventHandler) {
		$tab_BaseSession.remove_$sessionRecoveryAttempt(sessionRecoveryAttemptEventHandler);
	};
	$tab_BaseSession.raiseSessionRecoveryAttemptEvent = function BaseSession$RaiseSessionRecoveryAttemptEvent() {
		if ($tab_BaseSession.get_sessionRecoveryAttemptHandled()) {
			$tab_BaseSession.$1$SessionRecoveryAttemptField();
		}
	};
	$tab_BaseSession.getErrorMessageFromStringOrException = function BaseSession$GetErrorMessageFromStringOrException(errorStringOrException) {
		var errorMessage = '';
		var errorString = ss.safeCast(errorStringOrException, String);
		var errorException = ss.safeCast(errorStringOrException, ss.Exception);
		if (ss.isValue(errorString)) {
			errorMessage = errorString;
		}
		else if (ss.isValue(errorException)) {
			errorMessage = errorException.get_message();
		}
		return errorMessage;
	};
	global.tab.BaseSession = $tab_BaseSession;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BlockExtensionCmd
	var $tab_BlockExtensionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BlockExtensionCmd$Response]).call(this);
	};
	$tab_BlockExtensionCmd.__typeName = 'tab.BlockExtensionCmd';
	global.tab.BlockExtensionCmd = $tab_BlockExtensionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BlockExtensionCmd.Response
	var $tab_BlockExtensionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BlockExtensionCmd$Response.__typeName = 'tab.BlockExtensionCmd$Response';
	global.tab.BlockExtensionCmd$Response = $tab_BlockExtensionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BorderDefinition
	var $tab_BorderDefinition = function(width, style, color, side) {
		this.width = 0;
		this.style = null;
		this.color = null;
		this.side = 0;
		this.width = width;
		this.style = style;
		this.color = color;
		this.side = side;
	};
	$tab_BorderDefinition.__typeName = 'tab.BorderDefinition';
	$tab_BorderDefinition.borderStyleToCss = function BorderDefinition$BorderStyleToCss(borderStyle) {
		return ss.coalesce($tab_BorderDefinition.$borderLookup[borderStyle], 'none');
	};
	$tab_BorderDefinition.$createBorderStyleLookup = function BorderDefinition$CreateBorderStyleLookup() {
		var result = {};
		result['bs-none'] = 'none';
		result['bs-hidden'] = 'hidden';
		result['bs-dotted'] = 'dotted';
		result['bs-dashed'] = 'dashed';
		result['bs-solid'] = 'solid';
		result['bs-double'] = 'double';
		result['bs-groove'] = 'groove';
		result['bs-ridge'] = 'ridge';
		result['bs-inset'] = 'inset';
		result['bs-outset'] = 'outset';
		return result;
	};
	global.tab.BorderDefinition = $tab_BorderDefinition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BorderDefinition.BorderSide
	var $tab_BorderDefinition$BorderSide = function() {
	};
	$tab_BorderDefinition$BorderSide.__typeName = 'tab.BorderDefinition$BorderSide';
	global.tab.BorderDefinition$BorderSide = $tab_BorderDefinition$BorderSide;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BrushingComputer
	var $tab_BrushingComputer = function() {
		this.$tupleBrushing = {};
		this.$trendLineBrushing = {};
		this.$legendBrushing = {};
		this.$nodeBrushing = {};
		this.$isBrushingComputed = true;
	};
	$tab_BrushingComputer.__typeName = 'tab.BrushingComputer';
	$tab_BrushingComputer.get_$log = function BrushingComputer$get_Log() {
		return tab.Logger.lazyGetLogger($tab_BrushingComputer);
	};
	$tab_BrushingComputer.createBrushingComputer = function BrushingComputer$CreateBrushingComputer(model, visualModel, selectedItemsIds, modelFieldCaptions, isOneWayHighlighting) {
		var toRet = new $tab_BrushingComputer();
		var vizDataModel = visualModel.get_vizDataModel();
		var brushingDataValues = $tab_$BrushingDataUtils.$buildSelectorBrushingDataValues(model, modelFieldCaptions, selectedItemsIds, vizDataModel, modelFieldCaptions);
		for (var $t1 = 0; $t1 < modelFieldCaptions.length; $t1++) {
			var caption = modelFieldCaptions[$t1];
			if (visualModel.vizDataContainsDuplicateCaption(caption)) {
				$tab_BrushingComputer.get_$log().debug('Duplicate caption, not going to calculate brushing: %s', [caption]);
				toRet.$isBrushingComputed = false;
				return toRet;
			}
		}
		var modelsToProcess;
		if (isOneWayHighlighting) {
			modelsToProcess = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		}
		else {
			modelsToProcess = {};
			var relevantActions = $tab_ActionUtils.getApplicableActions(visualModel.get_worksheetName(), 'on-select', 'highlight');
			for (var $t2 = 0; $t2 < relevantActions.length; $t2++) {
				var actionPresModel = relevantActions[$t2];
				if (ss.isNullOrUndefined(actionPresModel.targetWorksheets)) {
					continue;
				}
				for (var $t3 = 0; $t3 < actionPresModel.targetWorksheets.length; $t3++) {
					var targetWorksheet = actionPresModel.targetWorksheets[$t3];
					var targetVisualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), targetWorksheet);
					modelsToProcess[targetWorksheet] = targetVisualModel;
				}
			}
		}
		var contentDashboard = $tab_ModelUtils.findContentDashboard(null);
		var $t4 = _.keys(modelsToProcess);
		for (var $t5 = 0; $t5 < $t4.length; $t5++) {
			var targetSheetName = $t4[$t5];
			var targetVisualModel1 = modelsToProcess[targetSheetName];
			if (ss.isNullOrUndefined(targetVisualModel1)) {
				continue;
			}
			var targetVizData = targetVisualModel1.get_vizDataModel();
			toRet.$tupleBrushing[targetSheetName] = $tab_$BrushingDataUtils.$findMatchingTuples(brushingDataValues, targetVizData);
			toRet.$trendLineBrushing[targetSheetName] = $tab_$BrushingDataUtils.$findMatchingTrendlines(targetVisualModel1.get_sceneModel(), brushingDataValues, targetVizData);
			var brushedNodes = [];
			var $t6 = new ss.ObjectEnumerator($tab_BrushingComputer.$getNodeGroups(targetVisualModel1));
			try {
				while ($t6.moveNext()) {
					var partDrawGroups = $t6.current();
					var nodes = partDrawGroups.value;
					var nodeFields = $tab_$BrushingDataUtils.$getFieldsForNodes(targetVisualModel1, nodes);
					var commonFieldsForNodes = _.intersection(nodeFields, modelFieldCaptions);
					if (commonFieldsForNodes.length > 0) {
						var nodeDvs = $tab_$BrushingDataUtils.$buildSelectorBrushingDataValues(model, modelFieldCaptions, selectedItemsIds, vizDataModel, commonFieldsForNodes);
						brushedNodes = brushedNodes.concat.apply(brushedNodes, $tab_$BrushingDataUtils.$findMatchingNodes(nodeDvs, targetVisualModel1, nodes));
					}
				}
			}
			finally {
				$t6.dispose();
			}
			toRet.$nodeBrushing[targetSheetName] = brushedNodes;
			var $t7 = $tab_ModelUtils.getModelsForViz($tab_CategoricalLegendModel).call(null, contentDashboard, targetVisualModel1);
			for (var $t8 = 0; $t8 < $t7.length; $t8++) {
				var legend = $t7[$t8];
				if (!legend.get_isHighlightEnabled()) {
					continue;
				}
				var legendsToBrush = $tab_$BrushingDataUtils.$findMatchingLegendItems(brushingDataValues, targetVizData, legend);
				$tab_BrushingComputer.get_$log().debug('Brushing legend items: %s, %o', [legend.get_id(), legendsToBrush]);
				if (!ss.keyExists(toRet.$legendBrushing, targetVisualModel1.get_worksheetName())) {
					toRet.$legendBrushing[targetVisualModel1.get_worksheetName()] = {};
				}
				toRet.$legendBrushing[targetVisualModel1.get_worksheetName()][$tab_BrushingComputer.$calculateLegendKey(legend.get_legendTypeEnum(), legend.get_legendNames())] = legendsToBrush;
			}
		}
		return toRet;
	};
	$tab_BrushingComputer.getTuplesAssociatedWithSelectedNodes = function BrushingComputer$GetTuplesAssociatedWithSelectedNodes(visualModel, selectedNodes) {
		if (ss.isNullOrUndefined(visualModel.get_vizDataModel()) || ss.isNullOrUndefined($tab_ApplicationModel.get_instance().get_dataDictionary())) {
			return [];
		}
		var nonQuantitativeNodes = [];
		for (var $t1 = 0; $t1 < selectedNodes.length; $t1++) {
			var node = selectedNodes[$t1];
			if ($tab_SelectionUtils.isCategoricalAndTupleAssociatedHeader(node)) {
				nonQuantitativeNodes.push(node);
			}
		}
		if (nonQuantitativeNodes.length === 0) {
			return [];
		}
		var results = $tab_$BrushingDataUtils.$buildNodeSelectionDataValues(visualModel.get_vizDataModel(), nonQuantitativeNodes);
		var tupleIds = $tab_BrushingComputer.$findTuplesWithValues(results, visualModel);
		return tupleIds;
	};
	$tab_BrushingComputer.computeFromTuples = function BrushingComputer$ComputeFromTuples(visualModel, tupleIDs, relatedActions) {
		var toRet = new $tab_BrushingComputer();
		for (var $t1 = 0; $t1 < relatedActions.length; $t1++) {
			var actionPresModel = relatedActions[$t1];
			if (ss.isNullOrUndefined(actionPresModel.targetWorksheets)) {
				continue;
			}
			var highlightCmd = $tab_CommandSerializer.deserialize(actionPresModel.simpleCommandModel['simpleCommand'.toString()], true);
			for (var $t2 = 0; $t2 < actionPresModel.targetWorksheets.length; $t2++) {
				var targetWorksheet = actionPresModel.targetWorksheets[$t2];
				var targetVisualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), targetWorksheet);
				if (ss.isNullOrUndefined(targetVisualModel)) {
					$tab_BrushingComputer.get_$log().debug('Target worksheet not present: %s', [targetWorksheet]);
					continue;
				}
				var targetVizData = targetVisualModel.get_vizDataModel();
				if (ss.isNullOrUndefined(targetVizData)) {
					$tab_BrushingComputer.get_$log().error('Target viz data not found: %s.', [targetWorksheet]);
					continue;
				}
				if ($tab_BrushingComputer.isSpecialDateTimeHighlighting(highlightCmd)) {
					var dataDict = $tab_ApplicationModel.get_instance().get_dataDictionary();
					var dvsOverlapIndicesPair = $tab_$BrushingDataUtils.$buildDateTimeTupleDataValues(visualModel.get_vizDataModel(), targetVizData, dataDict, tupleIDs);
					var dvs = dvsOverlapIndicesPair.item1;
					var overlapIndexes = dvsOverlapIndicesPair.item2;
					toRet.$tupleBrushing[targetWorksheet] = $tab_$BrushingDataUtils.$findMatchingTuplesDateTimeHighlighting(dvs, overlapIndexes, targetVizData, dataDict);
					toRet.$nodeBrushing[targetWorksheet] = $tab_$BrushingDataUtils.$findMatchingNodesDateTimeHighlighting(dvs, overlapIndexes, targetVisualModel, dataDict);
					toRet.$calculateLegendsForViz(targetVisualModel, visualModel, tupleIDs, highlightCmd, actionPresModel.name);
				}
				else {
					var commonFields = $tab_BrushingComputer.getHighlightFieldCaptions(highlightCmd, visualModel.get_vizDataModel().get_highlightCaptions(), visualModel.get_vizDataModel().get_fieldCaptions());
					if (!ss.referenceEquals(visualModel, targetVisualModel)) {
						commonFields = _.intersection(commonFields, targetVizData.get_fieldCaptions());
					}
					if (tab.MiscUtil.isNullOrEmpty$2(commonFields)) {
						$tab_BrushingComputer.get_$log().debug('Ignoring a highlight action on a field that is not in play.', []);
						continue;
					}
					for (var $t3 = 0; $t3 < commonFields.length; $t3++) {
						var caption = commonFields[$t3];
						if (visualModel.vizDataContainsDuplicateCaption(caption)) {
							$tab_BrushingComputer.get_$log().debug('Duplicate caption, not going to calculate brushing: %s', [caption]);
							toRet.$isBrushingComputed = false;
							return toRet;
						}
					}
					var tupleDvs = $tab_$BrushingDataUtils.$buildTupleSelectionDataValues(visualModel.get_vizDataModel(), tupleIDs, commonFields);
					toRet.$tupleBrushing[targetWorksheet] = $tab_$BrushingDataUtils.$findMatchingTuples(tupleDvs, targetVizData);
					var brushedNodes = [];
					var nodeGroups = $tab_BrushingComputer.$getNodeGroups(targetVisualModel);
					var $t4 = _.keys(nodeGroups);
					for (var $t5 = 0; $t5 < $t4.length; $t5++) {
						var key = $t4[$t5];
						var nodes = nodeGroups[key];
						var nodeFields = $tab_$BrushingDataUtils.$getFieldsForNodes(targetVisualModel, nodes);
						var commonFieldsForNodes = _.intersection(nodeFields, commonFields);
						if (commonFieldsForNodes.length > 0) {
							var nodeDvs = $tab_$BrushingDataUtils.$buildTupleSelectionDataValues(visualModel.get_vizDataModel(), tupleIDs, commonFieldsForNodes);
							brushedNodes = brushedNodes.concat.apply(brushedNodes, $tab_$BrushingDataUtils.$findMatchingNodes(nodeDvs, targetVisualModel, nodes));
						}
					}
					toRet.$nodeBrushing[targetWorksheet] = brushedNodes;
					toRet.$calculateLegendsForViz(targetVisualModel, visualModel, tupleIDs, highlightCmd, actionPresModel.name);
				}
			}
		}
		return toRet;
	};
	$tab_BrushingComputer.$getNodeGroups = function BrushingComputer$GetNodeGroups(targetVisualModel) {
		var toRet = {};
		var visualListModels = targetVisualModel.get_sceneModel().get_visualListModels();
		var $t1 = new ss.ObjectEnumerator(visualListModels);
		try {
			while ($t1.moveNext()) {
				var pair = $t1.current();
				toRet[pair.key] = pair.value.get_groupItemNodes();
			}
		}
		finally {
			$t1.dispose();
		}
		var xlabels = toRet['x-labels'] || [];
		ss.arrayAddRange(xlabels, toRet['bottom-axis'] || []);
		toRet['x-labels'] = xlabels;
		delete toRet['bottom-axis'];
		return toRet;
	};
	$tab_BrushingComputer.isSpecialDateTimeHighlighting = function BrushingComputer$IsSpecialDateTimeHighlighting(highlightCmd) {
		if (ss.isNullOrUndefined(highlightCmd) || ss.isNullOrUndefined(highlightCmd.commandParams)) {
			return false;
		}
		var commandSpecialFieldsValue = ss.cast(highlightCmd.commandParams['specialFields'], String);
		return ss.isValue(commandSpecialFieldsValue) && ss.referenceEquals(commandSpecialFieldsValue, $tab_BrushingComputer.$dateTimeHighlightCommandParamValue);
	};
	$tab_BrushingComputer.getHighlightFieldCaptions = function BrushingComputer$GetHighlightFieldCaptions(highlightCmd, vizHighlightCaptions, commonFieldCaptions) {
		var commandFields = [];
		if (ss.isNullOrUndefined(highlightCmd) || ss.isNullOrUndefined(highlightCmd.commandParams)) {
			return commandFields;
		}
		var commandFieldCaptions = ss.cast(highlightCmd.commandParams['fieldCaptions'], String);
		if (!ss.isNullOrUndefined(commandFieldCaptions)) {
			commandFields = ss.cast(JSON.parse(commandFieldCaptions), Array);
		}
		else {
			var commandSpecialFieldsValue = ss.cast(highlightCmd.commandParams['specialFields'], String);
			if (ss.isNullOrUndefined(commandSpecialFieldsValue) || !ss.referenceEquals(commandSpecialFieldsValue, $tab_BrushingComputer.$allFieldsHighlightCommandParamValue)) {
				$tab_BrushingComputer.get_$log().debug('Warning: Processing a highlight action with no information on what field it is highlighting on. Taking the highlight captions of the source sheet as default.', []);
			}
			commandFields = vizHighlightCaptions;
		}
		if (ss.isValue(commonFieldCaptions)) {
			commandFields = _.intersection(commonFieldCaptions, commandFields);
		}
		return commandFields;
	};
	$tab_BrushingComputer.$calculateLegendKey = function BrushingComputer$CalculateLegendKey(legendType, legendNames) {
		return 'LegendType:' + legendType.toString() + ' LegendNames:' + legendNames.join(';');
	};
	$tab_BrushingComputer.$findTuplesWithValues = function BrushingComputer$FindTuplesWithValues(values, visualModel) {
		var tuples = [];
		if (ss.isNullOrUndefined(visualModel.get_vizDataModel())) {
			return tuples;
		}
		for (var $t1 = 0; $t1 < values.length; $t1++) {
			var result = values[$t1];
			tuples = _.union(tuples, $tab_$BrushingDataUtils.$findMatchingTuples(result, visualModel.get_vizDataModel()));
		}
		return tuples;
	};
	global.tab.BrushingComputer = $tab_BrushingComputer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildCaptionContextMenuCmd
	var $tab_BuildCaptionContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildCaptionContextMenuCmd$Response]).call(this);
	};
	$tab_BuildCaptionContextMenuCmd.__typeName = 'tab.BuildCaptionContextMenuCmd';
	global.tab.BuildCaptionContextMenuCmd = $tab_BuildCaptionContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildCaptionContextMenuCmd.Response
	var $tab_BuildCaptionContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildCaptionContextMenuCmd$Response.__typeName = 'tab.BuildCaptionContextMenuCmd$Response';
	global.tab.BuildCaptionContextMenuCmd$Response = $tab_BuildCaptionContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildDataTabFieldContextMenuCmd
	var $tab_BuildDataTabFieldContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildDataTabFieldContextMenuCmd$Response]).call(this);
	};
	$tab_BuildDataTabFieldContextMenuCmd.__typeName = 'tab.BuildDataTabFieldContextMenuCmd';
	global.tab.BuildDataTabFieldContextMenuCmd = $tab_BuildDataTabFieldContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildDataTabFieldContextMenuCmd.Response
	var $tab_BuildDataTabFieldContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildDataTabFieldContextMenuCmd$Response.__typeName = 'tab.BuildDataTabFieldContextMenuCmd$Response';
	global.tab.BuildDataTabFieldContextMenuCmd$Response = $tab_BuildDataTabFieldContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildDeviceLayoutListContextMenuCmd
	var $tab_BuildDeviceLayoutListContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildDeviceLayoutListContextMenuCmd$Response]).call(this);
	};
	$tab_BuildDeviceLayoutListContextMenuCmd.__typeName = 'tab.BuildDeviceLayoutListContextMenuCmd';
	global.tab.BuildDeviceLayoutListContextMenuCmd = $tab_BuildDeviceLayoutListContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildDeviceLayoutListContextMenuCmd.Response
	var $tab_BuildDeviceLayoutListContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildDeviceLayoutListContextMenuCmd$Response.__typeName = 'tab.BuildDeviceLayoutListContextMenuCmd$Response';
	global.tab.BuildDeviceLayoutListContextMenuCmd$Response = $tab_BuildDeviceLayoutListContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildLayoutTreeContextMenuCmd
	var $tab_BuildLayoutTreeContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildLayoutTreeContextMenuCmd$Response]).call(this);
	};
	$tab_BuildLayoutTreeContextMenuCmd.__typeName = 'tab.BuildLayoutTreeContextMenuCmd';
	global.tab.BuildLayoutTreeContextMenuCmd = $tab_BuildLayoutTreeContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildLayoutTreeContextMenuCmd.Response
	var $tab_BuildLayoutTreeContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildLayoutTreeContextMenuCmd$Response.__typeName = 'tab.BuildLayoutTreeContextMenuCmd$Response';
	global.tab.BuildLayoutTreeContextMenuCmd$Response = $tab_BuildLayoutTreeContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildObjectContextMenuCmd
	var $tab_BuildObjectContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildObjectContextMenuCmd$Response]).call(this);
	};
	$tab_BuildObjectContextMenuCmd.__typeName = 'tab.BuildObjectContextMenuCmd';
	global.tab.BuildObjectContextMenuCmd = $tab_BuildObjectContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildObjectContextMenuCmd.Response
	var $tab_BuildObjectContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildObjectContextMenuCmd$Response.__typeName = 'tab.BuildObjectContextMenuCmd$Response';
	global.tab.BuildObjectContextMenuCmd$Response = $tab_BuildObjectContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildSchemaChangeDataTypeMenuCmd
	var $tab_BuildSchemaChangeDataTypeMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildSchemaChangeDataTypeMenuCmd$Response]).call(this);
	};
	$tab_BuildSchemaChangeDataTypeMenuCmd.__typeName = 'tab.BuildSchemaChangeDataTypeMenuCmd';
	global.tab.BuildSchemaChangeDataTypeMenuCmd = $tab_BuildSchemaChangeDataTypeMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildSchemaChangeDataTypeMenuCmd.Response
	var $tab_BuildSchemaChangeDataTypeMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildSchemaChangeDataTypeMenuCmd$Response.__typeName = 'tab.BuildSchemaChangeDataTypeMenuCmd$Response';
	global.tab.BuildSchemaChangeDataTypeMenuCmd$Response = $tab_BuildSchemaChangeDataTypeMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildServerAxisContextMenuCmd
	var $tab_BuildServerAxisContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildServerAxisContextMenuCmd$Response]).call(this);
	};
	$tab_BuildServerAxisContextMenuCmd.__typeName = 'tab.BuildServerAxisContextMenuCmd';
	global.tab.BuildServerAxisContextMenuCmd = $tab_BuildServerAxisContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildServerAxisContextMenuCmd.Response
	var $tab_BuildServerAxisContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildServerAxisContextMenuCmd$Response.__typeName = 'tab.BuildServerAxisContextMenuCmd$Response';
	global.tab.BuildServerAxisContextMenuCmd$Response = $tab_BuildServerAxisContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildSheetListContextMenuCmd
	var $tab_BuildSheetListContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildSheetListContextMenuCmd$Response]).call(this);
	};
	$tab_BuildSheetListContextMenuCmd.__typeName = 'tab.BuildSheetListContextMenuCmd';
	global.tab.BuildSheetListContextMenuCmd = $tab_BuildSheetListContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildSheetListContextMenuCmd.Response
	var $tab_BuildSheetListContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildSheetListContextMenuCmd$Response.__typeName = 'tab.BuildSheetListContextMenuCmd$Response';
	global.tab.BuildSheetListContextMenuCmd$Response = $tab_BuildSheetListContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildTitleContextMenuCmd
	var $tab_BuildTitleContextMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildTitleContextMenuCmd$Response]).call(this);
	};
	$tab_BuildTitleContextMenuCmd.__typeName = 'tab.BuildTitleContextMenuCmd';
	global.tab.BuildTitleContextMenuCmd = $tab_BuildTitleContextMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.BuildTitleContextMenuCmd.Response
	var $tab_BuildTitleContextMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_BuildTitleContextMenuCmd$Response.__typeName = 'tab.BuildTitleContextMenuCmd$Response';
	global.tab.BuildTitleContextMenuCmd$Response = $tab_BuildTitleContextMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ButtonZoneModel
	var $tab_ButtonZoneModel = function(parent, presModelKey) {
		this.$2$ContentUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(presModelKey, null));
	};
	$tab_ButtonZoneModel.__typeName = 'tab.ButtonZoneModel';
	global.tab.ButtonZoneModel = $tab_ButtonZoneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CalculationAutoCompleteCmd
	var $tab_CalculationAutoCompleteCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CalculationAutoCompleteCmd$Response]).call(this);
	};
	$tab_CalculationAutoCompleteCmd.__typeName = 'tab.CalculationAutoCompleteCmd';
	global.tab.CalculationAutoCompleteCmd = $tab_CalculationAutoCompleteCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CalculationAutoCompleteCmd.Response
	var $tab_CalculationAutoCompleteCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CalculationAutoCompleteCmd$Response.__typeName = 'tab.CalculationAutoCompleteCmd$Response';
	global.tab.CalculationAutoCompleteCmd$Response = $tab_CalculationAutoCompleteCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CalculationDialogModel
	var $tab_CalculationDialogModel = function(parent) {
		$tab_CalculationModel.call(this, parent, new $tab_PresModelPathItem('calculation'.toString(), null));
	};
	$tab_CalculationDialogModel.__typeName = 'tab.CalculationDialogModel';
	global.tab.CalculationDialogModel = $tab_CalculationDialogModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CalculationFunctionListModel
	var $tab_CalculationFunctionListModel = function(parent) {
		this.$2$FunctionListUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('expressionFuncPm'.toString(), null));
		this.pm = {};
	};
	$tab_CalculationFunctionListModel.__typeName = 'tab.CalculationFunctionListModel';
	global.tab.CalculationFunctionListModel = $tab_CalculationFunctionListModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CalculationModel
	var $tab_CalculationModel = function(parent, path) {
		this.$2$CalculationUpdatedField = null;
		this.$2$CalculationFunctionListModelField = null;
		this.$2$ModelVersionField = 0;
		$tab_Model.call(this, parent, path);
		this.pm = {};
		this.set_calculationFunctionListModel(new $tab_CalculationFunctionListModel(this));
	};
	$tab_CalculationModel.__typeName = 'tab.CalculationModel';
	global.tab.CalculationModel = $tab_CalculationModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CancelCommands
	var $tab_CancelCommands = function() {
	};
	$tab_CancelCommands.__typeName = 'tab.CancelCommands';
	$tab_CancelCommands.cancelRunningCommand = function CancelCommands$CancelRunningCommand(command, successCallback, failureCallback) {
		$tab_CommandController.get().cancelRunningCommand(command, successCallback, failureCallback);
	};
	global.tab.CancelCommands = $tab_CancelCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CancellationStatus
	var $tab_CancellationStatus = function() {
	};
	$tab_CancellationStatus.__typeName = 'tab.CancellationStatus';
	global.tab.CancellationStatus = $tab_CancellationStatus;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CancelTelemetry
	var $tab_CancelTelemetry = function() {
	};
	$tab_CancelTelemetry.__typeName = 'tab.CancelTelemetry';
	$tab_CancelTelemetry.$logCancellationFailureEvent = function CancelTelemetry$LogCancellationFailureEvent(commandName, cancelStartTime, cancelEndTime) {
		if ($tab_OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('CommandCancellation')) {
			var totalTimeToCancel = cancelEndTime - cancelStartTime;
			var $t3 = $tab_CancelTelemetry.$cancellationCommandEventType;
			var $t2 = $tab_CancelTelemetry.$cancelCommandName;
			var $t1 = commandName;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = $tab_CancelTelemetry.$cancelCommandNameUnknown;
			}
			$tab_OnlineAnalyticsClient.logEvent($t3, ss.mkdict([$t2, $t1, $tab_CancelTelemetry.$cancelElapsedTimeToCancelMS, totalTimeToCancel, $tab_CancelTelemetry.$cancelStatus, $tab_CancelTelemetry.$cancelStatusFailure]));
		}
	};
	$tab_CancelTelemetry.$logCancellationSuccessEvent = function CancelTelemetry$LogCancellationSuccessEvent(commandName, cancelStatus, cancelStartTime, processResponseStartTime, cancelEndTime) {
		if ($tab_OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('CommandCancellation')) {
			var timeToProcess = cancelEndTime - processResponseStartTime;
			var totalTimeToCancel = cancelEndTime - cancelStartTime;
			var $t3 = $tab_CancelTelemetry.$cancellationCommandEventType;
			var $t2 = $tab_CancelTelemetry.$cancelCommandName;
			var $t1 = commandName;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = $tab_CancelTelemetry.$cancelCommandNameUnknown;
			}
			$tab_OnlineAnalyticsClient.logEvent($t3, ss.mkdict([$t2, $t1, $tab_CancelTelemetry.$cancelElapsedTimeToProcessCancelResponseMS, timeToProcess, $tab_CancelTelemetry.$cancelElapsedTimeToCancelMS, totalTimeToCancel, $tab_CancelTelemetry.$cancelStatus, $tab_CancelTelemetry.convertCancellationStatusForLog(cancelStatus)]));
		}
	};
	$tab_CancelTelemetry.convertCancellationStatusForLog = function CancelTelemetry$ConvertCancellationStatusForLog(cancelStatus) {
		switch (cancelStatus) {
			case 200: {
				return $tab_CancelTelemetry.$cancelStatusSuccess;
			}
			case 204: {
				return $tab_CancelTelemetry.$cancelStatusNothingToCancel;
			}
			default: {
				return '';
			}
		}
	};
	global.tab.CancelTelemetry = $tab_CancelTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalFilterByIndexCmd
	var $tab_CategoricalFilterByIndexCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CategoricalFilterByIndexCmd$Response]).call(this);
	};
	$tab_CategoricalFilterByIndexCmd.__typeName = 'tab.CategoricalFilterByIndexCmd';
	global.tab.CategoricalFilterByIndexCmd = $tab_CategoricalFilterByIndexCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalFilterByIndexCmd.Response
	var $tab_CategoricalFilterByIndexCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CategoricalFilterByIndexCmd$Response.__typeName = 'tab.CategoricalFilterByIndexCmd$Response';
	global.tab.CategoricalFilterByIndexCmd$Response = $tab_CategoricalFilterByIndexCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalFilterCmd
	var $tab_CategoricalFilterCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CategoricalFilterCmd$Response]).call(this);
	};
	$tab_CategoricalFilterCmd.__typeName = 'tab.CategoricalFilterCmd';
	global.tab.CategoricalFilterCmd = $tab_CategoricalFilterCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalFilterCmd.Response
	var $tab_CategoricalFilterCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CategoricalFilterCmd$Response.__typeName = 'tab.CategoricalFilterCmd$Response';
	global.tab.CategoricalFilterCmd$Response = $tab_CategoricalFilterCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalFilterModel
	var $tab_CategoricalFilterModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('categoricalFilter'.toString(), null));
	};
	$tab_CategoricalFilterModel.__typeName = 'tab.CategoricalFilterModel';
	global.tab.CategoricalFilterModel = $tab_CategoricalFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalLegendModel
	var $tab_CategoricalLegendModel = function(parent, contentType, legendType) {
		this.$legendType = null;
		this.$2$LegendChangedField = null;
		this.$2$LegendNameChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(contentType, null));
		this.$legendType = legendType;
	};
	$tab_CategoricalLegendModel.__typeName = 'tab.CategoricalLegendModel';
	$tab_CategoricalLegendModel.$getPresModelItems = function CategoricalLegendModel$GetPresModelItems(type, pm) {
		var items;
		switch (type) {
			case 'color':
			case 'map': {
				items = pm.colorLegendItems;
				break;
			}
			case 'size': {
				items = pm.sizeLegendItems;
				break;
			}
			case 'shape': {
				items = pm.shapeLegendItems;
				break;
			}
			default: {
				tab.Logger.lazyGetLogger($tab_CategoricalLegendModel).warn('Unsupported legend type: %o', [type]);
				return null;
			}
		}
		return items;
	};
	global.tab.CategoricalLegendModel = $tab_CategoricalLegendModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CategoricalQuickFilterModel
	var $tab_CategoricalQuickFilterModel = function(parent) {
		this.$categoricalQuickFilterPresModel = null;
		this.$3$CategoricalFilterField = null;
		$tab_QuickFilterModel.call(this, parent, new $tab_PresModelPathItem('categoricalQuickFilter'.toString(), null));
		this.set_categoricalFilter(new $tab_CategoricalFilterModel(this));
	};
	$tab_CategoricalQuickFilterModel.__typeName = 'tab.CategoricalQuickFilterModel';
	global.tab.CategoricalQuickFilterModel = $tab_CategoricalQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ChangeWorkbookUIModeCmd
	var $tab_ChangeWorkbookUIModeCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ChangeWorkbookUIModeCmd$Response]).call(this);
	};
	$tab_ChangeWorkbookUIModeCmd.__typeName = 'tab.ChangeWorkbookUIModeCmd';
	global.tab.ChangeWorkbookUIModeCmd = $tab_ChangeWorkbookUIModeCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ChangeWorkbookUIModeCmd.Response
	var $tab_ChangeWorkbookUIModeCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ChangeWorkbookUIModeCmd$Response.__typeName = 'tab.ChangeWorkbookUIModeCmd$Response';
	global.tab.ChangeWorkbookUIModeCmd$Response = $tab_ChangeWorkbookUIModeCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CheckConnectionCmd
	var $tab_CheckConnectionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CheckConnectionCmd$Response]).call(this);
	};
	$tab_CheckConnectionCmd.__typeName = 'tab.CheckConnectionCmd';
	global.tab.CheckConnectionCmd = $tab_CheckConnectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CheckConnectionCmd.Response
	var $tab_CheckConnectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CheckConnectionCmd$Response.__typeName = 'tab.CheckConnectionCmd$Response';
	global.tab.CheckConnectionCmd$Response = $tab_CheckConnectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommand
	var $tab_ClientCommand = function(uiBlockType, doLocal, remoteCommand, successCallback, failureCallback) {
		this.doLocalWork = null;
		this.$uiBlockType = null;
		this.$remoteCommands = null;
		this.$waitingRemoteCommands = null;
		this.$processedRemoteCommands = null;
		this.$commandName = 'Unknown';
		this.hasLocalComponent = false;
		this.hasRemoteComponent = false;
		this.useGlobalConnectionErrorHandling = true;
		this.successCallback = null;
		this.failureCallback = null;
		this.$commandResults = null;
		this.$commandErrors = null;
		this.$commandWaiter = null;
		this.$uiBlockType = uiBlockType;
		this.hasLocalComponent = ss.isValue(doLocal);
		this.hasRemoteComponent = ss.isValue(remoteCommand) && !$tab_ApplicationModel.get_instance().get_isOffline();
		this.doLocalWork = doLocal;
		this.$remoteCommands = [];
		this.$waitingRemoteCommands = new Array();
		if (this.hasRemoteComponent) {
			this.enqueueCommand(remoteCommand);
			this.$commandName = remoteCommand.commandName;
		}
		this.successCallback = successCallback;
		this.failureCallback = failureCallback;
		this.$commandResults = [];
		this.$commandErrors = [];
	};
	$tab_ClientCommand.__typeName = 'tab.ClientCommand';
	global.tab.ClientCommand = $tab_ClientCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClipCase
	var $tab_ClipCase = function() {
	};
	$tab_ClipCase.__typeName = 'tab.ClipCase';
	global.tab.ClipCase = $tab_ClipCase;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CloseDataAlertDialogCmd
	var $tab_CloseDataAlertDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CloseDataAlertDialogCmd$Response]).call(this);
	};
	$tab_CloseDataAlertDialogCmd.__typeName = 'tab.CloseDataAlertDialogCmd';
	global.tab.CloseDataAlertDialogCmd = $tab_CloseDataAlertDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CloseDataAlertDialogCmd.Response
	var $tab_CloseDataAlertDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CloseDataAlertDialogCmd$Response.__typeName = 'tab.CloseDataAlertDialogCmd$Response';
	global.tab.CloseDataAlertDialogCmd$Response = $tab_CloseDataAlertDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ColorModel
	var $tab_ColorModel = function(r, g, b, a) {
		this.$r = 0;
		this.$g = 0;
		this.$b = 0;
		this.$a = 0;
		this.$rgbStr = '';
		this.$cachedStr = '';
		this.$r = r;
		this.$g = g;
		this.$b = b;
		this.$a = a;
	};
	$tab_ColorModel.__typeName = 'tab.ColorModel';
	$tab_ColorModel.fromArgbInt = function ColorModel$FromArgbInt(color) {
		var r = (color & 16711680) >>> 16;
		var g = (color & 65280) >>> 8;
		var b = color & 255;
		var a = (color & 4278190080) >>> 24;
		return new $tab_ColorModel(r, g, b, a / 255);
	};
	$tab_ColorModel.fromColorCode = function ColorModel$FromColorCode(colorCode) {
		var cachedColor = $tab_ColorModel.$parsedColorStrCache.cl[colorCode];
		if (ss.isValue(cachedColor)) {
			return cachedColor;
		}
		var cap = function(i) {
			return Math.min(Math.max(i, 0), 255);
		};
		var r;
		var g;
		var b;
		var a = $tab_ColorModel.defaultAlpha;
		var matches = $tab_ColorModel.$hexFormat.exec(colorCode);
		if (ss.isValue(matches)) {
			r = cap(parseInt(matches[1], 16));
			g = cap(parseInt(matches[2], 16));
			b = cap(parseInt(matches[3], 16));
			var retVal = new $tab_ColorModel(r, g, b, a);
			$tab_ColorModel.$parsedColorStrCache.add(colorCode, retVal);
			return retVal;
		}
		matches = $tab_ColorModel.$rgbFormat.exec(colorCode);
		if (ss.isValue(matches)) {
			r = cap(parseInt(matches[1], 10));
			g = cap(parseInt(matches[2], 10));
			b = cap(parseInt(matches[3], 10));
			var retVal1 = new $tab_ColorModel(r, g, b, a);
			retVal1.setRGBStr(colorCode);
			$tab_ColorModel.$parsedColorStrCache.add(colorCode, retVal1);
			return retVal1;
		}
		matches = $tab_ColorModel.$rgbaFormat.exec(colorCode);
		if (ss.isValue(matches)) {
			r = cap(parseInt(matches[1], 10));
			g = cap(parseInt(matches[2], 10));
			b = cap(parseInt(matches[3], 10));
			a = parseFloat(matches[4]);
			if (a <= 1) {
				a = a * 255;
			}
			if (a > 255) {
				a = 255;
			}
			if (a < 0) {
				a = 0;
			}
			a = $tab_ColorModel.alpha255ToFraction(a);
			var retVal2 = new $tab_ColorModel(r, g, b, a);
			$tab_ColorModel.$parsedColorStrCache.add(colorCode, retVal2);
			return retVal2;
		}
		throw new ss.Exception('Unknown color format: ' + colorCode);
	};
	$tab_ColorModel.alpha255ToFraction = function ColorModel$Alpha255ToFraction(a) {
		return tab.DoubleUtil.truncateTwoDecimalPlaces($tab_ColorModel.$untruncatedAlpha255ToFraction(a));
	};
	$tab_ColorModel.$untruncatedAlpha255ToFraction = function ColorModel$UntruncatedAlpha255ToFraction(a) {
		return (a + 1) / 256;
	};
	$tab_ColorModel.alphaFractionTo255 = function ColorModel$AlphaFractionTo255(a) {
		var percentA = ss.Int32.trunc(tab.DoubleUtil.multiplyBy100(a));
		for (var i = 0; i < 256; i++) {
			var newA = ss.Int32.trunc(tab.DoubleUtil.multiplyBy100($tab_ColorModel.alpha255ToFraction(i)));
			if (newA === percentA) {
				return i;
			}
		}
		return 255;
	};
	$tab_ColorModel.fromColorModelPlusAlpha = function ColorModel$FromColorModelPlusAlpha(rgb, a) {
		return new $tab_ColorModel(rgb.get_r(), rgb.get_g(), rgb.get_b(), a);
	};
	$tab_ColorModel.convertColorForCanvas = function ColorModel$ConvertColorForCanvas(colorFromBackend) {
		if (ss.isNullOrUndefined(colorFromBackend) || colorFromBackend.charCodeAt(3) === 40) {
			return colorFromBackend;
		}
		$tab_ColorModel.$initConversionCache();
		var convertedColor = $tab_ColorModel.$conversionCache[colorFromBackend];
		if (ss.isValue(convertedColor)) {
			return convertedColor;
		}
		var cm = $tab_ColorModel.fromColorCode(colorFromBackend);
		convertedColor = cm.toString();
		return convertedColor;
	};
	$tab_ColorModel.isEqual = function ColorModel$IsEqual(m1, m2, compareAlpha) {
		if (ss.isNullOrUndefined(m1) || ss.isNullOrUndefined(m2)) {
			return false;
		}
		if (compareAlpha && m1.$a !== m2.$a) {
			return false;
		}
		return m1.$r === m2.$r && m1.$g === m2.$g && m1.$b === m2.$b;
	};
	$tab_ColorModel.alphaBlend = function ColorModel$AlphaBlend(transparentColor, opaqueColor) {
		if (transparentColor.get_a() < 1) {
			var weightOfOpaqueColor = $tab_ColorModel.alphaToTransparency(transparentColor.get_a());
			var red = opaqueColor.get_r() * weightOfOpaqueColor + transparentColor.get_r() * transparentColor.get_a();
			var green = opaqueColor.get_g() * weightOfOpaqueColor + transparentColor.get_g() * transparentColor.get_a();
			var blue = opaqueColor.get_b() * weightOfOpaqueColor + transparentColor.get_b() * transparentColor.get_a();
			return new $tab_ColorModel(ss.Int32.trunc(red), ss.Int32.trunc(green), ss.Int32.trunc(blue), $tab_ColorModel.defaultAlpha);
		}
		else {
			return transparentColor;
		}
	};
	$tab_ColorModel.isFullyTransparent = function ColorModel$IsFullyTransparent(colorModel) {
		return colorModel.get_a() === 0;
	};
	$tab_ColorModel.alphaComposite = function ColorModel$AlphaComposite(src, dst) {
		if (dst.get_a() >= $tab_ColorModel.$closeToOne) {
			return $tab_ColorModel.alphaCompositeSolidDest(src, dst);
		}
		var transparencyA = $tab_ColorModel.alphaToTransparency(src.get_a());
		var finalAlpha = src.get_a() + dst.get_a() * transparencyA;
		return new $tab_ColorModel($tab_ColorModel.$alphaBlendChannelHelper(src.get_r(), src.get_a(), dst.get_r(), dst.get_a(), finalAlpha), $tab_ColorModel.$alphaBlendChannelHelper(src.get_g(), src.get_a(), dst.get_g(), dst.get_a(), finalAlpha), $tab_ColorModel.$alphaBlendChannelHelper(src.get_b(), src.get_a(), dst.get_b(), dst.get_a(), finalAlpha), finalAlpha);
	};
	$tab_ColorModel.alphaCompositeSolidDest = function ColorModel$AlphaCompositeSolidDest(src, dst) {
		ss.Debug.assert(dst.get_a() >= $tab_ColorModel.$closeToOne, 'Assuming a solid destination alpha ' + dst.get_a());
		return new $tab_ColorModel($tab_ColorModel.$alphaBlendSolidDestChannelHelper(src.get_r(), src.get_a(), dst.get_r()), $tab_ColorModel.$alphaBlendSolidDestChannelHelper(src.get_g(), src.get_a(), dst.get_g()), $tab_ColorModel.$alphaBlendSolidDestChannelHelper(src.get_b(), src.get_a(), dst.get_b()), $tab_ColorModel.defaultAlpha);
	};
	$tab_ColorModel.$luminance = function ColorModel$Luminance(r, g, b) {
		return 0.2126 * $tab_ColorModel.$pow2point2[r] + 0.7152 * $tab_ColorModel.$pow2point2[g] + 0.0722 * $tab_ColorModel.$pow2point2[b];
	};
	$tab_ColorModel.$getApparentAlphaPercent = function ColorModel$GetApparentAlphaPercent(alpha) {
		return Math.min(1, (255 - alpha) / 255 * $tab_ColorModel.alphaMultiplier);
	};
	$tab_ColorModel.$toHex = function ColorModel$ToHex(input, padding) {
		var result = input.toString(16);
		while (result.length < padding) {
			result = '0' + result;
		}
		return result;
	};
	$tab_ColorModel.$alphaBlendChannelHelper = function ColorModel$AlphaBlendChannelHelper(srcVal, srcAlpha, dstVal, dstAlpha, finalAlpha) {
		return Math.round((srcVal * srcAlpha + dstVal * dstAlpha * $tab_ColorModel.alphaToTransparency(srcAlpha)) / finalAlpha);
	};
	$tab_ColorModel.$alphaBlendSolidDestChannelHelper = function ColorModel$AlphaBlendSolidDestChannelHelper(srcVal, srcAlpha, dstVal) {
		return Math.round(srcVal * srcAlpha + dstVal * $tab_ColorModel.alphaToTransparency(srcAlpha));
	};
	$tab_ColorModel.$labTransform = function ColorModel$LabTransform(XYZcomponent) {
		if (XYZcomponent > 0.00885639991611242) {
			return Math.pow(XYZcomponent, 0.333333313465118);
		}
		else {
			return 7.78703689575195 * XYZcomponent + 0.137931004166603;
		}
	};
	$tab_ColorModel.$initConversionCache = function ColorModel$InitConversionCache() {
		if (ss.isValue($tab_ColorModel.$conversionCache)) {
			return;
		}
		$tab_ColorModel.$conversionCache = {};
		$tab_ColorModel.$conversionCache['rgba(0,0,0,255)'] = 'rgba(0,0,0,1)';
		$tab_ColorModel.$conversionCache['rgba(0,0,0,0)'] = 'rgba(0,0,0,0)';
		$tab_ColorModel.$conversionCache['rgba(255,255,255,255)'] = 'rgba(255,255,255,1)';
		$tab_ColorModel.$conversionCache['rgba(255,255,255,0)'] = 'rgba(255,255,255,0)';
	};
	$tab_ColorModel.transparencyToAlpha = function ColorModel$TransparencyToAlpha(transparency) {
		return Math.min(Math.max(1 - transparency, 0), 1);
	};
	$tab_ColorModel.alphaToTransparency = function ColorModel$AlphaToTransparency(alpha) {
		return $tab_ColorModel.transparencyToAlpha(alpha);
	};
	global.tab.ColorModel = $tab_ColorModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ColorPaletteCollectionModel
	var $tab_ColorPaletteCollectionModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('colorPalettes'.toString(), null));
	};
	$tab_ColorPaletteCollectionModel.__typeName = 'tab.ColorPaletteCollectionModel';
	global.tab.ColorPaletteCollectionModel = $tab_ColorPaletteCollectionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandCancellationWhiteList
	var $tab_CommandCancellationWhiteList = function() {
	};
	$tab_CommandCancellationWhiteList.__typeName = 'tab.CommandCancellationWhiteList';
	$tab_CommandCancellationWhiteList.$isFeatureFlagOnForCommand = function CommandCancellationWhiteList$IsFeatureFlagOnForCommand(commandName) {
		if (ss.referenceEquals(commandName, { ns: 'tabsrv', cmd: 'refresh-data-server' }.cmd)) {
			return tab.FeatureFlags.isEnabled('AllowCancellationRefreshDataServer');
		}
		if (ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'get-show-data-pres-model' }.cmd)) {
			return tab.FeatureFlags.isEnabled('AllowCancellationGetShowDataPresModel');
		}
		if (ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'categorical-filter' }.cmd)) {
			return tab.FeatureFlags.isEnabled('AllowCancellationCategoricalFilter');
		}
		if (ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'categorical-filter-by-index' }.cmd)) {
			return tab.FeatureFlags.isEnabled('AllowCancellationCategoricalFilter');
		}
		if (ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'connection-count-entity' }.cmd)) {
			return tab.FeatureFlags.isEnabled('AllowCancellationSlowMetaData');
		}
		if (ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'connection-fetch-entity' }.cmd)) {
			return tab.FeatureFlags.isEnabled('AllowCancellationSlowMetaData');
		}
		return true;
	};
	$tab_CommandCancellationWhiteList.canCancel = function CommandCancellationWhiteList$CanCancel(commandName) {
		return ss.keyExists($tab_CommandCancellationWhiteList.$cancellableCommands, commandName) && $tab_CommandCancellationWhiteList.$isFeatureFlagOnForCommand(commandName);
	};
	global.tab.CommandCancellationWhiteList = $tab_CommandCancellationWhiteList;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandController
	var $tab_CommandController = function(session, commonDialogProvider, defaultCommandCanceler) {
		this.$commandHandler = null;
		this.$commonDialogProvider = null;
		this.executingCommands = [];
		this.$waitingCommands = new $tab_$ClientCommandQueue();
		this.$transactor = new $tab_Transactor();
		this.deferredServerResponseQueue = {};
		this.$invalidations = [];
		this.$deferredLayoutInfo = null;
		this.$waitIndicator = null;
		this.$worldCheckpoint = null;
		this.$shouldResetWorld = false;
		this.$progressiveLoader = null;
		this.$getViewportFunc = null;
		this.$callOnProgLoadComplete = null;
		this.$postUpdateWorldActions = [];
		this.$deferredConnectionsCommandHandler = null;
		this.$bootstrapComplete = false;
		this.$delayedLocalUrlActions = [];
		this.$testHookOnlyAllContentReady = false;
		this.$localStoreHandles = {};
		this.$1$OnUrlActionsResponseField = null;
		this.$1$OnInvalidationField = null;
		this.$1$TabChangeCompletedField = null;
		this.$1$NewLayoutIdField = null;
		this.$1$OnInitialBootstrapField = null;
		this.$1$OnPrimaryBootstrapSuccessField = null;
		this.$1$SwitchingVizField = null;
		this.$1$DestroyViewField = null;
		this.$1$CommandQueueCompleteField = null;
		this.$1$UndoCommandField = null;
		this.$1$RedoCommandField = null;
		this.$1$ModelsUpdatedField = null;
		this.$1$IntermediateUpdateField = null;
		this.$1$RemoteCommandFailureField = null;
		this.defaultCommandCanceler = null;
		this.e2eAutomationTestHooks = null;
		this.legacySession = null;
		this.processingRenderModeChange = false;
		this.processingStoryPointChange = false;
		this.isCanceling = false;
		this.legacySession = session;
		this.$commonDialogProvider = commonDialogProvider;
		this.defaultCommandCanceler = defaultCommandCanceler;
		window.window.onerror = ss.mkdel(this, this.$onGlobalError);
		this.$worldCheckpoint = new $tab_WorldCheckpointHolder(this.$commonDialogProvider);
		this.$waitIndicator = new $tab_$LegacySessionWaitHandler(this.legacySession);
		this.set_commandHandler(this.$createAndSetUpCommandHandler());
		this.$deferredConnectionsCommandHandler = new $tab_DeferredConnectionsCommandHandler(commonDialogProvider);
		this.$initializeProgressiveLoader();
		this.e2eAutomationTestHooks = new $tab_$E2eAutomationTestHooks(this.$worldCheckpoint, ss.mkdel(this, function() {
			return ss.getKeyCount(this.deferredServerResponseQueue);
		}), ss.mkdel(this, this.$isWaitingOnCommands));
		this.$testHookOnlyAllContentReady = false;
	};
	$tab_CommandController.__typeName = 'tab.CommandController';
	$tab_CommandController.add_switchedViz = function CommandController$add_SwitchedViz(value) {
		$tab_CommandController.$1$SwitchedVizField = ss.delegateCombine($tab_CommandController.$1$SwitchedVizField, value);
	};
	$tab_CommandController.remove_switchedViz = function CommandController$remove_SwitchedViz(value) {
		$tab_CommandController.$1$SwitchedVizField = ss.delegateRemove($tab_CommandController.$1$SwitchedVizField, value);
	};
	$tab_CommandController.add_sheetNameChanged = function CommandController$add_SheetNameChanged(value) {
		$tab_CommandController.$1$SheetNameChangedField = ss.delegateCombine($tab_CommandController.$1$SheetNameChangedField, value);
	};
	$tab_CommandController.remove_sheetNameChanged = function CommandController$remove_SheetNameChanged(value) {
		$tab_CommandController.$1$SheetNameChangedField = ss.delegateRemove($tab_CommandController.$1$SheetNameChangedField, value);
	};
	$tab_CommandController.get_hasInstance = function CommandController$get_HasInstance() {
		return ss.isValue($tab_CommandController._instance);
	};
	$tab_CommandController.get_$log = function CommandController$get_Log() {
		return tab.Logger.lazyGetLogger($tab_CommandController);
	};
	$tab_CommandController.get_vizqlServerRequestHandler = function CommandController$get_VizqlServerRequestHandler() {
		return $tab_CommandController.get().legacySession;
	};
	$tab_CommandController.isAllContentReady = function CommandController$IsAllContentReady() {
		return (ss.isNullOrUndefined($tab_CommandController._instance) ? false : $tab_CommandController._instance.$testHookOnlyAllContentReady);
	};
	$tab_CommandController.create = function CommandController$Create(session, commonDialogProvider, defaultCommandCanceler) {
		if (ss.isNullOrUndefined($tab_CommandController._instance)) {
			$tab_CommandController._instance = new $tab_CommandController(session, commonDialogProvider, defaultCommandCanceler);
		}
		return $tab_CommandController._instance;
	};
	$tab_CommandController.unitTestOnlyStayAwayFromHereSetInstance = function CommandController$UnitTestOnlyStayAwayFromHereSetInstance(newInstance) {
		$tab_CommandController._instance = newInstance;
	};
	$tab_CommandController.unitTestOnlyStayAwayFromHereClearInstance = function CommandController$UnitTestOnlyStayAwayFromHereClearInstance() {
		$tab_CommandController._instance = null;
		window.window.onerror = null;
	};
	$tab_CommandController.get = function CommandController$Get() {
		if (!ss.isValue($tab_CommandController._instance)) {
			throw new ss.Exception('Attempted to use CommandController before creating it.');
		}
		return $tab_CommandController._instance;
	};
	$tab_CommandController.handleBootstrapException = function CommandController$HandleBootstrapException(e, commonDialogProvider) {
		tab.ErrorTrace.report(e);
		$tab_CommandController.get_$log().error('Bootstrap error: %s', [e.toString()]);
		if ($tab_CommandController.$handledBootstrapException) {
			return;
		}
		var sb = new ss.StringBuilder();
		if (ss.isValue(e['name'])) {
			sb.append(e['name']).append(': ');
		}
		sb.append(e.get_message());
		if ('stack' in e) {
			sb.appendLine().append(e['stack']);
		}
		commonDialogProvider.ShowErrorDialog(tab.Strings.UnhandledExceptionMessage(tsConfig.sessionid, sb.toString()), tab.Strings.UnhandledExceptionTitle, null);
		$tab_CommandController.$postUnhandledExceptionMessage(JSON.stringify($tab_FailureHandler.packageStackTraceData(tab.ErrorTrace.getStackTraceFor(e))));
		$tab_CommandController.sendParentCompletedMessage();
		$tab_CommandController.$handledBootstrapException = true;
	};
	$tab_CommandController.sendParentCompletedMessage = function CommandController$SendParentCompletedMessage() {
		if ($tab_CommandController.$parentCompletedSent) {
			return;
		}
		$tab_CommandController.$parentCompletedSent = true;
		var success = tabBootstrap.Utility.sendCommandWithContext('tableau.completed');
		if (!success) {
			tab.Logger.lazyGetLogger($tab_CommandController).debug('CommandController: SendCommandWithContext failed.', []);
		}
		$tab_CommandController.get_$log().debug('PostMessage ' + 'tableau.completed'.toString() + ' fired', []);
	};
	$tab_CommandController.$postUnhandledExceptionMessage = function CommandController$PostUnhandledExceptionMessage(exceptionDetails) {
		var message = [];
		message.push('tableau.unhandledException');
		message.push(exceptionDetails);
		tabBootstrap.Utility.doPostMessage(message);
	};
	$tab_CommandController.$isCommandBlocking = function CommandController$IsCommandBlocking(command) {
		return command.get_isBlocking();
	};
	$tab_CommandController.SendCommand = function CommandController$SendCommand(newlyMadeClientCommand) {
		var singleton = $tab_CommandController.get();
		if (singleton.isCanceling && tab.FeatureFlags.isEnabled('CommandCancellation')) {
			ss.Debug.assert(false, 'Attempting to send new command during cancellation');
			return;
		}
		if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
			singleton.$abortLoadForCommandIfAppropriate(newlyMadeClientCommand);
		}
		singleton.$waitingCommands.$enqueue(newlyMadeClientCommand);
		singleton.$kickTheQueue();
	};
	$tab_CommandController.SendCommandWithDeferredReturn = function CommandController$SendCommandWithDeferredReturn(c, blocking) {
		var deferred = $.Deferred();
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, blocking, function(pm) {
			deferred.resolve(pm);
		}, function(e) {
			deferred.reject();
		}));
		return deferred.promise();
	};
	$tab_CommandController.$formatSessionMethod = function CommandController$FormatSessionMethod(method, session) {
		return tabBootstrap.BaseUrlFormatter.formatSessionMethod(method, session.get_id(), session.get_urlRoot());
	};
	$tab_CommandController.logErrorForUnknownRecoveryOutcome = function CommandController$LogErrorForUnknownRecoveryOutcome(outcome) {
		switch (outcome) {
			case 'NOT_ATTEMPTED':
			case 'FULL':
			case 'PARTIAL':
			case 'ORIGINAL':
			case 'UNKNOWN_ERROR': {
				break;
			}
			default: {
				$tab_CommandController.logError($tab_CommandController.unknownOutcomeLoggingMessage + outcome);
				break;
			}
		}
	};
	$tab_CommandController.logError = function CommandController$LogError(message) {
		tab.Logger.getLoggerWithName($tab_CommandController.$loggerName).error(message, []);
	};
	$tab_CommandController.$appendErrorLinksToMessageIfPresent = function CommandController$AppendErrorLinksToMessageIfPresent(sessionId, message, err) {
		var links = [];
		if (!tab.MiscUtil.isNullOrEmpty$3(tsConfig.clientOpenBugUrl)) {
			var checkBugText = tsConfig.clientCheckBugText;
			var checkBugUrl = tsConfig.clientCheckBugUrl;
			var openBugText = tsConfig.clientOpenBugText;
			var openBugUrl = tsConfig.clientOpenBugUrl;
			var errorMessageToken = encodeURIComponent('{errorMessage}');
			var sessionIdToken = encodeURIComponent('{sessionId}');
			var stackToken = encodeURIComponent('{stack}');
			var urlToken = encodeURIComponent('{url}');
			if (!ss.isNullOrEmptyString(checkBugText) && !ss.isNullOrEmptyString(checkBugUrl)) {
				var messageWithoutQuotes = ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(message, '"', ''), "'", ''), ':', '');
				checkBugUrl = ss.replaceAllString(checkBugUrl, errorMessageToken, encodeURIComponent(messageWithoutQuotes));
				links.push({ url: checkBugUrl, displayText: checkBugText });
			}
			if (!ss.isNullOrEmptyString(openBugText) && !ss.isNullOrEmptyString(openBugUrl)) {
				var stack = 'search splunk for stack.';
				try {
					stack = err.stack;
					stack = stack.substr(0, 400);
				}
				catch ($t1) {
				}
				openBugUrl = ss.replaceAllString(openBugUrl, errorMessageToken, encodeURIComponent(ss.replaceAllString(message, ':', '')));
				openBugUrl = ss.replaceAllString(openBugUrl, sessionIdToken, encodeURIComponent(sessionId));
				openBugUrl = ss.replaceAllString(openBugUrl, stackToken, encodeURIComponent(stack));
				var loc = ((ss.isValue(window.parent) && ss.isValue(window.parent.location)) ? window.parent.location : window.location);
				openBugUrl = ss.replaceAllString(openBugUrl, urlToken, encodeURIComponent(loc.href));
				openBugUrl = ss.replaceAllString(ss.replaceAllString(openBugUrl, '"', ''), "'", '');
				links.push({ url: openBugUrl, displayText: openBugText });
			}
		}
		return links;
	};
	$tab_CommandController.$logClientFullyLoaded = function CommandController$LogClientFullyLoaded() {
		tabBootstrap.MetricsController.logMetricsEvent('CLNTLD'.toString(), 2);
	};
	$tab_CommandController.$getStoryPointIdFromUpdate = function CommandController$GetStoryPointIdFromUpdate(appModel) {
		var InvalidStoryId = 0;
		if (ss.isNullOrUndefined(appModel) || ss.isNullOrUndefined(appModel.workbookPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel)) {
			return null;
		}
		if (!appModel.workbookPresModel.dashboardPresModel.isStory) {
			return InvalidStoryId;
		}
		var zones = appModel.workbookPresModel.dashboardPresModel.zones;
		var $t1 = _.keys(zones);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			var zonePM = zones[key];
			if (ss.isNullOrUndefined(zonePM)) {
				continue;
			}
			var flipboardPM = $tab_ZoneModel.getContent(zonePM, 'flipboard');
			if (ss.isValue(flipboardPM)) {
				return flipboardPM.activeStoryPointId;
			}
		}
		return null;
	};
	$tab_CommandController.$getSheetNameFromUpdate = function CommandController$GetSheetNameFromUpdate(appModel) {
		if (ss.isNullOrUndefined(appModel) || ss.isNullOrUndefined(appModel.workbookPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel.sheetPath)) {
			return '';
		}
		return appModel.workbookPresModel.dashboardPresModel.sheetPath.sheetName;
	};
	global.tab.CommandController = $tab_CommandController;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandControllerStoryTelemetry
	var $tab_CommandControllerStoryTelemetry = function() {
	};
	$tab_CommandControllerStoryTelemetry.__typeName = 'tab.CommandControllerStoryTelemetry';
	$tab_CommandControllerStoryTelemetry.bootstrapCompleteStoryTelemetry = function CommandControllerStoryTelemetry$BootstrapCompleteStoryTelemetry() {
		if ($tab_OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('StorytellingOnlineTelemetry') && !tsConfig.is_authoring) {
			var sheetInfoPresModel = $tab_ModelUtils.getSheetInfoPresModel($tab_ApplicationModel.get_instance(), tsConfig.current_sheet_name);
			if (ss.isValue(sheetInfoPresModel) && sheetInfoPresModel.isStory) {
				_.defer(function() {
					$tab_CommandControllerStoryTelemetry.$logStoryStateViewingEvent();
				});
			}
		}
	};
	$tab_CommandControllerStoryTelemetry.$logStoryStateViewingEvent = function CommandControllerStoryTelemetry$LogStoryStateViewingEvent() {
		var title = { $: null };
		var flipboardNavModel = { $: null };
		var storyboard = { $: null };
		var captionStyle = { $: null };
		var dashboardSize = { $: null };
		var points = { $: null };
		var sheets = { $: null };
		if (!$tab_CommandControllerStoryTelemetry.$tryGetStoryboard(storyboard)) {
			$tab_CommandControllerStoryTelemetry.$logStoryStatePropertyFailure('Storyboard is not set when we expected it to be.');
			return;
		}
		if (!$tab_CommandControllerStoryTelemetry.$tryGetTitle(storyboard.$, title)) {
			$tab_CommandControllerStoryTelemetry.$logStoryStatePropertyFailure("'name' is not set in the ZoneCommonPresModel when we expected it to be.");
			return;
		}
		if (!$tab_CommandControllerStoryTelemetry.$tryGetFlipboardNavigatorModel(storyboard.$, flipboardNavModel)) {
			$tab_CommandControllerStoryTelemetry.$logStoryStatePropertyFailure('FlipboardNavModel is not set when we expected it to be.');
			return;
		}
		if (!$tab_CommandControllerStoryTelemetry.$tryGetSelectedStoryPointStyle(flipboardNavModel.$, captionStyle)) {
			$tab_CommandControllerStoryTelemetry.$logStoryStatePropertyFailure('SelectedStoryPointStyle was not set when we expected it to be.');
			return;
		}
		if (!$tab_CommandControllerStoryTelemetry.$tryGetDashboardSize(storyboard.$, dashboardSize)) {
			$tab_CommandControllerStoryTelemetry.$logStoryStatePropertyFailure('DashboardSize was not set when we expected it to be.');
			return;
		}
		if (!$tab_CommandControllerStoryTelemetry.$tryGetStoryPoints(flipboardNavModel.$, points)) {
			$tab_CommandControllerStoryTelemetry.$logStoryStatePropertyFailure('StoryPoints is not set when we expected it to be.');
			return;
		}
		if (!$tab_CommandControllerStoryTelemetry.$tryGetSheetsInfo(sheets)) {
			$tab_CommandControllerStoryTelemetry.$logStoryStatePropertyFailure('SheetsInfo is not set when we expected it to be.');
			return;
		}
		ss.Debug.assert(ss.isValue($tab_CommandControllerStoryTelemetry.$wordCountExpression), 'Expected WordCountExpression to be non-null.');
		var captionHeuristics = $tab_CommandControllerStoryTelemetry.$getCaptionHeuristics(points.$, flipboardNavModel.$.get_navType());
		var sheetHeuristics = $tab_CommandControllerStoryTelemetry.$getSheetHeuristics(sheets.$);
		$tab_OnlineAnalyticsClient.logEvent('StoryViewing.StoryState', ss.mkdict(['AtBootstrap', true, 'DefaultTitle', (ss.referenceEquals(title.$, tsConfig.current_sheet_name.toString()) ? true : false), 'StoryPoints', points.$.length, 'UniqueSheets', sheetHeuristics.get_$uniqueSheets(), 'UniqueDashboards', sheetHeuristics.get_$uniqueDashboards(), 'AvgCaptionLengthByChar', captionHeuristics.get_$avgLengthByChar(), 'AvgCaptionLengthByWord', captionHeuristics.get_$avgLengthByWord(), 'LongestCaptionByChar', captionHeuristics.get_$longestByChar(), 'LongestCaptionByWord', captionHeuristics.get_$longestByWord(), 'TitleLengthByChar', title.$.length, 'TitleLengthByWord', (!tab.MiscUtil.isNullOrEmpty$3(title.$) ? title.$.match($tab_CommandControllerStoryTelemetry.$wordCountExpression).length : 0), 'TitleVisible', storyboard.$.get_isTitleVisible(), 'NavArrows', flipboardNavModel.$.get_arrowVisibility(), 'NavStyle', flipboardNavModel.$.get_navType().toString(), 'DashboardHeight', dashboardSize.$.h, 'DashboardWidth', dashboardSize.$.w, 'StoryPointHeight', captionStyle.$.h, 'StoryPointWidth', captionStyle.$.w, 'StoryPointBackgroundColor', captionStyle.$.styledBox.fillColor.toString(), 'StoryPointBorderColor', captionStyle.$.styledBox.borderColor.toString()]));
	};
	$tab_CommandControllerStoryTelemetry.$logStoryStatePropertyFailure = function CommandControllerStoryTelemetry$LogStoryStatePropertyFailure(message) {
		$tab_OnlineAnalyticsClient.logEvent('Error.StoryState', ss.mkdict(['Message', message]));
	};
	$tab_CommandControllerStoryTelemetry.$getCaptionHeuristics = function CommandControllerStoryTelemetry$GetCaptionHeuristics(points, type) {
		var totalLengthByChar = 0, totalLengthByWord = 0, longestByChar = 0, longestByWord = 0;
		if (type !== 'caption' || points.length < 1) {
			return new $tab_$CaptionHeuristics();
		}
		for (var $t1 = 0; $t1 < points.length; $t1++) {
			var npm = points[$t1];
			if (ss.isValue(npm.storyPointCaption) && !tab.MiscUtil.isNullOrEmpty$3(npm.storyPointCaption.toString())) {
				var caption = npm.storyPointCaption.toString();
				var words = caption.match($tab_CommandControllerStoryTelemetry.$wordCountExpression);
				if (caption.length > longestByChar) {
					longestByChar = caption.length;
				}
				if (words.length > longestByWord) {
					longestByWord = words.length;
				}
				totalLengthByChar += caption.length;
				totalLengthByWord += words.length;
			}
		}
		return new $tab_$CaptionHeuristics.$ctor1(totalLengthByChar / points.length, totalLengthByWord / points.length, longestByChar, longestByWord);
	};
	$tab_CommandControllerStoryTelemetry.$getSheetHeuristics = function CommandControllerStoryTelemetry$GetSheetHeuristics(sheets) {
		var uniqueSheets = new Set();
		var uniqueDashboards = new Set();
		for (var $t1 = 0; $t1 < sheets.length; $t1++) {
			var pm = sheets[$t1];
			if (pm.isStory) {
				continue;
			}
			if (pm.isDashboard) {
				uniqueDashboards.add(pm.sheet);
			}
			else {
				uniqueSheets.add(pm.sheet);
			}
		}
		return new $tab_$SheetHeuristics(uniqueSheets.size, uniqueDashboards.size);
	};
	$tab_CommandControllerStoryTelemetry.$tryGetStoryboard = function CommandControllerStoryTelemetry$TryGetStoryboard(storyboard) {
		storyboard.$ = ((ss.isValue($tab_ApplicationModel.get_instance().get_workbook()) && ss.isValue($tab_ApplicationModel.get_instance().get_workbook().get_storyboard())) ? $tab_ApplicationModel.get_instance().get_workbook().get_storyboard() : null);
		return ss.isValue(storyboard.$);
	};
	$tab_CommandControllerStoryTelemetry.$tryGetTitle = function CommandControllerStoryTelemetry$TryGetTitle(storyboard, title) {
		if (storyboard.get_isTitleVisible() === false) {
			title.$ = '';
			return true;
		}
		if (ss.isNullOrUndefined(storyboard.get_zoneModels())) {
			title.$ = null;
			return false;
		}
		var zm = _.find(storyboard.get_zoneModels(), function(z) {
			return z.get_zoneType() === 'title';
		});
		title.$ = ((ss.isValue(zm) && ss.isValue(zm.get_zoneCommonModel()) && ss.isValue(zm.get_zoneCommonModel().get_zoneCommonPresModel()) && ss.isValue(zm.get_zoneCommonModel().get_zoneCommonPresModel().name)) ? zm.get_zoneCommonModel().get_zoneCommonPresModel().name.toString() : null);
		return ss.isValue(title.$);
	};
	$tab_CommandControllerStoryTelemetry.$tryGetFlipboardNavigatorModel = function CommandControllerStoryTelemetry$TryGetFlipboardNavigatorModel(storyboard, flipboardNavModel) {
		flipboardNavModel.$ = (ss.isValue(storyboard.get_flipboardNavModel()) ? storyboard.get_flipboardNavModel() : null);
		return ss.isValue(flipboardNavModel.$);
	};
	$tab_CommandControllerStoryTelemetry.$tryGetDashboardSize = function CommandControllerStoryTelemetry$TryGetDashboardSize(storyboard, dashboardSize) {
		dashboardSize.$ = (ss.isValue(storyboard.get_dashboardSize()) ? storyboard.get_dashboardSize() : null);
		return ss.isValue(dashboardSize.$);
	};
	$tab_CommandControllerStoryTelemetry.$tryGetSelectedStoryPointStyle = function CommandControllerStoryTelemetry$TryGetSelectedStoryPointStyle(flipboardNavModel, captionStyle) {
		captionStyle.$ = ((ss.isValue(flipboardNavModel.get_flipboardNavPresModel()) && ss.isValue(flipboardNavModel.get_flipboardNavPresModel().selectedStoryPointStyle)) ? flipboardNavModel.get_flipboardNavPresModel().selectedStoryPointStyle : null);
		return ss.isValue(captionStyle.$);
	};
	$tab_CommandControllerStoryTelemetry.$tryGetStoryPoints = function CommandControllerStoryTelemetry$TryGetStoryPoints(flipboardNavModel, points) {
		points.$ = (ss.isValue(flipboardNavModel.get_storyPoints()) ? flipboardNavModel.get_storyPoints() : null);
		return ss.isValue(points.$);
	};
	$tab_CommandControllerStoryTelemetry.$tryGetSheetsInfo = function CommandControllerStoryTelemetry$TryGetSheetsInfo(sheets) {
		sheets.$ = ((ss.isValue($tab_ApplicationModel.get_instance().get_workbook()) && ss.isValue($tab_ApplicationModel.get_instance().get_workbook().get_sheetsInfo())) ? $tab_ApplicationModel.get_instance().get_workbook().get_sheetsInfo() : null);
		return ss.isValue(sheets.$);
	};
	global.tab.CommandControllerStoryTelemetry = $tab_CommandControllerStoryTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandControllerTelemetry
	var $tab_CommandControllerTelemetry = function() {
	};
	$tab_CommandControllerTelemetry.__typeName = 'tab.CommandControllerTelemetry';
	$tab_CommandControllerTelemetry.$bootstrapCompleteTelemetry = function CommandControllerTelemetry$BootstrapCompleteTelemetry() {
		if ($tab_OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('WebAuthoringOnlineTelemetry')) {
			_.defer(function() {
				var platformInfo = null;
				$tab_PlatformInfo.getInfo().done(function(info) {
					platformInfo = info;
				}).always(function() {
					_.defer(function() {
						var isAndroid, isChrome, isEdge, isIe, isFirefox, isMac, isOpera, isSafari, isWindows;
						isAndroid = isChrome = isEdge = isIe = isFirefox = isMac = isOpera = isSafari = isWindows = false;
						if (ss.isValue(platformInfo)) {
							ss.Debug.assert(ss.isValue(platformInfo.get_OS()), 'platformInfo.OS != null');
							if (ss.isValue(platformInfo.get_name())) {
								isChrome = ss.startsWithString(platformInfo.get_name(), 'Chrome');
								isEdge = ss.startsWithString(platformInfo.get_name(), 'Microsoft Edge');
								isIe = ss.startsWithString(platformInfo.get_name(), 'IE');
								isFirefox = ss.startsWithString(platformInfo.get_name(), 'Firefox');
								isOpera = ss.startsWithString(platformInfo.get_name(), 'Opera');
								isSafari = ss.startsWithString(platformInfo.get_name(), 'Safari');
							}
							if (ss.isValue(platformInfo.get_OS().get_family())) {
								isAndroid = ss.startsWithString(platformInfo.get_OS().get_family(), 'Android');
								isMac = ss.startsWithString(platformInfo.get_OS().get_family(), 'OS X') || ss.startsWithString(platformInfo.get_OS().get_family(), 'Mac');
								isWindows = ss.startsWithString(platformInfo.get_OS().get_family(), 'Windows') && !ss.startsWithString(platformInfo.get_OS().get_family(), 'Windows Phone');
							}
						}
						var screen = window.screen;
						var worksheetInfo = $tab_ModelUtils.getSheetInfoPresModel($tab_ApplicationModel.get_instance(), tsConfig.current_sheet_name);
						var bootstrapPropertyNameValuePairs = ss.mkdict(['Authoring', tsConfig.is_authoring, 'Embedded', tsConfig.embedded, 'HighDpi', tsConfig.highDpi, 'Mobile', tsConfig.is_mobile, 'MobileApp', tsConfig.is_mobile_app, 'MobileDevice', tsConfig.is_mobile_device, 'Version', tsConfig.version, 'LocalRender', $tab_ApplicationModel.get_instance().get_isLocalRenderMode(), 'Android', isAndroid, 'Chrome', isChrome, 'ChromeVersion', BrowserSupport.BrowserSupport.GoogleChromeVersion(), 'DevicePixelRatio', BrowserSupport.BrowserSupport.DevicePixelRatio(), 'Edge', isEdge, 'Firefox', isFirefox, 'Geolocation', BrowserSupport.BrowserSupport.IsGeolocationSupported(), 'IE', isIe, 'IEVersion', BrowserSupport.BrowserSupport.BrowserVersion(), 'IOS', BrowserSupport.BrowserSupport.IsIos(), 'IOSVersion', BrowserSupport.BrowserSupport.IosVersion(), 'Ipad', BrowserSupport.BrowserSupport.IsIpad(), 'Mac', isMac, 'Opera', isOpera, 'Safari', isSafari, 'SafariVersion', BrowserSupport.BrowserSupport.SafariVersion(), 'Windows', isWindows, 'EmbedMode', tabBootstrap.EmbedAndViewportCalculator.get_embedMode(), 'ScreenWidth', screen.width, 'ScreenHeight', screen.height, 'ViewportWidth', window.innerWidth, 'ViewportHeight', window.innerHeight, 'Dashboard', (ss.isValue(worksheetInfo) ? worksheetInfo.isDashboard : false), 'Published', (ss.isValue(worksheetInfo) ? worksheetInfo.isPublished : false), 'Story', (ss.isValue(worksheetInfo) ? (ss.isValue(worksheetInfo.isStory) && worksheetInfo.isStory) : false), 'Worksheets', ((ss.isValue(worksheetInfo) && ss.isValue(worksheetInfo.namesOfSubsheets)) ? worksheetInfo.namesOfSubsheets.length : 0), 'Tabs', (_.isArray(tsConfig.visible_sheets) ? tsConfig.visible_sheets.length : 0)]);
						bootstrapPropertyNameValuePairs['Touch'] = BrowserSupport.BrowserSupport.IsTouch();
						$tab_OnlineAnalyticsClient.logEvent('Bootstrap', bootstrapPropertyNameValuePairs);
						$tab_CommandControllerTelemetry.$bootstrapEvents.push(bootstrapPropertyNameValuePairs);
						$(window).data('Bootstrap', $tab_CommandControllerTelemetry.$bootstrapEvents);
						if (ss.isValue(platformInfo)) {
							ss.Debug.assert(ss.isValue(platformInfo.get_OS()), 'platformInfo.OS != null,');
							var platformPropertyNameValuePairs = ss.mkdict(['Description', ss.coalesce(platformInfo.get_description(), ''), 'Layout', ss.coalesce(platformInfo.get_layout(), ''), 'Manufacturer', ss.coalesce(platformInfo.get_manufacturer(), ''), 'Name', ss.coalesce(platformInfo.get_name(), ''), 'Prerelease', ss.coalesce(platformInfo.get_prerelease(), ''), 'Product', ss.coalesce(platformInfo.get_product(), ''), 'UserAgent', platformInfo.get_userAgent(), 'Version', ss.coalesce(platformInfo.get_version(), ''), 'System', ss.coalesce(platformInfo.get_OS().get_description(), ''), 'SystemArchitecture', ss.coalesce(platformInfo.get_OS().get_architecture(), ''), 'SystemFamily', ss.coalesce(platformInfo.get_OS().get_family(), ''), 'SystemVersion', ss.coalesce(platformInfo.get_OS().get_version(), '')]);
							$tab_OnlineAnalyticsClient.logEvent('Platform', platformPropertyNameValuePairs);
							$tab_CommandControllerTelemetry.$platformEvents.push(platformPropertyNameValuePairs);
							$(window).data('Platform', $tab_CommandControllerTelemetry.$platformEvents);
						}
					});
				});
			});
		}
	};
	global.tab.CommandControllerTelemetry = $tab_CommandControllerTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandExecutionResult
	var $tab_CommandExecutionResult = function(succeeded, error) {
		this.succeeded = false;
		this.error = null;
		this.succeeded = succeeded;
		ss.Debug.assert((succeeded ? ss.isNullOrUndefined(error) : true), 'When command succeeded, no exception should be passed');
		this.error = error;
	};
	$tab_CommandExecutionResult.__typeName = 'tab.CommandExecutionResult';
	global.tab.CommandExecutionResult = $tab_CommandExecutionResult;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandInterceptorResult
	var $tab_CommandInterceptorResult = function() {
	};
	$tab_CommandInterceptorResult.__typeName = 'tab.CommandInterceptorResult';
	global.tab.CommandInterceptorResult = $tab_CommandInterceptorResult;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandItemBasedUbertipButtonModel
	var $tab_CommandItemBasedUbertipButtonModel = function() {
		$tab_UbertipButtonModel.call(this);
	};
	$tab_CommandItemBasedUbertipButtonModel.__typeName = 'tab.CommandItemBasedUbertipButtonModel';
	global.tab.CommandItemBasedUbertipButtonModel = $tab_CommandItemBasedUbertipButtonModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandItemWrapper
	var $tab_CommandItemWrapper = function(itemModel) {
		this.$item = null;
		if (ss.isValue(itemModel)) {
			this.$item = itemModel;
		}
		else {
			this.$item = {};
			this.set_commandsType('item');
		}
		tab.KeyboardShortcutManager.tryUpdateKeyboardShortcut(this.get_commandName(), this);
	};
	$tab_CommandItemWrapper.__typeName = 'tab.CommandItemWrapper';
	$tab_CommandItemWrapper.create = function CommandItemWrapper$Create(item) {
		if (!ss.isValue(item)) {
			return null;
		}
		var command = item['command'.toString()];
		var actualCommand = $tab_CommandSerializer.deserialize(command, false);
		if (ss.isValue(actualCommand)) {
			var commandId = { ns: actualCommand.commandNamespace, cmd: actualCommand.commandName };
			if ($tab_WebCommandRegistry.get_instance().hasCommand(commandId)) {
				return new $tab_WebCommandItemWrapper(item);
			}
		}
		return new $tab_CommandItemWrapper(item);
	};
	global.tab.CommandItemWrapper = $tab_CommandItemWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandLocalOptions
	var $tab_CommandLocalOptions = function() {
		this.localWorkFactory = null;
		this.blocking = null;
		this.suppressConnectionDialog = false;
	};
	$tab_CommandLocalOptions.__typeName = 'tab.CommandLocalOptions';
	global.tab.CommandLocalOptions = $tab_CommandLocalOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandModel
	var $tab_CommandModel = function() {
		this.command = null;
		this.description = null;
		this.imageRes = null;
		this.status = 'enabled';
		this.$1$CommandTypeField = 0;
		this.$1$NameField = null;
	};
	$tab_CommandModel.__typeName = 'tab.CommandModel';
	global.tab.CommandModel = $tab_CommandModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandModelBasedUbertipButtonModel
	var $tab_CommandModelBasedUbertipButtonModel = function() {
		$tab_UbertipButtonModel.call(this);
	};
	$tab_CommandModelBasedUbertipButtonModel.__typeName = 'tab.CommandModelBasedUbertipButtonModel';
	global.tab.CommandModelBasedUbertipButtonModel = $tab_CommandModelBasedUbertipButtonModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandPermission
	var $tab_CommandPermission = function(availableTypes) {
		this.$availableCommands = null;
		this.$availableCommands = {};
		var $t1 = ss.getEnumerator(availableTypes);
		try {
			while ($t1.moveNext()) {
				var availableType = $t1.current();
				this.$availableCommands[availableType] = $tab_CommandPermission.$permissionGranted;
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$tab_CommandPermission.__typeName = 'tab.CommandPermission';
	global.tab.CommandPermission = $tab_CommandPermission;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandRedirectRegistry
	var $tab_CommandRedirectRegistry = function() {
	};
	$tab_CommandRedirectRegistry.__typeName = 'tab.CommandRedirectRegistry';
	$tab_CommandRedirectRegistry.checkpointRegistry = function CommandRedirectRegistry$CheckpointRegistry() {
		var toResore = $tab_CommandRedirectRegistry.$registry;
		$tab_CommandRedirectRegistry.$registry = $.extend(false, {}, toResore);
		return function() {
			$tab_CommandRedirectRegistry.$registry = toResore;
		};
	};
	$tab_CommandRedirectRegistry.registerHandler = function CommandRedirectRegistry$RegisterHandler(commandRedirectType, handler) {
		tab.Param.verifyValue(commandRedirectType, 'commandRedirectType');
		tab.Param.verifyValue(handler, 'handler');
		if (ss.isNullOrUndefined($tab_CommandRedirectRegistry.$registry)) {
			$tab_CommandRedirectRegistry.$registry = {};
		}
		$tab_CommandRedirectRegistry.$registry[commandRedirectType] = handler;
	};
	$tab_CommandRedirectRegistry.handleRedirect = function CommandRedirectRegistry$HandleRedirect(type, model) {
		if (ss.isNullOrUndefined($tab_CommandRedirectRegistry.$registry) || !ss.keyExists($tab_CommandRedirectRegistry.$registry, type)) {
			throw new ss.Exception('No command redirect registerd for type: ' + type);
		}
		var handler = $tab_CommandRedirectRegistry.$registry[type];
		return handler(model);
	};
	global.tab.CommandRedirectRegistry = $tab_CommandRedirectRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandResponseEventArgs
	var $tab_CommandResponseEventArgs = function() {
		this.$2$ApplicationPresModelField = null;
		this.$2$WorldUpdateCommandField = null;
		this.$2$SheetChangedField = false;
		this.$2$RebuildTheWorldField = false;
		ss.EventArgs.call(this);
	};
	$tab_CommandResponseEventArgs.__typeName = 'tab.CommandResponseEventArgs';
	global.tab.CommandResponseEventArgs = $tab_CommandResponseEventArgs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandSerializer
	var $tab_CommandSerializer = function() {
	};
	$tab_CommandSerializer.__typeName = 'tab.CommandSerializer';
	$tab_CommandSerializer.get_$log = function CommandSerializer$get_Log() {
		return tab.Logger.lazyGetLogger($tab_CommandSerializer);
	};
	$tab_CommandSerializer.buildDocCommandName = function CommandSerializer$BuildDocCommandName(command) {
		return $tab_CommandSerializer.buildQualifiedCommandName('tabdoc', command.cmd);
	};
	$tab_CommandSerializer.buildQualifiedCommandName = function CommandSerializer$BuildQualifiedCommandName(commandNamespace, command) {
		return commandNamespace + ':' + command;
	};
	$tab_CommandSerializer.deserialize = function CommandSerializer$Deserialize(serializedCommand, cacheable) {
		var command;
		if (cacheable) {
			command = $tab_CommandSerializer.$deserializedCommandCache[serializedCommand];
			if (ss.isValue(command)) {
				return command;
			}
		}
		var commandRegex = new RegExp('^(\\w+):([\\w-]+)( ((.|\n|\r|\r\n)*))?$');
		var matches = commandRegex.exec(serializedCommand);
		if (ss.isNullOrUndefined(matches) || matches.length === 0) {
			$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Unable to parse command: %s'), [serializedCommand]);
			return null;
		}
		command = { commandNamespace: matches[1], commandName: matches[2] };
		$tab_CommandSerializer.$deserializeParams(command, matches[4]);
		if (cacheable) {
			$tab_CommandSerializer.$addCommandToCache(serializedCommand, command);
		}
		$tab_CommandSerializer.get_$log().debug('Deserialized a command: %s:%s params=%o', [command.commandNamespace, command.commandName, command.commandParams]);
		return command;
	};
	$tab_CommandSerializer.getCommandType = function CommandSerializer$GetCommandType(command) {
		if (ss.keyExists($tab_CommandSerializer.$typesByName, command.commandName)) {
			return $tab_CommandSerializer.$typesByName[command.commandName];
		}
		else {
			return null;
		}
	};
	$tab_CommandSerializer.$addCommandToCache = function CommandSerializer$AddCommandToCache(commandStr, deserializedCommand) {
		if ($tab_CommandSerializer.$deserializedCommandCacheKeys.length >= $tab_CommandSerializer.$commandCacheSize) {
			var purgedCommand = $tab_CommandSerializer.$deserializedCommandCacheKeys.shift();
			delete $tab_CommandSerializer.$deserializedCommandCache[purgedCommand];
		}
		$tab_CommandSerializer.$deserializedCommandCache[commandStr] = deserializedCommand;
		$tab_CommandSerializer.$deserializedCommandCacheKeys.push(commandStr);
	};
	$tab_CommandSerializer.$deserializeParams = function CommandSerializer$DeserializeParams(command, paramsString) {
		if (ss.isNullOrEmptyString(paramsString)) {
			$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Empty paramters'), []);
			return;
		}
		var sb = new ss.StringBuilder();
		var paramChars = new Array();
		for (var i = paramsString.length - 1; i >= 0; i--) {
			paramChars.push(paramsString.substr(i, 1));
		}
		while (paramChars.length > 0) {
			var paramName = $tab_CommandSerializer.$parseParamName(paramChars, sb);
			if (!ss.isValue(paramName)) {
				return;
			}
			var paramValue = $tab_CommandSerializer.$parseParamValue(paramChars, sb);
			if (ss.isNullOrUndefined(paramValue)) {
				return;
			}
			if (paramValue === '{}') {
				$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Skipping empty parameter value: %s=%s'), [paramName, paramValue]);
				continue;
			}
			if (ss.isNullOrUndefined(command.commandParams)) {
				command.commandParams = {};
			}
			command.commandParams[ss.unbox(paramName)] = paramValue;
		}
	};
	$tab_CommandSerializer.$parseParamName = function CommandSerializer$ParseParamName(paramString, sb) {
		sb.clear();
		var nextLetterIsCapital = false;
		while (paramString.length > 0) {
			var value = paramString.pop();
			switch (value) {
				case '=': {
					return sb.toString().trim();
				}
				case '-': {
					nextLetterIsCapital = true;
					break;
				}
				default: {
					if (nextLetterIsCapital) {
						sb.append(value.toUpperCase());
						nextLetterIsCapital = false;
					}
					else {
						sb.append(value);
					}
					break;
				}
			}
		}
		return null;
	};
	$tab_CommandSerializer.$shouldKeepEscapeCharForParamValue = function CommandSerializer$ShouldKeepEscapeCharForParamValue(valIsString, safePeek, context) {
		if (valIsString) {
			if (safePeek() !== '\\') {
				context.push('\\');
				return false;
			}
			else {
				context.pop();
			}
		}
		else if (safePeek() === '"') {
			context.push('\\');
		}
		return true;
	};
	$tab_CommandSerializer.$parseParamValue = function CommandSerializer$ParseParamValue(paramString, sb) {
		sb.clear();
		var context = new Array();
		var safePeek = function() {
			return ((context.length > 0) ? ss.arrayPeekBack(context) : '');
		};
		var valIsString = paramString.length > 1 && ss.arrayPeekBack(paramString) === '"';
		while (paramString.length > 0) {
			var value = paramString.pop();
			var keepValue = true;
			switch (value) {
				case '\\': {
					keepValue = $tab_CommandSerializer.$shouldKeepEscapeCharForParamValue(valIsString, safePeek, context);
					break;
				}
				case '"': {
					if (safePeek() === '\\') {
						context.pop();
					}
					else if (safePeek() === '"') {
						context.pop();
						if (context.length === 0) {
							keepValue = false;
						}
					}
					else {
						if (context.length === 0) {
							keepValue = false;
						}
						context.push('"');
					}
					break;
				}
				case '[': {
					if (safePeek() === '"') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Ignoring [ inside a string'), []);
					}
					else {
						context.push('[');
					}
					break;
				}
				case ']': {
					if (safePeek() === '"') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Ignoring ] inside a string'), []);
					}
					else if (safePeek() !== '[') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Mismatched ]'), []);
					}
					else {
						context.pop();
					}
					break;
				}
				case '{': {
					if (safePeek() === '"') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Ignoring { inside a string'), []);
					}
					else {
						context.push('{');
					}
					break;
				}
				case '}': {
					if (safePeek() === '"') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Ignoring } inside a string'), []);
					}
					else if (safePeek() !== '{') {
						$tab_CommandSerializer.get_$log().debug(tab.Strings.noLoc('Mismatched }'), []);
					}
					else {
						context.pop();
					}
					break;
				}
				default: {
					if (safePeek() === '\\') {
						context.pop();
					}
					break;
				}
			}
			if (keepValue) {
				sb.append(value);
			}
			if (context.length === 0) {
				return sb.toString();
			}
		}
		return null;
	};
	global.tab.CommandSerializer = $tab_CommandSerializer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Models.CommandsModel
	var $tab_CommandsModel = function(parent) {
		this.$shouldUpdate = true;
		this.$2$CommandsChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('commands'.toString(), null));
	};
	$tab_CommandsModel.__typeName = 'tab.CommandsModel';
	global.tab.CommandsModel = $tab_CommandsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandsPresModelWrapper
	var $tab_CommandsPresModelWrapper = function() {
		$tab_CommandsPresModelWrapper.$ctor1.call(this, {});
	};
	$tab_CommandsPresModelWrapper.__typeName = 'tab.CommandsPresModelWrapper';
	$tab_CommandsPresModelWrapper.$ctor1 = function(commandsPM) {
		this.$model = null;
		this.$model = commandsPM;
		if (ss.isNullOrUndefined(this.get_commandItems())) {
			this.set_commandItems([]);
		}
	};
	$tab_CommandsPresModelWrapper.create = function CommandsPresModelWrapper$Create(pm) {
		return (ss.isNullOrUndefined(pm) ? null : new $tab_CommandsPresModelWrapper.$ctor1(pm));
	};
	global.tab.CommandsPresModelWrapper = $tab_CommandsPresModelWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandThrottlerTarget
	var $tab_CommandThrottlerTarget = function() {
		this.commandNamespace = '';
		this.commandName = '';
	};
	$tab_CommandThrottlerTarget.__typeName = 'tab.CommandThrottlerTarget';
	global.tab.CommandThrottlerTarget = $tab_CommandThrottlerTarget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommandUtils
	var $tab_CommandUtils = function() {
	};
	$tab_CommandUtils.__typeName = 'tab.CommandUtils';
	$tab_CommandUtils.newCommand = function CommandUtils$NewCommand(commandId, cmdParams) {
		var c = { commandName: commandId.cmd, commandNamespace: commandId.ns };
		if (ss.isValue(cmdParams)) {
			c.commandParams = cmdParams;
		}
		return c;
	};
	$tab_CommandUtils.serialize = function CommandUtils$Serialize(commandId) {
		return commandId.ns + ':' + commandId.cmd;
	};
	$tab_CommandUtils.getVisualIdsToAddToCommand = function CommandUtils$GetVisualIdsToAddToCommand(visualId) {
		var returnValue = [];
		if (tab.MiscUtil.isNullOrEmpty$3(visualId.storyboard)) {
			returnValue.push({ item1: 'worksheet', item2: visualId.worksheet });
			if (ss.isValue(visualId.dashboard) && visualId.dashboard.toString().length > 0) {
				returnValue.push({ item1: 'dashboard', item2: visualId.dashboard });
			}
		}
		else {
			returnValue.push({ item1: 'visualIdPresModel', item2: JSON.stringify(visualId) });
		}
		return returnValue;
	};
	$tab_CommandUtils.addVisualIdToCommand = function CommandUtils$AddVisualIdToCommand(cmdParams, visualId) {
		var visualIdsToAdd = $tab_CommandUtils.getVisualIdsToAddToCommand(visualId);
		for (var i = 0; i < visualIdsToAdd.length; i++) {
			var docParam = visualIdsToAdd[i].item1;
			var visualIdString = visualIdsToAdd[i].item2;
			cmdParams[docParam] = visualIdString;
		}
	};
	$tab_CommandUtils.addStoryPointToCommand = function CommandUtils$AddStoryPointToCommand(cmdParams, sheetPath) {
		if (ss.isValue(sheetPath.storyboard)) {
			cmdParams['storyboard'] = sheetPath.storyboard;
			cmdParams['flipboardZoneId'] = sheetPath.flipboardZoneId.toString();
			cmdParams['storyPointId'] = sheetPath.storyPointId.toString();
		}
	};
	$tab_CommandUtils.duplicateCommand = function CommandUtils$DuplicateCommand(command) {
		var copy = {};
		$.extend(true, copy, command);
		return copy;
	};
	$tab_CommandUtils.createCommandRedirectSuccessHandler = function CommandUtils$CreateCommandRedirectSuccessHandler(deferred) {
		deferred = deferred || $.Deferred();
		return function(pm) {
			if (_.isObject(pm) && 'commandRedirectType'.toString() in pm) {
				var action = pm['commandRedirectType'.toString()];
				var redirectDeferred = $tab_CommandRedirectRegistry.handleRedirect(action, pm);
				redirectDeferred.pipe(function() {
					deferred.resolve(pm);
					return pm;
				}, function() {
					deferred.reject();
					return pm;
				});
			}
			else {
				deferred.resolve(pm);
			}
		};
	};
	$tab_CommandUtils.executeSimpleCommand$1 = function(T) {
		return function CommandUtils$ExecuteSimpleCommand(simpleCommand, uiBlocking) {
			var deferred = $.Deferred();
			var redirectDeferred = $.Deferred().done([function(pm) {
				deferred.resolve(ss.cast(pm, T));
			}]).fail([function(pm1) {
				deferred.reject.apply(deferred, null);
			}]);
			$tab_ServerCommands.executeServerCommand($tab_CommandSerializer.deserialize($tab_SimpleCommandsPresModelWrapper.create(simpleCommand).get_simpleCommand(), false), uiBlocking, $tab_CommandUtils.createCommandRedirectSuccessHandler(redirectDeferred), function(e) {
				deferred.reject.apply(deferred, null);
			});
			return deferred;
		};
	};
	$tab_CommandUtils.executeSimpleCommand = function CommandUtils$ExecuteSimpleCommand(simpleCommand, uiBlocking) {
		return $tab_CommandUtils.executeSimpleCommand$1(Object).call(null, simpleCommand, uiBlocking);
	};
	global.tab.CommandUtils = $tab_CommandUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CommentingServer
	var $tab_CommentingServer = function(createVizportalRequest, baseSession) {
		this.$createVizportalRequest = null;
		this.$baseSession = null;
		this.$createVizportalRequest = createVizportalRequest;
		this.$baseSession = baseSession;
	};
	$tab_CommentingServer.__typeName = 'tab.CommentingServer';
	global.tab.CommentingServer = $tab_CommentingServer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CompoundTableCalcModel
	var $tab_CompoundTableCalcModel = function(parent) {
		this.$primaryTableCalcModel = null;
		this.$secondaryTableCalcModel = null;
		this.$2$CompoundTableCalcUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('compoundTableCalculationPresModel'.toString(), null));
		this.$primaryTableCalcModel = new $tab_TableCalcModel(this);
		this.$secondaryTableCalcModel = new $tab_TableCalcModel(this);
		this.$secondaryTableCalcModel.get_tableCalcIdentifier().update({ calcNestingLevel: 'secondary', fn: '' });
	};
	$tab_CompoundTableCalcModel.__typeName = 'tab.CompoundTableCalcModel';
	$tab_CompoundTableCalcModel.$getPresModelTableCalc = function CompoundTableCalcModel$GetPresModelTableCalc(thePresModel, index) {
		if (ss.isValue(thePresModel) && ss.isValue(thePresModel.tableCalculationPresModels) && thePresModel.tableCalculationPresModels.length > index) {
			return thePresModel.tableCalculationPresModels[index];
		}
		return null;
	};
	global.tab.CompoundTableCalcModel = $tab_CompoundTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ConnectionClass
	var $tab_ConnectionClass = function() {
	};
	$tab_ConnectionClass.__typeName = 'tab.ConnectionClass';
	$tab_ConnectionClass.get_supportedTableauServerClasses = function ConnectionClass$get_SupportedTableauServerClasses() {
		var result = $.Deferred();
		$tab_ConnectionClass.setupServerConnectionTypes().done([function() {
			result.resolve($tab_ConnectionClass.$supportedTableauServerClassesCached);
		}]);
		return result.promise();
	};
	$tab_ConnectionClass.get_getSupportedFileClasses = function ConnectionClass$get_GetSupportedFileClasses() {
		return $tab_ConnectionClass.$fileConnectionClasses;
	};
	$tab_ConnectionClass.setupServerConnectionTypes = function ConnectionClass$SetupServerConnectionTypes() {
		if (ss.isValue($tab_ConnectionClass.$wasServerConnectionTypesCalled)) {
			return $tab_ConnectionClass.$wasServerConnectionTypesCalled;
		}
		var result = $.Deferred();
		$tab_ConnectionClass.$wasServerConnectionTypesCalled = result;
		$tab_DataConnectionCommands.get_serverConnectionTypes().done(function(serverTypes) {
			var tableauServerConnections = serverTypes.item1;
			$tab_ConnectionClass.$supportedTableauServerClassesCached = [];
			for (var $t1 = 0; $t1 < tableauServerConnections.length; $t1++) {
				var connectionPM = tableauServerConnections[$t1];
				$tab_ConnectionClass.$supportedTableauServerClassesCached.push(connectionPM.valueClassAttr.toString());
			}
			_.each(serverTypes.item2, function(connectionType) {
				$tab_ConnectionClass.$supportedConnectionClassesToTypes[connectionType.valueClassAttr] = connectionType;
			});
			result.resolve();
		});
		return $tab_ConnectionClass.$wasServerConnectionTypesCalled;
	};
	$tab_ConnectionClass.getConnectionType = function ConnectionClass$GetConnectionType(connectionClass) {
		var result = $.Deferred();
		$tab_ConnectionClass.setupServerConnectionTypes().done([function() {
			result.resolve($tab_ConnectionClass.$supportedConnectionClassesToTypes[connectionClass]);
		}]).fail([function(exception) {
			result.reject(exception);
		}]);
		return result.promise();
	};
	$tab_ConnectionClass.getConnectionTypeCategory = function ConnectionClass$GetConnectionTypeCategory(connectionClass) {
		var result = $.Deferred();
		$tab_ConnectionClass.getConnectionType(connectionClass).done(function(connectionType) {
			result.resolve((ss.isNullOrUndefined(connectionType) ? 'invalid' : connectionType.connectionTypeCategory));
		}).fail(function(exception) {
			result.reject(exception);
		});
		return result.promise();
	};
	$tab_ConnectionClass.$getCorsProxyUrlPrefix = function ConnectionClass$GetCorsProxyUrlPrefix(connectionTypePresModel) {
		var relativeCorsProxyPrefixUrl = connectionTypePresModel.proxyUrlPrefix;
		return (ss.isNullOrEmptyString(relativeCorsProxyPrefixUrl) ? '' : tab.UriUtil.makeAbsoluteCorsProxyPrefixUrl(relativeCorsProxyPrefixUrl));
	};
	$tab_ConnectionClass.getFileConnectionInfo = function ConnectionClass$GetFileConnectionInfo(connectionClass, connectionConfigName) {
		var result = $.Deferred();
		$tab_ConnectionClass.getConnectionType(connectionClass).done(function(connectionTypePresModel) {
			var supportedExtensions;
			if (ss.isNullOrUndefined(connectionConfigName)) {
				supportedExtensions = connectionTypePresModel.fileExtensions;
			}
			else {
				var connectionSummary = $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema().findConnectionSummaryByName(connectionConfigName);
				ss.Debug.assert(ss.isValue(connectionSummary), 'the connectionConfigName ' + connectionConfigName + ' could not be found');
				supportedExtensions = connectionSummary.fileExtensions;
			}
			result.resolve(new $tab_FileConnectionInfo(supportedExtensions, $tab_ConnectionClass.$getCorsProxyUrlPrefix(connectionTypePresModel)));
		}).fail(function(exception) {
			result.reject(exception);
		});
		return result.promise();
	};
	global.tab.ConnectionClass = $tab_ConnectionClass;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ConstructableFontFamily
	var $tab_ConstructableFontFamily = function(fontGroup) {
		$tab_FontFamily.$ctor1.call(this, fontGroup, []);
	};
	$tab_ConstructableFontFamily.__typeName = 'tab.ConstructableFontFamily';
	global.tab.ConstructableFontFamily = $tab_ConstructableFontFamily;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CopyTempFileToSessionSpecificStorageCmd
	var $tab_CopyTempFileToSessionSpecificStorageCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CopyTempFileToSessionSpecificStorageCmd$Response]).call(this);
	};
	$tab_CopyTempFileToSessionSpecificStorageCmd.__typeName = 'tab.CopyTempFileToSessionSpecificStorageCmd';
	global.tab.CopyTempFileToSessionSpecificStorageCmd = $tab_CopyTempFileToSessionSpecificStorageCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CopyTempFileToSessionSpecificStorageCmd.Response
	var $tab_CopyTempFileToSessionSpecificStorageCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CopyTempFileToSessionSpecificStorageCmd$Response.__typeName = 'tab.CopyTempFileToSessionSpecificStorageCmd$Response';
	global.tab.CopyTempFileToSessionSpecificStorageCmd$Response = $tab_CopyTempFileToSessionSpecificStorageCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateAndEstablishCloudConnectionCmd
	var $tab_CreateAndEstablishCloudConnectionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateAndEstablishCloudConnectionCmd$Response]).call(this);
	};
	$tab_CreateAndEstablishCloudConnectionCmd.__typeName = 'tab.CreateAndEstablishCloudConnectionCmd';
	global.tab.CreateAndEstablishCloudConnectionCmd = $tab_CreateAndEstablishCloudConnectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateAndEstablishCloudConnectionCmd.Response
	var $tab_CreateAndEstablishCloudConnectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateAndEstablishCloudConnectionCmd$Response.__typeName = 'tab.CreateAndEstablishCloudConnectionCmd$Response';
	global.tab.CreateAndEstablishCloudConnectionCmd$Response = $tab_CreateAndEstablishCloudConnectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateAndEstablishConnectionCmd
	var $tab_CreateAndEstablishConnectionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateAndEstablishConnectionCmd$Response]).call(this);
	};
	$tab_CreateAndEstablishConnectionCmd.__typeName = 'tab.CreateAndEstablishConnectionCmd';
	global.tab.CreateAndEstablishConnectionCmd = $tab_CreateAndEstablishConnectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateAndEstablishConnectionCmd.Response
	var $tab_CreateAndEstablishConnectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateAndEstablishConnectionCmd$Response.__typeName = 'tab.CreateAndEstablishConnectionCmd$Response';
	global.tab.CreateAndEstablishConnectionCmd$Response = $tab_CreateAndEstablishConnectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateAnnotationCmd
	var $tab_CreateAnnotationCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateAnnotationCmd$Response]).call(this);
	};
	$tab_CreateAnnotationCmd.__typeName = 'tab.CreateAnnotationCmd';
	global.tab.CreateAnnotationCmd = $tab_CreateAnnotationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateAnnotationCmd.Response
	var $tab_CreateAnnotationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateAnnotationCmd$Response.__typeName = 'tab.CreateAnnotationCmd$Response';
	global.tab.CreateAnnotationCmd$Response = $tab_CreateAnnotationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateAnnotationRichTextEditorCmd
	var $tab_CreateAnnotationRichTextEditorCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateAnnotationRichTextEditorCmd$Response]).call(this);
	};
	$tab_CreateAnnotationRichTextEditorCmd.__typeName = 'tab.CreateAnnotationRichTextEditorCmd';
	global.tab.CreateAnnotationRichTextEditorCmd = $tab_CreateAnnotationRichTextEditorCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateAnnotationRichTextEditorCmd.Response
	var $tab_CreateAnnotationRichTextEditorCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateAnnotationRichTextEditorCmd$Response.__typeName = 'tab.CreateAnnotationRichTextEditorCmd$Response';
	global.tab.CreateAnnotationRichTextEditorCmd$Response = $tab_CreateAnnotationRichTextEditorCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateDataSourceFromFileUploadCmd
	var $tab_CreateDataSourceFromFileUploadCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateDataSourceFromFileUploadCmd$Response]).call(this);
	};
	$tab_CreateDataSourceFromFileUploadCmd.__typeName = 'tab.CreateDataSourceFromFileUploadCmd';
	global.tab.CreateDataSourceFromFileUploadCmd = $tab_CreateDataSourceFromFileUploadCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateDataSourceFromFileUploadCmd.Response
	var $tab_CreateDataSourceFromFileUploadCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateDataSourceFromFileUploadCmd$Response.__typeName = 'tab.CreateDataSourceFromFileUploadCmd$Response';
	global.tab.CreateDataSourceFromFileUploadCmd$Response = $tab_CreateDataSourceFromFileUploadCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateWorksheetTitleRichTextEditorCmd
	var $tab_CreateWorksheetTitleRichTextEditorCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateWorksheetTitleRichTextEditorCmd$Response]).call(this);
	};
	$tab_CreateWorksheetTitleRichTextEditorCmd.__typeName = 'tab.CreateWorksheetTitleRichTextEditorCmd';
	global.tab.CreateWorksheetTitleRichTextEditorCmd = $tab_CreateWorksheetTitleRichTextEditorCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateWorksheetTitleRichTextEditorCmd.Response
	var $tab_CreateWorksheetTitleRichTextEditorCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateWorksheetTitleRichTextEditorCmd$Response.__typeName = 'tab.CreateWorksheetTitleRichTextEditorCmd$Response';
	global.tab.CreateWorksheetTitleRichTextEditorCmd$Response = $tab_CreateWorksheetTitleRichTextEditorCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateZoneRichTextEditorCmd
	var $tab_CreateZoneRichTextEditorCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateZoneRichTextEditorCmd$Response]).call(this);
	};
	$tab_CreateZoneRichTextEditorCmd.__typeName = 'tab.CreateZoneRichTextEditorCmd';
	global.tab.CreateZoneRichTextEditorCmd = $tab_CreateZoneRichTextEditorCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CreateZoneRichTextEditorCmd.Response
	var $tab_CreateZoneRichTextEditorCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_CreateZoneRichTextEditorCmd$Response.__typeName = 'tab.CreateZoneRichTextEditorCmd$Response';
	global.tab.CreateZoneRichTextEditorCmd$Response = $tab_CreateZoneRichTextEditorCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeAttributeDimensionModel
	var $tab_CubeAttributeDimensionModel = function(parent) {
		$tab_CubeBaseDimensionModel.call(this, parent);
	};
	$tab_CubeAttributeDimensionModel.__typeName = 'tab.CubeAttributeDimensionModel';
	global.tab.CubeAttributeDimensionModel = $tab_CubeAttributeDimensionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeAttributeDimensionModelFactory
	var $tab_CubeAttributeDimensionModelFactory = function() {
	};
	$tab_CubeAttributeDimensionModelFactory.__typeName = 'tab.CubeAttributeDimensionModelFactory';
	$tab_CubeAttributeDimensionModelFactory.create = function CubeAttributeDimensionModelFactory$Create(presModel, parent, fieldModelCache) {
		var hierarchies = $tab_CubeAttributeDimensionModelFactory.$gatherCubeHierarchies(presModel, parent, fieldModelCache);
		var folders = $tab_CubeAttributeDimensionModelFactory.$gatherCubeFolders(presModel, parent, fieldModelCache);
		var defaultHierarchy = $tab_CubeAttributeDimensionModelFactory.$getDefaultHierarchy(presModel, parent, fieldModelCache);
		var timeIntelligenceColumn = $tab_CubeAttributeDimensionModelFactory.$getTimeIntelligenceColumn(presModel, parent, fieldModelCache);
		var attributeDimensionModel = (ss.keyExists(fieldModelCache.get_fields(), presModel.fn) ? fieldModelCache.get_fields()[presModel.fn].asCubeAttributeDimension() : new $tab_CubeAttributeDimensionModel(parent));
		attributeDimensionModel.update$1(presModel, hierarchies, folders, defaultHierarchy, timeIntelligenceColumn);
		return attributeDimensionModel;
	};
	$tab_CubeAttributeDimensionModelFactory.$gatherCubeHierarchies = function CubeAttributeDimensionModelFactory$GatherCubeHierarchies(baseDimPresModel, parent, fieldModelCache) {
		var hierarchies = [];
		if (ss.isNullOrUndefined(baseDimPresModel.hierarchyList)) {
			return hierarchies;
		}
		for (var $t1 = 0; $t1 < baseDimPresModel.hierarchyList.length; $t1++) {
			var hierarchy = baseDimPresModel.hierarchyList[$t1];
			hierarchies.push($tab_CubeHierarchyModelFactory.create(hierarchy, parent, fieldModelCache));
		}
		return hierarchies;
	};
	$tab_CubeAttributeDimensionModelFactory.$gatherCubeFolders = function CubeAttributeDimensionModelFactory$GatherCubeFolders(baseDimPresModel, parent, fieldModelCache) {
		var folders = [];
		if (ss.isNullOrUndefined(baseDimPresModel.displayFolderList)) {
			return folders;
		}
		for (var $t1 = 0; $t1 < baseDimPresModel.displayFolderList.length; $t1++) {
			var folder = baseDimPresModel.displayFolderList[$t1];
			folders.push($tab_CubeFolderModelFactory.create(folder, parent, fieldModelCache));
		}
		return folders;
	};
	$tab_CubeAttributeDimensionModelFactory.$getDefaultHierarchy = function CubeAttributeDimensionModelFactory$GetDefaultHierarchy(baseDimPresModel, parent, fieldModelCache) {
		if (ss.isValue(baseDimPresModel.hierarchy)) {
			return (ss.keyExists(fieldModelCache.get_fields(), baseDimPresModel.hierarchy.fn) ? fieldModelCache.get_fields()[baseDimPresModel.hierarchy.fn].asHierarchy() : $tab_CubeHierarchyModelFactory.create(baseDimPresModel.hierarchy, parent, fieldModelCache));
		}
		return null;
	};
	$tab_CubeAttributeDimensionModelFactory.$getTimeIntelligenceColumn = function CubeAttributeDimensionModelFactory$GetTimeIntelligenceColumn(baseDimPresModel, parent, fieldModelCache) {
		if (baseDimPresModel.isTimeIntelligence) {
			var timeIntelligenceColumn = (ss.keyExists(fieldModelCache.get_fields(), baseDimPresModel.column.fn) ? fieldModelCache.get_fields()[baseDimPresModel.column.fn].asColumn() : $tab_FieldColumnModelFactory.create(baseDimPresModel.column, parent, fieldModelCache));
			timeIntelligenceColumn.set_isTimeIntelligenceColumn(true);
			return timeIntelligenceColumn;
		}
		return null;
	};
	global.tab.CubeAttributeDimensionModelFactory = $tab_CubeAttributeDimensionModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeBaseDimensionModel
	var $tab_CubeBaseDimensionModel = function(parent) {
		this.$3$CubeHierarchiesField = null;
		this.$3$CubeFoldersField = null;
		this.$3$DefaultCubeHierarchyField = null;
		this.$3$TimeIntelligenceColumnField = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_CubeBaseDimensionModel.__typeName = 'tab.CubeBaseDimensionModel';
	global.tab.CubeBaseDimensionModel = $tab_CubeBaseDimensionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeDimensionModel
	var $tab_CubeDimensionModel = function(parent) {
		this.$hierarchies = null;
		this.$3$FoldersField = null;
		this.$3$AttributesField = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_CubeDimensionModel.__typeName = 'tab.CubeDimensionModel';
	global.tab.CubeDimensionModel = $tab_CubeDimensionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeFolderModel
	var $tab_CubeFolderModel = function(parent) {
		this.$hierarchies = null;
		this.$columns = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_CubeFolderModel.__typeName = 'tab.CubeFolderModel';
	global.tab.CubeFolderModel = $tab_CubeFolderModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeFolderModelFactory
	var $tab_CubeFolderModelFactory = function() {
	};
	$tab_CubeFolderModelFactory.__typeName = 'tab.CubeFolderModelFactory';
	$tab_CubeFolderModelFactory.create = function CubeFolderModelFactory$Create(presModel, parent, fieldModelCache) {
		var folderHierarchies = $tab_CubeFolderModelFactory.$buildHierarchyArray(presModel, parent, fieldModelCache);
		var folderColumns = $tab_CubeFolderModelFactory.$buildFolderArray(presModel, parent, fieldModelCache);
		var folderModel = ((ss.keyExists(fieldModelCache.get_fields(), presModel.fn) && fieldModelCache.get_fields()[presModel.fn].get_isCubeFolder()) ? fieldModelCache.get_fields()[presModel.fn].asCubeFolder() : new $tab_CubeFolderModel(parent));
		folderModel.update(presModel, folderHierarchies, folderColumns);
		return folderModel;
	};
	$tab_CubeFolderModelFactory.$buildHierarchyArray = function CubeFolderModelFactory$BuildHierarchyArray(presModel, parent, fieldModelCache) {
		var folderHierarchies = [];
		if (ss.isNullOrUndefined(presModel.hierarchyList)) {
			return folderHierarchies;
		}
		for (var $t1 = 0; $t1 < presModel.hierarchyList.length; $t1++) {
			var hierarchy = presModel.hierarchyList[$t1];
			folderHierarchies.push($tab_CubeHierarchyModelFactory.create(hierarchy, parent, fieldModelCache));
		}
		return folderHierarchies;
	};
	$tab_CubeFolderModelFactory.$buildFolderArray = function CubeFolderModelFactory$BuildFolderArray(presModel, parent, fieldModelCache) {
		var folderColumns = [];
		if (ss.isNullOrUndefined(presModel.columnList)) {
			return folderColumns;
		}
		for (var $t1 = 0; $t1 < presModel.columnList.length; $t1++) {
			var column = presModel.columnList[$t1];
			folderColumns.push($tab_FieldColumnModelFactory.create(column, parent, fieldModelCache));
		}
		return folderColumns;
	};
	global.tab.CubeFolderModelFactory = $tab_CubeFolderModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeHierarchyModel
	var $tab_CubeHierarchyModel = function(parent) {
		this.$levels = null;
		this.$userDefinedAttributes = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_CubeHierarchyModel.__typeName = 'tab.CubeHierarchyModel';
	global.tab.CubeHierarchyModel = $tab_CubeHierarchyModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeHierarchyModelFactory
	var $tab_CubeHierarchyModelFactory = function() {
	};
	$tab_CubeHierarchyModelFactory.__typeName = 'tab.CubeHierarchyModelFactory';
	$tab_CubeHierarchyModelFactory.create = function CubeHierarchyModelFactory$Create(presModel, parent, fieldModelCache) {
		var levels = $tab_CubeHierarchyModelFactory.$buildLevelArray(presModel, parent, fieldModelCache);
		var userDefinedAttributes = $tab_CubeHierarchyModelFactory.$buildUserDefinedAttributeArray(presModel, parent, fieldModelCache);
		var hierarchyModel = (ss.keyExists(fieldModelCache.get_fields(), presModel.fn) ? fieldModelCache.get_fields()[presModel.fn].asHierarchy() : new $tab_CubeHierarchyModel(parent));
		hierarchyModel.update(presModel, levels, userDefinedAttributes);
		return hierarchyModel;
	};
	$tab_CubeHierarchyModelFactory.$buildLevelArray = function CubeHierarchyModelFactory$BuildLevelArray(presModel, parent, fieldModelCache) {
		var levels = [];
		if (ss.isNullOrUndefined(presModel.columnList)) {
			return levels;
		}
		for (var $t1 = 0; $t1 < presModel.columnList.length; $t1++) {
			var child = presModel.columnList[$t1];
			if (child.type === 'level') {
				levels.push($tab_LevelModelFactory.create(child, parent, fieldModelCache));
			}
			else {
				levels.push($tab_FieldColumnModelFactory.create(child, parent, fieldModelCache));
			}
		}
		return levels;
	};
	$tab_CubeHierarchyModelFactory.$buildUserDefinedAttributeArray = function CubeHierarchyModelFactory$BuildUserDefinedAttributeArray(presModel, parent, fieldModelCache) {
		var userDefinedAttributes = [];
		if (ss.isNullOrUndefined(presModel.userDefinedAttributeList)) {
			return userDefinedAttributes;
		}
		for (var $t1 = 0; $t1 < presModel.userDefinedAttributeList.length; $t1++) {
			var child = presModel.userDefinedAttributeList[$t1];
			userDefinedAttributes.push($tab_GroupModelFactory.create(child, parent, fieldModelCache));
		}
		return userDefinedAttributes;
	};
	global.tab.CubeHierarchyModelFactory = $tab_CubeHierarchyModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeStandardDimensionModel
	var $tab_CubeStandardDimensionModel = function(parent) {
		this.$4$CubeAttributeDimensionsField = null;
		$tab_CubeBaseDimensionModel.call(this, parent);
	};
	$tab_CubeStandardDimensionModel.__typeName = 'tab.CubeStandardDimensionModel';
	global.tab.CubeStandardDimensionModel = $tab_CubeStandardDimensionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CubeStandardDimensionModelFactory
	var $tab_CubeStandardDimensionModelFactory = function() {
	};
	$tab_CubeStandardDimensionModelFactory.__typeName = 'tab.CubeStandardDimensionModelFactory';
	$tab_CubeStandardDimensionModelFactory.create = function CubeStandardDimensionModelFactory$Create(presModel, parent, fieldModelCache) {
		var hierarchies = $tab_CubeStandardDimensionModelFactory.$gatherCubeHierarchies(presModel, parent, fieldModelCache);
		var folders = $tab_CubeStandardDimensionModelFactory.$gatherCubeFolders(presModel, parent, fieldModelCache);
		var defaultHierarchy = $tab_CubeStandardDimensionModelFactory.$getDefaultHierarchy(presModel, parent, fieldModelCache);
		var timeIntelligenceColumn = $tab_CubeStandardDimensionModelFactory.$getTimeIntelligenceColumn(presModel, parent, fieldModelCache);
		var attributes = $tab_CubeStandardDimensionModelFactory.$buildAttributeArray(presModel, parent, fieldModelCache);
		var standardDimensionModel = (ss.keyExists(fieldModelCache.get_fields(), presModel.fn) ? fieldModelCache.get_fields()[presModel.fn].asCubeStandardDimension() : new $tab_CubeStandardDimensionModel(parent));
		standardDimensionModel.update$1(presModel, hierarchies, folders, attributes, defaultHierarchy, timeIntelligenceColumn);
		return standardDimensionModel;
	};
	$tab_CubeStandardDimensionModelFactory.$buildAttributeArray = function CubeStandardDimensionModelFactory$BuildAttributeArray(presModel, parent, fieldModelCache) {
		var attributes = [];
		if (ss.isNullOrUndefined(presModel.attributeAttributeDimensionList)) {
			return attributes;
		}
		for (var $t1 = 0; $t1 < presModel.attributeAttributeDimensionList.length; $t1++) {
			var attribute = presModel.attributeAttributeDimensionList[$t1];
			attributes.push($tab_CubeAttributeDimensionModelFactory.create(attribute, parent, fieldModelCache));
		}
		return attributes;
	};
	$tab_CubeStandardDimensionModelFactory.$gatherCubeHierarchies = function CubeStandardDimensionModelFactory$GatherCubeHierarchies(baseDimPresModel, parent, fieldModelCache) {
		var hierarchies = [];
		if (ss.isNullOrUndefined(baseDimPresModel.hierarchyList)) {
			return hierarchies;
		}
		for (var $t1 = 0; $t1 < baseDimPresModel.hierarchyList.length; $t1++) {
			var hierarchy = baseDimPresModel.hierarchyList[$t1];
			hierarchies.push($tab_CubeHierarchyModelFactory.create(hierarchy, parent, fieldModelCache));
		}
		return hierarchies;
	};
	$tab_CubeStandardDimensionModelFactory.$gatherCubeFolders = function CubeStandardDimensionModelFactory$GatherCubeFolders(baseDimPresModel, parent, fieldModelCache) {
		var folders = [];
		if (ss.isNullOrUndefined(baseDimPresModel.displayFolderList)) {
			return folders;
		}
		for (var $t1 = 0; $t1 < baseDimPresModel.displayFolderList.length; $t1++) {
			var folder = baseDimPresModel.displayFolderList[$t1];
			folders.push($tab_CubeFolderModelFactory.create(folder, parent, fieldModelCache));
		}
		return folders;
	};
	$tab_CubeStandardDimensionModelFactory.$getDefaultHierarchy = function CubeStandardDimensionModelFactory$GetDefaultHierarchy(baseDimPresModel, parent, fieldModelCache) {
		if (ss.isValue(baseDimPresModel.hierarchy)) {
			return (ss.keyExists(fieldModelCache.get_fields(), baseDimPresModel.hierarchy.fn) ? fieldModelCache.get_fields()[baseDimPresModel.hierarchy.fn].asHierarchy() : $tab_CubeHierarchyModelFactory.create(baseDimPresModel.hierarchy, parent, fieldModelCache));
		}
		return null;
	};
	$tab_CubeStandardDimensionModelFactory.$getTimeIntelligenceColumn = function CubeStandardDimensionModelFactory$GetTimeIntelligenceColumn(baseDimPresModel, parent, fieldModelCache) {
		if (baseDimPresModel.isTimeIntelligence) {
			var timeIntelligenceColumn = (ss.keyExists(fieldModelCache.get_fields(), baseDimPresModel.column.fn) ? fieldModelCache.get_fields()[baseDimPresModel.column.fn].asColumn() : $tab_FieldColumnModelFactory.create(baseDimPresModel.column, parent, fieldModelCache));
			timeIntelligenceColumn.set_isTimeIntelligenceColumn(true);
			return timeIntelligenceColumn;
		}
		return null;
	};
	global.tab.CubeStandardDimensionModelFactory = $tab_CubeStandardDimensionModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CumulativeTableCalcModel
	var $tab_CumulativeTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('cumulativeTableCalcPresModel'.toString(), null));
	};
	$tab_CumulativeTableCalcModel.__typeName = 'tab.CumulativeTableCalcModel';
	global.tab.CumulativeTableCalcModel = $tab_CumulativeTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CustomizedViewRequests
	var $tab_CustomizedViewRequests = function() {
	};
	$tab_CustomizedViewRequests.__typeName = 'tab.CustomizedViewRequests';
	$tab_CustomizedViewRequests.buildUrl = function CustomizedViewRequests$BuildUrl(cv, removeQueryParams) {
		return $tab_CustomizedViewRequests.$buildUrl(cv, function(vizUriModel) {
			if (removeQueryParams) {
				vizUriModel.removeAllQueryParams();
			}
		});
	};
	$tab_CustomizedViewRequests.buildUriModel = function CustomizedViewRequests$BuildUriModel(cv) {
		var vizUriModel = $tab_VizUriModel.createForViewingSheet(tsConfig.repositoryUrl);
		if (ss.isValue(cv)) {
			vizUriModel.updateForCustomizedView(cv);
		}
		else {
			vizUriModel.set_originalView(true);
		}
		vizUriModel.removeHash();
		return vizUriModel;
	};
	$tab_CustomizedViewRequests.$buildUrl = function CustomizedViewRequests$BuildUrl(cv, urlCustomizer) {
		var vizUriModel = $tab_CustomizedViewRequests.buildUriModel(cv);
		if (!ss.staticEquals(urlCustomizer, null)) {
			urlCustomizer(vizUriModel);
		}
		return vizUriModel.get_absoluteUri();
	};
	$tab_CustomizedViewRequests.navigateToCustomizedView = function CustomizedViewRequests$NavigateToCustomizedView(cv) {
		var window = tabBootstrap.Utility.get_locationWindow();
		$tab_SessionServerCommands.destroySessionAndForward$1(window, $tab_CustomizedViewRequests.buildUrl(cv, false));
	};
	$tab_CustomizedViewRequests.navigateToCustomizedView$1 = function CustomizedViewRequests$NavigateToCustomizedView(cv, urlCustomizer) {
		var window = tabBootstrap.Utility.get_locationWindow();
		$tab_SessionServerCommands.destroySessionAndForward$1(window, $tab_CustomizedViewRequests.$buildUrl(cv, urlCustomizer));
	};
	$tab_CustomizedViewRequests.navigateToOriginalView = function CustomizedViewRequests$NavigateToOriginalView(urlCustomizer) {
		var window = tabBootstrap.Utility.get_locationWindow();
		$tab_SessionServerCommands.destroySessionAndForward$1(window, $tab_CustomizedViewRequests.$buildUrl(null, urlCustomizer));
	};
	$tab_CustomizedViewRequests.getCustomizedViews = function CustomizedViewRequests$GetCustomizedViews(success, failure) {
		var onSuccess = function(data, textStatus, xhr) {
			tab.Log.get$1($tab_CustomizedViewRequests).debug('Got customized views: %o', [data]);
			if (ss.staticEquals(success, null)) {
				return;
			}
			var cvs;
			var defCvId = null;
			if ('customizedViews' in data) {
				cvs = data['customizedViews'];
			}
			else {
				cvs = [];
			}
			if ('defaultCustomizedViewId' in data) {
				defCvId = data['defaultCustomizedViewId'];
			}
			success(cvs, defCvId);
		};
		$tab_CustomizedViewRequests.$sendSessionCvRequest(onSuccess, $tab_CustomizedViewRequests.$genericErrorCallback(failure), $tab_CustomizedViewRequests.$methodGetCustomizedViews, ss.mkdict(['sheet_id', tsConfig.current_sheet_name]), $tab_CommandController.get_vizqlServerRequestHandler(), 'GET', 'none');
	};
	$tab_CustomizedViewRequests.getCustomizedView = function CustomizedViewRequests$GetCustomizedView(customizedViewId, success, failure) {
		var vizqlServerRequestHandler = $tab_CommandController.get_vizqlServerRequestHandler();
		var onSuccess = function(data, textStatus, xhr) {
			tab.Log.get$1($tab_CustomizedViewRequests).debug('Got customized view: %o', [data]);
			if (ss.staticEquals(success, null)) {
				return;
			}
			var response = data;
			success(response.cv);
		};
		$tab_CustomizedViewRequests.$sendSessionCvRequest(onSuccess, $tab_CustomizedViewRequests.$genericErrorCallback(failure), $tab_CustomizedViewRequests.$methodGetCustomizedView, ss.mkdict(['cvId', customizedViewId]), vizqlServerRequestHandler, 'GET', 'none');
	};
	$tab_CustomizedViewRequests.setDefaultCustomizedView = function CustomizedViewRequests$SetDefaultCustomizedView(cv, success, failure) {
		var onSuccess = function(data, textStatus, xhr) {
			tab.Log.get$1($tab_CustomizedViewRequests).debug('Set default customized view: %o', [data]);
			if (ss.staticEquals(success, null)) {
				return;
			}
			var newDefault = null;
			if ('defaultCv' in data) {
				newDefault = data['defaultCv'];
			}
			success(newDefault);
		};
		var args = ss.mkdict(['sheet_id', tsConfig.current_sheet_name]);
		if (ss.isValue(cv)) {
			args['cvId'] = cv.id;
		}
		$tab_CustomizedViewRequests.$sendSessionCvRequest(onSuccess, $tab_CustomizedViewRequests.$genericErrorCallback(failure), $tab_CustomizedViewRequests.$methodSetDefaultCustomizedView, args, $tab_CommandController.get_vizqlServerRequestHandler(), null, null);
	};
	$tab_CustomizedViewRequests.destroyCustomizedView = function CustomizedViewRequests$DestroyCustomizedView(cv, success, failure) {
		tab.Param.verifyValue(cv, 'cv');
		var onSuccess = function(data, textStatus, xhr) {
			tab.Log.get$1($tab_CustomizedViewRequests).debug('Delete customized view: %o', [data]);
			if (ss.staticEquals(success, null)) {
				return;
			}
			success();
		};
		$tab_CustomizedViewRequests.$sendCvRequest(onSuccess, $tab_CustomizedViewRequests.$genericErrorCallback(failure), $tab_CustomizedViewRequests.$methodDestroyCustomizedView, ss.mkdict(['cvId', cv.id]), $tab_CommandController.get_vizqlServerRequestHandler());
	};
	$tab_CustomizedViewRequests.saveCustomizedView = function CustomizedViewRequests$SaveCustomizedView(cv, success, failure) {
		tab.Param.verifyValue(cv, 'cv');
		var onSuccess = function(data, textStatus, xhr) {
			tab.Log.get$1($tab_CustomizedViewRequests).debug('Save customized view: %o', [data]);
			if (ss.staticEquals(success, null)) {
				return;
			}
			var savedCv = null;
			if ('cv' in data) {
				savedCv = data['cv'];
				$tab_CustomizedViewRequests.updateTsConfig(savedCv, true);
			}
			success(savedCv);
		};
		var args = ss.mkdict(['sheet_id', tsConfig.current_sheet_name, 'name', cv.name, 'shared', cv.isPublic, 'hidden', cv.isHidden]);
		if (ss.isValue(cv.id)) {
			args['cvId'] = cv.id;
		}
		$tab_CustomizedViewRequests.$sendSessionCvRequest(onSuccess, $tab_CustomizedViewRequests.$genericErrorCallback(failure), $tab_CustomizedViewRequests.$methodSaveCustomizedView, args, $tab_CommandController.get_vizqlServerRequestHandler(), null, null);
	};
	$tab_CustomizedViewRequests.updateTsConfig = function CustomizedViewRequests$UpdateTsConfig(customizedView, updateCurrentView) {
		tsConfig.repositoryUrl = $tab_CustomizedViewRequests.$generateRepositoryUrl(customizedView);
		if (updateCurrentView) {
			if (ss.isNullOrUndefined(customizedView)) {
				tsConfig.current_custom_view_id = null;
			}
			else {
				tsConfig.current_custom_view_id = customizedView.id;
			}
		}
	};
	$tab_CustomizedViewRequests.$generateRepositoryUrl = function CustomizedViewRequests$GenerateRepositoryUrl(customizedView) {
		var repoPathObject = new $tab_RepoPathObject(tsConfig.repositoryUrl);
		if (ss.isNullOrUndefined(customizedView)) {
			return ss.formatString('{0}/{1}', repoPathObject.get_workbookId(), repoPathObject.get_sheetId());
		}
		return ss.formatString('{0}/{1}/{2}/{3}', repoPathObject.get_workbookId(), repoPathObject.get_sheetId(), $tab_VizUriModel.encodeUserName(customizedView.owner.username), customizedView.urlId);
	};
	$tab_CustomizedViewRequests.updateCustomizedView = function CustomizedViewRequests$UpdateCustomizedView(cv, success, failure) {
		tab.Param.verifyValue(cv, 'cv');
		var onSuccess = function(data, textStatus, xhr) {
			tab.Log.get$1($tab_CustomizedViewRequests).debug('Update customized view: %o', [data]);
			if (ss.staticEquals(success, null)) {
				return;
			}
			var resp = data;
			var updatedCv = null;
			if (ss.isValue(resp.cv)) {
				updatedCv = resp.cv;
				$tab_CustomizedViewRequests.updateTsConfig(updatedCv, false);
			}
			success(updatedCv);
		};
		var args = ss.mkdict(['sheet_id', tsConfig.current_sheet_name, 'name', cv.name, 'shared', cv.isPublic, 'cvId', cv.id]);
		$tab_CustomizedViewRequests.$sendSessionCvRequest(onSuccess, $tab_CustomizedViewRequests.$genericErrorCallback(failure), $tab_CustomizedViewRequests.$methodUpdateCustomizedView, args, $tab_CommandController.get_vizqlServerRequestHandler(), null, null);
	};
	$tab_CustomizedViewRequests.$genericErrorCallback = function CustomizedViewRequests$GenericErrorCallback(handler) {
		var onError = function(xhr, status, e) {
			tab.Log.get$1($tab_CustomizedViewRequests).debug('Error in request: %o', [e]);
			if (ss.staticEquals(handler, null)) {
				return;
			}
			var msg = $tab_CustomizedViewRequests.$getMessageFromResponse(xhr);
			var $t1 = msg;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = e.toString();
			}
			handler($t1);
		};
		return onError;
	};
	$tab_CustomizedViewRequests.$getMessageFromResponse = function CustomizedViewRequests$GetMessageFromResponse(xhr) {
		if (ss.isValue(xhr.responseText)) {
			try {
				var response = JSON.parse(xhr.responseText);
				if (ss.isValue(response.msg)) {
					return response.msg;
				}
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				tab.Log.get$1($tab_CustomizedViewRequests).debug('Error parsing response as JSON: %o', [e]);
			}
		}
		return null;
	};
	$tab_CustomizedViewRequests.$sendCvRequest = function CustomizedViewRequests$SendCvRequest(success, error, method, data, session) {
		var url = session.formatMethod(method);
		$tab_CustomizedViewRequests.$buildAndSendRequest(success, error, data, url, session, 'immediately', null);
	};
	$tab_CustomizedViewRequests.$sendSessionCvRequest = function CustomizedViewRequests$SendSessionCvRequest(success, error, method, data, session, httpMethod, uiBlockType) {
		var url = session.formatSessionMethod(method);
		$tab_CustomizedViewRequests.$buildAndSendRequest(success, error, data, url, session, uiBlockType, httpMethod);
	};
	$tab_CustomizedViewRequests.$buildAndSendRequest = function CustomizedViewRequests$BuildAndSendRequest(success, error, data, url, session, uiBlockType, httpMethod) {
		var handler = session.createHandler(null, success, error, ss.coalesce(uiBlockType, 'immediately'));
		var args = { type: ss.coalesce(httpMethod, 'POST'), url: url, headers: ss.mkdict(['Accept', 'text/javascript']), dataType: 'json' };
		if (ss.isValue(data)) {
			args.data = data;
		}
		session.request(args, handler);
	};
	global.tab.CustomizedViewRequests = $tab_CustomizedViewRequests;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.CustomTableCalcModel
	var $tab_CustomTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		this.$3$ReferenceModelField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('customTableCalcPresModel'.toString(), null));
		this.set_referenceModel(new $tab_TableCalcReferenceModel(this));
	};
	$tab_CustomTableCalcModel.__typeName = 'tab.CustomTableCalcModel';
	global.tab.CustomTableCalcModel = $tab_CustomTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.CustomUIBlockingPluginPresentationLayer
	var $tab_CustomUIBlockingPluginPresentationLayer = function(nonBlockingCommandIds) {
		this.$nonBlockingCommands = [];
		$tab_PluginPresentationLayer.call(this);
		for (var $t1 = 0; $t1 < nonBlockingCommandIds.length; $t1++) {
			var commandId = nonBlockingCommandIds[$t1];
			var command = commandId.ns + ':' + commandId.cmd;
			this.$nonBlockingCommands.push(command);
		}
	};
	$tab_CustomUIBlockingPluginPresentationLayer.__typeName = 'tab.CustomUIBlockingPluginPresentationLayer';
	global.tab.CustomUIBlockingPluginPresentationLayer = $tab_CustomUIBlockingPluginPresentationLayer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardButtonClientCommands
	var $tab_DashboardButtonClientCommands = function() {
	};
	$tab_DashboardButtonClientCommands.__typeName = 'tab.DashboardButtonClientCommands';
	$tab_DashboardButtonClientCommands.isGetButtonConfigDialogCommand = function DashboardButtonClientCommands$IsGetButtonConfigDialogCommand(c) {
		if (ss.isNullOrUndefined(c) || ss.isNullOrUndefined(c.commandName)) {
			return false;
		}
		return c.commandName.toString().indexOf($tab_DashboardButtonClientCommands.$getButtonConfigDialogCommandName) !== -1;
	};
	$tab_DashboardButtonClientCommands.callGetButtonConfigDialogCommand = function DashboardButtonClientCommands$CallGetButtonConfigDialogCommand(command) {
		var $t1 = new $tab_GetButtonConfigDialogCmd();
		$t1.cmdParams['dashboard'] = command.commandParams['dashboard'];
		$t1.cmdParams['dashboardObjectStateHandle'] = command.commandParams['dashboardObjectStateHandle'];
		$t1.cmdParams['dashboardObjectHandle'] = command.commandParams['dashboardObjectHandle'];
		$t1.cmdParams['zoneId'] = command.commandParams['zoneId'] | 0;
		$t1.cmdParams['fontFamilies'] = $tab_FormattingUtil.compatibleFontNameList();
		$t1.cmdParams['fontSizes'] = ss.cast($tab_FormattingUtil.fontSizes, Array);
		var getButtonConfigDialogCmd = $t1;
		getButtonConfigDialogCmd.invoke();
	};
	global.tab.DashboardButtonClientCommands = $tab_DashboardButtonClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardClientCommands
	var $tab_DashboardClientCommands = function() {
	};
	$tab_DashboardClientCommands.__typeName = 'tab.DashboardClientCommands';
	$tab_DashboardClientCommands.getDeviceLayoutListContextMenu = function DashboardClientCommands$GetDeviceLayoutListContextMenu(deviceLayout, callback) {
		var $t1 = new $tab_BuildDeviceLayoutListContextMenuCmd();
		$t1.cmdParams['dashboardDeviceLayout'] = deviceLayout;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_DashboardClientCommands.dropSheetOnDashboard = function DashboardClientCommands$DropSheetOnDashboard(sheet, dropPos, addAsFloating) {
		var $t1 = new $tab_DropOnDashboardCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.cmdParams['addAsFloating'] = ss.coalesce(addAsFloating, false);
		$t1.cmdParams['dropLocation'] = { x: dropPos.x | 0, y: dropPos.y | 0 };
		$t1.cmdParams['zoneType'] = 'viz';
		$t1.cmdParams['worksheet'] = sheet;
		$t1.set_uiBlocking('immediately');
		return $t1.invoke();
	};
	$tab_DashboardClientCommands.dropNewZoneObjectOnDashboard = function DashboardClientCommands$DropNewZoneObjectOnDashboard(zoneType, isHorizontal, addAsFloating, dropPos, formattedText, zoneParam, objectType) {
		var dropLocation = { x: dropPos.x | 0, y: dropPos.y | 0 };
		var $t1 = new $tab_DropOnDashboardCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.cmdParams['addAsFloating'] = ss.coalesce(addAsFloating, false);
		$t1.cmdParams['dropLocation'] = dropLocation;
		$t1.cmdParams['zoneType'] = zoneType;
		$t1.cmdParams['isHorizontal'] = isHorizontal;
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		if (ss.isValue(zoneParam)) {
			cmd.cmdParams['zoneParam'] = zoneParam;
		}
		if (ss.isValue(formattedText)) {
			cmd.cmdParams['formattedText'] = formattedText;
		}
		if (objectType !== 'invalid') {
			cmd.cmdParams['dashboardObjectType'] = objectType;
		}
		return cmd.invoke();
	};
	$tab_DashboardClientCommands.showImageObjectConfigDialog = function DashboardClientCommands$ShowImageObjectConfigDialog(zoneId) {
		var $t1 = new $tab_ShowImageObjectConfigDialogCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.cmdParams['zoneId'] = zoneId | 0;
		$t1.set_uiBlocking('none');
		var cmd = $t1;
		cmd.invoke();
	};
	$tab_DashboardClientCommands.setDashboardDeviceLayout = function DashboardClientCommands$SetDashboardDeviceLayout(deviceLayout) {
		var $t1 = new $tab_SetDashboardCurrentLayoutCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.cmdParams['dashboardDeviceLayout'] = deviceLayout;
		$t1.cmdParams['allowPreviewSizeChange'] = true;
		$t1.set_uiBlocking('immediately');
		$t1.invoke();
	};
	$tab_DashboardClientCommands.getSheetDragDropTargets = function DashboardClientCommands$GetSheetDragDropTargets(movingZoneID, p) {
		var $t1 = new $tab_GetDashboardDragDropCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.set_uiBlocking('none');
		var cmd = $t1;
		if (ss.isValue(movingZoneID)) {
			cmd.cmdParams['zoneId'] = ss.unbox(movingZoneID) | 0;
		}
		if (ss.isValue(p)) {
			cmd.cmdParams['grabLocation'] = { x: p.x | 0, y: p.y | 0 };
		}
		return cmd.invoke();
	};
	$tab_DashboardClientCommands.getThumbnailImage = function DashboardClientCommands$GetThumbnailImage(sheetName) {
		var $t1 = new $tab_GetThumbnailCmd();
		$t1.cmdParams['worksheet'] = sheetName;
		$t1.set_uiBlocking('none');
		var cmd = $t1;
		return cmd.invoke();
	};
	$tab_DashboardClientCommands.addNewObjectToDashboard = function DashboardClientCommands$AddNewObjectToDashboard(zoneType, isHorizontal, addAsFloating, formattedText, zoneParam, objectType) {
		var $t1 = new $tab_AddObjectToDashboardCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.cmdParams['zoneType'] = zoneType;
		$t1.cmdParams['isHorizontal'] = isHorizontal;
		$t1.cmdParams['addAsFloating'] = ss.coalesce(addAsFloating, false);
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		if (ss.isValue(zoneParam)) {
			cmd.cmdParams['zoneParam'] = zoneParam;
		}
		if (ss.isValue(formattedText)) {
			cmd.cmdParams['formattedText'] = formattedText;
		}
		if (objectType !== 'invalid') {
			cmd.cmdParams['dashboardObjectType'] = objectType;
		}
		return cmd.invoke();
	};
	$tab_DashboardClientCommands.addSheetToDashboard = function DashboardClientCommands$AddSheetToDashboard(worksheetName, addAsFloating) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'add-sheet-to-dashboard' }, null);
		c.commandParams = {};
		c.commandParams['worksheet'] = worksheetName;
		c.commandParams['addAsFloating'] = ss.coalesce(addAsFloating, false);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', null, null));
	};
	$tab_DashboardClientCommands.showGridOnDashboard = function DashboardClientCommands$ShowGridOnDashboard(showGrid) {
		var $t1 = new $tab_DashboardShowGridCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.cmdParams['dashboardShowGrid'] = showGrid;
		$t1.set_localWork(function(t) {
			$tab_DashboardClientCommands.$setShowGridLocal(showGrid, t);
		});
		$t1.set_uiBlocking('none');
		$t1.invoke();
	};
	$tab_DashboardClientCommands.$setShowGridLocal = function DashboardClientCommands$SetShowGridLocal(showGrid, t) {
		var dashModel = $tab_ModelUtils.findContentDashboard(null);
		var newMode = (showGrid ? 'gom-on' : 'gom-automatic');
		if (newMode === dashModel.get_gridMode()) {
			return;
		}
		var dashboardPM = t.makeMutablePresModel(dashModel, false);
		dashboardPM.gridOverlayMode = newMode;
	};
	$tab_DashboardClientCommands.changeDashboardGridSize = function DashboardClientCommands$ChangeDashboardGridSize(newSize) {
		var $t1 = new $tab_DashboardSetGridSizeCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.cmdParams['dashboardGridSize'] = newSize | 0;
		$t1.set_localWork(function(t) {
			$tab_DashboardClientCommands.$setGridSizeLocal(newSize, t);
		});
		$t1.set_uiBlocking('none');
		$t1.invoke();
	};
	$tab_DashboardClientCommands.$setGridSizeLocal = function DashboardClientCommands$SetGridSizeLocal(newSize, t) {
		var dashModel = $tab_ModelUtils.findContentDashboard(null);
		if (newSize === dashModel.get_gridSize()) {
			return;
		}
		var dashboardPM = t.makeMutablePresModel(dashModel, false);
		dashboardPM.size = newSize;
	};
	$tab_DashboardClientCommands.getCurrentSheetSizeConstraints = function DashboardClientCommands$GetCurrentSheetSizeConstraints() {
		var result = $.Deferred();
		if (tsConfig.current_sheet_type === 'worksheet') {
			result.resolve({ sizeMode: 'size-mode-auto', dashboardSizingMode: 'automatic' });
		}
		else {
			var $t1 = new $tab_GetDashboardSizingCmd();
			$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
			$t1.set_uiBlocking('none');
			$t1.invoke().pipe(function(r) {
				return result.resolve(r.$$cmdParams['dashboardSizePresModel']);
			}, function(o) {
				return result.reject();
			});
		}
		return result.promise();
	};
	$tab_DashboardClientCommands.setDashboardSizeFixed = function DashboardClientCommands$SetDashboardSizeFixed(dashboard, changedDimension, width, height, model) {
		var localWork = function(t) {
			var sizeModel = t.makeMutablePresModel(model, false);
			var newSize = { dashboardSizingMode: 'fixed', h: height, w: width };
			sizeModel.dashboardSizePresModel = newSize;
		};
		$tab_DashboardClientCommands.$setDashboardSizeWithValidation(dashboard, changedDimension, 'fixed', width, height, width, height, localWork);
	};
	$tab_DashboardClientCommands.setDashboardSizeAutomatic = function DashboardClientCommands$SetDashboardSizeAutomatic(dashboard, model) {
		var localWork = function(t) {
			var sizeModel = t.makeMutablePresModel(model, false);
			var newSize = { dashboardSizingMode: 'automatic' };
			sizeModel.dashboardSizePresModel = newSize;
		};
		$tab_DashboardClientCommands.$setDashboardSizeWithValidation(dashboard, 'no', 'automatic', 0, 0, 0, 0, localWork);
	};
	$tab_DashboardClientCommands.setDashboardSizeRange = function DashboardClientCommands$SetDashboardSizeRange(dashboard, changedDimension, minWidth, minHeight, maxWidth, maxHeight, model) {
		var localWork = function(t) {
			var sizeModel = t.makeMutablePresModel(model, false);
			var newSize = { dashboardSizingMode: 'range', maxHeight: ss.coalesce(maxHeight, 0), maxWidth: ss.coalesce(maxWidth, 0), minHeight: ss.coalesce(minHeight, 0), minWidth: ss.coalesce(minWidth, 0) };
			sizeModel.dashboardSizePresModel = newSize;
		};
		$tab_DashboardClientCommands.$setDashboardSizeWithValidation(dashboard, changedDimension, 'range', ss.coalesce(minWidth, 0), ss.coalesce(minHeight, 0), ss.coalesce(maxWidth, 0), ss.coalesce(maxHeight, 0), localWork);
	};
	$tab_DashboardClientCommands.$setDashboardSizeWithValidation = function DashboardClientCommands$SetDashboardSizeWithValidation(dashboard, changedDimension, sizeMode, minWidth, minHeight, maxWidth, maxHeight, localWork) {
		var $t1 = new $tab_SetDashboardSizingWithValidationCmd();
		$t1.cmdParams['dashboardSizingDimension'] = changedDimension;
		$t1.cmdParams['dashboard'] = dashboard;
		$t1.cmdParams['minWidth'] = minWidth | 0;
		$t1.cmdParams['minHeight'] = minHeight | 0;
		$t1.cmdParams['maxWidth'] = maxWidth | 0;
		$t1.cmdParams['maxHeight'] = maxHeight | 0;
		$t1.cmdParams['dashboardSizingMode'] = sizeMode;
		$t1.set_localWork(localWork);
		$t1.set_uiBlocking('immediately');
		$t1.invoke();
	};
	$tab_DashboardClientCommands.showDashboardTitle = function DashboardClientCommands$ShowDashboardTitle(dashboard) {
		var $t1 = new $tab_ShowDashboardTitleCmd();
		$t1.cmdParams['dashboard'] = dashboard;
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		cmd.invoke();
	};
	$tab_DashboardClientCommands.getUrlSubstitutionParameters = function DashboardClientCommands$GetUrlSubstitutionParameters() {
		var $t1 = new $tab_GetURLSubstitutionKeywordsCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		return $t1.invoke();
	};
	$tab_DashboardClientCommands.isWebZoneUrlValid = function DashboardClientCommands$IsWebZoneUrlValid(url) {
		var $t1 = new $tab_IsWebZoneUrlValidCmd();
		$t1.cmdParams['urlString'] = url;
		$t1.set_uiBlocking('immediately');
		return $t1.invoke();
	};
	global.tab.DashboardClientCommands = $tab_DashboardClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardGridDialogModel
	var $tab_DashboardGridDialogModel = function(parent) {
		this.$2$StopNotifyingField = null;
		this.$2$UpdateGridDialogInfoField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dashboardGridDialogPresModel'.toString(), null));
		this.pm = {};
	};
	$tab_DashboardGridDialogModel.__typeName = 'tab.DashboardGridDialogModel';
	global.tab.DashboardGridDialogModel = $tab_DashboardGridDialogModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardModel
	var $tab_DashboardModel = function(parent) {
		this.$viewSessions = {};
		this.$dashboardSizeControlModel = null;
		this.$readyZoneId = 0;
		this.$oldRenderMode = null;
		this.$storyContentDashboard = null;
		this.$zonePlaceholderColor = null;
		this.$currentActiveZoneDescription = '';
		this.$2$NewDashboardField = null;
		this.$2$ActiveZoneChangedField = null;
		this.$2$ActiveZoneNameChangedField = null;
		this.$2$GridOverlayModeChangedField = null;
		this.$2$GridSizeChangedField = null;
		this.$2$ReadyZoneChangedField = null;
		this.$2$RenderModeChangedField = null;
		this.$2$SizeChangedField = null;
		this.$2$FormatsChangedField = null;
		this.$2$TitleVisibilityChangedField = null;
		this.$2$CurrentDeviceLayoutChangedField = null;
		this.$2$CurrentDeviceLayoutListChangedField = null;
		this.$2$DashboardNameChangedField = null;
		this.zonesModel = null;
		this.sheetListModel = null;
		this.layoutTreeModel = null;
		this.emptyShowMeModel = null;
		this.autoUpdate = false;
		this.invalid = false;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dashboardPresModel'.toString(), null));
		this.invalid = false;
		this.zonesModel = new $tab_ZonesModel(this);
		this.$readyZoneId = 0;
	};
	$tab_DashboardModel.__typeName = 'tab.DashboardModel';
	$tab_DashboardModel.add_modifiedSheetsChanged = function DashboardModel$add_ModifiedSheetsChanged(value) {
		$tab_DashboardModel.$2$ModifiedSheetsChangedField = ss.delegateCombine($tab_DashboardModel.$2$ModifiedSheetsChangedField, value);
	};
	$tab_DashboardModel.remove_modifiedSheetsChanged = function DashboardModel$remove_ModifiedSheetsChanged(value) {
		$tab_DashboardModel.$2$ModifiedSheetsChangedField = ss.delegateRemove($tab_DashboardModel.$2$ModifiedSheetsChangedField, value);
	};
	$tab_DashboardModel.$getSheetsToBrushFromActions = function DashboardModel$GetSheetsToBrushFromActions(sheetNames, vizModelLookup) {
		var numSheets = sheetNames.length;
		var sheetsToBrush = new Set();
		for (var $t1 = 0; $t1 < sheetNames.length; $t1++) {
			var sheetName = sheetNames[$t1];
			var vizModel = vizModelLookup[sheetName];
			var actionsForSourceSheet = [];
			if (!vizModel.get_selectionsModel().tupleSelection.isEmpty || vizModel.get_selectionsModel().get_brushVizForNodeSelection()) {
				ss.arrayAddRange(actionsForSourceSheet, $tab_ActionUtils.getApplicableActions(sheetName, 'on-select', 'highlight'));
				ss.arrayAddRange(actionsForSourceSheet, $tab_ActionUtils.getApplicableActions(sheetName, 'explicitly', 'highlight'));
			}
			if (!vizModel.get_brushingsModel().tupleSelection.isEmpty) {
				ss.arrayAddRange(actionsForSourceSheet, $tab_ActionUtils.getApplicableActions(sheetName, 'on-hover', 'highlight'));
			}
			if (!tab.MiscUtil.isNullOrEmpty$1(actionsForSourceSheet)) {
				var targetSheetsToBrush = $tab_$SourceSheetWithHighlightAction.$getTargetSheetsToBrush(sheetName, actionsForSourceSheet, vizModel.get_vizDataModel());
				tab.SetUtilities.addAll(Object).call(null, sheetsToBrush, tab.SetUtilities.getValues(Object).call(null, targetSheetsToBrush));
				if (sheetsToBrush.size === numSheets) {
					return sheetsToBrush;
				}
			}
		}
		return sheetsToBrush;
	};
	$tab_DashboardModel.$fireModifiedSheetsChanged = function DashboardModel$FireModifiedSheetsChanged() {
		if (!ss.staticEquals($tab_DashboardModel.$2$ModifiedSheetsChangedField, null)) {
			$tab_DashboardModel.$2$ModifiedSheetsChangedField();
		}
	};
	global.tab.DashboardModel = $tab_DashboardModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardNewObjectsModel
	var $tab_DashboardNewObjectsModel = function() {
		this.$addNewZoneAsFloating = false;
		$tab_Model.call(this, null, null);
		this.$addNewZoneAsFloating = false;
	};
	$tab_DashboardNewObjectsModel.__typeName = 'tab.DashboardNewObjectsModel';
	global.tab.DashboardNewObjectsModel = $tab_DashboardNewObjectsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardSetGridSizeCmd
	var $tab_DashboardSetGridSizeCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DashboardSetGridSizeCmd$Response]).call(this);
	};
	$tab_DashboardSetGridSizeCmd.__typeName = 'tab.DashboardSetGridSizeCmd';
	global.tab.DashboardSetGridSizeCmd = $tab_DashboardSetGridSizeCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardSetGridSizeCmd.Response
	var $tab_DashboardSetGridSizeCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DashboardSetGridSizeCmd$Response.__typeName = 'tab.DashboardSetGridSizeCmd$Response';
	global.tab.DashboardSetGridSizeCmd$Response = $tab_DashboardSetGridSizeCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardShowGridCmd
	var $tab_DashboardShowGridCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DashboardShowGridCmd$Response]).call(this);
	};
	$tab_DashboardShowGridCmd.__typeName = 'tab.DashboardShowGridCmd';
	global.tab.DashboardShowGridCmd = $tab_DashboardShowGridCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardShowGridCmd.Response
	var $tab_DashboardShowGridCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DashboardShowGridCmd$Response.__typeName = 'tab.DashboardShowGridCmd$Response';
	global.tab.DashboardShowGridCmd$Response = $tab_DashboardShowGridCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardShowGridWebWrapperCmd
	var $tab_DashboardShowGridWebWrapperCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_DashboardShowGridWebWrapperCmd$Response]).call(this);
	};
	$tab_DashboardShowGridWebWrapperCmd.__typeName = 'tab.DashboardShowGridWebWrapperCmd';
	$tab_DashboardShowGridWebWrapperCmd.get_commandName = function DashboardShowGridWebWrapperCmd$get_CommandName() {
		return 'dashboard-show-grid-web-wrapper';
	};
	global.tab.DashboardShowGridWebWrapperCmd = $tab_DashboardShowGridWebWrapperCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardShowGridWebWrapperCmd.Response
	var $tab_DashboardShowGridWebWrapperCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DashboardShowGridWebWrapperCmd$Response.__typeName = 'tab.DashboardShowGridWebWrapperCmd$Response';
	global.tab.DashboardShowGridWebWrapperCmd$Response = $tab_DashboardShowGridWebWrapperCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardShowGridWebWrapperCommand
	var $tab_DashboardShowGridWebWrapperCommand = function() {
		$tab_DashboardShowGridWebWrapperCmd.call(this);
	};
	$tab_DashboardShowGridWebWrapperCommand.__typeName = 'tab.DashboardShowGridWebWrapperCommand';
	global.tab.DashboardShowGridWebWrapperCommand = $tab_DashboardShowGridWebWrapperCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.DashboardSizeCalculator
	var $tab_DashboardSizeCalculator = function() {
	};
	$tab_DashboardSizeCalculator.__typeName = 'tab.DashboardSizeCalculator';
	$tab_DashboardSizeCalculator.get_dashboardViewportSize = function DashboardSizeCalculator$get_DashboardViewportSize() {
		var dashboardViewportSize = $tab_DashboardSizeCalculator.get_dashboardViewportSizeWithTabs();
		dashboardViewportSize.h -= tabBootstrap.VizLayoutConstants.get_tabsHeight();
		return dashboardViewportSize;
	};
	$tab_DashboardSizeCalculator.get_dashboardViewportSizeWithTabs = function DashboardSizeCalculator$get_DashboardViewportSizeWithTabs() {
		var viewportElement = document.getElementById('dashboard-viewport');
		var dashboardViewportSize = { w: viewportElement.offsetWidth, h: viewportElement.offsetHeight };
		return dashboardViewportSize;
	};
	$tab_DashboardSizeCalculator.calculateContainerSize = function DashboardSizeCalculator$CalculateContainerSize(dashboardSize) {
		var actualDashboardSize = (tabBootstrap.VizLayoutConstants.get_shouldShowTabs() ? $tab_DashboardSizeCalculator.calculateDashboardSize() : dashboardSize);
		var dashboardContainerSize = { w: actualDashboardSize.w, h: actualDashboardSize.h + tabBootstrap.VizLayoutConstants.get_tabsHeight() };
		return dashboardContainerSize;
	};
	$tab_DashboardSizeCalculator.calculateDashboardSize = function DashboardSizeCalculator$CalculateDashboardSize() {
		if (tsConfig.is_mobile && !tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
			return tabBootstrap.ViewerBootstrap.get_instance().getWebClientDashboardContainerSize(tsConfig.current_sheet_type);
		}
		else {
			var dashboardViewportSize = $tab_DashboardSizeCalculator.get_dashboardViewportSize();
			var compositeDashboardSize = tabBootstrap.ViewerBootstrap.get_instance().adjustForMinMaxDashboardSizes(dashboardViewportSize);
			return compositeDashboardSize;
		}
	};
	$tab_DashboardSizeCalculator.asSizePresModel = function DashboardSizeCalculator$AsSizePresModel(metric) {
		return { w: metric.w, h: metric.h };
	};
	$tab_DashboardSizeCalculator.asMetric = function DashboardSizeCalculator$AsMetric(presModel) {
		return { w: presModel.w, h: presModel.h };
	};
	$tab_DashboardSizeCalculator.asRect = function DashboardSizeCalculator$AsRect(metric) {
		return { l: 0, t: 0, w: metric.w, h: metric.h };
	};
	global.tab.DashboardSizeCalculator = $tab_DashboardSizeCalculator;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardSizeControlModel
	var $tab_DashboardSizeControlModel = function(parent) {
		this.$2$SizeInfoUpdatedField = null;
		this.dashboardSizeModel = null;
		this.layoutInfoModel = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dashboardSizeControl'.toString(), null));
	};
	$tab_DashboardSizeControlModel.__typeName = 'tab.DashboardSizeControlModel';
	global.tab.DashboardSizeControlModel = $tab_DashboardSizeControlModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DashboardSizeModel
	var $tab_DashboardSizeModel = function(parent) {
		this.$2$SizeUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dashboardSizePresModel'.toString(), null));
	};
	$tab_DashboardSizeModel.__typeName = 'tab.DashboardSizeModel';
	global.tab.DashboardSizeModel = $tab_DashboardSizeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataAlert
	var $tab_DataAlert = function() {
		var $t1 = [];
		$t1.push($tab_UserFactory.currentUser());
		$tab_DataAlert.$ctor2.call(this, {}, {}, $t1);
	};
	$tab_DataAlert.__typeName = 'tab.DataAlert';
	$tab_DataAlert.$ctor2 = function(alertMeasurePresModel, alertConditionPresModel, recipients) {
		this.$threshold = null;
		this.$title = null;
		this.$notificationInterval = $tab_DataAlertNotificationInterval.daily;
		this.$measurePresModel = null;
		this.$conditionPresModel = null;
		this.$isPublic = false;
		this.$1$NotificationIntervalChangedField = null;
		this.$1$TitleChangedField = null;
		this.$1$PublicChangedField = null;
		this.$1$MeasureChangedField = null;
		this.$1$ConditionChangedField = null;
		this.$1$RecipientsChangedField = null;
		this.$1$RecipientsField = null;
		this.$1$DeviceTypeField = null;
		this.$1$IsViewSaveNeededField = false;
		this.$1$CustomizedViewIdField = null;
		this.$1$SelectionCaptionField = null;
		this.$1$ThresholdIsValidField = false;
		this.$1$AlertConditionMetField = false;
		this.$1$ViewTypeField = null;
		this.$measurePresModel = alertMeasurePresModel;
		this.$conditionPresModel = alertConditionPresModel;
		this.set_recipients(recipients);
		this.set_deviceType('default');
	};
	$tab_DataAlert.$ctor1 = function(dialogPresModel) {
		this.$threshold = null;
		this.$title = null;
		this.$notificationInterval = $tab_DataAlertNotificationInterval.daily;
		this.$measurePresModel = null;
		this.$conditionPresModel = null;
		this.$isPublic = false;
		this.$1$NotificationIntervalChangedField = null;
		this.$1$TitleChangedField = null;
		this.$1$PublicChangedField = null;
		this.$1$MeasureChangedField = null;
		this.$1$ConditionChangedField = null;
		this.$1$RecipientsChangedField = null;
		this.$1$RecipientsField = null;
		this.$1$DeviceTypeField = null;
		this.$1$IsViewSaveNeededField = false;
		this.$1$CustomizedViewIdField = null;
		this.$1$SelectionCaptionField = null;
		this.$1$ThresholdIsValidField = false;
		this.$1$AlertConditionMetField = false;
		this.$1$ViewTypeField = null;
		this.set_selectionCaption(dialogPresModel.fieldName);
		this.set_measurePresModel(dialogPresModel.dataAlertMeasure);
		this.set_conditionPresModel({ dataAlertConditionOp: dialogPresModel.dataAlertConditionOp, dataAlertThresholdText: dialogPresModel.dataAlertThresholdText, dataType: dialogPresModel.dataType });
		this.set_threshold(dialogPresModel.dataAlertThresholdText);
		this.set_alertConditionMet(dialogPresModel.isDataAlertConditionMet);
		var $t1 = [];
		$t1.push($tab_UserFactory.currentUser());
		this.set_recipients($t1);
		this.set_deviceType('default');
		this.set_isViewSaveNeeded(dialogPresModel.isViewSaveNeeded);
	};
	global.tab.DataAlert = $tab_DataAlert;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommands.DataAlertClientCommands
	var $tab_DataAlertClientCommands = function() {
	};
	$tab_DataAlertClientCommands.__typeName = 'tab.DataAlertClientCommands';
	$tab_DataAlertClientCommands.newDataAlert = function DataAlertClientCommands$NewDataAlert(onFailCallback) {
		(new $tab_StartNewDataAlertCmd()).invoke().fail(function() {
			tab.Logger.getLogger($tab_DataAlertClientCommands, null).error('Failed to fetch alert measures for selection', []);
			onFailCallback();
		});
	};
	$tab_DataAlertClientCommands.updateDataAlert = function DataAlertClientCommands$UpdateDataAlert(dataAlert) {
		var result = $.Deferred();
		if (dataAlert.get_thresholdIsValid()) {
			var $t1 = new $tab_UpdateDataAlertCmd();
			$t1.cmdParams['dataAlertThresholdText'] = dataAlert.get_conditionPresModel().dataAlertThresholdText;
			$t1.cmdParams['dataAlertConditionOp'] = dataAlert.get_conditionPresModel().dataAlertConditionOp;
			$t1.invoke().done(function(response) {
				result.resolve(response.$$cmdParams['isDataAlertConditionMet']);
			}).fail(function() {
				throw new ss.Exception('Failed to update reference line position and shading');
			});
		}
		else {
			result.resolve(dataAlert.get_alertConditionMet());
		}
		return result;
	};
	$tab_DataAlertClientCommands.closeDataAlertDialog = function DataAlertClientCommands$CloseDataAlertDialog() {
		var deferred = $.Deferred();
		(new $tab_CloseDataAlertDialogCmd()).invoke().done(function(response) {
			deferred.resolve();
		}).fail(function() {
			deferred.reject();
			throw new ss.Exception('Failed to close the dialog');
		});
		return deferred;
	};
	$tab_DataAlertClientCommands.getDataAlertInfo = function DataAlertClientCommands$GetDataAlertInfo(specifications) {
		var $t1 = new $tab_GetDataAlertInfoCmd();
		$t1.cmdParams['dataAlertSpecSerializedText'] = specifications;
		$t1.set_noExceptionDialog(true);
		return $t1.invoke();
	};
	$tab_DataAlertClientCommands.getDataAlertInfoMap = function DataAlertClientCommands$GetDataAlertInfoMap(specifications) {
		var result = $.Deferred();
		var $t1 = new $tab_GetDataAlertConditionInfoMapCmd();
		$t1.cmdParams['dataAlertSpecSerializedTextMap'] = JSON.stringify(specifications);
		$t1.set_noExceptionDialog(true);
		$t1.invoke().done(function(response) {
			result.resolve(response.$$cmdParams['dataAlertConditionInfoMap']);
		}).fail(function() {
			result.reject();
		});
		return result;
	};
	$tab_DataAlertClientCommands.evaluateDataAlert = function DataAlertClientCommands$EvaluateDataAlert(dataAlertSpecification) {
		var result = $.Deferred();
		var $t1 = new $tab_EvaluateDataAlertCmd();
		$t1.cmdParams['dataAlertSpecSerializedText'] = dataAlertSpecification;
		$t1.set_noExceptionDialog(true);
		$t1.invoke().done(function(response) {
			result.resolve(response.$$cmdParams['alertConditionMet']);
		}).fail(function() {
			result.reject();
		});
		return result;
	};
	global.tab.DataAlertClientCommands = $tab_DataAlertClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataAlertConditionOperation
	var $tab_DataAlertConditionOperation = function() {
	};
	$tab_DataAlertConditionOperation.__typeName = 'tab.DataAlertConditionOperation';
	$tab_DataAlertConditionOperation.supportedOperations = function DataAlertConditionOperation$SupportedOperations() {
		var $t1 = [];
		$t1.push('greater-than-equal');
		$t1.push('greater-than');
		$t1.push('less-than-equal');
		$t1.push('less-than');
		$t1.push('equals');
		return $t1;
	};
	$tab_DataAlertConditionOperation.displayString = function DataAlertConditionOperation$DisplayString(operationType) {
		switch (operationType) {
			case 'equals': {
				return tab.Strings.OperatorEqual;
			}
			case 'greater-than': {
				return tab.Strings.OperatorAbove;
			}
			case 'greater-than-equal': {
				return tab.Strings.OperatorAboveOrEqual;
			}
			case 'less-than': {
				return tab.Strings.OperatorBelow;
			}
			case 'less-than-equal': {
				return tab.Strings.OperatorBelowOrEqual;
			}
			default: {
				return '';
			}
		}
	};
	global.tab.DataAlertConditionOperation = $tab_DataAlertConditionOperation;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataAlertDialogModel
	var $tab_DataAlertDialogModel = function(parent) {
		this.$2$StopNotifyingField = null;
		this.$2$ShowOrUpdateDialogField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dataAlertDialogPresModel'.toString(), null));
	};
	$tab_DataAlertDialogModel.__typeName = 'tab.DataAlertDialogModel';
	$tab_DataAlertDialogModel.get_instance = function DataAlertDialogModel$get_Instance() {
		var $t1 = $tab_ApplicationModel.get_instance();
		return $t1.modelInstance($tab_DataAlertDialogModel).call($t1);
	};
	global.tab.DataAlertDialogModel = $tab_DataAlertDialogModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataAlertNotificationInterval
	var $tab_DataAlertNotificationInterval = function() {
	};
	$tab_DataAlertNotificationInterval.__typeName = 'tab.DataAlertNotificationInterval';
	$tab_DataAlertNotificationInterval.convertToString = function DataAlertNotificationInterval$ConvertToString(notificationIntervalInMinutes) {
		switch (notificationIntervalInMinutes) {
			case 0: {
				return tab.Strings.NotificationIntervalEveryTime;
			}
			case 2147483647: {
				return tab.Strings.NotificationIntervalOnlyOnce;
			}
			case 60: {
				return tab.Strings.NotificationIntervalHourly;
			}
			case 1440: {
				return tab.Strings.NotificationIntervalDaily;
			}
			case 10080: {
				return tab.Strings.NotificationIntervalWeekly;
			}
			default: {
				return '';
			}
		}
	};
	$tab_DataAlertNotificationInterval.supportedIntervals = function DataAlertNotificationInterval$SupportedIntervals() {
		var $t1 = [];
		$t1.push($tab_DataAlertNotificationInterval.onlyOnce);
		$t1.push($tab_DataAlertNotificationInterval.everyTime);
		$t1.push($tab_DataAlertNotificationInterval.hourly);
		$t1.push($tab_DataAlertNotificationInterval.daily);
		$t1.push($tab_DataAlertNotificationInterval.weekly);
		return $t1;
	};
	global.tab.DataAlertNotificationInterval = $tab_DataAlertNotificationInterval;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionCommands
	var $tab_DataConnectionCommands = function() {
	};
	$tab_DataConnectionCommands.__typeName = 'tab.DataConnectionCommands';
	$tab_DataConnectionCommands.get_serverConnectionTypes = function DataConnectionCommands$get_ServerConnectionTypes() {
		if (ss.isNullOrUndefined($tab_DataConnectionCommands.$cachedServerConnectionTypes)) {
			var result = $.Deferred();
			$tab_DataConnectionCommands.$cachedServerConnectionTypes = result;
			var connectionTypes = $tab_DataConnectionCommands.$getServerConnectionTypes();
			connectionTypes.done([function(connectionTypesResult) {
				result.resolve(connectionTypesResult);
			}]).fail([function(exception) {
				$tab_DataConnectionCommands.$cachedServerConnectionTypes = null;
				result.reject(exception);
			}]);
		}
		return $tab_DataConnectionCommands.$cachedServerConnectionTypes;
	};
	$tab_DataConnectionCommands.getCompositeClassName = function DataConnectionCommands$GetCompositeClassName(datasourceClass, fileExtension) {
		var result = $.Deferred();
		var $t1 = new $tab_GetCompositeClassNameCmd();
		$t1.cmdParams['dsClass'] = datasourceClass;
		$t1.cmdParams['fileExtension'] = fileExtension;
		var cmd = $t1;
		cmd.invoke().done(function(compositeClassNameResponse) {
			result.resolve(compositeClassNameResponse.$$cmdParams['compositeClassName']);
		}).fail(function(exception) {
			result.reject(exception);
		});
		return result;
	};
	$tab_DataConnectionCommands.acceptConnectionVariables = function DataConnectionCommands$AcceptConnectionVariables(connectionName) {
		var $t1 = new $tab_SetVariablesPromptRespondedCmd();
		$t1.cmdParams['connectionName'] = connectionName;
		$t1.set_uiBlocking('immediately');
		$t1.invoke();
	};
	$tab_DataConnectionCommands.editVariableByIndex = function DataConnectionCommands$EditVariableByIndex(connectionName, variableGuid, valueIndex, operation, firstValueIndex, secondValueIndex) {
		var cmdParams = {};
		cmdParams['connectionName'] = connectionName;
		cmdParams['variableGuid'] = variableGuid;
		cmdParams['valueIndex'] = valueIndex;
		cmdParams['variableValueOperation'] = operation;
		cmdParams['firstValueIndex'] = firstValueIndex;
		cmdParams['secondValueIndex'] = secondValueIndex;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-variable-value-by-index' }, cmdParams), 'immediately', null, null));
	};
	$tab_DataConnectionCommands.editVariableByInput = function DataConnectionCommands$EditVariableByInput(connectionName, variableGuid, valueIndex, operation, input) {
		var cmdParams = {};
		cmdParams['connectionName'] = connectionName;
		cmdParams['variableGuid'] = variableGuid;
		cmdParams['valueIndex'] = valueIndex;
		cmdParams['variableValueOperation'] = operation;
		cmdParams['valueString'] = input;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-variable-value-shim' }, cmdParams), 'immediately', null, null));
	};
	$tab_DataConnectionCommands.addVariable = function DataConnectionCommands$AddVariable(connectionName, variableGuid) {
		var deferred = $.Deferred();
		var cmdParams = {};
		cmdParams['connectionName'] = connectionName;
		cmdParams['variableGuid'] = variableGuid;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'add-new-variable-value' }, cmdParams), 'immediately', function(pm) {
			deferred.resolve(pm);
		}, function(exception) {
			deferred.reject();
		}));
		return deferred.promise();
	};
	$tab_DataConnectionCommands.deleteVariable = function DataConnectionCommands$DeleteVariable(connectionName, variableGuid, valueIndex, successCallback) {
		var cmdParams = {};
		cmdParams['connectionName'] = connectionName;
		cmdParams['variableGuid'] = variableGuid;
		cmdParams['valueIndex'] = valueIndex;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'delete-variable-value' }, cmdParams), 'immediately', function(resp) {
			successCallback();
		}, null));
	};
	$tab_DataConnectionCommands.addPublishedDataSourceConnection = function DataConnectionCommands$AddPublishedDataSourceConnection(dataSource, successHandler, errorHandler) {
		var cmdParams = {};
		cmdParams['datasourceDatabaseName'] = dataSource.get_name();
		cmdParams['repositoryUrl'] = dataSource.get_repositoryUrl();
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'add-dataserver-data-source' }, cmdParams);
		cmd.preserveRootResult = true;
		$tab_CommandController.SendCommand(new $tab_ClientCommand('immediately', null, cmd, function(pm) {
			var response = new $tab_AddDataServerDataSourceCmd$Response(pm);
			if (!ss.isNullOrEmptyString(response.$$cmdParams['datasource'])) {
				$tab_CommandController.SendCommand(new $tab_$LocalClientCommand(function(transaction) {
					$tab_ApplicationModel.get_instance().get_workbook().get_dataSchema().notifyNewDataSourceAdded(transaction.modelUpdateContext, response.$$cmdParams['datasource']);
				}));
				successHandler();
			}
		}, function(ex) {
			errorHandler();
		}));
	};
	$tab_DataConnectionCommands.selectDataServerDataSourceForProxy = function DataConnectionCommands$SelectDataServerDataSourceForProxy(proxyDataSource, editDataSource, proxyName, successHandler, errorHandler) {
		var $t1 = new $tab_SelectDataServerDataSourceForProxyCmd();
		$t1.cmdParams['datasource'] = proxyName;
		$t1.cmdParams['datasourceDatabaseName'] = editDataSource.get_name();
		$t1.cmdParams['repositoryUrl'] = editDataSource.get_repositoryUrl();
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		cmd.invoke().then(function(response) {
			successHandler();
		}, function(ex) {
			errorHandler();
		});
	};
	$tab_DataConnectionCommands.getDataSourceDataPresModel = function DataConnectionCommands$GetDataSourceDataPresModel(dataSource, errorCallback, canceler) {
		var $t1 = new $tab_GetDataSourceDataPresModelCmd();
		$t1.set_commandWaiter(canceler);
		$t1.cmdParams['datasource'] = dataSource;
		$t1.cmdParams['cacheOnly'] = false;
		$t1.cmdParams['useNotificationReturn'] = true;
		$t1.cmdParams['includeFormattedValues'] = true;
		$t1.set_uiBlocking('immediately');
		$t1.invoke().fail(function(error) {
			errorCallback(error.toString());
		});
	};
	$tab_DataConnectionCommands.getConnectionTypeGroupPresModel = function DataConnectionCommands$GetConnectionTypeGroupPresModel(type, successCallback, errorCallback) {
		var cmdParams = {};
		cmdParams['connectionTypeGroup'] = type;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'get-supported-connection-types' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'none', function(pm) {
			successCallback(pm);
		}, errorCallback);
	};
	$tab_DataConnectionCommands.getDSParamsFromPresModelWithConnectionName = function DataConnectionCommands$GetDSParamsFromPresModelWithConnectionName(settings, connectionName) {
		var $t1 = new $tab_GetDSParamsFromPresModelCmd();
		$t1.cmdParams['connectionName'] = connectionName;
		$t1.cmdParams['widgetConnectionParams'] = $tab_DataConnectionCommands.sanitizeConnectionParamsPresModel(settings);
		return $t1.invoke();
	};
	$tab_DataConnectionCommands.getDSParamsFromPresModelWithConnectionClass = function DataConnectionCommands$GetDSParamsFromPresModelWithConnectionClass(settings, connectionClass) {
		var $t1 = new $tab_GetDSParamsFromPresModelCmd();
		$t1.cmdParams['connectionClassName'] = connectionClass;
		$t1.cmdParams['widgetConnectionParams'] = $tab_DataConnectionCommands.sanitizeConnectionParamsPresModel(settings);
		return $t1.invoke();
	};
	$tab_DataConnectionCommands.checkConnection = function DataConnectionCommands$CheckConnection(connectionName, connectionParams) {
		var $t1 = new $tab_CheckConnectionCmd();
		$t1.cmdParams['connectionConfigName'] = connectionName;
		$t1.cmdParams['lookupTable'] = JSON.stringify(connectionParams);
		$t1.set_uiBlocking('immediately');
		$t1.set_suppressConnectionDialog(true);
		return $t1.invoke();
	};
	$tab_DataConnectionCommands.sanitizeConnectionParamsPresModel = function DataConnectionCommands$SanitizeConnectionParamsPresModel(connectionParams) {
		var sanitizedParams = _.clone(connectionParams);
		sanitizedParams.widgetAttrPassword = '';
		sanitizedParams.widgetAttrMdwPassword = '';
		return sanitizedParams;
	};
	$tab_DataConnectionCommands.$getServerConnectionTypes = function DataConnectionCommands$GetServerConnectionTypes() {
		var connectionTypes = $.Deferred();
		$tab_DataConnectionCommands.getConnectionTypeGroupPresModel('server', function(connectionGroupPresModel) {
			var tableauConnections = [];
			var databaseConnections = [];
			connectionGroupPresModel.connectionTypes.forEach(function(type) {
				if (ss.referenceEquals(type.valueClassAttr, $tab_ConnectionClass.server)) {
					type.label = tab.Strings.CreateConnectionPublishedDatasources;
					tableauConnections.push(type);
				}
				else {
					databaseConnections.push(type);
				}
			});
			connectionTypes.resolve({ item1: tableauConnections, item2: databaseConnections });
		}, function(exception) {
			connectionTypes.reject(exception);
		});
		return connectionTypes.promise();
	};
	global.tab.DataConnectionCommands = $tab_DataConnectionCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionPromptModel
	var $tab_DataConnectionPromptModel = function(parent) {
		this.$connectionVariableModels = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('variablePromptDialog'.toString(), null));
	};
	$tab_DataConnectionPromptModel.__typeName = 'tab.DataConnectionPromptModel';
	global.tab.DataConnectionPromptModel = $tab_DataConnectionPromptModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionUtils
	var $tab_DataConnectionUtils = function() {
	};
	$tab_DataConnectionUtils.__typeName = 'tab.DataConnectionUtils';
	$tab_DataConnectionUtils.connectionNameFromFullConnectionName = function DataConnectionUtils$ConnectionNameFromFullConnectionName(fullConnectionName) {
		var connectionName = '';
		var findLeaf = new RegExp('\\[(.)*?\\]', 'g');
		findLeaf.exec(fullConnectionName);
		var findLeafname = findLeaf.exec(fullConnectionName);
		if (ss.isValue(findLeafname) && findLeafname.length > 1) {
			connectionName = findLeafname[0].substr(1, findLeafname[0].length - 2);
		}
		return connectionName;
	};
	$tab_DataConnectionUtils.hasPublishedFederatedConnections = function DataConnectionUtils$HasPublishedFederatedConnections(connections) {
		for (var $t1 = 0; $t1 < connections.dataSourceConnectionAttemptInfos.length; $t1++) {
			var connection = connections.dataSourceConnectionAttemptInfos[$t1];
			if (connection.isPublishedFederated) {
				return true;
			}
		}
		return false;
	};
	$tab_DataConnectionUtils.getConnectionNames = function DataConnectionUtils$GetConnectionNames(connections) {
		var connectionNames = new Array(connections.dataSourceConnectionAttemptInfos.length);
		for (var i = 0; i < connections.dataSourceConnectionAttemptInfos.length; i++) {
			connectionNames[i] = connections.dataSourceConnectionAttemptInfos[i].connectionFullName;
		}
		return connectionNames;
	};
	$tab_DataConnectionUtils.stripDirectoryFromPath = function DataConnectionUtils$StripDirectoryFromPath(path) {
		var startIdx = path.lastIndexOf('\\') + 1;
		if (startIdx === 0) {
			startIdx = path.lastIndexOf('/') + 1;
		}
		startIdx = Math.max(0, startIdx);
		return path.substring(startIdx);
	};
	$tab_DataConnectionUtils.isEditConnectionForFilesSupported = function DataConnectionUtils$IsEditConnectionForFilesSupported(connectionClass) {
		return ss.contains($tab_ConnectionClass.get_getSupportedFileClasses(), connectionClass);
	};
	$tab_DataConnectionUtils.isEditConnectionMultiFileAllowed = function DataConnectionUtils$IsEditConnectionMultiFileAllowed(connectionClass) {
		return ss.isNullOrEmptyString(connectionClass) || connectionClass === 'textscan';
	};
	$tab_DataConnectionUtils.isDatabaseClassSupportedInReconnectFlow = function DataConnectionUtils$IsDatabaseClassSupportedInReconnectFlow(connectionClass) {
		return $tab_DataConnectionUtils.$isCategory(connectionClass, 'database');
	};
	$tab_DataConnectionUtils.isTableauServerSupportedInReconnectFlow = function DataConnectionUtils$IsTableauServerSupportedInReconnectFlow(connectionClass) {
		var result = $.Deferred();
		$tab_ConnectionClass.get_supportedTableauServerClasses().done(function(supportedTableauServerClasses) {
			result.resolve(ss.contains(supportedTableauServerClasses, connectionClass));
		});
		return result.promise();
	};
	$tab_DataConnectionUtils.isDataTabSupportedForDataSource = function DataConnectionUtils$IsDataTabSupportedForDataSource(dataSourceName) {
		var dataSourceModel = $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema().getDataSource(dataSourceName);
		return tsConfig.is_authoring && ss.isValue(dataSourceModel) && dataSourceModel.get_isDataTabViewSupported();
	};
	$tab_DataConnectionUtils.$isCategory = function DataConnectionUtils$IsCategory(connectionClass, category) {
		var result = $.Deferred();
		$tab_ConnectionClass.getConnectionTypeCategory(connectionClass).done(function(actualCategory) {
			result.resolve(actualCategory === category);
		});
		return result.promise();
	};
	global.tab.DataConnectionUtils = $tab_DataConnectionUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionVariableArrayModel
	var $tab_DataConnectionVariableArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('promptVariables'.toString(), 1));
	};
	$tab_DataConnectionVariableArrayModel.__typeName = 'tab.DataConnectionVariableArrayModel';
	global.tab.DataConnectionVariableArrayModel = $tab_DataConnectionVariableArrayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionVariableModel
	var $tab_DataConnectionVariableModel = function(parent, index) {
		this.$valueModels = null;
		this.$defaultValue = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString(), null));
	};
	$tab_DataConnectionVariableModel.__typeName = 'tab.DataConnectionVariableModel';
	global.tab.DataConnectionVariableModel = $tab_DataConnectionVariableModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionVariableValueArrayModel
	var $tab_DataConnectionVariableValueArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('variableValues'.toString(), 1));
	};
	$tab_DataConnectionVariableValueArrayModel.__typeName = 'tab.DataConnectionVariableValueArrayModel';
	global.tab.DataConnectionVariableValueArrayModel = $tab_DataConnectionVariableValueArrayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataConnectionVariableValueModel
	var $tab_DataConnectionVariableValueModel = function(parent, index) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString(), null));
	};
	$tab_DataConnectionVariableValueModel.__typeName = 'tab.DataConnectionVariableValueModel';
	global.tab.DataConnectionVariableValueModel = $tab_DataConnectionVariableValueModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataDictionaryModel
	var $tab_DataDictionaryModel = function(parent) {
		this.$numSegments = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dataDictionary'.toString(), null));
	};
	$tab_DataDictionaryModel.__typeName = 'tab.DataDictionaryModel';
	global.tab.DataDictionaryModel = $tab_DataDictionaryModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataHighlighterModel
	var $tab_DataHighlighterModel = function(parent) {
		this.$brushingLookupTable = null;
		this.$2$NewDataHighlighterPresModelField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dataHighlighter'.toString(), null));
	};
	$tab_DataHighlighterModel.__typeName = 'tab.DataHighlighterModel';
	global.tab.DataHighlighterModel = $tab_DataHighlighterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSchemaModel
	var $tab_DataSchemaModel = function(parent) {
		this.$dataSources = null;
		this.$parametersDSName = null;
		this.$localCurrentBlendingFields = null;
		this.$localBlendingFieldCandidates = null;
		this.$2$NewActiveDataSourceField = null;
		this.$2$NewDataSchemaField = null;
		this.$2$NewDataSourceAddedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('schemaViewer'.toString(), null));
	};
	$tab_DataSchemaModel.__typeName = 'tab.DataSchemaModel';
	global.tab.DataSchemaModel = $tab_DataSchemaModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSchemaSelectionModel
	var $tab_DataSchemaSelectionModel = function() {
		this.$2$SelectionChangedField = null;
		$tab_Model.call(this, null, new $tab_PresModelPathItem('doc:data-schema-selection-event'.toString(), null));
	};
	$tab_DataSchemaSelectionModel.__typeName = 'tab.DataSchemaSelectionModel';
	global.tab.DataSchemaSelectionModel = $tab_DataSchemaSelectionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSourceDataModel
	var $tab_DataSourceDataModel = function(parent) {
		this.$2$ModelUpdatedField = null;
		this.$2$StopNotifyingField = null;
		this.numRows = 0;
		this.isEmpty = false;
		this.isExtract = false;
		this.columnInfoLookup = null;
		this.dataDictionaryModel = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('', 0));
		this.numRows = 0;
		this.isEmpty = true;
		this.isExtract = false;
		this.columnInfoLookup = null;
		this.dataDictionaryModel = new $tab_DataDictionaryModel(this);
	};
	$tab_DataSourceDataModel.__typeName = 'tab.DataSourceDataModel';
	global.tab.DataSourceDataModel = $tab_DataSourceDataModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSourceFieldSection
	var $tab_DataSourceFieldSection = function() {
	};
	$tab_DataSourceFieldSection.__typeName = 'tab.DataSourceFieldSection';
	global.tab.DataSourceFieldSection = $tab_DataSourceFieldSection;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSourceModel
	var $tab_DataSourceModel = function(parent, name) {
		this.$columnInstancesModel = null;
		this.$2$CaptionChangedField = null;
		this.$2$CanAnalyzeDataChangedField = null;
		this.$2$SortOrderChangedField = null;
		this.baseColumnsModel = null;
		this.$2$SpecifiedWidthField = 0;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(name, 0));
		this.baseColumnsModel = new $tab_FieldsModel('fieldList', this);
	};
	$tab_DataSourceModel.__typeName = 'tab.DataSourceModel';
	$tab_DataSourceModel.splitGlobalFieldName = function DataSourceModel$SplitGlobalFieldName(fn) {
		return $tab_DataSourceModel.$stripBrackets(fn).split('].[');
	};
	$tab_DataSourceModel.$stripBrackets = function DataSourceModel$StripBrackets(name) {
		var s = name;
		if (s.length >= 2 && s.charCodeAt(0) === 91 && s.charCodeAt(s.length - 1) === 93) {
			return s.substr(1, s.length - 2);
		}
		return s;
	};
	$tab_DataSourceModel.$addPresModelFieldsToMap = function DataSourceModel$AddPresModelFieldsToMap(datasourcePresModel, fieldsMap, shouldUpdate) {
		$tab_DataSourceModel.$addTopLevelFieldsToMap(datasourcePresModel.topLevelFields, fieldsMap, shouldUpdate);
		$tab_DataSourceModel.$addFieldsToMap(0, datasourcePresModel.dimensionsFieldList, fieldsMap, shouldUpdate);
		$tab_DataSourceModel.$addFieldsToMap(1, datasourcePresModel.measuresFieldList, fieldsMap, shouldUpdate);
		$tab_DataSourceModel.$addFieldsToMap(2, datasourcePresModel.setsFieldList, fieldsMap, shouldUpdate);
		$tab_DataSourceModel.$addFieldsToMap(3, datasourcePresModel.parametersFieldList, fieldsMap, shouldUpdate);
	};
	$tab_DataSourceModel.$addTopLevelFieldsToMap = function DataSourceModel$AddTopLevelFieldsToMap(topLevelFields, fieldsMap, shouldUpdate) {
		if (ss.isValue(topLevelFields)) {
			$tab_DataSourceModel.$addFieldsToMap(5, topLevelFields.dimensionsFieldList, fieldsMap, shouldUpdate);
			$tab_DataSourceModel.$addFieldsToMap(6, topLevelFields.measuresFieldList, fieldsMap, shouldUpdate);
			$tab_DataSourceModel.$addFieldsToMap(4, topLevelFields.fieldContainerList, fieldsMap, shouldUpdate);
		}
	};
	$tab_DataSourceModel.$addFieldsToMap = function DataSourceModel$AddFieldsToMap(key, fields, fieldsMap, shouldUpdate) {
		if (ss.isValue(fields)) {
			var $t1 = fieldsMap[key];
			fieldsMap[key] = $t1.concat.apply($t1, fields);
			shouldUpdate();
		}
	};
	global.tab.DataSourceModel = $tab_DataSourceModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DataSourcesModel
	var $tab_DataSourcesModel = function(parent) {
		this.$dataSourceModels = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('schemaViewerDataSources'.toString(), null));
		this.$dataSourceModels = {};
	};
	$tab_DataSourcesModel.__typeName = 'tab.DataSourcesModel';
	global.tab.DataSourcesModel = $tab_DataSourcesModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.DeepCompareUtils
	var $tab_DeepCompareUtils = function() {
	};
	$tab_DeepCompareUtils.__typeName = 'tab.DeepCompareUtils';
	$tab_DeepCompareUtils.get_$log = function DeepCompareUtils$get_Log() {
		return tab.Logger.lazyGetLogger($tab_DeepCompareUtils);
	};
	$tab_DeepCompareUtils.$compareObjectArrays = function DeepCompareUtils$CompareObjectArrays(val1, val2, epsilon, nodePath) {
		var val1Array = val1;
		var val2Array = val2;
		if (val1Array.length !== val2Array.length) {
			return false;
		}
		for (var i = 0; i < val1Array.length; i++) {
			if (!$tab_DeepCompareUtils.$compareObjectsWithEpsilon(val1Array[i], val2Array[i], epsilon, nodePath)) {
				return false;
			}
		}
		return true;
	};
	$tab_DeepCompareUtils.$compareObjectsWithEpsilon = function DeepCompareUtils$CompareObjectsWithEpsilon(val1, val2, epsilon, nodePath) {
		if (!ss.referenceEquals(ss.getInstanceType(val1), ss.getInstanceType(val2))) {
			$tab_DeepCompareUtils.get_$log().error('RuntimeError: Types are different for node: ' + nodePath, []);
			return false;
		}
		else if (_.isNumber(val1)) {
			if (Math.abs(val1 - val2) > epsilon) {
				$tab_DeepCompareUtils.get_$log().error('RuntimeError: Numeric values are different for: ' + nodePath, []);
				return false;
			}
		}
		else if (_.isObject(val1)) {
			if (!$tab_DeepCompareUtils.deepCompare(val1, val2, epsilon, nodePath)) {
				$tab_DeepCompareUtils.get_$log().error('RuntimeError: Deep compare values are different for: ' + nodePath, []);
				return false;
			}
		}
		else if (_.isArray(val1)) {
			return $tab_DeepCompareUtils.$compareObjectArrays(val1, val2, epsilon, nodePath);
		}
		else if (!_.isEqual(val1, val2)) {
			$tab_DeepCompareUtils.get_$log().error('RuntimeError: Strings are different for: ' + nodePath, []);
			return false;
		}
		return true;
	};
	$tab_DeepCompareUtils.deepCompare = function DeepCompareUtils$DeepCompare(in1, in2, epsilon, nodePath) {
		if (ss.count(Object.keys(in1)) !== ss.count(Object.keys(in2))) {
			$tab_DeepCompareUtils.get_$log().error('RuntimeError: ' + nodePath + ': key counts are different.', []);
		}
		var ret = true;
		var $t1 = new ss.ObjectEnumerator(in1);
		try {
			while ($t1.moveNext()) {
				var pair1 = $t1.current();
				if (pair1.key === 'geoTable') {
					continue;
				}
				if (!ss.keyExists(in2, pair1.key)) {
					$tab_DeepCompareUtils.get_$log().error('RuntimeError: ' + nodePath + " doesn't contain key " + pair1.key, []);
					return false;
				}
				var val1 = pair1.value;
				var val2 = in2[pair1.key];
				ret = ret && $tab_DeepCompareUtils.$compareObjectsWithEpsilon(val1, val2, epsilon, nodePath + '.' + pair1.key);
			}
		}
		finally {
			$t1.dispose();
		}
		return ret;
	};
	global.tab.DeepCompareUtils = $tab_DeepCompareUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DefaultCommandDispatcher
	var $tab_DefaultCommandDispatcher = function() {
	};
	$tab_DefaultCommandDispatcher.__typeName = 'tab.DefaultCommandDispatcher';
	$tab_DefaultCommandDispatcher.get_instance = function DefaultCommandDispatcher$get_Instance() {
		$tab_DefaultCommandDispatcher.$instance = $tab_DefaultCommandDispatcher.$instance || new $tab_DefaultCommandDispatcher();
		return $tab_DefaultCommandDispatcher.$instance;
	};
	global.tab.DefaultCommandDispatcher = $tab_DefaultCommandDispatcher;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.DefaultSessionErrorHandler
	var $tab_DefaultSessionErrorHandler = function(commonDialogProvider, urlRoot) {
		this.$commonDialogProvider = null;
		this.$urlRoot = null;
		this.$commonDialogProvider = commonDialogProvider;
		this.$urlRoot = urlRoot;
	};
	$tab_DefaultSessionErrorHandler.__typeName = 'tab.DefaultSessionErrorHandler';
	$tab_DefaultSessionErrorHandler.$setIgnore = function DefaultSessionErrorHandler$SetIgnore(urlRoot) {
		var args = { error: null, success: null, type: 'POST', url: urlRoot + '/setignore/sessions' };
		var data = ss.mkdict(['_method', 'PUT', 'target', tsConfig.sessionid]);
		args.data = data;
		args.async = false;
		$tab_DefaultSessionErrorHandler.$request(args, null);
	};
	$tab_DefaultSessionErrorHandler.$request = function DefaultSessionErrorHandler$Request(args, handler) {
		return $tab_XhrUtil.helper(args, handler);
	};
	global.tab.DefaultSessionErrorHandler = $tab_DefaultSessionErrorHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DeferLayoutImpl
	var $tab_DeferLayoutImpl = function() {
		this.$shouldDeferLayoutUpdates = false;
		this.$isZoomin = false;
	};
	$tab_DeferLayoutImpl.__typeName = 'tab.DeferLayoutImpl';
	$tab_DeferLayoutImpl.get_instance = function DeferLayoutImpl$get_Instance() {
		if (ss.isNullOrUndefined($tab_DeferLayoutImpl.$instance)) {
			$tab_DeferLayoutImpl.$instance = new $tab_DeferLayoutImpl();
		}
		return $tab_DeferLayoutImpl.$instance;
	};
	global.tab.DeferLayoutImpl = $tab_DeferLayoutImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DeferredConnectionsCommandHandler
	var $tab_DeferredConnectionsCommandHandler = function(commonDialogProvider) {
		this.$commonDialogProvider = null;
		this.$lazyConnectionsEnabled = tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad');
		this.$commonDialogProvider = commonDialogProvider;
	};
	$tab_DeferredConnectionsCommandHandler.__typeName = 'tab.DeferredConnectionsCommandHandler';
	$tab_DeferredConnectionsCommandHandler.shouldHandleWithGivenStatus = function DeferredConnectionsCommandHandler$ShouldHandleWithGivenStatus(httpResponseStatus) {
		switch (httpResponseStatus) {
			case 401:
			case 503:
			case 500: {
				return true;
			}
			default: {
				return false;
			}
		}
	};
	$tab_DeferredConnectionsCommandHandler.constructEnsureLayoutForSheetCommand = function DeferredConnectionsCommandHandler$ConstructEnsureLayoutForSheetCommand() {
		var command = $tab_SheetClientCommands.createSwitchSheetsCommand(tsConfig.current_sheet_name);
		command.commandParams['forceConnectionAttempt'] = true;
		return $tab_RemoteClientCommand.create(command, 'immediately', null, null);
	};
	$tab_DeferredConnectionsCommandHandler.$createRedirectPath = function DeferredConnectionsCommandHandler$CreateRedirectPath(attemptInfo) {
		var map = {};
		map['exception'] = 'DataSourceException';
		map['name'] = attemptInfo.datasourceCaption;
		map['message'] = attemptInfo.exceptionMessage;
		map['type'] = attemptInfo.exceptionType;
		map['authoring'] = tsConfig.is_authoring;
		map['attributes'] = attemptInfo.exceptionAttrs;
		var path = ss.formatString('{0}/{1}/embeddedVizAuthentication.html?', BrowserSupport.BrowserSupport.GetOrigin(document.location), tsConfig.language);
		path = ss.formatString('{0}path={1}', path, encodeURIComponent((tsConfig.is_authoring ? $tab_VizUriModel.createForCurrentWindowLocation(null).get_absoluteUri() : tsConfig.requestURI.toString())));
		path = ss.formatString('{0}&attributes={1}', path, encodeURIComponent(JSON.stringify(map)));
		return path;
	};
	$tab_DeferredConnectionsCommandHandler.isBadPasswordError = function DeferredConnectionsCommandHandler$IsBadPasswordError(exceptionType) {
		exceptionType = exceptionType.toLowerCase();
		var isBadPasswordError = ss.equalsT($tab_DeferredConnectionsCommandHandler.$badPasswordError, exceptionType) || ss.equalsT($tab_DeferredConnectionsCommandHandler.$badOauthPasswordError, exceptionType) || ss.equalsT($tab_DeferredConnectionsCommandHandler.$noAssociatedCustomOAuthKeyError.toLowerCase(), exceptionType);
		return isBadPasswordError;
	};
	$tab_DeferredConnectionsCommandHandler.isBadOAuthCredentialsError = function DeferredConnectionsCommandHandler$IsBadOAuthCredentialsError(exceptionType) {
		return ss.compareStrings(exceptionType, $tab_DeferredConnectionsCommandHandler.$badOauthPasswordError, true) === 0;
	};
	$tab_DeferredConnectionsCommandHandler.$isDsConnectionErrorEditConnectionDialogEnabled = function DeferredConnectionsCommandHandler$IsDsConnectionErrorEditConnectionDialogEnabled() {
		return tsConfig.is_authoring && tab.MiscUtil.shouldShowDataTab();
	};
	$tab_DeferredConnectionsCommandHandler.$isShowEditConnectionInformationDialogApplicable = function DeferredConnectionsCommandHandler$IsShowEditConnectionInformationDialogApplicable(connectionAttemptInfo) {
		var result = $.Deferred();
		if (ss.isNullOrUndefined(connectionAttemptInfo) || ss.isNullOrUndefined(connectionAttemptInfo.exceptionAttrs)) {
			result.resolve(false);
		}
		else {
			var connectionClass = connectionAttemptInfo.exceptionAttrs[$tab_DataConnectionUtils.exceptionAttributesClass];
			$tab_DataConnectionUtils.isDatabaseClassSupportedInReconnectFlow(connectionClass).done(function(supported) {
				result.resolve($tab_DeferredConnectionsCommandHandler.$isDsConnectionErrorEditConnectionDialogEnabled() && $tab_DataConnectionUtils.isDataTabSupportedForDataSource(connectionAttemptInfo.datasource) && supported);
			});
		}
		return result.promise();
	};
	$tab_DeferredConnectionsCommandHandler.$isSigninDialogForTableauServerApplicable = function DeferredConnectionsCommandHandler$IsSigninDialogForTableauServerApplicable(connectionAttemptInfo, isEditConnectionCommand, isBadPasswordError) {
		var result = $.Deferred();
		if (ss.isNullOrUndefined(connectionAttemptInfo) || ss.isNullOrUndefined(connectionAttemptInfo.exceptionAttrs) || !isEditConnectionCommand || !isBadPasswordError) {
			result.resolve(false);
		}
		else {
			var connectionClass = connectionAttemptInfo.exceptionAttrs[$tab_DataConnectionUtils.exceptionAttributesClass];
			$tab_DataConnectionUtils.isTableauServerSupportedInReconnectFlow(connectionClass).done(function(supported) {
				result.resolve(supported);
			});
		}
		return result.promise();
	};
	global.tab.DeferredConnectionsCommandHandler = $tab_DeferredConnectionsCommandHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.DeferredConnectionsSessionErrorHandler
	var $tab_DeferredConnectionsSessionErrorHandler = function() {
		this.$lazyConnectionsEnabled = tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad');
	};
	$tab_DeferredConnectionsSessionErrorHandler.__typeName = 'tab.DeferredConnectionsSessionErrorHandler';
	global.tab.DeferredConnectionsSessionErrorHandler = $tab_DeferredConnectionsSessionErrorHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DeferredModelEventHandler
	var $tab_DeferredModelEventHandler = function() {
		this.$deferredEvents = null;
		this.exceptionHandler = null;
	};
	$tab_DeferredModelEventHandler.__typeName = 'tab.DeferredModelEventHandler';
	global.tab.DeferredModelEventHandler = $tab_DeferredModelEventHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DeviceLayoutInfoItemModel
	var $tab_DeviceLayoutInfoItemModel = function(parent) {
		this.$presetSizes = null;
		this.$presetSizesArray = null;
		this.$2$LayoutInfoUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('deviceLayoutInfoItem'.toString(), null));
		this.$presetSizes = [];
		this.$presetSizesArray = new $tab_$SizeItemListModel(new $tab_$PresetSizesContainerModel(this));
	};
	$tab_DeviceLayoutInfoItemModel.__typeName = 'tab.DeviceLayoutInfoItemModel';
	global.tab.DeviceLayoutInfoItemModel = $tab_DeviceLayoutInfoItemModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.DialogPlugins
	var $tab_DialogPlugins = function() {
	};
	$tab_DialogPlugins.__typeName = 'tab.DialogPlugins';
	$tab_DialogPlugins.$connectionPlugins = function DialogPlugins$ConnectionPlugins() {
		if (tab.FeatureFlags.isEnabled('DataToTheWebTabbedAuthReconnect')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/tabbed-auth-dialog', 'tabbed-auth-dialog', 'doc:tabbed-auth-dialog-event', null);
		}
		if (tab.FeatureFlags.isEnabled('DataToTheWebCustomSql')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/custom-sql-dialog', 'custom-sql-dialog', 'doc:launch-custom-sql-dialog-event', null);
		}
		if (tab.FeatureFlags.isEnabled('DataToTheWebInitialSql')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/initial-sql-dialog', 'initial-sql-dialog', 'doc:launch-initial-sql-dialog-event', null);
		}
		if (tab.FeatureFlags.isEnabled('AlternativeFederationEngineUserInterface')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/alternative-federation-engine-dialog', 'alternative-federation-engine-dialog', 'doc:launch-alternative-federation-engine-dialog-event', null);
		}
		if (tab.FeatureFlags.isEnabled('DataToTheWebStoredProcedures')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/stored-procedures-params-dialog', 'stored-procedures-params-dialog', 'doc:launch-stored-procedure-params-dialog-event', null);
		}
		$tab_DialogPlugins.addHybridDialog('@tableau/relationship-editor-dialog', 'relationship-editor-dialog', 'doc:launch-relationship-editor-notification-event', null);
	};
	$tab_DialogPlugins.getDialogHandlerCreator = function DialogPlugins$GetDialogHandlerCreator(notification, zIndexOverride) {
		var pluginDialogHandler = null;
		return function(m) {
			if (ss.isNullOrUndefined(pluginDialogHandler)) {
				pluginDialogHandler = new $tab_PluginDialogNotificationHandler(m, notification, document.body, zIndexOverride);
			}
			return pluginDialogHandler;
		};
	};
	$tab_DialogPlugins.addHybridDialogIfFeatureEnabled = function DialogPlugins$AddHybridDialogIfFeatureEnabled(featureId, moduleName, fileBaseName, notification, zIndexOverride) {
		if (tab.FeatureFlags.isEnabled(featureId)) {
			$tab_DialogPlugins.addHybridDialog(moduleName, fileBaseName, notification, zIndexOverride);
		}
	};
	$tab_DialogPlugins.addHybridDialog = function DialogPlugins$AddHybridDialog(moduleName, fileBaseName, notification, zIndexOverride) {
		var dialogModule = $tab_ModuleManager.registerRawJsModule(moduleName, fileBaseName + '.min', fileBaseName).andLoadOnDemandIf(true).moduleBeingConfigured;
		for (var $t1 = 0; $t1 < $tab_DialogPlugins.$contractModules.length; $t1++) {
			var contractModule = $tab_DialogPlugins.$contractModules[$t1];
			dialogModule.addDependency(contractModule);
		}
		$tab_NotificationHandlerLauncher.registerHandlerFromJsModule(moduleName, notification, $tab_DialogPlugins.getDialogHandlerCreator(notification, zIndexOverride));
		return dialogModule;
	};
	$tab_DialogPlugins.$initializeContractModules = function DialogPlugins$InitializeContractModules() {
		var contractModules = [];
		contractModules.push($tab_PluginContractModules.dialogApiContract);
		contractModules.push($tab_PluginContractModules.menuApiContract);
		contractModules.push($tab_PluginContractModules.hybridWidgetsContract);
		contractModules.push($tab_PluginContractModules.stylingComponentsContract);
		return contractModules;
	};
	$tab_DialogPlugins.$getDependencyModule = function DialogPlugins$GetDependencyModule(moduleName, fileBaseName) {
		if (ss.keyExists($tab_DialogPlugins.$dependencyModules, moduleName)) {
			return $tab_DialogPlugins.$dependencyModules[moduleName];
		}
		var moduleInfo = $tab_ModuleManager.registerRawJsModule(moduleName, fileBaseName + '.min', fileBaseName).andLoadOnDemandIf(true).moduleBeingConfigured;
		$tab_DialogPlugins.$dependencyModules[moduleName] = moduleInfo;
		return moduleInfo;
	};
	global.tab.DialogPlugins = $tab_DialogPlugins;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DifferenceTableCalcModel
	var $tab_DifferenceTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		this.$3$ReferenceModelField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('differenceTableCalcPresModel'.toString(), null));
		this.set_referenceModel(new $tab_TableCalcReferenceModel(this));
	};
	$tab_DifferenceTableCalcModel.__typeName = 'tab.DifferenceTableCalcModel';
	global.tab.DifferenceTableCalcModel = $tab_DifferenceTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DisplayDataAlertCmd
	var $tab_DisplayDataAlertCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DisplayDataAlertCmd$Response]).call(this);
	};
	$tab_DisplayDataAlertCmd.__typeName = 'tab.DisplayDataAlertCmd';
	global.tab.DisplayDataAlertCmd = $tab_DisplayDataAlertCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DisplayDataAlertCmd.Response
	var $tab_DisplayDataAlertCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DisplayDataAlertCmd$Response.__typeName = 'tab.DisplayDataAlertCmd$Response';
	global.tab.DisplayDataAlertCmd$Response = $tab_DisplayDataAlertCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DoubleClickRegionNoReturnServerCmd
	var $tab_DoubleClickRegionNoReturnServerCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DoubleClickRegionNoReturnServerCmd$Response]).call(this);
	};
	$tab_DoubleClickRegionNoReturnServerCmd.__typeName = 'tab.DoubleClickRegionNoReturnServerCmd';
	global.tab.DoubleClickRegionNoReturnServerCmd = $tab_DoubleClickRegionNoReturnServerCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DoubleClickRegionNoReturnServerCmd.Response
	var $tab_DoubleClickRegionNoReturnServerCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DoubleClickRegionNoReturnServerCmd$Response.__typeName = 'tab.DoubleClickRegionNoReturnServerCmd$Response';
	global.tab.DoubleClickRegionNoReturnServerCmd$Response = $tab_DoubleClickRegionNoReturnServerCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DownloadableFontProperties
	var $tab_DownloadableFontProperties = function() {
		this.woffLocation = null;
		$tab_FontProperties.call(this);
	};
	$tab_DownloadableFontProperties.__typeName = 'tab.DownloadableFontProperties';
	global.tab.DownloadableFontProperties = $tab_DownloadableFontProperties;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DownloadableFontPropertiesExtensions
	var $tab_DownloadableFontPropertiesExtensions = function() {
	};
	$tab_DownloadableFontPropertiesExtensions.__typeName = 'tab.DownloadableFontPropertiesExtensions';
	$tab_DownloadableFontPropertiesExtensions.toDownloadableFontProperties = function DownloadableFontPropertiesExtensions$ToDownloadableFontProperties(properties, woffLocation) {
		var $t1 = new $tab_DownloadableFontProperties();
		$t1.set_fontFamily(properties.get_fontFamily());
		$t1.set_style(properties.get_style());
		$t1.set_weight(properties.get_weight());
		$t1.woffLocation = woffLocation;
		return $t1;
	};
	global.tab.DownloadableFontPropertiesExtensions = $tab_DownloadableFontPropertiesExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DownloadAsVersionCmd
	var $tab_DownloadAsVersionCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_DownloadAsVersionCmd$Response]).call(this);
	};
	$tab_DownloadAsVersionCmd.__typeName = 'tab.DownloadAsVersionCmd';
	$tab_DownloadAsVersionCmd.get_commandName = function DownloadAsVersionCmd$get_CommandName() {
		return 'download-as-version';
	};
	global.tab.DownloadAsVersionCmd = $tab_DownloadAsVersionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DownloadAsVersionCmd.Response
	var $tab_DownloadAsVersionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DownloadAsVersionCmd$Response.__typeName = 'tab.DownloadAsVersionCmd$Response';
	global.tab.DownloadAsVersionCmd$Response = $tab_DownloadAsVersionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DownloadAsVersionCommand
	var $tab_DownloadAsVersionCommand = function() {
		$tab_DownloadAsVersionCmd.call(this);
	};
	$tab_DownloadAsVersionCommand.__typeName = 'tab.DownloadAsVersionCommand';
	global.tab.DownloadAsVersionCommand = $tab_DownloadAsVersionCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DownloadWorkbookCmd
	var $tab_DownloadWorkbookCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_DownloadWorkbookCmd$Response]).call(this);
	};
	$tab_DownloadWorkbookCmd.__typeName = 'tab.DownloadWorkbookCmd';
	$tab_DownloadWorkbookCmd.get_commandName = function DownloadWorkbookCmd$get_CommandName() {
		return 'download-workbook';
	};
	global.tab.DownloadWorkbookCmd = $tab_DownloadWorkbookCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DownloadWorkbookCmd.Response
	var $tab_DownloadWorkbookCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DownloadWorkbookCmd$Response.__typeName = 'tab.DownloadWorkbookCmd$Response';
	global.tab.DownloadWorkbookCmd$Response = $tab_DownloadWorkbookCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DrawItemFontExtractor
	var $tab_DrawItemFontExtractor = function() {
	};
	$tab_DrawItemFontExtractor.__typeName = 'tab.DrawItemFontExtractor';
	global.tab.DrawItemFontExtractor = $tab_DrawItemFontExtractor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DrillPathModel
	var $tab_DrillPathModel = function(parent) {
		this.$levels = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_DrillPathModel.__typeName = 'tab.DrillPathModel';
	global.tab.DrillPathModel = $tab_DrillPathModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DrillPathModelFactory
	var $tab_DrillPathModelFactory = function() {
	};
	$tab_DrillPathModelFactory.__typeName = 'tab.DrillPathModelFactory';
	$tab_DrillPathModelFactory.create = function DrillPathModelFactory$Create(drillPM, parent, fieldModelCache) {
		var levels = $tab_DrillPathModelFactory.$buildLevelArray(drillPM, parent, fieldModelCache);
		var drillPathModel = (ss.keyExists(fieldModelCache.get_drillPaths(), drillPM.fn) ? fieldModelCache.get_drillPaths()[drillPM.fn].asDrillPath() : new $tab_DrillPathModel(parent));
		drillPathModel.update(drillPM, levels);
		return drillPathModel;
	};
	$tab_DrillPathModelFactory.$buildLevelArray = function DrillPathModelFactory$BuildLevelArray(drillPM, parent, fieldModelCache) {
		var levels = [];
		if (ss.isNullOrUndefined(drillPM.columnList)) {
			return levels;
		}
		for (var $t1 = 0; $t1 < drillPM.columnList.length; $t1++) {
			var child = drillPM.columnList[$t1];
			levels.push($tab_FieldColumnModelFactory.create(child, parent, fieldModelCache));
		}
		return levels;
	};
	global.tab.DrillPathModelFactory = $tab_DrillPathModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DropOnDashboardCmd
	var $tab_DropOnDashboardCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DropOnDashboardCmd$Response]).call(this);
	};
	$tab_DropOnDashboardCmd.__typeName = 'tab.DropOnDashboardCmd';
	global.tab.DropOnDashboardCmd = $tab_DropOnDashboardCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DropOnDashboardCmd.Response
	var $tab_DropOnDashboardCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DropOnDashboardCmd$Response.__typeName = 'tab.DropOnDashboardCmd$Response';
	global.tab.DropOnDashboardCmd$Response = $tab_DropOnDashboardCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DropOnSchemaDrillPathCmd
	var $tab_DropOnSchemaDrillPathCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DropOnSchemaDrillPathCmd$Response]).call(this);
	};
	$tab_DropOnSchemaDrillPathCmd.__typeName = 'tab.DropOnSchemaDrillPathCmd';
	global.tab.DropOnSchemaDrillPathCmd = $tab_DropOnSchemaDrillPathCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DropOnSchemaDrillPathCmd.Response
	var $tab_DropOnSchemaDrillPathCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DropOnSchemaDrillPathCmd$Response.__typeName = 'tab.DropOnSchemaDrillPathCmd$Response';
	global.tab.DropOnSchemaDrillPathCmd$Response = $tab_DropOnSchemaDrillPathCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DropOnSchemaFieldCmd
	var $tab_DropOnSchemaFieldCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DropOnSchemaFieldCmd$Response]).call(this);
	};
	$tab_DropOnSchemaFieldCmd.__typeName = 'tab.DropOnSchemaFieldCmd';
	global.tab.DropOnSchemaFieldCmd = $tab_DropOnSchemaFieldCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DropOnSchemaFieldCmd.Response
	var $tab_DropOnSchemaFieldCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DropOnSchemaFieldCmd$Response.__typeName = 'tab.DropOnSchemaFieldCmd$Response';
	global.tab.DropOnSchemaFieldCmd$Response = $tab_DropOnSchemaFieldCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DropOnSchemaSectionCmd
	var $tab_DropOnSchemaSectionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DropOnSchemaSectionCmd$Response]).call(this);
	};
	$tab_DropOnSchemaSectionCmd.__typeName = 'tab.DropOnSchemaSectionCmd';
	global.tab.DropOnSchemaSectionCmd = $tab_DropOnSchemaSectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DropOnSchemaSectionCmd.Response
	var $tab_DropOnSchemaSectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_DropOnSchemaSectionCmd$Response.__typeName = 'tab.DropOnSchemaSectionCmd$Response';
	global.tab.DropOnSchemaSectionCmd$Response = $tab_DropOnSchemaSectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.DSColumnInfoModel
	var $tab_DSColumnInfoModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('', 0));
	};
	$tab_DSColumnInfoModel.__typeName = 'tab.DSColumnInfoModel';
	global.tab.DSColumnInfoModel = $tab_DSColumnInfoModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EditObjectCaptionCmd
	var $tab_EditObjectCaptionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EditObjectCaptionCmd$Response]).call(this);
	};
	$tab_EditObjectCaptionCmd.__typeName = 'tab.EditObjectCaptionCmd';
	global.tab.EditObjectCaptionCmd = $tab_EditObjectCaptionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EditObjectCaptionCmd.Response
	var $tab_EditObjectCaptionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_EditObjectCaptionCmd$Response.__typeName = 'tab.EditObjectCaptionCmd$Response';
	global.tab.EditObjectCaptionCmd$Response = $tab_EditObjectCaptionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Models.EditValueWidgetModel
	var $tab_EditValueWidgetModel = function(parent, propertyPath) {
		this.$2$ModelUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(propertyPath.toString(), null));
	};
	$tab_EditValueWidgetModel.__typeName = 'tab.EditValueWidgetModel';
	global.tab.EditValueWidgetModel = $tab_EditValueWidgetModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.ErrorHandlerChain
	var $tab_ErrorHandlerChain = function(errorHandlers) {
		this.$errorHandlers = null;
		ss.Debug.assert(!ss.isNullOrUndefined(errorHandlers), 'No error handlers passed.');
		ss.Debug.assert(errorHandlers.length !== 0, 'errorHandlers.Length != 0');
		this.$errorHandlers = errorHandlers.slice(0);
	};
	$tab_ErrorHandlerChain.__typeName = 'tab.ErrorHandlerChain';
	global.tab.ErrorHandlerChain = $tab_ErrorHandlerChain;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EstablishCloudConnectionCmd
	var $tab_EstablishCloudConnectionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EstablishCloudConnectionCmd$Response]).call(this);
	};
	$tab_EstablishCloudConnectionCmd.__typeName = 'tab.EstablishCloudConnectionCmd';
	global.tab.EstablishCloudConnectionCmd = $tab_EstablishCloudConnectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EstablishCloudConnectionCmd.Response
	var $tab_EstablishCloudConnectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_EstablishCloudConnectionCmd$Response.__typeName = 'tab.EstablishCloudConnectionCmd$Response';
	global.tab.EstablishCloudConnectionCmd$Response = $tab_EstablishCloudConnectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EstablishCloudConnectionNoUndoCmd
	var $tab_EstablishCloudConnectionNoUndoCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EstablishCloudConnectionNoUndoCmd$Response]).call(this);
	};
	$tab_EstablishCloudConnectionNoUndoCmd.__typeName = 'tab.EstablishCloudConnectionNoUndoCmd';
	global.tab.EstablishCloudConnectionNoUndoCmd = $tab_EstablishCloudConnectionNoUndoCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EstablishCloudConnectionNoUndoCmd.Response
	var $tab_EstablishCloudConnectionNoUndoCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_EstablishCloudConnectionNoUndoCmd$Response.__typeName = 'tab.EstablishCloudConnectionNoUndoCmd$Response';
	global.tab.EstablishCloudConnectionNoUndoCmd$Response = $tab_EstablishCloudConnectionNoUndoCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EstablishConnectionCmd
	var $tab_EstablishConnectionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EstablishConnectionCmd$Response]).call(this);
	};
	$tab_EstablishConnectionCmd.__typeName = 'tab.EstablishConnectionCmd';
	global.tab.EstablishConnectionCmd = $tab_EstablishConnectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EstablishConnectionCmd.Response
	var $tab_EstablishConnectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_EstablishConnectionCmd$Response.__typeName = 'tab.EstablishConnectionCmd$Response';
	global.tab.EstablishConnectionCmd$Response = $tab_EstablishConnectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EstablishConnectionNoUndoCmd
	var $tab_EstablishConnectionNoUndoCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EstablishConnectionNoUndoCmd$Response]).call(this);
	};
	$tab_EstablishConnectionNoUndoCmd.__typeName = 'tab.EstablishConnectionNoUndoCmd';
	global.tab.EstablishConnectionNoUndoCmd = $tab_EstablishConnectionNoUndoCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EstablishConnectionNoUndoCmd.Response
	var $tab_EstablishConnectionNoUndoCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_EstablishConnectionNoUndoCmd$Response.__typeName = 'tab.EstablishConnectionNoUndoCmd$Response';
	global.tab.EstablishConnectionNoUndoCmd$Response = $tab_EstablishConnectionNoUndoCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EvaluateDataAlertCmd
	var $tab_EvaluateDataAlertCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EvaluateDataAlertCmd$Response]).call(this);
	};
	$tab_EvaluateDataAlertCmd.__typeName = 'tab.EvaluateDataAlertCmd';
	global.tab.EvaluateDataAlertCmd = $tab_EvaluateDataAlertCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.EvaluateDataAlertCmd.Response
	var $tab_EvaluateDataAlertCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_EvaluateDataAlertCmd$Response.__typeName = 'tab.EvaluateDataAlertCmd$Response';
	global.tab.EvaluateDataAlertCmd$Response = $tab_EvaluateDataAlertCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ExportServerCommands
	var $tab_ExportServerCommands = function() {
	};
	$tab_ExportServerCommands.__typeName = 'tab.ExportServerCommands';
	$tab_ExportServerCommands.exportImage = function ExportServerCommands$ExportImage(sheetName, storyPointId, dialogData, sheetNames, scrollOffsets) {
		var cmdParams = {};
		if (ss.isValue(sheetName)) {
			cmdParams['sheet'] = sheetName;
		}
		cmdParams['storyPointId'] = storyPointId;
		cmdParams['scrollOffsetSheets'] = JSON.stringify(sheetNames);
		var numPoints = scrollOffsets.length;
		var pointsPresModel = new Array(numPoints);
		for (var i = 0; i < numPoints; i++) {
			var pointPresModel = {};
			pointPresModel.x = ss.round(scrollOffsets[i].x);
			pointPresModel.y = ss.round(scrollOffsets[i].y);
			pointsPresModel[i] = pointPresModel;
		}
		cmdParams['scrollOffsetPoints'] = JSON.stringify(pointsPresModel);
		var cmd;
		if (tab.FeatureFlags.isEnabled('ImageExportRefactor')) {
			cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'png-export-server-new' }, cmdParams);
		}
		else {
			cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'png-export-server' }, cmdParams);
		}
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', function(result) {
			var exportPM = result;
			var session = $tab_CommandController.get().legacySession;
			session.fileDownloadHelper.openDownload(session.formatSessionTempfileReference(exportPM.tempfileKey, true, true), dialogData);
		}, null);
	};
	$tab_ExportServerCommands.exportPowerPoint = function ExportServerCommands$ExportPowerPoint() {
		var cmdParams = {};
		var exportOriginURL = $tab_ExportServerCommands.$getExportOriginURL();
		var session = $tab_CommandController.get().legacySession;
		if (tab.FeatureFlags.isEnabled('ExportToPowerPointSP2OptionsDialog')) {
			var sheetNames = tsConfig.visible_sheets;
			cmdParams['urlString'] = exportOriginURL;
			cmdParams['thumbnailUrlStrings'] = $tab_ExportServerCommands.$getThumbnailURLStrings(session, sheetNames);
			cmdParams['sheetNames'] = sheetNames;
			var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'power-point-export-server-dialog' }, cmdParams);
			$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
		}
		else {
			cmdParams['exportOriginUrl'] = exportOriginURL;
			var cmd1 = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'power-point-export-server' }, cmdParams);
			var dialogData = tableau.types.ExportDialogType['ExportPowerPoint'];
			$tab_ServerCommands.executeServerCommand(cmd1, 'immediately', function(serverResultPM) {
				var exportPM = serverResultPM;
				session.fileDownloadHelper.openDownload(session.formatSessionTempfileReference(exportPM.tempfileKey, true, true), dialogData);
			}, null);
		}
	};
	$tab_ExportServerCommands.$getExportOriginURL = function ExportServerCommands$GetExportOriginURL() {
		var exportOriginURL = tsConfig.external_workbook_url;
		if (ss.isNullOrEmptyString(exportOriginURL)) {
			exportOriginURL = tsConfig.requestURI;
			if (!ss.isNullOrEmptyString(exportOriginURL)) {
				exportOriginURL = exportOriginURL.split('?')[0];
			}
		}
		return exportOriginURL;
	};
	$tab_ExportServerCommands.$handlePowerPointFileDownload = function ExportServerCommands$HandlePowerPointFileDownload(pm, context) {
		var exportPM = pm;
		var session = $tab_CommandController.get().legacySession;
		var dialogData = tableau.types.ExportDialogType['ExportPowerPoint'];
		session.fileDownloadHelper.openDownload(session.formatSessionTempfileReference(exportPM.tempfileKey, true, true), dialogData);
	};
	$tab_ExportServerCommands.$getThumbnailURLStrings = function ExportServerCommands$GetThumbnailURLStrings(session, sheetNames) {
		var sheetURLs = tsConfig.repository_urls;
		var thumbnailURLStrings = {};
		for (var i = 0; i < sheetURLs.length; ++i) {
			var sheetURL = sheetURLs[i];
			var repoPathObject = new $tab_RepoPathObject(sheetURL);
			var viewURL = repoPathObject.get_originalViewURL();
			thumbnailURLStrings[sheetNames[i]] = session.formatThumbnailReference(viewURL);
		}
		return thumbnailURLStrings;
	};
	global.tab.ExportServerCommands = $tab_ExportServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ExtensionClientCommands
	var $tab_ExtensionClientCommands = function() {
	};
	$tab_ExtensionClientCommands.__typeName = 'tab.ExtensionClientCommands';
	$tab_ExtensionClientCommands.showChooseExtensionDialog = function ExtensionClientCommands$ShowChooseExtensionDialog(zoneId) {
		var $t1 = new $tab_SelectExtensionAndAddToDashboardCmd();
		$t1.cmdParams['zoneId'] = zoneId | 0;
		var command = $t1;
		command.invoke();
	};
	$tab_ExtensionClientCommands.showPermissionsPromptDialog = function ExtensionClientCommands$ShowPermissionsPromptDialog(extensions) {
		var $t1 = new $tab_LaunchPermissionsPromptCmd();
		$t1.cmdParams['extensionRegistrationKeyPresModelList'] = extensions;
		var command = $t1;
		command.invoke();
	};
	global.tab.ExtensionClientCommands = $tab_ExtensionClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ExtensionPermissionsCache
	var $tab_ExtensionPermissionsCache = function() {
		this.$responses = {};
		this.$1$UpdatedField = null;
		this.$1$StopNotifyingField = null;
	};
	$tab_ExtensionPermissionsCache.__typeName = 'tab.ExtensionPermissionsCache';
	global.tab.ExtensionPermissionsCache = $tab_ExtensionPermissionsCache;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ExtensionPermissionsProxy
	var $tab_ExtensionPermissionsProxy = function() {
	};
	$tab_ExtensionPermissionsProxy.__typeName = 'tab.ExtensionPermissionsProxy';
	$tab_ExtensionPermissionsProxy.$returnModel = function ExtensionPermissionsProxy$ReturnModel() {
		return $tab_ApplicationModel.get_instance().get_extensionPermissionsCache();
	};
	global.tab.ExtensionPermissionsProxy = $tab_ExtensionPermissionsProxy;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ExtensionZoneModel
	var $tab_ExtensionZoneModel = function(parent) {
		this.$zoneModel = null;
		this.$2$ExtensionZoneUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('addInZone'.toString(), null));
		this.$zoneModel = parent.get_zone();
	};
	$tab_ExtensionZoneModel.__typeName = 'tab.ExtensionZoneModel';
	global.tab.ExtensionZoneModel = $tab_ExtensionZoneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.ExtraHtmlMarkupRemover
	var $tab_ExtraHtmlMarkupRemover = function() {
	};
	$tab_ExtraHtmlMarkupRemover.__typeName = 'tab.ExtraHtmlMarkupRemover';
	$tab_ExtraHtmlMarkupRemover.stripOutMarkup = function ExtraHtmlMarkupRemover$StripOutMarkup(info) {
		if (ss.isNullOrEmptyString(info)) {
			return info;
		}
		var $t1 = [];
		$t1.push(new RegExp('<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>', 'gi'));
		$t1.push(new RegExp('<html.*?>.+?</html.*?>', 'gi'));
		var markupRegexes = $t1;
		for (var $t2 = 0; $t2 < markupRegexes.length; $t2++) {
			var markupRegex = markupRegexes[$t2];
			info = info.replace(markupRegex, '');
		}
		return info;
	};
	global.tab.ExtraHtmlMarkupRemover = $tab_ExtraHtmlMarkupRemover;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FailureHandler
	var $tab_FailureHandler = function() {
	};
	$tab_FailureHandler.__typeName = 'tab.FailureHandler';
	$tab_FailureHandler.$reportFailures = function FailureHandler$ReportFailures() {
		if (tab.ErrorTrace.hasTraces()) {
			var outgoing = tab.ErrorTrace.dequeueTraces();
			var entries = [];
			var url = outgoing[0].url;
			var userAgent = outgoing[0].userAgent;
			for (var $t1 = 0; $t1 < outgoing.length; $t1++) {
				var failure = outgoing[$t1];
				entries.push($tab_FailureHandler.packageStackTraceData(failure));
			}
			$tab_CommandController.get().legacySession.informServerAboutErrors(url, userAgent, entries);
		}
	};
	$tab_FailureHandler.packageStackTraceData = function FailureHandler$PackageStackTraceData(stack) {
		var stackLines = [];
		var remainingAvailableChars = $tab_FailureHandler.$getCharsAvailableForSingleError(stack);
		for (var $t1 = 0; $t1 < stack.locations.length; $t1++) {
			var loc = stack.locations[$t1];
			if (ss.isNullOrUndefined(loc.url) && ss.isNullOrUndefined(loc.lineNo) && ss.isNullOrUndefined(loc.functionName)) {
				continue;
			}
			var stackLine = new ss.StringBuilder();
			var scriptUrl = $tab_FailureHandler.$trimPathFromJsUrl(loc.url);
			stackLine.append(scriptUrl + ':' + loc.lineNo + ',' + loc.columnNo + ' ' + loc.functionName);
			if (ss.isValue(loc.context) && loc.context.length > 0) {
				for (var $t2 = 0; $t2 < loc.context.length; $t2++) {
					var contextItem = loc.context[$t2];
					var truncatedContext = contextItem;
					if (contextItem.length > $tab_FailureHandler.$sourceLineLengthLimit) {
						if (ss.isValue(loc.functionName) && contextItem.indexOf(loc.functionName) > 0) {
							var index = contextItem.indexOf(loc.functionName);
							var start = Math.max(0, index - 60);
							var end = Math.min(start + $tab_FailureHandler.$sourceLineLengthLimit, contextItem.length - 1);
							truncatedContext = contextItem.substring(start, end);
						}
						else {
							truncatedContext = contextItem.substr(0, $tab_FailureHandler.$sourceLineLengthLimit);
						}
					}
					stackLine.append('    ' + truncatedContext.trim());
				}
			}
			remainingAvailableChars -= stackLine.length;
			if (remainingAvailableChars <= $tab_FailureHandler.$truncatedStackNotice.length) {
				stackLines.push($tab_FailureHandler.$truncatedStackNotice);
				break;
			}
			stackLines.push(stackLine.toString());
		}
		var errStruct = { name: stack.name, message: stack.message, errorMode: stack.traceMode.toString(), stack: stackLines };
		return errStruct;
	};
	$tab_FailureHandler.dispose = function FailureHandler$Dispose() {
		$tab_FailureHandler.$reportFailures();
		window.clearInterval($tab_FailureHandler.$intervalID);
		$tab_FailureHandler.$intervalID = -1;
	};
	$tab_FailureHandler.$getCharsAvailableForAllErrorData = function FailureHandler$GetCharsAvailableForAllErrorData(url, userAgent) {
		var maxPayloadSize = tsConfig.clientErrorReportingMaxRequestSizeBytes;
		return maxPayloadSize - ss.coalesce(url, '').length - ss.coalesce(userAgent, '').length - $tab_FailureHandler.charBufferForReportOverhead;
	};
	$tab_FailureHandler.$getCharsAvailableForSingleError = function FailureHandler$GetCharsAvailableForSingleError(stack) {
		var maxPayloadSize = $tab_FailureHandler.$getCharsAvailableForAllErrorData(stack.url, stack.userAgent);
		return maxPayloadSize - (stack.message || '').toString().length - ss.coalesce(stack.name, '').length - $tab_FailureHandler.charBufferForIndividualErrorOverhead;
	};
	$tab_FailureHandler.$trimPathFromJsUrl = function FailureHandler$TrimPathFromJsUrl(scriptUrl) {
		var JavascriptDir = '/javascripts/';
		var index = scriptUrl.indexOf(JavascriptDir);
		if (index > 0) {
			scriptUrl = scriptUrl.substr(index + JavascriptDir.length);
		}
		return scriptUrl;
	};
	global.tab.FailureHandler = $tab_FailureHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldColumnModel
	var $tab_FieldColumnModel = function(parent) {
		this.$3$IsTimeIntelligenceColumnField = false;
		$tab_FieldModel.call(this, parent);
	};
	$tab_FieldColumnModel.__typeName = 'tab.FieldColumnModel';
	global.tab.FieldColumnModel = $tab_FieldColumnModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldColumnModelFactory
	var $tab_FieldColumnModelFactory = function() {
	};
	$tab_FieldColumnModelFactory.__typeName = 'tab.FieldColumnModelFactory';
	$tab_FieldColumnModelFactory.create = function FieldColumnModelFactory$Create(presModel, parent, fieldModelCache) {
		switch (presModel.type) {
			case 'group': {
				return $tab_GroupModelFactory.create(presModel, parent, fieldModelCache);
			}
			case 'structured-measure': {
				return $tab_StructuredMeasureModelFactory.create(presModel, parent, fieldModelCache);
			}
			default: {
				var columnModel = (ss.keyExists(fieldModelCache.get_fields(), presModel.fn) ? fieldModelCache.get_fields()[presModel.fn].asColumn() : new $tab_FieldColumnModel(parent));
				columnModel.update(presModel);
				return columnModel;
			}
		}
	};
	global.tab.FieldColumnModelFactory = $tab_FieldColumnModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldContainerModel
	var $tab_FieldContainerModel = function(parent) {
		this.$fields = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_FieldContainerModel.__typeName = 'tab.FieldContainerModel';
	global.tab.FieldContainerModel = $tab_FieldContainerModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldContainerModelFactory
	var $tab_FieldContainerModelFactory = function() {
	};
	$tab_FieldContainerModelFactory.__typeName = 'tab.FieldContainerModelFactory';
	$tab_FieldContainerModelFactory.create = function FieldContainerModelFactory$Create(presModel, parent, fieldModelCache) {
		var fields = $tab_FieldContainerModelFactory.$buildFieldArray(presModel, parent, fieldModelCache);
		var model = (ss.keyExists(fieldModelCache.get_fieldContainers(), presModel.fn) ? fieldModelCache.get_fieldContainers()[presModel.fn].asFieldContainer() : new $tab_FieldContainerModel(parent));
		model.update(presModel, fields);
		return model;
	};
	$tab_FieldContainerModelFactory.$buildFieldArray = function FieldContainerModelFactory$BuildFieldArray(presModel, parent, fieldModelCache) {
		var fields = [];
		if (ss.isValue(presModel.dimensionsFieldList)) {
			for (var $t1 = 0; $t1 < presModel.dimensionsFieldList.length; $t1++) {
				var fieldPresModel = presModel.dimensionsFieldList[$t1];
				fields.push($tab_FieldModelFactory.create(fieldPresModel, parent, fieldModelCache));
			}
		}
		if (ss.isValue(presModel.measuresFieldList)) {
			for (var $t2 = 0; $t2 < presModel.measuresFieldList.length; $t2++) {
				var fieldPresModel1 = presModel.measuresFieldList[$t2];
				fields.push($tab_FieldModelFactory.create(fieldPresModel1, parent, fieldModelCache));
			}
		}
		return fields;
	};
	global.tab.FieldContainerModelFactory = $tab_FieldContainerModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldInstanceType
	var $tab_FieldInstanceType = function() {
	};
	$tab_FieldInstanceType.__typeName = 'tab.FieldInstanceType';
	global.tab.FieldInstanceType = $tab_FieldInstanceType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldModel
	var $tab_FieldModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('field'.toString(), null));
	};
	$tab_FieldModel.__typeName = 'tab.FieldModel';
	$tab_FieldModel.getField = function FieldModel$GetField(fieldList, fieldStr, type) {
		if (ss.isNullOrUndefined(fieldList) || fieldList.length <= 0) {
			return null;
		}
		for (var $t1 = 0; $t1 < fieldList.length; $t1++) {
			var field = fieldList[$t1];
			switch (type) {
				case 'localName': {
					if (ss.referenceEquals(field.get_localName(), fieldStr)) {
						return field;
					}
					break;
				}
				case 'globalName': {
					if (ss.referenceEquals(field.get_globalName(), fieldStr)) {
						return field;
					}
					break;
				}
				case 'qualifiedLocalName': {
					if (ss.referenceEquals(field.get_qualifiedLocalName(), fieldStr)) {
						return field;
					}
					break;
				}
				case 'description': {
					if (ss.referenceEquals(field.get_description(), fieldStr)) {
						return field;
					}
					break;
				}
				case 'userCaption': {
					if (ss.referenceEquals(field.get_userCaption(), fieldStr)) {
						return field;
					}
					break;
				}
				case 'displayName': {
					if (ss.referenceEquals(field.get_displayName(), fieldStr)) {
						return field;
					}
					break;
				}
				default: {
					return null;
				}
			}
		}
		return null;
	};
	global.tab.FieldModel = $tab_FieldModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldModelCache
	var $tab_FieldModelCache = function(fields, tables, folders, drillPaths, fieldContainers) {
		this.$1$FieldsField = null;
		this.$1$TablesField = null;
		this.$1$FoldersField = null;
		this.$1$DrillPathsField = null;
		this.$1$FieldContainersField = null;
		this.set_fields(fields || {});
		this.set_tables(tables || {});
		this.set_folders(folders || {});
		this.set_drillPaths(drillPaths || {});
		this.set_fieldContainers(fieldContainers || {});
	};
	$tab_FieldModelCache.__typeName = 'tab.FieldModelCache';
	global.tab.FieldModelCache = $tab_FieldModelCache;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldModelFactory
	var $tab_FieldModelFactory = function() {
	};
	$tab_FieldModelFactory.__typeName = 'tab.FieldModelFactory';
	$tab_FieldModelFactory.create = function FieldModelFactory$Create(f, parent, fieldModelCache) {
		f.fieldIconRes = f.fieldIconRes || '';
		switch (f.type) {
			case 'field-container': {
				return $tab_FieldContainerModelFactory.create(f, parent, fieldModelCache);
			}
			case 'field-folder-new': {
				return $tab_FolderModelFactory.create(f, parent, fieldModelCache);
			}
			case 'drill-path': {
				return $tab_DrillPathModelFactory.create(f, parent, fieldModelCache);
			}
			case 'relational-table': {
				return $tab_RelationalTableModelFactory.create(f, parent, fieldModelCache);
			}
			case 'group':
			case 'structured-measure':
			case 'column': {
				return $tab_FieldColumnModelFactory.create(f, parent, fieldModelCache);
			}
			case 'display-folder': {
				return $tab_CubeFolderModelFactory.create(f, parent, fieldModelCache);
			}
			case 'standard-dimension': {
				return $tab_CubeStandardDimensionModelFactory.create(f, parent, fieldModelCache);
			}
			case 'attribute-dimension': {
				return $tab_CubeAttributeDimensionModelFactory.create(f, parent, fieldModelCache);
			}
			default: {
				ss.Debug.assert(false, ss.formatString('Unsupported field type {0} in root field pres models', f.type));
				return null;
			}
		}
	};
	global.tab.FieldModelFactory = $tab_FieldModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldsModel
	var $tab_FieldsModel = function(pathName, parent) {
		this.$allFields = null;
		this.$tableLookup = null;
		this.$folderNewLookup = null;
		this.$drillPathLookup = null;
		this.$cubeFolderLookup = null;
		this.$fieldContainerLookup = null;
		this.$allFieldsArray = null;
		this.$dataSourceModel = null;
		this.fieldsChanged = null;
		this.rootFieldsNew = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(pathName, 0));
		this.$dataSourceModel = parent;
		this.$resetLookupTables();
	};
	$tab_FieldsModel.__typeName = 'tab.FieldsModel';
	global.tab.FieldsModel = $tab_FieldsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FieldValueType
	var $tab_FieldValueType = function() {
	};
	$tab_FieldValueType.__typeName = 'tab.FieldValueType';
	global.tab.FieldValueType = $tab_FieldValueType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FileConnectionInfo
	var $tab_FileConnectionInfo = function(supportedExtensions, corsProxyUrlPrefix) {
		this.$supportedExtensions = null;
		this.$1$CorsProxyUrlPrefixField = null;
		ss.Debug.assert(_.isArray(supportedExtensions), 'Underscore.IsArray(supportedExtensions)');
		ss.Debug.assert(_.isString(corsProxyUrlPrefix), 'Underscore.IsString(corsProxyUrlPrefix)');
		this.$supportedExtensions = supportedExtensions;
		this.set_corsProxyUrlPrefix(corsProxyUrlPrefix);
	};
	$tab_FileConnectionInfo.__typeName = 'tab.FileConnectionInfo';
	global.tab.FileConnectionInfo = $tab_FileConnectionInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FileDownloadHelper
	var $tab_FileDownloadHelper = function(commonDialogProvider, session) {
		this.$commonDialogProvider = null;
		this.$session = null;
		this.$commonDialogProvider = commonDialogProvider;
		this.$session = session;
	};
	$tab_FileDownloadHelper.__typeName = 'tab.FileDownloadHelper';
	global.tab.FileDownloadHelper = $tab_FileDownloadHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FileUploadTelemetry
	var $tab_FileUploadTelemetry = function() {
		this.$1$FileUploadEventUUIDField = null;
	};
	$tab_FileUploadTelemetry.__typeName = 'tab.FileUploadTelemetry';
	$tab_FileUploadTelemetry.getInstance = function FileUploadTelemetry$GetInstance() {
		if (ss.isNullOrUndefined($tab_FileUploadTelemetry.$singleton)) {
			$tab_FileUploadTelemetry.$singleton = new $tab_FileUploadTelemetry();
		}
		return $tab_FileUploadTelemetry.$singleton;
	};
	global.tab.FileUploadTelemetry = $tab_FileUploadTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FileUploadTelemetry.AddReplaceType
	var $tab_FileUploadTelemetry$AddReplaceType = function() {
	};
	$tab_FileUploadTelemetry$AddReplaceType.__typeName = 'tab.FileUploadTelemetry$AddReplaceType';
	global.tab.FileUploadTelemetry$AddReplaceType = $tab_FileUploadTelemetry$AddReplaceType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FileUploadTelemetry.ErrorType
	var $tab_FileUploadTelemetry$ErrorType = function() {
	};
	$tab_FileUploadTelemetry$ErrorType.__typeName = 'tab.FileUploadTelemetry$ErrorType';
	global.tab.FileUploadTelemetry$ErrorType = $tab_FileUploadTelemetry$ErrorType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FileUploadTelemetry.FileUploadOrigin
	var $tab_FileUploadTelemetry$FileUploadOrigin = function() {
	};
	$tab_FileUploadTelemetry$FileUploadOrigin.__typeName = 'tab.FileUploadTelemetry$FileUploadOrigin';
	global.tab.FileUploadTelemetry$FileUploadOrigin = $tab_FileUploadTelemetry$FileUploadOrigin;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FileUploadTelemetry.FileUploadReason
	var $tab_FileUploadTelemetry$FileUploadReason = function() {
	};
	$tab_FileUploadTelemetry$FileUploadReason.__typeName = 'tab.FileUploadTelemetry$FileUploadReason';
	global.tab.FileUploadTelemetry$FileUploadReason = $tab_FileUploadTelemetry$FileUploadReason;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FileUploadTelemetry.RetryType
	var $tab_FileUploadTelemetry$RetryType = function() {
	};
	$tab_FileUploadTelemetry$RetryType.__typeName = 'tab.FileUploadTelemetry$RetryType';
	global.tab.FileUploadTelemetry$RetryType = $tab_FileUploadTelemetry$RetryType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FilterClientCommands
	var $tab_FilterClientCommands = function() {
	};
	$tab_FilterClientCommands.__typeName = 'tab.FilterClientCommands';
	$tab_FilterClientCommands.setQuantitativeFilterRange = function FilterClientCommands$SetQuantitativeFilterRange(visualId, filterField, filterMin, filterMax, includeMode) {
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'range-filter' }, {});
		$tab_CommandUtils.addVisualIdToCommand(cmd.commandParams, visualId);
		cmd.commandParams['globalFieldName'] = filterField;
		if (ss.isValue(filterMin)) {
			cmd.commandParams['filterRangeMin'] = filterMin.toString();
		}
		if (ss.isValue(filterMax)) {
			cmd.commandParams['filterRangeMax'] = filterMax.toString();
		}
		cmd.commandParams['included'] = includeMode.toString();
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_FilterClientCommands.setCategoricalFilterValues = function FilterClientCommands$SetCategoricalFilterValues(canceler, visualId, filterField, updateType, aliases, heuristicCommandReinterpretation) {
		var $t1 = new $tab_CategoricalFilterCmd();
		$t1.cmdParams['visualIdPresModel'] = visualId;
		$t1.set_commandWaiter(canceler);
		$t1.cmdParams['globalFieldName'] = filterField;
		$t1.cmdParams['filterValues'] = aliases || [];
		$t1.cmdParams['filterUpdateType'] = updateType;
		$t1.cmdParams['heuristicCommandReinterpretation'] = heuristicCommandReinterpretation;
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		cmd.invoke();
	};
	$tab_FilterClientCommands.setCategoricalFilterValuesByIndex = function FilterClientCommands$SetCategoricalFilterValuesByIndex(canceler, visualId, filterField, updateType, indices) {
		if (ss.isNullOrUndefined(indices)) {
			indices = new Array(0);
		}
		var $t1 = new $tab_CategoricalFilterByIndexCmd();
		$t1.cmdParams['visualIdPresModel'] = visualId;
		$t1.set_commandWaiter(canceler);
		$t1.cmdParams['globalFieldName'] = filterField;
		$t1.cmdParams['filterIndices'] = indices;
		$t1.cmdParams['filterUpdateType'] = updateType;
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		cmd.invoke();
	};
	$tab_FilterClientCommands.modifyCategoricalFilterValues = function FilterClientCommands$ModifyCategoricalFilterValues(visualId, filterField, addAliases, removeAliases, isTypeInList) {
		if ((!ss.isValue(addAliases) || addAliases.length === 0) && (!ss.isValue(removeAliases) || removeAliases.length === 0)) {
			return;
		}
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['globalFieldName'] = filterField;
		if (ss.isValue(addAliases) && addAliases.length > 0) {
			cmdParams['filterAdd'] = JSON.stringify(addAliases);
		}
		if (ss.isValue(removeAliases) && removeAliases.length > 0) {
			cmdParams['filterRemove'] = JSON.stringify(removeAliases);
		}
		cmdParams['filterUpdateType'] = 'filter-delta'.toString();
		if (isTypeInList) {
			cmdParams['filterUpdateQualifierType'] = 'filter-update-custom-domain'.toString();
		}
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'categorical-filter' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.modifyCategoricalFilterValuesByIndex = function FilterClientCommands$ModifyCategoricalFilterValuesByIndex(canceler, visualId, filterField, addIndices, removeIndices) {
		if ((ss.isNullOrUndefined(addIndices) || addIndices.length === 0) && (ss.isNullOrUndefined(removeIndices) || removeIndices.length === 0)) {
			return;
		}
		var $t1 = new $tab_CategoricalFilterByIndexCmd();
		$t1.cmdParams['visualIdPresModel'] = visualId;
		$t1.set_commandWaiter(canceler);
		$t1.cmdParams['globalFieldName'] = filterField;
		$t1.cmdParams['filterUpdateType'] = 'filter-delta';
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		if (ss.isValue(addIndices)) {
			cmd.cmdParams['filterAddIndices'] = addIndices;
		}
		if (ss.isValue(removeIndices)) {
			cmd.cmdParams['filterRemoveIndices'] = removeIndices;
		}
		cmd.invoke();
	};
	$tab_FilterClientCommands.setCategoricalQuickFilterMode = function FilterClientCommands$SetCategoricalQuickFilterMode(visualId, fieldName, mode) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['categoricalMode'] = mode.toString();
		cmdParams['fn'] = fieldName;
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'categorical-quick-filter-mode' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.setCategoricalQuickFilterDomain = function FilterClientCommands$SetCategoricalQuickFilterDomain(visualId, fieldName, domain) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['filterDomainType'] = domain.toString();
		cmdParams['fn'] = fieldName;
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'domain-quick-filter' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.setPatternFilterState = function FilterClientCommands$SetPatternFilterState(visualId, fieldName, pattern) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['patternFilterString'] = pattern;
		cmdParams['fn'] = fieldName;
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'categorical-quick-filter-pattern' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.addManualFilterItems = function FilterClientCommands$AddManualFilterItems(visualId, fieldName, data, manualAdd) {
		var stringCollation = { charsetId: 0, name: '' };
		var dataCol1 = { dataType: 'cstring', stringCollation: stringCollation };
		var tuples = data['tuples'];
		var searchStrings = [];
		for (var $t1 = 0; $t1 < tuples.length; $t1++) {
			var t = tuples[$t1];
			var value = t['d'];
			if (ss.isNullOrUndefined(value)) {
				var values = t['t'];
				if (values.length > 0) {
					value = values[0].v;
				}
			}
			searchStrings.push(value);
		}
		dataCol1.dataValues = searchStrings;
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['dataColumn'] = JSON.stringify(dataCol1);
		cmdParams['fn'] = fieldName;
		cmdParams['manualAdd'] = manualAdd;
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'add-manual-items-to-filter' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.levelDrill = function FilterClientCommands$LevelDrill(visualId, position, shelfType, isDrillDown) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['boolAggregateDrillUp'] = isDrillDown.toString();
		cmdParams['shelfType'] = shelfType.toString();
		cmdParams['position'] = position.toString();
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'level-drill-up-down' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.updateCategoricalFilter = function FilterClientCommands$UpdateCategoricalFilter(filterData) {
		if (!$tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
			return;
		}
		var isCurrentlyWithinLocalFilterDomain = function() {
			return true;
		};
		var isFilteredOut = function(fieldData, tupleId) {
			var alias = $tab_VizDataLookup.lookupAlias(tupleId, fieldData, $tab_ApplicationModel.get_instance().get_dataDictionary());
			return !filterData.includesValue(alias);
		};
		$tab_FilterClientCommands.$updateFilter(filterData.get_filterField(), filterData.get_targetSheets(), isCurrentlyWithinLocalFilterDomain, isFilteredOut, true);
	};
	$tab_FilterClientCommands.updateQuantitativeFilter = function FilterClientCommands$UpdateQuantitativeFilter(filterData) {
		if (!$tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
			return;
		}
		var isCurrentlyWithinLocalFilterDomain = function() {
			var minWithinRange = !ss.isValue(filterData.get_currentMinVal()) || ss.isValue(filterData.get_previousMinVal()) && tab.DoubleUtil.isGreaterThanOrApproximatelyEqual(ss.unbox(filterData.get_currentMinVal()), ss.unbox(filterData.get_previousMinVal()));
			var maxWithinRange = !ss.isValue(filterData.get_currentMaxVal()) || ss.isValue(filterData.get_previousMaxVal()) && tab.DoubleUtil.isLessThanOrApproximatelyEqual(ss.unbox(filterData.get_currentMaxVal()), ss.unbox(filterData.get_previousMaxVal()));
			return minWithinRange && maxWithinRange;
		};
		var isFilteredOut = function(fieldData, tupleId) {
			var dataValue = $tab_VizDataLookup.lookupRawDataValue(tupleId, fieldData, $tab_ApplicationModel.get_instance().get_dataDictionary());
			if (ss.isNullOrUndefined(dataValue) || ss.referenceEquals(dataValue, tableau.format.specialNull)) {
				return false;
			}
			if (fieldData.get_dataType() === 'date' || fieldData.get_dataType() === 'datetime') {
				var date = tab.DateUtil.parsePresModelDate(dataValue);
				return !filterData.valueInRange(tab.DateUtil.dateTimeAsOleDate(date));
			}
			else {
				return !filterData.valueInRange(parseFloat(dataValue));
			}
		};
		$tab_FilterClientCommands.$updateFilter(filterData.get_filterField(), filterData.get_targetSheets(), isCurrentlyWithinLocalFilterDomain, isFilteredOut, false);
	};
	$tab_FilterClientCommands.applyFilter = function FilterClientCommands$ApplyFilter(visModel, filterField, isFilteredOut) {
		var vizData = visModel.get_vizDataModel();
		var fieldData = vizData.getVizDataField(filterField);
		var isTupleFilteredOut = function(tupleId) {
			return isFilteredOut(fieldData, tupleId);
		};
		return fieldData.tupleIdsThatPass(isTupleFilteredOut);
	};
	$tab_FilterClientCommands.doRelativeDateQuickFilter = function FilterClientCommands$DoRelativeDateQuickFilter(visualId, fieldName, periodType, rangeType, range) {
		var cmdParams = $tab_FilterClientCommands.$createDoRelativeDateQuickFilterParams(visualId, fieldName, periodType, rangeType, range);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'relative-date-filter' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.doLevelHierarchialFilter = function FilterClientCommands$DoLevelHierarchialFilter(visualId, fieldName, addLevels, removeLevels, updateType) {
		var cmdParams = $tab_FilterClientCommands.$createDoLevelHierarchialFilterParams(visualId, fieldName, addLevels, removeLevels, updateType);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'hierarchical-filter' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.doMemberHierarchialFilter = function FilterClientCommands$DoMemberHierarchialFilter(visualId, fieldName, addMember, removeMember, updateType) {
		var cmdParams = $tab_FilterClientCommands.$createDoMemberHierarchialFilterParams(visualId, fieldName, addMember, removeMember, updateType);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'hierarchical-filter' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.doRangeHierarchialFilter = function FilterClientCommands$DoRangeHierarchialFilter(visualId, fieldName, rangeAddMembers, rangeRemoveMembers, updateType) {
		var cmdParams = $tab_FilterClientCommands.$createDoRangeHierarchialFilterParams(visualId, fieldName, rangeAddMembers, rangeRemoveMembers, updateType);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'hierarchical-filter' }, cmdParams), 'immediately', null, null);
	};
	$tab_FilterClientCommands.resetQuantitativeFilter = function FilterClientCommands$ResetQuantitativeFilter(filterField, targetSheets) {
		for (var $t1 = 0; $t1 < targetSheets.length; $t1++) {
			var sheetName = targetSheets[$t1];
			var visModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName);
			if (ss.isNullOrUndefined(visModel)) {
				continue;
			}
			if ($tab_FilterClientCommandsHelpers.canFilterLocally(filterField, sheetName)) {
				var filteredTuples = [];
				visModel.setFilteredTuples(filterField, filteredTuples);
				visModel.setHiddenTuples(filterField, filteredTuples);
			}
			$tab_VizClientCommands.validateVisualModel(visModel);
		}
	};
	$tab_FilterClientCommands.$createDoRelativeDateQuickFilterParams = function FilterClientCommands$CreateDoRelativeDateQuickFilterParams(visualId, fieldName, periodType, rangeType, range) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['datePeriodType'] = periodType;
		cmdParams['dateRangeType'] = rangeType;
		if (rangeType === 'lastn' || rangeType === 'nextn') {
			cmdParams['rangeN'] = range;
		}
		return cmdParams;
	};
	$tab_FilterClientCommands.$createDoLevelHierarchialFilterParams = function FilterClientCommands$CreateDoLevelHierarchialFilterParams(visualId, fieldName, addLevels, removeLevels, updateType) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var filterOptions = {};
		filterOptions['filterLevelAdd'] = addLevels;
		filterOptions['filterLevelRemove'] = removeLevels;
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['filterOptions'] = filterOptions;
		cmdParams['filterUpdateType'] = updateType;
		return cmdParams;
	};
	$tab_FilterClientCommands.$createDoMemberHierarchialFilterParams = function FilterClientCommands$CreateDoMemberHierarchialFilterParams(visualId, fieldName, addMember, removeMember, updateType) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var filterOptions = {};
		filterOptions['filterAdd'] = addMember;
		filterOptions['filterRemove'] = removeMember;
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['filterOptions'] = filterOptions;
		cmdParams['filterUpdateType'] = updateType;
		return cmdParams;
	};
	$tab_FilterClientCommands.$createDoRangeHierarchialFilterParams = function FilterClientCommands$CreateDoRangeHierarchialFilterParams(visualId, fieldName, rangeAddMembers, rangeRemoveMembers, updateType) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var filterOptions = {};
		filterOptions['filterRangeAdd'] = rangeAddMembers;
		filterOptions['filterRangeRemove'] = rangeRemoveMembers;
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['filterOptions'] = filterOptions;
		cmdParams['filterUpdateType'] = updateType;
		return cmdParams;
	};
	$tab_FilterClientCommands.$updateFilter = function FilterClientCommands$UpdateFilter(filterField, targetSheets, isCurrentlyWithinLocalFilterDomain, isFilteredOut, isCategorical) {
		var $t2 = new $tab_$LocalClientCommand(function(t) {
			for (var $t1 = 0; $t1 < targetSheets.length; $t1++) {
				var sheetName = targetSheets[$t1];
				var visModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName);
				if (ss.isNullOrUndefined(visModel)) {
					continue;
				}
				var canFilterLocally = $tab_FilterClientCommandsHelpers.canFilterLocally$1(visModel, filterField);
				if (!canFilterLocally || !isCurrentlyWithinLocalFilterDomain() || ss.isNullOrUndefined(visModel.get_vizDataModel().getVizDataField(filterField))) {
					if (!isCategorical) {
						$tab_ModelUtils.setVisualValidAndUpToDateStateOnModel(t, visModel, false);
					}
				}
				else {
					var filteredTuples = [];
					filteredTuples = $tab_FilterClientCommands.applyFilter(visModel, filterField, isFilteredOut);
					visModel.setFilteredTuples(filterField, filteredTuples);
					if (!isCategorical) {
						visModel.setHiddenTuples(filterField, filteredTuples);
					}
					$tab_ModelUtils.setVisualValidAndUpToDateStateOnModel(t, visModel, true);
				}
			}
		});
		$t2.set_commandName((isCategorical ? { ns: 'tabdoc', cmd: 'categorical-filter' }.cmd : { ns: 'tabdoc', cmd: 'range-filter' }.cmd));
		var c = $t2;
		$tab_CommandController.SendCommand(c);
	};
	global.tab.FilterClientCommands = $tab_FilterClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommands.FilterClientCommandsHelpers
	var $tab_FilterClientCommandsHelpers = function() {
	};
	$tab_FilterClientCommandsHelpers.__typeName = 'tab.FilterClientCommandsHelpers';
	$tab_FilterClientCommandsHelpers.canFilterLocally = function FilterClientCommandsHelpers$CanFilterLocally(filterField, sheetName) {
		var visModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName);
		return $tab_FilterClientCommandsHelpers.canFilterLocally$1(visModel, filterField);
	};
	$tab_FilterClientCommandsHelpers.canFilterLocally$1 = function FilterClientCommandsHelpers$CanFilterLocally(visModel, filterField) {
		return ss.isValue(visModel) && visModel.get_shouldUpdate() && visModel.hasFilterFieldData(filterField);
	};
	global.tab.FilterClientCommandsHelpers = $tab_FilterClientCommandsHelpers;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FlipboardModel
	var $tab_FlipboardModel = function(parent) {
		this.$storyPointsModel = null;
		this.$2$InvalidateZoneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('flipboard'.toString(), null));
		this.$storyPointsModel = new $tab_StoryPointsModel(this);
		if ((!tsConfig.is_authoring || tab.FeatureFlags.isEnabled('StoryPointCache')) && ss.isNullOrUndefined($tab_FlipboardModel.presModelCache)) {
			$tab_FlipboardModel.presModelCache = new $tab_StoryPointsPresModelCache();
		}
	};
	$tab_FlipboardModel.__typeName = 'tab.FlipboardModel';
	global.tab.FlipboardModel = $tab_FlipboardModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FlipboardNavigatorModel
	var $tab_FlipboardNavigatorModel = function(parent) {
		this.$pointsCaptured = null;
		this.$2$NewFlipboardNavField = null;
		this.$2$PointWasCapturedField = null;
		this.$2$NavArrowVisibilityChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('flipboardNav'.toString(), null));
		this.$pointsCaptured = [];
	};
	$tab_FlipboardNavigatorModel.__typeName = 'tab.FlipboardNavigatorModel';
	global.tab.FlipboardNavigatorModel = $tab_FlipboardNavigatorModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FloatingToolbarClientCommands
	var $tab_FloatingToolbarClientCommands = function() {
	};
	$tab_FloatingToolbarClientCommands.__typeName = 'tab.FloatingToolbarClientCommands';
	$tab_FloatingToolbarClientCommands.setDefaultMapToolSelectionCommand = function FloatingToolbarClientCommands$SetDefaultMapToolSelectionCommand(selection) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'default-map-tool-selection' }, null);
		c.commandParams = {};
		c.commandParams['defaultMapToolEnum'] = selection;
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', null, null));
	};
	global.tab.FloatingToolbarClientCommands = $tab_FloatingToolbarClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FolderModel
	var $tab_FolderModel = function(parent) {
		this.$fields = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_FolderModel.__typeName = 'tab.FolderModel';
	global.tab.FolderModel = $tab_FolderModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FolderModelFactory
	var $tab_FolderModelFactory = function() {
	};
	$tab_FolderModelFactory.__typeName = 'tab.FolderModelFactory';
	$tab_FolderModelFactory.create = function FolderModelFactory$Create(presModel, parent, fieldModelCache) {
		var folderFields = $tab_FolderModelFactory.$buildFieldArray(presModel, parent, fieldModelCache);
		var folderModel = (ss.keyExists(fieldModelCache.get_folders(), presModel.fn) ? fieldModelCache.get_folders()[presModel.fn].asFolderNew() : new $tab_FolderNewModel(parent));
		folderModel.update(presModel, folderFields);
		return folderModel;
	};
	$tab_FolderModelFactory.$buildFieldArray = function FolderModelFactory$BuildFieldArray(presModel, parent, fieldModelCache) {
		var folderFields = [];
		if (ss.isNullOrUndefined(presModel.fieldList)) {
			return folderFields;
		}
		for (var $t1 = 0; $t1 < presModel.fieldList.length; $t1++) {
			var fieldPresModel = presModel.fieldList[$t1];
			folderFields.push($tab_FieldModelFactory.create(fieldPresModel, parent, fieldModelCache));
		}
		return folderFields;
	};
	global.tab.FolderModelFactory = $tab_FolderModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FolderNewModel
	var $tab_FolderNewModel = function(parent) {
		this.$fields = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_FolderNewModel.__typeName = 'tab.FolderNewModel';
	global.tab.FolderNewModel = $tab_FolderNewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FontFamily
	var $tab_FontFamily = function() {
		this.$1$FontGroupField = null;
		this.$1$FontsField = null;
	};
	$tab_FontFamily.__typeName = 'tab.FontFamily';
	$tab_FontFamily.$ctor1 = function(fontGroup, fonts) {
		this.$1$FontGroupField = null;
		this.$1$FontsField = null;
		this.set_fontGroup(fontGroup);
		this.set_fonts(fonts);
	};
	global.tab.FontFamily = $tab_FontFamily;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FontFamilyProviderBuilder
	var $tab_FontFamilyProviderBuilder = function() {
	};
	$tab_FontFamilyProviderBuilder.__typeName = 'tab.FontFamilyProviderBuilder';
	$tab_FontFamilyProviderBuilder.createFontFamilyBuilder = function FontFamilyProviderBuilder$CreateFontFamilyBuilder() {
		return new $tab_UnionFontFamilyProviderBuilder();
	};
	global.tab.FontFamilyProviderBuilder = $tab_FontFamilyProviderBuilder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FontNotificationUtil
	var $tab_FontNotificationUtil = function() {
	};
	$tab_FontNotificationUtil.__typeName = 'tab.FontNotificationUtil';
	$tab_FontNotificationUtil.add_fontPropertiesIdentified = function FontNotificationUtil$add_FontPropertiesIdentified(value) {
		$tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField = ss.delegateCombine($tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField, value);
	};
	$tab_FontNotificationUtil.remove_fontPropertiesIdentified = function FontNotificationUtil$remove_FontPropertiesIdentified(value) {
		$tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField = ss.delegateRemove($tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField, value);
	};
	$tab_FontNotificationUtil.add_allFontsFound = function FontNotificationUtil$add_AllFontsFound(value) {
		$tab_FontNotificationUtil.$1$AllFontsFoundField = ss.delegateCombine($tab_FontNotificationUtil.$1$AllFontsFoundField, value);
	};
	$tab_FontNotificationUtil.remove_allFontsFound = function FontNotificationUtil$remove_AllFontsFound(value) {
		$tab_FontNotificationUtil.$1$AllFontsFoundField = ss.delegateRemove($tab_FontNotificationUtil.$1$AllFontsFoundField, value);
	};
	$tab_FontNotificationUtil.notifyFontsFromVisualListPresModel = function FontNotificationUtil$NotifyFontsFromVisualListPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		var groupFontExtractor = new $tab_GroupFontExtractor();
		var drawItem = { type: 'draw-group', drawItems: presModel.drawItems };
		$tab_FontNotificationUtil.$raiseFontIdentified(groupFontExtractor.extractFontFromPresModel(drawItem));
	};
	$tab_FontNotificationUtil.notifyFontsFromTextRegionPresModel = function FontNotificationUtil$NotifyFontsFromTextRegionPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		$tab_FontNotificationUtil.$raiseFontIdentified($tab_FontNotificationUtil.$fontPropertiesFromHtml(presModel.html));
	};
	$tab_FontNotificationUtil.notifyFontsFromServerButtonZonePresModel = function FontNotificationUtil$NotifyFontsFromServerButtonZonePresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		var fontProperties = $tab_FontNotificationUtil.$fontPropertiesFromServerButtonZonePresModel(presModel);
		if (!ss.isNullOrEmptyString(fontProperties.get_fontFamily())) {
			var uniqueProperties = {};
			$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueProperties, fontProperties);
			$tab_FontNotificationUtil.$raiseFontIdentified(_.values(uniqueProperties));
		}
	};
	$tab_FontNotificationUtil.$fontPropertiesFromServerButtonZonePresModel = function FontNotificationUtil$FontPropertiesFromServerButtonZonePresModel(presModel) {
		if (ss.isNullOrUndefined(presModel) || ss.isNullOrUndefined(presModel.dashboardButtonSharedInfo) || ss.isNullOrUndefined(presModel.dashboardButtonSharedInfo.buttonVisualStates) || ss.isNullOrUndefined(presModel.dashboardButtonSharedInfo.buttonVisualStates[presModel.dashboardButtonSharedInfo.activeVisualStateIndex]) || ss.isNullOrUndefined(presModel.dashboardButtonSharedInfo.buttonVisualStates[presModel.dashboardButtonSharedInfo.activeVisualStateIndex].buttonCaptionFontFormat) || ss.isNullOrUndefined(presModel.dashboardButtonSharedInfo.buttonVisualStates[presModel.dashboardButtonSharedInfo.activeVisualStateIndex].buttonCaptionFontFormat.fontName)) {
			return new $tab_FontProperties();
		}
		var captionFontFormat = presModel.dashboardButtonSharedInfo.buttonVisualStates[presModel.dashboardButtonSharedInfo.activeVisualStateIndex].buttonCaptionFontFormat;
		var weight = (captionFontFormat.isFontBold ? 'font-weight-bold' : 'font-weight-normal');
		var $t1 = new $tab_FontProperties();
		$t1.set_fontFamily(captionFontFormat.fontName);
		$t1.set_weight($tab_FontNotificationUtil.getFontAttribute(weight));
		return $t1;
	};
	$tab_FontNotificationUtil.getFontsFromUberTipDataPresModel = function FontNotificationUtil$GetFontsFromUberTipDataPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return [];
		}
		var uniqueFonts = {};
		for (var $t1 = 0; $t1 < presModel.ubertipPaneDatas.length; $t1++) {
			var panePresModel = presModel.ubertipPaneDatas[$t1];
			var properties = $tab_FontNotificationUtil.$fontPropertiesFromHtml(panePresModel.htmlTooltip);
			for (var $t2 = 0; $t2 < properties.length; $t2++) {
				var property = properties[$t2];
				$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueFonts, property);
			}
		}
		return _.values(uniqueFonts);
	};
	$tab_FontNotificationUtil.notifyFontsFromUberTipDataPresModel = function FontNotificationUtil$NotifyFontsFromUberTipDataPresModel(presModel) {
		$tab_FontNotificationUtil.$raiseFontIdentified($tab_FontNotificationUtil.getFontsFromUberTipDataPresModel(presModel));
	};
	$tab_FontNotificationUtil.notifyFontsFromPagePresModel = function FontNotificationUtil$NotifyFontsFromPagePresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		$tab_FontNotificationUtil.$raiseFontIdentified($tab_FontNotificationUtil.$fontPropertiesFromHtml(presModel.titleHtml));
	};
	$tab_FontNotificationUtil.notifyFontsFromQuantitativeColorLegendPresModel = function FontNotificationUtil$NotifyFontsFromQuantitativeColorLegendPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		var uniqueProperties = {};
		$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueProperties, $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(presModel.labelTextStyle));
		$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml(uniqueProperties, presModel.titleHtml);
		$tab_FontNotificationUtil.$raiseFontIdentified(_.values(uniqueProperties));
	};
	$tab_FontNotificationUtil.notifyFontsFromCategoricalLegendPresModel = function FontNotificationUtil$NotifyFontsFromCategoricalLegendPresModel(catLegendPresModel) {
		if (ss.isNullOrUndefined(catLegendPresModel)) {
			return;
		}
		var uniqueProperties = {};
		$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueProperties, $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(catLegendPresModel.textStyle));
		$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueProperties, $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(catLegendPresModel.titleStyleModel));
		$tab_FontNotificationUtil.$appendFontIntoDictionary(uniqueProperties, $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(catLegendPresModel.selectedTextStyleModel));
		$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml(uniqueProperties, catLegendPresModel.titleHtml);
		$tab_FontNotificationUtil.$raiseFontIdentified(_.values(uniqueProperties));
	};
	$tab_FontNotificationUtil.notifyFontsFromServerRenderedLegendPresModel = function FontNotificationUtil$NotifyFontsFromServerRenderedLegendPresModel(serverLegendPresModel) {
		if (ss.isNullOrUndefined(serverLegendPresModel)) {
			return;
		}
		var uniqueProperties = {};
		$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml(uniqueProperties, serverLegendPresModel.titleHtml);
		$tab_FontNotificationUtil.$raiseFontIdentified(_.values(uniqueProperties));
	};
	$tab_FontNotificationUtil.notifyFontsFromUberTipPresModel = function FontNotificationUtil$NotifyFontsFromUberTipPresModel(presModel) {
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		$tab_FontNotificationUtil.$raiseFontIdentified($tab_FontNotificationUtil.$fontPropertiesFromHtml(presModel.htmlTooltip));
	};
	$tab_FontNotificationUtil.$fontPropertiesFromHtml = function FontNotificationUtil$FontPropertiesFromHtml(html) {
		var uniqueProperties = {};
		$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml(uniqueProperties, html);
		return _.values(uniqueProperties);
	};
	$tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel = function FontNotificationUtil$FontPropertiesFromTextStylePresModel(presModel) {
		if (ss.isNullOrUndefined(presModel) || ss.isNullOrUndefined(presModel.fontName)) {
			return new $tab_FontProperties();
		}
		var $t1 = new $tab_FontProperties();
		$t1.set_fontFamily(presModel.fontName);
		$t1.set_weight(ss.coalesce(presModel.fontWeight, ''));
		$t1.set_style(ss.coalesce(presModel.fontStyle, ''));
		return $t1;
	};
	$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel = function FontNotificationUtil$NotifyFontsFromTextStylePresModel(presModel) {
		var fonts = [];
		var fontProperty = $tab_FontNotificationUtil.$fontPropertiesFromTextStylePresModel(presModel);
		if (!ss.isNullOrEmptyString(fontProperty.get_fontFamily())) {
			fonts.push(fontProperty);
		}
		$tab_FontNotificationUtil.$raiseFontIdentified(fonts);
	};
	$tab_FontNotificationUtil.notifyFontsFromMarkLayoutOutput = function FontNotificationUtil$NotifyFontsFromMarkLayoutOutput(markLayoutOutput) {
		if (ss.isValue(markLayoutOutput)) {
			$tab_FontNotificationUtil.notifyFontsFromTextStyleTable(markLayoutOutput.TextStyleTable);
		}
	};
	$tab_FontNotificationUtil.notifyFontsFromTextStyleTable = function FontNotificationUtil$NotifyFontsFromTextStyleTable(textStyleTable) {
		if (ss.isValue(textStyleTable) && ss.isValue(textStyleTable.font)) {
			var fontProps = textStyleTable.font.map(function(font, index) {
				var style = ((ss.isValue(textStyleTable.font_style) && index < textStyleTable.font_style.length) ? $tab_FontNotificationUtil.$asFontStyle(textStyleTable.font_style[index]) : 'font-style-normal');
				var weight = ((ss.isValue(textStyleTable.font_weight) && index < textStyleTable.font_weight.length) ? $tab_FontNotificationUtil.$asFontWeight(textStyleTable.font_weight[index]) : 'font-weight-normal');
				var $t1 = new $tab_FontProperties();
				$t1.set_fontFamily(font);
				$t1.set_style($tab_FontNotificationUtil.getFontAttribute(style));
				$t1.set_weight($tab_FontNotificationUtil.getFontAttribute(weight));
				return $t1;
			});
			$tab_FontNotificationUtil.$raiseFontIdentified(fontProps);
		}
	};
	$tab_FontNotificationUtil.getFontAttribute = function FontNotificationUtil$GetFontAttribute(attr) {
		var expectedTokens = 3;
		var tokens = attr.split('-');
		ss.Debug.assert(tokens.length === expectedTokens, 'Invalid font attribute format ' + attr);
		return ((tokens.length === expectedTokens) ? tokens[expectedTokens - 1] : '');
	};
	$tab_FontNotificationUtil.notifyFontFromCSSProps = function FontNotificationUtil$NotifyFontFromCSSProps(props) {
		var $t1 = new $tab_FontProperties();
		$t1.set_fontFamily(ss.cast(props.fontFamily, String));
		$t1.set_style(ss.cast(props.fontStyle, String));
		$t1.set_weight(ss.cast(props.fontWeight, String));
		var fontProps = $t1;
		$tab_FontNotificationUtil.$raiseFontIdentified([fontProps]);
	};
	$tab_FontNotificationUtil.$appendFontIntoDictionary = function FontNotificationUtil$AppendFontIntoDictionary(fontPropsDict, properties) {
		if (ss.isNullOrEmptyString(properties.get_fontFamily())) {
			return;
		}
		fontPropsDict[properties.get_hash()] = properties;
	};
	$tab_FontNotificationUtil.$appendFontIntoDictionaryFromHtml = function FontNotificationUtil$AppendFontIntoDictionaryFromHtml(fontPropsDict, html) {
		if (ss.isNullOrEmptyString(html)) {
			return;
		}
		var elementsWithFontSet = $(html).find('[style]').addBack();
		for (var i = 0; i < elementsWithFontSet.length; i++) {
			var fontName = elementsWithFontSet[i].style.fontFamily;
			var fontWeight = elementsWithFontSet[i].style.fontWeight;
			if (ss.isNullOrEmptyString(fontName)) {
				continue;
			}
			var $t1 = new $tab_FontProperties();
			$t1.set_fontFamily(fontName);
			$t1.set_weight(fontWeight);
			$tab_FontNotificationUtil.$appendFontIntoDictionary(fontPropsDict, $t1);
		}
	};
	$tab_FontNotificationUtil.$appendFontFromDataColumnIntoDictionary = function FontNotificationUtil$AppendFontFromDataColumnIntoDictionary(fontPropsDict, textStyles, styleNum) {
		var weight = '';
		var style = '';
		var fontName = '';
		if (ss.keyExists(textStyles, 'font_style') && parseInt(textStyles['font_style'].dataValues[styleNum].toString()) === 1) {
			style = 'italic';
		}
		if (ss.keyExists(textStyles, 'font_weight') && parseInt(textStyles['font_weight'].dataValues[styleNum].toString()) === 1) {
			weight = 'bold';
		}
		if (ss.keyExists(textStyles, 'font')) {
			fontName = textStyles['font'].dataValues[styleNum].toString();
		}
		if (ss.isNullOrEmptyString(fontName)) {
			return;
		}
		var $t1 = new $tab_FontProperties();
		$t1.set_fontFamily(fontName);
		$t1.set_weight(weight);
		$t1.set_style(style);
		var currentFontProperty = $t1;
		$tab_FontNotificationUtil.$appendFontIntoDictionary(fontPropsDict, currentFontProperty);
	};
	$tab_FontNotificationUtil.$asFontStyle = function FontNotificationUtil$AsFontStyle(i) {
		switch (i) {
			case 0: {
				return 'font-style-normal';
			}
			case 1: {
				return 'font-style-italic';
			}
			default: {
				ss.Debug.assert(false, 'Invalid cast from int to Tableau font style');
				return 'font-style-normal';
			}
		}
	};
	$tab_FontNotificationUtil.$asFontWeight = function FontNotificationUtil$AsFontWeight(i) {
		switch (i) {
			case 0: {
				return 'font-weight-normal';
			}
			case 1: {
				return 'font-weight-bold';
			}
			default: {
				ss.Debug.assert(false, 'Invalid cast from int to Tableau weight style');
				return 'font-weight-normal';
			}
		}
	};
	$tab_FontNotificationUtil.$raiseFontIdentified = function FontNotificationUtil$RaiseFontIdentified(fontProperties) {
		if (!ss.staticEquals($tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField, null) && !tab.MiscUtil.isNullOrEmpty(fontProperties)) {
			$tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField(fontProperties);
		}
	};
	$tab_FontNotificationUtil.$raiseAllFontsFound = function FontNotificationUtil$RaiseAllFontsFound() {
		if (!ss.staticEquals($tab_FontNotificationUtil.$1$AllFontsFoundField, null)) {
			$tab_FontNotificationUtil.$1$AllFontsFoundField();
		}
	};
	global.tab.FontNotificationUtil = $tab_FontNotificationUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FontProperties
	var $tab_FontProperties = function() {
		this.$internalStyle = $tab_FontProperties.defaultStyle;
		this.$internalWeight = $tab_FontProperties.defaultWeight;
		this.$internalFamily = '';
		this.$hash = '';
	};
	$tab_FontProperties.__typeName = 'tab.FontProperties';
	global.tab.FontProperties = $tab_FontProperties;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FormatContainerModel
	var $tab_FormatContainerModel = function(parent) {
		this.$children = null;
		this.$isVisible = false;
		this.$blacklistedWidgetIds = ss.mkdict(['line-drop', 1]);
		this.$3$PreviewPropertiesField = null;
		$tab_FormatItemModel.call(this, parent);
	};
	$tab_FormatContainerModel.__typeName = 'tab.FormatContainerModel';
	$tab_FormatContainerModel.get_formatPaneModel = function FormatContainerModel$get_FormatPaneModel() {
		return $tab_ApplicationModel.get_instance().get_workbook().get_formatPaneModel();
	};
	global.tab.FormatContainerModel = $tab_FormatContainerModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FormatControlModel
	var $tab_FormatControlModel = function(parent) {
		$tab_FormatItemModel.call(this, parent);
	};
	$tab_FormatControlModel.__typeName = 'tab.FormatControlModel';
	global.tab.FormatControlModel = $tab_FormatControlModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FormatItemExtensions
	var $tab_FormatItemExtensions = function() {
	};
	$tab_FormatItemExtensions.__typeName = 'tab.FormatItemExtensions';
	$tab_FormatItemExtensions.hasPreview = function FormatItemExtensions$HasPreview(type) {
		return type === 'compositeContainer' || type === 'tabGroup';
	};
	global.tab.FormatItemExtensions = $tab_FormatItemExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.FormatItemModel
	var $tab_FormatItemModel = function(parent) {
		this.$2$UpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('formatItem'.toString(), null));
	};
	$tab_FormatItemModel.__typeName = 'tab.FormatItemModel';
	$tab_FormatItemModel.createModel = function FormatItemModel$CreateModel(parent, itemPresModel, context) {
		switch (itemPresModel.typeOfFormatItem) {
			case 'formatContainer': {
				var containerModel = new $tab_FormatContainerModel(parent);
				containerModel.update(itemPresModel, context);
				return containerModel;
			}
			case 'formatControl': {
				var controlModel = new $tab_FormatControlModel(parent);
				controlModel.update(itemPresModel, context);
				return controlModel;
			}
			default: {
				ss.Debug.fail('Attempted to create a FormatItemModel from an incompatible presentation model.');
				return null;
			}
		}
	};
	global.tab.FormatItemModel = $tab_FormatItemModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Formatting.FormattingConverters
	var $tab_FormattingConverters = function() {
	};
	$tab_FormattingConverters.__typeName = 'tab.FormattingConverters';
	$tab_FormattingConverters.getCSSBorderStyle = function FormattingConverters$GetCSSBorderStyle(borderStyle) {
		var toRet = 'solid';
		switch (borderStyle) {
			case 'bs-dashed': {
				toRet = 'dashed';
				break;
			}
			case 'bs-dotted': {
				toRet = 'dotted';
				break;
			}
			case 'bs-double': {
				toRet = 'double';
				break;
			}
			case 'bs-groove': {
				toRet = 'groove';
				break;
			}
			case 'bs-hidden': {
				toRet = 'hidden';
				break;
			}
			case 'bs-inset': {
				toRet = 'inset';
				break;
			}
			case 'bs-outset': {
				toRet = 'outset';
				break;
			}
			case 'bs-ridge': {
				toRet = 'ridge';
				break;
			}
			case 'bs-solid': {
				toRet = 'solid';
				break;
			}
			case 'bs-none': {
				toRet = 'none';
				break;
			}
			default: {
				ss.Debug.fail('Unknown border style: ' + borderStyle);
				break;
			}
		}
		return toRet;
	};
	$tab_FormattingConverters.makeStyledBoxCssDict = function FormattingConverters$MakeStyledBoxCssDict(sb, allowTransparentFill) {
		var toRet = {};
		if (ss.isValue(sb)) {
			toRet = $tab_FormattingConverters.makeBorderStyleDict(sb);
			if (sb.hasFill) {
				var backColor = $tab_ColorModel.fromColorCode(sb.fillColor);
				toRet['background-color'] = (allowTransparentFill ? backColor.toString() : backColor.toRgb());
			}
		}
		return toRet;
	};
	$tab_FormattingConverters.makeFormatStyleDict = function FormattingConverters$MakeFormatStyleDict(textStyle, altTextColor) {
		if (ss.isNullOrUndefined(textStyle)) {
			return {};
		}
		var toRet = { 'font-size': textStyle.fontSize + 'pt', color: textStyle.color };
		if (ss.isValue(textStyle.fontName) && ss.keyExists($tab_FormattingConverters.$formatStyleDict, textStyle.fontName)) {
			toRet['font-family'] = $tab_FormattingConverters.$formatStyleDict[textStyle.fontName];
		}
		else if (ss.isValue(textStyle.fontName)) {
			var fontNames = textStyle.fontName.split(',');
			tab.FontUtil.addDefaultFontForTableau(fontNames);
			for (var i = 0; i < fontNames.length; i++) {
				fontNames[i] = tab.FontUtil.addQuotationMarks(fontNames[i].trim(), false);
			}
			toRet['font-family'] = fontNames.join(',');
			$tab_FormattingConverters.$formatStyleDict[textStyle.fontName] = toRet['font-family'];
		}
		if (ss.isValue(altTextColor)) {
			toRet.color = altTextColor;
		}
		if (textStyle.fontStyle === 'font-style-italic') {
			toRet['font-style'] = 'italic';
		}
		if (textStyle.fontWeight === 'font-weight-bold') {
			toRet['font-weight'] = 'bold';
		}
		var textDecoration = 'none';
		switch (textStyle.textDecoration) {
			case 'text-decoration-overline': {
				textDecoration = 'overline';
				break;
			}
			case 'text-decoration-strikethrough': {
				textDecoration = 'line-through';
				break;
			}
			case 'text-decoration-underline': {
				textDecoration = 'underline';
				break;
			}
		}
		if (textDecoration !== 'none') {
			toRet['text-decoration'] = textDecoration;
		}
		if (ss.isValue(textStyle.wrapMode)) {
			switch (textStyle.wrapMode) {
				case 'text-wrap-off': {
					toRet['white-space'] = 'nowrap';
					break;
				}
				case 'text-wrap-truncate': {
					toRet['overflow-x'] = 'hidden';
					break;
				}
			}
		}
		return toRet;
	};
	$tab_FormattingConverters.makeBorderStyleDict = function FormattingConverters$MakeBorderStyleDict(styledBox) {
		var toRet = {};
		if (ss.isValue(styledBox.uw)) {
			toRet['border-width'] = styledBox.uw + 'px';
		}
		if (ss.isValue(styledBox.borderColor)) {
			toRet['border-color'] = styledBox.borderColor;
		}
		if (ss.isValue(styledBox.uw)) {
			toRet['border-style'] = $tab_FormattingConverters.getCSSBorderStyle(styledBox.borderStyle);
		}
		if (ss.isValue(styledBox.padding)) {
			var padding = styledBox.padding + 'px';
			toRet['padding-bottom'] = padding;
			toRet['padding-top'] = padding;
			toRet['padding-right'] = padding;
			toRet['padding-left'] = padding;
		}
		return toRet;
	};
	$tab_FormattingConverters.getTextBaseline = function FormattingConverters$GetTextBaseline(textRegionVAlign) {
		var toRet = 'bottom';
		switch (textRegionVAlign) {
			case 'v-align-bottom': {
				toRet = 'bottom';
				break;
			}
			case 'v-align-top': {
				toRet = 'top';
				break;
			}
			case 'v-align-center': {
				toRet = 'middle';
				break;
			}
			default: {
				ss.Debug.fail('Unsupported vertical text alignment: ' + textRegionVAlign);
				break;
			}
		}
		return toRet;
	};
	$tab_FormattingConverters.cleanUpFontFamilyStyles = function FormattingConverters$CleanUpFontFamilyStyles(node) {
		var fontObjects = node.find('span');
		for (var currentFontIndex = 0; currentFontIndex < fontObjects.length; ++currentFontIndex) {
			var queryObj = fontObjects.eq(currentFontIndex);
			var obj = new $tab_JQueryFormattingConverterObject(queryObj);
			$tab_FormattingConverters.cleanUpFontFamilyStyling(obj);
		}
	};
	$tab_FormattingConverters.cleanUpFontFamilyStyling = function FormattingConverters$CleanUpFontFamilyStyling(obj) {
		var fontFamily = obj.get_getFontFamily();
		if (!ss.isNullOrEmptyString(fontFamily)) {
			var newCss = {};
			var fontFaces = [];
			fontFaces.push(fontFamily);
			if (ss.startsWithString(fontFamily, "'") || ss.startsWithString(fontFamily, '"')) {
				fontFamily = fontFamily.substr(1, fontFamily.length - 2);
			}
			fontFamily = $tab_FormattingConverters.$pullFontPropertyIntoCSS(obj, fontFaces, newCss, fontFamily, $tab_FormattingConverters.$styleConversionArray, $tab_FormattingConverters.cssFontStyle, $tab_FormattingConverters.javascriptFontStyle, false);
			fontFamily = $tab_FormattingConverters.$pullFontPropertyIntoCSS(obj, fontFaces, newCss, fontFamily, $tab_FormattingConverters.$weightConversionArray, $tab_FormattingConverters.cssFontWeight, $tab_FormattingConverters.javascriptFontWeight, true);
			$tab_FormattingConverters.$pullFontPropertyIntoCSS(obj, fontFaces, newCss, fontFamily, $tab_FormattingConverters.$stretchConversionArray, $tab_FormattingConverters.cssFontStretch, $tab_FormattingConverters.javascriptFontStretch, false);
			tab.FontUtil.addDefaultFontForTableau(fontFaces);
			if (fontFaces.length > 1) {
				newCss[$tab_FormattingConverters.cssFontFamily] = fontFaces.join(',');
				obj.setCSS(newCss);
			}
		}
	};
	$tab_FormattingConverters.$pullFontPropertyIntoCSS = function FormattingConverters$PullFontPropertyIntoCSS(obj, fontFallbacks, newCss, fontFamily, conversions, cssProperty, javascriptCSSProperty, stopAfterFirstMatch) {
		var lowerFontFamily = fontFamily.toLowerCase();
		for (var $t1 = 0; $t1 < conversions.length; $t1++) {
			var conversion = conversions[$t1];
			if (ss.endsWithString(lowerFontFamily, conversion.item1)) {
				fontFamily = fontFamily.substr(0, lowerFontFamily.lastIndexOf(conversion.item1)).trim();
				fontFallbacks.push("'" + fontFamily + "'");
				if (!$tab_FormattingConverters.$isCSSPropertySet(obj, javascriptCSSProperty)) {
					newCss[cssProperty] = conversion.item2;
				}
				if (stopAfterFirstMatch) {
					return fontFamily;
				}
			}
		}
		return fontFamily;
	};
	$tab_FormattingConverters.$isCSSPropertySet = function FormattingConverters$IsCSSPropertySet(obj, javascriptPropertyName) {
		return obj.hasStyleProperty(javascriptPropertyName);
	};
	global.tab.FormattingConverters = $tab_FormattingConverters;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Formatting.FormattingUtil
	var $tab_FormattingUtil = function() {
	};
	$tab_FormattingUtil.__typeName = 'tab.FormattingUtil';
	$tab_FormattingUtil.get_getBrowserStoredFontString = function FormattingUtil$get_GetBrowserStoredFontString() {
		return window.sessionStorage.getItem($tab_FormattingUtil.fontListStorageKey);
	};
	$tab_FormattingUtil.get_hasBrowserStoredFontList = function FormattingUtil$get_HasBrowserStoredFontList() {
		return ss.isValue($tab_FormattingUtil.get_getBrowserStoredFontString());
	};
	$tab_FormattingUtil.$getBrowserStoredFontList = function FormattingUtil$GetBrowserStoredFontList() {
		var rawFontList = $tab_FormattingUtil.get_getBrowserStoredFontString();
		if (ss.isNullOrUndefined(rawFontList)) {
			return null;
		}
		var outputList = null;
		try {
			outputList = JSON.parse(rawFontList);
		}
		catch ($t1) {
			var e = ss.Exception.wrap($t1);
			tab.ErrorTrace.report(e);
			tab.Log.get$1($tab_FormattingUtil).debug('JSON parsing of ' + rawFontList + ' threw exception ' + e.toString(), []);
		}
		return outputList;
	};
	$tab_FormattingUtil.compatibleFontNameList = function FormattingUtil$CompatibleFontNameList() {
		var localFontList = $tab_FormattingUtil.$getBrowserStoredFontList();
		if (ss.isValue(localFontList)) {
			return localFontList;
		}
		$tab_BaseSession.get_waitHandler().showAndLock();
		var builder = $tab_FontFamilyProviderBuilder.createFontFamilyBuilder();
		builder.addFontList((new $tab_WebFilteredFontListProvider(new $tab_SimpleFontListProvider.$ctor1($tab_ApplicationModel.get_instance().get_serverFonts()))).get_fontFamilies());
		builder.addFontList((new $tab_SimpleFontListProvider()).get_fontFamilies());
		var fontFamilyProvider = builder.toFontFamilyProvider();
		var fonts = [];
		var $t1 = fontFamilyProvider.get_fontFamilies();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var fontFace = $t1[$t2];
			fonts.push(fontFace.get_fontGroup());
		}
		window.sessionStorage.setItem($tab_FormattingUtil.fontListStorageKey, JSON.stringify(fonts));
		$tab_BaseSession.get_waitHandler().unlock();
		$tab_BaseSession.get_waitHandler().nudge();
		return fonts;
	};
	global.tab.FormattingUtil = $tab_FormattingUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetAlertMeasuresFromSelectionCmd
	var $tab_GetAlertMeasuresFromSelectionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetAlertMeasuresFromSelectionCmd$Response]).call(this);
	};
	$tab_GetAlertMeasuresFromSelectionCmd.__typeName = 'tab.GetAlertMeasuresFromSelectionCmd';
	global.tab.GetAlertMeasuresFromSelectionCmd = $tab_GetAlertMeasuresFromSelectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetAlertMeasuresFromSelectionCmd.Response
	var $tab_GetAlertMeasuresFromSelectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetAlertMeasuresFromSelectionCmd$Response.__typeName = 'tab.GetAlertMeasuresFromSelectionCmd$Response';
	global.tab.GetAlertMeasuresFromSelectionCmd$Response = $tab_GetAlertMeasuresFromSelectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetButtonConfigDialogCmd
	var $tab_GetButtonConfigDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetButtonConfigDialogCmd$Response]).call(this);
	};
	$tab_GetButtonConfigDialogCmd.__typeName = 'tab.GetButtonConfigDialogCmd';
	global.tab.GetButtonConfigDialogCmd = $tab_GetButtonConfigDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetButtonConfigDialogCmd.Response
	var $tab_GetButtonConfigDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetButtonConfigDialogCmd$Response.__typeName = 'tab.GetButtonConfigDialogCmd$Response';
	global.tab.GetButtonConfigDialogCmd$Response = $tab_GetButtonConfigDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetCompositeClassNameCmd
	var $tab_GetCompositeClassNameCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetCompositeClassNameCmd$Response]).call(this);
	};
	$tab_GetCompositeClassNameCmd.__typeName = 'tab.GetCompositeClassNameCmd';
	global.tab.GetCompositeClassNameCmd = $tab_GetCompositeClassNameCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetCompositeClassNameCmd.Response
	var $tab_GetCompositeClassNameCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetCompositeClassNameCmd$Response.__typeName = 'tab.GetCompositeClassNameCmd$Response';
	global.tab.GetCompositeClassNameCmd$Response = $tab_GetCompositeClassNameCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDashboardDragDropCmd
	var $tab_GetDashboardDragDropCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDashboardDragDropCmd$Response]).call(this);
	};
	$tab_GetDashboardDragDropCmd.__typeName = 'tab.GetDashboardDragDropCmd';
	global.tab.GetDashboardDragDropCmd = $tab_GetDashboardDragDropCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDashboardDragDropCmd.Response
	var $tab_GetDashboardDragDropCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDashboardDragDropCmd$Response.__typeName = 'tab.GetDashboardDragDropCmd$Response';
	global.tab.GetDashboardDragDropCmd$Response = $tab_GetDashboardDragDropCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDashboardSizingCmd
	var $tab_GetDashboardSizingCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDashboardSizingCmd$Response]).call(this);
	};
	$tab_GetDashboardSizingCmd.__typeName = 'tab.GetDashboardSizingCmd';
	global.tab.GetDashboardSizingCmd = $tab_GetDashboardSizingCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDashboardSizingCmd.Response
	var $tab_GetDashboardSizingCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDashboardSizingCmd$Response.__typeName = 'tab.GetDashboardSizingCmd$Response';
	global.tab.GetDashboardSizingCmd$Response = $tab_GetDashboardSizingCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDataAlertConditionInfoMapCmd
	var $tab_GetDataAlertConditionInfoMapCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDataAlertConditionInfoMapCmd$Response]).call(this);
	};
	$tab_GetDataAlertConditionInfoMapCmd.__typeName = 'tab.GetDataAlertConditionInfoMapCmd';
	global.tab.GetDataAlertConditionInfoMapCmd = $tab_GetDataAlertConditionInfoMapCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDataAlertConditionInfoMapCmd.Response
	var $tab_GetDataAlertConditionInfoMapCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDataAlertConditionInfoMapCmd$Response.__typeName = 'tab.GetDataAlertConditionInfoMapCmd$Response';
	global.tab.GetDataAlertConditionInfoMapCmd$Response = $tab_GetDataAlertConditionInfoMapCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDataAlertInfoCmd
	var $tab_GetDataAlertInfoCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDataAlertInfoCmd$Response]).call(this);
	};
	$tab_GetDataAlertInfoCmd.__typeName = 'tab.GetDataAlertInfoCmd';
	global.tab.GetDataAlertInfoCmd = $tab_GetDataAlertInfoCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDataAlertInfoCmd.Response
	var $tab_GetDataAlertInfoCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDataAlertInfoCmd$Response.__typeName = 'tab.GetDataAlertInfoCmd$Response';
	global.tab.GetDataAlertInfoCmd$Response = $tab_GetDataAlertInfoCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDataSourceDataPresModelCmd
	var $tab_GetDataSourceDataPresModelCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDataSourceDataPresModelCmd$Response]).call(this);
	};
	$tab_GetDataSourceDataPresModelCmd.__typeName = 'tab.GetDataSourceDataPresModelCmd';
	global.tab.GetDataSourceDataPresModelCmd = $tab_GetDataSourceDataPresModelCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDataSourceDataPresModelCmd.Response
	var $tab_GetDataSourceDataPresModelCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDataSourceDataPresModelCmd$Response.__typeName = 'tab.GetDataSourceDataPresModelCmd$Response';
	global.tab.GetDataSourceDataPresModelCmd$Response = $tab_GetDataSourceDataPresModelCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDropFieldAggregationOptionsCmd
	var $tab_GetDropFieldAggregationOptionsCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDropFieldAggregationOptionsCmd$Response]).call(this);
	};
	$tab_GetDropFieldAggregationOptionsCmd.__typeName = 'tab.GetDropFieldAggregationOptionsCmd';
	global.tab.GetDropFieldAggregationOptionsCmd = $tab_GetDropFieldAggregationOptionsCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDropFieldAggregationOptionsCmd.Response
	var $tab_GetDropFieldAggregationOptionsCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDropFieldAggregationOptionsCmd$Response.__typeName = 'tab.GetDropFieldAggregationOptionsCmd$Response';
	global.tab.GetDropFieldAggregationOptionsCmd$Response = $tab_GetDropFieldAggregationOptionsCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDSParamsFromPresModelCmd
	var $tab_GetDSParamsFromPresModelCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDSParamsFromPresModelCmd$Response]).call(this);
	};
	$tab_GetDSParamsFromPresModelCmd.__typeName = 'tab.GetDSParamsFromPresModelCmd';
	global.tab.GetDSParamsFromPresModelCmd = $tab_GetDSParamsFromPresModelCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetDSParamsFromPresModelCmd.Response
	var $tab_GetDSParamsFromPresModelCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetDSParamsFromPresModelCmd$Response.__typeName = 'tab.GetDSParamsFromPresModelCmd$Response';
	global.tab.GetDSParamsFromPresModelCmd$Response = $tab_GetDSParamsFromPresModelCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetFileConnectionFileListCmd
	var $tab_GetFileConnectionFileListCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetFileConnectionFileListCmd$Response]).call(this);
	};
	$tab_GetFileConnectionFileListCmd.__typeName = 'tab.GetFileConnectionFileListCmd';
	global.tab.GetFileConnectionFileListCmd = $tab_GetFileConnectionFileListCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetFileConnectionFileListCmd.Response
	var $tab_GetFileConnectionFileListCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetFileConnectionFileListCmd$Response.__typeName = 'tab.GetFileConnectionFileListCmd$Response';
	global.tab.GetFileConnectionFileListCmd$Response = $tab_GetFileConnectionFileListCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetHasUnusedFilesCmd
	var $tab_GetHasUnusedFilesCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetHasUnusedFilesCmd$Response]).call(this);
	};
	$tab_GetHasUnusedFilesCmd.__typeName = 'tab.GetHasUnusedFilesCmd';
	global.tab.GetHasUnusedFilesCmd = $tab_GetHasUnusedFilesCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetHasUnusedFilesCmd.Response
	var $tab_GetHasUnusedFilesCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetHasUnusedFilesCmd$Response.__typeName = 'tab.GetHasUnusedFilesCmd$Response';
	global.tab.GetHasUnusedFilesCmd$Response = $tab_GetHasUnusedFilesCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetParameterControlMenuCmd
	var $tab_GetParameterControlMenuCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetParameterControlMenuCmd$Response]).call(this);
	};
	$tab_GetParameterControlMenuCmd.__typeName = 'tab.GetParameterControlMenuCmd';
	global.tab.GetParameterControlMenuCmd = $tab_GetParameterControlMenuCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetParameterControlMenuCmd.Response
	var $tab_GetParameterControlMenuCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetParameterControlMenuCmd$Response.__typeName = 'tab.GetParameterControlMenuCmd$Response';
	global.tab.GetParameterControlMenuCmd$Response = $tab_GetParameterControlMenuCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetRuntimeDataModelCmd
	var $tab_GetRuntimeDataModelCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetRuntimeDataModelCmd$Response]).call(this);
	};
	$tab_GetRuntimeDataModelCmd.__typeName = 'tab.GetRuntimeDataModelCmd';
	global.tab.GetRuntimeDataModelCmd = $tab_GetRuntimeDataModelCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetRuntimeDataModelCmd.Response
	var $tab_GetRuntimeDataModelCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetRuntimeDataModelCmd$Response.__typeName = 'tab.GetRuntimeDataModelCmd$Response';
	global.tab.GetRuntimeDataModelCmd$Response = $tab_GetRuntimeDataModelCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetTabbedAuthenticationPresModelCmd
	var $tab_GetTabbedAuthenticationPresModelCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetTabbedAuthenticationPresModelCmd$Response]).call(this);
	};
	$tab_GetTabbedAuthenticationPresModelCmd.__typeName = 'tab.GetTabbedAuthenticationPresModelCmd';
	global.tab.GetTabbedAuthenticationPresModelCmd = $tab_GetTabbedAuthenticationPresModelCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetTabbedAuthenticationPresModelCmd.Response
	var $tab_GetTabbedAuthenticationPresModelCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetTabbedAuthenticationPresModelCmd$Response.__typeName = 'tab.GetTabbedAuthenticationPresModelCmd$Response';
	global.tab.GetTabbedAuthenticationPresModelCmd$Response = $tab_GetTabbedAuthenticationPresModelCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetThumbnailCmd
	var $tab_GetThumbnailCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetThumbnailCmd$Response]).call(this);
	};
	$tab_GetThumbnailCmd.__typeName = 'tab.GetThumbnailCmd';
	global.tab.GetThumbnailCmd = $tab_GetThumbnailCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetThumbnailCmd.Response
	var $tab_GetThumbnailCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetThumbnailCmd$Response.__typeName = 'tab.GetThumbnailCmd$Response';
	global.tab.GetThumbnailCmd$Response = $tab_GetThumbnailCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetURLSubstitutionKeywordsCmd
	var $tab_GetURLSubstitutionKeywordsCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetURLSubstitutionKeywordsCmd$Response]).call(this);
	};
	$tab_GetURLSubstitutionKeywordsCmd.__typeName = 'tab.GetURLSubstitutionKeywordsCmd';
	global.tab.GetURLSubstitutionKeywordsCmd = $tab_GetURLSubstitutionKeywordsCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetURLSubstitutionKeywordsCmd.Response
	var $tab_GetURLSubstitutionKeywordsCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetURLSubstitutionKeywordsCmd$Response.__typeName = 'tab.GetURLSubstitutionKeywordsCmd$Response';
	global.tab.GetURLSubstitutionKeywordsCmd$Response = $tab_GetURLSubstitutionKeywordsCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetWebCategoricalColorDialogCmd
	var $tab_GetWebCategoricalColorDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetWebCategoricalColorDialogCmd$Response]).call(this);
	};
	$tab_GetWebCategoricalColorDialogCmd.__typeName = 'tab.GetWebCategoricalColorDialogCmd';
	global.tab.GetWebCategoricalColorDialogCmd = $tab_GetWebCategoricalColorDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetWebCategoricalColorDialogCmd.Response
	var $tab_GetWebCategoricalColorDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetWebCategoricalColorDialogCmd$Response.__typeName = 'tab.GetWebCategoricalColorDialogCmd$Response';
	global.tab.GetWebCategoricalColorDialogCmd$Response = $tab_GetWebCategoricalColorDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetWebQuantitativeColorDialogCmd
	var $tab_GetWebQuantitativeColorDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetWebQuantitativeColorDialogCmd$Response]).call(this);
	};
	$tab_GetWebQuantitativeColorDialogCmd.__typeName = 'tab.GetWebQuantitativeColorDialogCmd';
	global.tab.GetWebQuantitativeColorDialogCmd = $tab_GetWebQuantitativeColorDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GetWebQuantitativeColorDialogCmd.Response
	var $tab_GetWebQuantitativeColorDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_GetWebQuantitativeColorDialogCmd$Response.__typeName = 'tab.GetWebQuantitativeColorDialogCmd$Response';
	global.tab.GetWebQuantitativeColorDialogCmd$Response = $tab_GetWebQuantitativeColorDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GroupFontExtractor
	var $tab_GroupFontExtractor = function() {
	};
	$tab_GroupFontExtractor.__typeName = 'tab.GroupFontExtractor';
	global.tab.GroupFontExtractor = $tab_GroupFontExtractor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GroupModel
	var $tab_GroupModel = function(parent) {
		$tab_FieldColumnModel.call(this, parent);
	};
	$tab_GroupModel.__typeName = 'tab.GroupModel';
	global.tab.GroupModel = $tab_GroupModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.GroupModelFactory
	var $tab_GroupModelFactory = function() {
	};
	$tab_GroupModelFactory.__typeName = 'tab.GroupModelFactory';
	$tab_GroupModelFactory.create = function GroupModelFactory$Create(presModel, parent, fieldModelCache) {
		var groupModel = (ss.keyExists(fieldModelCache.get_fields(), presModel.fn) ? fieldModelCache.get_fields()[presModel.fn].asGroup() : new $tab_GroupModel(parent));
		groupModel.update(presModel);
		return groupModel;
	};
	global.tab.GroupModelFactory = $tab_GroupModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HasUserSpecificActiveSheetCmd
	var $tab_HasUserSpecificActiveSheetCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HasUserSpecificActiveSheetCmd$Response]).call(this);
	};
	$tab_HasUserSpecificActiveSheetCmd.__typeName = 'tab.HasUserSpecificActiveSheetCmd';
	global.tab.HasUserSpecificActiveSheetCmd = $tab_HasUserSpecificActiveSheetCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HasUserSpecificActiveSheetCmd.Response
	var $tab_HasUserSpecificActiveSheetCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_HasUserSpecificActiveSheetCmd$Response.__typeName = 'tab.HasUserSpecificActiveSheetCmd$Response';
	global.tab.HasUserSpecificActiveSheetCmd$Response = $tab_HasUserSpecificActiveSheetCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HighlightItemsByPatternMatchCmd
	var $tab_HighlightItemsByPatternMatchCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HighlightItemsByPatternMatchCmd$Response]).call(this);
	};
	$tab_HighlightItemsByPatternMatchCmd.__typeName = 'tab.HighlightItemsByPatternMatchCmd';
	global.tab.HighlightItemsByPatternMatchCmd = $tab_HighlightItemsByPatternMatchCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HighlightItemsByPatternMatchCmd.Response
	var $tab_HighlightItemsByPatternMatchCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_HighlightItemsByPatternMatchCmd$Response.__typeName = 'tab.HighlightItemsByPatternMatchCmd$Response';
	global.tab.HighlightItemsByPatternMatchCmd$Response = $tab_HighlightItemsByPatternMatchCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.History
	var $tab_History = function(baseWorkbookGuid) {
		this.$baseWorkbookGuid = null;
		this.$past = null;
		this.$future = null;
		this.$revert();
		this.$baseWorkbookGuid = baseWorkbookGuid;
	};
	$tab_History.__typeName = 'tab.History';
	$tab_History.createHistory = function History$CreateHistory() {
		if (tab.FeatureFlags.isEnabled('PortableSessionsCheckpoint')) {
			return new $tab_History(null);
		}
		else {
			return new $tab_NullHistory();
		}
	};
	global.tab.History = $tab_History;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HistoryManager
	var $tab_HistoryManager = function() {
	};
	$tab_HistoryManager.__typeName = 'tab.HistoryManager';
	$tab_HistoryManager.setInitialState = function HistoryManager$SetInitialState(undo) {
		var item = $tab_HistoryManager.$createHistoryStackItem(undo, null, '');
		tab.HistoryUtil.replaceState(window.self, item.associatedState, null, null);
	};
	$tab_HistoryManager.addToHistory = function HistoryManager$AddToHistory(undo, redo, sessionStateId) {
		var item = $tab_HistoryManager.$createHistoryStackItem(undo, redo, sessionStateId);
		tab.HistoryUtil.pushState(window.self, item.associatedState, null, null);
		return item;
	};
	$tab_HistoryManager.tailSessionStateIds = function HistoryManager$TailSessionStateIds(maxTailLength) {
		var tailBase = Math.max(0, $tab_HistoryManager.$historyStateCursor - maxTailLength);
		var ids = [];
		for (var i = tailBase; i < $tab_HistoryManager.$historyStateCursor; i++) {
			var edit = $tab_HistoryManager.$historyStates.get(i);
			if (ss.isNullOrUndefined(edit)) {
				continue;
			}
			var id = edit.sessionStateId;
			if (ss.isNullOrEmptyString(id)) {
				continue;
			}
			ids.push(id);
		}
		return ids;
	};
	$tab_HistoryManager.$createHistoryStackItem = function HistoryManager$CreateHistoryStackItem(undo, redo, sessionStateId) {
		$tab_HistoryManager.$cleanUnreachableStates();
		var state = { id: $tab_HistoryManager.$stateIdCounter, key: $tab_HistoryManager.$statePrefix };
		var undoRedoActionsItem = { onBack: undo, onForward: redo, id: $tab_HistoryManager.$stateIdCounter, associatedState: state, sessionStateId: sessionStateId };
		$tab_HistoryManager.$historyStates.set(undoRedoActionsItem.id, undoRedoActionsItem);
		$tab_HistoryManager.$stateIdCounter++;
		$tab_HistoryManager.$historyStateCursor = $tab_HistoryManager.$stateIdCounter;
		return undoRedoActionsItem;
	};
	$tab_HistoryManager.$cleanUnreachableStates = function HistoryManager$CleanUnreachableStates() {
		if ($tab_HistoryManager.$historyStateCursor < $tab_HistoryManager.$stateIdCounter) {
			for (var i = $tab_HistoryManager.$historyStateCursor + 1; i <= $tab_HistoryManager.$stateIdCounter; i++) {
				$tab_HistoryManager.$historyStates.delete(i);
			}
		}
	};
	$tab_HistoryManager.$handlePopStateEvent = function HistoryManager$HandlePopStateEvent(e) {
		if (ss.isNullOrUndefined(e)) {
			return;
		}
		var stateWrapper = e;
		if (ss.isNullOrUndefined(stateWrapper.state) || ss.isNullOrUndefined(stateWrapper.state.key) || !ss.referenceEquals(stateWrapper.state.key, $tab_HistoryManager.$statePrefix)) {
			return;
		}
		$tab_HistoryManager.$handleStateChange(stateWrapper.state);
	};
	$tab_HistoryManager.$handleStateChange = function HistoryManager$HandleStateChange(state) {
		var isBack = state.id < $tab_HistoryManager.$historyStateCursor;
		var lastState = $tab_HistoryManager.$historyStates.get(state.id);
		if (ss.isNullOrUndefined(lastState)) {
			return;
		}
		$tab_HistoryManager.$fireUndoRedo(isBack, lastState);
		$tab_HistoryManager.$historyStateCursor = state.id;
	};
	$tab_HistoryManager.$fireUndoRedo = function HistoryManager$FireUndoRedo(isBack, stateItem) {
		if (isBack) {
			if (!ss.staticEquals(stateItem.onBack, null)) {
				stateItem.onBack();
			}
		}
		else if (!ss.staticEquals(stateItem.onForward, null)) {
			stateItem.onForward();
		}
	};
	global.tab.HistoryManager = $tab_HistoryManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HitTestSceneCmd
	var $tab_HitTestSceneCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HitTestSceneCmd$Response]).call(this);
	};
	$tab_HitTestSceneCmd.__typeName = 'tab.HitTestSceneCmd';
	global.tab.HitTestSceneCmd = $tab_HitTestSceneCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.HitTestSceneCmd.Response
	var $tab_HitTestSceneCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_HitTestSceneCmd$Response.__typeName = 'tab.HitTestSceneCmd$Response';
	global.tab.HitTestSceneCmd$Response = $tab_HitTestSceneCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.HTMLEscape
	var $tab_HTMLEscape = function() {
	};
	$tab_HTMLEscape.__typeName = 'tab.HTMLEscape';
	global.tab.HTMLEscape = $tab_HTMLEscape;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IBrushingModelInfo
	var $tab_IBrushingModelInfo = function() {
	};
	$tab_IBrushingModelInfo.__typeName = 'tab.IBrushingModelInfo';
	global.tab.IBrushingModelInfo = $tab_IBrushingModelInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ICommandDispatcher
	var $tab_ICommandDispatcher = function() {
	};
	$tab_ICommandDispatcher.__typeName = 'tab.ICommandDispatcher';
	global.tab.ICommandDispatcher = $tab_ICommandDispatcher;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ICommandModel
	var $tab_ICommandModel = function() {
	};
	$tab_ICommandModel.__typeName = 'tab.ICommandModel';
	global.tab.ICommandModel = $tab_ICommandModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IContinuousRangeModel
	var $tab_IContinuousRangeModel = function() {
	};
	$tab_IContinuousRangeModel.__typeName = 'tab.IContinuousRangeModel';
	global.tab.IContinuousRangeModel = $tab_IContinuousRangeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IDataSourceDataNotification
	var $tab_IDataSourceDataNotification = function() {
	};
	$tab_IDataSourceDataNotification.__typeName = 'tab.IDataSourceDataNotification';
	global.tab.IDataSourceDataNotification = $tab_IDataSourceDataNotification;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.IDetachableNotificationHandler
	var $tab_IDetachableNotificationHandler = function() {
	};
	$tab_IDetachableNotificationHandler.__typeName = 'tab.IDetachableNotificationHandler';
	global.tab.IDetachableNotificationHandler = $tab_IDetachableNotificationHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IDrawItemFontExtractor
	var $tab_IDrawItemFontExtractor = function() {
	};
	$tab_IDrawItemFontExtractor.__typeName = 'tab.IDrawItemFontExtractor';
	global.tab.IDrawItemFontExtractor = $tab_IDrawItemFontExtractor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IExportImageHelper
	var $tab_IExportImageHelper = function() {
	};
	$tab_IExportImageHelper.__typeName = 'tab.IExportImageHelper';
	global.tab.IExportImageHelper = $tab_IExportImageHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IExportPdfHelper
	var $tab_IExportPdfHelper = function() {
	};
	$tab_IExportPdfHelper.__typeName = 'tab.IExportPdfHelper';
	global.tab.IExportPdfHelper = $tab_IExportPdfHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Formatting.IFormattingConverterObject
	var $tab_IFormattingConverterObject = function() {
	};
	$tab_IFormattingConverterObject.__typeName = 'tab.IFormattingConverterObject';
	global.tab.IFormattingConverterObject = $tab_IFormattingConverterObject;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IHandleNotifications
	var $tab_IHandleNotifications = function() {
	};
	$tab_IHandleNotifications.__typeName = 'tab.IHandleNotifications';
	global.tab.IHandleNotifications = $tab_IHandleNotifications;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.IHistory
	var $tab_IHistory = function() {
	};
	$tab_IHistory.__typeName = 'tab.IHistory';
	global.tab.IHistory = $tab_IHistory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ImageTileTracker
	var $tab_ImageTileTracker = function() {
		this.$pendingCount = 0;
		this.$loadedCallbacks = null;
		this.$pendingCount = 0;
		this.$loadedCallbacks = [];
	};
	$tab_ImageTileTracker.__typeName = 'tab.ImageTileTracker';
	$tab_ImageTileTracker.get_$instance = function ImageTileTracker$get_Instance() {
		$tab_ImageTileTracker.$instance = $tab_ImageTileTracker.$instance || new $tab_ImageTileTracker();
		return $tab_ImageTileTracker.$instance;
	};
	$tab_ImageTileTracker.get_$log = function ImageTileTracker$get_Log() {
		return tab.Logger.lazyGetLogger($tab_ImageTileTracker);
	};
	$tab_ImageTileTracker.incrementPendingCount = function ImageTileTracker$IncrementPendingCount() {
		$tab_ImageTileTracker.get_$instance().$pendingCount++;
	};
	$tab_ImageTileTracker.decrementPendingCount = function ImageTileTracker$DecrementPendingCount() {
		var localInstance = $tab_ImageTileTracker.get_$instance();
		if (localInstance.$pendingCount > 0) {
			--localInstance.$pendingCount;
			if (localInstance.$pendingCount === 0) {
				for (var $t1 = 0; $t1 < localInstance.$loadedCallbacks.length; $t1++) {
					var callback = localInstance.$loadedCallbacks[$t1];
					try {
						callback();
					}
					catch ($t2) {
						var e = ss.Exception.wrap($t2);
						$tab_ImageTileTracker.get_$log().debug('Exception caught in ImageTileTracker callback: ' + e.get_message(), []);
					}
				}
				$tab_ImageTileTracker.reset();
			}
		}
		else {
			ss.Debug.assert(false, 'Decrementing refcount when zero');
		}
	};
	$tab_ImageTileTracker.callWhenImagesLoaded = function ImageTileTracker$CallWhenImagesLoaded(callback) {
		if ($tab_ImageTileTracker.get_$instance().$pendingCount === 0) {
			try {
				callback();
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				$tab_ImageTileTracker.get_$log().debug('Exception caught in ImageTileTracker callback: ' + e.get_message(), []);
			}
		}
		else {
			$tab_ImageTileTracker.get_$instance().$loadedCallbacks.push(callback);
		}
	};
	$tab_ImageTileTracker.reset = function ImageTileTracker$Reset() {
		$tab_ImageTileTracker.$instance = null;
	};
	global.tab.ImageTileTracker = $tab_ImageTileTracker;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ImageZoneModel
	var $tab_ImageZoneModel = function(parent) {
		this.$zoneModel = null;
		this.$2$NewImageZoneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('imageZone'.toString(), null));
		this.$zoneModel = parent.get_zone();
	};
	$tab_ImageZoneModel.__typeName = 'tab.ImageZoneModel';
	global.tab.ImageZoneModel = $tab_ImageZoneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IModelEventHandler
	var $tab_IModelEventHandler = function() {
	};
	$tab_IModelEventHandler.__typeName = 'tab.IModelEventHandler';
	global.tab.IModelEventHandler = $tab_IModelEventHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IntersectionFontFamilyProviderBuilder
	var $tab_IntersectionFontFamilyProviderBuilder = function() {
		this.$families = null;
		this.$families = null;
	};
	$tab_IntersectionFontFamilyProviderBuilder.__typeName = 'tab.IntersectionFontFamilyProviderBuilder';
	global.tab.IntersectionFontFamilyProviderBuilder = $tab_IntersectionFontFamilyProviderBuilder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.InvalidationInfo
	var $tab_InvalidationInfo = function() {
		this.primarySheet = null;
		this.suppressActivation = null;
		this.layoutStatus = null;
		this.cmdResult = null;
		this.commandName = null;
	};
	$tab_InvalidationInfo.__typeName = 'tab.InvalidationInfo';
	global.tab.InvalidationInfo = $tab_InvalidationInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IReadOnlyModelHolder
	var $tab_IReadOnlyModelHolder$1 = function(T) {
		var $type = function() {
		};
		ss.registerGenericInterfaceInstance($type, $tab_IReadOnlyModelHolder$1, [T], { get_model: null, addEventBinding: null, addModelChangedHandler: null, createChildModelHolder: null, newDisposableContext: null, removeEventBinding: null, removeModelChangedHandler: null }, function() {
			return [];
		});
		return $type;
	};
	$tab_IReadOnlyModelHolder$1.__typeName = 'tab.IReadOnlyModelHolder$1';
	ss.initGenericInterface($tab_IReadOnlyModelHolder$1, $asm, 1);
	global.tab.IReadOnlyModelHolder$1 = $tab_IReadOnlyModelHolder$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IRemoteCommandHandler
	var $tab_IRemoteCommandHandler = function() {
	};
	$tab_IRemoteCommandHandler.__typeName = 'tab.IRemoteCommandHandler';
	global.tab.IRemoteCommandHandler = $tab_IRemoteCommandHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.ISessionErrorHandler
	var $tab_ISessionErrorHandler = function() {
	};
	$tab_ISessionErrorHandler.__typeName = 'tab.ISessionErrorHandler';
	global.tab.ISessionErrorHandler = $tab_ISessionErrorHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IsWebZoneUrlValidCmd
	var $tab_IsWebZoneUrlValidCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_IsWebZoneUrlValidCmd$Response]).call(this);
	};
	$tab_IsWebZoneUrlValidCmd.__typeName = 'tab.IsWebZoneUrlValidCmd';
	global.tab.IsWebZoneUrlValidCmd = $tab_IsWebZoneUrlValidCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IsWebZoneUrlValidCmd.Response
	var $tab_IsWebZoneUrlValidCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_IsWebZoneUrlValidCmd$Response.__typeName = 'tab.IsWebZoneUrlValidCmd$Response';
	global.tab.IsWebZoneUrlValidCmd$Response = $tab_IsWebZoneUrlValidCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IVizqlServerRequestHandler
	var $tab_IVizqlServerRequestHandler = function() {
	};
	$tab_IVizqlServerRequestHandler.__typeName = 'tab.IVizqlServerRequestHandler';
	global.tab.IVizqlServerRequestHandler = $tab_IVizqlServerRequestHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.IWaitForCommands
	var $tab_IWaitForCommands = function() {
	};
	$tab_IWaitForCommands.__typeName = 'tab.IWaitForCommands';
	global.tab.IWaitForCommands = $tab_IWaitForCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Formatting.JQueryFormattingConverterObject
	var $tab_JQueryFormattingConverterObject = function(obj) {
		this.$obj = null;
		this.$obj = obj;
	};
	$tab_JQueryFormattingConverterObject.__typeName = 'tab.JQueryFormattingConverterObject';
	global.tab.JQueryFormattingConverterObject = $tab_JQueryFormattingConverterObject;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.JsModuleConfigurationBuilder
	var $tab_JsModuleConfigurationBuilder = function(moduleInfo) {
		this.moduleBeingConfigured = null;
		this.moduleBeingConfigured = moduleInfo;
	};
	$tab_JsModuleConfigurationBuilder.__typeName = 'tab.JsModuleConfigurationBuilder';
	global.tab.JsModuleConfigurationBuilder = $tab_JsModuleConfigurationBuilder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.JsModuleInfo
	var $tab_JsModuleInfo = function(moduleName, assemblyName) {
		this.moduleName = null;
		this.assemblyName = null;
		this.loadingMethod = null;
		this.isRawJavaScriptModule = false;
		this.shouldExportResult = false;
		this.exportResultName = null;
		this.waitUntilModuleReadyFunc = null;
		this.$dependencies = [];
		this.$stylesheetDependencies = [];
		tab.Param.verifyString(moduleName, 'moduleName');
		this.moduleName = moduleName;
		this.assemblyName = ss.coalesce(assemblyName, moduleName);
		this.loadingMethod = 'asynchronous';
	};
	$tab_JsModuleInfo.__typeName = 'tab.JsModuleInfo';
	global.tab.JsModuleInfo = $tab_JsModuleInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LaunchAlternativeFederationEngineDialogCmd
	var $tab_LaunchAlternativeFederationEngineDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_LaunchAlternativeFederationEngineDialogCmd$Response]).call(this);
	};
	$tab_LaunchAlternativeFederationEngineDialogCmd.__typeName = 'tab.LaunchAlternativeFederationEngineDialogCmd';
	global.tab.LaunchAlternativeFederationEngineDialogCmd = $tab_LaunchAlternativeFederationEngineDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LaunchAlternativeFederationEngineDialogCmd.Response
	var $tab_LaunchAlternativeFederationEngineDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_LaunchAlternativeFederationEngineDialogCmd$Response.__typeName = 'tab.LaunchAlternativeFederationEngineDialogCmd$Response';
	global.tab.LaunchAlternativeFederationEngineDialogCmd$Response = $tab_LaunchAlternativeFederationEngineDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LaunchCustomSqlDialogCmd
	var $tab_LaunchCustomSqlDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_LaunchCustomSqlDialogCmd$Response]).call(this);
	};
	$tab_LaunchCustomSqlDialogCmd.__typeName = 'tab.LaunchCustomSqlDialogCmd';
	global.tab.LaunchCustomSqlDialogCmd = $tab_LaunchCustomSqlDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LaunchCustomSqlDialogCmd.Response
	var $tab_LaunchCustomSqlDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_LaunchCustomSqlDialogCmd$Response.__typeName = 'tab.LaunchCustomSqlDialogCmd$Response';
	global.tab.LaunchCustomSqlDialogCmd$Response = $tab_LaunchCustomSqlDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LaunchInitialSqlDialogCmd
	var $tab_LaunchInitialSqlDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_LaunchInitialSqlDialogCmd$Response]).call(this);
	};
	$tab_LaunchInitialSqlDialogCmd.__typeName = 'tab.LaunchInitialSqlDialogCmd';
	global.tab.LaunchInitialSqlDialogCmd = $tab_LaunchInitialSqlDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LaunchInitialSqlDialogCmd.Response
	var $tab_LaunchInitialSqlDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_LaunchInitialSqlDialogCmd$Response.__typeName = 'tab.LaunchInitialSqlDialogCmd$Response';
	global.tab.LaunchInitialSqlDialogCmd$Response = $tab_LaunchInitialSqlDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LaunchPermissionsPromptCmd
	var $tab_LaunchPermissionsPromptCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_LaunchPermissionsPromptCmd$Response]).call(this);
	};
	$tab_LaunchPermissionsPromptCmd.__typeName = 'tab.LaunchPermissionsPromptCmd';
	global.tab.LaunchPermissionsPromptCmd = $tab_LaunchPermissionsPromptCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LaunchPermissionsPromptCmd.Response
	var $tab_LaunchPermissionsPromptCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_LaunchPermissionsPromptCmd$Response.__typeName = 'tab.LaunchPermissionsPromptCmd$Response';
	global.tab.LaunchPermissionsPromptCmd$Response = $tab_LaunchPermissionsPromptCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LayerEncodingModel
	var $tab_LayerEncodingModel = function(parent, paneSpecId) {
		this.$markSizeModel = null;
		this.$2$NewLayerEncodingField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('layer-encoding[' + paneSpecId + ']', null));
		this.$markSizeModel = new $tab_MarkSizeModel(this);
	};
	$tab_LayerEncodingModel.__typeName = 'tab.LayerEncodingModel';
	global.tab.LayerEncodingModel = $tab_LayerEncodingModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LayoutSession
	var $tab_LayoutSession = function(urlRoot, commonDialogProvider) {
		$tab_BaseSession.call(this, urlRoot, commonDialogProvider);
	};
	$tab_LayoutSession.__typeName = 'tab.LayoutSession';
	global.tab.LayoutSession = $tab_LayoutSession;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LayoutTreeItem
	var $tab_LayoutTreeItem = function(zoneCommonPresModel) {
		this.$children = null;
		this.parent = null;
		this.$dataPresModel = null;
		this.$dataPresModel = zoneCommonPresModel;
		this.$children = [];
	};
	$tab_LayoutTreeItem.__typeName = 'tab.LayoutTreeItem';
	global.tab.LayoutTreeItem = $tab_LayoutTreeItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LayoutTreeModel
	var $tab_LayoutTreeModel = function(parent) {
		this.$layoutTreeItemDictionary = null;
		this.$expandedStateDictionary = null;
		this.$2$LayoutTreeUpdatedField = null;
		this.rootNodes = null;
		this.isEditingStateDictionary = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('dashboardZoneHierarchy'.toString(), null));
		this.$layoutTreeItemDictionary = {};
		this.$expandedStateDictionary = {};
		this.isEditingStateDictionary = {};
		this.rootNodes = [];
	};
	$tab_LayoutTreeModel.__typeName = 'tab.LayoutTreeModel';
	$tab_LayoutTreeModel.$createLayoutTreeItemLookUpTable = function LayoutTreeModel$CreateLayoutTreeItemLookUpTable(zoneCommonList) {
		var dictionary = {};
		if (ss.isValue(zoneCommonList)) {
			for (var $t1 = 0; $t1 < zoneCommonList.length; $t1++) {
				var zoneCommon = zoneCommonList[$t1];
				dictionary[zoneCommon.zoneId] = new $tab_LayoutTreeItem(zoneCommon);
			}
		}
		return dictionary;
	};
	global.tab.LayoutTreeModel = $tab_LayoutTreeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyCategoricalQuickFilterData
	var $tab_LegacyCategoricalQuickFilterData = function(sheets, filterField, exclude, filterValues) {
		this.$targetSheets = null;
		this.$fieldName = null;
		this.$values = null;
		this.$includeAll = false;
		this.$isExclude = false;
		this.$targetSheets = sheets;
		this.$fieldName = filterField;
		this.$isExclude = exclude;
		if (ss.isValue(filterValues)) {
			this.$values = filterValues;
		}
		else {
			this.$values = [];
		}
	};
	$tab_LegacyCategoricalQuickFilterData.__typeName = 'tab.LegacyCategoricalQuickFilterData';
	global.tab.LegacyCategoricalQuickFilterData = $tab_LegacyCategoricalQuickFilterData;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyCategoricalQuickFilterModel
	var $tab_LegacyCategoricalQuickFilterModel = function(parent, presModel) {
		this.$isAllButtonVisible = false;
		$tab_LegacyFilterModel.call(this, parent, presModel);
	};
	$tab_LegacyCategoricalQuickFilterModel.__typeName = 'tab.LegacyCategoricalQuickFilterModel';
	global.tab.LegacyCategoricalQuickFilterModel = $tab_LegacyCategoricalQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyFilterModel
	var $tab_LegacyFilterModel = function(parent, presModel) {
		this.$2$FilterUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('filter[' + presModel.name.join('_') + ']', null));
		this.pm = presModel;
	};
	$tab_LegacyFilterModel.__typeName = 'tab.LegacyFilterModel';
	$tab_LegacyFilterModel.buildDataValueFromFilterValue = function LegacyFilterModel$BuildDataValueFromFilterValue(val) {
		return { t: val.t, v: val.v, s: val.s };
	};
	$tab_LegacyFilterModel.$isNonMidnightTimestampValue = function LegacyFilterModel$IsNonMidnightTimestampValue(val) {
		if (ss.isValue(val)) {
			var dv = $tab_LegacyFilterModel.buildDataValueFromFilterValue(val);
			tableau.format.isDateTimeWithNonMidnightTime(dv);
		}
		return false;
	};
	$tab_LegacyFilterModel.isQuantitativeTimestampFilter = function LegacyFilterModel$IsQuantitativeTimestampFilter(filterState, min, max) {
		var ret = $tab_LegacyFilterModel.$isNonMidnightTimestampValue(min) || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(max);
		if (!ret && ss.isValue(filterState)) {
			if (ss.isValue(filterState.data)) {
				ret = ret || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(filterState.data.min) || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(filterState.data.max);
			}
			if (!ret && ss.isValue(filterState.range)) {
				ret = ret || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(filterState.range.min) || $tab_LegacyFilterModel.$isNonMidnightTimestampValue(filterState.range.max);
			}
		}
		return ret;
	};
	$tab_LegacyFilterModel.$isDateOrTimestamp = function LegacyFilterModel$IsDateOrTimestamp(val) {
		return val.t === 't' || val.t === 'd';
	};
	$tab_LegacyFilterModel.isQuantitativeDateFilter = function LegacyFilterModel$IsQuantitativeDateFilter(filterState, min, max) {
		if (ss.isValue(min)) {
			return $tab_LegacyFilterModel.$isDateOrTimestamp(min);
		}
		else if (ss.isValue(max)) {
			return $tab_LegacyFilterModel.$isDateOrTimestamp(max);
		}
		else if (ss.isValue(filterState)) {
			if (ss.isValue(filterState.data)) {
				if (ss.isValue(filterState.data.min)) {
					return $tab_LegacyFilterModel.$isDateOrTimestamp(filterState.data.min);
				}
				else if (ss.isValue(filterState.data.max)) {
					return $tab_LegacyFilterModel.$isDateOrTimestamp(filterState.data.max);
				}
			}
			if (ss.isValue(filterState.range)) {
				if (ss.isValue(filterState.range.min)) {
					return $tab_LegacyFilterModel.$isDateOrTimestamp(filterState.range.min);
				}
				else if (ss.isValue(filterState.range.max)) {
					return $tab_LegacyFilterModel.$isDateOrTimestamp(filterState.range.max);
				}
			}
		}
		return false;
	};
	$tab_LegacyFilterModel.isNormalValue = function LegacyFilterModel$IsNormalValue(f) {
		return ss.isValue(f) && (ss.isNullOrUndefined(f.s) || ss.referenceEquals(f.s, tableau.types.DataSpecial.DS_NORMAL)) && ss.isValue(f.v);
	};
	$tab_LegacyFilterModel.timestampsWithSameDateOrNull = function LegacyFilterModel$TimestampsWithSameDateOrNull(values) {
		var baseDate = null;
		for (var $t1 = 0; $t1 < values.length; $t1++) {
			var value = values[$t1];
			if (ss.isNullOrUndefined(value) || ss.referenceEquals(value.s, tableau.types.DataSpecial.DS_NULL) || ss.isNullOrUndefined(value.v) && value.t === 't') {
				continue;
			}
			if (!$tab_LegacyFilterModel.isNormalValue(value) || value.t !== 't') {
				return false;
			}
			var valueDatePart = (ss.Nullable$1.ge(value.v, 0) ? Math.floor(ss.unbox(value.v)) : Math.ceil(ss.unbox(value.v)));
			if (ss.isValue(baseDate) && valueDatePart !== baseDate) {
				return false;
			}
			baseDate = valueDatePart;
		}
		return ss.isValue(baseDate);
	};
	global.tab.LegacyFilterModel = $tab_LegacyFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyHierarchicalQuickFilterModel
	var $tab_LegacyHierarchicalQuickFilterModel = function(parent, presModel) {
		$tab_LegacyFilterModel.call(this, parent, presModel);
	};
	$tab_LegacyHierarchicalQuickFilterModel.__typeName = 'tab.LegacyHierarchicalQuickFilterModel';
	global.tab.LegacyHierarchicalQuickFilterModel = $tab_LegacyHierarchicalQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyLegendModel
	var $tab_LegacyLegendModel = function(parent) {
		this.$2$NewLegacyLegendField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('serverRenderedLegend'.toString(), null));
	};
	$tab_LegacyLegendModel.__typeName = 'tab.LegacyLegendModel';
	global.tab.LegacyLegendModel = $tab_LegacyLegendModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyQuantitativeQuickFilterModel
	var $tab_LegacyQuantitativeQuickFilterModel = function(parent, presModel) {
		$tab_LegacyFilterModel.call(this, parent, presModel);
	};
	$tab_LegacyQuantitativeQuickFilterModel.__typeName = 'tab.LegacyQuantitativeQuickFilterModel';
	global.tab.LegacyQuantitativeQuickFilterModel = $tab_LegacyQuantitativeQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyQuickFilterDisplayModel
	var $tab_LegacyQuickFilterDisplayModel = function(parent) {
		this.$frame = null;
		this.$quickFilterCommandsModel = null;
		this.$2$QuickFilterDisplayUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('quickFilterDisplay', null));
	};
	$tab_LegacyQuickFilterDisplayModel.__typeName = 'tab.LegacyQuickFilterDisplayModel';
	global.tab.LegacyQuickFilterDisplayModel = $tab_LegacyQuickFilterDisplayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LegacyRelativeDateQuickFilterModel
	var $tab_LegacyRelativeDateQuickFilterModel = function(parent, presModel) {
		$tab_LegacyFilterModel.call(this, parent, presModel);
	};
	$tab_LegacyRelativeDateQuickFilterModel.__typeName = 'tab.LegacyRelativeDateQuickFilterModel';
	global.tab.LegacyRelativeDateQuickFilterModel = $tab_LegacyRelativeDateQuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LevelModel
	var $tab_LevelModel = function(parent) {
		this.$4$LinkedAttributesField = null;
		$tab_FieldColumnModel.call(this, parent);
	};
	$tab_LevelModel.__typeName = 'tab.LevelModel';
	global.tab.LevelModel = $tab_LevelModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LevelModelFactory
	var $tab_LevelModelFactory = function() {
	};
	$tab_LevelModelFactory.__typeName = 'tab.LevelModelFactory';
	$tab_LevelModelFactory.create = function LevelModelFactory$Create(presModel, parent, fieldModelCache) {
		var linkedAttributes = $tab_LevelModelFactory.$buildLinkedAttributeArray(presModel, parent, fieldModelCache);
		var levelModel = (ss.keyExists(fieldModelCache.get_fields(), presModel.fn) ? fieldModelCache.get_fields()[presModel.fn].asLevel() : new $tab_LevelModel(parent));
		levelModel.update$1(presModel, linkedAttributes);
		return levelModel;
	};
	$tab_LevelModelFactory.$buildLinkedAttributeArray = function LevelModelFactory$BuildLinkedAttributeArray(presModel, parent, fieldModelCache) {
		var linkedAttributes = [];
		if (ss.isNullOrUndefined(presModel.attributeAttributeDimensionList)) {
			return linkedAttributes;
		}
		for (var $t1 = 0; $t1 < presModel.attributeAttributeDimensionList.length; $t1++) {
			var linkedAttrPresModel = presModel.attributeAttributeDimensionList[$t1];
			linkedAttributes.push($tab_CubeAttributeDimensionModelFactory.create(linkedAttrPresModel, parent, fieldModelCache));
		}
		return linkedAttributes;
	};
	global.tab.LevelModelFactory = $tab_LevelModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.LinearRangeTransform
	var $tab_LinearRangeTransform = function(min, max) {
		this.$min = 0;
		this.$max = 0;
		$tab_RangeTransform.call(this);
		if (min <= max) {
			this.$min = min;
			this.$max = max;
		}
		else {
			this.$min = max;
			this.$max = min;
		}
	};
	$tab_LinearRangeTransform.__typeName = 'tab.LinearRangeTransform';
	global.tab.LinearRangeTransform = $tab_LinearRangeTransform;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LocalUbertipInfo
	var $tab_LocalUbertipInfo = function(interactedTupleId, affectedTupleIds, paneDescriptorKey, needRemoteUbertip) {
		this.$interactedTupleId = 0;
		this.$affectedTupleIds = null;
		this.$paneDescriptorKey = null;
		this.$needRemoteUbertip = false;
		this.$interactedTupleId = interactedTupleId;
		this.$affectedTupleIds = affectedTupleIds;
		this.$paneDescriptorKey = paneDescriptorKey;
		this.$needRemoteUbertip = needRemoteUbertip;
	};
	$tab_LocalUbertipInfo.__typeName = 'tab.LocalUbertipInfo';
	global.tab.LocalUbertipInfo = $tab_LocalUbertipInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.LruCache
	var $tab_LruCache$2 = function(TKey, TValue) {
		var $type = function(maxItemsInCache) {
			this.$cache = {};
			this.$order = new (ss.makeGenericType($tab_$DoubleLinkedList$1, [ss.makeGenericType($tab_$CacheRecord$2, [TKey, TValue])]))();
			this.$maxItemsInCache = 0;
			ss.Debug.assert(maxItemsInCache > 0, 'Cache must be able to handle some items');
			this.$maxItemsInCache = maxItemsInCache;
		};
		ss.registerGenericClassInstance($type, $tab_LruCache$2, [TKey, TValue], {
			add: function LruCache$Add(key, value) {
				ss.Debug.assert(ss.getKeyCount(this.$cache) <= this.$maxItemsInCache, 'Cache holds more elements than allowed.');
				var record = this.$cache[key];
				if (ss.isValue(record)) {
					this.delete$1(key);
				}
				if (ss.getKeyCount(this.$cache) === this.$maxItemsInCache) {
					this.delete$1(this.$order.$tail.$data.$key);
				}
				record = new (ss.makeGenericType($tab_$LinkedListNode$1, [ss.makeGenericType($tab_$CacheRecord$2, [TKey, TValue])]))(new (ss.makeGenericType($tab_$CacheRecord$2, [TKey, TValue]))(key, value));
				this.$cache[key] = record;
				this.$order.$addToFront(record);
			},
			get: function LruCache$Get(key) {
				var result = this.$cache[key];
				if (ss.isValue(result)) {
					this.$order.$delete(result);
					this.$order.$addToFront(result);
					return result.$data.$value;
				}
				return ss.getDefaultValue(TValue);
			},
			has: function LruCache$Has(key) {
				return ss.keyExists(this.$cache, key);
			},
			delete$1: function LruCache$Delete(key) {
				if (!this.has(key)) {
					return;
				}
				ss.Debug.assert(ss.getKeyCount(this.$cache) > 0, 'Attempting to delete item from empty dictionary');
				var recordToDelete = this.$cache[key];
				delete this.$cache[key];
				this.$order.$delete(recordToDelete);
			},
			clear: function LruCache$Clear() {
				var keys = _.keys(this.$cache);
				for (var i = 0, len = keys.length; i < len; i++) {
					this.delete$1(keys[i]);
				}
			}
		}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_LruCache$2.__typeName = 'tab.LruCache$2';
	ss.initGenericClass($tab_LruCache$2, $asm, 2);
	global.tab.LruCache$2 = $tab_LruCache$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MapboxMapSourceModel
	var $tab_MapboxMapSourceModel = function(parent) {
		this.$2$StyleRefreshRequiredField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('mapboxMapSource'.toString(), null));
	};
	$tab_MapboxMapSourceModel.__typeName = 'tab.MapboxMapSourceModel';
	global.tab.MapboxMapSourceModel = $tab_MapboxMapSourceModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MapClientCommands
	var $tab_MapClientCommands = function() {
	};
	$tab_MapClientCommands.__typeName = 'tab.MapClientCommands';
	$tab_MapClientCommands.boundingBoxPan = function MapClientCommands$BoundingBoxPan(visualIdPresModel, mapRect) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'bounding-box-pan' }, null);
		var commandParams = {};
		commandParams['mapLatLongRect'] = mapRect;
		c.commandParams = commandParams;
		if (ss.isValue(visualIdPresModel)) {
			$tab_CommandUtils.addVisualIdToCommand(c.commandParams, visualIdPresModel);
		}
		$tab_ServerCommands.executeServerCommand(c, 'afterDelay', null, null);
	};
	$tab_MapClientCommands.geographicSearchQuery = function MapClientCommands$GeographicSearchQuery(visualIdPresModel, query, locale, maxResults, callback) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'geographic-search-query' }, null);
		var commandParams = {};
		c.commandParams = commandParams;
		c.commandParams['geographicSearchSearchString'] = query;
		c.commandParams['geographicSearchLocale'] = locale;
		c.commandParams['geographicSearchMaxResults'] = maxResults.toString();
		if (ss.isValue(visualIdPresModel)) {
			$tab_CommandUtils.addVisualIdToCommand(c.commandParams, visualIdPresModel);
		}
		$tab_ServerCommands.executeServerCommand(c, 'none', function(pm) {
			callback(pm);
		}, null);
	};
	global.tab.MapClientCommands = $tab_MapClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MapOptionsInfoModel
	var $tab_MapOptionsInfoModel = function(parent) {
		this.$2$UpdatedMapOptionsInfoField = null;
		this.$2$StopNotifyingField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('lightweightMapOptions'.toString(), null));
		this.pm = {};
	};
	$tab_MapOptionsInfoModel.__typeName = 'tab.MapOptionsInfoModel';
	global.tab.MapOptionsInfoModel = $tab_MapOptionsInfoModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MapScaleInfoModel
	var $tab_MapScaleInfoModel = function(parent) {
		this.$2$UpdatedMapScaleInfoField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('mapScaleInfo'.toString(), null));
	};
	$tab_MapScaleInfoModel.__typeName = 'tab.MapScaleInfoModel';
	global.tab.MapScaleInfoModel = $tab_MapScaleInfoModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MapServerModel
	var $tab_MapServerModel = function(parent) {
		this.$radialSelectionDistanceInfoModel = null;
		this.$mapScaleInfoModel = null;
		this.$mapboxMapSourceModel = null;
		this.$rasterMapSourceModel = null;
		this.$centerLatitude = 0;
		this.$centerLongitude = 0;
		this.$requestZoom = 0;
		this.$displayScale = 0;
		this.$2$NewMapServerInfoField = null;
		this.$2$TileSourceChangedField = null;
		this.$2$UseFastMapsChangedField = null;
		this.$2$AllowLocalPanAndZoomField = false;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('mapServer'.toString(), null));
		this.$radialSelectionDistanceInfoModel = new $tab_RadialSelectionDistanceInfoModel(this);
		this.$mapScaleInfoModel = new $tab_MapScaleInfoModel(this);
		this.$mapboxMapSourceModel = new $tab_MapboxMapSourceModel(this);
		this.$rasterMapSourceModel = new $tab_RasterMapSourceModel(this);
		this.set_allowLocalPanAndZoom(false);
		this.$centerLatitude = 0;
		this.$centerLongitude = 0;
		this.$requestZoom = 0;
		this.$displayScale = 0;
	};
	$tab_MapServerModel.__typeName = 'tab.MapServerModel';
	global.tab.MapServerModel = $tab_MapServerModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MarginDefinition
	var $tab_MarginDefinition = function() {
		$tab_SpacingDefinition.call(this, null, null, null, null, null);
	};
	$tab_MarginDefinition.__typeName = 'tab.MarginDefinition';
	$tab_MarginDefinition.$ctor1 = function(style) {
		$tab_SpacingDefinition.call(this, style.margin, style.marginLeft, style.marginRight, style.marginTop, style.marginBottom);
	};
	global.tab.MarginDefinition = $tab_MarginDefinition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MarksCardModel
	var $tab_MarksCardModel = function(parent) {
		this.$layers = [];
		this.$activePaneSpecId = null;
		this.$2$NewMarksCardField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('marksCardPresModel'.toString(), null));
	};
	$tab_MarksCardModel.__typeName = 'tab.MarksCardModel';
	global.tab.MarksCardModel = $tab_MarksCardModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MarkSizeModel
	var $tab_MarkSizeModel = function(parent) {
		this.$parentModel = null;
		this.$transform = null;
		this.$2$NewMarkSizeField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('markSize'.toString(), null));
		this.$parentModel = parent;
	};
	$tab_MarkSizeModel.__typeName = 'tab.MarkSizeModel';
	global.tab.MarkSizeModel = $tab_MarkSizeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Model
	var $tab_Model = function(parent, presModelKey) {
		this.pm = null;
		this.presModelKey = null;
		this.parent = null;
		this.parent = parent;
		this.presModelKey = presModelKey;
	};
	$tab_Model.__typeName = 'tab.Model';
	$tab_Model.nonWorldUpdate = function Model$NonWorldUpdate(updateAction) {
		var eventHandler = new $tab_DeferredModelEventHandler();
		try {
			updateAction({ eventHandler: eventHandler });
		}
		finally {
			if (ss.isValue(eventHandler)) {
				eventHandler.dispose();
			}
		}
	};
	global.tab.Model = $tab_Model;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModelHolder
	var $tab_ModelHolder$1 = function(T) {
		var $type = function() {
			this.$model = null;
			this.$disposables = new tab.DisposableHolder();
			this.$1$BindEventsField = null;
			this.$1$UnbindEventsField = null;
			this.$1$ModelChangedField = null;
		};
		ss.registerGenericClassInstance($type, $tab_ModelHolder$1, [T], {
			add_$bindEvents: function ModelHolder$add_BindEvents(value) {
				this.$1$BindEventsField = ss.delegateCombine(this.$1$BindEventsField, value);
			},
			remove_$bindEvents: function ModelHolder$remove_BindEvents(value) {
				this.$1$BindEventsField = ss.delegateRemove(this.$1$BindEventsField, value);
			},
			add_$unbindEvents: function ModelHolder$add_UnbindEvents(value) {
				this.$1$UnbindEventsField = ss.delegateCombine(this.$1$UnbindEventsField, value);
			},
			remove_$unbindEvents: function ModelHolder$remove_UnbindEvents(value) {
				this.$1$UnbindEventsField = ss.delegateRemove(this.$1$UnbindEventsField, value);
			},
			add_$modelChanged: function ModelHolder$add_ModelChanged(value) {
				this.$1$ModelChangedField = ss.delegateCombine(this.$1$ModelChangedField, value);
			},
			remove_$modelChanged: function ModelHolder$remove_ModelChanged(value) {
				this.$1$ModelChangedField = ss.delegateRemove(this.$1$ModelChangedField, value);
			},
			get_model: function ModelHolder$get_Model() {
				return this.$model;
			},
			set_model: function ModelHolder$set_Model(value) {
				var oldModel = this.$model;
				this.$model = value;
				if (!ss.referenceEquals(oldModel, this.$model)) {
					if (ss.isValue(oldModel) && !ss.staticEquals(this.$1$UnbindEventsField, null)) {
						this.$1$UnbindEventsField(oldModel);
					}
					if (ss.isValue(this.$model) && !ss.staticEquals(this.$1$BindEventsField, null)) {
						this.$1$BindEventsField(this.$model);
					}
					if (!ss.staticEquals(this.$1$ModelChangedField, null)) {
						this.$1$ModelChangedField();
					}
				}
			},
			addModelChangedHandler: function ModelHolder$AddModelChangedHandler(modelChangedHandler) {
				this.add_$modelChanged(modelChangedHandler);
				if (ss.isValue(this.$model)) {
					modelChangedHandler();
				}
				return this;
			},
			removeModelChangedHandler: function ModelHolder$RemoveModelChangedHandler(modelChangedHandler) {
				this.remove_$modelChanged(modelChangedHandler);
			},
			addEventBinding: function ModelHolder$AddEventBinding(eventBinder, eventUnbinder) {
				this.add_$bindEvents(eventBinder);
				if (ss.isValue(this.$model)) {
					eventBinder(this.$model);
				}
				this.add_$unbindEvents(eventUnbinder);
				return this;
			},
			removeEventBinding: function ModelHolder$RemoveEventBinding(eventBinder, eventUnbinder) {
				this.remove_$bindEvents(eventBinder);
				this.remove_$unbindEvents(eventUnbinder);
				if (!ss.staticEquals(eventUnbinder, null) && ss.isValue(this.$model)) {
					eventUnbinder(this.$model);
				}
			},
			createChildModelHolder: function(TChild) {
				return function ModelHolder$CreateChildModelHolder(childFunc) {
					var result = new (ss.makeGenericType($tab_ModelHolder$1, [TChild]))();
					result.$disposables.add$1(this.newDisposableContext().addModelChangedHandler(ss.mkdel(this, function() {
						var childModel = null;
						if (ss.isValue(this.get_model())) {
							childModel = childFunc(this.get_model());
						}
						result.set_model(childModel);
					})));
					this.$disposables.add$1(result);
					return result;
				};
			},
			dispose: function ModelHolder$Dispose() {
				this.set_model(null);
				this.$1$BindEventsField = null;
				this.$1$UnbindEventsField = null;
				this.$1$ModelChangedField = null;
				this.$disposables.dispose();
			},
			newDisposableContext: function ModelHolder$NewDisposableContext() {
				return new (ss.makeGenericType($tab_ModelHolderContext$1, [T]))(this);
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IDisposable, ss.makeGenericType($tab_IReadOnlyModelHolder$1, [T])];
		});
		return $type;
	};
	$tab_ModelHolder$1.__typeName = 'tab.ModelHolder$1';
	ss.initGenericClass($tab_ModelHolder$1, $asm, 1);
	global.tab.ModelHolder$1 = $tab_ModelHolder$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModelHolderContext
	var $tab_ModelHolderContext$1 = function(T) {
		var $type = function(modelHolder) {
			this.$disposableHolder = null;
			this.$modelHolder = null;
			this.$disposableHolder = new tab.DisposableHolder();
			this.$modelHolder = modelHolder;
		};
		ss.registerGenericClassInstance($type, $tab_ModelHolderContext$1, [T], {
			addModelChangedHandler: function ModelHolderContext$AddModelChangedHandler(modelChangedHandler) {
				this.$modelHolder.addModelChangedHandler(modelChangedHandler);
				this.$disposableHolder.add(ss.mkdel(this, function() {
					this.$modelHolder.removeModelChangedHandler(modelChangedHandler);
				}));
				return this;
			},
			addEventBinding: function ModelHolderContext$AddEventBinding(eventBinder, eventUnbinder) {
				this.$modelHolder.addEventBinding(eventBinder, eventUnbinder);
				this.$disposableHolder.add(ss.mkdel(this, function() {
					this.$modelHolder.removeEventBinding(eventBinder, eventUnbinder);
				}));
				return this;
			},
			dispose: function ModelHolderContext$Dispose() {
				this.$disposableHolder.dispose();
			}
		}, function() {
			return null;
		}, function() {
			return [ss.IDisposable];
		});
		return $type;
	};
	$tab_ModelHolderContext$1.__typeName = 'tab.ModelHolderContext$1';
	ss.initGenericClass($tab_ModelHolderContext$1, $asm, 1);
	global.tab.ModelHolderContext$1 = $tab_ModelHolderContext$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModelUtils
	var $tab_ModelUtils = function() {
	};
	$tab_ModelUtils.__typeName = 'tab.ModelUtils';
	$tab_ModelUtils.getPendingZoneContentModel = function ModelUtils$GetPendingZoneContentModel(zoneId) {
		if (!$tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
			return null;
		}
		var cc = ($tab_CommandController.get_hasInstance() ? $tab_CommandController.get() : null);
		if (ss.isNullOrUndefined(cc) || ss.isNullOrUndefined(cc.get_loader())) {
			return null;
		}
		return cc.get_loader().getPendingZoneContentModel(zoneId);
	};
	$tab_ModelUtils.getViewSession = function ModelUtils$GetViewSession(sheetName) {
		return $tab_ModelUtils.findContentDashboard(null).getViewSession(sheetName);
	};
	$tab_ModelUtils.getModelsForViz = function(T) {
		return function ModelUtils$GetModelsForViz(contentDashboard, viz) {
			var models = [];
			if (ss.isValue(contentDashboard)) {
				var $t1 = contentDashboard.get_zoneModels();
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var zone = $t1[$t2];
					if (ss.isInstanceOfType(zone.get_model(), T) && ss.referenceEquals(zone.get_worksheetName(), viz.get_worksheetName())) {
						models.push(ss.cast(zone.get_model(), T));
					}
				}
			}
			return models;
		};
	};
	$tab_ModelUtils.getVisualModels = function ModelUtils$GetVisualModels(appModel) {
		var dashboardModel = $tab_ModelUtils.findContentDashboard(appModel);
		return $tab_ModelUtils.getVisualModelsFromDashboard(dashboardModel);
	};
	$tab_ModelUtils.getVisualModelsFromDashboard = function ModelUtils$GetVisualModelsFromDashboard(dashboardModel) {
		var result = {};
		if (ss.isNullOrUndefined(dashboardModel)) {
			return result;
		}
		var $t1 = dashboardModel.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			var visualModel = zone.get_visualModel();
			if (ss.isValue(visualModel) && ss.isValue(zone.get_worksheetName())) {
				result[zone.get_worksheetName()] = visualModel;
			}
		}
		if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
			var cc = ($tab_CommandController.get_hasInstance() ? $tab_CommandController.get() : null);
			if (ss.isValue(cc) && ss.isValue(cc.get_loader())) {
				var pendingVMs = cc.get_loader().getPendingVisuals();
				var $t3 = _.keys(pendingVMs);
				for (var $t4 = 0; $t4 < $t3.length; $t4++) {
					var sheet = $t3[$t4];
					result[sheet] = pendingVMs[sheet];
				}
			}
		}
		return result;
	};
	$tab_ModelUtils.getSheetInfoPresModel = function ModelUtils$GetSheetInfoPresModel(appModel, sheetName) {
		var workbookModel = appModel.get_workbook();
		if (ss.isNullOrUndefined(workbookModel) || ss.isNullOrUndefined(workbookModel.get_sheetsInfo())) {
			return null;
		}
		var $t1 = workbookModel.get_sheetsInfo();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var sheetInfo = $t1[$t2];
			if (ss.referenceEquals(sheetInfo.sheet, sheetName)) {
				return sheetInfo;
			}
		}
		return null;
	};
	$tab_ModelUtils.getVisualModel = function ModelUtils$GetVisualModel(appModel, sheetName) {
		var result = null;
		var dashboardModel = $tab_ModelUtils.findContentDashboard(appModel);
		if (ss.isNullOrUndefined(dashboardModel)) {
			return result;
		}
		var $t1 = dashboardModel.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			var visualModel = zone.get_visualModel();
			if (ss.isValue(visualModel)) {
				var worksheetName = zone.get_worksheetName();
				if (ss.referenceEquals(worksheetName, sheetName)) {
					result = visualModel;
					break;
				}
			}
		}
		if ($tab_ProgressiveLoader.get_progressiveLoadEnabled() && ss.isNullOrUndefined(result)) {
			var cc = ($tab_CommandController.get_hasInstance() ? $tab_CommandController.get() : null);
			if (ss.isValue(cc) && ss.isValue(cc.get_loader())) {
				result = cc.get_loader().getPendingVisual(sheetName);
			}
		}
		return result;
	};
	$tab_ModelUtils.getVisualModelFromVisualId = function ModelUtils$GetVisualModelFromVisualId(visualId, appModel) {
		if (ss.isNullOrUndefined(appModel)) {
			appModel = $tab_ApplicationModel.get_instance();
		}
		var result = null;
		var dashboardModel = $tab_ModelUtils.findContentDashboard(appModel);
		if (ss.isNullOrUndefined(dashboardModel)) {
			return result;
		}
		var $t1 = dashboardModel.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			var visualModel = zone.get_visualModel();
			if (ss.isValue(visualModel)) {
				if (_.isEqual(visualModel.get_visualId(), visualId)) {
					result = visualModel;
					break;
				}
			}
		}
		return result;
	};
	$tab_ModelUtils.getVisualId = function ModelUtils$GetVisualId(sheetName) {
		return $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName).get_visualId();
	};
	$tab_ModelUtils.getFirstAvailableWebZoneName = function ModelUtils$GetFirstAvailableWebZoneName(appModel) {
		var result = null;
		var dashboardModel = $tab_ModelUtils.findContentDashboard(appModel);
		if (ss.isNullOrUndefined(dashboardModel)) {
			return result;
		}
		var $t1 = dashboardModel.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			if (zone.get_zoneType() === 'web') {
				var id = zone.get_zoneId();
				result = 'frame_' + id.toString();
				break;
			}
		}
		return result;
	};
	$tab_ModelUtils.isActiveZone = function ModelUtils$IsActiveZone(zoneId) {
		switch (tsConfig.current_sheet_type) {
			case 'dashboard':
			case 'story': {
				return zoneId === $tab_ModelUtils.findContentDashboard(null).get_activeZoneID();
			}
			case 'worksheet':
			default: {
				return true;
			}
		}
	};
	$tab_ModelUtils.getZoneIdForSheetName = function ModelUtils$GetZoneIdForSheetName(worksheetName) {
		var dm = $tab_ModelUtils.findContentDashboard(null);
		var $t1 = dm.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			if (zone.get_zoneType() === 'viz' && ss.referenceEquals(zone.get_worksheetName(), worksheetName)) {
				return zone.get_zoneId();
			}
		}
		return -1;
	};
	$tab_ModelUtils.hasBorder = function ModelUtils$HasBorder(styledBox) {
		return styledBox.get_borderStyle() !== 'bs-none' && styledBox.get_borderWidth() !== 0;
	};
	$tab_ModelUtils.createFilterModel = function ModelUtils$CreateFilterModel(parent, presModel) {
		switch (presModel.type) {
			case 'Q': {
				return new $tab_LegacyQuantitativeQuickFilterModel(parent, presModel);
			}
			case 'H': {
				return new $tab_LegacyHierarchicalQuickFilterModel(parent, presModel);
			}
			case 'C': {
				return new $tab_LegacyCategoricalQuickFilterModel(parent, presModel);
			}
			case 'RD': {
				return new $tab_LegacyRelativeDateQuickFilterModel(parent, presModel);
			}
			default: {
				return new $tab_LegacyFilterModel(parent, presModel);
			}
		}
	};
	$tab_ModelUtils.findMatchingFilterModel = function ModelUtils$FindMatchingFilterModel(visualModel, quickFilterModel) {
		var field = quickFilterModel.get_fieldName();
		return visualModel.get_filterModels()[field];
	};
	$tab_ModelUtils.setVisualValidAndUpToDateStateOnModel = function ModelUtils$SetVisualValidAndUpToDateStateOnModel(t, model, valid) {
		if (ss.isNullOrUndefined(model)) {
			return;
		}
		model.setIsVisualValidAndUpToDate(valid, t.modelUpdateContext);
	};
	$tab_ModelUtils.invalidateVisuals = function ModelUtils$InvalidateVisuals(sheetNames) {
		if (ss.isNullOrUndefined(sheetNames)) {
			return;
		}
		for (var $t1 = 0; $t1 < sheetNames.length; $t1++) {
			var sheet = sheetNames[$t1];
			var visualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheet);
			if (ss.isValue(visualModel)) {
				$tab_VizClientCommands.invalidateVisualModel(visualModel);
			}
		}
	};
	$tab_ModelUtils.setVisualValidStateOnPresModel = function ModelUtils$SetVisualValidStateOnPresModel(t, model) {
		if (ss.isNullOrUndefined(model)) {
			return;
		}
		t.makeMutablePresModel(model, false).valid = false;
	};
	$tab_ModelUtils.invalidateAllVisualPresModels = function ModelUtils$InvalidateAllVisualPresModels(transaction) {
		if ($tab_ApplicationModel.get_instance().get_isOffline()) {
			return;
		}
		var $t1 = $tab_ApplicationModel.get_instance().get_workbook().get_sheetsInfo();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var sheetPresModel = $t1[$t2];
			$tab_ModelUtils.setVisualValidStateOnPresModel(transaction, $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetPresModel.sheet));
		}
	};
	$tab_ModelUtils.getVisualModelOfGivenOrDefaultSheet = function ModelUtils$GetVisualModelOfGivenOrDefaultSheet(dashboard, sheetName) {
		var $t1 = dashboard.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			if (ss.isValue(zone.get_visualModel()) && (ss.referenceEquals(zone.get_worksheetName(), sheetName) || ss.isNullOrUndefined(sheetName))) {
				return zone.get_visualModel();
			}
		}
		return null;
	};
	$tab_ModelUtils.findContentDashboard = function ModelUtils$FindContentDashboard(appModel) {
		if (ss.isNullOrUndefined(appModel)) {
			appModel = $tab_ApplicationModel.get_instance();
		}
		return appModel.get_workbook().findContentDashboard();
	};
	$tab_ModelUtils.findActiveVisual = function ModelUtils$FindActiveVisual() {
		var dashboard = $tab_ModelUtils.findContentDashboard(null);
		if (ss.isNullOrUndefined(dashboard) || ss.isNullOrUndefined(dashboard.get_zoneModels())) {
			return null;
		}
		return dashboard.get_activeVisual();
	};
	$tab_ModelUtils.findActiveOrDefaultVisual = function ModelUtils$FindActiveOrDefaultVisual(sheetName) {
		var dashboard = $tab_ModelUtils.findContentDashboard(null);
		if (ss.isNullOrUndefined(dashboard) || ss.isNullOrUndefined(dashboard.get_zoneModels())) {
			return null;
		}
		var toRet = null;
		if (ss.isValue(sheetName)) {
			toRet = $tab_ModelUtils.getVisualModelOfGivenOrDefaultSheet(dashboard, sheetName);
			if (ss.isValue(toRet)) {
				return toRet;
			}
		}
		toRet = dashboard.get_activeVisual();
		if (ss.isValue(toRet)) {
			return toRet;
		}
		return $tab_ModelUtils.getVisualModelOfGivenOrDefaultSheet(dashboard, null);
	};
	$tab_ModelUtils.reValidateVisualModels = function ModelUtils$ReValidateVisualModels(context) {
		var models = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = _.values(models);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var model = $t1[$t2];
			model.reValidate(context);
		}
	};
	$tab_ModelUtils.findActivePaneSpecId = function ModelUtils$FindActivePaneSpecId() {
		var activeVisual = $tab_ModelUtils.findActiveOrDefaultVisual(null);
		if (ss.isValue(activeVisual) && ss.isValue(activeVisual.get_marksCardModel())) {
			return activeVisual.get_marksCardModel().get_activePaneSpecId();
		}
		return null;
	};
	$tab_ModelUtils.hasAnyImpliedSelection = function ModelUtils$HasAnyImpliedSelection() {
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = _.keys(visualModels);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var sheetName = $t1[$t2];
			var model = visualModels[sheetName];
			if (!model.get_impliedSelectionModel().isEmpty) {
				return true;
			}
		}
		return false;
	};
	$tab_ModelUtils.mergeMapPresModelDelta = function ModelUtils$MergeMapPresModelDelta(existingMap, delta) {
		if (ss.isNullOrUndefined(existingMap) || ss.isNullOrUndefined(delta)) {
			return;
		}
		var $t1 = _.keys(existingMap);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			var val = delta[key];
			if (typeof(val) === 'undefined') {
				delta[key] = existingMap[key];
			}
			else if (val === null) {
				delete delta[key];
			}
		}
	};
	$tab_ModelUtils.isLegacyMenuItemEnabled = function ModelUtils$IsLegacyMenuItemEnabled(name) {
		var legacyMenuItems = $tab_ApplicationModel.get_instance().get_appPresModel().toolbarPresModel.legacyMenus;
		if (ss.isNullOrUndefined(legacyMenuItems)) {
			return false;
		}
		var legacyMenuItem = _.find(legacyMenuItems, function(item) {
			return item.legacyMenuName === name;
		});
		return ss.isValue(legacyMenuItem) && _.every(legacyMenuItem.legacyMenuStates, function(state) {
			return state !== 'grayed';
		});
	};
	global.tab.ModelUtils = $tab_ModelUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModuleManager
	var $tab_ModuleManager = function() {
	};
	$tab_ModuleManager.__typeName = 'tab.ModuleManager';
	$tab_ModuleManager.$createInstance = function ModuleManager$CreateInstance(type, arguments1) {
		return ((arguments1.length === 0) ? ss.createInstance(type) : ss.applyConstructor(type, arguments1));
	};
	$tab_ModuleManager.load = function(T) {
		return function ModuleManager$Load(arguments1) {
			var result = $tab_ModuleManager.load$1(ss.getTypeFullName(T), arguments1);
			return result;
		};
	};
	$tab_ModuleManager.load$1 = function ModuleManager$Load(uniqueModuleName, arguments1) {
		tab.Param.verifyString(uniqueModuleName, 'uniqueModuleName');
		$tab_ModuleManager.$ensureConfigured();
		var moduleInfo = $tab_ModuleManager.$getJsModuleInfo(uniqueModuleName);
		if (ss.keyExists($tab_ModuleManager.$modules, moduleInfo.moduleName)) {
			return $tab_ModuleManager.$modules[moduleInfo.moduleName];
		}
		var deferredLoadResult = $.Deferred();
		$tab_ModuleManager.$modules[moduleInfo.moduleName] = deferredLoadResult;
		$tab_ModuleManager.$setupErrorHandler(Object).call(null, deferredLoadResult, moduleInfo.moduleName);
		var typeName = 'tab.' + moduleInfo.assemblyName + 'Factory';
		deferredLoadResult.always(function() {
			$tab_ModuleManager.$moduleTrackerInstance.moduleLoaded();
		});
		$tab_ModuleManager.$moduleTrackerInstance.loadRequested();
		$tab_ModuleManager.$loadDependencies(moduleInfo).done([function() {
			$tab_ModuleManager.$performTheLoad(arguments1, moduleInfo, typeName, deferredLoadResult);
		}]).fail([function(error) {
			var exception;
			var message = 'Failed to load dependencies for the module: ' + moduleInfo.moduleName;
			if (ss.isNullOrUndefined(error)) {
				exception = new ss.Exception(message);
			}
			else {
				var innerException = new ss.Exception(error.toString());
				exception = new ss.Exception(message, innerException);
			}
			deferredLoadResult.reject(exception);
		}]);
		return deferredLoadResult;
	};
	$tab_ModuleManager.$loadDependencies = function ModuleManager$LoadDependencies(moduleInfo) {
		var deferred = $.Deferred();
		if (!moduleInfo.get_hasDependencies()) {
			deferred.resolve();
		}
		else {
			var modulesToLoad = _.map(moduleInfo.get_dependencies(), function(dependency) {
				return dependency.moduleName;
			});
			var resolveDeferredAction = function() {
				deferred.resolve();
			};
			var errorHandler = function(error) {
				deferred.reject(error);
			};
			$tab_ModuleManager.loadModulesSequentially(resolveDeferredAction, errorHandler, modulesToLoad);
		}
		if (moduleInfo.get_hasDependenciesOnStylesheets()) {
			var $t1 = ss.getEnumerator(moduleInfo.get_stylesheetDependencies());
			try {
				while ($t1.moveNext()) {
					var cssFile = $t1.current();
					$tab_ModuleManager.loadCss(cssFile);
				}
			}
			finally {
				$t1.dispose();
			}
		}
		return deferred;
	};
	$tab_ModuleManager.$performTheLoad = function ModuleManager$PerformTheLoad(arguments1, moduleInfo, typeName, deferredLoadResult) {
		switch (moduleInfo.loadingMethod) {
			case 'asynchronous':
			case 'synchronous': {
				$tab_ModuleManager.$loadModule(Object).call(null, arguments1, moduleInfo, typeName, deferredLoadResult);
				break;
			}
			case 'alreadyLoaded':
			default: {
				if (moduleInfo.isRawJavaScriptModule) {
					$tab_ModuleManager.$waitForModuleReadyIfNecessaryAndResolveDeferred(moduleInfo, null, deferredLoadResult);
				}
				else {
					var qualifiedAssemblyName = $tab_ModuleManager.$jsPrefix + moduleInfo.assemblyName.toLowerCase();
					var asm = ss.load(qualifiedAssemblyName);
					var tinst = $tab_ModuleManager.$createInstance(ss.getType(typeName, asm), arguments1);
					$tab_ModuleManager.$waitForModuleReadyIfNecessaryAndResolveDeferred(moduleInfo, tinst, deferredLoadResult);
				}
				break;
			}
		}
	};
	$tab_ModuleManager.loadModulesSequentially = function ModuleManager$LoadModulesSequentially(allLoadedCallback, errorCallback, moduleNamesToLoad) {
		ss.Debug.assert(ss.isValue(moduleNamesToLoad), 'moduleNamesToLoad is null');
		moduleNamesToLoad = moduleNamesToLoad || [];
		var BeginIndex = 0;
		$tab_ModuleManager.load$1(moduleNamesToLoad[BeginIndex], []).done(function() {
			$tab_ModuleManager.$loadModulesSequentiallyInternal(moduleNamesToLoad, allLoadedCallback, 1);
		}).fail(function(error) {
			if (!ss.staticEquals(errorCallback, null)) {
				errorCallback(error);
			}
		});
	};
	$tab_ModuleManager.register = function(T) {
		return function ModuleManager$Register(name, moduleAssemblyName) {
			var resName = $tab_ModuleManager.$jsPrefix + name.toLowerCase();
			$tab_ModuleManager.$addModuleMapping(resName, (tsConfig.debugMode ? (resName + '.debug') : resName));
			var moduleInfo = new $tab_JsModuleInfo(name, moduleAssemblyName);
			$tab_ModuleManager.$moduleInfos[ss.getTypeFullName(T)] = moduleInfo;
			if (ss.keyExists($tab_ModuleManager.$modules, moduleInfo.moduleName)) {
				delete $tab_ModuleManager.$modules[moduleInfo.moduleName];
			}
			return new $tab_JsModuleConfigurationBuilder(moduleInfo);
		};
	};
	$tab_ModuleManager.registerDependencyModule = function ModuleManager$RegisterDependencyModule(minifiedModuleName, debugModuleName) {
		return $tab_ModuleManager.registerRawJsModule(debugModuleName, minifiedModuleName, debugModuleName);
	};
	$tab_ModuleManager.registerTypicalRawJsModule = function ModuleManager$RegisterTypicalRawJsModule(name) {
		return $tab_ModuleManager.registerRawJsModule(name, name + '.min', name);
	};
	$tab_ModuleManager.registerRawJsModule = function ModuleManager$RegisterRawJsModule(name, minifiedModuleName, debugModuleName) {
		$tab_ModuleManager.$addModuleMapping(name, (tsConfig.debugMode ? debugModuleName : minifiedModuleName));
		var moduleInfo = new $tab_JsModuleInfo(name, null);
		$tab_ModuleManager.$moduleInfos[name] = moduleInfo;
		if (ss.keyExists($tab_ModuleManager.$modules, moduleInfo.moduleName)) {
			delete $tab_ModuleManager.$modules[moduleInfo.moduleName];
		}
		return (new $tab_JsModuleConfigurationBuilder(moduleInfo)).andMarkAsRawJavaScriptModule();
	};
	$tab_ModuleManager.registerModulesLoadedCallback = function ModuleManager$RegisterModulesLoadedCallback(callback) {
		if (ss.staticEquals(callback, null)) {
			throw new ss.ArgumentNullException('callback');
		}
		$tab_ModuleManager.$moduleTrackerInstance.registerModulesLoadedCallback(callback);
	};
	$tab_ModuleManager.isCssLoaded = function ModuleManager$IsCssLoaded(src) {
		if ($tab_ModuleManager.$loadedCssFiles.has(src)) {
			return true;
		}
		var links = document.getElementsByTagName('link');
		for (var $t1 = 0; $t1 < links.length; $t1++) {
			var link = links[$t1];
			if (ss.referenceEquals(link.getAttribute('href'), src) && link.getAttribute('rel') === 'stylesheet') {
				return true;
			}
		}
		return false;
	};
	$tab_ModuleManager.isScriptLoaded = function ModuleManager$IsScriptLoaded(src) {
		var scripts = document.getElementsByTagName('script');
		for (var $t1 = 0; $t1 < scripts.length; $t1++) {
			var script = scripts[$t1];
			if (ss.referenceEquals(script.getAttribute('src'), src)) {
				return true;
			}
		}
		return false;
	};
	$tab_ModuleManager.loadCss = function ModuleManager$LoadCss(cssFileUrl) {
		if ($tab_ModuleManager.$loadedCssFiles.has(cssFileUrl)) {
			return;
		}
		$tab_ModuleManager.$loadedCssFiles.add(cssFileUrl);
		var styleElement = document.createElement('link');
		styleElement.setAttribute('type', 'text/css');
		styleElement.setAttribute('rel', 'stylesheet');
		styleElement.setAttribute('href', cssFileUrl);
		document.getElementsByTagName('head')[0].appendChild(styleElement);
	};
	$tab_ModuleManager.$loadModule = function(T) {
		return function ModuleManager$LoadModule(arguments1, moduleInfo, typeName, deferred) {
			var resourceToDownload = moduleInfo.moduleName.toLowerCase();
			if (!moduleInfo.isRawJavaScriptModule) {
				resourceToDownload = $tab_ModuleManager.$jsPrefix + resourceToDownload;
			}
			var loadingMethod = moduleInfo.loadingMethod;
			if (loadingMethod === 'synchronous') {
				$tab_BaseSession.get_waitHandler().showAndLock();
			}
			var hideGlass = function() {
				if (loadingMethod === 'synchronous') {
					$tab_BaseSession.get_waitHandler().unlock();
					$tab_BaseSession.get_waitHandler().nudge();
				}
			};
			var metricsContext = tabBootstrap.MetricsController.createContext('MDLOAD'.toString(), 32, 'module name: ' + moduleInfo.moduleName);
			requirejs([resourceToDownload], function(moduleExport) {
				var tinst;
				if (moduleInfo.isRawJavaScriptModule) {
					tinst = moduleExport;
				}
				else {
					var asm = ss.load(resourceToDownload);
					tinst = ss.cast($tab_ModuleManager.$createInstance(ss.getType(typeName, asm), arguments1), T);
				}
				if (moduleInfo.shouldExportResult) {
					if (typeof(window.self[moduleInfo.exportResultName]) === 'function') {
						throw new ss.Exception('Such function already defined: ' + moduleInfo.exportResultName);
					}
					window.self[moduleInfo.exportResultName] = moduleExport;
				}
				var wrappedLoadResult = $.Deferred();
				wrappedLoadResult.done(function() {
					deferred.resolve(tinst);
				}).fail(function(error) {
					deferred.reject(error);
				}).always(function() {
					metricsContext.dispose();
					hideGlass();
				});
				$tab_ModuleManager.$waitForModuleReadyIfNecessaryAndResolveDeferred(moduleInfo, tinst, wrappedLoadResult);
			}, function(error1) {
				hideGlass();
				$tab_ModuleManager.$handleRequireJsError(T).call(null, error1, deferred);
			});
		};
	};
	$tab_ModuleManager.$waitForModuleReadyIfNecessaryAndResolveDeferred = function ModuleManager$WaitForModuleReadyIfNecessaryAndResolveDeferred(moduleInfo, moduleContents, deferredLoadResult) {
		if (ss.staticEquals(moduleInfo.waitUntilModuleReadyFunc, null)) {
			deferredLoadResult.resolve(moduleContents);
		}
		else {
			var waitDeferred = moduleInfo.waitUntilModuleReadyFunc();
			waitDeferred.done([function() {
				deferredLoadResult.resolve(moduleContents);
			}]);
			waitDeferred.fail([function(error) {
				deferredLoadResult.reject(error);
			}]);
		}
	};
	$tab_ModuleManager.$getCurrentTime = function ModuleManager$GetCurrentTime() {
		var currentTime;
		try {
			currentTime = window.performance.now();
		}
		catch ($t1) {
			currentTime = (new Date()).getTime();
		}
		return currentTime;
	};
	$tab_ModuleManager.$loadModulesSequentiallyInternal = function ModuleManager$LoadModulesSequentiallyInternal(moduleNamesToLoad, allLoadedCallback, index) {
		if (index >= ss.count(moduleNamesToLoad)) {
			allLoadedCallback();
			return;
		}
		$tab_ModuleManager.load$1(ss.getItem(moduleNamesToLoad, index), []).done(function() {
			$tab_ModuleManager.$loadModulesSequentiallyInternal(moduleNamesToLoad, allLoadedCallback, index + 1);
		});
	};
	$tab_ModuleManager.$addModuleMapping = function ModuleManager$AddModuleMapping(from, to) {
		ss.Debug.assert(!ss.isNullOrEmptyString(from), '!string.IsNullOrEmpty(from)');
		ss.Debug.assert(!ss.isNullOrEmptyString(to), '!string.IsNullOrEmpty(to)');
		ss.Debug.assert(ss.isValue($tab_ModuleManager.$moduleMapping), 'ModuleMapping != null');
		$tab_ModuleManager.$moduleMapping[from] = to;
		if ($tab_ModuleManager.$configured) {
			requirejs.config({ map: ss.mkdict(['*', $tab_ModuleManager.$moduleMapping]) });
		}
	};
	$tab_ModuleManager.$ensureConfigured = function ModuleManager$EnsureConfigured() {
		if ($tab_ModuleManager.$configured) {
			return;
		}
		$tab_ModuleManager.$configured = true;
		var baseUrl;
		if (tsConfig.useLocalPaths) {
			baseUrl = tableau.util.adjustForLocalPaths(tsConfig.local_static_asset_prefix);
		}
		else {
			baseUrl = tsConfig.external_static_asset_prefix;
		}
		baseUrl = baseUrl + '/javascripts';
		requirejs.config({
			baseUrl: baseUrl,
			map: ss.mkdict(['*', $tab_ModuleManager.$moduleMapping]),
			onNodeCreated: function(node) {
				if (!tsConfig.useLocalPaths) {
					node.setAttribute('crossorigin', 'anonymous');
				}
			},
			waitSeconds: $tab_ModuleManager.$jsLoadTimeoutSeconds
		});
	};
	$tab_ModuleManager.$getJsModuleInfo = function ModuleManager$GetJsModuleInfo(moduleName) {
		var modName = $tab_ModuleManager.$moduleInfos[moduleName];
		if (ss.isNullOrUndefined(modName)) {
			throw new ss.Exception('Unknown module: ' + moduleName);
		}
		return modName;
	};
	$tab_ModuleManager.$handleRequireJsError = function(T) {
		return function ModuleManager$HandleRequireJsError(error, deferred) {
			ss.Debug.assert(ss.isValue(error), 'No error provided');
			var message = $tab_ModuleManager.$formatErrorMessage(error);
			var exception = new ss.Exception(message);
			deferred.reject(exception);
		};
	};
	$tab_ModuleManager.$formatErrorMessage = function ModuleManager$FormatErrorMessage(error) {
		var message = error.message;
		if (ss.isValue(error.requireModules) && error.requireModules.length > 0) {
			var modules = error.requireModules.join(',');
			message += '; Modules=' + modules;
		}
		if (!ss.isNullOrEmptyString(error.requireType)) {
			message += '; RequireType=' + error.requireType;
		}
		if (ss.isValue(error.originalError)) {
			message += '; Original=' + JSON.stringify(error.originalError);
		}
		return message;
	};
	$tab_ModuleManager.$setupErrorHandler = function(T) {
		return function ModuleManager$SetupErrorHandler(deferred, moduleName) {
			deferred.fail(function(arg) {
				var exception = arg;
				delete $tab_ModuleManager.$modules[moduleName];
				$tab_ModuleManager.reportException(exception);
			});
		};
	};
	$tab_ModuleManager.reportException = function ModuleManager$ReportException(exception) {
		tab.Log.get$1($tab_ModuleManager).error(exception.get_message(), []);
		throw exception;
	};
	$tab_ModuleManager.forceReconfigurationOnNextLoad = function ModuleManager$ForceReconfigurationOnNextLoad() {
		$tab_ModuleManager.$configured = false;
	};
	global.tab.ModuleManager = $tab_ModuleManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ModuleTracker
	var $tab_ModuleTracker = function() {
		this.$pendingModuleCount = 0;
		this.$loadCompleteCallbacks = [];
	};
	$tab_ModuleTracker.__typeName = 'tab.ModuleTracker';
	global.tab.ModuleTracker = $tab_ModuleTracker;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MovePointAnnotationCmd
	var $tab_MovePointAnnotationCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_MovePointAnnotationCmd$Response]).call(this);
	};
	$tab_MovePointAnnotationCmd.__typeName = 'tab.MovePointAnnotationCmd';
	global.tab.MovePointAnnotationCmd = $tab_MovePointAnnotationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MovePointAnnotationCmd.Response
	var $tab_MovePointAnnotationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_MovePointAnnotationCmd$Response.__typeName = 'tab.MovePointAnnotationCmd$Response';
	global.tab.MovePointAnnotationCmd$Response = $tab_MovePointAnnotationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MovePointAnnotationTargetCmd
	var $tab_MovePointAnnotationTargetCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_MovePointAnnotationTargetCmd$Response]).call(this);
	};
	$tab_MovePointAnnotationTargetCmd.__typeName = 'tab.MovePointAnnotationTargetCmd';
	global.tab.MovePointAnnotationTargetCmd = $tab_MovePointAnnotationTargetCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MovePointAnnotationTargetCmd.Response
	var $tab_MovePointAnnotationTargetCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_MovePointAnnotationTargetCmd$Response.__typeName = 'tab.MovePointAnnotationTargetCmd$Response';
	global.tab.MovePointAnnotationTargetCmd$Response = $tab_MovePointAnnotationTargetCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.MultipleFieldsModel
	var $tab_MultipleFieldsModel = function() {
		$tab_FieldModel.call(this, null);
		var f = { fn: '' };
		this.swapAndCopyPresModel(f);
	};
	$tab_MultipleFieldsModel.__typeName = 'tab.MultipleFieldsModel';
	global.tab.MultipleFieldsModel = $tab_MultipleFieldsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.NoopModelEventsHandler
	var $tab_NoopModelEventsHandler = function() {
	};
	$tab_NoopModelEventsHandler.__typeName = 'tab.NoopModelEventsHandler';
	$tab_NoopModelEventsHandler.get_noopContext = function NoopModelEventsHandler$get_NoopContext() {
		return $tab_NoopModelEventsHandler.$context.value();
	};
	global.tab.NoopModelEventsHandler = $tab_NoopModelEventsHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.NotificationHandlerLauncher
	var $tab_NotificationHandlerLauncher = function(id, createHandlerCallback) {
		this.$handler = null;
		this.$createHandlerCallback = null;
		this.$1$NotificationIdField = null;
		this.set_notificationId(id);
		this.$createHandlerCallback = createHandlerCallback;
	};
	$tab_NotificationHandlerLauncher.__typeName = 'tab.NotificationHandlerLauncher';
	$tab_NotificationHandlerLauncher.registerHandler = function NotificationHandlerLauncher$RegisterHandler(id, createHandlerCallback) {
		var createHandler = function() {
			var deferred = $.Deferred();
			deferred.resolve(createHandlerCallback());
			return deferred.promise();
		};
		$tab_NotificationHandlerLauncher.$registerNotificationHandler(id, createHandler);
	};
	$tab_NotificationHandlerLauncher.registerHandlerFromModule = function(TModuleInterface) {
		return function NotificationHandlerLauncher$RegisterHandlerFromModule(id, createHandlerCallback) {
			var createHandlerFromModule = function() {
				var waitHandler = $tab_BaseSession.get_waitHandler();
				waitHandler.addref(true, true);
				var deferred = $.Deferred();
				$tab_ModuleManager.load(TModuleInterface).call(null, []).done(function(module) {
					deferred.resolve(createHandlerCallback(module));
				}).always(function() {
					waitHandler.release();
				});
				return deferred.promise();
			};
			$tab_NotificationHandlerLauncher.$registerNotificationHandler(id, createHandlerFromModule);
		};
	};
	$tab_NotificationHandlerLauncher.registerHandlerFromJsModule = function NotificationHandlerLauncher$RegisterHandlerFromJsModule(moduleName, id, createHandlerCallback) {
		var createHandlerFromModule = function() {
			var deferred = $.Deferred();
			$tab_ModuleManager.load$1(moduleName, []).done(function(module) {
				deferred.resolve(createHandlerCallback(module));
			});
			return deferred.promise();
		};
		$tab_NotificationHandlerLauncher.$registerNotificationHandler(id, createHandlerFromModule);
	};
	$tab_NotificationHandlerLauncher.$registerNotificationHandler = function NotificationHandlerLauncher$RegisterNotificationHandler(id, handlerFunc) {
		var launcher = new $tab_NotificationHandlerLauncher(id, handlerFunc);
		$tab_ApplicationModel.get_holder().addEventBinding(function(newModel) {
			newModel.registerNotificationHandler(id, ss.mkdel(launcher, launcher.onNotify));
		}, function(oldModel) {
			oldModel.unRegisterNotificationHandler(id, ss.mkdel(launcher, launcher.onNotify));
		});
	};
	global.tab.NotificationHandlerLauncher = $tab_NotificationHandlerLauncher;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.NullHistory
	var $tab_NullHistory = function() {
	};
	$tab_NullHistory.__typeName = 'tab.NullHistory';
	global.tab.NullHistory = $tab_NullHistory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ObjectClientCommands
	var $tab_ObjectClientCommands = function() {
	};
	$tab_ObjectClientCommands.__typeName = 'tab.ObjectClientCommands';
	$tab_ObjectClientCommands.requestObjectContextMenu = function ObjectClientCommands$RequestObjectContextMenu(dataSourceName, objectId, uniqueFieldName, callback) {
		var $t1 = new $tab_BuildObjectContextMenuCmd();
		$t1.cmdParams['datasource'] = dataSourceName;
		$t1.cmdParams['uniqueName'] = uniqueFieldName;
		$t1.cmdParams['dataObjectModelObjectId'] = objectId;
		$t1.invoke().then(callback);
	};
	$tab_ObjectClientCommands.validateObjectCaption = function ObjectClientCommands$ValidateObjectCaption(newCaption, successCallback) {
		var errorInfoPresModel = {};
		errorInfoPresModel.isValid = (ss.isNullOrEmptyString(newCaption) ? false : true);
		successCallback(errorInfoPresModel);
	};
	$tab_ObjectClientCommands.editObjectCaption = function ObjectClientCommands$EditObjectCaption(objectId, newCaption) {
		var $t1 = new $tab_EditObjectCaptionCmd();
		$t1.cmdParams['objectCaption'] = newCaption;
		$t1.cmdParams['dataObjectModelObjectId'] = objectId;
		$t1.invoke();
	};
	global.tab.ObjectClientCommands = $tab_ObjectClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.OnlineAnalyticsClient
	var $tab_OnlineAnalyticsClient = function() {
		this.$initializePromise = null;
		this.$serverInfo = null;
		this.$siteId = 0;
		this.$siteLuid = '';
		this.$siteUrlName = '';
		this.$userId = 0;
		this.$telemetryForwarder = null;
		this.$logger = tab.Logger.getLogger($tab_OnlineAnalyticsClient, 4);
	};
	$tab_OnlineAnalyticsClient.__typeName = 'tab.OnlineAnalyticsClient';
	$tab_OnlineAnalyticsClient.add_onLogEvent = function OnlineAnalyticsClient$add_OnLogEvent(value) {
		$tab_OnlineAnalyticsClient.$1$OnLogEventField = ss.delegateCombine($tab_OnlineAnalyticsClient.$1$OnLogEventField, value);
	};
	$tab_OnlineAnalyticsClient.remove_onLogEvent = function OnlineAnalyticsClient$remove_OnLogEvent(value) {
		$tab_OnlineAnalyticsClient.$1$OnLogEventField = ss.delegateRemove($tab_OnlineAnalyticsClient.$1$OnLogEventField, value);
	};
	$tab_OnlineAnalyticsClient.get_telemetryEnabled = function OnlineAnalyticsClient$get_TelemetryEnabled() {
		return tab.FeatureFlags.isEnabled('OnlineAnalyticsPipelineEnabled') && !tsConfig.is_guest && !$tab_ApplicationModel.get_instance().get_isOffline();
	};
	$tab_OnlineAnalyticsClient.get_$instance = function OnlineAnalyticsClient$get_Instance() {
		if (ss.isNullOrUndefined($tab_OnlineAnalyticsClient.$instance)) {
			$tab_ModuleManager.registerRawJsModule($tab_OnlineAnalyticsClient.telemetryForwarderLibrary, $tab_OnlineAnalyticsClient.telemetryForwarderLibraryMinifiedLibrary, $tab_OnlineAnalyticsClient.telemetryForwarderLibrary).andExportResultAs('TypescriptTelemetryForwarder');
			$tab_OnlineAnalyticsClient.$instance = new $tab_OnlineAnalyticsClient();
		}
		return $tab_OnlineAnalyticsClient.$instance;
	};
	$tab_OnlineAnalyticsClient.logEventDeprecated = function OnlineAnalyticsClient$LogEventDeprecated(type, nameValuePairs) {
		if ($tab_OnlineAnalyticsClient.get_telemetryEnabled()) {
			ss.Debug.assert(!ss.isNullOrEmptyString(type), 'Expected a non-empty event type.');
			ss.Debug.assert(_.isArray(nameValuePairs), 'Expected an array of name/value pairs.');
			ss.Debug.assert(nameValuePairs.length % 2 === 0, 'Expected an even number of arguments i.e. name/value pairs.');
			$tab_OnlineAnalyticsClient.logEvent(type, ss.mkdict(nameValuePairs));
		}
	};
	$tab_OnlineAnalyticsClient.logEvent = function OnlineAnalyticsClient$LogEvent(type, properties) {
		if ($tab_OnlineAnalyticsClient.get_telemetryEnabled()) {
			ss.Debug.assert(!ss.isNullOrEmptyString(type), 'Expected a non-empty event type.');
			properties = properties || {};
			$tab_OnlineAnalyticsClient.get_$instance().$report(type, properties);
		}
	};
	$tab_OnlineAnalyticsClient.$validatePropertyName = function OnlineAnalyticsClient$ValidatePropertyName(name) {
		ss.Debug.assert(ss.isValue($tab_OnlineAnalyticsClient.$propertyNameExpression), 'PropertyNameExpression != null');
		var matches = name.match($tab_OnlineAnalyticsClient.$propertyNameExpression);
		ss.Debug.assert(ss.isValue(matches) && matches.length === 1, ss.formatString("Invalid property name, expected PascalCased name with optional numeric suffixes or CAPS: '{0}'", name));
		$tab_OnlineAnalyticsClient.$invalidPropertyNames.forEach(function(invalid) {
			ss.Debug.assert(ss.compareStrings(name, invalid, true) !== 0, ss.formatString("Invalid property name (ignore case): '{0}'", invalid));
		});
	};
	global.tab.OnlineAnalyticsClient = $tab_OnlineAnalyticsClient;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.OnlineAnalyticsMetricsLogger
	var $tab_OnlineAnalyticsMetricsLogger = function() {
	};
	$tab_OnlineAnalyticsMetricsLogger.__typeName = 'tab.OnlineAnalyticsMetricsLogger';
	$tab_OnlineAnalyticsMetricsLogger.isLoggerSupported = function OnlineAnalyticsMetricsLogger$IsLoggerSupported() {
		return $tab_OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('WebClientMetricsPutIntegration');
	};
	global.tab.OnlineAnalyticsMetricsLogger = $tab_OnlineAnalyticsMetricsLogger;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.OpenAutomatedInsightsModalCmd
	var $tab_OpenAutomatedInsightsModalCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_OpenAutomatedInsightsModalCmd$Response]).call(this);
	};
	$tab_OpenAutomatedInsightsModalCmd.__typeName = 'tab.OpenAutomatedInsightsModalCmd';
	global.tab.OpenAutomatedInsightsModalCmd = $tab_OpenAutomatedInsightsModalCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.OpenAutomatedInsightsModalCmd.Response
	var $tab_OpenAutomatedInsightsModalCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_OpenAutomatedInsightsModalCmd$Response.__typeName = 'tab.OpenAutomatedInsightsModalCmd$Response';
	global.tab.OpenAutomatedInsightsModalCmd$Response = $tab_OpenAutomatedInsightsModalCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.OrderClause
	var $tab_OrderClause = function() {
	};
	$tab_OrderClause.__typeName = 'tab.OrderClause';
	$tab_OrderClause.orderFieldFromString = function OrderClause$OrderFieldFromString(order) {
		try {
			return order;
		}
		catch ($t1) {
			return 'unknown';
		}
	};
	$tab_OrderClause.isInstanceOfType = function() {
		return true;
	};
	global.tab.OrderClause = $tab_OrderClause;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.OSInfo
	var $tab_OSInfo = function(description, architecture, family, version) {
		this.$1$DescriptionField = null;
		this.$1$ArchitectureField = null;
		this.$1$FamilyField = null;
		this.$1$VersionField = null;
		this.set_description(description);
		this.set_architecture(architecture);
		this.set_family(family);
		this.set_version(version);
	};
	$tab_OSInfo.__typeName = 'tab.OSInfo';
	global.tab.OSInfo = $tab_OSInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PaddingDefinition
	var $tab_PaddingDefinition = function() {
		$tab_SpacingDefinition.call(this, null, null, null, null, null);
	};
	$tab_PaddingDefinition.__typeName = 'tab.PaddingDefinition';
	$tab_PaddingDefinition.$ctor1 = function(style) {
		$tab_SpacingDefinition.call(this, style.padding, style.paddingLeft, style.paddingRight, style.paddingTop, style.paddingBottom);
	};
	global.tab.PaddingDefinition = $tab_PaddingDefinition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PageModel
	var $tab_PageModel = function(parent) {
		this.$zoneModel = null;
		this.$2$NewPageField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('pageModel'.toString(), null));
		this.$zoneModel = parent.get_zone();
	};
	$tab_PageModel.__typeName = 'tab.PageModel';
	global.tab.PageModel = $tab_PageModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PageOfItem
	var $tab_PageOfItem$1 = function(TItemType) {
		var $type = function() {
		};
		$type.isInstanceOfType = function() {
			return true;
		};
		ss.registerGenericClassInstance($type, $tab_PageOfItem$1, [TItemType], {}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_PageOfItem$1.__typeName = 'tab.PageOfItem$1';
	ss.initGenericClass($tab_PageOfItem$1, $asm, 1);
	global.tab.PageOfItem$1 = $tab_PageOfItem$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PageServerCommands
	var $tab_PageServerCommands = function() {
	};
	$tab_PageServerCommands.__typeName = 'tab.PageServerCommands';
	$tab_PageServerCommands.changePage = function PageServerCommands$ChangePage(pageNumber, visualId) {
		var cmdParams = $tab_PageServerCommands.$createChangePageParams(pageNumber, visualId);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'change-page' }, cmdParams), 'immediately', null, null);
	};
	$tab_PageServerCommands.syncedChangePage = function PageServerCommands$SyncedChangePage(pageModel, visualId, zoneId, pageNumber) {
		var cmdParams = $tab_PageServerCommands.$createSyncedChangePageParams(visualId, zoneId, pageNumber);
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'synced-change-page-server' }, cmdParams);
		var cc = new $tab_ClientCommand('immediately', function(st) {
		}, cmd, null, null);
		$tab_CommandController.SendCommand(cc);
	};
	$tab_PageServerCommands.toggleTrails = function PageServerCommands$ToggleTrails(visualId) {
		var cmdParams = $tab_PageServerCommands.$createToggleTrailsParams(visualId);
		$tab_ServerCommands.executeServerCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'page-toggle-trails' }, cmdParams), 'afterDelay', null, null);
	};
	$tab_PageServerCommands.$createChangePageParams = function PageServerCommands$CreateChangePageParams(pageNumber, visualId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['pageNumber'] = pageNumber;
		return cmdParams;
	};
	$tab_PageServerCommands.$createSyncedChangePageParams = function PageServerCommands$CreateSyncedChangePageParams(visualId, zoneId, pageNumber) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['zoneId'] = zoneId;
		cmdParams['pageNumber'] = pageNumber;
		return cmdParams;
	};
	$tab_PageServerCommands.$createToggleTrailsParams = function PageServerCommands$CreateToggleTrailsParams(visualId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		return cmdParams;
	};
	global.tab.PageServerCommands = $tab_PageServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Models.PaneIdModel
	var $tab_PaneIdModel = function(presModel) {
		this.$presModel = null;
		this.update(presModel);
	};
	$tab_PaneIdModel.__typeName = 'tab.PaneIdModel';
	$tab_PaneIdModel.$ctor1 = function(colIdx, rowIdx, pageIdx) {
		this.$presModel = null;
		this.$presModel = {};
		this.$presModel['columnIndex'] = colIdx;
		this.$presModel['rowIndex'] = rowIdx;
		if (pageIdx !== 0) {
			this.$presModel['pageIndex'] = pageIdx;
		}
	};
	global.tab.PaneIdModel = $tab_PaneIdModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommands.PanZoomCommandResult
	var $tab_PanZoomCommandResult = function() {
	};
	$tab_PanZoomCommandResult.__typeName = 'tab.PanZoomCommandResult';
	global.tab.PanZoomCommandResult = $tab_PanZoomCommandResult;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ClientCommands.PanZoomCommands
	var $tab_PanZoomCommands = function() {
	};
	$tab_PanZoomCommands.__typeName = 'tab.PanZoomCommands';
	$tab_PanZoomCommands.zoomWithAnchorPoint = function PanZoomCommands$ZoomWithAnchorPoint(regionPart, anchorPoint, zoomFactor, onLocalWorkCompleted, onZoomCompleted, sheetName) {
		var regionRect = new Object();
		var regionWrapper = $tab_VizRegionRectWrapper.create(regionRect);
		regionWrapper.set_r(regionPart);
		regionWrapper.set_x(anchorPoint.x);
		regionWrapper.set_y(anchorPoint.y);
		var cmdParams = {};
		cmdParams['vizRegionRect'] = regionRect;
		var anchorPointPresModel = tab.PointUtil.toPresModel(anchorPoint);
		cmdParams['zoomAnchorPoint'] = anchorPointPresModel;
		cmdParams['zoomFactor'] = zoomFactor;
		var visualId = $tab_ModelUtils.getVisualId(sheetName);
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var c = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'pane-anchor-zoom-server' }, cmdParams);
		var successCallback = function() {
			$tab_SheetSession.fireSheetDataChanged();
			onZoomCompleted('success');
		};
		var errorCallback = function() {
			onZoomCompleted('failure');
		};
		var localWork = function(handles) {
			return tab.RuntimeWebModule.proxy.localZoomFactorCommand(handles.get_VM(), handles.get_initialStore(), handles.get_finalStore(), anchorPointPresModel.x, anchorPointPresModel.y, zoomFactor);
		};
		$tab_PanZoomCommands.$invalidateVizAndSendCommand(c, 8, localWork, onLocalWorkCompleted, successCallback, errorCallback, sheetName);
	};
	$tab_PanZoomCommands.$zoom = function PanZoomCommands$Zoom(rect, paneResolverPoint, isZoomin, deferAPI, zoomFactor, onLocalWorkCompleted, onZoomCompleted, sheetName) {
		if (!tsConfig.allow_filter) {
			return;
		}
		var cmdParams = {};
		var dragRect = {};
		dragRect.x = rect['x'];
		dragRect.y = rect['y'];
		dragRect.x = Math.round(dragRect.x);
		dragRect.y = Math.round(dragRect.y);
		if (ss.isValue(rect['h']) && ss.isValue(rect['w'])) {
			dragRect.h = rect['h'];
			dragRect.w = rect['w'];
		}
		cmdParams['dragRect'] = dragRect;
		cmdParams['zoomIn'] = isZoomin;
		cmdParams['focus'] = false;
		cmdParams['zoomFactor'] = zoomFactor;
		if (ss.isValue(paneResolverPoint)) {
			paneResolverPoint = $tab_PanZoomCommands.$roundPoint(paneResolverPoint);
			var pointParam = tab.PointUtil.toPresModel(paneResolverPoint);
			cmdParams['paneResolverLocation'] = pointParam;
		}
		var visualId = $tab_ModelUtils.getVisualId(sheetName);
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var zoomCommand = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'pane-zoom' }, cmdParams);
		var successCallback = function(unused) {
			if (ss.isValue(deferAPI)) {
				deferAPI.setDeferLayoutUpdates(false);
			}
			tab.Logger.getLogger($tab_ViewSession, null).debug('Got zoom-' + (isZoomin ? 'in' : 'out') + ' response; firing SheetDataChanged', []);
			$tab_SheetSession.fireSheetDataChanged();
			onZoomCompleted('success');
		};
		var errorCallback = function(o) {
			onZoomCompleted('failure');
		};
		var localWork = function(handles) {
			return tab.RuntimeWebModule.proxy.localZoomCommand(handles.get_VM(), handles.get_initialStore(), handles.get_finalStore(), dragRect.x, dragRect.y, dragRect.w, dragRect.h, isZoomin);
		};
		$tab_PanZoomCommands.$invalidateVizAndSendCommand(zoomCommand, 8, localWork, onLocalWorkCompleted, successCallback, errorCallback, sheetName);
	};
	$tab_PanZoomCommands.pan = function PanZoomCommands$Pan(regionPart, point, delta, onLocalWorkCompleted, onPanCompleted, sheetName) {
		if (!tsConfig.allow_filter) {
			return;
		}
		var cmdParams = {};
		cmdParams['r'] = regionPart;
		cmdParams['panLocation'] = tab.PointUtil.toPresModel($tab_PanZoomCommands.$roundPoint(point));
		cmdParams['panAmount'] = tab.PointUtil.toPresModel($tab_PanZoomCommands.$roundPoint(delta));
		var visualId = $tab_ModelUtils.getVisualId(sheetName);
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var c = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'pane-pan-server' }, cmdParams);
		var successCallback = function() {
			tab.Logger.getLogger($tab_ViewSession, null).debug('Got pan response; firing SheetDataChanged', []);
			$tab_SheetSession.fireSheetDataChanged();
			onPanCompleted('success');
		};
		var errorCallback = function(o) {
			onPanCompleted('failure');
		};
		var localWork = function(handles) {
			var roundedDelta = $tab_PanZoomCommands.$roundPoint(delta);
			return tab.RuntimeWebModule.proxy.localPanCommand(handles.get_VM(), handles.get_initialStore(), handles.get_finalStore(), roundedDelta.x, roundedDelta.y);
		};
		$tab_PanZoomCommands.$invalidateVizAndSendCommand(c, 7, localWork, onLocalWorkCompleted, successCallback, errorCallback, sheetName);
	};
	$tab_PanZoomCommands.$invalidateVizAndSendCommand = function PanZoomCommands$InvalidateVizAndSendCommand(c, commandId, localWork, onLocalWorkCompleted, onSuccess, onFailure, sheetName) {
		var visualModel = $tab_ModelUtils.getVisualModel($tab_ApplicationModel.get_instance(), sheetName);
		var shouldDoLocalCommand = visualModel.shouldDoLocalCommand();
		var runtimeReady = visualModel.get_runtimeReady();
		var doLocalWork = function(t) {
			visualModel.updateRuntimeHandles(t, commandId, localWork).done([function() {
				onLocalWorkCompleted();
			}]);
		};
		var mc = tabBootstrap.MetricsController.createContext('RTLPRC'.toString(), 32, null);
		var cc = new $tab_ClientCommand('none', function(t1) {
			$tab_ModelUtils.setVisualValidAndUpToDateStateOnModel(t1, visualModel, false);
			if (shouldDoLocalCommand && runtimeReady) {
				doLocalWork(t1);
				mc.dispose();
				$tab_RuntimeTelemetry.logVizUsage$1(c.commandName, mc.elapsedMS());
			}
		}, c, onSuccess, onFailure);
		$tab_CommandController.SendCommand(cc);
		if (shouldDoLocalCommand && !runtimeReady) {
			doLocalWork(null);
		}
	};
	$tab_PanZoomCommands.$roundPoint = function PanZoomCommands$RoundPoint(p) {
		var toRet = p;
		if (ss.isValue(p)) {
			toRet = { x: Math.round(p.x), y: Math.round(p.y) };
		}
		return toRet;
	};
	$tab_PanZoomCommands.zoomDoubleClick = function PanZoomCommands$ZoomDoubleClick(paneResolverPoint, isZoomin, deferAPI, zoomFactor, onLocalWorkCompleted, onZoomCompleted, sheetName) {
		deferAPI.set_isZoomin(isZoomin);
		$tab_PanZoomCommands.$zoom(paneResolverPoint, paneResolverPoint, isZoomin, deferAPI, zoomFactor, onLocalWorkCompleted, onZoomCompleted, sheetName);
	};
	$tab_PanZoomCommands.zoomIn = function PanZoomCommands$ZoomIn(rect, paneResolverPoint, zoomFactor, onLocalWorkCompleted, onZoomCompleted, sheetName) {
		$tab_PanZoomCommands.$zoom(rect, paneResolverPoint, true, null, zoomFactor, onLocalWorkCompleted, onZoomCompleted, sheetName);
	};
	$tab_PanZoomCommands.zoomOut = function PanZoomCommands$ZoomOut(paneResolverPoint, zoomFactor, onLocalWorkCompleted, onZoomCompleted, sheetName) {
		$tab_PanZoomCommands.$zoom(paneResolverPoint, paneResolverPoint, false, null, zoomFactor, onLocalWorkCompleted, onZoomCompleted, sheetName);
	};
	$tab_PanZoomCommands.requestRestoreFixedAxes = function PanZoomCommands$RequestRestoreFixedAxes(visualId) {
		if (!tsConfig.allow_filter) {
			return;
		}
		var successCallback = function(presModel) {
			$tab_BaseSession.fireStateChanged(presModel);
		};
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var c = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'restore-fixed-axes' }, cmdParams);
		$tab_CommandController.SendCommand(new $tab_RemoteClientCommand(c, 'immediately', successCallback, function() {
		}));
	};
	global.tab.PanZoomCommands = $tab_PanZoomCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ParameterClientCommands
	var $tab_ParameterClientCommands = function() {
	};
	$tab_ParameterClientCommands.__typeName = 'tab.ParameterClientCommands';
	$tab_ParameterClientCommands.getParameterControlMenu = function ParameterClientCommands$GetParameterControlMenu(parameterName, callback) {
		var $t1 = new $tab_GetParameterControlMenuCmd();
		$t1.cmdParams['globalFieldName'] = parameterName;
		$t1.invoke().done(callback);
	};
	global.tab.ParameterClientCommands = $tab_ParameterClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ParameterCtrlModel
	var $tab_ParameterCtrlModel = function(parent) {
		this.$frame = null;
		this.$2$NewParameterCtrlField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('parameterControl'.toString(), null));
	};
	$tab_ParameterCtrlModel.__typeName = 'tab.ParameterCtrlModel';
	global.tab.ParameterCtrlModel = $tab_ParameterCtrlModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ParameterServerCommands
	var $tab_ParameterServerCommands = function() {
	};
	$tab_ParameterServerCommands.__typeName = 'tab.ParameterServerCommands';
	$tab_ParameterServerCommands.setParameterValue = function ParameterServerCommands$SetParameterValue(fieldName, value, forceUseUSLocale) {
		$tab_ParameterServerCommands.setParameterValue$1(fieldName, value, forceUseUSLocale, null, null);
	};
	$tab_ParameterServerCommands.setParameterValue$1 = function ParameterServerCommands$SetParameterValue(fieldName, value, forceUseUSLocale, successCallback, errorCallback) {
		var cmdParams = $tab_ParameterServerCommands.$createSetParameterValueParams(fieldName, value, ss.coalesce(forceUseUSLocale, false));
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-parameter-value' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', successCallback, errorCallback);
	};
	$tab_ParameterServerCommands.$createSetParameterValueParams = function ParameterServerCommands$CreateSetParameterValueParams(fieldName, value, forceUseUSLocale) {
		var cmdParams = {};
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['valueString'] = value;
		cmdParams['useUsLocale'] = forceUseUSLocale;
		return cmdParams;
	};
	global.tab.ParameterServerCommands = $tab_ParameterServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PercentTotalTableCalcModel
	var $tab_PercentTotalTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('percentTotalTableCalcPresModel'.toString(), null));
	};
	$tab_PercentTotalTableCalcModel.__typeName = 'tab.PercentTotalTableCalcModel';
	global.tab.PercentTotalTableCalcModel = $tab_PercentTotalTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PerformTabbedAuthenticationCmd
	var $tab_PerformTabbedAuthenticationCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_PerformTabbedAuthenticationCmd$Response]).call(this);
	};
	$tab_PerformTabbedAuthenticationCmd.__typeName = 'tab.PerformTabbedAuthenticationCmd';
	$tab_PerformTabbedAuthenticationCmd.get_commandName = function PerformTabbedAuthenticationCmd$get_CommandName() {
		return 'perform-tabbed-authentication';
	};
	global.tab.PerformTabbedAuthenticationCmd = $tab_PerformTabbedAuthenticationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PerformTabbedAuthenticationCmd.Response
	var $tab_PerformTabbedAuthenticationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_PerformTabbedAuthenticationCmd$Response.__typeName = 'tab.PerformTabbedAuthenticationCmd$Response';
	global.tab.PerformTabbedAuthenticationCmd$Response = $tab_PerformTabbedAuthenticationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PerformTabbedAuthenticationCommand
	var $tab_PerformTabbedAuthenticationCommand = function() {
		$tab_PerformTabbedAuthenticationCmd.call(this);
	};
	$tab_PerformTabbedAuthenticationCommand.__typeName = 'tab.PerformTabbedAuthenticationCommand';
	global.tab.PerformTabbedAuthenticationCommand = $tab_PerformTabbedAuthenticationCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PermissionManager
	var $tab_PermissionManager = function() {
	};
	$tab_PermissionManager.__typeName = 'tab.PermissionManager';
	$tab_PermissionManager.buildCommandPermission = function PermissionManager$BuildCommandPermission() {
		var types = [];
		if (tsConfig.allow_filter) {
			types.push(11);
			types.push(12);
			types.push(10);
			types.push(2);
			types.push(13);
			types.push(4);
			types.push(5);
			types.push(6);
		}
		if (tsConfig.allow_select) {
			types.push(1);
			types.push(9);
			types.push(23);
		}
		if (tsConfig.allow_sheetlink) {
			types.push(8);
		}
		if ((tsConfig.allow_view_underlying || tsConfig.allow_summary) && !tsConfig.previewMode) {
			types.push(7);
		}
		if (tsConfig.is_authoring) {
			types.push(15);
			types.push(17);
			types.push(18);
			types.push(19);
			types.push(20);
			types.push(16);
			if (tab.FeatureFlags.isEnabled('AIExplainThisMark_AuthoringMode') && tsConfig.allow_view_underlying) {
				types.push(24);
				types.push(25);
			}
			if (!tsConfig.is_mobile) {
				types.push(21);
			}
			types.push(22);
		}
		else if (tab.FeatureFlags.isEnabled('AIExplainThisMark_ViewingMode') && tsConfig.allow_view_underlying) {
			types.push(24);
			types.push(25);
		}
		return new $tab_CommandPermission(types);
	};
	$tab_PermissionManager.filterCommands = function PermissionManager$FilterCommands(commands, permission) {
		for (var i = commands.length - 1; i >= 0; i--) {
			if (!permission.test(commands[i])) {
				tab.Log.get$1($tab_PermissionManager).debug('Permission denied for %o', [commands[i]]);
				ss.removeAt(commands, i);
			}
		}
	};
	global.tab.PermissionManager = $tab_PermissionManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PillModel
	var $tab_PillModel = function(parent, index) {
		this.$column = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString(), null));
	};
	$tab_PillModel.__typeName = 'tab.PillModel';
	global.tab.PillModel = $tab_PillModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PingSessionCmd
	var $tab_PingSessionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_PingSessionCmd$Response]).call(this);
	};
	$tab_PingSessionCmd.__typeName = 'tab.PingSessionCmd';
	global.tab.PingSessionCmd = $tab_PingSessionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PingSessionCmd.Response
	var $tab_PingSessionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_PingSessionCmd$Response.__typeName = 'tab.PingSessionCmd$Response';
	global.tab.PingSessionCmd$Response = $tab_PingSessionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.PlatformInfo
	var $tab_PlatformInfo = function() {
		this.$1$DescriptionField = null;
		this.$1$LayoutField = null;
		this.$1$ManufacturerField = null;
		this.$1$NameField = null;
		this.$1$PrereleaseField = null;
		this.$1$ProductField = null;
		this.$1$UserAgentField = null;
		this.$1$VersionField = null;
		this.$1$OSField = null;
	};
	$tab_PlatformInfo.__typeName = 'tab.PlatformInfo';
	$tab_PlatformInfo.$loadPlatformLibrary = function PlatformInfo$LoadPlatformLibrary() {
		if (ss.isNullOrUndefined($tab_PlatformInfo.$platformLibraryPromise)) {
			$tab_ModuleManager.registerRawJsModule($tab_PlatformInfo.platformLibrary, $tab_PlatformInfo.platformMinifiedLibrary, $tab_PlatformInfo.platformLibrary).andExportResultAs('Platform');
			$tab_PlatformInfo.$platformLibraryPromise = $tab_ModuleManager.load$1($tab_PlatformInfo.platformLibrary, []);
		}
		return $tab_PlatformInfo.$platformLibraryPromise;
	};
	$tab_PlatformInfo.getInfo = function PlatformInfo$GetInfo() {
		return $tab_PlatformInfo.$platformInfoPromise || ($tab_PlatformInfo.$platformInfoPromise = $tab_PlatformInfo.$getPlatformInfoPromise());
	};
	$tab_PlatformInfo.$getPlatformInfoPromise = function PlatformInfo$GetPlatformInfoPromise() {
		var deferred = $.Deferred();
		$tab_PlatformInfo.$loadPlatformLibrary().then(function() {
			var platformInfo = new $tab_PlatformInfo();
			platformInfo.set_description(platform.description);
			platformInfo.set_layout(platform.layout);
			platformInfo.set_manufacturer(platform.manufacturer);
			platformInfo.set_name(platform.name);
			platformInfo.set_prerelease(platform.prerelease);
			platformInfo.set_product(platform.product);
			platformInfo.set_userAgent(platform.ua);
			platformInfo.set_version(platform.version);
			var architecture = platform.os.architecture;
			var osInfo = new $tab_OSInfo(platform.os.toString(), (ss.isValue(architecture) ? architecture.toString() : ''), platform.os.family, platform.os.version);
			platformInfo.set_OS(osInfo);
			deferred.resolve(platformInfo);
		}, function() {
			$tab_PlatformInfo.$errorLogger.error('Could not load library when fetching platform info.', []);
			deferred.reject();
		});
		return deferred;
	};
	global.tab.PlatformInfo = $tab_PlatformInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.PluginContractModules
	var $tab_PluginContractModules = function() {
	};
	$tab_PluginContractModules.__typeName = 'tab.PluginContractModules';
	global.tab.PluginContractModules = $tab_PluginContractModules;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.PluginDialogNotificationHandler
	var $tab_PluginDialogNotificationHandler = function(pluginType, notificationId, dialogParent, zIndexOverride) {
		this.$pluginType = null;
		this.$dialogParent = null;
		this.$plugin = null;
		this.$root = null;
		this.$zIndexOverride = null;
		this.$1$StopNotifyingField = null;
		this.$1$NotificationIdField = null;
		this.$pluginType = pluginType;
		this.set_notificationId(notificationId);
		this.$dialogParent = dialogParent;
		this.$zIndexOverride = zIndexOverride;
	};
	$tab_PluginDialogNotificationHandler.__typeName = 'tab.PluginDialogNotificationHandler';
	global.tab.PluginDialogNotificationHandler = $tab_PluginDialogNotificationHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.PluginPresentationLayer
	var $tab_PluginPresentationLayer = function() {
		this.$disposables = new tab.DisposableHolder();
	};
	$tab_PluginPresentationLayer.__typeName = 'tab.PluginPresentationLayer';
	$tab_PluginPresentationLayer.get_instance = function PluginPresentationLayer$get_Instance() {
		$tab_PluginPresentationLayer.$instance = $tab_PluginPresentationLayer.$instance || new $tab_PluginPresentationLayer();
		return $tab_PluginPresentationLayer.$instance;
	};
	$tab_PluginPresentationLayer.set_instance = function PluginPresentationLayer$set_Instance(value) {
		$tab_PluginPresentationLayer.$instance = value;
	};
	global.tab.PluginPresentationLayer = $tab_PluginPresentationLayer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.PluginTelemetry
	var $tab_PluginTelemetry = function() {
	};
	$tab_PluginTelemetry.__typeName = 'tab.PluginTelemetry';
	$tab_PluginTelemetry.get_instance = function PluginTelemetry$get_Instance() {
		$tab_PluginTelemetry.$instance = $tab_PluginTelemetry.$instance || new $tab_PluginTelemetry();
		return $tab_PluginTelemetry.$instance;
	};
	$tab_PluginTelemetry.set_instance = function PluginTelemetry$set_Instance(value) {
		$tab_PluginTelemetry.$instance = value;
	};
	global.tab.PluginTelemetry = $tab_PluginTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresentationModel
	var $tab_PresentationModel = function() {
	};
	$tab_PresentationModel.__typeName = 'tab.PresentationModel';
	$tab_PresentationModel.commandResultByName = function PresentationModel$CommandResultByName(response, c) {
		ss.Debug.assert(ss.isValue(response['vqlCmdResponse'.toString()]), 'The server response is not a VqlCommandResponseRoot object.');
		var fullName = $tab_CommandSerializer.buildQualifiedCommandName(c.commandNamespace, c.commandName);
		var commandResponse = response['vqlCmdResponse'.toString()];
		var commandResults = commandResponse.cmdResultList;
		for (var $t1 = 0; $t1 < commandResults.length; $t1++) {
			var result = commandResults[$t1];
			if (ss.referenceEquals(result.commandName, fullName)) {
				return result.commandReturn;
			}
		}
		return null;
	};
	$tab_PresentationModel.fromCommand = function PresentationModel$FromCommand(response, c) {
		var root = $tab_PresentationModel.commandResultByName(response, c);
		if (!c.preserveRootResult && ss.isValue(root) && ss.getKeyCount(root) === 1 && !ss.keyExists(root, 'commandRedirectType'.toString())) {
			var $t1 = new ss.ObjectEnumerator(root);
			try {
				while ($t1.moveNext()) {
					var entry = $t1.current();
					return entry.value;
				}
			}
			finally {
				$t1.dispose();
			}
		}
		else {
			return root;
		}
		return null;
	};
	$tab_PresentationModel.getConnectionAttemptInfo = function PresentationModel$GetConnectionAttemptInfo(response) {
		var commandResponse = response['vqlCmdResponse'.toString()];
		ss.Debug.assert(ss.isValue(commandResponse), 'The server response is not a VqlCommandResponseRoot object.');
		if (ss.isValue(commandResponse.layoutStatus)) {
			var layoutStatus = commandResponse.layoutStatus;
			if (ss.isValue(layoutStatus.connectionAttemptInfo) && layoutStatus.connectionAttemptInfo.dataSourceConnectionAttemptInfos.length > 0) {
				return layoutStatus.connectionAttemptInfo;
			}
		}
		return null;
	};
	$tab_PresentationModel.ensurePath = function PresentationModel$EnsurePath(sourcePM, destPM, path) {
		var currentDestPM = destPM;
		var currentSourcePM = sourcePM;
		var nextPM;
		var nextSourcePM;
		var pathList = path.get_pathList();
		for (var i = 0, len = pathList.length; i < len; i++) {
			var currentItem = pathList[i];
			var currName = currentItem.name;
			nextPM = currentDestPM[currName];
			nextSourcePM = (ss.isValue(currentSourcePM) ? currentSourcePM[currName] : null);
			if (!ss.isValue(nextPM)) {
				var last = i === len - 1;
				var newPM = null;
				if (currentItem.type === 1 && ss.isValue(nextSourcePM)) {
					var sourceArray = ss.cast(nextSourcePM, Array);
					var newArray = [];
					for (var index = 0; index < sourceArray.length; index++) {
						newArray[index] = tab.MiscUtil.cloneObject(sourceArray[index]);
					}
					newPM = newArray;
				}
				else if (!last && ss.isValue(nextSourcePM)) {
					newPM = $tab_PresentationModel.cloneObjWithScalarsOnly(nextSourcePM);
				}
				else if (currentItem.type === 1) {
					newPM = [];
				}
				else {
					newPM = new Object();
				}
				currentDestPM[currName] = newPM;
			}
			currentDestPM = currentDestPM[currName];
			currentSourcePM = nextSourcePM;
		}
		return currentDestPM;
	};
	$tab_PresentationModel.insertAtPath = function PresentationModel$InsertAtPath(sourcePM, destPM, path, newPM) {
		$tab_PresentationModel.ensurePath(sourcePM, destPM, path);
		$tab_PresentationModel.$setPath(destPM, path, newPM);
	};
	$tab_PresentationModel.cloneObjWithScalarsOnly = function PresentationModel$CloneObjWithScalarsOnly(sourceObj) {
		if (!_.isObject(sourceObj)) {
			return sourceObj;
		}
		var clone = new Object();
		var sourcePMDict = sourceObj;
		var $t1 = Object.keys(sourcePMDict);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var sourceKey = $t1[$t2];
			var elt = sourcePMDict[sourceKey];
			if (!_.isObject(elt)) {
				clone[sourceKey] = elt;
			}
		}
		return clone;
	};
	$tab_PresentationModel.$setPath = function PresentationModel$SetPath(pm, path, newPM) {
		if (path.get_pathList().length === 0) {
			var newPmKeys = newPM;
			var $t1 = new ss.ObjectEnumerator(newPmKeys);
			try {
				while ($t1.moveNext()) {
					var p = $t1.current();
					pm[p.key] = p.value;
				}
			}
			finally {
				$t1.dispose();
			}
		}
		else {
			var i, len;
			var currentPresModel = pm;
			var pathList = path.get_pathList();
			for (i = 0, len = pathList.length; i < len - 1; i++) {
				currentPresModel = currentPresModel[pathList[i].name];
			}
			currentPresModel[pathList[len - 1].name] = newPM;
		}
	};
	global.tab.PresentationModel = $tab_PresentationModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresModelPath
	var $tab_PresModelPath = function() {
		this.$pathAsString = null;
		this.$path = [];
	};
	$tab_PresModelPath.__typeName = 'tab.PresModelPath';
	global.tab.PresModelPath = $tab_PresModelPath;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresModelPathItem
	var $tab_PresModelPathItem = function(name, type) {
		this.name = null;
		this.type = 0;
		this.name = name;
		this.type = ss.coalesce(type, 0);
	};
	$tab_PresModelPathItem.__typeName = 'tab.PresModelPathItem';
	global.tab.PresModelPathItem = $tab_PresModelPathItem;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.PresModelPathItemType
	var $tab_PresModelPathItemType = function() {
	};
	$tab_PresModelPathItemType.__typeName = 'tab.PresModelPathItemType';
	global.tab.PresModelPathItemType = $tab_PresModelPathItemType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ProgressiveLoader
	var $tab_ProgressiveLoader = function() {
		this.$deferredZonesByPriority = null;
		this.$vizZones = null;
		this.$timer = null;
		this.$viewportRect = null;
		this.$offscreenVizZones = null;
		this.$checkedForNonVisibleZones = false;
		this.$zoneModels = null;
		this.$pendingZoneContentModels = null;
		this.$zoneTypeMap = {};
		this.$updateRoot = null;
		this.$webClientMetric = null;
		this.$1$ProgressiveLoadField = null;
		this.$1$ProgressiveLoadCompleteField = null;
	};
	$tab_ProgressiveLoader.__typeName = 'tab.ProgressiveLoader';
	$tab_ProgressiveLoader.get_progressiveLoadEnabled = function ProgressiveLoader$get_ProgressiveLoadEnabled() {
		return !tsConfig.is_authoring && !tsConfig.isPublic;
	};
	$tab_ProgressiveLoader.cloneZone = function ProgressiveLoader$CloneZone(zone) {
		if (ss.isNullOrUndefined(zone)) {
			return zone;
		}
		var presModelHolder = zone.presModelHolder;
		zone.presModelHolder = null;
		var clone = tab.MiscUtil.cloneObject(zone);
		clone.presModelHolder = presModelHolder;
		zone.presModelHolder = presModelHolder;
		return clone;
	};
	$tab_ProgressiveLoader.removeZoneContent = function ProgressiveLoader$RemoveZoneContent(zone) {
		if (ss.isValue(zone)) {
			var zoneDict = zone;
			delete zoneDict['presModelHolder'];
		}
		return zone;
	};
	$tab_ProgressiveLoader.getZoneRoot = function ProgressiveLoader$GetZoneRoot(appModel) {
		if (ss.isNullOrUndefined(appModel) || ss.isNullOrUndefined(appModel.workbookPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel)) {
			return null;
		}
		var zoneRoot = appModel.workbookPresModel.dashboardPresModel;
		if (zoneRoot.isStory) {
			var zones = zoneRoot.zones;
			zoneRoot = null;
			var $t1 = _.keys(zones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				var zonePM = zones[key];
				if (ss.isValue(zonePM.zoneCommon) && zonePM.zoneCommon.zoneType !== 'flipboard') {
					continue;
				}
				var flipboardPM = $tab_ZoneModel.getContent(zonePM, 'flipboard');
				if (ss.isNullOrUndefined(flipboardPM) || ss.isNullOrUndefined(flipboardPM.storyPoints)) {
					return null;
				}
				var storyPointPM = flipboardPM.storyPoints[flipboardPM.activeStoryPointId.toString()];
				if (ss.isNullOrUndefined(storyPointPM)) {
					return null;
				}
				zoneRoot = storyPointPM.dashboardPresModel;
				break;
			}
		}
		return zoneRoot;
	};
	$tab_ProgressiveLoader.$buildZoneTypeMap = function ProgressiveLoader$BuildZoneTypeMap(dashboardPresModel) {
		var result = {};
		if (ss.isValue(dashboardPresModel) && ss.isValue(dashboardPresModel.zones)) {
			var $t1 = _.values(dashboardPresModel.zones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zonePresModel = $t1[$t2];
				if (ss.isValue(zonePresModel) && ss.isValue(zonePresModel.zoneCommon)) {
					result[zonePresModel.zoneId] = zonePresModel.zoneCommon.zoneType;
				}
			}
		}
		return result;
	};
	$tab_ProgressiveLoader.$validateZonesPath = function ProgressiveLoader$ValidateZonesPath(appModel) {
		if (ss.isNullOrUndefined(appModel)) {
			return false;
		}
		var workbookModel = appModel.workbookPresModel;
		if (ss.isNullOrUndefined(workbookModel)) {
			return false;
		}
		var dashModel = workbookModel.dashboardPresModel;
		if (ss.isNullOrUndefined(dashModel)) {
			return false;
		}
		var zonesModel = dashModel.zones;
		if (ss.isNullOrUndefined(zonesModel)) {
			return false;
		}
		return true;
	};
	$tab_ProgressiveLoader.$initStaticLookups = function ProgressiveLoader$InitStaticLookups() {
		if (ss.isValue($tab_ProgressiveLoader.$zonePriorityMap)) {
			return;
		}
		$tab_ProgressiveLoader.$zonePriorityMap = {};
		$tab_ProgressiveLoader.$zonePriorityMap['flipboard-nav'] = 1;
		$tab_ProgressiveLoader.$zonePriorityMap['flipboard'] = 1;
		$tab_ProgressiveLoader.$zonePriorityMap['viz'] = 2;
		$tab_ProgressiveLoader.$zonePriorityMap['color'] = 3;
		$tab_ProgressiveLoader.$zonePriorityMap['shape'] = 3;
		$tab_ProgressiveLoader.$zonePriorityMap['size'] = 3;
		$tab_ProgressiveLoader.$zonePriorityMap['map'] = 3;
		$tab_ProgressiveLoader.$zonePriorityMap['filter'] = 4;
		$tab_ProgressiveLoader.$zonePriorityMap['highlighter'] = 4;
		$tab_ProgressiveLoader.$zonePriorityMap['paramctrl'] = 4;
		$tab_ProgressiveLoader.$zonePriorityMap['current-page'] = 4;
		$tab_ProgressiveLoader.$zonePriorityMap['web'] = 5;
		$tab_ProgressiveLoader.$zonePriorityMap['bitmap'] = 5;
		$tab_ProgressiveLoader.$zonePriorityMap['dashboard-object'] = 5;
		$tab_ProgressiveLoader.$priorityBatchSize = {};
		$tab_ProgressiveLoader.$priorityBatchSize[1] = { item1: -1, item2: 1 };
		$tab_ProgressiveLoader.$priorityBatchSize[2] = { item1: 1, item2: 0.33 };
		$tab_ProgressiveLoader.$priorityBatchSize[3] = { item1: 3, item2: 0.33 };
		$tab_ProgressiveLoader.$priorityBatchSize[4] = { item1: 3, item2: 0.33 };
		$tab_ProgressiveLoader.$priorityBatchSize[5] = { item1: -1, item2: 1 };
		$tab_ProgressiveLoader.$priorityBatchSize[6] = { item1: -1, item2: 1 };
	};
	$tab_ProgressiveLoader.$isDependentZoneType = function ProgressiveLoader$IsDependentZoneType(type) {
		switch (type) {
			case 'color':
			case 'size':
			case 'shape':
			case 'filter': {
				return true;
			}
		}
		return false;
	};
	$tab_ProgressiveLoader.$cloneOrReturnDefault = function ProgressiveLoader$CloneOrReturnDefault(obj, defaultObj) {
		if (ss.isNullOrUndefined(obj)) {
			return defaultObj;
		}
		return $tab_PresentationModel.cloneObjWithScalarsOnly(obj);
	};
	global.tab.ProgressiveLoader = $tab_ProgressiveLoader;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuantitativeColorLegendModel
	var $tab_QuantitativeColorLegendModel = function(parent, contentType) {
		this.$2$LegendChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(contentType, null));
	};
	$tab_QuantitativeColorLegendModel.__typeName = 'tab.QuantitativeColorLegendModel';
	global.tab.QuantitativeColorLegendModel = $tab_QuantitativeColorLegendModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuantitativeFilterData
	var $tab_QuantitativeFilterData = function(sheets, filterField, currentMinVal, currentMaxVal, previousMinVal, previousMaxVal) {
		this.$targetSheets = null;
		this.$fieldName = null;
		this.$currentMinVal = null;
		this.$currentMaxVal = null;
		this.$previousMinVal = null;
		this.$previousMaxVal = null;
		this.$targetSheets = sheets;
		this.$fieldName = filterField;
		this.$currentMinVal = currentMinVal;
		this.$currentMaxVal = currentMaxVal;
		this.$previousMinVal = previousMinVal;
		this.$previousMaxVal = previousMaxVal;
	};
	$tab_QuantitativeFilterData.__typeName = 'tab.QuantitativeFilterData';
	global.tab.QuantitativeFilterData = $tab_QuantitativeFilterData;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuickFilterDateFormatUtil
	var $tab_QuickFilterDateFormatUtil = function() {
	};
	$tab_QuickFilterDateFormatUtil.__typeName = 'tab.QuickFilterDateFormatUtil';
	$tab_QuickFilterDateFormatUtil.$truncLevelRequiresDateSelection = function QuickFilterDateFormatUtil$TruncLevelRequiresDateSelection(aggType) {
		return aggType === 'trunc-day' || aggType === 'trunc-week' || aggType === 'trunc-month' || aggType === 'trunc-qtr' || aggType === 'trunc-year';
	};
	$tab_QuickFilterDateFormatUtil.getDateTimeFormatMode = function QuickFilterDateFormatUtil$GetDateTimeFormatMode(values, aggType, format, previousShowMode) {
		if (ss.isNullOrUndefined(format) || ss.isNullOrUndefined(format.isAutoFormat) || !format.isAutoFormat) {
			return 0;
		}
		if ($tab_QuickFilterDateFormatUtil.$truncLevelRequiresDateSelection(aggType)) {
			return 0;
		}
		if ($tab_QuickFilterDateFormatUtil.isPureTime(values, aggType)) {
			return 1;
		}
		if (previousShowMode === 2) {
			return 2;
		}
		for (var $t1 = 0; $t1 < values.length; $t1++) {
			var val = values[$t1];
			if (ss.isNullOrUndefined(val) || !ss.isValue(val.v)) {
				continue;
			}
			var dv = $tab_LegacyFilterModel.buildDataValueFromFilterValue(val);
			if (tableau.format.isDateTimeWithNonMidnightTime(dv)) {
				return 2;
			}
		}
		return 0;
	};
	$tab_QuickFilterDateFormatUtil.isPureTime = function QuickFilterDateFormatUtil$IsPureTime(values, aggType) {
		var valuesHaveSameDate = $tab_LegacyFilterModel.timestampsWithSameDateOrNull(values);
		return valuesHaveSameDate && !$tab_QuickFilterDateFormatUtil.$truncLevelRequiresDateSelection(aggType);
	};
	global.tab.QuickFilterDateFormatUtil = $tab_QuickFilterDateFormatUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuickFilterDisplayModel
	var $tab_QuickFilterDisplayModel = function(parent) {
		this.$2$FilterUpdatedField = null;
		this.$2$QuickFilterModelField = null;
		this.$2$QuickFilterTypeField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('quickFilterDisplay'.toString(), null));
		this.set_quickFilterType('unknown');
	};
	$tab_QuickFilterDisplayModel.__typeName = 'tab.QuickFilterDisplayModel';
	$tab_QuickFilterDisplayModel.supportsQuickFilterType = function QuickFilterDisplayModel$SupportsQuickFilterType(presModel) {
		if (presModel.quickFilter.quickFilterType === 'categorical') {
			var catQFPresModel = presModel.quickFilter;
			switch (catQFPresModel.categoricalMode) {
				case 'check-list':
				case 'radio-list': {
					return true;
				}
				case 'check-dropdown':
				case 'dropdown': {
					return tab.FeatureParamsLookup.getBool(40);
				}
				case 'slider':
				case 'pattern':
				case 'type-in-list':
				default: {
					return false;
				}
			}
		}
		return false;
	};
	global.tab.QuickFilterDisplayModel = $tab_QuickFilterDisplayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuickFilterModel
	var $tab_QuickFilterModel = function(parent, presModelKey) {
		$tab_Model.call(this, parent, presModelKey);
	};
	$tab_QuickFilterModel.__typeName = 'tab.QuickFilterModel';
	global.tab.QuickFilterModel = $tab_QuickFilterModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuickSortCmd
	var $tab_QuickSortCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_QuickSortCmd$Response]).call(this);
	};
	$tab_QuickSortCmd.__typeName = 'tab.QuickSortCmd';
	global.tab.QuickSortCmd = $tab_QuickSortCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.QuickSortCmd.Response
	var $tab_QuickSortCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_QuickSortCmd$Response.__typeName = 'tab.QuickSortCmd$Response';
	global.tab.QuickSortCmd$Response = $tab_QuickSortCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RadialSelectionDistanceInfoModel
	var $tab_RadialSelectionDistanceInfoModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('radialSelectionDistanceInfo'.toString(), null));
	};
	$tab_RadialSelectionDistanceInfoModel.__typeName = 'tab.RadialSelectionDistanceInfoModel';
	global.tab.RadialSelectionDistanceInfoModel = $tab_RadialSelectionDistanceInfoModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RaiseConnectionsSucceededNotificationCmd
	var $tab_RaiseConnectionsSucceededNotificationCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_RaiseConnectionsSucceededNotificationCmd$Response]).call(this);
	};
	$tab_RaiseConnectionsSucceededNotificationCmd.__typeName = 'tab.RaiseConnectionsSucceededNotificationCmd';
	$tab_RaiseConnectionsSucceededNotificationCmd.get_commandName = function RaiseConnectionsSucceededNotificationCmd$get_CommandName() {
		return 'raise-connections-succeeded-notification';
	};
	global.tab.RaiseConnectionsSucceededNotificationCmd = $tab_RaiseConnectionsSucceededNotificationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RaiseConnectionsSucceededNotificationCmd.Response
	var $tab_RaiseConnectionsSucceededNotificationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_RaiseConnectionsSucceededNotificationCmd$Response.__typeName = 'tab.RaiseConnectionsSucceededNotificationCmd$Response';
	global.tab.RaiseConnectionsSucceededNotificationCmd$Response = $tab_RaiseConnectionsSucceededNotificationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RaiseConnectionsSucceededNotificationCommand
	var $tab_RaiseConnectionsSucceededNotificationCommand = function() {
		$tab_RaiseConnectionsSucceededNotificationCmd.call(this);
	};
	$tab_RaiseConnectionsSucceededNotificationCommand.__typeName = 'tab.RaiseConnectionsSucceededNotificationCommand';
	global.tab.RaiseConnectionsSucceededNotificationCommand = $tab_RaiseConnectionsSucceededNotificationCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RaiseDialogClosedNotificationCmd
	var $tab_RaiseDialogClosedNotificationCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_RaiseDialogClosedNotificationCmd$Response]).call(this);
	};
	$tab_RaiseDialogClosedNotificationCmd.__typeName = 'tab.RaiseDialogClosedNotificationCmd';
	$tab_RaiseDialogClosedNotificationCmd.get_commandName = function RaiseDialogClosedNotificationCmd$get_CommandName() {
		return 'raise-dialog-closed-notification';
	};
	global.tab.RaiseDialogClosedNotificationCmd = $tab_RaiseDialogClosedNotificationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RaiseDialogClosedNotificationCmd.Response
	var $tab_RaiseDialogClosedNotificationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_RaiseDialogClosedNotificationCmd$Response.__typeName = 'tab.RaiseDialogClosedNotificationCmd$Response';
	global.tab.RaiseDialogClosedNotificationCmd$Response = $tab_RaiseDialogClosedNotificationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RaiseDialogClosedNotificationCommand
	var $tab_RaiseDialogClosedNotificationCommand = function() {
		$tab_RaiseDialogClosedNotificationCmd.call(this);
	};
	$tab_RaiseDialogClosedNotificationCommand.__typeName = 'tab.RaiseDialogClosedNotificationCommand';
	global.tab.RaiseDialogClosedNotificationCommand = $tab_RaiseDialogClosedNotificationCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.RangeTransform
	var $tab_RangeTransform = function() {
	};
	$tab_RangeTransform.__typeName = 'tab.RangeTransform';
	global.tab.RangeTransform = $tab_RangeTransform;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RankTableCalcModel
	var $tab_RankTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('rankTableCalcPresModel'.toString(), null));
	};
	$tab_RankTableCalcModel.__typeName = 'tab.RankTableCalcModel';
	global.tab.RankTableCalcModel = $tab_RankTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RasterMapSourceModel
	var $tab_RasterMapSourceModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('rasterMapSource'.toString(), null));
	};
	$tab_RasterMapSourceModel.__typeName = 'tab.RasterMapSourceModel';
	global.tab.RasterMapSourceModel = $tab_RasterMapSourceModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReferenceLineElement
	var $tab_ReferenceLineElement = function(specId, isXAxis, scope, instantRefLineIsEnabled, cellIndex, values) {
		this.$line = null;
		this.$label = null;
		this.$fill = null;
		this.$isXAxis = false;
		this.$cellIndex = null;
		this.$paneToSectionMap = {};
		this.$1$LineWidthField = 0;
		this.$1$LineColorField = null;
		this.$1$LinePatternField = null;
		this.$1$LineJoinField = null;
		this.$1$LineCapField = null;
		this.$1$IDField = 0;
		this.$1$ScopeField = 0;
		this.$1$InstantRefLineIsEnabledField = false;
		this.set_lineWidth(0);
		this.set_lineColor($tab_ColorModel.fromArgbInt(0));
		this.set_linePattern('none');
		this.set_id(specId);
		this.$cellIndex = cellIndex;
		this.set_scope(scope);
		this.set_instantRefLineIsEnabled(instantRefLineIsEnabled);
		this.$isXAxis = isXAxis;
		this.$line = new $tab_$ReferenceLineElement$Line(this.$isXAxis, values);
	};
	$tab_ReferenceLineElement.__typeName = 'tab.ReferenceLineElement';
	$tab_ReferenceLineElement.$ctor2 = function(specId, isXAxis, scope, instantRefLineIsEnabled, axisStyle, styleId, cellIndex, values, textRuns, textStyles, labels) {
		$tab_ReferenceLineElement.call(this, specId, isXAxis, scope, instantRefLineIsEnabled, cellIndex, values);
		this.set_lineWidth(axisStyle.LineWidth[styleId]);
		var linePattern = tab.EnumConversions.linePatternFromInt(axisStyle.LinePattern[styleId]);
		if (linePattern === 'none') {
			this.set_linePattern('solid');
			this.set_lineColor(new $tab_ColorModel(0, 0, 0, 0));
		}
		else {
			this.set_linePattern(linePattern);
			this.set_lineColor($tab_ColorModel.fromArgbInt(axisStyle.LineColor[styleId]));
		}
		this.set_lineJoin('bevel');
		this.set_lineCap(((this.get_lineWidth() > 1) ? 'flat' : 'square'));
		if (ss.isValue(textRuns) && textRuns.text_run.length > 0) {
			this.$label = new $tab_$ReferenceLineElement$Label(labels, textRuns, textStyles, $tab_ColorModel.fromArgbInt(axisStyle.LabelBackgroundColor[styleId]));
		}
	};
	$tab_ReferenceLineElement.$ctor1 = function(specId, isXAxis, scope, instantRefLineIsEnabled, cellIndex, values, fillColor, fillAbove, fillBelow) {
		$tab_ReferenceLineElement.call(this, specId, isXAxis, scope, instantRefLineIsEnabled, cellIndex, values);
		if (fillColor.length > 0) {
			this.$fill = new $tab_$ReferenceLineElement$Fill(fillAbove, fillBelow, fillColor);
		}
	};
	global.tab.ReferenceLineElement = $tab_ReferenceLineElement;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReferenceLinesModel
	var $tab_ReferenceLinesModel = function(sceneModel, renderingInputStore) {
		this.$regularRefLines = new $tab_$ReferenceLinesModel$ReferenceLineElementLookup();
		this.$instantRefLines = new $tab_$ReferenceLinesModel$ReferenceLineElementLookup();
		$tab_Model.call(this, sceneModel, new $tab_PresModelPathItem('ReferenceLines', null));
		this.$regularRefLines = this.$extractRefLineElements(renderingInputStore.RefLines);
		this.$instantRefLines = this.$extractRefLineElements(renderingInputStore.InstantRefLines);
	};
	$tab_ReferenceLinesModel.__typeName = 'tab.ReferenceLinesModel';
	$tab_ReferenceLinesModel.$sortByZOrder = function ReferenceLinesModel$SortByZOrder(pdToRefElemetsWithZOrder) {
		var compare = function(a, b) {
			return a.item1 - b.item1;
		};
		var pdToRefElements = {};
		var $t1 = new ss.ObjectEnumerator(pdToRefElemetsWithZOrder);
		try {
			while ($t1.moveNext()) {
				var kv = $t1.current();
				kv.value.sort(compare);
				pdToRefElements[kv.key] = kv.value.map(function(item) {
					return item.item2;
				});
			}
		}
		finally {
			$t1.dispose();
		}
		return pdToRefElements;
	};
	$tab_ReferenceLinesModel.$createRefLineIdMap = function ReferenceLinesModel$CreateRefLineIdMap(pdToRefElemetsWithZOrder) {
		var refLineIdMap = {};
		var $t1 = new ss.ObjectEnumerator(pdToRefElemetsWithZOrder);
		try {
			while ($t1.moveNext()) {
				var kv = $t1.current();
				for (var $t2 = 0; $t2 < kv.value.length; $t2++) {
					var refLine = kv.value[$t2];
					var key = refLine.item2.get_id();
					if (!ss.keyExists(refLineIdMap, key)) {
						refLineIdMap[key] = [];
					}
					refLineIdMap[key].push(refLine.item2);
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return refLineIdMap;
	};
	global.tab.ReferenceLinesModel = $tab_ReferenceLinesModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RelationalTableModel
	var $tab_RelationalTableModel = function(parent) {
		this.$3$ColumnsField = null;
		$tab_FieldModel.call(this, parent);
	};
	$tab_RelationalTableModel.__typeName = 'tab.RelationalTableModel';
	global.tab.RelationalTableModel = $tab_RelationalTableModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RelationalTableModelFactory
	var $tab_RelationalTableModelFactory = function() {
	};
	$tab_RelationalTableModelFactory.__typeName = 'tab.RelationalTableModelFactory';
	$tab_RelationalTableModelFactory.create = function RelationalTableModelFactory$Create(presModel, parent, fieldModelCache) {
		var childColumns = $tab_RelationalTableModelFactory.$buildLevelArray(presModel, parent, fieldModelCache);
		var tableModel = (ss.keyExists(fieldModelCache.get_tables(), presModel.fn) ? fieldModelCache.get_tables()[presModel.fn].asRelationalTable() : new $tab_RelationalTableModel(parent));
		tableModel.update(presModel, childColumns);
		return tableModel;
	};
	$tab_RelationalTableModelFactory.$buildLevelArray = function RelationalTableModelFactory$BuildLevelArray(presModel, parent, fieldModelCache) {
		var columns = [];
		if (ss.isNullOrUndefined(presModel.columnList)) {
			return columns;
		}
		for (var $t1 = 0; $t1 < presModel.columnList.length; $t1++) {
			var child = presModel.columnList[$t1];
			columns.push($tab_FieldColumnModelFactory.create(child, parent, fieldModelCache));
		}
		return columns;
	};
	global.tab.RelationalTableModelFactory = $tab_RelationalTableModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RemoteClientCommand
	var $tab_RemoteClientCommand = function(command, uiBlockType, successCallback, failureCallback) {
		$tab_ClientCommand.call(this, uiBlockType, null, command, successCallback, failureCallback);
	};
	$tab_RemoteClientCommand.__typeName = 'tab.RemoteClientCommand';
	$tab_RemoteClientCommand.create = function RemoteClientCommand$Create(command, uiBlockType, successCallback, errorCallback) {
		return new $tab_RemoteClientCommand(command, uiBlockType, successCallback, errorCallback);
	};
	global.tab.RemoteClientCommand = $tab_RemoteClientCommand;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RemoveAnnotationCmd
	var $tab_RemoveAnnotationCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_RemoveAnnotationCmd$Response]).call(this);
	};
	$tab_RemoveAnnotationCmd.__typeName = 'tab.RemoveAnnotationCmd';
	global.tab.RemoveAnnotationCmd = $tab_RemoveAnnotationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RemoveAnnotationCmd.Response
	var $tab_RemoveAnnotationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_RemoveAnnotationCmd$Response.__typeName = 'tab.RemoveAnnotationCmd$Response';
	global.tab.RemoveAnnotationCmd$Response = $tab_RemoveAnnotationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReplaceFileConnectionFromFileUploadCmd
	var $tab_ReplaceFileConnectionFromFileUploadCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ReplaceFileConnectionFromFileUploadCmd$Response]).call(this);
	};
	$tab_ReplaceFileConnectionFromFileUploadCmd.__typeName = 'tab.ReplaceFileConnectionFromFileUploadCmd';
	global.tab.ReplaceFileConnectionFromFileUploadCmd = $tab_ReplaceFileConnectionFromFileUploadCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReplaceFileConnectionFromFileUploadCmd.Response
	var $tab_ReplaceFileConnectionFromFileUploadCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ReplaceFileConnectionFromFileUploadCmd$Response.__typeName = 'tab.ReplaceFileConnectionFromFileUploadCmd$Response';
	global.tab.ReplaceFileConnectionFromFileUploadCmd$Response = $tab_ReplaceFileConnectionFromFileUploadCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.RepoPathObject
	var $tab_RepoPathObject = function(repoPath) {
		this.$workbookId = null;
		this.$sheetId = null;
		this.$customizedView = null;
		var pieces = repoPath.split('/');
		this.$workbookId = pieces[0].replace(new RegExp('^ds:'), '');
		this.$sheetId = pieces[1];
		if (pieces.length > 2) {
			if (pieces.length === 3) {
				throw new ss.Exception("new RepoPathObject() encountered repo path'" + repoPath + "' with a badly formed customized view");
			}
			this.$customizedView = pieces[2] + '/' + pieces[3];
		}
		else {
			this.$customizedView = '';
		}
	};
	$tab_RepoPathObject.__typeName = 'tab.RepoPathObject';
	global.tab.RepoPathObject = $tab_RepoPathObject;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReportMapboxParamsFailureCmd
	var $tab_ReportMapboxParamsFailureCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ReportMapboxParamsFailureCmd$Response]).call(this);
	};
	$tab_ReportMapboxParamsFailureCmd.__typeName = 'tab.ReportMapboxParamsFailureCmd';
	global.tab.ReportMapboxParamsFailureCmd = $tab_ReportMapboxParamsFailureCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ReportMapboxParamsFailureCmd.Response
	var $tab_ReportMapboxParamsFailureCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ReportMapboxParamsFailureCmd$Response.__typeName = 'tab.ReportMapboxParamsFailureCmd$Response';
	global.tab.ReportMapboxParamsFailureCmd$Response = $tab_ReportMapboxParamsFailureCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResetFieldCaptionCmd
	var $tab_ResetFieldCaptionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResetFieldCaptionCmd$Response]).call(this);
	};
	$tab_ResetFieldCaptionCmd.__typeName = 'tab.ResetFieldCaptionCmd';
	global.tab.ResetFieldCaptionCmd = $tab_ResetFieldCaptionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResetFieldCaptionCmd.Response
	var $tab_ResetFieldCaptionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ResetFieldCaptionCmd$Response.__typeName = 'tab.ResetFieldCaptionCmd$Response';
	global.tab.ResetFieldCaptionCmd$Response = $tab_ResetFieldCaptionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResetFieldsCaptionCheckCmd
	var $tab_ResetFieldsCaptionCheckCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_ResetFieldsCaptionCheckCmd$Response]).call(this);
	};
	$tab_ResetFieldsCaptionCheckCmd.__typeName = 'tab.ResetFieldsCaptionCheckCmd';
	$tab_ResetFieldsCaptionCheckCmd.get_commandName = function ResetFieldsCaptionCheckCmd$get_CommandName() {
		return 'reset-fields-caption-check';
	};
	global.tab.ResetFieldsCaptionCheckCmd = $tab_ResetFieldsCaptionCheckCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResetFieldsCaptionCheckCmd.Response
	var $tab_ResetFieldsCaptionCheckCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ResetFieldsCaptionCheckCmd$Response.__typeName = 'tab.ResetFieldsCaptionCheckCmd$Response';
	global.tab.ResetFieldsCaptionCheckCmd$Response = $tab_ResetFieldsCaptionCheckCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeAxisRegionCmd
	var $tab_ResizeAxisRegionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeAxisRegionCmd$Response]).call(this);
		this.set_uiBlocking('immediately');
	};
	$tab_ResizeAxisRegionCmd.__typeName = 'tab.ResizeAxisRegionCmd';
	global.tab.ResizeAxisRegionCmd = $tab_ResizeAxisRegionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeAxisRegionCmd.Response
	var $tab_ResizeAxisRegionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ResizeAxisRegionCmd$Response.__typeName = 'tab.ResizeAxisRegionCmd$Response';
	global.tab.ResizeAxisRegionCmd$Response = $tab_ResizeAxisRegionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeCellWebCmd
	var $tab_ResizeCellWebCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeCellWebCmd$Response]).call(this);
		this.set_uiBlocking('immediately');
	};
	$tab_ResizeCellWebCmd.__typeName = 'tab.ResizeCellWebCmd';
	global.tab.ResizeCellWebCmd = $tab_ResizeCellWebCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeCellWebCmd.Response
	var $tab_ResizeCellWebCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ResizeCellWebCmd$Response.__typeName = 'tab.ResizeCellWebCmd$Response';
	global.tab.ResizeCellWebCmd$Response = $tab_ResizeCellWebCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeEntityModel
	var $tab_ResizeEntityModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('resizeEntity'.toString(), null));
	};
	$tab_ResizeEntityModel.__typeName = 'tab.ResizeEntityModel';
	global.tab.ResizeEntityModel = $tab_ResizeEntityModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeHeaderRegionCmd
	var $tab_ResizeHeaderRegionCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeHeaderRegionCmd$Response]).call(this);
		this.set_uiBlocking('immediately');
	};
	$tab_ResizeHeaderRegionCmd.__typeName = 'tab.ResizeHeaderRegionCmd';
	global.tab.ResizeHeaderRegionCmd = $tab_ResizeHeaderRegionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeHeaderRegionCmd.Response
	var $tab_ResizeHeaderRegionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ResizeHeaderRegionCmd$Response.__typeName = 'tab.ResizeHeaderRegionCmd$Response';
	global.tab.ResizeHeaderRegionCmd$Response = $tab_ResizeHeaderRegionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeHeaderWebCmd
	var $tab_ResizeHeaderWebCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeHeaderWebCmd$Response]).call(this);
		this.set_uiBlocking('immediately');
	};
	$tab_ResizeHeaderWebCmd.__typeName = 'tab.ResizeHeaderWebCmd';
	global.tab.ResizeHeaderWebCmd = $tab_ResizeHeaderWebCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeHeaderWebCmd.Response
	var $tab_ResizeHeaderWebCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ResizeHeaderWebCmd$Response.__typeName = 'tab.ResizeHeaderWebCmd$Response';
	global.tab.ResizeHeaderWebCmd$Response = $tab_ResizeHeaderWebCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizeInfoModel
	var $tab_ResizeInfoModel = function(parent) {
		this.$2$ResizeInfoUpdatedField = null;
		this.cellSize = null;
		this.$2$ColumnHeadersField = null;
		this.$2$RowHeadersField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('resizeInfo'.toString(), null));
	};
	$tab_ResizeInfoModel.__typeName = 'tab.ResizeInfoModel';
	global.tab.ResizeInfoModel = $tab_ResizeInfoModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizePointAnnotationCmd
	var $tab_ResizePointAnnotationCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizePointAnnotationCmd$Response]).call(this);
	};
	$tab_ResizePointAnnotationCmd.__typeName = 'tab.ResizePointAnnotationCmd';
	global.tab.ResizePointAnnotationCmd = $tab_ResizePointAnnotationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResizePointAnnotationCmd.Response
	var $tab_ResizePointAnnotationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ResizePointAnnotationCmd$Response.__typeName = 'tab.ResizePointAnnotationCmd$Response';
	global.tab.ResizePointAnnotationCmd$Response = $tab_ResizePointAnnotationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.ResizerViewModelParams
	var $tab_ResizerViewModelParams = function(visualId, offset, length, isXResizer, minimumOffset, maximumOffset) {
		this.visualId = null;
		this.offset = 0;
		this.length = 0;
		this.isXResizer = false;
		this.minimumOffset = 0;
		this.maximumOffset = 0;
		this.visualId = visualId;
		this.offset = offset;
		this.length = length;
		this.isXResizer = isXResizer;
		this.minimumOffset = minimumOffset;
		this.maximumOffset = maximumOffset;
	};
	$tab_ResizerViewModelParams.__typeName = 'tab.ResizerViewModelParams';
	global.tab.ResizerViewModelParams = $tab_ResizerViewModelParams;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ResponseStatusCode
	var $tab_ResponseStatusCode = function() {
	};
	$tab_ResponseStatusCode.__typeName = 'tab.ResponseStatusCode';
	global.tab.ResponseStatusCode = $tab_ResponseStatusCode;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RichTextClientCommands
	var $tab_RichTextClientCommands = function() {
	};
	$tab_RichTextClientCommands.__typeName = 'tab.RichTextClientCommands';
	$tab_RichTextClientCommands.isRichTextEditingCommand = function RichTextClientCommands$IsRichTextEditingCommand(c) {
		if (ss.isNullOrUndefined(c) || ss.isNullOrUndefined(c.commandName)) {
			return false;
		}
		return c.commandName.toString().indexOf($tab_RichTextClientCommands.$richTextEditorCreationCommandName) !== -1;
	};
	$tab_RichTextClientCommands.callRichTextEditingCommand = function RichTextClientCommands$CallRichTextEditingCommand(c) {
		if (ss.referenceEquals(c.commandName.toString(), { ns: 'tabdoc', cmd: 'create-worksheet-title-rich-text-editor' }.cmd)) {
			$tab_RichTextClientCommands.createWorksheetTitleRichTextEditor(c.commandParams['worksheet']);
		}
		else {
			var isNewZone = ss.isValue(c.commandParams['isNewZone']) && c.commandParams['isNewZone'];
			$tab_RichTextClientCommands.createTextObjectRichTextEditor(c.commandParams['zoneId'], isNewZone);
		}
	};
	$tab_RichTextClientCommands.createTextObjectRichTextEditor = function RichTextClientCommands$CreateTextObjectRichTextEditor(zoneId, isNewZone) {
		var $t1 = new $tab_CreateZoneRichTextEditorCmd();
		$t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		$t1.cmdParams['zoneId'] = zoneId | 0;
		$t1.cmdParams['isNewZone'] = isNewZone;
		$t1.cmdParams['richTextEditorConfiguration'] = $tab_RichTextEditorConfigurationFactory.get_instance();
		$t1.set_uiBlocking('afterDelay');
		var cmd = $t1;
		cmd.invoke();
	};
	$tab_RichTextClientCommands.createWorksheetTitleRichTextEditor = function RichTextClientCommands$CreateWorksheetTitleRichTextEditor(sheetName) {
		var $t1 = new $tab_CreateWorksheetTitleRichTextEditorCmd();
		$t1.cmdParams['worksheet'] = sheetName;
		$t1.cmdParams['richTextEditorConfiguration'] = $tab_RichTextEditorConfigurationFactory.get_instance();
		$t1.set_uiBlocking('afterDelay');
		var cmd = $t1;
		if (tsConfig.current_sheet_type === 'dashboard') {
			cmd.cmdParams['dashboard'] = tsConfig.current_sheet_name;
		}
		cmd.invoke();
	};
	$tab_RichTextClientCommands.createAnnotationRichTextEditor = function RichTextClientCommands$CreateAnnotationRichTextEditor(sheetName, annotationIds) {
		var $t1 = new $tab_CreateAnnotationRichTextEditorCmd();
		$t1.cmdParams['worksheet'] = sheetName;
		$t1.cmdParams['objectIds'] = annotationIds;
		$t1.cmdParams['richTextEditorConfiguration'] = $tab_RichTextEditorConfigurationFactory.get_instance();
		$t1.set_uiBlocking('afterDelay');
		var cmd = $t1;
		cmd.invoke();
	};
	global.tab.RichTextClientCommands = $tab_RichTextClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Formatting.RichTextEditorConfigurationFactory
	var $tab_RichTextEditorConfigurationFactory = function() {
	};
	$tab_RichTextEditorConfigurationFactory.__typeName = 'tab.RichTextEditorConfigurationFactory';
	$tab_RichTextEditorConfigurationFactory.get_instance = function RichTextEditorConfigurationFactory$get_Instance() {
		return $tab_RichTextEditorConfigurationFactory.$editorConfigPM || ($tab_RichTextEditorConfigurationFactory.$editorConfigPM = { contentSecurityPolicy: $tab_RichTextEditorConfigurationFactory.$buildContentSecurityPolicy(), fontFamilies: $tab_FormattingUtil.compatibleFontNameList(), fontSizes: ss.cast($tab_FormattingUtil.fontSizes, Array), cssFontRules: $tab_RichTextEditorConfigurationFactory.$buildServerFontCssRules(), staticAssetsPath: tsConfig.local_static_asset_prefix });
	};
	$tab_RichTextEditorConfigurationFactory.set_instance = function RichTextEditorConfigurationFactory$set_Instance(value) {
		$tab_RichTextEditorConfigurationFactory.$editorConfigPM = value;
	};
	$tab_RichTextEditorConfigurationFactory.clear = function RichTextEditorConfigurationFactory$Clear() {
		$tab_RichTextEditorConfigurationFactory.set_instance(null);
	};
	$tab_RichTextEditorConfigurationFactory.$buildContentSecurityPolicy = function RichTextEditorConfigurationFactory$BuildContentSecurityPolicy() {
		var cdn = ss.replaceAllString(tsConfig.external_static_asset_prefix, tsConfig.local_static_asset_prefix, '');
		return ss.formatString($tab_RichTextEditorConfigurationFactory.defaultContentSecurityPolicy, cdn);
	};
	$tab_RichTextEditorConfigurationFactory.$buildServerFontCssRules = function RichTextEditorConfigurationFactory$BuildServerFontCssRules() {
		var serverFontRules = '';
		var $t1 = $tab_ServerFonts.get_allCustomFonts();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var fontName = $t1[$t2];
			serverFontRules += '@font-face\n{\n' + tab.StyleUtil.createCSSRules(fontName.toCSSRules()) + '}\n';
		}
		return serverFontRules;
	};
	global.tab.RichTextEditorConfigurationFactory = $tab_RichTextEditorConfigurationFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RightAreaDrawerCommands
	var $tab_RightAreaDrawerCommands = function() {
	};
	$tab_RightAreaDrawerCommands.__typeName = 'tab.RightAreaDrawerCommands';
	$tab_RightAreaDrawerCommands.showRightAreaDrawer = function RightAreaDrawerCommands$ShowRightAreaDrawer(contentType) {
		if (!$tab_ApplicationModel.get_instance().get_rightAreaDrawer().get_isOpen()) {
			$tab_ApplicationModel.get_instance().get_rightAreaDrawer().set_typeOfContentBeingLoaded(contentType);
			$tab_ApplicationModel.get_instance().get_rightAreaDrawer().set_isOpen(true);
		}
	};
	$tab_RightAreaDrawerCommands.hideRightAreaDrawer = function RightAreaDrawerCommands$HideRightAreaDrawer() {
		$tab_ApplicationModel.get_instance().get_rightAreaDrawer().set_isOpen(false);
	};
	$tab_RightAreaDrawerCommands.setTypeOfContentBeingLoaded = function RightAreaDrawerCommands$SetTypeOfContentBeingLoaded(contentType) {
		$tab_ApplicationModel.get_instance().get_rightAreaDrawer().set_typeOfContentBeingLoaded(contentType);
	};
	global.tab.RightAreaDrawerCommands = $tab_RightAreaDrawerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RightAreaDrawerModel
	var $tab_RightAreaDrawerModel = function(parent) {
		this.$isOpen = false;
		this.$typeOfContentBeingLoaded = 0;
		this.$2$UpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('formatItem'.toString(), null));
	};
	$tab_RightAreaDrawerModel.__typeName = 'tab.RightAreaDrawerModel';
	global.tab.RightAreaDrawerModel = $tab_RightAreaDrawerModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RightAreaDrawerModel.LoadingContentType
	var $tab_RightAreaDrawerModel$LoadingContentType = function() {
	};
	$tab_RightAreaDrawerModel$LoadingContentType.__typeName = 'tab.RightAreaDrawerModel$LoadingContentType';
	global.tab.RightAreaDrawerModel$LoadingContentType = $tab_RightAreaDrawerModel$LoadingContentType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RuntimeDataResponseParser
	var $tab_RuntimeDataResponseParser = function(response) {
		$tab_RuntimeDataResponseParser.$ctor1.call(this, response.$$cmdParams['runtimeData']);
	};
	$tab_RuntimeDataResponseParser.__typeName = 'tab.RuntimeDataResponseParser';
	$tab_RuntimeDataResponseParser.$ctor1 = function(runtimeData) {
		this.$1$DataStoreField = null;
		this.$1$VtlField = null;
		this.$1$DataStoreUpdaterField = null;
		this.set_dataStore(runtimeData.runtimeLayoutInputDatastore);
		this.set_vtl(runtimeData.runtimeVtl);
		this.set_dataStoreUpdater(runtimeData.runtimeDatastoreUpdater);
	};
	global.tab.RuntimeDataResponseParser = $tab_RuntimeDataResponseParser;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RuntimeLoader
	var $tab_RuntimeLoader = function() {
	};
	$tab_RuntimeLoader.__typeName = 'tab.RuntimeLoader';
	$tab_RuntimeLoader.requestRuntimeLoad = function RuntimeLoader$RequestRuntimeLoad() {
		var emscriptenLoaded = $.Deferred();
		var moduleHandle = {};
		var runtimeInitialized = function() {
			emscriptenLoaded.resolve();
			return true;
		};
		var locateFile = function(url) {
			return tsConfig.external_static_asset_prefix + '/javascripts/' + url;
		};
		var emscriptenAbort = function(error) {
			tab.RuntimeUtil.emscriptenAborted();
			console.error(error);
			tab.ErrorTrace.report(new ss.JsErrorException(error));
		};
		moduleHandle.onRuntimeInitialized = runtimeInitialized;
		moduleHandle.locateFile = locateFile;
		moduleHandle.onAbort = emscriptenAbort;
		var windowAsDynamic = window.self;
		windowAsDynamic['RuntimeWebModule'] = moduleHandle;
		if (tab.FeatureFlags.isEnabled('MarkAnimation')) {
			$tab_ModuleManager.load$1('runtimeanimweb', []);
		}
		else {
			$tab_ModuleManager.load$1('runtimeweb', []);
		}
		return emscriptenLoaded.promise();
	};
	global.tab.RuntimeLoader = $tab_RuntimeLoader;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.RuntimeStatusView
	var $tab_RuntimeStatusView = function() {
		this.$view = null;
		this.$isRuntimeSupported = false;
		this.$isRuntimeReady = false;
	};
	$tab_RuntimeStatusView.__typeName = 'tab.RuntimeStatusView';
	global.tab.RuntimeStatusView = $tab_RuntimeStatusView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RuntimeTelemetry
	var $tab_RuntimeTelemetry = function() {
	};
	$tab_RuntimeTelemetry.__typeName = 'tab.RuntimeTelemetry';
	$tab_RuntimeTelemetry.logVizUsage = function RuntimeTelemetry$LogVizUsage(eventType, elapsedTime) {
		ss.Debug.assert(ss.keyExists($tab_RuntimeTelemetry.$runtimeEventMapping, eventType), 'Telemetry event key must exist');
		$tab_RuntimeTelemetry.$logVizUsageHelper($tab_RuntimeTelemetry.$runtimeEventMapping[eventType], elapsedTime);
	};
	$tab_RuntimeTelemetry.logVizUsage$1 = function RuntimeTelemetry$LogVizUsage(eventType, elapsedTime) {
		$tab_RuntimeTelemetry.$logVizUsageHelper(eventType, elapsedTime);
	};
	$tab_RuntimeTelemetry.$logVizUsageHelper = function RuntimeTelemetry$LogVizUsageHelper(eventName, elapsedTime) {
		$tab_OnlineAnalyticsClient.logEvent($tab_RuntimeTelemetry.usageTable, ss.mkdict([$tab_RuntimeTelemetry.usageColumnName, eventName, $tab_RuntimeTelemetry.metricsTimeColumnName, elapsedTime]));
	};
	global.tab.RuntimeTelemetry = $tab_RuntimeTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.RuntimeTelemetry.RuntimeTelemetryEventType
	var $tab_RuntimeTelemetry$RuntimeTelemetryEventType = function() {
	};
	$tab_RuntimeTelemetry$RuntimeTelemetryEventType.__typeName = 'tab.RuntimeTelemetry$RuntimeTelemetryEventType';
	global.tab.RuntimeTelemetry$RuntimeTelemetryEventType = $tab_RuntimeTelemetry$RuntimeTelemetryEventType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SaveServerCommands
	var $tab_SaveServerCommands = function() {
	};
	$tab_SaveServerCommands.__typeName = 'tab.SaveServerCommands';
	$tab_SaveServerCommands.get_$log = function SaveServerCommands$get_Log() {
		return tab.Logger.lazyGetLogger($tab_SaveServerCommands);
	};
	$tab_SaveServerCommands.saveWorkbook = function SaveServerCommands$SaveWorkbook(successCallback) {
		var internalSuccess = function(o) {
			$tab_WorldUpdateServerCommands.getWorldUpdate(function() {
				if (ss.isValue(successCallback)) {
					successCallback(o);
				}
			});
		};
		$tab_SaveServerCommands.$executePublish('publish', tsConfig.workbookName, tsConfig.current_project_id.toString(), tsConfig.showTabsWorkbook, null, null, internalSuccess, null, $tab_CommandController.get().legacySession, $tab_ApplicationModel.get_instance().get_workbook().get_oAuthCredentialIds());
	};
	$tab_SaveServerCommands.saveWorkbookAs = function SaveServerCommands$SaveWorkbookAs(name, projectId, showTabs, embedCredentials, noOverwrite, oauthCredentialIds, successCallback, errorCallback) {
		$tab_SaveServerCommands.$executePublish('publish_as', name, projectId, showTabs, embedCredentials, noOverwrite, successCallback, errorCallback, $tab_CommandController.get().legacySession, oauthCredentialIds);
	};
	$tab_SaveServerCommands.SaveWorkbookAs = function SaveServerCommands$SaveWorkbookAs(name, project, showTabs, embedCredentials, noOverwrite, oauthCredentialIds, successCallback, errorCallback) {
		$tab_SaveServerCommands.saveWorkbookAs(name, project.id, showTabs, embedCredentials, noOverwrite, oauthCredentialIds, successCallback, errorCallback);
	};
	$tab_SaveServerCommands.SaveDatasource = function SaveServerCommands$SaveDatasource(datasourceId, datasourceName, noOverwrite, projectId, successCallback, errorCallback) {
		var session = $tab_CommandController.get().legacySession;
		var onSuccess = function(responseObject, status, request) {
			var saveDatasourceResult = $tab_SaveServerCommands.$getRequestResponseData(Object).call(null, request.responseText);
			successCallback(saveDatasourceResult);
		};
		var onError = function(request1, status1, error) {
			$tab_SaveServerCommands.get_$log().debug('Error on save datasource: %s', [request1.responseText]);
			var publishError = $tab_SaveServerCommands.$getRequestResponseData(Object).call(null, request1.responseText);
			if (ss.isValue(errorCallback) && ss.isValue(publishError)) {
				errorCallback(publishError);
			}
			else {
				session.$handleError(error, request1, false, null);
			}
		};
		var args = { type: 'POST', dataType: 'json', url: $tab_CommandController.$formatSessionMethod('publish_ds', session) };
		var data = ss.mkdict(['project', projectId.toString(), 'datasource', datasourceId, 'name', datasourceName]);
		if (ss.isValue(noOverwrite)) {
			data['no_overwrite'] = ss.unbox(noOverwrite);
		}
		var payload = $tab_XhrUtil.getMultipartData(null, data);
		args.contentType = 'multipart/form-data; boundary=' + payload.header;
		args.data = payload.body;
		var handler = new $tab_SessionAjaxCallManager(session, null, onSuccess, onError, true, true);
		$tab_XhrUtil.helper(args, handler);
	};
	$tab_SaveServerCommands.$getRequestResponseData = function(T) {
		return function SaveServerCommands$GetRequestResponseData(responseText) {
			var json;
			try {
				json = JSON.parse(responseText);
			}
			catch ($t1) {
				json = null;
			}
			return ss.cast(json, T);
		};
	};
	$tab_SaveServerCommands.$executePublish = function SaveServerCommands$ExecutePublish(publishMethod, name, projectId, showTabs, embedCredentials, noOverwrite, successCallback, errorCallback, session, oauthCredentialIds) {
		var onSuccess = function(responseObject, status, req) {
			var responseDict = responseObject;
			if (ss.keyExists(responseDict, 'workbook')) {
				var wb = responseDict['workbook'];
				successCallback(wb);
			}
			else {
				$tab_SaveServerCommands.get_$log().warn('Save did not return a workbook: %s', [responseObject]);
				successCallback(null);
			}
		};
		var onError = function(request, status1, error) {
			$tab_SaveServerCommands.get_$log().debug('Error on publish: %s', [request.responseText]);
			var publishError = $tab_SaveServerCommands.$getRequestResponseData(Object).call(null, request.responseText);
			var exceptionResponse = $tab_SaveServerCommands.$getRequestResponseData(Object).call(null, request.responseText);
			if (ss.isValue(errorCallback) && ss.isValue(publishError)) {
				errorCallback(publishError);
			}
			else if (request.status === 403 && ss.isValue(exceptionResponse) && exceptionResponse.code === 60011) {
				session.get_sessionErrorHandler().handleSessionForbiddenAction(exceptionResponse.code, exceptionResponse.message);
			}
			else {
				session.get_sessionErrorHandler().handleCommandFailure(error, request, null, false);
			}
		};
		var args = { type: 'POST', dataType: 'json', url: $tab_CommandController.$formatSessionMethod(publishMethod, session) };
		var data = ss.mkdict(['project', projectId, 'name', name, 'display_tabs', showTabs]);
		if (ss.isValue(embedCredentials)) {
			data['save_db_passwords'] = ss.unbox(embedCredentials);
		}
		if (ss.isValue(noOverwrite)) {
			data['no_overwrite'] = ss.unbox(noOverwrite);
		}
		if (ss.isValue(oauthCredentialIds)) {
			data['oauth_credential_ids'] = oauthCredentialIds;
		}
		var payload = $tab_XhrUtil.getMultipartData(null, data);
		args.contentType = 'multipart/form-data; boundary=' + payload.header;
		args.data = payload.body;
		var handler = new $tab_SessionAjaxCallManager(session, null, onSuccess, onError, true, true);
		$tab_XhrUtil.helper(args, handler);
	};
	$tab_SaveServerCommands.transitionSessionAfterLogon = function SaveServerCommands$TransitionSessionAfterLogon(successCallback) {
		$tab_CommandController.get().$transitionGuestSession(successCallback);
	};
	global.tab.SaveServerCommands = $tab_SaveServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SceneDataUtil
	var $tab_SceneDataUtil = function() {
	};
	$tab_SceneDataUtil.__typeName = 'tab.SceneDataUtil';
	$tab_SceneDataUtil.isPaneFlagSet = function SceneDataUtil$IsPaneFlagSet(flags, flagToTest) {
		return (flags & $tab_SceneDataUtil.$paneFlagMapping[flagToTest]) !== 0;
	};
	$tab_SceneDataUtil.isMarkFlagSet = function SceneDataUtil$IsMarkFlagSet(flags, flagToTest) {
		return (flags & $tab_SceneDataUtil.$markFlagMapping[flagToTest]) !== 0;
	};
	$tab_SceneDataUtil.isCustomShape = function SceneDataUtil$IsCustomShape(shapeId) {
		return !ss.keyExists($tab_SceneDataUtil.shapeMapping, shapeId.toString());
	};
	$tab_SceneDataUtil.getFogBlendFactor = function SceneDataUtil$GetFogBlendFactor(backgroundColor) {
		var DefaultFogBlendFactor = 0.185000002384186;
		var DarkBgFogBlendFactor = 0.275000005960464;
		var DarkBgThreshold = 75;
		var isDarkBackground = backgroundColor.get_r() <= DarkBgThreshold && backgroundColor.get_g() <= DarkBgThreshold && backgroundColor.get_b() <= DarkBgThreshold;
		return (isDarkBackground ? DarkBgFogBlendFactor : DefaultFogBlendFactor);
	};
	$tab_SceneDataUtil.fogColorTransform = function SceneDataUtil$FogColorTransform(color, foggedBackgroundColor, fogBlendFactor) {
		var r = ss.Int32.trunc(foggedBackgroundColor.get_r() + color.get_r() * fogBlendFactor);
		var g = ss.Int32.trunc(foggedBackgroundColor.get_g() + color.get_g() * fogBlendFactor);
		var b = ss.Int32.trunc(foggedBackgroundColor.get_b() + color.get_b() * fogBlendFactor);
		return new $tab_ColorModel(r, g, b, color.get_a());
	};
	$tab_SceneDataUtil.applyFogToBackgroundColor = function SceneDataUtil$ApplyFogToBackgroundColor(backgroundColor, fogBlendFactor) {
		var CloseToWhite = 245;
		if (backgroundColor.get_r() >= CloseToWhite && backgroundColor.get_g() >= CloseToWhite && backgroundColor.get_b() >= CloseToWhite) {
			backgroundColor = new $tab_ColorModel(CloseToWhite, CloseToWhite, CloseToWhite, backgroundColor.get_a());
		}
		var r = ss.Int32.trunc((1 - fogBlendFactor) * backgroundColor.get_r());
		var g = ss.Int32.trunc((1 - fogBlendFactor) * backgroundColor.get_g());
		var b = ss.Int32.trunc((1 - fogBlendFactor) * backgroundColor.get_b());
		return new $tab_ColorModel(r, g, b, backgroundColor.get_a());
	};
	$tab_SceneDataUtil.createColorCollection = function SceneDataUtil$CreateColorCollection(color, fogBackgroundColor, fogBlendFactor) {
		var colorCollection = {};
		colorCollection['colorOverrideOpaque'] = color.toRgb();
		colorCollection['colorOverrideNone'] = color.toRgba();
		colorCollection['colorOverrideFog'] = $tab_SceneDataUtil.fogColorTransform(color, fogBackgroundColor, fogBlendFactor).toRgba();
		return colorCollection;
	};
	$tab_SceneDataUtil.createOpaqueColorCollection = function SceneDataUtil$CreateOpaqueColorCollection(colorCollection) {
		var opaqueColors = {};
		var cm = $tab_ColorModel.fromColorCode(colorCollection['colorOverrideNone']);
		opaqueColors['colorOverrideNone'] = cm.toRgb();
		cm = $tab_ColorModel.fromColorCode(colorCollection['colorOverrideFog']);
		opaqueColors['colorOverrideFog'] = cm.toRgb();
		cm = $tab_ColorModel.fromColorCode(colorCollection['colorOverrideOpaque']);
		opaqueColors['colorOverrideOpaque'] = cm.toRgb();
		return opaqueColors;
	};
	$tab_SceneDataUtil.applyFoggingToColor = function SceneDataUtil$ApplyFoggingToColor(color, backgroundColor) {
		var fogBlendFactor = $tab_SceneDataUtil.getFogBlendFactor(backgroundColor);
		var foggedBackground = $tab_SceneDataUtil.applyFogToBackgroundColor(backgroundColor, fogBlendFactor);
		return $tab_SceneDataUtil.fogColorTransform(color, foggedBackground, fogBlendFactor);
	};
	$tab_SceneDataUtil.convertShapeToNumber = function SceneDataUtil$ConvertShapeToNumber(shape) {
		ss.Debug.assert(ss.isValue(shape), 'Unable to encode, shape is null');
		ss.Debug.assert(!ss.isValue(shape.get_palette()) || ss.unbox(shape.get_palette()) === 'filled', 'Only shapes with empty or Filled palette supported');
		var result;
		var isFilled = ss.isValue(shape.get_palette()) && ss.unbox(shape.get_palette()) === 'filled';
		switch (shape.get_shapeType()) {
			case 'circle': {
				result = (isFilled ? 'shapeIDFilledCircle' : 'shapeIDCircle');
				break;
			}
			case 'square': {
				result = (isFilled ? 'shapeIDFilledSquare' : 'shapeIDSquare');
				break;
			}
			case 'plus': {
				result = (isFilled ? 'shapeIDFilledPlus' : 'shapeIDPlus');
				break;
			}
			case 'times': {
				result = (isFilled ? 'shapeIDFilledTimes' : 'shapeIDTimes');
				break;
			}
			case 'asterisk': {
				result = (isFilled ? 'shapeIDFilledStar' : 'shapeIDAsterisk');
				break;
			}
			case 'diamond': {
				result = (isFilled ? 'shapeIDFilledDiamond' : 'shapeIDDiamond');
				break;
			}
			case 'triangle': {
				result = (isFilled ? 'shapeIDFilledTriangle' : 'shapeIDTriangle');
				break;
			}
			case 'down-triangle': {
				result = (isFilled ? 'shapeIDFilledDownTriangle' : 'shapeIDDownTriangle');
				break;
			}
			case 'left-triangle': {
				result = (isFilled ? 'shapeIDFilledLeftTriangle' : 'shapeIDLeftTriangle');
				break;
			}
			case 'right-triangle': {
				result = (isFilled ? 'shapeIDFilledRightTriangle' : 'shapeIDRightTriangle');
				break;
			}
			default: {
				throw new ss.Exception('Unable to map ShapeType to ShapeID');
			}
		}
		return parseInt($tab_SceneDataUtil.reverseShapeMapping[result]);
	};
	$tab_SceneDataUtil.getNumPaneItems = function SceneDataUtil$GetNumPaneItems(paneMarksPM) {
		return paneMarksPM.endIndex - paneMarksPM.startIndex;
	};
	$tab_SceneDataUtil.calcCellClip = function SceneDataUtil$CalcCellClip(paneFlags) {
		var toRet = 0;
		var clipX = $tab_SceneDataUtil.isPaneFlagSet(paneFlags, 'clip-to-cell-x');
		var clipY = $tab_SceneDataUtil.isPaneFlagSet(paneFlags, 'clip-to-cell-y');
		if (clipX && clipY) {
			toRet = 3;
		}
		else if (clipX) {
			toRet = 1;
		}
		else if (clipY) {
			toRet = 2;
		}
		return toRet;
	};
	$tab_SceneDataUtil.isSupportedStampShape = function SceneDataUtil$IsSupportedStampShape(shape) {
		if (!ss.keyExists($tab_SceneDataUtil.reverseShapeMapping, shape)) {
			return false;
		}
		var isSupported = true;
		switch (shape) {
			case 'shapeIDFilledSquare':
			case 'shapeIDSquare': {
				isSupported = false;
				break;
			}
			default: {
				break;
			}
		}
		return isSupported;
	};
	global.tab.SceneDataUtil = $tab_SceneDataUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SceneElementModel
	var $tab_SceneElementModel = function(pm) {
		this.$2$SceneElementPMField = null;
		this.$2$PaneIdField = null;
		this.$2$BoundsField = null;
		$tab_Model.call(this, null, new $tab_PresModelPathItem('sceneElement'.toString(), null));
		this.swapPresModel(pm);
		this.set_sceneElementPM(pm);
		this.set_paneId(new $tab_PaneIdModel(pm.paneId));
		this.set_bounds({ minX: pm.floatLeft, minY: pm.floatTop, maxX: pm.floatLeft + pm.floatWidth, maxY: pm.floatTop + pm.floatHeight });
	};
	$tab_SceneElementModel.__typeName = 'tab.SceneElementModel';
	global.tab.SceneElementModel = $tab_SceneElementModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SceneModel
	var $tab_SceneModel = function(parent) {
		this.$visualListModels = {};
		this.$drawFirstParts = [];
		this.$drawLastParts = [];
		this.$refLineVisualLists = null;
		this.$trendLineVisualLists = null;
		this.$cachedFirstRuntimeAnimationDataStore = '';
		this.$runtimeDataStore = null;
		this.$markAnimationControllerHandle = -1;
		this.$2$NewSceneModelField = null;
		this.$2$ReferenceLinesField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('scene'.toString(), null));
		this.$refLineVisualLists = [];
		this.$trendLineVisualLists = [];
	};
	$tab_SceneModel.__typeName = 'tab.SceneModel';
	global.tab.SceneModel = $tab_SceneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.SceneUtils
	var $tab_SceneUtils = function() {
	};
	$tab_SceneUtils.__typeName = 'tab.SceneUtils';
	$tab_SceneUtils.getPaneDescriptorKeyFromRuntimeData = function SceneUtils$GetPaneDescriptorKeyFromRuntimeData(tupleId, rd) {
		var $t1 = new ss.ObjectEnumerator(rd.PDMarks);
		try {
			while ($t1.moveNext()) {
				var pair = $t1.current();
				var mlt = pair.value;
				var tupleIds = mlt.Encodings.tuple_id;
				var match = _.find(tupleIds, function(data) {
					return data === tupleId;
				});
				if (ss.isValue(match)) {
					return pair.key;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		tab.Logger.lazyGetLogger($tab_SceneUtils).warn('Failed getting pane descriptor key for tuple id: %i', [tupleId]);
		return '';
	};
	global.tab.SceneUtils = $tab_SceneUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Schedule
	var $tab_Schedule = function(model) {
		this.$schedulePresModel = null;
		this.$scheduleFrequencyDescription = null;
		this.$schedulePresModel = model;
		this.$scheduleFrequencyDescription = this.generateFrequencyDescription();
	};
	$tab_Schedule.__typeName = 'tab.Schedule';
	$tab_Schedule.$formatTime = function Schedule$FormatTime(minutesAfterMidnight) {
		var date = new Date();
		date.setHours(ss.Int32.div(minutesAfterMidnight, 60));
		date.setMinutes(minutesAfterMidnight % 60);
		date.setSeconds(0);
		return date.toLocaleTimeString();
	};
	$tab_Schedule.$offsetStartTime = function Schedule$OffsetStartTime(startTime, diffMinutes) {
		var newStart = startTime + diffMinutes;
		newStart = newStart % $tab_Schedule.$minutesPerDay;
		if (newStart < 0) {
			newStart = $tab_Schedule.$minutesPerDay + newStart;
		}
		return newStart;
	};
	$tab_Schedule.$computeDayOffset = function Schedule$ComputeDayOffset(startTime, diffMinutes) {
		var newStart = startTime + diffMinutes;
		if (newStart > $tab_Schedule.$minutesPerDay) {
			return 1;
		}
		else if (newStart < 0) {
			return -1;
		}
		return 0;
	};
	global.tab.Schedule = $tab_Schedule;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SchemaClientCommands
	var $tab_SchemaClientCommands = function() {
	};
	$tab_SchemaClientCommands.__typeName = 'tab.SchemaClientCommands';
	$tab_SchemaClientCommands.addFieldToSheet = function SchemaClientCommands$AddFieldToSheet(fieldName, callback) {
		var cmdParams = {};
		cmdParams['fn'] = fieldName;
		cmdParams['worksheet'] = tsConfig.current_sheet_name;
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'add-to-sheet' }, cmdParams);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', function(pm) {
			callback();
		}, function(x) {
			callback();
		}));
	};
	$tab_SchemaClientCommands.validateFieldCaption = function SchemaClientCommands$ValidateFieldCaption(fieldName, newCaption, successCallback) {
		var cmdParams = {};
		cmdParams['uniqueName'] = fieldName;
		cmdParams['caption'] = newCaption;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'validate-field-caption' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'none', function(pm) {
			successCallback(pm);
		}, null);
	};
	$tab_SchemaClientCommands.editFieldCaption = function SchemaClientCommands$EditFieldCaption(fieldName, newCaption, fieldModel) {
		var cmdParams = {};
		cmdParams['uniqueName'] = fieldName;
		cmdParams['caption'] = newCaption;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'edit-schema-caption' }, cmdParams);
		$tab_CommandController.SendCommand(new $tab_ClientCommand('none', function(t) {
			var fieldsPM = t.makeMutablePresModel(fieldModel.get_fieldsModel(), false);
			for (var ind = 0; ind < fieldsPM.length; ++ind) {
				if (ss.referenceEquals(fieldsPM[ind].fn, fieldName)) {
					fieldsPM[ind].fieldCaption = newCaption;
					break;
				}
			}
		}, cmd, null, null));
	};
	$tab_SchemaClientCommands.validateDrillPathName = function SchemaClientCommands$ValidateDrillPathName(dataSourceName, oldDrillPathName, newDrillPathName, successCallback) {
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		if (ss.isValue(oldDrillPathName)) {
			cmdParams['drillPathName'] = oldDrillPathName;
		}
		cmdParams['newDrillPath'] = newDrillPathName;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'validate-drill-path-name' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'afterDelay', function(pm) {
			successCallback(pm);
		}, null);
	};
	$tab_SchemaClientCommands.addDrillPath = function SchemaClientCommands$AddDrillPath(dataSourceName, drillPathName, fields) {
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		cmdParams['newDrillPath'] = drillPathName;
		cmdParams['fieldVector'] = fields;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'add-drill-path' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', $tab_CommandUtils.createCommandRedirectSuccessHandler(null), null);
	};
	$tab_SchemaClientCommands.renameDrillPath = function SchemaClientCommands$RenameDrillPath(dataSourceName, oldDrillPathName, newDrillPathName) {
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		cmdParams['drillPathName'] = oldDrillPathName;
		cmdParams['newDrillPath'] = newDrillPathName;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'rename-drill-path' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', $tab_CommandUtils.createCommandRedirectSuccessHandler(null), null);
	};
	$tab_SchemaClientCommands.validateFieldFolderName = function SchemaClientCommands$ValidateFieldFolderName(dataSourceName, oldFieldFolderName, newFieldFolderName, role, successCallback) {
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		if (ss.isValue(oldFieldFolderName)) {
			cmdParams['fieldFolderName'] = oldFieldFolderName;
		}
		cmdParams['proposedName'] = newFieldFolderName;
		cmdParams['folderRole'] = role;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'validate-schema-field-folder-name' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'afterDelay', function(pm) {
			successCallback(pm);
		}, null);
	};
	$tab_SchemaClientCommands.addFieldFolder = function SchemaClientCommands$AddFieldFolder(dataSourceName, folderName, fields, drillPaths, role) {
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		cmdParams['newFieldFolderName'] = folderName;
		cmdParams['fieldVector'] = fields;
		cmdParams['drillpathVector'] = drillPaths;
		cmdParams['folderRole'] = role;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'add-field-folder' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', $tab_CommandUtils.createCommandRedirectSuccessHandler(null), null);
	};
	$tab_SchemaClientCommands.renameFieldFolder = function SchemaClientCommands$RenameFieldFolder(dataSourceName, oldFieldFolderName, newFieldFolderName, role) {
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		cmdParams['fieldFolderName'] = oldFieldFolderName;
		cmdParams['proposedName'] = newFieldFolderName;
		cmdParams['folderRole'] = role;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'validate-and-edit-schema-field-folder-name' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', $tab_CommandUtils.createCommandRedirectSuccessHandler(null), null);
	};
	$tab_SchemaClientCommands.setActiveDataSourceName = function SchemaClientCommands$SetActiveDataSourceName(newDsName, isUndoable) {
		var commandParams = {};
		commandParams['datasource'] = newDsName;
		var docCmd = (isUndoable ? { ns: 'tabdoc', cmd: 'set-active-data-source-name' } : { ns: 'tabdoc', cmd: 'set-active-datasource' });
		var cmd = $tab_CommandUtils.newCommand(docCmd, commandParams);
		cmd.commandParams['datasource'] = newDsName;
		var doLocalWork = $tab_ApplicationModel.get_instance().get_workbook().get_uiMode() === 'data-tab';
		var localWork = null;
		if (doLocalWork) {
			localWork = function(t) {
				var dataSchemaPM = t.makeMutablePresModel($tab_ApplicationModel.get_instance().get_workbook().get_dataSchema(), false);
				dataSchemaPM.datasource = newDsName;
			};
		}
		var deferred = $.Deferred();
		$tab_CommandController.SendCommand(new $tab_ClientCommand((doLocalWork ? 'none' : 'immediately'), localWork, cmd, function(m) {
			deferred.resolve();
		}, function(ex) {
			deferred.reject();
		}));
		return deferred;
	};
	$tab_SchemaClientCommands.dropOnSchemaDrillPath = function SchemaClientCommands$DropOnSchemaDrillPath(dataSourceName, dragFields, dropDrillPath, callback) {
		var $t1 = new $tab_DropOnSchemaDrillPathCmd();
		$t1.cmdParams['datasource'] = dataSourceName;
		$t1.cmdParams['columns'] = dragFields.filter(function(field) {
			return field.get_isColumn();
		}).map(function(field1) {
			return field1.get_qualifiedLocalName();
		});
		$t1.cmdParams['drillpathVector'] = dragFields.filter(function(field2) {
			return field2.get_isDrillPath();
		}).map(function(field3) {
			return field3.get_localName().toString();
		});
		$t1.cmdParams['drillPathName'] = dropDrillPath.get_localName();
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		cmd.invoke().done(function(res) {
			callback(res.$$cmdParams['dropCommandModel']);
		});
	};
	$tab_SchemaClientCommands.dropOnSchemaField = function SchemaClientCommands$DropOnSchemaField(dataSourceName, dragFields, dropField, callback) {
		var $t1 = new $tab_DropOnSchemaFieldCmd();
		$t1.cmdParams['datasource'] = dataSourceName;
		$t1.cmdParams['columns'] = dragFields.filter(function(field) {
			return field.get_isColumn();
		}).map(function(field1) {
			return field1.get_qualifiedLocalName();
		});
		$t1.cmdParams['drillpathVector'] = dragFields.filter(function(field2) {
			return field2.get_isDrillPath();
		}).map(function(field3) {
			return field3.get_localName().toString();
		});
		$t1.cmdParams['fieldNameLocal'] = dropField.get_qualifiedLocalName();
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		cmd.invoke().done(function(res) {
			callback(res.$$cmdParams['dropCommandModel']);
		});
	};
	$tab_SchemaClientCommands.dropOnSchemaSection = function SchemaClientCommands$DropOnSchemaSection(dataSourceName, dragFields, dropSectionRole, callback) {
		var $t1 = new $tab_DropOnSchemaSectionCmd();
		$t1.cmdParams['datasource'] = dataSourceName;
		$t1.cmdParams['columns'] = dragFields.filter(function(field) {
			return field.get_isColumn();
		}).map(function(field1) {
			return field1.get_qualifiedLocalName();
		});
		$t1.cmdParams['drillpathVector'] = dragFields.filter(function(field2) {
			return field2.get_isDrillPath();
		}).map(function(field3) {
			return field3.get_localName().toString();
		});
		$t1.cmdParams['folderRole'] = dropSectionRole;
		$t1.set_uiBlocking('immediately');
		var cmd = $t1;
		cmd.invoke().done(function(res) {
			callback(res.$$cmdParams['dropCommandModel']);
		});
	};
	$tab_SchemaClientCommands.requestSchemaContextMenu = function SchemaClientCommands$RequestSchemaContextMenu(dataSourceName, callback) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-data-schema-context-menu' }, null);
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		c.commandParams = cmdParams;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, null));
	};
	$tab_SchemaClientCommands.requestSchemaFieldContextMenu = function SchemaClientCommands$RequestSchemaFieldContextMenu(dataSourceName, field, callback) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-data-schema-field-context-menu' }, null);
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		cmdParams['fn'] = field;
		c.commandParams = cmdParams;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, null));
	};
	$tab_SchemaClientCommands.requestDataTabFieldContextMenu = function SchemaClientCommands$RequestDataTabFieldContextMenu(dataSourceName, fields, callback) {
		var $t1 = new $tab_BuildDataTabFieldContextMenuCmd();
		$t1.cmdParams['datasource'] = dataSourceName;
		$t1.cmdParams['fieldVector'] = fields;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_SchemaClientCommands.requestSchemaFieldChangeDataTypeMenu = function SchemaClientCommands$RequestSchemaFieldChangeDataTypeMenu(dataSourceName, fields, callback) {
		var $t1 = new $tab_BuildSchemaChangeDataTypeMenuCmd();
		$t1.cmdParams['datasource'] = dataSourceName;
		$t1.cmdParams['fieldVector'] = fields;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_SchemaClientCommands.requestSchemaDrillPathContextMenu = function SchemaClientCommands$RequestSchemaDrillPathContextMenu(dataSourceName, drillPathName, callback) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-data-schema-drill-path-context-menu' }, null);
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		cmdParams['drillPathName'] = drillPathName;
		c.commandParams = cmdParams;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, null));
	};
	$tab_SchemaClientCommands.requestSchemaFieldFolderContextMenu = function SchemaClientCommands$RequestSchemaFieldFolderContextMenu(dataSourceName, fieldFolderName, role, callback) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-data-schema-field-folder-context-menu' }, null);
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		cmdParams['fieldFolderName'] = fieldFolderName;
		cmdParams['folderRole'] = role;
		c.commandParams = cmdParams;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, null));
	};
	$tab_SchemaClientCommands.requestSchemaDataSourceContextMenu = function SchemaClientCommands$RequestSchemaDataSourceContextMenu(dataSourceName, callback) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-data-schema-data-source-context-menu' }, null);
		var cmdParams = {};
		cmdParams['datasource'] = dataSourceName;
		cmdParams['allowSaveDataSource'] = tsConfig.allow_save_data_source;
		c.commandParams = cmdParams;
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, null));
	};
	$tab_SchemaClientCommands.convertUnnamedFields = function SchemaClientCommands$ConvertUnnamedFields(fieldNames) {
		var deferred = $.Deferred();
		var cmdParams = {};
		cmdParams['fieldVector'] = fieldNames;
		var cmd = new $tab_RemoteClientCommand($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'convert-unnamed-fields' }, cmdParams), 'immediately', function(pm) {
			deferred.resolve(pm);
		}, function(e) {
			deferred.reject();
		});
		$tab_CommandController.SendCommand(cmd);
		return deferred.promise();
	};
	$tab_SchemaClientCommands.toggleFieldBlending = function SchemaClientCommands$ToggleFieldBlending(fieldName, localWork) {
		var deferred = $.Deferred();
		var cmdParams = {};
		cmdParams['globalFieldName'] = fieldName;
		cmdParams['worksheet'] = tsConfig.current_sheet_name;
		var cmd = new $tab_ClientCommand('immediately', localWork, $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'toggle-field-blending' }, cmdParams), function(pm) {
			deferred.resolve(pm);
		}, function(e) {
			deferred.reject();
		});
		$tab_CommandController.SendCommand(cmd);
		return deferred.promise();
	};
	$tab_SchemaClientCommands.renameDataSource = function SchemaClientCommands$RenameDataSource(datasourceName, newDSCaption, failCallback) {
		if (ss.isNullOrEmptyString(datasourceName)) {
			return;
		}
		var cmdParams = {};
		cmdParams['datasource'] = datasourceName;
		cmdParams['newDatasource'] = newDSCaption;
		var localWork = function(t) {
			var dsm = $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema().findDataSourceByName(datasourceName);
			var dataSourcePM = t.makeMutablePresModel(dsm, false);
			dataSourcePM.datasourceCaption = newDSCaption;
		};
		var cmd = new $tab_ClientCommand('none', localWork, $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'rename-data-source' }, cmdParams), null, function(Exception) {
			failCallback();
		});
		$tab_CommandController.SendCommand(cmd);
	};
	$tab_SchemaClientCommands.getHasUnusedFiles = function SchemaClientCommands$GetHasUnusedFiles(callback) {
		var cmd = new $tab_GetHasUnusedFilesCmd();
		var post = function(b) {
			callback(b.$$cmdParams['bool']);
		};
		cmd.invoke().then(post);
	};
	global.tab.SchemaClientCommands = $tab_SchemaClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SchemaCommandLocalOptions
	var $tab_SchemaCommandLocalOptions = function() {
	};
	$tab_SchemaCommandLocalOptions.__typeName = 'tab.SchemaCommandLocalOptions';
	$tab_SchemaCommandLocalOptions.$registerRenameDataSourceCommandOptions = function SchemaCommandLocalOptions$RegisterRenameDataSourceCommandOptions() {
		var renameDataSourceLocalWork = function(parameters) {
			return function(t) {
				var dataSourceName = ss.safeCast(parameters['datasource'], String);
				var newDsCaption = ss.safeCast(parameters['newDatasource'], String);
				var dsm = $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema().findDataSourceByName(dataSourceName);
				var dataSourcePM = t.makeMutablePresModel(dsm, false);
				dataSourcePM.datasourceCaption = newDsCaption;
			};
		};
		var $t2 = $tab_WebCommandRegistry.get_instance();
		var $t3 = { ns: 'tabdoc', cmd: { ns: 'tabdoc', cmd: 'rename-data-source' }.cmd };
		var $t1 = new $tab_CommandLocalOptions();
		$t1.localWorkFactory = renameDataSourceLocalWork;
		$t1.blocking = 'none';
		$t2.registerCommandLocalOptions($t3, $t1);
	};
	$tab_SchemaCommandLocalOptions.$registerSetActiveDataSourceNameCommandOptions = function SchemaCommandLocalOptions$RegisterSetActiveDataSourceNameCommandOptions() {
		var doLocalWork = $tab_ApplicationModel.get_instance().get_workbook().get_uiMode() === 'data-tab';
		var setActiveDataSourceNameLocalWork = null;
		if (doLocalWork) {
			setActiveDataSourceNameLocalWork = function(parameters) {
				return function(t) {
					var dataSourceName = ss.safeCast(parameters['datasource'], String);
					var dataSchemaPM = t.makeMutablePresModel($tab_ApplicationModel.get_instance().get_workbook().get_dataSchema(), false);
					dataSchemaPM.datasource = dataSourceName;
				};
			};
			var $t2 = $tab_WebCommandRegistry.get_instance();
			var $t3 = { ns: 'tabdoc', cmd: { ns: 'tabdoc', cmd: 'set-active-data-source-name' }.cmd };
			var $t1 = new $tab_CommandLocalOptions();
			$t1.localWorkFactory = setActiveDataSourceNameLocalWork;
			$t1.blocking = 'none';
			$t2.registerCommandLocalOptions($t3, $t1);
		}
	};
	global.tab.SchemaCommandLocalOptions = $tab_SchemaCommandLocalOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SchemaUtils
	var $tab_SchemaUtils = function() {
	};
	$tab_SchemaUtils.__typeName = 'tab.SchemaUtils';
	$tab_SchemaUtils.getDataSourceNames = function SchemaUtils$GetDataSourceNames(dataSources) {
		return _.map(dataSources.get_dataSources(), function(d) {
			return d.get_caption().toString();
		});
	};
	$tab_SchemaUtils.isValidNewDatasourceCaption$1 = function SchemaUtils$IsValidNewDatasourceCaption(exisistingDataSource, allDataSources, newDataSourceCaption) {
		var allOtherDataSourceCaptions = $tab_SchemaUtils.getDataSourceNames(allDataSources);
		return $tab_SchemaUtils.isValidNewDatasourceCaption(exisistingDataSource.get_caption(), allOtherDataSourceCaptions, newDataSourceCaption);
	};
	$tab_SchemaUtils.isValidNewDatasourceCaption = function SchemaUtils$IsValidNewDatasourceCaption(exisistingDataSourceCaption, allDataSourceCaptions, newDataSourceCaption) {
		newDataSourceCaption = (!ss.isNullOrEmptyString(newDataSourceCaption) ? newDataSourceCaption.trim() : null);
		return !(ss.isNullOrEmptyString(newDataSourceCaption) || ss.referenceEquals(newDataSourceCaption, exisistingDataSourceCaption) || newDataSourceCaption.toString().length > $tab_SchemaUtils.maxDatasourceCaptionLength || ss.contains(allDataSourceCaptions, newDataSourceCaption));
	};
	global.tab.SchemaUtils = $tab_SchemaUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectByTupleValueCmd
	var $tab_SelectByTupleValueCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SelectByTupleValueCmd$Response]).call(this);
	};
	$tab_SelectByTupleValueCmd.__typeName = 'tab.SelectByTupleValueCmd';
	global.tab.SelectByTupleValueCmd = $tab_SelectByTupleValueCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectByTupleValueCmd.Response
	var $tab_SelectByTupleValueCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SelectByTupleValueCmd$Response.__typeName = 'tab.SelectByTupleValueCmd$Response';
	global.tab.SelectByTupleValueCmd$Response = $tab_SelectByTupleValueCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectDataServerDataSourceForProxyCmd
	var $tab_SelectDataServerDataSourceForProxyCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SelectDataServerDataSourceForProxyCmd$Response]).call(this);
	};
	$tab_SelectDataServerDataSourceForProxyCmd.__typeName = 'tab.SelectDataServerDataSourceForProxyCmd';
	global.tab.SelectDataServerDataSourceForProxyCmd = $tab_SelectDataServerDataSourceForProxyCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectDataServerDataSourceForProxyCmd.Response
	var $tab_SelectDataServerDataSourceForProxyCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SelectDataServerDataSourceForProxyCmd$Response.__typeName = 'tab.SelectDataServerDataSourceForProxyCmd$Response';
	global.tab.SelectDataServerDataSourceForProxyCmd$Response = $tab_SelectDataServerDataSourceForProxyCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectExtensionAndAddToDashboardCmd
	var $tab_SelectExtensionAndAddToDashboardCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SelectExtensionAndAddToDashboardCmd$Response]).call(this);
	};
	$tab_SelectExtensionAndAddToDashboardCmd.__typeName = 'tab.SelectExtensionAndAddToDashboardCmd';
	global.tab.SelectExtensionAndAddToDashboardCmd = $tab_SelectExtensionAndAddToDashboardCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectExtensionAndAddToDashboardCmd.Response
	var $tab_SelectExtensionAndAddToDashboardCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SelectExtensionAndAddToDashboardCmd$Response.__typeName = 'tab.SelectExtensionAndAddToDashboardCmd$Response';
	global.tab.SelectExtensionAndAddToDashboardCmd$Response = $tab_SelectExtensionAndAddToDashboardCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectionClientCommands
	var $tab_SelectionClientCommands = function() {
	};
	$tab_SelectionClientCommands.__typeName = 'tab.SelectionClientCommands';
	$tab_SelectionClientCommands.get_$log = function SelectionClientCommands$get_Log() {
		return tab.Logger.lazyGetLogger($tab_SelectionClientCommands);
	};
	$tab_SelectionClientCommands.setActiveZone = function SelectionClientCommands$SetActiveZone(newActiveZoneID, zoneSelectionType, sheetPath) {
		if (!tsConfig.allow_select) {
			return;
		}
		if ($tab_ModelUtils.isActiveZone(newActiveZoneID)) {
			return;
		}
		$tab_CommandController.SendCommand($tab_SelectionClientCommands.$buildActiveZoneClientCommand(newActiveZoneID, sheetPath, zoneSelectionType));
	};
	$tab_SelectionClientCommands.clearActiveZone = function SelectionClientCommands$ClearActiveZone() {
		$tab_SelectionClientCommands.setActiveZone(0, 'replace', null);
	};
	$tab_SelectionClientCommands.updateShowMeCommandsForSelectedFields = function SelectionClientCommands$UpdateShowMeCommandsForSelectedFields(fieldNames, dataSourceName, callback) {
		var cmdParams = {};
		cmdParams['fieldVector'] = fieldNames;
		cmdParams['worksheet'] = tsConfig.current_sheet_name;
		cmdParams['datasource'] = dataSourceName;
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-show-me' }, cmdParams);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'none', function(pm) {
			callback(pm);
		}, function(x) {
			callback(null);
		}));
	};
	$tab_SelectionClientCommands.toggleLegendHighlight = function SelectionClientCommands$ToggleLegendHighlight(zoneId, visualId, regionPart, fieldNames, successCallback) {
		if (!tsConfig.allow_highlight) {
			return;
		}
		var hilightCmd = $tab_SelectionClientCommands.$buildToggleLegendHighlightCommand(visualId, regionPart, fieldNames, successCallback, zoneId);
		$tab_CommandController.SendCommand(hilightCmd);
	};
	$tab_SelectionClientCommands.selectRectRegionAndDoUbertip = function SelectionClientCommands$SelectRectRegionAndDoUbertip(region, selRect, action, visualId, tooltipCallback, behavior, fieldNames) {
		if (!tsConfig.allow_select) {
			return;
		}
		var cmdParams = $tab_SelectionClientCommands.$createSelectRegionParams(selRect, region, action, visualId, fieldNames, behavior);
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'select-region-no-return-server' }, cmdParams);
		$tab_SelectionClientCommands.$selectRegionAndDoUbertip(tooltipCallback, cmd);
	};
	$tab_SelectionClientCommands.selectCircleRegionAndDoUbertip = function SelectionClientCommands$SelectCircleRegionAndDoUbertip(region, selRect, selCircle, action, visualId, tooltipCallback, radialDistanceHitTest) {
		if (!tsConfig.allow_select) {
			return;
		}
		var cmdParams = $tab_SelectionClientCommands.$createSelectRegionParams(selRect, region, action, visualId, null, null);
		var circlePresModel = {};
		circlePresModel.center = {};
		circlePresModel.center.x = Math.round(selCircle.center.x);
		circlePresModel.center.y = Math.round(selCircle.center.y);
		circlePresModel.radius = Math.round(selCircle.radius);
		cmdParams['radialSelection'] = circlePresModel;
		cmdParams['radialDistanceHitTest'] = radialDistanceHitTest;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'select-radial-region-no-return-server' }, cmdParams);
		$tab_SelectionClientCommands.$selectRegionAndDoUbertip(tooltipCallback, cmd);
	};
	$tab_SelectionClientCommands.selectPolyRegionAndDoUbertip = function SelectionClientCommands$SelectPolyRegionAndDoUbertip(region, selRect, selPoints, action, visualId, tooltipCallback) {
		if (!tsConfig.allow_select) {
			return;
		}
		var cmdParams = $tab_SelectionClientCommands.$createSelectRegionParams(selRect, region, action, visualId, null, null);
		var numPoints = selPoints.length;
		var pointsPresModel = new Array(numPoints);
		for (var i = 0; i < numPoints; i++) {
			var pointPresModel = {};
			pointPresModel.x = Math.round(selPoints[i].x);
			pointPresModel.y = Math.round(selPoints[i].y);
			pointsPresModel[i] = pointPresModel;
		}
		cmdParams['lassoSelection'] = pointsPresModel;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'select-lasso-region-no-return-server' }, cmdParams);
		$tab_SelectionClientCommands.$selectRegionAndDoUbertip(tooltipCallback, cmd);
	};
	$tab_SelectionClientCommands.clearAllSelections = function SelectionClientCommands$ClearAllSelections(visualId) {
		if (!tsConfig.allow_select) {
			return;
		}
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		if (zoneId !== -1 && !$tab_ModelUtils.isActiveZone(zoneId)) {
			$tab_SelectionClientCommands.setActiveZone(zoneId, 'replace', null);
			return;
		}
		var c = $tab_SelectionClientCommands.$buildClearAllSelectionsCommand(visualId);
		$tab_CommandController.SendCommand(c);
	};
	$tab_SelectionClientCommands.selectLegendItemsLocal = function SelectionClientCommands$SelectLegendItemsLocal(zoneId, action, selectedItems, visualId, model, type, legendHasSelection) {
		if (!tsConfig.allow_select) {
			return;
		}
		if (tab.MiscUtil.isNullOrEmpty$1(selectedItems) && !legendHasSelection) {
			return;
		}
		var cmd = $tab_SelectionClientCommands.buildSelectLegendItemsLocalCommand(zoneId, action, selectedItems, visualId, model, type);
		$tab_CommandController.SendCommand(cmd);
	};
	$tab_SelectionClientCommands.clearHighlighting = function SelectionClientCommands$ClearHighlighting(dataHighlighterModel, fieldName, visualId, doFastLocalHighlighting) {
		var remoteCommand = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'clear-highlighting' }, null);
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['fn'] = fieldName;
		remoteCommand.commandParams = cmdParams;
		var clientCommand = new $tab_ClientCommand('none', function(t) {
			if (doFastLocalHighlighting) {
				$tab_SelectionClientCommands.$clearLegendSelectionModels(t, visualId);
				$tab_SelectionClientCommands.$updateBrushingForDataHighlighter([], dataHighlighterModel, $tab_ModelUtils.getVisualModelFromVisualId(visualId, null), t);
			}
		}, remoteCommand, null, null);
		$tab_CommandController.SendCommand(clientCommand);
	};
	$tab_SelectionClientCommands.highlightItems = function SelectionClientCommands$HighlightItems(dataHighlighterModel, fieldName, objectIds, visualId, doFastLocalHighlighting) {
		var remoteCommand = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'highlight-items' }, null);
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['fn'] = fieldName;
		cmdParams['objectIds'] = objectIds;
		remoteCommand.commandParams = cmdParams;
		var clientCommand = new $tab_ClientCommand('none', function(t) {
			if (doFastLocalHighlighting) {
				if (objectIds.length === 0) {
					$tab_SelectionClientCommands.$clearLegendSelectionModels(t, visualId);
				}
				$tab_SelectionClientCommands.$updateBrushingForDataHighlighter(objectIds, dataHighlighterModel, $tab_ModelUtils.getVisualModelFromVisualId(visualId, null), t);
			}
		}, remoteCommand, null, null);
		$tab_CommandController.SendCommand(clientCommand);
	};
	$tab_SelectionClientCommands.selectNode = function SelectionClientCommands$SelectNode(region, coords, action, visualListModel, selectedNode, visualId, tooltipCallback) {
		if (!tsConfig.allow_select) {
			return;
		}
		$tab_SelectionClientCommands.get_$log().debug('SelectNode: %o. %s', [selectedNode, visualId.worksheet]);
		var cmd = $tab_SelectionClientCommands.$buildSelectNodeCommand(region, coords, action, visualListModel, selectedNode, visualId, tooltipCallback);
		$tab_CommandController.SendCommand(cmd);
	};
	$tab_SelectionClientCommands.selectMarksLocal = function SelectionClientCommands$SelectMarksLocal(selectedMarkIDs, visualId, action, isAreaSelection, tooltipCallback) {
		if (!tsConfig.allow_select) {
			return;
		}
		$tab_SelectionClientCommands.get_$log().debug('SelectMarksLocal: %o. %s', [selectedMarkIDs, visualId.worksheet]);
		if ($tab_ApplicationModel.get_instance().get_isOffline()) {
			var command = $tab_SelectionClientCommands.buildSelectMarksLocalCommand(selectedMarkIDs, visualId, action, isAreaSelection, null);
			$tab_CommandController.SendCommand(command);
			tooltipCallback();
			tabBootstrap.ViewerBootstrap.get_instance().apiResponder.sendEventNotification('api.MarksSelectionChangedEvent', visualId.worksheet, null);
		}
		else {
			var compositeCommand = $tab_SelectionClientCommands.buildSelectMarksLocalCommand(selectedMarkIDs, visualId, action, isAreaSelection, tooltipCallback);
			$tab_CommandController.SendCommand(compositeCommand);
		}
	};
	$tab_SelectionClientCommands.selectRefLinesLocal = function SelectionClientCommands$SelectRefLinesLocal(selectedRefLineIDs, visualId, action, tooltipCallback) {
		if (!tsConfig.allow_select) {
			return;
		}
		$tab_SelectionClientCommands.get_$log().debug('SelectRefLinesLocal: %o. %s', [selectedRefLineIDs, visualId.worksheet]);
		if ($tab_ApplicationModel.get_instance().get_isOffline()) {
			var command = $tab_SelectionClientCommands.$buildSelectRefLinesLocalCommand(selectedRefLineIDs, visualId, action, null);
			$tab_CommandController.SendCommand(command);
			tooltipCallback();
		}
		else {
			var compositeCommand = $tab_SelectionClientCommands.$buildSelectRefLinesLocalCommand(selectedRefLineIDs, visualId, action, tooltipCallback);
			$tab_CommandController.SendCommand(compositeCommand);
		}
	};
	$tab_SelectionClientCommands.buildSelectMarksLocalCommand = function SelectionClientCommands$BuildSelectMarksLocalCommand(selectedMarkIDs, visualId, action, isAreaSelection, tooltipCallback) {
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		var vm = $tab_ModelUtils.getVisualModelFromVisualId(visualId, null);
		var selectionsModel = vm.get_selectionsModel();
		var tupleSelection = selectionsModel.tupleSelection;
		var commandBlockingOption = $tab_ActionUtils.computeCommandBlockingOptionForLocallyRenderedSelection(visualId);
		var cmd;
		if (tab.FeatureFlags.isEnabled('RuntimeUnifySelectionCommands')) {
			cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'select-mark' }, $tab_SelectionClientCommands.$createSelectionParams(selectedMarkIDs, 'tuples', action, visualId));
		}
		else {
			cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'select' }, $tab_SelectionClientCommands.$createSelectionParams(selectedMarkIDs, 'tuples', action, visualId));
		}
		var setActiveZone = zoneId !== -1 && !$tab_ModelUtils.isActiveZone(zoneId);
		var useLocalCommand = setActiveZone || !$tab_ApplicationModel.get_instance().get_isTableCalcHighlightingMode();
		var localCommand = function(t) {
			if (setActiveZone) {
				$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, t, 'replace');
			}
			if ($tab_ApplicationModel.get_instance().get_isTableCalcHighlightingMode()) {
				return;
			}
			var selectedObjectIds = $tab_SelectionUtils.resolveMarkSelection(action, selectedMarkIDs, tupleSelection, isAreaSelection);
			var newSelection = t.makeMutablePresModel(tupleSelection, false);
			newSelection.objectIds = selectedObjectIds;
			if (action !== 'toggle' && action !== 'range') {
				$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, selectionsModel.nodeSelection, vm);
			}
			var $t1 = selectionsModel.get_allLegendSelections();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var legendSelection = $t1[$t2];
				$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, legendSelection, vm);
			}
			$tab_SelectionClientCommands.$clearAllButMasterSelection(t, visualId, true);
			var selectedTuples = vm.getEffectiveSelectedTuples(selectedObjectIds);
			$tab_ActionUtils.executeActions(visualId, 'on-select', selectedTuples, t, true);
			$tab_SelectionClientCommands.updateInstantRefLineLocal(vm, t, selectedTuples);
		};
		var selectCommand = new $tab_ClientCommand(commandBlockingOption, (useLocalCommand ? localCommand : null), cmd, function(pm) {
			if (ss.isValue(tooltipCallback)) {
				tooltipCallback();
			}
		}, null);
		return selectCommand;
	};
	$tab_SelectionClientCommands.$buildSelectRefLinesLocalCommand = function SelectionClientCommands$BuildSelectRefLinesLocalCommand(selectedReflineIDs, visualId, action, tooltipCallback) {
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'select' }, $tab_SelectionClientCommands.$createSelectionParams(selectedReflineIDs, 'ref-lines', action, visualId));
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		var setActiveZone = zoneId !== -1 && !$tab_ModelUtils.isActiveZone(zoneId);
		var localCommand = function(t) {
			if (setActiveZone) {
				$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, t, 'replace');
			}
			var vm = $tab_ModelUtils.getVisualModelFromVisualId(visualId, null);
			var existingRefLineSelection = vm.get_selectionsModel().refLineSelection;
			var newSelectedRefLineIDs = $tab_SelectionUtils.resolveRefLineSelection(action, selectedReflineIDs, existingRefLineSelection);
			$tab_SelectionClientCommands.clearAllIncludingMasterSelection(t);
			$tab_ActionUtils.executeActions(visualId, 'on-select', [], t, true);
			var newRefLineSelection = t.makeMutablePresModel(existingRefLineSelection, false);
			newRefLineSelection.objectIds = newSelectedRefLineIDs;
		};
		var selectCommand = new $tab_ClientCommand('none', localCommand, cmd, function(pm) {
			if (ss.isValue(tooltipCallback)) {
				tooltipCallback();
			}
		}, null);
		return selectCommand;
	};
	$tab_SelectionClientCommands.$buildClearAllSelectionsCommand = function SelectionClientCommands$BuildClearAllSelectionsCommand(visualId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'select-none' }, cmdParams);
		var c = new $tab_ClientCommand(($tab_ApplicationModel.get_instance().get_isLocalRenderMode() ? 'none' : 'afterDelay'), function(t) {
			if ($tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
				var change = $tab_SelectionClientCommands.clearAllIncludingMasterSelection(t);
				if (change) {
					$tab_ActionUtils.executeActions(visualId, 'on-select', [], t, true);
					$tab_SelectionClientCommands.$clearInstantRefLineLocal($tab_ModelUtils.getVisualModelFromVisualId(visualId, null), t);
				}
			}
		}, cmd, null, null);
		return c;
	};
	$tab_SelectionClientCommands.$updateBrushingFromComputedResults = function SelectionClientCommands$UpdateBrushingFromComputedResults(brushingComputer, t) {
		if (ss.isNullOrUndefined(brushingComputer) || !brushingComputer.get_isBrushingComputed()) {
			return;
		}
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = _.keys(visualModels);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var worksheet = $t1[$t2];
			if (!brushingComputer.hasBrushingForSheet(worksheet)) {
				continue;
			}
			var targetVm = visualModels[worksheet];
			$tab_SelectionClientCommands.$updateTupleBrushing(brushingComputer, t, targetVm, worksheet);
			$tab_SelectionClientCommands.$updateTrendlineBrushing(brushingComputer, t, targetVm, worksheet);
			$tab_SelectionClientCommands.$updateNodeBrushing(brushingComputer, t, targetVm, worksheet);
			var worksheetLegendBrushing = brushingComputer.getLegendBrushing(worksheet);
			var $t3 = targetVm.get_brushingsModel().get_allLegendSelections();
			for (var $t4 = 0; $t4 < $t3.length; $t4++) {
				var origLegendBrushingModel = $t3[$t4];
				$tab_SelectionClientCommands.$updateBrushingForLegendSelection(t, origLegendBrushingModel, worksheetLegendBrushing);
			}
		}
	};
	$tab_SelectionClientCommands.$updateBrushingForLegendSelection = function SelectionClientCommands$UpdateBrushingForLegendSelection(t, origLegendBrushingModel, worksheetLegendBrushing) {
		var legendSelectInfo = origLegendBrushingModel.get_selectionPresModel().legendSelectionInfo;
		var objectIds = [];
		var legendKey = $tab_BrushingComputer.$calculateLegendKey(legendSelectInfo.legendType, legendSelectInfo.legendColumns);
		if (ss.isValue(worksheetLegendBrushing[legendKey])) {
			objectIds = worksheetLegendBrushing[legendKey];
		}
		if (objectIds.length !== 0 || origLegendBrushingModel.get_selectionPresModel().objectIds.length !== 0) {
			var legendPM = t.makeMutablePresModel(origLegendBrushingModel, false);
			legendPM.objectIds = objectIds;
		}
	};
	$tab_SelectionClientCommands.$updateNodeBrushing = function SelectionClientCommands$UpdateNodeBrushing(brushingComputer, t, targetVm, worksheet) {
		var nodeBrushing = brushingComputer.getNodeBrushing(worksheet);
		if (nodeBrushing.length !== 0 || !targetVm.get_brushingsModel().nodeSelection.isEmpty) {
			var nodePm = t.makeMutablePresModel(targetVm.get_brushingsModel().nodeSelection, false);
			nodePm.selectedNodes = nodeBrushing;
		}
	};
	$tab_SelectionClientCommands.$updateTrendlineBrushing = function SelectionClientCommands$UpdateTrendlineBrushing(brushingComputer, t, targetVm, worksheet) {
		var oldTrendlineBrushing = targetVm.get_brushingsModel().trendLineSelection;
		var newTrendlineBrushingIds = brushingComputer.getTrendlineBrushing(worksheet);
		if (newTrendlineBrushingIds.length !== 0 || oldTrendlineBrushing.get_selectionPresModel().objectIds.length !== 0) {
			var trendlinePm = t.makeMutablePresModel(oldTrendlineBrushing, false);
			trendlinePm.objectIds = newTrendlineBrushingIds;
		}
	};
	$tab_SelectionClientCommands.$updateTupleBrushing = function SelectionClientCommands$UpdateTupleBrushing(brushingComputer, t, targetVm, worksheet) {
		var tupleBrushing = brushingComputer.getTupleBrushing(worksheet);
		if (tupleBrushing.length !== 0 || targetVm.get_brushingsModel().tupleSelection.get_selectionPresModel().objectIds.length !== 0) {
			var tuplePm = t.makeMutablePresModel(targetVm.get_brushingsModel().tupleSelection, false);
			tuplePm.objectIds = tupleBrushing;
			$tab_SelectionClientCommands.updateInstantRefLineLocal(targetVm, t, tupleBrushing);
		}
	};
	$tab_SelectionClientCommands.$clearAllBrushing = function SelectionClientCommands$ClearAllBrushing(t) {
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = ss.getEnumerator(Object.keys(visualModels));
		try {
			while ($t1.moveNext()) {
				var worksheetName = $t1.current();
				var targetVm = visualModels[worksheetName];
				if (targetVm.get_brushingsModel().get_isEmpty()) {
					continue;
				}
				var tuplePm = t.makeMutablePresModel(targetVm.get_brushingsModel().tupleSelection, false);
				tuplePm.objectIds = [];
				var nodePm = t.makeMutablePresModel(targetVm.get_brushingsModel().nodeSelection, false);
				nodePm.selectedNodes = [];
				var $t2 = targetVm.get_brushingsModel().get_allLegendSelections();
				for (var $t3 = 0; $t3 < $t2.length; $t3++) {
					var origLegendBrushingModel = $t2[$t3];
					if (origLegendBrushingModel.isEmpty) {
						continue;
					}
					var legendPM = t.makeMutablePresModel(origLegendBrushingModel, false);
					var objectIds = [];
					legendPM.objectIds = objectIds;
				}
				$tab_SelectionClientCommands.$clearInstantRefLineLocal(targetVm, t);
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$tab_SelectionClientCommands.$buildActiveZoneRemoteCommand = function SelectionClientCommands$BuildActiveZoneRemoteCommand(newActiveZoneID, zoneSelectionType, sheetPath) {
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-active-zone' }, null);
		var cmdParams = {};
		cmdParams['dashboardPm'] = (ss.isNullOrUndefined(sheetPath) ? $tab_ModelUtils.findContentDashboard(null).pm.sheetPath : sheetPath);
		cmdParams['zoneId'] = newActiveZoneID;
		if (tab.FeatureFlags.isEnabled('MultiSelect')) {
			cmdParams['replaceActiveZone'] = ((zoneSelectionType === 'replace') ? true : false);
		}
		cmd.commandParams = cmdParams;
		return cmd;
	};
	$tab_SelectionClientCommands.$updateBrushingForDataHighlighter = function SelectionClientCommands$UpdateBrushingForDataHighlighter(selectedItemsIds, dataHighlighterModel, visualModel, t) {
		var vizDataModel = visualModel.get_vizDataModel();
		if (ss.isNullOrUndefined(vizDataModel)) {
			return;
		}
		var vizDataField = vizDataModel.getVizDataField(dataHighlighterModel.get_fieldName());
		var fieldCaptions = [vizDataField.get_fieldCaption()];
		var brushingComputer = $tab_BrushingComputer.createBrushingComputer(dataHighlighterModel, visualModel, selectedItemsIds, fieldCaptions, true);
		$tab_SelectionClientCommands.$updateBrushingFromComputedResults(brushingComputer, t);
	};
	$tab_SelectionClientCommands.$updateBrushingForLegendSelection$1 = function SelectionClientCommands$UpdateBrushingForLegendSelection(selectedItemsIds, categoricalLegendModel, visualModel, t) {
		var brushingComputer = null;
		if (categoricalLegendModel.get_isHighlightEnabled()) {
			brushingComputer = $tab_BrushingComputer.createBrushingComputer(categoricalLegendModel, visualModel, selectedItemsIds, categoricalLegendModel.get_fieldCaptions(), categoricalLegendModel.get_isOneWay());
		}
		$tab_SelectionClientCommands.$updateBrushingFromComputedResults(brushingComputer, t);
	};
	$tab_SelectionClientCommands.$clearAllButMasterSelection = function SelectionClientCommands$ClearAllButMasterSelection(t, visualIdWhereSelectionHappened, exemptSpecifiedVisual) {
		var change = false;
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = ss.getEnumerator(Object.keys(visualModels));
		try {
			while ($t1.moveNext()) {
				var worksheetName = $t1.current();
				var isSpecifiedVisual = !ss.isNullOrUndefined(visualIdWhereSelectionHappened) && ss.referenceEquals(worksheetName, visualIdWhereSelectionHappened.worksheet);
				if (!exemptSpecifiedVisual || !isSpecifiedVisual) {
					var dashboardModel = $tab_ModelUtils.findContentDashboard(null);
					var clearAllSelections = !exemptSpecifiedVisual && isSpecifiedVisual || !$tab_ActionUtils.isWorksheetSourceOfASelectTriggeredFilterAction(dashboardModel, worksheetName);
					var visualModel = visualModels[worksheetName];
					var $t2 = visualModel.get_selectionsModel().selectionModels;
					for (var $t3 = 0; $t3 < $t2.length; $t3++) {
						var selectionModel = $t2[$t3];
						if (clearAllSelections || selectionModel.get_selectionType() !== 'tuples' && selectionModel.get_selectionType() !== 'nodes') {
							change = $tab_SelectionClientCommands.$clearSelectionModel(t, selectionModel, true) || change;
						}
					}
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return change;
	};
	$tab_SelectionClientCommands.clearAllIncludingMasterSelection = function SelectionClientCommands$ClearAllIncludingMasterSelection(t) {
		var change = false;
		var visualModels = $tab_ModelUtils.getVisualModels($tab_ApplicationModel.get_instance());
		var $t1 = ss.getEnumerator(Object.keys(visualModels));
		try {
			while ($t1.moveNext()) {
				var worksheetName = $t1.current();
				var visualModel = visualModels[worksheetName];
				var $t2 = visualModel.get_selectionsModel().selectionModels;
				for (var $t3 = 0; $t3 < $t2.length; $t3++) {
					var selectionModel = $t2[$t3];
					change = $tab_SelectionClientCommands.$clearSelectionModel(t, selectionModel, true) || change;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return change;
	};
	$tab_SelectionClientCommands.$createSelectRegionParams = function SelectionClientCommands$CreateSelectRegionParams(selRect, region, action, visualId, fieldNames, behavior) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		var vizRegionRect = new Object();
		var regionWrapper = $tab_VizRegionRectWrapper.create(vizRegionRect);
		regionWrapper.set_x(Math.round(selRect.x));
		regionWrapper.set_y(Math.round(selRect.y));
		regionWrapper.set_w(Math.round(selRect.w || 0));
		regionWrapper.set_h(Math.round(selRect.h || 0));
		regionWrapper.set_r(region);
		if (ss.isValue(fieldNames)) {
			regionWrapper.set_fns(fieldNames);
		}
		cmdParams['vizRegionRect'] = vizRegionRect;
		cmdParams['mouseAction'] = action;
		cmdParams['whitespaceSelectionBehavior'] = behavior;
		return cmdParams;
	};
	$tab_SelectionClientCommands.$createLegendSelectionParams = function SelectionClientCommands$CreateLegendSelectionParams(markIDs, visualId, legend, legendType, zoneId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		cmdParams['legendNames'] = legend.get_legendNames();
		cmdParams['legendType'] = legendType;
		cmdParams['objectIds'] = markIDs;
		cmdParams['zoneId'] = zoneId;
		return cmdParams;
	};
	$tab_SelectionClientCommands.$clearSelectionAndViewModel = function SelectionClientCommands$ClearSelectionAndViewModel(t, sel, vm) {
		if (ss.isValue(sel)) {
			$tab_SelectionClientCommands.$clearSelectionModel(t, sel, false);
			if (sel.get_selectionType() === 'nodes') {
				vm.$clearImpliedSelection(t.modelUpdateContext);
			}
		}
	};
	$tab_SelectionClientCommands.$createSelectionParams = function SelectionClientCommands$CreateSelectionParams(markIDs, type, action, visualId) {
		var cmdParams = {};
		if (ss.isValue(visualId)) {
			$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		}
		var pm = {};
		pm.objectIds = markIDs;
		pm.selectionType = type;
		cmdParams['selection'] = pm;
		cmdParams['selectOptions'] = $tab_SelectionClientCommands.$selectActionToOptionsMapping[action];
		return cmdParams;
	};
	$tab_SelectionClientCommands.setActiveZoneLocal = function SelectionClientCommands$SetActiveZoneLocal(newActiveZoneID, t, zoneSelectionType) {
		var dashModel = $tab_ModelUtils.findContentDashboard(null);
		if (ss.isNullOrUndefined(dashModel) || ss.isNullOrUndefined(dashModel.pm)) {
			return;
		}
		var dashboardPM = t.makeMutablePresModel(dashModel, false);
		if (tab.FeatureFlags.isEnabled('MultiSelect')) {
			var newActiveZoneIDArr = [newActiveZoneID];
			if (zoneSelectionType === 'add') {
				dashboardPM.activeZoneIds = dashboardPM.activeZoneIds.concat(newActiveZoneIDArr);
			}
			else if (zoneSelectionType === 'replace') {
				dashboardPM.activeZoneIds = newActiveZoneIDArr;
			}
		}
		else {
			dashboardPM.activeZoneId = newActiveZoneID;
		}
	};
	$tab_SelectionClientCommands.$clearSelectionModel = function SelectionClientCommands$ClearSelectionModel(t, selectionModel, clearOriginalModel) {
		if (selectionModel.isEmpty) {
			return false;
		}
		var selection = t.makeMutablePresModel(selectionModel, false);
		selection.objectIds = [];
		selection.selectedNodes = [];
		if (clearOriginalModel) {
			selectionModel.setOverriddenTupleIds([], t.modelUpdateContext);
		}
		return true;
	};
	$tab_SelectionClientCommands.$buildToggleLegendHighlightCommand = function SelectionClientCommands$BuildToggleLegendHighlightCommand(visualId, regionPart, fieldNames, successCallback, newActiveZoneId) {
		var setActiveZone = !$tab_ModelUtils.isActiveZone(newActiveZoneId);
		var cmdParams = {};
		cmdParams['r'] = regionPart;
		cmdParams['legendNames'] = fieldNames;
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		if (setActiveZone) {
			$tab_SelectionClientCommands.$addZoneSelectionParameters(newActiveZoneId, cmdParams);
		}
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'toggle-legend-server' }, cmdParams);
		var successWrapper = function(model) {
			if (ss.isValue(successCallback)) {
				successCallback(ss.unbox(ss.cast(model, Boolean)));
			}
		};
		return new $tab_ClientCommand('immediately', function(t) {
			if (setActiveZone) {
				$tab_SelectionClientCommands.setActiveZoneLocal(newActiveZoneId, t, 'replace');
			}
		}, cmd, successWrapper, null);
	};
	$tab_SelectionClientCommands.$addZoneSelectionParameters = function SelectionClientCommands$AddZoneSelectionParameters(newActiveZoneId, cmdParams) {
		cmdParams['dashboardPm'] = $tab_ModelUtils.findContentDashboard(null).pm.sheetPath;
		cmdParams['zoneId'] = newActiveZoneId;
	};
	$tab_SelectionClientCommands.$selectRegionAndDoUbertip = function SelectionClientCommands$SelectRegionAndDoUbertip(tooltipCallback, cmd) {
		cmd.commandNamespace = 'tabsrv';
		var selectCmd = new $tab_ClientCommand('afterDelay', null, cmd, function() {
			tooltipCallback();
		}, null);
		$tab_CommandController.SendCommand(selectCmd);
	};
	$tab_SelectionClientCommands.$clearLegendSelectionModels = function SelectionClientCommands$ClearLegendSelectionModels(t, visualId) {
		var vm = $tab_ModelUtils.getVisualModelFromVisualId(visualId, null);
		var selectionsModel = vm.get_selectionsModel();
		var $t1 = selectionsModel.get_allLegendSelections();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var legendSelection = $t1[$t2];
			$tab_SelectionClientCommands.$clearSelectionModel(t, legendSelection, false);
		}
		$tab_SelectionClientCommands.$clearInstantRefLineLocal(vm, t);
	};
	$tab_SelectionClientCommands.buildSelectLegendItemsLocalCommand = function SelectionClientCommands$BuildSelectLegendItemsLocalCommand(zoneId, action, selectedItems, visualId, model, type) {
		var vm = $tab_ModelUtils.getVisualModelFromVisualId(visualId, null);
		var selectionsModel = vm.get_selectionsModel();
		var legendSelection = selectionsModel.getLegendSelection(type, model.get_legendNames());
		var selectedObjectIds = $tab_SelectionUtils.resolveLegendSelection(action, selectedItems, model, legendSelection);
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'select-legend-items' }, $tab_SelectionClientCommands.$createLegendSelectionParams(selectedObjectIds, visualId, model, type, zoneId));
		var selectCmd = new $tab_ClientCommand('none', function(t) {
			$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, t, 'replace');
			if (!legendSelection.isAnyLegendItemSelected() && selectedObjectIds.length === 0 && !$tab_ModelUtils.isActiveZone(zoneId)) {
				return;
			}
			var selection = t.makeMutablePresModel(legendSelection, false);
			selection.objectIds = selectedObjectIds;
			selection.legendSelectionInfo = { legendType: model.get_legendTypeEnum(), legendColumns: model.get_legendNames() };
			$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, selectionsModel.tupleSelection, vm);
			$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, selectionsModel.nodeSelection, vm);
			var $t1 = selectionsModel.get_allLegendSelections();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var legendSelectionModel = $t1[$t2];
				if (!ss.referenceEquals(legendSelectionModel, legendSelection)) {
					$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, legendSelectionModel, vm);
				}
			}
			$tab_SelectionClientCommands.$clearAllButMasterSelection(t, visualId, true);
			$tab_SelectionClientCommands.$updateBrushingForLegendSelection$1(selectedObjectIds, model, vm, t);
		}, cmd, null, null);
		return selectCmd;
	};
	$tab_SelectionClientCommands.$buildSelectNodeCommand = function SelectionClientCommands$BuildSelectNodeCommand(region, coords, action, visualListModel, selectedNode, visualId, tooltipCallback) {
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		var vm = $tab_ModelUtils.getVisualModelFromVisualId(visualId, null);
		var selectionsModel = vm.get_selectionsModel();
		var nodeSelection = selectionsModel.nodeSelection;
		var commandBlockingOption = $tab_ActionUtils.computeCommandBlockingOptionForLocallyRenderedSelection(visualId);
		var NodeMarginSize = 2;
		var extents = null;
		if (ss.isValue(selectedNode.extentsWidth) && ss.isValue(selectedNode.extentsHeight)) {
			var x = selectedNode.extentsX || 0;
			var y = selectedNode.extentsY || 0;
			extents = { x: x, y: y, w: selectedNode.extentsWidth, h: selectedNode.extentsHeight };
		}
		var shiftedCoords = tab.RectXYUtil.shiftCoordsTowardsCenter(coords, extents, NodeMarginSize);
		var selRect = { x: shiftedCoords.x, y: shiftedCoords.y, w: 0, h: 0 };
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'select-region-no-return-server' }, null);
		cmd.commandParams = $tab_SelectionClientCommands.$createSelectRegionParams(selRect, region, action, visualId, null, null);
		var setActiveZone = zoneId !== -1 && !$tab_ModelUtils.isActiveZone(zoneId);
		if (setActiveZone) {
			$tab_SelectionClientCommands.$addZoneSelectionParameters(zoneId, cmd.commandParams);
		}
		var useLocalCommand = setActiveZone || !$tab_ApplicationModel.get_instance().get_isTableCalcHighlightingMode();
		var localCommand = function(t) {
			if (setActiveZone) {
				$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, t, 'replace');
			}
			if ($tab_ApplicationModel.get_instance().get_isTableCalcHighlightingMode()) {
				return;
			}
			var newSelection = t.makeMutablePresModel(nodeSelection, false);
			$tab_SelectionUtils.resolveNodeSelection(action, visualListModel.get_groupItemNodes(), selectedNode, nodeSelection, newSelection);
			var discardTupleSelections = action !== 'toggle' && action !== 'range';
			var selectedTuples = selectionsModel.tupleSelection.get_ids();
			if (discardTupleSelections) {
				$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, selectionsModel.tupleSelection, vm);
				selectedTuples = [];
			}
			var $t1 = selectionsModel.get_allLegendSelections();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var legendSelection = $t1[$t2];
				$tab_SelectionClientCommands.$clearSelectionAndViewModel(t, legendSelection, vm);
			}
			$tab_SelectionClientCommands.$clearAllButMasterSelection(t, visualId, true);
			vm.$handleImpliedSelection(newSelection.selectedNodes, t.modelUpdateContext);
			var selectedTupleIDs = vm.getEffectiveSelectedTuples(selectedTuples);
			$tab_ActionUtils.executeActions(visualId, 'on-select', selectedTupleIDs, t, true);
			$tab_SelectionClientCommands.updateInstantRefLineLocal(vm, t, selectedTupleIDs);
		};
		var selectCommand = new $tab_ClientCommand(commandBlockingOption, (useLocalCommand ? localCommand : null), cmd, function() {
			if (ss.isValue(tooltipCallback)) {
				tooltipCallback();
			}
		}, null);
		return selectCommand;
	};
	$tab_SelectionClientCommands.$buildActiveZoneClientCommand = function SelectionClientCommands$BuildActiveZoneClientCommand(newActiveZoneID, sheetPath, zoneSelectionType) {
		var c = new $tab_ClientCommand('none', function(t) {
			$tab_SelectionClientCommands.setActiveZoneLocal(newActiveZoneID, t, zoneSelectionType);
		}, $tab_SelectionClientCommands.$buildActiveZoneRemoteCommand(newActiveZoneID, zoneSelectionType, sheetPath), null, null);
		return c;
	};
	$tab_SelectionClientCommands.$clearInstantRefLineLocal = function SelectionClientCommands$ClearInstantRefLineLocal(visualModel, t) {
		$tab_SelectionClientCommands.updateInstantRefLineLocal(visualModel, t, []);
	};
	$tab_SelectionClientCommands.updateInstantRefLineLocal = function SelectionClientCommands$UpdateInstantRefLineLocal(visualModel, t, tupleIDs) {
		if (!tab.FeatureFlags.isEnabled('RuntimeInstantRefLine') || !tab.FeatureFlags.isEnabled('RuntimeWebInstantRefLine')) {
			return;
		}
		var func = function(handles) {
			var rp = new tab.RuePacker();
			rp.addInt64Array((new tab.LayoutInputStoreKeys()).selectionData().tupleSelection().toString(), tab.RuePacker.uInt32ArrayToInt64Array(tupleIDs));
			return tab.RuntimeWebModule.proxy.rueUpdateCommandHex(handles.get_VM(), tab.HexEncoder.encodeBufferToHex(rp.pack()));
		};
		visualModel.updateRuntimeHandles(t, 1, func);
	};
	global.tab.SelectionClientCommands = $tab_SelectionClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectionModel
	var $tab_SelectionModel = function(parent, index) {
		this.$overriddenTupleIds = null;
		this.$selectedNodesLookup = null;
		this.$selectedLegendItemsLookup = null;
		this.$2$NewSelectionField = null;
		this.isEmpty = false;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString(), null));
		this.isEmpty = true;
	};
	$tab_SelectionModel.__typeName = 'tab.SelectionModel';
	$tab_SelectionModel.$makeSelectionKey = function SelectionModel$MakeSelectionKey(colIndices, valueIndices, orientation, axisName, duplicateIndex, pageIndex) {
		var builder = new ss.StringBuilder();
		if (ss.isValue(colIndices)) {
			builder.append(colIndices.join(';'));
		}
		builder.append('=');
		if (ss.isValue(valueIndices)) {
			builder.append(valueIndices.join(';'));
		}
		builder.append('=');
		if (ss.isValue(orientation)) {
			builder.append(orientation);
		}
		builder.append('=');
		if (ss.isValue(axisName)) {
			builder.append(axisName);
			builder.append('+');
			if (ss.isValue(duplicateIndex)) {
				builder.append(duplicateIndex);
			}
		}
		builder.append('=');
		if (ss.isValue(pageIndex)) {
			builder.append(pageIndex);
		}
		return builder.toString();
	};
	global.tab.SelectionModel = $tab_SelectionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.SelectionsDifference
	var $tab_SelectionsDifference = function(invalidateViz, reason, objectIds) {
		this.$1$InvalidateVizField = false;
		this.$1$ReasonField = 0;
		this.$1$ObjectIdsField = null;
		this.set_invalidateViz(invalidateViz);
		this.set_reason(reason);
		this.set_objectIds(objectIds || []);
	};
	$tab_SelectionsDifference.__typeName = 'tab.SelectionsDifference';
	$tab_SelectionsDifference.noDifference = function SelectionsDifference$NoDifference() {
		return new $tab_SelectionsDifference(false, 0, null);
	};
	global.tab.SelectionsDifference = $tab_SelectionsDifference;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Utility.SelectionsDiffReason
	var $tab_SelectionsDiffReason = function() {
	};
	$tab_SelectionsDiffReason.__typeName = 'tab.SelectionsDiffReason';
	global.tab.SelectionsDiffReason = $tab_SelectionsDiffReason;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectionsModel
	var $tab_SelectionsModel = function(parent, pathName) {
		this.$2$NewSelectionsField = null;
		this.selectionModels = null;
		this.tupleSelection = null;
		this.nodeSelection = null;
		this.refLineSelection = null;
		this.trendLineSelection = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(pathName, 1));
		this.selectionModels = [];
		var noopContext = $tab_NoopModelEventsHandler.get_noopContext();
		this.tupleSelection = this.$addSelectionModel('tuples', noopContext);
		this.nodeSelection = this.$addSelectionModel('nodes', noopContext);
		this.trendLineSelection = this.$addSelectionModel('trend-lines', noopContext);
		this.refLineSelection = this.$addSelectionModel('ref-lines', noopContext);
	};
	$tab_SelectionsModel.__typeName = 'tab.SelectionsModel';
	$tab_SelectionsModel.$createEmptySelectionPm = function SelectionsModel$CreateEmptySelectionPm(type) {
		var pm = { selectionType: type };
		switch (type) {
			case 'ref-lines':
			case 'trend-lines':
			case 'annotations':
			case 'tuples': {
				pm.objectIds = [];
				break;
			}
			case 'legend-items': {
				pm.legendSelectionInfo = {};
				pm.objectIds = [];
				break;
			}
			case 'nodes': {
				pm.selectedNodes = [];
				break;
			}
			default: {
				ss.Debug.fail('Unknown selection type: ' + type);
				break;
			}
		}
		return pm;
	};
	$tab_SelectionsModel.$computeTupleArrayDifference = function SelectionsModel$ComputeTupleArrayDifference(arr1, arr2) {
		var difference = [];
		var tupleSet = new Set();
		for (var $t1 = 0; $t1 < arr1.length; $t1++) {
			var tuple = arr1[$t1];
			tupleSet.add(tuple);
		}
		for (var $t2 = 0; $t2 < arr2.length; $t2++) {
			var tuple1 = arr2[$t2];
			if (tupleSet.has(tuple1)) {
				tupleSet.delete(tuple1);
			}
			else {
				difference.push(tuple1);
			}
		}
		tupleSet.forEach(function(tuple2) {
			difference.push(tuple2);
		});
		return difference;
	};
	$tab_SelectionsModel.computeTupleDictionaryDifference = function SelectionsModel$ComputeTupleDictionaryDifference(set1, set2) {
		var localSet1 = tab.MapUtility.createCopy(String, ss.Int32).call(null, set1);
		var localSet2 = tab.MapUtility.createCopy(String, ss.Int32).call(null, set2);
		var diffTuples = [];
		localSet1.forEach(function(value, key) {
			if (!localSet2.has(key)) {
				diffTuples.push(localSet1.get(key));
			}
			else {
				localSet2.delete(key);
			}
		});
		localSet2.forEach(function(value1, key1) {
			diffTuples.push(localSet2.get(key1));
		});
		return diffTuples;
	};
	global.tab.SelectionsModel = $tab_SelectionsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelectionsPresModel
	var $tab_SelectionsPresModel = function() {
		this.selections = null;
	};
	$tab_SelectionsPresModel.__typeName = 'tab.SelectionsPresModel';
	global.tab.SelectionsPresModel = $tab_SelectionsPresModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.SelectionUtils
	var $tab_SelectionUtils = function() {
	};
	$tab_SelectionUtils.__typeName = 'tab.SelectionUtils';
	$tab_SelectionUtils.isCategoricalAndTupleAssociatedHeader = function SelectionUtils$IsCategoricalAndTupleAssociatedHeader(node) {
		if (tab.MiscUtil.isNullOrEmpty$2(node)) {
			return false;
		}
		return !$tab_SelectionUtils.isHeaderFullyQuantitativeOrHaveNoAssociatedTuples(node) && tab.MiscUtil.isNullOrEmpty$3(node.fn) && !tab.MiscUtil.isNullOrEmpty$2(node.columnIndices);
	};
	$tab_SelectionUtils.isHeaderFullyQuantitativeOrHaveNoAssociatedTuples = function SelectionUtils$IsHeaderFullyQuantitativeOrHaveNoAssociatedTuples(node) {
		if (tab.MiscUtil.isNullOrEmpty$2(node)) {
			return false;
		}
		return tab.MiscUtil.isNullOrEmpty$2(node.columnIndices) && !tab.MiscUtil.isNullOrEmpty$3(node.fn);
	};
	$tab_SelectionUtils.isQuantitative = function SelectionUtils$IsQuantitative(drawGroup) {
		return ss.isValue(drawGroup) && ss.isValue(drawGroup.node) && ss.isValue(drawGroup.node.fn);
	};
	$tab_SelectionUtils.resolveLegendSelection = function SelectionUtils$ResolveLegendSelection(action, selectedItems, legend, currentSelection) {
		var finalObjectIds = [];
		if (ss.isValue(selectedItems)) {
			var currSelPreModel = currentSelection.get_selectionPresModel() || {};
			switch (action) {
				case 'toggle': {
					if (ss.isValue(currSelPreModel.objectIds)) {
						ss.arrayAddRange(finalObjectIds, currSelPreModel.objectIds);
					}
					for (var $t1 = 0; $t1 < selectedItems.length; $t1++) {
						var item = selectedItems[$t1];
						var indexOfitem = ss.indexOf(finalObjectIds, item.objectId);
						if (indexOfitem >= 0) {
							ss.removeAt(finalObjectIds, indexOfitem);
						}
						else {
							finalObjectIds.push(item.objectId);
						}
					}
					break;
				}
				case 'range': {
					finalObjectIds = $tab_SelectionUtils.$handleLegendRangeSelection(selectedItems, legend, currSelPreModel);
					break;
				}
				case 'simple': {
					var currSelIds = (ss.isValue(currSelPreModel.objectIds) ? currSelPreModel.objectIds : []);
					if (currSelIds.length <= 1) {
						for (var $t2 = 0; $t2 < selectedItems.length; $t2++) {
							var item1 = selectedItems[$t2];
							var indexOfitem1 = ss.indexOf(currSelIds, item1.objectId);
							if (indexOfitem1 >= 0) {
								ss.removeAt(finalObjectIds, indexOfitem1);
							}
							else {
								finalObjectIds.push(item1.objectId);
							}
						}
					}
					else {
						ss.arrayAddRange(finalObjectIds, _.pluck(selectedItems, 'objectId'.toString()));
					}
					break;
				}
			}
		}
		return Array.prototype.slice.call(finalObjectIds);
	};
	$tab_SelectionUtils.resolveMarkSelection = function SelectionUtils$ResolveMarkSelection(action, selectedMarkIDs, currentSelection, isAreaSelection) {
		var resultingMarkIDs = [];
		switch (action) {
			case 'simple': {
				if (!isAreaSelection && selectedMarkIDs.length === 1 && currentSelection.get_ids().length === 1 && selectedMarkIDs[0] === currentSelection.get_ids()[0]) {
					ss.clear(resultingMarkIDs);
				}
				else {
					ss.arrayAddRange(resultingMarkIDs, selectedMarkIDs);
				}
				break;
			}
			case 'range':
			case 'toggle': {
				ss.arrayAddRange(resultingMarkIDs, currentSelection.get_ids());
				for (var $t1 = 0; $t1 < selectedMarkIDs.length; $t1++) {
					var markID = selectedMarkIDs[$t1];
					if (!currentSelection.isObjectSelected(markID)) {
						resultingMarkIDs.push(markID);
					}
					else if (!isAreaSelection) {
						ss.remove(resultingMarkIDs, markID);
					}
				}
				break;
			}
		}
		return Array.prototype.slice.call(resultingMarkIDs);
	};
	$tab_SelectionUtils.resolveRefLineSelection = function SelectionUtils$ResolveRefLineSelection(action, selectedRefLineIDs, currentSelection) {
		var resolvedRefLineIDs = [];
		if (action === 'simple' || action === 'toggle') {
			if (selectedRefLineIDs.length === 1 && currentSelection.get_ids().length === 1 && selectedRefLineIDs[0] === currentSelection.get_ids()[0]) {
				ss.clear(resolvedRefLineIDs);
			}
			else {
				ss.arrayAddRange(resolvedRefLineIDs, selectedRefLineIDs);
			}
		}
		return Array.prototype.slice.call(resolvedRefLineIDs);
	};
	$tab_SelectionUtils.resolveNodeSelection = function SelectionUtils$ResolveNodeSelection(action, regionNodes, selectedNode, currentSelection, selectionToUpdate) {
		var updatedSelection = null;
		if (ss.isValue(selectedNode)) {
			switch (action) {
				case 'simple': {
					updatedSelection = $tab_SelectionUtils.$handleNodeSimpleSelection(selectedNode, currentSelection);
					break;
				}
				case 'toggle': {
					updatedSelection = $tab_SelectionUtils.$handleNodeToggleSelection(selectedNode, currentSelection);
					break;
				}
				case 'range': {
					updatedSelection = $tab_SelectionUtils.$handleNodeRangeSelection(regionNodes, selectedNode, currentSelection);
					break;
				}
			}
		}
		selectionToUpdate.selectedNodes = updatedSelection || [];
	};
	$tab_SelectionUtils.$handleLegendRangeSelection = function SelectionUtils$HandleLegendRangeSelection(selectedItems, legend, currSelPreModel) {
		var finalObjectIds = [];
		if (!ss.isValue(currSelPreModel.objectIds)) {
			return finalObjectIds;
		}
		ss.arrayAddRange(finalObjectIds, currSelPreModel.objectIds);
		ss.arrayAddRange(finalObjectIds, _.pluck(selectedItems, 'objectId'.toString()));
		var lastId = currSelPreModel.objectIds[currSelPreModel.objectIds.length - 1];
		var lastIdx = -1;
		for (var i = 0; i < legend.get_items().length; i++) {
			if (legend.get_items()[i].objectId === lastId) {
				lastIdx = i;
			}
		}
		var selIdx = ((selectedItems.length > 0) ? ss.indexOf(legend.get_items(), selectedItems[0]) : -1);
		if (lastIdx < 0 || selIdx < 0) {
			return _.uniq(finalObjectIds);
		}
		var startIdx = Math.min(lastIdx, selIdx);
		var stopIdx = startIdx + Math.abs(lastIdx - selIdx) + 1;
		for (var i1 = startIdx; i1 < stopIdx; i1++) {
			finalObjectIds.push(legend.get_items()[i1].objectId);
		}
		return _.uniq(finalObjectIds);
	};
	$tab_SelectionUtils.$findNodeIndexFromSelections = function SelectionUtils$FindNodeIndexFromSelections(drawGrpNodes, selNodes, fromMostRecent, newSelColumns) {
		var colSet = new Set();
		for (var $t1 = 0; $t1 < drawGrpNodes.length; $t1++) {
			var drawGrpNode = drawGrpNodes[$t1];
			if (ss.isValue(drawGrpNode.node.columnIndices)) {
				tab.SetUtilities.addAll(ss.Int32).call(null, colSet, drawGrpNode.node.columnIndices);
			}
		}
		for (var i = 0; i < selNodes.length; i++) {
			var selNode = (fromMostRecent ? selNodes[selNodes.length - 1 - i] : selNodes[i]);
			if (ss.isValue(selNode.columnIndices) && tab.SetUtilities.interserctWith(ss.Int32).call(null, colSet, selNode.columnIndices).size === 0) {
				continue;
			}
			var nodeIndex = $tab_SelectionUtils.$findNodeIndexOfSelection(drawGrpNodes, selNode, newSelColumns);
			if (nodeIndex !== -1) {
				return nodeIndex;
			}
		}
		return -1;
	};
	$tab_SelectionUtils.$findNodeIndexOfSelection = function SelectionUtils$FindNodeIndexOfSelection(drawGrpNodes, selNode, newSelColumns) {
		if (ss.isValue(newSelColumns) && !_.isEqual(newSelColumns, selNode.columnIndices)) {
			return -1;
		}
		for (var i = 0; i < drawGrpNodes.length; i++) {
			var drawGrpNode = drawGrpNodes[i];
			if (_.isEqual(drawGrpNode.node, selNode)) {
				return i;
			}
		}
		return -1;
	};
	$tab_SelectionUtils.$handleNodeRangeSelection = function SelectionUtils$HandleNodeRangeSelection(regionNodesDrawGrps, selNodeDrawGrp, currSelModel) {
		var newSel = $tab_SelectionUtils.nodeSelectionFromDrawGroup(selNodeDrawGrp);
		var updatedSelection = currSelModel.get_nodes().slice(0);
		if (tab.MiscUtil.isNullOrEmpty$2(newSel.columnIndices) && tab.MiscUtil.isNullOrEmpty$3(newSel.fn)) {
			return updatedSelection;
		}
		if (updatedSelection.length === 0) {
			updatedSelection.push(newSel);
			return updatedSelection;
		}
		var isCat = $tab_SelectionUtils.isCategoricalAndTupleAssociatedHeader(newSel);
		var isQuant = $tab_SelectionUtils.isHeaderFullyQuantitativeOrHaveNoAssociatedTuples(newSel);
		var isMixed = !isCat && !isQuant;
		var prevSelIndex = $tab_SelectionUtils.$findNodeIndexFromSelections(regionNodesDrawGrps, currSelModel.get_nodes(), true, (isCat ? newSel.columnIndices : null));
		if (prevSelIndex === -1) {
			if (isCat || isMixed && !currSelModel.isNodeAncestorSelected(selNodeDrawGrp)) {
				updatedSelection.push(newSel);
			}
			return updatedSelection;
		}
		if (currSelModel.isNodeSelected(selNodeDrawGrp) || currSelModel.isNodeAncestorSelected(selNodeDrawGrp)) {
			return updatedSelection;
		}
		var firstSelIndex = $tab_SelectionUtils.$findNodeIndexFromSelections(regionNodesDrawGrps, currSelModel.get_nodes(), false, null);
		var firstSel = $tab_SelectionUtils.nodeSelectionFromDrawGroup(regionNodesDrawGrps[firstSelIndex]);
		if (isCat) {
			if (!_.isEqual(firstSel.columnIndices, newSel.columnIndices)) {
				updatedSelection.push(newSel);
				return updatedSelection;
			}
		}
		else {
			var sameRegion = $tab_SelectionUtils.$findNodeIndexOfSelection(regionNodesDrawGrps, firstSel, null) !== -1;
			if (isQuant && !sameRegion) {
				return updatedSelection;
			}
			if (isMixed && !sameRegion) {
				updatedSelection.push(newSel);
				return updatedSelection;
			}
		}
		var selNodeIndex = ss.indexOf(regionNodesDrawGrps, selNodeDrawGrp);
		var start = Math.min(prevSelIndex, selNodeIndex);
		var end = start + Math.abs(prevSelIndex - selNodeIndex) + 1;
		for (var i = start; i < end; i++) {
			var drawGroupInRange = regionNodesDrawGrps[i];
			var columnSetEqualToNewSelection = !isCat || _.isEqual(drawGroupInRange.node.columnIndices, newSel.columnIndices);
			if (columnSetEqualToNewSelection && !currSelModel.isNodeAncestorSelected(drawGroupInRange) && !currSelModel.isNodeSelected(drawGroupInRange)) {
				updatedSelection.push($tab_SelectionUtils.nodeSelectionFromDrawGroup(drawGroupInRange));
			}
		}
		return updatedSelection;
	};
	$tab_SelectionUtils.$handleNodeSimpleSelection = function SelectionUtils$HandleNodeSimpleSelection(selectedNode, currentSelection) {
		if (!currentSelection.isNodeSelected(selectedNode) || currentSelection.get_nodes().length > 1) {
			return [$tab_SelectionUtils.nodeSelectionFromDrawGroup(selectedNode)];
		}
		return null;
	};
	$tab_SelectionUtils.$handleNodeToggleSelection = function SelectionUtils$HandleNodeToggleSelection(selectedNode, currentSelection) {
		var updatedSelection = [];
		ss.arrayAddRange(updatedSelection, currentSelection.get_nodes());
		var existingSelection = currentSelection.findNodeSelection(selectedNode);
		if (ss.isValue(existingSelection)) {
			ss.remove(updatedSelection, existingSelection);
		}
		else if (!currentSelection.isNodeAncestorSelected(selectedNode)) {
			updatedSelection.push($tab_SelectionUtils.nodeSelectionFromDrawGroup(selectedNode));
		}
		return Array.prototype.slice.call(updatedSelection);
	};
	$tab_SelectionUtils.nodeSelectionFromDrawGroup = function SelectionUtils$NodeSelectionFromDrawGroup(drawGroup) {
		var nodeSelection = {};
		if (!ss.isValue(drawGroup.node)) {
			return nodeSelection;
		}
		var node = drawGroup.node;
		if (ss.isValue(node.columnIndices)) {
			nodeSelection.columnIndices = node.columnIndices || [];
		}
		if (ss.isValue(node.aliasIndices)) {
			nodeSelection.aliasIndices = node.aliasIndices || [];
		}
		if (ss.isValue(node.fn)) {
			nodeSelection.fn = node.fn;
		}
		if (ss.isValue(node.axisOrientation)) {
			nodeSelection.axisOrientation = node.axisOrientation;
		}
		if (ss.isValue(node.duplicateIndex)) {
			nodeSelection.duplicateIndex = node.duplicateIndex;
		}
		if (ss.isValue(node.pageIndex)) {
			nodeSelection.pageIndex = node.pageIndex;
		}
		return nodeSelection;
	};
	global.tab.SelectionUtils = $tab_SelectionUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SelfServiceSchedule
	var $tab_SelfServiceSchedule = function(scheduledAction, scheduleType, scheduleDetails) {
		this.scheduledAction = null;
		this.scheduleType = null;
		this.scheduleDetails = null;
		this.scheduledAction = scheduledAction;
		this.scheduleType = scheduleType;
		this.scheduleDetails = scheduleDetails;
	};
	$tab_SelfServiceSchedule.__typeName = 'tab.SelfServiceSchedule';
	global.tab.SelfServiceSchedule = $tab_SelfServiceSchedule;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ServerCommands
	var $tab_ServerCommands = function() {
	};
	$tab_ServerCommands.__typeName = 'tab.ServerCommands';
	$tab_ServerCommands.get_interceptorCount = function ServerCommands$get_InterceptorCount() {
		var count = 0;
		var $t1 = new ss.ObjectEnumerator($tab_ServerCommands.$commandInterceptors);
		try {
			while ($t1.moveNext()) {
				var entry = $t1.current();
				count += entry.value.length;
			}
		}
		finally {
			$t1.dispose();
		}
		return count;
	};
	$tab_ServerCommands.$createInterceptorLookup = function ServerCommands$CreateInterceptorLookup(cmdNamespace, cmdName) {
		return cmdNamespace + ':' + cmdName;
	};
	$tab_ServerCommands.executeServerCommand = function ServerCommands$ExecuteServerCommand(c, uiBlockState, successCallback, errorCallback) {
		var interceptors = $tab_ServerCommands.$commandInterceptors[$tab_ServerCommands.$createInterceptorLookup(c.commandNamespace, c.commandName)];
		if (ss.isValue(interceptors)) {
			for (var $t1 = 0; $t1 < interceptors.length; $t1++) {
				var func = interceptors[$t1];
				if (func(c) === 1) {
					return;
				}
			}
		}
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, uiBlockState, successCallback, errorCallback));
	};
	$tab_ServerCommands.intercept = function ServerCommands$Intercept(commands, c) {
		for (var $t1 = 0; $t1 < commands.length; $t1++) {
			var command = commands[$t1];
			$tab_ServerCommands.addCommandInterceptor(c, command.ns, command.cmd);
		}
		return c;
	};
	$tab_ServerCommands.addCommandInterceptor = function ServerCommands$AddCommandInterceptor(c, commandNamespace, commandName) {
		var key = $tab_ServerCommands.$createInterceptorLookup(commandNamespace, commandName);
		var interceptors = $tab_ServerCommands.$commandInterceptors[key];
		if (ss.isNullOrUndefined(interceptors)) {
			interceptors = [];
			$tab_ServerCommands.$commandInterceptors[key] = interceptors;
		}
		interceptors.push(c);
		return c;
	};
	$tab_ServerCommands.removeIntercept = function ServerCommands$RemoveIntercept(commands, c) {
		for (var $t1 = 0; $t1 < commands.length; $t1++) {
			var command = commands[$t1];
			$tab_ServerCommands.removeCommandInterceptor(c, command.ns, command.cmd);
		}
	};
	$tab_ServerCommands.removeCommandInterceptor = function ServerCommands$RemoveCommandInterceptor(c, commandNamespace, commandName) {
		var key = $tab_ServerCommands.$createInterceptorLookup(commandNamespace, commandName);
		var interceptors = $tab_ServerCommands.$commandInterceptors[key];
		if (!ss.isNullOrUndefined(interceptors)) {
			for (var i = 0; i < interceptors.length; i++) {
				if (ss.staticEquals(interceptors[i], c)) {
					ss.removeAt(interceptors, i);
					if (interceptors.length === 0) {
						delete $tab_ServerCommands.$commandInterceptors[key];
						return;
					}
				}
			}
		}
	};
	$tab_ServerCommands.clearAllCommandInterceptors = function ServerCommands$ClearAllCommandInterceptors() {
		ss.clearKeys($tab_ServerCommands.$commandInterceptors);
	};
	global.tab.ServerCommands = $tab_ServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ServerFonts
	var $tab_ServerFonts = function() {
	};
	$tab_ServerFonts.__typeName = 'tab.ServerFonts';
	$tab_ServerFonts.get_effectiveDefaultFontFamily = function ServerFonts$get_EffectiveDefaultFontFamily() {
		return [ss.formatString('"{0}"', (BrowserSupport.BrowserSupport.IsHighDpi() ? $tab_ServerFonts.bentonSans : $tab_ServerFonts.bentonSansLowDpi)), 'Arial', 'Helvetica', 'sans-serif'].join(', ');
	};
	$tab_ServerFonts.get_allCustomFonts = function ServerFonts$get_AllCustomFonts() {
		return _.union($tab_ServerFonts.tableauFontNames, $tab_ServerFonts.effectiveBentonSans);
	};
	global.tab.ServerFonts = $tab_ServerFonts;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionAjaxCallManager
	var $tab_SessionAjaxCallManager = function(session, onComplete, onSuccess, onError, usesWaitHandler, immediateWait) {
		this.$session = null;
		this.$onComplete = null;
		this.$onSuccess = null;
		this.$onError = null;
		this.$didWait = false;
		this.$session = session;
		this.$onComplete = onComplete;
		this.$onSuccess = onSuccess;
		this.$onError = onError;
		if (ss.isNullOrUndefined(usesWaitHandler) || usesWaitHandler) {
			this.$didWait = this.$session.incrementWait(immediateWait, true);
		}
	};
	$tab_SessionAjaxCallManager.__typeName = 'tab.SessionAjaxCallManager';
	global.tab.SessionAjaxCallManager = $tab_SessionAjaxCallManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionAjaxHandler
	var $tab_SessionAjaxHandler = function(session, args) {
		this.$ready = false;
		this.$originalArgs = null;
		this.$requests = 0;
		this.$interval = 1000;
		this.$url = '';
		this.$session = null;
		this.$session = session;
		this.$originalArgs = args;
		this.$url = session.formatSessionMethod('status');
	};
	$tab_SessionAjaxHandler.__typeName = 'tab.SessionAjaxHandler';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionCommands
	var $tab_SessionCommands = function() {
	};
	$tab_SessionCommands.__typeName = 'tab.SessionCommands';
	$tab_SessionCommands.ping = function SessionCommands$Ping() {
		(new $tab_PingSessionCmd()).invoke();
	};
	global.tab.SessionCommands = $tab_SessionCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionHeartbeat
	var $tab_SessionHeartbeat = function() {
	};
	$tab_SessionHeartbeat.__typeName = 'tab.SessionHeartbeat';
	$tab_SessionHeartbeat.onVizportalPinged = function SessionHeartbeat$OnVizportalPinged() {
		var now = tab.DateUtil.get_nowAsTime();
		$tab_SessionHeartbeat.$lastVizportalPing = now;
		if (now - $tab_SessionHeartbeat.$lastVizqlPing > $tab_SessionHeartbeat.$vizqlPingFrequency) {
			$tab_SessionHeartbeat.$lastVizqlPing = now;
			$tab_SessionCommands.ping();
		}
	};
	$tab_SessionHeartbeat.onVizqlPinged = function SessionHeartbeat$OnVizqlPinged() {
		var now = tab.DateUtil.get_nowAsTime();
		$tab_SessionHeartbeat.$lastVizqlPing = now;
		if (now - $tab_SessionHeartbeat.$lastVizportalPing > $tab_SessionHeartbeat.$vizportalPingFrequency) {
			$tab_SessionHeartbeat.$lastVizportalPing = now;
			$tab_WorkgroupServerCommands.extendWorkgroupSession();
		}
	};
	global.tab.SessionHeartbeat = $tab_SessionHeartbeat;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Session.SessionRecoveryErrorHandler
	var $tab_SessionRecoveryErrorHandler = function(urlRoot) {
		this.$urlRoot = null;
		this.$sessionInRecovery = null;
		this.$previousRecoveryFailed = false;
		this.$urlRoot = urlRoot;
	};
	$tab_SessionRecoveryErrorHandler.__typeName = 'tab.SessionRecoveryErrorHandler';
	$tab_SessionRecoveryErrorHandler.add_$sessionRecoveryAttempt = function SessionRecoveryErrorHandler$add_SessionRecoveryAttempt(value) {
		$tab_SessionRecoveryErrorHandler.$1$SessionRecoveryAttemptField = ss.delegateCombine($tab_SessionRecoveryErrorHandler.$1$SessionRecoveryAttemptField, value);
	};
	$tab_SessionRecoveryErrorHandler.remove_$sessionRecoveryAttempt = function SessionRecoveryErrorHandler$remove_SessionRecoveryAttempt(value) {
		$tab_SessionRecoveryErrorHandler.$1$SessionRecoveryAttemptField = ss.delegateRemove($tab_SessionRecoveryErrorHandler.$1$SessionRecoveryAttemptField, value);
	};
	$tab_SessionRecoveryErrorHandler.get_sessionRecoveryAttemptHandled = function SessionRecoveryErrorHandler$get_SessionRecoveryAttemptHandled() {
		return !ss.staticEquals($tab_SessionRecoveryErrorHandler.$1$SessionRecoveryAttemptField, null);
	};
	$tab_SessionRecoveryErrorHandler.subscribeToSessionRecoveryAttempt = function SessionRecoveryErrorHandler$SubscribeToSessionRecoveryAttempt(sessionRecoveryAttemptEventHandler) {
		if (!$tab_SessionRecoveryErrorHandler.get_sessionRecoveryAttemptHandled()) {
			$tab_SessionRecoveryErrorHandler.addSessionRecoveryAttemptHandler(sessionRecoveryAttemptEventHandler);
		}
	};
	$tab_SessionRecoveryErrorHandler.addSessionRecoveryAttemptHandler = function SessionRecoveryErrorHandler$AddSessionRecoveryAttemptHandler(sessionRecoveryAttemptEventHandler) {
		$tab_SessionRecoveryErrorHandler.add_$sessionRecoveryAttempt(sessionRecoveryAttemptEventHandler);
	};
	$tab_SessionRecoveryErrorHandler.removeSessionRecoveryAttemptHandler = function SessionRecoveryErrorHandler$RemoveSessionRecoveryAttemptHandler(sessionRecoveryAttemptEventHandler) {
		$tab_SessionRecoveryErrorHandler.remove_$sessionRecoveryAttempt(sessionRecoveryAttemptEventHandler);
	};
	$tab_SessionRecoveryErrorHandler.raiseSessionRecoveryAttemptEvent = function SessionRecoveryErrorHandler$RaiseSessionRecoveryAttemptEvent(sessionStates) {
		if ($tab_SessionRecoveryErrorHandler.get_sessionRecoveryAttemptHandled() && sessionStates.length > 0) {
			$tab_SessionRecoveryErrorHandler.$1$SessionRecoveryAttemptField();
		}
	};
	global.tab.SessionRecoveryErrorHandler = $tab_SessionRecoveryErrorHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SessionServerCommands
	var $tab_SessionServerCommands = function() {
	};
	$tab_SessionServerCommands.__typeName = 'tab.SessionServerCommands';
	$tab_SessionServerCommands.cancelLatestSetTimeout = function SessionServerCommands$CancelLatestSetTimeout() {
		window.clearTimeout($tab_SessionServerCommands.$forwardToDestTimeoutId);
	};
	$tab_SessionServerCommands.destroySessionAndForward$1 = function SessionServerCommands$DestroySessionAndForward(window2, forwardUrl) {
		var timeoutMilliseconds = 2000;
		var forwardToDest = function() {
			if (ss.referenceEquals(tab.WindowHelper.getLocation(window2).href, forwardUrl)) {
				tab.WindowHelper.reload(window2, true);
			}
			else {
				tab.WindowHelper.setLocationHref(window2, forwardUrl);
			}
		};
		var incrementTimeoutAndTryForward = null;
		incrementTimeoutAndTryForward = function() {
			forwardToDest();
			$tab_SessionServerCommands.cancelLatestSetTimeout();
			timeoutMilliseconds *= 2;
			$tab_SessionServerCommands.$forwardToDestTimeoutId = window.setTimeout(incrementTimeoutAndTryForward, timeoutMilliseconds);
		};
		var forwardAction = function() {
			forwardToDest();
			if (BrowserSupport.BrowserSupport.IsMac() && (BrowserSupport.BrowserSupport.IsChrome() || BrowserSupport.BrowserSupport.IsFF())) {
				$tab_SessionServerCommands.$forwardToDestTimeoutId = window.setTimeout(incrementTimeoutAndTryForward, timeoutMilliseconds);
			}
		};
		$tab_SessionServerCommands.destroySessionAndForward(forwardAction);
	};
	$tab_SessionServerCommands.destroySessionAndForward = function SessionServerCommands$DestroySessionAndForward(forwardAction) {
		var completedCallback = function() {
			forwardAction();
		};
		$tab_SessionServerCommands.$destroySession(completedCallback);
	};
	$tab_SessionServerCommands.$destroySession = function SessionServerCommands$DestroySession(completedCallback) {
		var session = $tab_CommandController.get().legacySession;
		$tab_BaseSession.get_waitHandler().showAndLock();
		$tab_CommandController.get().$resetAllContentReady();
		var handler = session.createHandler(completedCallback, function() {
		}, function() {
		}, 'immediately');
		var args = {};
		args.type = 'DELETE';
		args.url = session.formatSessionMethod('destroy');
		args.headers = ss.mkdict(['Accept', 'text/javascript']);
		args.dataType = 'json';
		session.request(args, handler);
	};
	$tab_SessionServerCommands.switchToViz = function SessionServerCommands$SwitchToViz(repoUrl) {
		var url = $tab_VizUriModel.createForCurrentWindowLocation(null);
		url.updateForViewingSheet(repoUrl);
		$tab_SessionServerCommands.switchToViz$1(url, null, null);
	};
	$tab_SessionServerCommands.switchToViz$1 = function SessionServerCommands$SwitchToViz(url, onComplete, bootstrap) {
		onComplete = onComplete || function(r, s) {
		};
		bootstrap = bootstrap || function(s1) {
			tabBootstrap.ViewerBootstrap.get_instance().bootstrap();
		};
		var queryParams = $tab_SessionServerCommands.$createJsonOnlyQueryParams(url);
		var showView = { type: 'GET', url: url.get_path(), headers: ss.mkdict(['Accept', 'text/javascript']), dataType: 'json', data: queryParams };
		var session = $tab_CommandController.get().legacySession;
		var handler = session.createHandler(onComplete, function(o, s2, r1) {
			$tab_CommandController.get().switchViz(o, url, bootstrap);
		}, null, 'immediately');
		$tab_SessionServerCommands.$destroySession(function() {
			session.request(showView, handler);
		});
	};
	$tab_SessionServerCommands.$createJsonOnlyQueryParams = function SessionServerCommands$CreateJsonOnlyQueryParams(url) {
		var newQueryParams = {};
		var $t1 = new ss.ObjectEnumerator(url.get_queryParams());
		try {
			while ($t1.moveNext()) {
				var p = $t1.current();
				if (p.value.length === 1) {
					newQueryParams[p.key] = p.value[0];
				}
				else {
					newQueryParams[p.key] = p.value;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		newQueryParams[':jsonOnly'] = 'true';
		return newQueryParams;
	};
	global.tab.SessionServerCommands = $tab_SessionServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDashboardCurrentLayoutCmd
	var $tab_SetDashboardCurrentLayoutCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDashboardCurrentLayoutCmd$Response]).call(this);
	};
	$tab_SetDashboardCurrentLayoutCmd.__typeName = 'tab.SetDashboardCurrentLayoutCmd';
	global.tab.SetDashboardCurrentLayoutCmd = $tab_SetDashboardCurrentLayoutCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDashboardCurrentLayoutCmd.Response
	var $tab_SetDashboardCurrentLayoutCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SetDashboardCurrentLayoutCmd$Response.__typeName = 'tab.SetDashboardCurrentLayoutCmd$Response';
	global.tab.SetDashboardCurrentLayoutCmd$Response = $tab_SetDashboardCurrentLayoutCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDashboardSizingWithValidationCmd
	var $tab_SetDashboardSizingWithValidationCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDashboardSizingWithValidationCmd$Response]).call(this);
	};
	$tab_SetDashboardSizingWithValidationCmd.__typeName = 'tab.SetDashboardSizingWithValidationCmd';
	global.tab.SetDashboardSizingWithValidationCmd = $tab_SetDashboardSizingWithValidationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetDashboardSizingWithValidationCmd.Response
	var $tab_SetDashboardSizingWithValidationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SetDashboardSizingWithValidationCmd$Response.__typeName = 'tab.SetDashboardSizingWithValidationCmd$Response';
	global.tab.SetDashboardSizingWithValidationCmd$Response = $tab_SetDashboardSizingWithValidationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetVariablesPromptRespondedCmd
	var $tab_SetVariablesPromptRespondedCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetVariablesPromptRespondedCmd$Response]).call(this);
	};
	$tab_SetVariablesPromptRespondedCmd.__typeName = 'tab.SetVariablesPromptRespondedCmd';
	global.tab.SetVariablesPromptRespondedCmd = $tab_SetVariablesPromptRespondedCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SetVariablesPromptRespondedCmd.Response
	var $tab_SetVariablesPromptRespondedCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SetVariablesPromptRespondedCmd$Response.__typeName = 'tab.SetVariablesPromptRespondedCmd$Response';
	global.tab.SetVariablesPromptRespondedCmd$Response = $tab_SetVariablesPromptRespondedCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShapeManager
	var $tab_ShapeManager = function() {
		this.$idToImageMap = {};
		this.$idToCanvasCache = {};
		this.$shapeStampCache = {};
		this.$1$ShapeLoadedField = null;
	};
	$tab_ShapeManager.__typeName = 'tab.ShapeManager';
	$tab_ShapeManager.get_canvasCacheCapacity = function ShapeManager$get_CanvasCacheCapacity() {
		return (BrowserSupport.BrowserSupport.IsMobile() ? 50 : 200);
	};
	$tab_ShapeManager.getCacheKey$1 = function ShapeManager$GetCacheKey(shapeId, layer, colorOverrideMode, color, width, height) {
		return shapeId + ';' + layer + ';' + colorOverrideMode + ';' + color + ';' + width + ';' + height;
	};
	$tab_ShapeManager.getCacheKey = function ShapeManager$GetCacheKey(shapeId, layer, colorOverrideMode, color, width) {
		return shapeId + ';' + layer + ';' + colorOverrideMode + ';' + color + ';' + width;
	};
	global.tab.ShapeManager = $tab_ShapeManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShapeModel
	var $tab_ShapeModel = function(shapePalette, shapeType) {
		this.$shapePalette = null;
		this.$shapeType = null;
		this.$shapePalette = shapePalette;
		this.$shapeType = shapeType;
	};
	$tab_ShapeModel.__typeName = 'tab.ShapeModel';
	$tab_ShapeModel.fromString = function ShapeModel$FromString(shapeName) {
		var r = new RegExp('^(:([^\\/]+)\\/)?([^\\/]+)$');
		var matches = r.exec(shapeName);
		if (ss.isNullOrUndefined(matches)) {
			return null;
		}
		var paletteName = matches[2];
		var typeName = matches[3];
		if (ss.isNullOrUndefined(typeName)) {
			return null;
		}
		var palette = null;
		if (ss.isValue(paletteName)) {
			if (ss.referenceEquals(paletteName, 'filled'.toString())) {
				palette = 'filled';
			}
			else {
				return null;
			}
		}
		var type = ss.cast(typeName, String);
		return new $tab_ShapeModel(palette, type);
	};
	global.tab.ShapeModel = $tab_ShapeModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetClientCommandPromises
	var $tab_SheetClientCommandPromises = function() {
	};
	$tab_SheetClientCommandPromises.__typeName = 'tab.SheetClientCommandPromises';
	$tab_SheetClientCommandPromises.createSheet = function SheetClientCommandPromises$CreateSheet(sheetName, insertAtEnd) {
		var cmdParams = {};
		if (ss.isValue(sheetName)) {
			cmdParams['newSheet'] = sheetName;
		}
		cmdParams['insertAtEnd'] = insertAtEnd;
		cmdParams['shouldChangeUiMode'] = true;
		var command = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'new-worksheet' }, cmdParams);
		var deferred = $.Deferred();
		$tab_ServerCommands.executeServerCommand(command, 'immediately', function(pm) {
			deferred.resolve(tsConfig.current_sheet_name);
		}, function(ex) {
			deferred.reject(ex.get_message());
		});
		return deferred.promise();
	};
	$tab_SheetClientCommandPromises.goToSheet = function SheetClientCommandPromises$GoToSheet(sheetName) {
		var deferred = $.Deferred();
		if (ss.referenceEquals(sheetName, tsConfig.current_sheet_name)) {
			deferred.resolve(sheetName);
			return deferred.promise();
		}
		var cmdParams = {};
		cmdParams['targetSheet'] = sheetName;
		var command = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'ensure-layout-for-sheet' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(command, 'immediately', null, function(ex) {
			deferred.reject(ex.get_message());
		});
		var handleActiveSheetChanged = null;
		handleActiveSheetChanged = function(oldSheetAndNewSheet) {
			deferred.resolve(oldSheetAndNewSheet.item2);
			$tab_CommandController.get().remove_tabChangeCompleted(handleActiveSheetChanged);
		};
		$tab_CommandController.get().add_tabChangeCompleted(handleActiveSheetChanged);
		return deferred.promise();
	};
	global.tab.SheetClientCommandPromises = $tab_SheetClientCommandPromises;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetClientCommands
	var $tab_SheetClientCommands = function() {
	};
	$tab_SheetClientCommands.__typeName = 'tab.SheetClientCommands';
	$tab_SheetClientCommands.switchSheets = function SheetClientCommands$SwitchSheets(msg) {
		if (ss.isNullOrUndefined(msg.oldSheetName)) {
			msg.oldSheetName = tsConfig.current_sheet_name;
		}
		if (ss.equals(msg.sheetName, msg.oldSheetName) && tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
			return;
		}
		$tab_CommandController.get().prepareForSheetChange();
		var c = $tab_SheetClientCommands.createSwitchSheetsCommand(msg.sheetName);
		$tab_ServerCommands.executeServerCommand(c, 'immediately', msg.successCallback, msg.errorCallback);
	};
	$tab_SheetClientCommands.createSwitchSheetsCommand = function SheetClientCommands$CreateSwitchSheetsCommand(sheetName) {
		var cmdParams = {};
		cmdParams['targetSheet'] = sheetName;
		return $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'ensure-layout-for-sheet' }, cmdParams);
	};
	$tab_SheetClientCommands.goToSheet = function SheetClientCommands$GoToSheet(sheetName) {
		$tab_CommandController.get().prepareForSheetChange();
		var cmdParams = {};
		cmdParams['sheet'] = sheetName;
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'goto-sheet' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(c, 'immediately', null, null);
	};
	$tab_SheetClientCommands.ensureLayoutForSheet = function SheetClientCommands$EnsureLayoutForSheet(sheetName) {
		var c = $tab_SheetClientCommands.createSwitchSheetsCommand(sheetName);
		$tab_ServerCommands.executeServerCommand(c, 'immediately', null, null);
	};
	$tab_SheetClientCommands.createSheet = function SheetClientCommands$CreateSheet(sheetName, insertAtEnd) {
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'new-worksheet' }, null);
		$tab_SheetClientCommands.$configureCommandParams(cmd, sheetName, insertAtEnd);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_SheetClientCommands.deleteSheet = function SheetClientCommands$DeleteSheet(sheetName) {
		var cmdParams = {};
		cmdParams['sheet'] = sheetName;
		cmdParams['promptDeleteSheetsWithVizInTooltip'] = false;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'delete-sheet' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_SheetClientCommands.validateNewSheetName = function SheetClientCommands$ValidateNewSheetName(sheetName, newSheetName, existingSheetNames) {
		if (!ss.referenceEquals(newSheetName.trim(), newSheetName)) {
			return false;
		}
		return !(ss.isNullOrEmptyString(newSheetName) || ss.referenceEquals(newSheetName, sheetName) || ss.contains(existingSheetNames, newSheetName));
	};
	$tab_SheetClientCommands.tryRenameSheet = function SheetClientCommands$TryRenameSheet(sheetName, newSheetName, existingSheetNames) {
		newSheetName = newSheetName.toString().trim();
		if ($tab_SheetClientCommands.validateNewSheetName(sheetName, newSheetName, existingSheetNames)) {
			$tab_SheetClientCommands.renameSheet(sheetName, newSheetName);
			return true;
		}
		else {
			return false;
		}
	};
	$tab_SheetClientCommands.renameSheet = function SheetClientCommands$RenameSheet(sheetName, newName) {
		var cmdParams = {};
		cmdParams['sheet'] = sheetName;
		cmdParams['newSheet'] = newName;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'rename-sheet' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_SheetClientCommands.createDashboardOrStory = function SheetClientCommands$CreateDashboardOrStory(sheetName, insertAtEnd, isStory) {
		var commandName = (isStory ? { ns: 'tabdoc', cmd: 'new-storyboard' } : { ns: 'tabdoc', cmd: 'new-dashboard' });
		var cmd = $tab_CommandUtils.newCommand(commandName, null);
		$tab_SheetClientCommands.$configureCommandParams(cmd, sheetName, insertAtEnd);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_SheetClientCommands.$configureCommandParams = function SheetClientCommands$ConfigureCommandParams(cmd, sheetName, insertAtEnd) {
		cmd.commandParams = {};
		if (ss.isValue(sheetName)) {
			cmd.commandParams['newSheet'] = sheetName;
		}
		if (insertAtEnd) {
			cmd.commandParams['insertAtEnd'] = insertAtEnd.toString();
		}
		cmd.commandParams['shouldChangeUiMode'] = true;
	};
	$tab_SheetClientCommands.getSheetTabContextMenu = function SheetClientCommands$GetSheetTabContextMenu(sheetName, callback) {
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-sheet-tab-context-menu' }, null);
		cmd.commandParams = {};
		if (ss.isValue(sheetName)) {
			cmd.commandParams['sheetName'] = sheetName;
		}
		$tab_ServerCommands.executeServerCommand(cmd, 'none', function(pm) {
			callback(pm);
		}, null);
	};
	$tab_SheetClientCommands.getSheetListContextMenu = function SheetClientCommands$GetSheetListContextMenu(sheetName, addAsFloating, callback) {
		var $t1 = new $tab_BuildSheetListContextMenuCmd();
		$t1.cmdParams['sheetName'] = sheetName;
		$t1.cmdParams['addAsFloating'] = addAsFloating;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_SheetClientCommands.getLayoutTreeContextMenu = function SheetClientCommands$GetLayoutTreeContextMenu(dashboard, zoneID, callback) {
		var $t1 = new $tab_BuildLayoutTreeContextMenuCmd();
		$t1.cmdParams['dashboard'] = dashboard;
		$t1.cmdParams['zoneId'] = zoneID | 0;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_SheetClientCommands.getCaptionContextMenu = function SheetClientCommands$GetCaptionContextMenu(sheetName, callback) {
		var $t1 = new $tab_BuildCaptionContextMenuCmd();
		$t1.cmdParams['sheetName'] = sheetName;
		var cmd = $t1;
		cmd.invoke().then(callback);
	};
	$tab_SheetClientCommands.getTitleContextMenu = function SheetClientCommands$GetTitleContextMenu(sheetName, dashboard, callback) {
		var $t1 = new $tab_BuildTitleContextMenuCmd();
		$t1.cmdParams['sheetName'] = sheetName;
		var cmd = $t1;
		if (ss.isValue(dashboard)) {
			cmd.cmdParams['dashboard'] = dashboard;
		}
		cmd.invoke().then(callback);
	};
	$tab_SheetClientCommands.reorderSheets = function SheetClientCommands$ReorderSheets(positionToInsertTabsAt, sheetTabPositions) {
		var cmdParams = {};
		cmdParams['positionToInsertTabsAt'] = positionToInsertTabsAt;
		cmdParams['sheetTabPositions'] = sheetTabPositions;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'reorder-sheets' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_SheetClientCommands.setPortSize = function SheetClientCommands$SetPortSize(worksheetPortSize, dashboardPortSize, storyPortSize) {
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'set-port-size' }, null);
		cmd.commandParams = {};
		cmd.commandParams['sheet'] = tsConfig.current_sheet_name;
		cmd.commandParams['worksheetPort'] = $tab_SizePresModelUtils.sanitizePresModel(worksheetPortSize);
		cmd.commandParams['dashboardPort'] = $tab_SizePresModelUtils.sanitizePresModel(dashboardPortSize);
		cmd.commandParams['storyPort'] = $tab_SizePresModelUtils.sanitizePresModel(storyPortSize);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	global.tab.SheetClientCommands = $tab_SheetClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetListItemModel
	var $tab_SheetListItemModel = function(parent, index) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString(), null));
	};
	$tab_SheetListItemModel.__typeName = 'tab.SheetListItemModel';
	global.tab.SheetListItemModel = $tab_SheetListItemModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetListModel
	var $tab_SheetListModel = function(parent) {
		this.$sheetModels = null;
		this.$sheetListItemArrayModel = null;
		this.$2$SheetListUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sheetList'.toString(), null));
		this.$sheetListItemArrayModel = new $tab_$SheetListItemArrayModel(this);
	};
	$tab_SheetListModel.__typeName = 'tab.SheetListModel';
	global.tab.SheetListModel = $tab_SheetListModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SheetSession
	var $tab_SheetSession = function(urlRoot, sheetid, commonDialogProvider) {
		this.sheetId = null;
		$tab_BaseSession.call(this, urlRoot, commonDialogProvider);
		this.sheetId = sheetid;
	};
	$tab_SheetSession.__typeName = 'tab.SheetSession';
	$tab_SheetSession.add_sheetDataChanged = function SheetSession$add_SheetDataChanged(value) {
		$tab_SheetSession.$2$SheetDataChangedField = ss.delegateCombine($tab_SheetSession.$2$SheetDataChangedField, value);
	};
	$tab_SheetSession.remove_sheetDataChanged = function SheetSession$remove_SheetDataChanged(value) {
		$tab_SheetSession.$2$SheetDataChangedField = ss.delegateRemove($tab_SheetSession.$2$SheetDataChangedField, value);
	};
	$tab_SheetSession.fireSheetDataChanged = function SheetSession$FireSheetDataChanged() {
		if (ss.isValue($tab_SheetSession.$2$SheetDataChangedField)) {
			$tab_SheetSession.$2$SheetDataChangedField();
		}
	};
	global.tab.SheetSession = $tab_SheetSession;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShelfItemsArrayModel
	var $tab_ShelfItemsArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('shelfItems'.toString(), 1));
	};
	$tab_ShelfItemsArrayModel.__typeName = 'tab.ShelfItemsArrayModel';
	global.tab.ShelfItemsArrayModel = $tab_ShelfItemsArrayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShelfListArrayModel
	var $tab_ShelfListArrayModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('shelfList'.toString(), 1));
	};
	$tab_ShelfListArrayModel.__typeName = 'tab.ShelfListArrayModel';
	global.tab.ShelfListArrayModel = $tab_ShelfListArrayModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShelfModel
	var $tab_ShelfModel = function(parent, index) {
		this.$pills = null;
		this.$2$ShelfChangedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString(), null));
	};
	$tab_ShelfModel.__typeName = 'tab.ShelfModel';
	global.tab.ShelfModel = $tab_ShelfModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShelvesModel
	var $tab_ShelvesModel = function(parent) {
		this.$shelfModels = [];
		this.$2$NewShelvesField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('shelves'.toString(), null));
	};
	$tab_ShelvesModel.__typeName = 'tab.ShelvesModel';
	$tab_ShelvesModel.createShelfModel = function ShelvesModel$CreateShelfModel(parent, shelf, schema, index, context) {
		var m = new $tab_ShelfModel(new $tab_ShelfListArrayModel(parent), index);
		m.update(shelf, schema, context);
		return m;
	};
	global.tab.ShelvesModel = $tab_ShelvesModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowDashboardTitleCmd
	var $tab_ShowDashboardTitleCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowDashboardTitleCmd$Response]).call(this);
	};
	$tab_ShowDashboardTitleCmd.__typeName = 'tab.ShowDashboardTitleCmd';
	global.tab.ShowDashboardTitleCmd = $tab_ShowDashboardTitleCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowDashboardTitleCmd.Response
	var $tab_ShowDashboardTitleCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ShowDashboardTitleCmd$Response.__typeName = 'tab.ShowDashboardTitleCmd$Response';
	global.tab.ShowDashboardTitleCmd$Response = $tab_ShowDashboardTitleCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowEditAxisDialogCmd
	var $tab_ShowEditAxisDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowEditAxisDialogCmd$Response]).call(this);
	};
	$tab_ShowEditAxisDialogCmd.__typeName = 'tab.ShowEditAxisDialogCmd';
	global.tab.ShowEditAxisDialogCmd = $tab_ShowEditAxisDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowEditAxisDialogCmd.Response
	var $tab_ShowEditAxisDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ShowEditAxisDialogCmd$Response.__typeName = 'tab.ShowEditAxisDialogCmd$Response';
	global.tab.ShowEditAxisDialogCmd$Response = $tab_ShowEditAxisDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowImageObjectConfigDialogCmd
	var $tab_ShowImageObjectConfigDialogCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowImageObjectConfigDialogCmd$Response]).call(this);
	};
	$tab_ShowImageObjectConfigDialogCmd.__typeName = 'tab.ShowImageObjectConfigDialogCmd';
	global.tab.ShowImageObjectConfigDialogCmd = $tab_ShowImageObjectConfigDialogCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ShowImageObjectConfigDialogCmd.Response
	var $tab_ShowImageObjectConfigDialogCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ShowImageObjectConfigDialogCmd$Response.__typeName = 'tab.ShowImageObjectConfigDialogCmd$Response';
	global.tab.ShowImageObjectConfigDialogCmd$Response = $tab_ShowImageObjectConfigDialogCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SimpleCommandsPresModelWrapper
	var $tab_SimpleCommandsPresModelWrapper = function(commandsPM) {
		this.$model = null;
		this.$model = commandsPM;
	};
	$tab_SimpleCommandsPresModelWrapper.__typeName = 'tab.SimpleCommandsPresModelWrapper';
	$tab_SimpleCommandsPresModelWrapper.create = function SimpleCommandsPresModelWrapper$Create(pm) {
		if (ss.isNullOrUndefined(pm)) {
			return null;
		}
		return new $tab_SimpleCommandsPresModelWrapper(pm);
	};
	global.tab.SimpleCommandsPresModelWrapper = $tab_SimpleCommandsPresModelWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SimpleFontListProvider
	var $tab_SimpleFontListProvider = function() {
		this.$fontFamilies = null;
		this.$constructFontFamiliesFromFlatList($tab_SimpleFontListProvider.fontFaces);
	};
	$tab_SimpleFontListProvider.__typeName = 'tab.SimpleFontListProvider';
	$tab_SimpleFontListProvider.$ctor1 = function(fonts) {
		this.$fontFamilies = null;
		this.$constructFontFamiliesFromFlatList(fonts);
	};
	$tab_SimpleFontListProvider.$ctor2 = function(fontFamilies) {
		this.$fontFamilies = null;
		this.$fontFamilies = ss.arrayFromEnumerable(fontFamilies);
	};
	$tab_SimpleFontListProvider.$toSimpleFontListInternal = function SimpleFontListProvider$ToSimpleFontListInternal(fontFamilies) {
		var fontNames = [];
		var $t1 = ss.getEnumerator(fontFamilies);
		try {
			while ($t1.moveNext()) {
				var family = $t1.current();
				var $t2 = family.get_fonts();
				for (var $t3 = 0; $t3 < $t2.length; $t3++) {
					var fontName = $t2[$t3];
					fontNames.push(fontName);
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return Array.prototype.slice.call(fontNames);
	};
	global.tab.SimpleFontListProvider = $tab_SimpleFontListProvider;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SizeItemModel
	var $tab_SizeItemModel = function(parent, index) {
		this.$2$SizeInfoUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(index.toString(), null));
	};
	$tab_SizeItemModel.__typeName = 'tab.SizeItemModel';
	global.tab.SizeItemModel = $tab_SizeItemModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.SizePresModelUtils
	var $tab_SizePresModelUtils = function() {
	};
	$tab_SizePresModelUtils.__typeName = 'tab.SizePresModelUtils';
	$tab_SizePresModelUtils.unionPresModels = function SizePresModelUtils$UnionPresModels(s1, s2) {
		var spm = {};
		spm.w = Math.max(s1.w, s2.w);
		spm.h = Math.max(s1.h, s2.h);
		return spm;
	};
	$tab_SizePresModelUtils.sanitizePresModel = function SizePresModelUtils$SanitizePresModel(pm) {
		return { h: Math.floor(pm.h), w: Math.floor(pm.w) };
	};
	global.tab.SizePresModelUtils = $tab_SizePresModelUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SortFromIndicatorCmd
	var $tab_SortFromIndicatorCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SortFromIndicatorCmd$Response]).call(this);
	};
	$tab_SortFromIndicatorCmd.__typeName = 'tab.SortFromIndicatorCmd';
	global.tab.SortFromIndicatorCmd = $tab_SortFromIndicatorCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SortFromIndicatorCmd.Response
	var $tab_SortFromIndicatorCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_SortFromIndicatorCmd$Response.__typeName = 'tab.SortFromIndicatorCmd$Response';
	global.tab.SortFromIndicatorCmd$Response = $tab_SortFromIndicatorCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SortIndicatorsModel
	var $tab_SortIndicatorsModel = function(parent) {
		this.$2$NewSortIndicatorsField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('sortIndicators'.toString(), null));
	};
	$tab_SortIndicatorsModel.__typeName = 'tab.SortIndicatorsModel';
	global.tab.SortIndicatorsModel = $tab_SortIndicatorsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SortingTelemetry
	var $tab_SortingTelemetry = function() {
	};
	$tab_SortingTelemetry.__typeName = 'tab.SortingTelemetry';
	$tab_SortingTelemetry.get_$isSortingEntryPointsTelemetryEnabled = function SortingTelemetry$get_IsSortingEntryPointsTelemetryEnabled() {
		return tab.FeatureFlags.isEnabled('OnlineAnalyticsPipelineEnabled') && tab.FeatureFlags.isEnabled('SortingEntryPointsTelemetry');
	};
	$tab_SortingTelemetry.logSortFromIndicator = function SortingTelemetry$LogSortFromIndicator(sortIndicatorType, sortRegion) {
		if (!$tab_SortingTelemetry.get_$isSortingEntryPointsTelemetryEnabled()) {
			return;
		}
		var eventArgs = ss.mkdict([$tab_SortingTelemetry.$sortingEntryPoint, $tab_SortingTelemetry.$sortIndicatorEntryPoint, $tab_SortingTelemetry.$indicatorTypeColumnName, $tab_SortingTelemetry.$parseSortIndicatorType(sortIndicatorType), $tab_SortingTelemetry.$regionOrientationColumnName, $tab_SortingTelemetry.$parseSortRegionOrientation(sortRegion), $tab_SortingTelemetry.$regionTypeColumnName, $tab_SortingTelemetry.$parseSortRegionType(sortRegion)]);
		$tab_OnlineAnalyticsClient.logEvent($tab_SortingTelemetry.$sortingUsageTable, eventArgs);
	};
	$tab_SortingTelemetry.logSortFromMenuItem = function SortingTelemetry$LogSortFromMenuItem(sortType, sortDirection) {
		if (!$tab_SortingTelemetry.get_$isSortingEntryPointsTelemetryEnabled()) {
			return;
		}
		var eventArgs = ss.mkdict([$tab_SortingTelemetry.$sortingEntryPoint, $tab_SortingTelemetry.$sortIndicatorMenuEntryPoint, $tab_SortingTelemetry.$sortTypeColumnName, (ss.isValue(sortType) ? sortType.toString() : ''), $tab_SortingTelemetry.$sortDirectionColumnName, (ss.isValue(sortDirection) ? sortDirection.toString() : '')]);
		$tab_OnlineAnalyticsClient.logEvent($tab_SortingTelemetry.$sortingUsageTable, eventArgs);
	};
	$tab_SortingTelemetry.logSortFromToolbar = function SortingTelemetry$LogSortFromToolbar(useNestedSortForComparativeSort, sortDirection) {
		if (!$tab_SortingTelemetry.get_$isSortingEntryPointsTelemetryEnabled()) {
			return;
		}
		var eventArgs = ss.mkdict([$tab_SortingTelemetry.$sortingEntryPoint, $tab_SortingTelemetry.$toolbarEntryPoint, $tab_SortingTelemetry.$useNestedSortForComparativeSortColumnName, useNestedSortForComparativeSort.toString(), $tab_SortingTelemetry.$sortDirectionColumnName, (ss.isValue(sortDirection) ? sortDirection.toString() : '')]);
		$tab_OnlineAnalyticsClient.logEvent($tab_SortingTelemetry.$sortingUsageTable, eventArgs);
	};
	$tab_SortingTelemetry.$parseSortIndicatorType = function SortingTelemetry$ParseSortIndicatorType(sortIndicatorType) {
		if (ss.isNullOrUndefined(sortIndicatorType)) {
			return $tab_SortingTelemetry.$unknownValue;
		}
		return sortIndicatorType;
	};
	$tab_SortingTelemetry.$parseSortRegionType = function SortingTelemetry$ParseSortRegionType(sortRegion) {
		if (ss.isNullOrUndefined(sortRegion)) {
			return '';
		}
		return sortRegion.sortRegion;
	};
	$tab_SortingTelemetry.$parseSortRegionOrientation = function SortingTelemetry$ParseSortRegionOrientation(sortRegion) {
		if (ss.isNullOrUndefined(sortRegion)) {
			return '';
		}
		return (sortRegion.isHorizontal ? 'Horizontal' : 'Vertical');
	};
	global.tab.SortingTelemetry = $tab_SortingTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SortServerCommands
	var $tab_SortServerCommands = function() {
	};
	$tab_SortServerCommands.__typeName = 'tab.SortServerCommands';
	$tab_SortServerCommands.sortFromIndicator = function SortServerCommands$SortFromIndicator(mouse, scrollAmount, visualId, sortIndicatorType, sortRegion) {
		var mouseFloored = tab.PointUtil.toPresModel({ x: Math.floor(mouse.x), y: Math.floor(mouse.y) });
		var scrollAmountToInt = tab.PointUtil.toPresModel({ x: Math.floor(scrollAmount.x), y: Math.floor(scrollAmount.y) });
		var $t1 = new $tab_SortFromIndicatorCmd();
		$t1.cmdParams['vizLocation'] = mouseFloored;
		$t1.cmdParams['scrollOffset'] = scrollAmountToInt;
		$t1.cmdParams['visualIdPresModel'] = visualId;
		var sortFromIndicatorCommand = $t1;
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		if ($tab_SortServerCommands.$canSetActiveZone(zoneId)) {
			var setActiveZoneCommand = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-active-zone' }, null);
			var cmdParams = {};
			cmdParams['dashboardPm'] = $tab_ModelUtils.findContentDashboard(null).pm.sheetPath;
			cmdParams['zoneId'] = zoneId;
			setActiveZoneCommand.commandParams = cmdParams;
			var sortCommand = new $tab_ClientCommand('afterDelay', function(transaction) {
				$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, transaction, 'replace');
			}, setActiveZoneCommand, function(presModel) {
				sortFromIndicatorCommand.invoke();
			}, null);
			$tab_CommandController.SendCommand(sortCommand);
		}
		else {
			sortFromIndicatorCommand.invoke();
		}
		$tab_SortingTelemetry.logSortFromIndicator(sortIndicatorType, sortRegion);
	};
	$tab_SortServerCommands.sortFromCommandItem = function SortServerCommands$SortFromCommandItem(commandItem, visualId) {
		var zoneId = $tab_ModelUtils.getZoneIdForSheetName(visualId.worksheet);
		var commandWrapper = $tab_CommandItemWrapper.create(commandItem);
		var command = $tab_CommandSerializer.deserialize(commandWrapper.get_command(), false);
		$tab_CommandUtils.addVisualIdToCommand(command.commandParams, visualId);
		var sortCommand = new $tab_ClientCommand('afterDelay', function(transaction) {
			if ($tab_SortServerCommands.$canSetActiveZone(zoneId)) {
				$tab_SelectionClientCommands.setActiveZoneLocal(zoneId, transaction, 'replace');
			}
		}, command, null, null);
		$tab_CommandController.SendCommand(sortCommand);
		var commandParams = command.commandParams;
		$tab_SortingTelemetry.logSortFromMenuItem(commandParams['sortBy'], commandParams['sortOrder']);
	};
	$tab_SortServerCommands.quickSort = function SortServerCommands$QuickSort(sortDirection) {
		var visualModel = $tab_ModelUtils.findActiveVisual();
		if (ss.isValue(visualModel)) {
			$tab_SortServerCommands.quickSort$1(visualModel.get_visualId(), sortDirection);
		}
		else {
			tab.Logger.lazyGetLogger($tab_SortServerCommands).warn('null Visual Model for Quick QuickSort Command', []);
		}
	};
	$tab_SortServerCommands.quickSort$1 = function SortServerCommands$QuickSort(visualId, sortDirection) {
		var $t1 = new $tab_QuickSortCmd();
		$t1.cmdParams['sortOrder'] = sortDirection;
		$t1.cmdParams['visualIdPresModel'] = visualId;
		$t1.invoke();
		$tab_SortingTelemetry.logSortFromToolbar(true, sortDirection);
	};
	$tab_SortServerCommands.$canSetActiveZone = function SortServerCommands$CanSetActiveZone(newActiveZoneId) {
		return tsConfig.allow_select && newActiveZoneId !== -1 && !$tab_ModelUtils.isActiveZone(newActiveZoneId);
	};
	global.tab.SortServerCommands = $tab_SortServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.SpacingDefinition
	var $tab_SpacingDefinition = function(defaultSpace, left, right, top, bottom) {
		this.defaultSpace = null;
		this.left = null;
		this.right = null;
		this.bottom = null;
		this.top = null;
		this.$allSidesTheSameLocal = null;
		this.defaultSpace = defaultSpace;
		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;
	};
	$tab_SpacingDefinition.__typeName = 'tab.SpacingDefinition';
	global.tab.SpacingDefinition = $tab_SpacingDefinition;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StartNewDataAlertCmd
	var $tab_StartNewDataAlertCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_StartNewDataAlertCmd$Response]).call(this);
		this.set_uiBlocking('immediately');
	};
	$tab_StartNewDataAlertCmd.__typeName = 'tab.StartNewDataAlertCmd';
	global.tab.StartNewDataAlertCmd = $tab_StartNewDataAlertCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StartNewDataAlertCmd.Response
	var $tab_StartNewDataAlertCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_StartNewDataAlertCmd$Response.__typeName = 'tab.StartNewDataAlertCmd$Response';
	global.tab.StartNewDataAlertCmd$Response = $tab_StartNewDataAlertCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.StartupUtils
	var $tab_StartupUtils = function() {
	};
	$tab_StartupUtils.__typeName = 'tab.StartupUtils';
	$tab_StartupUtils.add_modelsInitialized = function StartupUtils$add_ModelsInitialized(value) {
		$tab_StartupUtils.$1$ModelsInitializedField = ss.delegateCombine($tab_StartupUtils.$1$ModelsInitializedField, value);
	};
	$tab_StartupUtils.remove_modelsInitialized = function StartupUtils$remove_ModelsInitialized(value) {
		$tab_StartupUtils.$1$ModelsInitializedField = ss.delegateRemove($tab_StartupUtils.$1$ModelsInitializedField, value);
	};
	$tab_StartupUtils.add_clientFullyLoaded = function StartupUtils$add_ClientFullyLoaded(value) {
		$tab_StartupUtils.$1$ClientFullyLoadedField = ss.delegateCombine($tab_StartupUtils.$1$ClientFullyLoadedField, value);
	};
	$tab_StartupUtils.remove_clientFullyLoaded = function StartupUtils$remove_ClientFullyLoaded(value) {
		$tab_StartupUtils.$1$ClientFullyLoadedField = ss.delegateRemove($tab_StartupUtils.$1$ClientFullyLoadedField, value);
	};
	$tab_StartupUtils.reset = function StartupUtils$Reset() {
		$tab_StartupUtils.$isClientFullyLoaded = false;
		$tab_StartupUtils.$modelsInitialized = false;
		$tab_ApplicationModel.resetInstance();
	};
	$tab_StartupUtils.callOnceAfterInitialBootstrap = function StartupUtils$CallOnceAfterInitialBootstrap(action) {
		if ($tab_StartupUtils.$isClientFullyLoaded) {
			action();
		}
		else {
			var callback = null;
			callback = function() {
				action();
				$tab_StartupUtils.remove_clientFullyLoaded(callback);
			};
			$tab_StartupUtils.add_clientFullyLoaded(callback);
		}
	};
	$tab_StartupUtils.resetTsConfig = function StartupUtils$ResetTsConfig(config) {
		window['tsConfig'] = config;
	};
	$tab_StartupUtils.callAfterModelsInitialized = function StartupUtils$CallAfterModelsInitialized(action) {
		if ($tab_StartupUtils.$modelsInitialized) {
			action();
		}
		else {
			var callback = null;
			callback = function() {
				action();
				$tab_StartupUtils.remove_modelsInitialized(callback);
			};
			$tab_StartupUtils.add_modelsInitialized(callback);
		}
	};
	$tab_StartupUtils.callEachTimeModelsInitialized = function StartupUtils$CallEachTimeModelsInitialized(action, owner) {
		$tab_StartupUtils.add_modelsInitialized(action);
		owner.add$1(new tab.CallOnDispose(function() {
			$tab_StartupUtils.remove_modelsInitialized(action);
		}));
	};
	$tab_StartupUtils.notifyModelsInitialized = function StartupUtils$NotifyModelsInitialized() {
		if ($tab_StartupUtils.$modelsInitialized) {
			return;
		}
		$tab_StartupUtils.$modelsInitialized = true;
		if (!ss.staticEquals($tab_StartupUtils.$1$ModelsInitializedField, null)) {
			$tab_StartupUtils.$1$ModelsInitializedField();
		}
	};
	$tab_StartupUtils.notifyClientFullyLoaded = function StartupUtils$NotifyClientFullyLoaded() {
		if ($tab_StartupUtils.$isClientFullyLoaded) {
			return;
		}
		$tab_StartupUtils.$isClientFullyLoaded = true;
		if (!ss.staticEquals($tab_StartupUtils.$1$ClientFullyLoadedField, null)) {
			$tab_StartupUtils.$1$ClientFullyLoadedField();
		}
	};
	global.tab.StartupUtils = $tab_StartupUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryPointModel
	var $tab_StoryPointModel = function(parent, storyPointId) {
		this.$dashboardModel = null;
		this.$2$DashboardDisposalField = null;
		this.$2$NewStoryPointField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(storyPointId.toString(), 0));
		this.$dashboardModel = new $tab_DashboardModel(this);
	};
	$tab_StoryPointModel.__typeName = 'tab.StoryPointModel';
	global.tab.StoryPointModel = $tab_StoryPointModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryPointsModel
	var $tab_StoryPointsModel = function(parent) {
		this.$pointModel = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('storyPoints'.toString(), null));
	};
	$tab_StoryPointsModel.__typeName = 'tab.StoryPointsModel';
	global.tab.StoryPointsModel = $tab_StoryPointsModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryPointsPresModelCache
	var $tab_StoryPointsPresModelCache = function() {
		this.$storyPointCache = null;
		this.$storyPointCache = new (ss.makeGenericType($tab_LruCache$2, [String, $tab_$StoryCacheRecord]))($tab_StoryPointsPresModelCache.$maxCacheEntries);
		$tab_WorldUpdateInterceptor.get().add_onCommandResponse(ss.mkdel(this, this.$cacheStoryPointPresModelIfApplicable));
		$tab_StoryPointsPresModelCache.$commandsToCache = new ss.Lazy(function() {
			return [{ ns: 'tabdoc', cmd: 'capture-story-point' }.cmd, { ns: 'tabdoc', cmd: 'delete-story-point' }.cmd, { ns: 'tabdoc', cmd: 'duplicate-active-story-point' }.cmd, { ns: 'tabdoc', cmd: 'edit-story-point-caption' }.cmd, { ns: 'tabsrv', cmd: 'ensure-layout-for-sheet' }.cmd, { ns: 'tabdoc', cmd: 'get-storyboard' }.cmd, { ns: 'tabdoc', cmd: 'insert-story-point' }.cmd, { ns: 'tabdoc', cmd: 'next-story-point' }.cmd, { ns: 'tabdoc', cmd: 'new-blank-story-point' }.cmd, { ns: 'tabdoc', cmd: 'previous-story-point' }.cmd, { ns: 'tabdoc', cmd: 'replace-story-point' }.cmd, { ns: 'tabdoc', cmd: 'revert' }.cmd, { ns: 'tabdoc', cmd: 'revert-story-point' }.cmd, { ns: 'tabsrv', cmd: 'revert-workbook' }.cmd, { ns: 'tabdoc', cmd: 'save-active-story-point-as-new' }.cmd, { ns: 'tabdoc', cmd: 'set-active-story-point' }.cmd, { ns: 'tabdoc', cmd: 'toggle-storypoints-nav-arrows' }.cmd];
		});
		if (ss.isValue($tab_StoryPointsPresModelCache.$bootstrapRecord)) {
			this.$storyPointCache.add($tab_StoryPointsPresModelCache.$bootstrapRecord.item1.toString(), $tab_StoryPointsPresModelCache.$bootstrapRecord.item2);
			$tab_StoryPointsPresModelCache.$bootstrapRecord = null;
		}
	};
	$tab_StoryPointsPresModelCache.__typeName = 'tab.StoryPointsPresModelCache';
	$tab_StoryPointsPresModelCache.$cacheBootstrapResponseIfApplicable = function StoryPointsPresModelCache$CacheBootstrapResponseIfApplicable(appModel) {
		ss.Debug.assert(ss.isValue(appModel), "Can't process, app pres model is null");
		if (!$tab_StoryPointsPresModelCache.$shouldCachePresModel(appModel)) {
			return;
		}
		var storyPoint = $tab_StoryPointsPresModelCache.$extractStoryPoint(appModel);
		if (ss.isValue(storyPoint)) {
			var record = new $tab_$StoryCacheRecord(storyPoint);
			$tab_StoryPointsPresModelCache.$bootstrapRecord = { item1: storyPoint.storyPointId, item2: record };
		}
		$tab_WorldUpdateInterceptor.get().remove_onBootstrapResponse($tab_StoryPointsPresModelCache.$cacheBootstrapResponseIfApplicable);
	};
	$tab_StoryPointsPresModelCache.$shouldCachePresModel = function StoryPointsPresModelCache$ShouldCachePresModel(appModel) {
		if ($tab_StoryPointsPresModelCache.$isEmptyModel(appModel) || !appModel.workbookPresModel.dashboardPresModel.isStory || appModel.renderMode !== 'render-mode-client') {
			return false;
		}
		return true;
	};
	$tab_StoryPointsPresModelCache.$isEmptyModel = function StoryPointsPresModelCache$IsEmptyModel(appModel) {
		if (ss.isNullOrUndefined(appModel.workbookPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel) || ss.isNullOrUndefined(appModel.workbookPresModel.dashboardPresModel.zones)) {
			return true;
		}
		return false;
	};
	$tab_StoryPointsPresModelCache.$extractStoryPoint = function StoryPointsPresModelCache$ExtractStoryPoint(appModel) {
		if (appModel.renderMode !== 'render-mode-client') {
			return null;
		}
		if ($tab_StoryPointsPresModelCache.$isEmptyModel(appModel)) {
			return null;
		}
		var flipboardPM = null;
		var zones = appModel.workbookPresModel.dashboardPresModel.zones;
		var $t1 = _.keys(zones);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			var zonePM = zones[key];
			if (ss.isNullOrUndefined(zonePM)) {
				continue;
			}
			flipboardPM = $tab_ZoneModel.getContent(zonePM, 'flipboard');
			if (ss.isValue(flipboardPM)) {
				break;
			}
		}
		if (ss.isNullOrUndefined(flipboardPM)) {
			return null;
		}
		var currentStoryPointId = flipboardPM.activeStoryPointId.toString();
		var storyPoint = flipboardPM.storyPoints[currentStoryPointId];
		return storyPoint;
	};
	global.tab.StoryPointsPresModelCache = $tab_StoryPointsPresModelCache;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StoryState
	var $tab_StoryState = function() {
		this.$1$IsStoryField = false;
		this.$1$StoryPointIdField = 0;
		this.$1$SheetNameField = null;
		var workbook = $tab_ApplicationModel.get_instance().get_workbook();
		this.set_isStory(workbook.get_isCurrentSheetStoryboard() && ss.isValue(workbook.get_storyboard().get_flipboard()));
		if (this.get_isStory()) {
			this.set_sheetName(workbook.get_storyboard().get_sheetName());
			this.set_storyPointId(workbook.get_storyboard().get_flipboard().get_currentStoryPointId());
		}
	};
	$tab_StoryState.__typeName = 'tab.StoryState';
	global.tab.StoryState = $tab_StoryState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StructuredMeasureModel
	var $tab_StructuredMeasureModel = function(parent) {
		this.$4$MeasuresField = null;
		$tab_FieldColumnModel.call(this, parent);
	};
	$tab_StructuredMeasureModel.__typeName = 'tab.StructuredMeasureModel';
	global.tab.StructuredMeasureModel = $tab_StructuredMeasureModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StructuredMeasureModelFactory
	var $tab_StructuredMeasureModelFactory = function() {
	};
	$tab_StructuredMeasureModelFactory.__typeName = 'tab.StructuredMeasureModelFactory';
	$tab_StructuredMeasureModelFactory.create = function StructuredMeasureModelFactory$Create(presModel, parent, fieldModelCache) {
		var structuredMeasures = $tab_StructuredMeasureModelFactory.$buildMeasureArray(presModel, parent, fieldModelCache);
		var structuredMeasureModel = (ss.keyExists(fieldModelCache.get_fields(), presModel.fn) ? fieldModelCache.get_fields()[presModel.fn].asStructuredMeasure() : new $tab_StructuredMeasureModel(parent));
		structuredMeasureModel.update$1(presModel, structuredMeasures);
		return structuredMeasureModel;
	};
	$tab_StructuredMeasureModelFactory.$buildMeasureArray = function StructuredMeasureModelFactory$BuildMeasureArray(presModel, parent, fieldModelCache) {
		var structuredMeasures = [];
		if (ss.isNullOrUndefined(presModel.structuredMeasureList)) {
			return structuredMeasures;
		}
		for (var $t1 = 0; $t1 < presModel.structuredMeasureList.length; $t1++) {
			var child = presModel.structuredMeasureList[$t1];
			structuredMeasures.push($tab_StructuredMeasureModelFactory.create(child, parent, fieldModelCache));
		}
		return structuredMeasures;
	};
	global.tab.StructuredMeasureModelFactory = $tab_StructuredMeasureModelFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.StyledBoxModel
	var $tab_StyledBoxModel = function(parent) {
		this.$margins = null;
		this.$padding = null;
		this.$2$StyleUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('styledBox'.toString(), 0));
		this.$margins = new $tab_MarginDefinition();
		this.$padding = new $tab_PaddingDefinition();
	};
	$tab_StyledBoxModel.__typeName = 'tab.StyledBoxModel';
	global.tab.StyledBoxModel = $tab_StyledBoxModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TabAnimLoader
	var $tab_TabAnimLoader = function() {
	};
	$tab_TabAnimLoader.__typeName = 'tab.TabAnimLoader';
	$tab_TabAnimLoader.$abortLoadingTabAnimModule = function TabAnimLoader$AbortLoadingTabAnimModule() {
		return $.Deferred().reject();
	};
	$tab_TabAnimLoader.$loadTabAnimModule = function TabAnimLoader$LoadTabAnimModule() {
		var emscriptenLoaded = $.Deferred();
		var moduleHandle = {};
		var tabanimInitialized = function() {
			emscriptenLoaded.resolve();
			return true;
		};
		var locateFile = function(url) {
			return tsConfig.external_static_asset_prefix + '/javascripts/' + url;
		};
		moduleHandle.onRuntimeInitialized = tabanimInitialized;
		moduleHandle.locateFile = locateFile;
		var windowAsDynamic = window.self;
		windowAsDynamic['RuntimeWebModule'] = moduleHandle;
		$tab_ModuleManager.load$1('runtimeanimweb', []);
		return emscriptenLoaded.promise();
	};
	$tab_TabAnimLoader.requestTabAnimLoad = function TabAnimLoader$RequestTabAnimLoad() {
		if (tab.RuntimeUtil.isRuntimeSupported()) {
			return $tab_TabAnimLoader.$loadTabAnimModule();
		}
		else {
			return $tab_TabAnimLoader.$abortLoadingTabAnimModule();
		}
	};
	global.tab.TabAnimLoader = $tab_TabAnimLoader;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TabbedAuthenticationDialogCommands
	var $tab_TabbedAuthenticationDialogCommands = function() {
	};
	$tab_TabbedAuthenticationDialogCommands.__typeName = 'tab.TabbedAuthenticationDialogCommands';
	$tab_TabbedAuthenticationDialogCommands.useTabbedAuthDialog = function TabbedAuthenticationDialogCommands$UseTabbedAuthDialog(connectionAttemptInfo) {
		return ss.isValue(connectionAttemptInfo) && ss.isValue(connectionAttemptInfo.dataSourceConnectionAttemptInfos) && connectionAttemptInfo.dataSourceConnectionAttemptInfos.length > 1 && !$tab_DataConnectionUtils.hasPublishedFederatedConnections(connectionAttemptInfo) && tab.FeatureFlags.isEnabled('DataToTheWebTabbedAuthReconnect');
	};
	$tab_TabbedAuthenticationDialogCommands.showTabbedAuthenticationDialog = function TabbedAuthenticationDialogCommands$ShowTabbedAuthenticationDialog(connectionNames, isUserEditingConnection, connectionAttemptInfo) {
		var $t1 = new $tab_GetTabbedAuthenticationPresModelCmd();
		$t1.cmdParams['connectionFullNames'] = connectionNames;
		$t1.cmdParams['editingConnection'] = isUserEditingConnection;
		$t1.cmdParams['connectionAttemptInfo'] = connectionAttemptInfo;
		var cmd = $t1;
		cmd.invoke();
	};
	global.tab.TabbedAuthenticationDialogCommands = $tab_TabbedAuthenticationDialogCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TableCalcIdentifierModel
	var $tab_TableCalcIdentifierModel = function(presModel) {
		this.$nestingLevel = null;
		this.$fieldName = null;
		this.update(presModel);
	};
	$tab_TableCalcIdentifierModel.__typeName = 'tab.TableCalcIdentifierModel';
	global.tab.TableCalcIdentifierModel = $tab_TableCalcIdentifierModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TableCalcModel
	var $tab_TableCalcModel = function(parent) {
		this.$typeSpecificTableCalcModel = null;
		this.$tableCalcOrderingModel = null;
		this.$2$ModelUpdatedField = null;
		this.$2$TableCalcIdentifierField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('tableCalculationPresModel'.toString(), null));
		this.set_tableCalcIdentifier(new $tab_TableCalcIdentifierModel(null));
		this.$tableCalcOrderingModel = new $tab_TableCalcOrderingModel(this);
	};
	$tab_TableCalcModel.__typeName = 'tab.TableCalcModel';
	$tab_TableCalcModel.$getTypeSpecificTableCalcPresModel = function TableCalcModel$GetTypeSpecificTableCalcPresModel(tableCalcPresModel, holderFieldName) {
		if (!(holderFieldName in tableCalcPresModel.presModelHolder)) {
			tab.Logger.lazyGetLogger($tab_TableCalcModel).warn('Holder field name %s not found in tableCalcPresModel: %o', [holderFieldName, tableCalcPresModel]);
			return null;
		}
		return tableCalcPresModel.presModelHolder[holderFieldName];
	};
	global.tab.TableCalcModel = $tab_TableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TableCalcOrderingModel
	var $tab_TableCalcOrderingModel = function(parent) {
		this.$2$ModelUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('tableCalcOrderingPresModel'.toString(), null));
	};
	$tab_TableCalcOrderingModel.__typeName = 'tab.TableCalcOrderingModel';
	global.tab.TableCalcOrderingModel = $tab_TableCalcOrderingModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TableCalcReferenceModel
	var $tab_TableCalcReferenceModel = function(parent) {
		this.$2$ModelUpdatedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('tableCalcReferenceOptionsPresModel'.toString(), null));
	};
	$tab_TableCalcReferenceModel.__typeName = 'tab.TableCalcReferenceModel';
	global.tab.TableCalcReferenceModel = $tab_TableCalcReferenceModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.TypeDefs.TabResources
	var $tab_TabResources = function() {
	};
	$tab_TabResources.__typeName = 'tab.TabResources';
	$tab_TabResources.getResourceName = function TabResources$GetResourceName(filePath) {
		return filePath.substring(filePath.lastIndexOf('/') + 1, filePath.lastIndexOf('.'));
	};
	$tab_TabResources.lookupResourceAlias = function TabResources$LookupResourceAlias(id) {
		return (ss.keyExists($tab_TabResources.$resourceMap, id) ? $tab_TabResources.$resourceMap[id] : '');
	};
	$tab_TabResources.lookupFullResourceAlias = function TabResources$LookupFullResourceAlias(id) {
		var parts = id.split('/');
		var key = ((parts.length > 0) ? parts[parts.length - 1] : id);
		return $tab_TabResources.lookupResourceAlias(key);
	};
	$tab_TabResources.lookupTabRes = function TabResources$LookupTabRes(id) {
		return $tab_TabResources.lookupResourceAlias(id);
	};
	$tab_TabResources.lookupDefaultTabRes = function TabResources$LookupDefaultTabRes(id) {
		return ':/' + tsConfig.locale + '/' + $tab_TabResources.lookupResourceAlias(id);
	};
	global.tab.TabResources = $tab_TabResources;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TelemetryUtils
	var $tab_TelemetryUtils = function() {
	};
	$tab_TelemetryUtils.__typeName = 'tab.TelemetryUtils';
	$tab_TelemetryUtils.generateUUID = function TelemetryUtils$GenerateUUID() {
		var base36Digit = function() {
			var S = '0123456789abcdefghijklmnopqrstuvwxyz';
			return String.fromCharCode(S.charCodeAt(Math.floor(Math.random() * S.length)));
		};
		var b36 = function(len) {
			var s = '';
			for (var i = 0; i < len; ++i) {
				s += base36Digit();
			}
			return s;
		};
		return (new Date()).getTime().toString(32).toLowerCase() + '$' + b36(4) + '-' + b36(2) + '-' + b36(2) + '-' + b36(2) + '-' + b36(6);
	};
	global.tab.TelemetryUtils = $tab_TelemetryUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TextRegionModel
	var $tab_TextRegionModel = function(parent, presModelKey) {
		this.$2$NewTextField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(presModelKey, null));
	};
	$tab_TextRegionModel.__typeName = 'tab.TextRegionModel';
	global.tab.TextRegionModel = $tab_TextRegionModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToggleINDJoinSemanticsCmd
	var $tab_ToggleINDJoinSemanticsCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ToggleINDJoinSemanticsCmd$Response]).call(this);
	};
	$tab_ToggleINDJoinSemanticsCmd.__typeName = 'tab.ToggleINDJoinSemanticsCmd';
	global.tab.ToggleINDJoinSemanticsCmd = $tab_ToggleINDJoinSemanticsCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToggleINDJoinSemanticsCmd.Response
	var $tab_ToggleINDJoinSemanticsCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ToggleINDJoinSemanticsCmd$Response.__typeName = 'tab.ToggleINDJoinSemanticsCmd$Response';
	global.tab.ToggleINDJoinSemanticsCmd$Response = $tab_ToggleINDJoinSemanticsCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToggleINDJoinSemanticsWrapperCmd
	var $tab_ToggleINDJoinSemanticsWrapperCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_ToggleINDJoinSemanticsWrapperCmd$Response]).call(this);
	};
	$tab_ToggleINDJoinSemanticsWrapperCmd.__typeName = 'tab.ToggleINDJoinSemanticsWrapperCmd';
	$tab_ToggleINDJoinSemanticsWrapperCmd.get_commandName = function ToggleINDJoinSemanticsWrapperCmd$get_CommandName() {
		return 'toggle-indjoin-semantics-wrapper';
	};
	global.tab.ToggleINDJoinSemanticsWrapperCmd = $tab_ToggleINDJoinSemanticsWrapperCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToggleINDJoinSemanticsWrapperCmd.Response
	var $tab_ToggleINDJoinSemanticsWrapperCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ToggleINDJoinSemanticsWrapperCmd$Response.__typeName = 'tab.ToggleINDJoinSemanticsWrapperCmd$Response';
	global.tab.ToggleINDJoinSemanticsWrapperCmd$Response = $tab_ToggleINDJoinSemanticsWrapperCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToolbarModel
	var $tab_ToolbarModel = function(parent) {
		this.$2$NewToolbarField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('toolbarPresModel'.toString(), null));
	};
	$tab_ToolbarModel.__typeName = 'tab.ToolbarModel';
	global.tab.ToolbarModel = $tab_ToolbarModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ToolbarServerCommands
	var $tab_ToolbarServerCommands = function() {
	};
	$tab_ToolbarServerCommands.__typeName = 'tab.ToolbarServerCommands';
	$tab_ToolbarServerCommands.get_authoringVizUri = function ToolbarServerCommands$get_AuthoringVizUri() {
		var authoringVizUriModel;
		var authoringSheetName = null;
		if (ss.isNullOrEmptyString(authoringSheetName)) {
			authoringVizUriModel = $tab_VizUriModel.createForAuthoringPublishedSheet(tsConfig.repositoryUrl);
		}
		else {
			authoringVizUriModel = $tab_VizUriModel.createForAuthoringUnpublishedSheet(tsConfig.repositoryUrl, authoringSheetName);
		}
		authoringVizUriModel.trimQueryParamsForAuthoringModeWhenLaunchedFromToolbar();
		authoringVizUriModel.removeHash();
		return authoringVizUriModel;
	};
	$tab_ToolbarServerCommands.setAutoUpdate = function ToolbarServerCommands$SetAutoUpdate(state) {
		var cmdParams = {};
		cmdParams['state'] = state;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'set-auto-update-server' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_ToolbarServerCommands.refreshData = function ToolbarServerCommands$RefreshData() {
		var cmdParams = {};
		cmdParams['deltaTime'] = 0;
		cmdParams['shouldRefreshDs'] = true;
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'refresh-data-server' }, cmdParams);
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
	};
	$tab_ToolbarServerCommands.launchEditing = function ToolbarServerCommands$LaunchEditing() {
		var authoringVizUriModel = $tab_ToolbarServerCommands.get_authoringVizUri();
		if (!tsConfig.openAuthoringInTopWindow && (tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage() || tsConfig.is_mobile_app)) {
			tab.WindowHelper.open(authoringVizUriModel.get_uri(), 'tableauAuthoring');
		}
		else {
			authoringVizUriModel.setTopWindowLocation();
		}
	};
	$tab_ToolbarServerCommands.downloadWorkbook = function ToolbarServerCommands$DownloadWorkbook(givenUrl, formatVersion) {
		var url;
		if (ss.isValue(givenUrl)) {
			url = givenUrl;
		}
		else {
			url = tsConfig.downloadURI;
		}
		var downloadUrl;
		if (tsConfig.is_metrics_view) {
			downloadUrl = $tab_CommandController.get().legacySession.metricsViewDownloadUrl();
		}
		else {
			downloadUrl = $tab_ToolbarServerCommands.$rewriteDownloadUri(url);
		}
		if (ss.isValue(formatVersion)) {
			downloadUrl = downloadUrl + '?formatVersion=' + formatVersion;
		}
		window.open(downloadUrl);
	};
	$tab_ToolbarServerCommands.exportData = function ToolbarServerCommands$ExportData() {
		var sheetName = null;
		if (ss.isValue($tab_ModelUtils.findActiveOrDefaultVisual(null))) {
			sheetName = $tab_ModelUtils.findActiveOrDefaultVisual(null).get_worksheetName();
		}
		var session = $tab_ModelUtils.findContentDashboard(null).getViewSession(sheetName);
		if (ss.isValue(session)) {
			var activeViz = $tab_ModelUtils.findActiveOrDefaultVisual(null).get_visualId();
			window.open(session.formatUnderlyingDataURL(null, activeViz), session.getWindow('vud'), 'scrollbars,resizable');
		}
	};
	$tab_ToolbarServerCommands.exportImage = function ToolbarServerCommands$ExportImage(exportImageHelper) {
		var storyPointId = $tab_ApplicationModel.get_instance().get_workbook().get_currentSheetStoryPointId();
		var dialogData = tableau.types.ExportDialogType['ExportImage'];
		var sheetNameList = [];
		var scrollPoints = [];
		if ($tab_ModelUtils.findContentDashboard(null).get_isDashboard()) {
			var sheetScrollPositions = exportImageHelper.get_sheetScrollPositions();
			if (ss.isValue(sheetScrollPositions)) {
				var $t1 = ss.getEnumerator(Object.keys(sheetScrollPositions));
				try {
					while ($t1.moveNext()) {
						var sheetName = $t1.current();
						var scrollPos = sheetScrollPositions[sheetName];
						var x = scrollPos.x;
						var y = scrollPos.y;
						if (x !== 0 || y !== 0) {
							scrollPoints.push({ x: x, y: y });
							sheetNameList.push(sheetName);
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
		}
		$tab_ExportServerCommands.exportImage(tsConfig.current_sheet_name, storyPointId, dialogData, sheetNameList, scrollPoints);
	};
	$tab_ToolbarServerCommands.exportCrosstab = function ToolbarServerCommands$ExportCrosstab() {
		var sheetName = null;
		if (ss.isValue($tab_ModelUtils.findActiveOrDefaultVisual(null))) {
			sheetName = $tab_ModelUtils.findActiveOrDefaultVisual(null).get_worksheetName();
		}
		var session = $tab_ModelUtils.findContentDashboard(null).getViewSession(sheetName);
		if (ss.isValue(session)) {
			var dialogData = tableau.types.ExportDialogType['ExportCrosstab'];
			session.fileDownloadHelper.openDownload(session.formatExportCrossTabURL('utf16'), dialogData);
		}
	};
	$tab_ToolbarServerCommands.exportPdf = function ToolbarServerCommands$ExportPdf(exportPdfHelper) {
		exportPdfHelper.triggerExportPdfUI();
	};
	$tab_ToolbarServerCommands.$rewriteDownloadUri = function ToolbarServerCommands$RewriteDownloadUri(uri) {
		if (ss.isValue(uri)) {
			var matches = uri.match($tab_ToolbarServerCommands.$uriPattern);
			if (ss.isValue(matches) && matches.length >= 2) {
				return tabBootstrap.ViewerBootstrap.get_instance().location.protocol + '//' + tabBootstrap.ViewerBootstrap.get_instance().location.host + matches[1];
			}
		}
		return uri;
	};
	global.tab.ToolbarServerCommands = $tab_ToolbarServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TrackingCommandDispatcher
	var $tab_TrackingCommandDispatcher = function() {
		this.$commandList = [];
		this.$deferredAction = null;
	};
	$tab_TrackingCommandDispatcher.__typeName = 'tab.TrackingCommandDispatcher';
	global.tab.TrackingCommandDispatcher = $tab_TrackingCommandDispatcher;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Transaction
	var $tab_Transaction = function(modelUpdateContext) {
		this.$transactedItems = null;
		this.$origItems = null;
		this.modelUpdateContext = null;
		this.modelUpdateContext = modelUpdateContext;
		this.$transactedItems = [];
		this.$origItems = [];
	};
	$tab_Transaction.__typeName = 'tab.Transaction';
	$tab_Transaction.$buildTransactedChange = function Transaction$BuildTransactedChange(transactedItems) {
		if (transactedItems.length === 0) {
			return null;
		}
		transactedItems = _.sortBy(transactedItems, function(item) {
			return item.get_$path().get_pathList().length;
		});
		var currentWorld = $tab_ApplicationModel.get_instance().pm;
		var $t1 = $tab_PresentationModel.cloneObjWithScalarsOnly(currentWorld);
		if (ss.isNullOrUndefined($t1)) {
			$t1 = new Object();
		}
		var sparseWorld = $t1;
		for (var $t2 = 0; $t2 < transactedItems.length; $t2++) {
			var item1 = transactedItems[$t2];
			$tab_PresentationModel.insertAtPath(currentWorld, sparseWorld, item1.get_$path(), item1.get_$model());
		}
		return sparseWorld;
	};
	$tab_Transaction.$buildTransactedChangeWithoutNotifications = function Transaction$BuildTransactedChangeWithoutNotifications(transactedItems) {
		var sparseWorld = $tab_Transaction.$buildTransactedChange(transactedItems);
		if (ss.isValue(sparseWorld) && ss.isValue(sparseWorld.presentationLayerNotification)) {
			sparseWorld.presentationLayerNotification = null;
		}
		return sparseWorld;
	};
	global.tab.Transaction = $tab_Transaction;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Transactor
	var $tab_Transactor = function() {
		this.$transaction = null;
		this.$transactedItems = {};
	};
	$tab_Transactor.__typeName = 'tab.Transactor';
	global.tab.Transactor = $tab_Transactor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TypeInCalculationModel
	var $tab_TypeInCalculationModel = function(parent) {
		$tab_CalculationModel.call(this, parent, new $tab_PresModelPathItem('typeInPill'.toString(), null));
	};
	$tab_TypeInCalculationModel.__typeName = 'tab.TypeInCalculationModel';
	global.tab.TypeInCalculationModel = $tab_TypeInCalculationModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.TypeSpecificTableCalcModel
	var $tab_TypeSpecificTableCalcModel = function(parent, presModelKey) {
		$tab_Model.call(this, parent, presModelKey);
	};
	$tab_TypeSpecificTableCalcModel.__typeName = 'tab.TypeSpecificTableCalcModel';
	global.tab.TypeSpecificTableCalcModel = $tab_TypeSpecificTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UbertipButtonMenuModel
	var $tab_UbertipButtonMenuModel = function() {
		$tab_CommandItemBasedUbertipButtonModel.call(this);
	};
	$tab_UbertipButtonMenuModel.__typeName = 'tab.UbertipButtonMenuModel';
	global.tab.UbertipButtonMenuModel = $tab_UbertipButtonMenuModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UbertipButtonModel
	var $tab_UbertipButtonModel = function() {
		this.$2$SerializedCommandField = null;
		this.$2$IsPlaceholderField = false;
		this.$2$LegacyCommandModelField = null;
		$tab_Model.call(this, null, new $tab_PresModelPathItem('ubertipButton', null));
	};
	$tab_UbertipButtonModel.__typeName = 'tab.UbertipButtonModel';
	global.tab.UbertipButtonModel = $tab_UbertipButtonModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UberTipClientCommands
	var $tab_UberTipClientCommands = function() {
	};
	$tab_UberTipClientCommands.__typeName = 'tab.UberTipClientCommands';
	$tab_UberTipClientCommands.get_$commandPermission = function UberTipClientCommands$get_CommandPermission() {
		return ss.cast(tab.LazyUtil.lazyInitStaticField($tab_UberTipClientCommands, 'commandPermissions', function() {
			return $tab_PermissionManager.buildCommandPermission();
		}), $tab_CommandPermission);
	};
	$tab_UberTipClientCommands.executeUbertipAction = function UberTipClientCommands$ExecuteUbertipAction(action, objectIds, visualModel) {
		var c = new $tab_$LocalClientCommand(function(t) {
			$tab_ActionUtils.executeAction(action, objectIds, visualModel, t);
		});
		$tab_CommandController.SendCommand(c);
	};
	$tab_UberTipClientCommands.executeUbertipCommand = function UberTipClientCommands$ExecuteUbertipCommand(command) {
		switch (command.get_commandType()) {
			case 1: {
				$tab_SelectionClientCommands.clearAllSelections($tab_ModelUtils.findActiveOrDefaultVisual(null).get_visualId());
				break;
			}
			case 2:
			case 10:
			case 25: {
				var cmd = $tab_UberTipClientCommands.$convertTupleIdToSelection(command);
				$tab_ServerCommands.executeServerCommand(cmd, 'immediately', null, null);
				break;
			}
			case 4:
			case 5:
			case 11:
			case 12:
			case 13:
			case 15:
			case 17:
			case 18:
			case 22:
			case 16: {
				$tab_ServerCommands.executeServerCommand(command.command, 'immediately', null, null);
				break;
			}
			case 21: {
				$tab_ServerCommands.executeServerCommand(command.command, 'immediately', $tab_CommandUtils.createCommandRedirectSuccessHandler(null), null);
				break;
			}
			case 23: {
				var selectByTupleValueCmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'select-by-tuple-value' }, command.command.commandParams);
				$tab_ServerCommands.executeServerCommand(selectByTupleValueCmd, 'immediately', null, null);
				break;
			}
			case 6:
			case 9:
			case 7:
			default: {
				return;
			}
		}
	};
	$tab_UberTipClientCommands.localAndRemoteUberTipCommand = function UberTipClientCommands$LocalAndRemoteUberTipCommand(vizRegion, visualId, selRect, tupleId, localInfo, localCallback, remoteCallback, tooltipFailureCallback, activationMethod) {
		var c = $tab_UberTipClientCommands.$buildLocalAndRemoteUberTipCommand(vizRegion, visualId, selRect, localInfo, localCallback, remoteCallback, tooltipFailureCallback, activationMethod, tupleId);
		$tab_CommandController.SendCommand(c);
	};
	$tab_UberTipClientCommands.filterUbertipButtonsByCommandPermissions = function UberTipClientCommands$FilterUbertipButtonsByCommandPermissions(buttonModels, permission) {
		return _.filter(buttonModels, function(button) {
			if (button.get_isMenuButton()) {
				return true;
			}
			if (!permission.test(button)) {
				tab.Log.get$1($tab_PermissionManager).debug('Permission denied for %o', [button]);
				return false;
			}
			return true;
		});
	};
	$tab_UberTipClientCommands.$buildLocalAndRemoteUberTipCommand = function UberTipClientCommands$BuildLocalAndRemoteUberTipCommand(vizRegion, visualId, selRect, localInfo, localCallback, remoteCallback, tooltipFailureCallback, activationMethod, tupleId) {
		var c = new $tab_$GetUberTipClientCommand($tab_UberTipClientCommands.$buildLocalUbertipCommand(visualId, localInfo, localCallback), $tab_UberTipClientCommands.$buildRemoteUbertipCommand(vizRegion, visualId, selRect, activationMethod, null, tupleId), $tab_UberTipClientCommands.$buildRemoteCommandSuccessCallback(true, remoteCallback), tooltipFailureCallback);
		return c;
	};
	$tab_UberTipClientCommands.localOnlyUbertipCommand = function UberTipClientCommands$LocalOnlyUbertipCommand(visualId, localInfo, callback) {
		var c = $tab_UberTipClientCommands.buildLocalOnlyUbertipCommand(visualId, localInfo, callback);
		c.set_commandName({ ns: 'tabsrv', cmd: 'render-tooltip-server' }.cmd);
		$tab_CommandController.SendCommand(c);
	};
	$tab_UberTipClientCommands.buildLocalOnlyUbertipCommand = function UberTipClientCommands$BuildLocalOnlyUbertipCommand(visualId, localInfo, callback) {
		var c = new $tab_$GetUberTipClientCommand($tab_UberTipClientCommands.$buildLocalUbertipCommand(visualId, localInfo, callback), null, null, null);
		return c;
	};
	$tab_UberTipClientCommands.remoteOnlyUbertipCommand = function UberTipClientCommands$RemoteOnlyUbertipCommand(vizRegion, visualId, regionSelRect, callback, tooltipFailureCallback, activationMethod, fieldNames, interactedTupleIds, executeUrlActions, latestTupleId) {
		var c = $tab_UberTipClientCommands.$buildRemoteOnlyUberTipCommand(vizRegion, visualId, regionSelRect, callback, tooltipFailureCallback, activationMethod, fieldNames, interactedTupleIds, executeUrlActions, latestTupleId);
		$tab_CommandController.SendCommand(c);
	};
	$tab_UberTipClientCommands.$buildRemoteOnlyUberTipCommand = function UberTipClientCommands$BuildRemoteOnlyUberTipCommand(vizRegion, visualId, regionSelRect, callback, tooltipFailureCallback, activationMethod, fieldNames, interactedTupleIds, executeUrlActions, latestTupleId) {
		var localWork = $tab_ActionUtils.computePossibleLocalWorkForRemoteHoverActions(visualId, interactedTupleIds, executeUrlActions);
		var c = new $tab_$GetUberTipClientCommand(localWork, $tab_UberTipClientCommands.$buildRemoteUbertipCommand(vizRegion, visualId, regionSelRect, activationMethod, fieldNames, latestTupleId), $tab_UberTipClientCommands.$buildRemoteCommandSuccessCallback(false, callback), ss.cast(tooltipFailureCallback, Function));
		return c;
	};
	$tab_UberTipClientCommands.$buildLocalUbertipCommand = function UberTipClientCommands$BuildLocalUbertipCommand(visualId, localInfo, callback) {
		return function(t) {
			var ubertipModel = $tab_UbertipSerializer.createLocalUberTipModel($tab_ModelUtils.getVisualModelFromVisualId(visualId, null), localInfo, tsConfig.is_authoring);
			if (ss.isValue(ubertipModel)) {
				ubertipModel.isUpdate = false;
				ubertipModel.buttonModels = $tab_UberTipClientCommands.filterUbertipButtonsByCommandPermissions(ubertipModel.buttonModels, $tab_UberTipClientCommands.get_$commandPermission());
			}
			callback(ubertipModel);
			$tab_ActionUtils.executeActions(visualId, 'on-hover', [localInfo.get_interactedTupleId()], t, false);
		};
	};
	$tab_UberTipClientCommands.$buildRemoteUbertipCommand = function UberTipClientCommands$BuildRemoteUbertipCommand(vizRegion, visualId, regionSelRect, activationMethod, fieldNames, tupleId) {
		var cmdParams = {};
		$tab_CommandUtils.addVisualIdToCommand(cmdParams, visualId);
		if (ss.isValue(tupleId)) {
			cmdParams['tupleIds'] = [ss.unbox(tupleId)];
		}
		var vizRegionRect = new Object();
		var regionWrapper = $tab_VizRegionRectWrapper.create(vizRegionRect);
		regionWrapper.set_r(vizRegion);
		regionWrapper.set_x(Math.round(regionSelRect.x));
		regionWrapper.set_y(Math.round(regionSelRect.y));
		regionWrapper.set_w(Math.round(regionSelRect.w));
		regionWrapper.set_h(Math.round(regionSelRect.h));
		regionWrapper.set_fns(fieldNames);
		cmdParams['vizRegionRect'] = vizRegionRect;
		cmdParams['allowHoverActions'] = tsConfig.is_mobile || activationMethod === 'on-hover';
		cmdParams['allowPromptText'] = true;
		cmdParams['allowWork'] = tsConfig.is_mobile;
		cmdParams['useInlineImages'] = true;
		return $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'render-tooltip-server' }, cmdParams);
	};
	$tab_UberTipClientCommands.$buildRemoteCommandSuccessCallback = function UberTipClientCommands$BuildRemoteCommandSuccessCallback(isUpdate, callback) {
		return function(pm) {
			if (!ss.isValue(pm)) {
				return;
			}
			var presModelStr = pm.toString();
			var ubertip = (ss.isNullOrEmptyString(presModelStr) ? null : JSON.parse(presModelStr));
			$tab_FontNotificationUtil.notifyFontsFromUberTipPresModel(ubertip);
			var remoteModel = $tab_UbertipSerializer.deserializeUbertip(ubertip);
			if (ss.isValue(remoteModel)) {
				remoteModel.isUpdate = isUpdate;
				remoteModel.buttonModels = $tab_UberTipClientCommands.filterUbertipButtonsByCommandPermissions(remoteModel.buttonModels, $tab_UberTipClientCommands.get_$commandPermission());
			}
			if (ss.isValue(callback)) {
				callback(remoteModel);
			}
			$tab_FontNotificationUtil.$raiseAllFontsFound();
		};
	};
	$tab_UberTipClientCommands.$convertTupleIdToSelection = function UberTipClientCommands$ConvertTupleIdToSelection(command) {
		var cmd = $tab_CommandUtils.duplicateCommand(command.command);
		var cmdParams = cmd.commandParams;
		var tupleId = cmdParams['tupleId'];
		delete cmdParams['tupleId'];
		if (!ss.keyExists(cmdParams, 'selectAtPoint') && ss.isValue(tupleId)) {
			var tupleIds = [parseInt(tupleId.toString())];
			var pm = { objectIds: tupleIds, selectionType: 'tuples' };
			cmdParams['selection'] = pm;
		}
		return cmd;
	};
	global.tab.UberTipClientCommands = $tab_UberTipClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UbertipSerializer
	var $tab_UbertipSerializer = function() {
	};
	$tab_UbertipSerializer.__typeName = 'tab.UbertipSerializer';
	$tab_UbertipSerializer.get_$log = function UbertipSerializer$get_Log() {
		return tab.Logger.lazyGetLogger($tab_UbertipSerializer);
	};
	$tab_UbertipSerializer.deserializeUbertip = function UbertipSerializer$DeserializeUbertip(ubertip) {
		if (ss.isNullOrUndefined(ubertip)) {
			return null;
		}
		var contentCommands = [];
		if (ss.isValue(ubertip.selectionRelaxationCommands)) {
			$tab_UbertipSerializer.$collectCommands(ubertip.selectionRelaxationCommands, contentCommands, $tab_VizDataUtils.invalidTupleId);
		}
		var actionModels = [];
		if (ss.isValue(ubertip.actions)) {
			$tab_UbertipSerializer.$collectCommands(ubertip.actions, actionModels, $tab_VizDataUtils.invalidTupleId);
		}
		var model = {};
		if (ss.isValue(ubertip.commands)) {
			model.buttonModels = $tab_UbertipSerializer.$collectUbertipButtons(ubertip);
		}
		model.tooltipHtml = $tab_UbertipSerializer.$nullIfEmpty(ubertip.htmlTooltip);
		model.selectionHtml = $tab_UbertipSerializer.$nullIfEmpty(ubertip.htmlSelection);
		model.overlayImage = $tab_UbertipSerializer.$nullIfEmpty(ubertip.overlayImage);
		model.overlayImageKey = $tab_UbertipSerializer.$nullIfEmpty(ubertip.overlayImageKey);
		model.tupleId = ubertip.tupleId;
		model.interactedTupleId = ubertip.tupleId;
		model.imageRegion = ubertip.r;
		model.tupleSelected = ubertip.tupleSelected || false;
		model.refLineSelected = ubertip.refLineSelected || false;
		model.trendLineSelected = ubertip.trendLineSelected || false;
		model.isExplicitlyEmpty = ubertip.isEmpty || false;
		model.tooltipOffset = tab.PointUtil.fromPresModel(ubertip.tooltipOffset);
		model.markBounds = tab.RecordCast.rectPresModelAsRectXY(ubertip.markTooltipRect);
		model.contentCommands = contentCommands;
		model.actions = actionModels;
		if (ss.isValue(model.overlayImage) || ss.isValue(model.overlayImageKey)) {
			var overlayCount = ubertip.overlayAnchors.length;
			model.overlayAnchors = new Array(overlayCount);
			for (var ii = 0; ii < overlayCount; ++ii) {
				var pointPM = ubertip.overlayAnchors[ii];
				var point = tab.PointUtil.fromPresModel(pointPM);
				model.overlayAnchors[ii] = { x: point.x, y: point.y };
			}
		}
		if (ss.isValue(model.tooltipHtml) || ss.isValue(model.selectionHtml) || ss.isValue(model.buttonModels) && model.buttonModels.length > 0 || actionModels.length > 0) {
			return model;
		}
		return null;
	};
	$tab_UbertipSerializer.$getVizDataModelFromVisualModel = function UbertipSerializer$GetVizDataModelFromVisualModel(visualModel) {
		if (ss.isNullOrUndefined(visualModel)) {
			return null;
		}
		return visualModel.get_vizDataModel();
	};
	$tab_UbertipSerializer.createLocalUberTipModel = function UbertipSerializer$CreateLocalUberTipModel(visualModel, localInfo, isAuthoring) {
		var interactedTupleId = localInfo.get_interactedTupleId();
		var affectedTupleIds = localInfo.get_affectedTupleIds();
		var paneDescriptorKey = localInfo.get_paneDescriptorKey();
		var vizDataModel = $tab_UbertipSerializer.$getVizDataModelFromVisualModel(visualModel);
		if (ss.isNullOrUndefined(vizDataModel)) {
			return null;
		}
		var uberData = vizDataModel.get_ubertipData();
		ss.Debug.assert(ss.isValue(paneDescriptorKey), 'Should always have pane descriptor key');
		var uberPaneData = $tab_UbertipSerializer.$getUberTipPaneData(uberData, paneDescriptorKey);
		ss.Debug.assert(ss.isValue(uberPaneData), 'Should always get an uberPaneData');
		var contentCommands = $tab_UbertipSerializer.$generateLocalContentCommands(uberPaneData.htmlTooltip, visualModel.get_visualId(), interactedTupleId);
		var dataDictionary = $tab_ApplicationModel.get_instance().get_dataDictionary();
		var htmlTemplate = uberPaneData.htmlTooltip;
		var vizDataField = vizDataModel.getVizDataField(uberData.fn);
		if (ss.isValue(vizDataField)) {
			var alias = $tab_VizDataLookup.lookupRawDataValue(interactedTupleId, vizDataField, dataDictionary);
			if (ss.contains(uberPaneData.fieldVector, alias)) {
				htmlTemplate = uberPaneData.htmlTooltipModified;
			}
		}
		var html = $tab_VizDataUtils.constructHtml(dataDictionary, htmlTemplate, vizDataModel, [interactedTupleId]);
		var selectionHtml = null;
		var multipleTuplesInEffect = false;
		if (affectedTupleIds.length > 1 && uberPaneData.showButtons) {
			multipleTuplesInEffect = true;
			selectionHtml = $tab_UbertipSerializer.$getSelectionHtml(dataDictionary, vizDataModel, affectedTupleIds, uberPaneData.summaryField);
		}
		var buttonModels = [];
		var tupleIdForCommand = interactedTupleId;
		if (tupleIdForCommand < 0) {
			tupleIdForCommand = $tab_VizDataUtils.invalidTupleId;
		}
		var hasNonTotals = $tab_VizDataUtils.hasTupleWithNonTotalValue(vizDataModel, dataDictionary, affectedTupleIds);
		if (uberPaneData.showButtons && vizDataModel.hasDimensionColumnNotMeasureNames()) {
			if (hasNonTotals) {
				buttonModels = $tab_UbertipSerializer.$collectUbertipButtons$1(uberData.standardCommands, tupleIdForCommand);
			}
			if (multipleTuplesInEffect) {
				buttonModels = $tab_UbertipSerializer.$collectUbertipButtons$1(uberData.multiselectCommands, tupleIdForCommand);
			}
			buttonModels = _.filter(buttonModels, function(buttonModel) {
				return buttonModel.get_commandType() !== 10;
			});
			if (isAuthoring) {
				var groupPlaceholder = $tab_UbertipSerializer.$createGroupPlaceholderButtonModel();
				buttonModels.push(groupPlaceholder);
			}
		}
		var actionPMs = (hasNonTotals ? $tab_ActionUtils.getMenuUrlActionsForUbertipModel(visualModel.get_visualId()) : []);
		var isExplicitlyEmpty = uberPaneData.htmlTooltip.toString().length === 0;
		if (ss.isValue(html) || ss.isValue(selectionHtml) || buttonModels.length > 0 || actionPMs.length > 0) {
			var model = { tooltipHtml: html, selectionHtml: selectionHtml, tupleId: tupleIdForCommand, interactedTupleId: interactedTupleId, isExplicitlyEmpty: isExplicitlyEmpty, actionPMs: actionPMs, buttonModels: buttonModels, contentCommands: contentCommands, visualId: visualModel.get_visualId() };
			return model;
		}
		return null;
	};
	$tab_UbertipSerializer.$createGroupPlaceholderButtonModel = function UbertipSerializer$CreateGroupPlaceholderButtonModel() {
		var $t1 = new $tab_CommandModel();
		$t1.set_commandType(10);
		$t1.imageRes = $tab_TabResources.lookupResourceAlias('TQRC_SPLIT');
		$t1.set_name('');
		var groupPlaceholderCommandModel = $t1;
		if (tsConfig.is_mobile) {
			var mergeStr = tab.Strings.UbertipTooltip_GroupMobile;
			var splitStr = tab.Strings.UbertipTooltip_SplitMobile;
			groupPlaceholderCommandModel.description = ((splitStr.length > mergeStr.length) ? splitStr : mergeStr);
		}
		var groupPlaceholder = new $tab_CommandModelBasedUbertipButtonModel();
		groupPlaceholder.update(groupPlaceholderCommandModel, true);
		return groupPlaceholder;
	};
	$tab_UbertipSerializer.paneContainsViT = function UbertipSerializer$PaneContainsViT(visualModel, paneDescriptorKey) {
		if (ss.isNullOrUndefined(visualModel)) {
			return false;
		}
		var vizDataModel = visualModel.get_vizDataModel();
		if (ss.isNullOrUndefined(vizDataModel)) {
			return false;
		}
		var uberData = vizDataModel.get_ubertipData();
		if (ss.isNullOrUndefined(uberData)) {
			return false;
		}
		if (ss.isNullOrUndefined(paneDescriptorKey)) {
			for (var $t1 = 0; $t1 < uberData.ubertipPaneDatas.length; $t1++) {
				var uberPane = uberData.ubertipPaneDatas[$t1];
				if ($tab_VizDataUtils.objectContainsVizInTooltip($(uberPane.htmlTooltip))) {
					return true;
				}
			}
			return false;
		}
		else {
			return $tab_VizDataUtils.objectContainsVizInTooltip($($tab_UbertipSerializer.$getUberTipPaneData(uberData, paneDescriptorKey).htmlTooltip));
		}
	};
	$tab_UbertipSerializer.$getUberTipPaneData = function UbertipSerializer$GetUberTipPaneData(ubertip, paneDescrKey) {
		if (ubertip.ubertipPaneDatas.length === 1) {
			return ubertip.ubertipPaneDatas[0];
		}
		for (var $t1 = 0; $t1 < ubertip.ubertipPaneDatas.length; $t1++) {
			var uberPane = ubertip.ubertipPaneDatas[$t1];
			if (ss.isValue(uberPane.paneDescriptor)) {
				if (ss.referenceEquals(uberPane.paneDescriptor.paneDescrKey, paneDescrKey)) {
					return uberPane;
				}
			}
		}
		return null;
	};
	$tab_UbertipSerializer.$generateLocalContentCommands = function UbertipSerializer$GenerateLocalContentCommands(ubertipHtml, visualId, tupleId) {
		if (tupleId === $tab_VizDataUtils.invalidTupleId) {
			ss.Debug.assert(false, 'Tried to create a local content command, but the tuple Id was invalid');
			return [];
		}
		var tooltipHtml = $(ubertipHtml);
		var links = tooltipHtml.find('a.relax-selection');
		var numLinks = links.length;
		var localContentCommands = [];
		for (var i = 0; i < numLinks; i++) {
			var link = links.eq(i);
			var linkContent = link.children().eq(0);
			var fieldName = ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(linkContent.text(), '<[', '['), ']>', ']'), '>>', '>'), '<<', '<');
			var commandName = link.attr('href');
			var contentCommand = $tab_UbertipSerializer.$buildContentCommand(visualId, fieldName, commandName, tupleId);
			localContentCommands[i] = contentCommand;
		}
		return localContentCommands;
	};
	$tab_UbertipSerializer.$buildContentCommand = function UbertipSerializer$BuildContentCommand(visualId, fieldName, commandName, tupleId) {
		var cmdParams = {};
		cmdParams['visualIdPresModel'] = visualId;
		cmdParams['worksheet'] = visualId.worksheet;
		cmdParams['fn'] = fieldName;
		cmdParams['tupleId'] = tupleId.toString();
		var selectByTupleValueCmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'select-by-tuple-value' }, cmdParams);
		var $t1 = new $tab_CommandModel();
		$t1.set_commandType(23);
		$t1.set_name(commandName);
		$t1.command = selectByTupleValueCmd;
		var contentCommand = $t1;
		return contentCommand;
	};
	$tab_UbertipSerializer.$getSelectionHtml = function UbertipSerializer$GetSelectionHtml(dataDictionary, vizData, tupleIds, summary) {
		var summaryFieldCol = vizData.getVizDataField(summary || '');
		if (ss.isValue(summaryFieldCol)) {
			var templateCopy = [];
			$.extend.apply(null, [true, templateCopy].concat($tab_UbertipSerializer.$selectionTemplate));
			templateCopy[2] = tupleIds.length.toString();
			templateCopy[4] = tab.Strings.UbertipItemsSelected;
			if (summaryFieldCol.get_aggType() !== 'sum') {
				templateCopy[8] = tab.Strings.SumOf;
			}
			templateCopy[10] = summary;
			templateCopy[14] = '&lt;' + summary + '&gt;';
			var html = templateCopy.join('');
			return $tab_VizDataUtils.constructHtml(dataDictionary, html, vizData, tupleIds);
		}
		else {
			$tab_UbertipSerializer.$selectionTemplateNoSummary[2] = tupleIds.length.toString();
			$tab_UbertipSerializer.$selectionTemplateNoSummary[4] = tab.Strings.UbertipItemsSelected;
			return $tab_UbertipSerializer.$selectionTemplateNoSummary.join('');
		}
	};
	$tab_UbertipSerializer.$shouldAddClearSelection = function UbertipSerializer$ShouldAddClearSelection() {
		return tsConfig.is_mobile;
	};
	$tab_UbertipSerializer.$collectCommands = function UbertipSerializer$CollectCommands(commandsObject, commandModels, tupleId) {
		var commandsWrapper = $tab_CommandsPresModelWrapper.create(commandsObject);
		if (ss.isNullOrUndefined(commandsWrapper) || ss.isNullOrUndefined(commandsWrapper.get_commandItems())) {
			return;
		}
		var $t1 = commandsWrapper.get_commandItems();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var commandItem = $t1[$t2];
			var itemWrapper = $tab_CommandItemWrapper.create(commandItem);
			var $t3 = new $tab_CommandModel();
			$t3.command = $tab_CommandSerializer.deserialize(itemWrapper.get_command(), false);
			var com = $t3;
			if (ss.isValue(com.command)) {
				$tab_UbertipSerializer.buildCommandModelFromWrapper(com, itemWrapper, tupleId);
				commandModels.push(com);
			}
			if (ss.isValue(itemWrapper.get_commands())) {
				$tab_UbertipSerializer.$collectCommands(itemWrapper.get_commands(), commandModels, tupleId);
			}
		}
	};
	$tab_UbertipSerializer.$collectUbertipButtons = function UbertipSerializer$CollectUbertipButtons(ubertipPresModel) {
		var commandsPresModel = ubertipPresModel.commands;
		return $tab_UbertipSerializer.$collectUbertipButtons$1(commandsPresModel, $tab_VizDataUtils.invalidTupleId);
	};
	$tab_UbertipSerializer.$collectUbertipButtons$1 = function UbertipSerializer$CollectUbertipButtons(commandsPresModel, tupleId) {
		var commandsWrapper = $tab_CommandsPresModelWrapper.create(commandsPresModel);
		if (ss.isNullOrUndefined(commandsWrapper) || ss.isNullOrUndefined(commandsWrapper.get_commandItems())) {
			return [];
		}
		var buttons = [];
		var $t1 = commandsWrapper.get_commandItems();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var commandItem = $t1[$t2];
			var command = $tab_CommandItemWrapper.create(commandItem).get_command();
			var isMenuButton = ss.isNullOrUndefined(command);
			if (isMenuButton) {
				var newMenuButton = new $tab_UbertipButtonMenuModel();
				newMenuButton.update(commandItem, tupleId);
				buttons.push(newMenuButton);
			}
			else {
				var newButton = new $tab_CommandItemBasedUbertipButtonModel();
				newButton.update(commandItem, tupleId);
				buttons.push(newButton);
			}
		}
		if ($tab_UbertipSerializer.$shouldAddClearSelection()) {
			buttons.push($tab_UbertipSerializer.$createClearSelectionButtonModel());
		}
		return buttons;
	};
	$tab_UbertipSerializer.$createClearSelectionButtonModel = function UbertipSerializer$CreateClearSelectionButtonModel() {
		var $t1 = new $tab_CommandModel();
		$t1.set_commandType(1);
		$t1.set_name(tab.Strings.UbertipClearSelection);
		$t1.status = 'enabled';
		var clearSelectionCommandModel = $t1;
		var button = new $tab_CommandModelBasedUbertipButtonModel();
		button.update(clearSelectionCommandModel, false);
		return button;
	};
	$tab_UbertipSerializer.buildCommandModelFromWrapper = function UbertipSerializer$BuildCommandModelFromWrapper(com, itemWrapper, tupleId) {
		$tab_UbertipSerializer.setCommandType(com);
		com.set_name(itemWrapper.get_name());
		com.description = itemWrapper.get_description();
		if (!tab.MiscUtil.isNullOrEmpty$3(itemWrapper.get_iconRes())) {
			com.imageRes = $tab_TabResources.lookupFullResourceAlias(itemWrapper.get_iconRes());
		}
		var state = itemWrapper.get_enabled();
		com.status = ((ss.isNullOrUndefined(state) || state) ? 'enabled' : 'disabled');
		if (tupleId !== $tab_VizDataUtils.invalidTupleId && !ss.isValue(com.command.commandParams['selectAtPoint'])) {
			com.command.commandParams['tupleId'] = tupleId.toString();
		}
	};
	$tab_UbertipSerializer.setCommandType = function UbertipSerializer$SetCommandType(model) {
		var type = $tab_CommandSerializer.getCommandType(model.command);
		if (ss.isValue(type)) {
			model.set_commandType(ss.unbox(type));
		}
	};
	$tab_UbertipSerializer.$nullIfEmpty = function UbertipSerializer$NullIfEmpty(s) {
		return (ss.isNullOrEmptyString(s) ? null : s);
	};
	global.tab.UbertipSerializer = $tab_UbertipSerializer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UnionFontFamilyProviderBuilder
	var $tab_UnionFontFamilyProviderBuilder = function() {
		this.$faceToFamilyMapping = null;
		this.$faceToFamilyMapping = {};
	};
	$tab_UnionFontFamilyProviderBuilder.__typeName = 'tab.UnionFontFamilyProviderBuilder';
	global.tab.UnionFontFamilyProviderBuilder = $tab_UnionFontFamilyProviderBuilder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UpdateAreaAnnotationCmd
	var $tab_UpdateAreaAnnotationCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_UpdateAreaAnnotationCmd$Response]).call(this);
	};
	$tab_UpdateAreaAnnotationCmd.__typeName = 'tab.UpdateAreaAnnotationCmd';
	global.tab.UpdateAreaAnnotationCmd = $tab_UpdateAreaAnnotationCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UpdateAreaAnnotationCmd.Response
	var $tab_UpdateAreaAnnotationCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_UpdateAreaAnnotationCmd$Response.__typeName = 'tab.UpdateAreaAnnotationCmd$Response';
	global.tab.UpdateAreaAnnotationCmd$Response = $tab_UpdateAreaAnnotationCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UpdateDataAlertCmd
	var $tab_UpdateDataAlertCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_UpdateDataAlertCmd$Response]).call(this);
	};
	$tab_UpdateDataAlertCmd.__typeName = 'tab.UpdateDataAlertCmd';
	global.tab.UpdateDataAlertCmd = $tab_UpdateDataAlertCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UpdateDataAlertCmd.Response
	var $tab_UpdateDataAlertCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_UpdateDataAlertCmd$Response.__typeName = 'tab.UpdateDataAlertCmd$Response';
	global.tab.UpdateDataAlertCmd$Response = $tab_UpdateDataAlertCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.UriPathStripper
	var $tab_UriPathStripper = function() {
	};
	$tab_UriPathStripper.__typeName = 'tab.UriPathStripper';
	$tab_UriPathStripper.getModuleFromPath = function UriPathStripper$GetModuleFromPath(path, legalModules) {
		var siteRoot = tsConfig.site_root || '';
		var indexOfSiteStart = path.indexOf(siteRoot, 0);
		var pathWithoutSite;
		if (indexOfSiteStart === -1) {
			pathWithoutSite = path.substr(1);
		}
		else {
			var indexOfSlashFollowingSite = indexOfSiteStart + siteRoot.length;
			pathWithoutSite = path.substr(indexOfSlashFollowingSite + 1);
		}
		for (var $t1 = 0; $t1 < legalModules.length; $t1++) {
			var uriTypeString = legalModules[$t1];
			if (ss.startsWithString(pathWithoutSite, uriTypeString + '/') || ss.referenceEquals(pathWithoutSite, uriTypeString)) {
				return uriTypeString;
			}
		}
		return '';
	};
	$tab_UriPathStripper.getMeatFromPath = function UriPathStripper$GetMeatFromPath(path, legalModules) {
		var moduleString = $tab_UriPathStripper.getModuleFromPath(path, legalModules);
		var indexOfModuleStringStart = path.indexOf(moduleString, 0);
		return path.substr(indexOfModuleStringStart + moduleString.length + 1);
	};
	global.tab.UriPathStripper = $tab_UriPathStripper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.UrlStringReplacementOutcome
	var $tab_UrlStringReplacementOutcome = function() {
	};
	$tab_UrlStringReplacementOutcome.__typeName = 'tab.UrlStringReplacementOutcome';
	global.tab.UrlStringReplacementOutcome = $tab_UrlStringReplacementOutcome;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.UserFactory
	var $tab_UserFactory = function() {
	};
	$tab_UserFactory.__typeName = 'tab.UserFactory';
	$tab_UserFactory.currentUser = function UserFactory$CurrentUser() {
		return { id: tsConfig.current_user_id, friendlyName: tsConfig.current_user_friendly_name, username: tsConfig.current_user_name, hasEmail: !ss.isNullOrEmptyString(tsConfig.current_user_email) };
	};
	global.tab.UserFactory = $tab_UserFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ValidateDataValueCmd
	var $tab_ValidateDataValueCmd = function() {
		ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ValidateDataValueCmd$Response]).call(this);
	};
	$tab_ValidateDataValueCmd.__typeName = 'tab.ValidateDataValueCmd';
	global.tab.ValidateDataValueCmd = $tab_ValidateDataValueCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ValidateDataValueCmd.Response
	var $tab_ValidateDataValueCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_ValidateDataValueCmd$Response.__typeName = 'tab.ValidateDataValueCmd$Response';
	global.tab.ValidateDataValueCmd$Response = $tab_ValidateDataValueCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ViewGeometryModel
	var $tab_ViewGeometryModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('geometry', null));
	};
	$tab_ViewGeometryModel.__typeName = 'tab.ViewGeometryModel';
	global.tab.ViewGeometryModel = $tab_ViewGeometryModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ViewSelectedDataServerCommands
	var $tab_ViewSelectedDataServerCommands = function() {
	};
	$tab_ViewSelectedDataServerCommands.__typeName = 'tab.ViewSelectedDataServerCommands';
	$tab_ViewSelectedDataServerCommands.$handleViewData = function ViewSelectedDataServerCommands$HandleViewData(pm, context) {
		var showDataPM = pm;
		var vid = showDataPM.dataProviderPresModel.visualIdPresModel;
		var session = $tab_ModelUtils.getViewSession(vid.worksheet);
		var cm = new $tab_CommandModel();
		cm.set_commandType(7);
		cm.command = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'viewData' }, {});
		cm.command.commandParams['visualId'] = vid;
		session.executeCommand(cm);
	};
	global.tab.ViewSelectedDataServerCommands = $tab_ViewSelectedDataServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ViewSession
	var $tab_ViewSession = function(urlRoot, sheetId, viewid, commonDialogProvider) {
		this.viewid = null;
		$tab_SheetSession.call(this, urlRoot, sheetId, commonDialogProvider);
		tab.Log.get(this).debug('New id=%s, sheet=%s, view=%s', [tsConfig.sessionid, sheetId, viewid]);
		this.viewid = viewid;
	};
	$tab_ViewSession.__typeName = 'tab.ViewSession';
	$tab_ViewSession.canUseTileCacheUrl = function ViewSession$CanUseTileCacheUrl(tileCacheUrl) {
		return ss.isValue(tileCacheUrl) && tileCacheUrl.length > 6;
	};
	global.tab.ViewSession = $tab_ViewSession;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualColumnHelpers
	var $tab_VisualColumnHelpers = function() {
	};
	$tab_VisualColumnHelpers.__typeName = 'tab.VisualColumnHelpers';
	$tab_VisualColumnHelpers.copyArray = function VisualColumnHelpers$CopyArray(vals, startIndex, count) {
		return ss.cast(Array.prototype.slice.call(vals, startIndex, startIndex + count), Array);
	};
	$tab_VisualColumnHelpers.transformColumn = function VisualColumnHelpers$TransformColumn(columnIter, transformFunc) {
		if (ss.isNullOrUndefined(columnIter)) {
			return false;
		}
		columnIter.transform(transformFunc);
		return true;
	};
	$tab_VisualColumnHelpers.buildColorTable = function VisualColumnHelpers$BuildColorTable(colorDict, markData, foggedBGColor, fogBlendFactorValue) {
		if (ss.isNullOrUndefined(colorDict) || ss.isNullOrUndefined(markData) || !markData.has('color_idx')) {
			return null;
		}
		var colorAlpha = 1;
		if (markData.has('alpha') && markData.get('alpha').c) {
			var $t1 = markData.get('alpha');
			colorAlpha = $t1.v[($t1.c ? 0 : 0)];
		}
		var colorTable = [];
		var indexMap = {};
		var colorIndices = markData.get('color_idx');
		var length = colorIndices.length;
		for (var i = 0; i < length; i++) {
			var index = colorIndices.v[(colorIndices.c ? 0 : i)];
			if (ss.keyExists(indexMap, index)) {
				colorIndices.v[(colorIndices.c ? 0 : i)] = indexMap[index];
			}
			else {
				var cm = $tab_ColorModel.fromArgbInt(colorDict.colorList[index]);
				cm = new $tab_ColorModel(cm.get_r(), cm.get_g(), cm.get_b(), colorAlpha * cm.get_a());
				colorTable.push($tab_SceneDataUtil.createColorCollection(cm, foggedBGColor, fogBlendFactorValue));
				colorIndices.v[(colorIndices.c ? 0 : i)] = colorTable.length - 1;
				indexMap[index] = colorIndices.v[(colorIndices.c ? 0 : i)];
			}
		}
		return colorTable;
	};
	$tab_VisualColumnHelpers.buildOpaqueColorTable = function VisualColumnHelpers$BuildOpaqueColorTable(colorTable) {
		if (ss.isNullOrUndefined(colorTable)) {
			return null;
		}
		var opaqueTable = [];
		for (var i = 0, il = colorTable.length; i < il; i++) {
			opaqueTable[i] = $tab_SceneDataUtil.createOpaqueColorCollection(colorTable[i]);
		}
		return opaqueTable;
	};
	global.tab.VisualColumnHelpers = $tab_VisualColumnHelpers;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualColumnIterator
	var $tab_VisualColumnIterator = function(column) {
		this.v = null;
		this.length = 0;
		this.isValid = false;
		this.c = false;
		ss.Debug.assert(ss.isValue(column), 'VisualColumnIterator should have valid column');
		this.v = column;
		this.isValid = ss.isValue(this.v) && this.v.length > 0;
		this.length = (this.isValid ? this.v.length : 0);
		this.c = false;
	};
	$tab_VisualColumnIterator.__typeName = 'tab.VisualColumnIterator';
	$tab_VisualColumnIterator.create = function VisualColumnIterator$Create(vals) {
		if (ss.isNullOrUndefined(vals)) {
			ss.Debug.assert(false, 'Visual Column is null');
			return null;
		}
		if (vals.length === 1) {
			return new $tab_$VisualColumnIterator$ConstVisualColumnIterator(vals);
		}
		return new $tab_VisualColumnIterator(vals);
	};
	global.tab.VisualColumnIterator = $tab_VisualColumnIterator;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualListModel
	var $tab_VisualListModel = function(parent) {
		this.$drawGroups = null;
		this.$2$NewVisualListField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('visuallist', null));
	};
	$tab_VisualListModel.__typeName = 'tab.VisualListModel';
	global.tab.VisualListModel = $tab_VisualListModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VisualModel
	var $tab_VisualModel = function(parent) {
		this.$selectionsModel = null;
		this.$impliedSelectionModel = null;
		this.$brushingsModel = null;
		this.$filterModels = {};
		this.$filtersJSON = null;
		this.$analyticsModel = null;
		this.$shelvesModel = null;
		this.$sceneModel = null;
		this.$marksCardModel = null;
		this.$mapServerModel = null;
		this.$showMeModel = null;
		this.$vizDataModel = null;
		this.$captionModel = null;
		this.$titleModel = null;
		this.$sortIndicatorsModel = null;
		this.$axisRegionModels = null;
		this.$geometryModel = null;
		this.$hiddenTuples = null;
		this.$allHiddenTuples = null;
		this.$filteredTuples = null;
		this.$allFilteredTuples = null;
		this.$cacheUrl = null;
		this.$visualIsValidAndUpToDate = false;
		this.$brushedFromAction = false;
		this.$emptyHighlightFogAll = false;
		this.$runtimeData = null;
		this.$runtimeHandles = $.Deferred();
		this.$runtimeStatusView = null;
		this.$2$NewVisualField = null;
		this.$2$NewHiddenTuplesField = null;
		this.$2$NewFilteredTuplesField = null;
		this.$2$UrlInfoCacheChangeField = null;
		this.$2$VisualValidStateChangedField = null;
		this.$2$BrushingFromActionChangedField = null;
		this.$2$ColorDictionaryChangedField = null;
		this.$2$VizNavigationSettingChangedField = null;
		this.$2$EmptyHighlightFogAllChangedField = null;
		this.$2$AnnotationHitBoxesChangedField = null;
		this.resizeInfoModel = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('visual'.toString(), null));
		this.$hiddenTuples = new Map();
		this.$allHiddenTuples = new Map();
		this.$filteredTuples = new Map();
		this.$allFilteredTuples = new Map();
		this.$selectionsModel = new $tab_SelectionsModel(this, 'selectionList'.toString());
		this.$impliedSelectionModel = new $tab_SelectionModel(null, -1);
		this.$brushingsModel = new $tab_SelectionsModel(this, 'brushingSelectionList'.toString());
		this.$visualIsValidAndUpToDate = true;
		this.$brushedFromAction = false;
		this.$emptyHighlightFogAll = false;
		this.$runtimeStatusView = new $tab_RuntimeStatusView();
		this.$impliedSelectionModel.update($tab_SelectionsModel.$createEmptySelectionPm('tuples'), $tab_NoopModelEventsHandler.get_noopContext());
	};
	$tab_VisualModel.__typeName = 'tab.VisualModel';
	$tab_VisualModel.get_$log = function VisualModel$get_Log() {
		return tab.Logger.lazyGetLogger($tab_VisualModel);
	};
	global.tab.VisualModel = $tab_VisualModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizClientCommands
	var $tab_VizClientCommands = function() {
	};
	$tab_VizClientCommands.__typeName = 'tab.VizClientCommands';
	$tab_VizClientCommands.invalidateVisualModel = function VizClientCommands$InvalidateVisualModel(model) {
		$tab_VizClientCommands.$setVisualModelValidity(model, false);
	};
	$tab_VizClientCommands.validateVisualModel = function VizClientCommands$ValidateVisualModel(model) {
		$tab_VizClientCommands.$setVisualModelValidity(model, true);
	};
	$tab_VizClientCommands.$setVisualModelValidity = function VizClientCommands$SetVisualModelValidity(model, valid) {
		var c = new $tab_$LocalClientCommand(function(t) {
			$tab_ModelUtils.setVisualValidAndUpToDateStateOnModel(t, model, valid);
		});
		$tab_CommandController.SendCommand(c);
	};
	$tab_VizClientCommands.setUIMode = function VizClientCommands$SetUIMode(mode, changeSource, sheetName) {
		var deferred = $.Deferred();
		var workbookModel = $tab_ApplicationModel.get_instance().get_workbook();
		if (workbookModel.get_uiMode() === mode) {
			deferred.resolve();
			return deferred.promise();
		}
		var sameSheet = ss.referenceEquals(sheetName, tsConfig.current_sheet_name);
		var doLocalWork = mode === 'document' && sameSheet;
		var $t1 = new $tab_ChangeWorkbookUIModeCmd();
		$t1.cmdParams['uiMode'] = mode;
		$t1.set_uiBlocking((doLocalWork ? 'none' : 'immediately'));
		var changeWbCmd = $t1;
		if (!ss.isNullOrEmptyString(sheetName)) {
			changeWbCmd.cmdParams['sheetName'] = sheetName;
		}
		if ($tab_OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('WebAuthoringOnlineTelemetry')) {
			if (mode === 'data-tab') {
				$tab_OnlineAnalyticsClient.logEvent('Authoring_DataTab_Open', ss.mkdict(['Source', changeSource]));
			}
			else if (workbookModel.get_uiMode() === 'data-tab') {
				$tab_OnlineAnalyticsClient.logEvent('Authoring_DataTab_Close', ss.mkdict(['ReturnToSameSheet', sameSheet]));
			}
		}
		if (doLocalWork) {
			changeWbCmd.set_localWork(function(t) {
				var wpm = t.makeMutablePresModel(workbookModel, false);
				wpm.uiMode = mode;
			});
		}
		changeWbCmd.invoke().done(function() {
			if (sameSheet) {
				var clientCommand = $tab_DeferredConnectionsCommandHandler.constructEnsureLayoutForSheetCommand();
				$tab_CommandController.SendCommand(clientCommand);
			}
			deferred.resolve();
		});
		return deferred.promise();
	};
	global.tab.VizClientCommands = $tab_VizClientCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.VizDataField
	var $tab_VizDataField = function(columnPresModel, paneColumnsPresModel) {
		this.$columnPresModel = null;
		this.$paneColumnsPresModel = null;
		this.$hasDataValues = false;
		this.$hasAliases = false;
		this.$tupleIdLookupForPane = null;
		this.$columnPresModel = columnPresModel;
		this.$paneColumnsPresModel = paneColumnsPresModel;
		this.$tupleIdLookupForPane = {};
		this.$validatePresModels();
		this.$hasDataValues = this.$computeHasDataValues();
		this.$hasAliases = this.$computeHasAliases();
	};
	$tab_VizDataField.__typeName = 'tab.VizDataField';
	global.tab.VizDataField = $tab_VizDataField;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.VizDataLookup
	var $tab_VizDataLookup = function() {
	};
	$tab_VizDataLookup.__typeName = 'tab.VizDataLookup';
	$tab_VizDataLookup.lookupDisplayValue = function VizDataLookup$LookupDisplayValue(tupleId, dataField, dataDictionary) {
		if (!dataField.isTupleIdValid(tupleId)) {
			$tab_VizDataLookup.$logTupleInvalidMessage(tupleId, dataField.get_fieldCaption());
			return null;
		}
		if (dataField.get_hasAliases()) {
			var displayValue = $tab_VizDataLookup.lookupAlias(tupleId, dataField, dataDictionary);
			if (ss.isValue(displayValue)) {
				return displayValue;
			}
		}
		if (dataField.get_hasDataValues()) {
			var displayValue1 = $tab_VizDataLookup.$lookupFormattedDataValue(tupleId, dataField, dataDictionary);
			if (ss.isValue(displayValue1)) {
				return displayValue1;
			}
		}
		$tab_VizDataLookup.$logTupleInvalidMessage(tupleId, dataField.get_fieldCaption());
		return null;
	};
	$tab_VizDataLookup.$logTupleInvalidMessage = function VizDataLookup$LogTupleInvalidMessage(tupleId, fieldCaption) {
		var logMsg = ss.formatString('Failed trying to look up the display value for tuple id "{0}" because it is invalid for field "{1}"', tupleId, fieldCaption);
		tab.Log.get$1($tab_VizDataLookup).debug(logMsg, []);
	};
	$tab_VizDataLookup.$isCustomAlias = function VizDataLookup$IsCustomAlias(aliasIndex) {
		return ss.Nullable$1.lt(aliasIndex, 0);
	};
	$tab_VizDataLookup.$convertCustomAliasIndex = function VizDataLookup$ConvertCustomAliasIndex(aliasIndex) {
		return ss.Nullable$1.sub(ss.Nullable$1.neg(aliasIndex), 1);
	};
	$tab_VizDataLookup.lookupAlias = function VizDataLookup$LookupAlias(tupleId, dataField, dataDictionary) {
		if (!dataField.isTupleIdValid(tupleId)) {
			$tab_VizDataLookup.$logTupleInvalidMessage(tupleId, dataField.get_fieldCaption());
			return null;
		}
		var aliasIndex = dataField.getAliasIndex(tupleId);
		return $tab_VizDataLookup.lookupAliasFromIndex(aliasIndex, dataField, dataDictionary);
	};
	$tab_VizDataLookup.lookupAliasFromIndex = function VizDataLookup$LookupAliasFromIndex(aliasIndex, dataField, dataDictionary) {
		var alias = null;
		if (ss.isValue(aliasIndex)) {
			if ($tab_VizDataLookup.$isCustomAlias(aliasIndex)) {
				aliasIndex = $tab_VizDataLookup.$convertCustomAliasIndex(aliasIndex);
				alias = ss.cast(dataDictionary.getRawValue('cstring', ss.unbox(aliasIndex)), String);
				if (tableau.format.isSpecialValue(alias)) {
					alias = tableau.format.formatSpecial(alias, dataField.get_specialValuesOverride());
				}
			}
			else {
				var dataValueIndex = aliasIndex;
				alias = $tab_VizDataLookup.$lookupFormattedDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
			}
		}
		return alias;
	};
	$tab_VizDataLookup.lookupRawDataValue = function VizDataLookup$LookupRawDataValue(tupleId, dataField, dataDictionary) {
		var dataValueIndex = dataField.getDataValueIndex(tupleId);
		return $tab_VizDataLookup.lookupRawDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
	};
	$tab_VizDataLookup.lookupRawDataValueFromIndex = function VizDataLookup$LookupRawDataValueFromIndex(dataValueIndex, dataField, dataDictionary) {
		var dataValue = null;
		if (ss.isValue(dataValueIndex)) {
			var dt;
			var index = ss.unbox(dataValueIndex);
			if (index >= 0) {
				dt = dataField.get_dataType();
			}
			else {
				index = -index - 1;
				dt = 'cstring';
			}
			var rawValue = dataDictionary.getRawValue(dt, index);
			if (ss.isValue(rawValue)) {
				dataValue = rawValue.toString();
			}
		}
		return dataValue;
	};
	$tab_VizDataLookup.$lookupFormattedDataValue = function VizDataLookup$LookupFormattedDataValue(tupleId, dataField, dataDictionary) {
		var dataValueIndex = dataField.getDataValueIndex(tupleId);
		return $tab_VizDataLookup.$lookupFormattedDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
	};
	$tab_VizDataLookup.$lookupFormattedDataValueFromIndex = function VizDataLookup$LookupFormattedDataValueFromIndex(dataValueIndex, dataField, dataDictionary) {
		var dataValue = null;
		var rawDataValue = $tab_VizDataLookup.lookupRawDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
		if (ss.isValue(rawDataValue)) {
			if (tableau.format.isSpecialValue(rawDataValue)) {
				dataValue = tableau.format.formatSpecial(rawDataValue, dataField.get_specialValuesOverride());
			}
			else {
				dataValue = tableau.format.formatString(rawDataValue, dataField.get_vizColumnDoNotUse());
			}
		}
		return dataValue;
	};
	$tab_VizDataLookup.reverseLookupAlias = function VizDataLookup$ReverseLookupAlias(targetAlias, vizData, column, dataDictionary) {
		var targetAliasIndex = null;
		if (column.get_hasAliases()) {
			vizData.forEachTupleId(function(tupleId) {
				var alias = $tab_VizDataLookup.lookupAlias(tupleId, column, dataDictionary);
				if (ss.compareStrings(alias, targetAlias, false) === 0) {
					targetAliasIndex = column.getAliasIndex(tupleId);
					return false;
				}
				return true;
			});
		}
		return targetAliasIndex;
	};
	$tab_VizDataLookup.buildAliasReverseLookup = function VizDataLookup$BuildAliasReverseLookup(vizData, column, dataDictionary) {
		var retVal = {};
		if (column.get_hasAliases()) {
			vizData.forEachTupleId(function(tupleId) {
				var alias = $tab_VizDataLookup.lookupAlias(tupleId, column, dataDictionary);
				if (ss.isNullOrUndefined(retVal[alias])) {
					retVal[alias] = column.getAliasIndex(tupleId);
				}
				return true;
			});
		}
		return retVal;
	};
	$tab_VizDataLookup.isSpecial = function VizDataLookup$IsSpecial(tupleId, dataField, dataDictionary, specialType) {
		var rawDataValue = $tab_VizDataLookup.lookupRawDataValue(tupleId, dataField, dataDictionary);
		if (ss.isNullOrUndefined(rawDataValue)) {
			var aliasIndex = dataField.getAliasIndex(tupleId);
			if (ss.isValue(aliasIndex)) {
				if ($tab_VizDataLookup.$isCustomAlias(aliasIndex)) {
					aliasIndex = $tab_VizDataLookup.$convertCustomAliasIndex(aliasIndex);
				}
				var dataValueIndex = aliasIndex;
				rawDataValue = $tab_VizDataLookup.lookupRawDataValueFromIndex(dataValueIndex, dataField, dataDictionary);
			}
			if (ss.isNullOrUndefined(rawDataValue)) {
				return false;
			}
		}
		return (ss.isNullOrUndefined(specialType) ? tableau.format.isSpecialValue(rawDataValue) : ss.referenceEquals(rawDataValue, specialType));
	};
	global.tab.VizDataLookup = $tab_VizDataLookup;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizDataModel
	var $tab_VizDataModel = function(parent) {
		this.$columns = null;
		this.$tupleIdColumn = null;
		this.$fieldCaptions = null;
		this.$2$NewVizDataField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('vizData'.toString(), null));
		this.$columns = [];
		this.$fieldCaptions = [];
	};
	$tab_VizDataModel.__typeName = 'tab.VizDataModel';
	global.tab.VizDataModel = $tab_VizDataModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Utility.VizDataUtils
	var $tab_VizDataUtils = function() {
	};
	$tab_VizDataUtils.__typeName = 'tab.VizDataUtils';
	$tab_VizDataUtils.constructUrl = function VizDataUtils$ConstructUrl(dataDictionary, linkInfo, source, tupleIds, sheetId) {
		var getStringForColumn = function(vizDataField, filterType, matchAliases) {
			if (ss.isNullOrEmptyString(filterType)) {
				if (ss.isValue(tupleIds)) {
					return $tab_VizDataUtils.$getUrlStringForColumn(dataDictionary, vizDataField, tupleIds, 1, linkInfo);
				}
				tab.Logger.lazyGetLogger($tab_VizDataUtils).warn('No tuples are specified for ConstructUrl!', []);
				return null;
			}
			var filterValues = $tab_VizDataUtils.$getFilterValues(dataDictionary, vizDataField, filterType, linkInfo.delimiter);
			if (linkInfo.shouldUrlEscape) {
				filterValues = encodeURIComponent(filterValues);
			}
			return filterValues;
		};
		return $tab_VizDataUtils.decodeAndReplaceData(linkInfo.url, '<', '>', source, getStringForColumn);
	};
	$tab_VizDataUtils.constructUrlForFilterActionFromTargetURL = function VizDataUtils$ConstructUrlForFilterActionFromTargetURL(dataDictionary, targetURL, linkInfo, source, tupleIds) {
		var getStringForColumn = function(vizDataField, filterType, matchAliases) {
			return $tab_VizDataUtils.$getTargetUrlStringForColumn(dataDictionary, vizDataField, tupleIds, matchAliases, linkInfo);
		};
		var parts = targetURL.toString().split('?');
		if (parts.length === 1) {
			return targetURL;
		}
		var url = parts[0] + '?';
		var queryParts = parts[1].split('&');
		var acceptedParts = [];
		for (var $t1 = 0; $t1 < queryParts.length; $t1++) {
			var queryPart = queryParts[$t1];
			var result = $tab_VizDataUtils.decodeAndReplaceData(queryPart, '<', '>', source, getStringForColumn);
			if (result.item2 === 'success') {
				acceptedParts.push(result.item1);
			}
		}
		url += acceptedParts.join('&');
		return url;
	};
	$tab_VizDataUtils.constructUrlFromString = function VizDataUtils$ConstructUrlFromString(dataDictionary, linkDisplayStr, source, tupleIds, sheetId, delimiter) {
		var getStringForColumn = function(vizDataField, filterType, matchAliases) {
			if (ss.isNullOrEmptyString(filterType)) {
				return $tab_VizDataUtils.$getHtmlStringForColumn(dataDictionary, vizDataField, tupleIds, 1);
			}
			else {
				return $tab_VizDataUtils.$getFilterValues(dataDictionary, vizDataField, filterType, delimiter);
			}
		};
		var result = $tab_VizDataUtils.decodeAndReplaceData(linkDisplayStr, '<', '>', source, getStringForColumn);
		return result.item1;
	};
	$tab_VizDataUtils.constructHtml = function VizDataUtils$ConstructHtml(dataDictionary, html, source, tupleIds) {
		var getStringForColumn = function(vizDataField, filterType, matchAliases) {
			return $tab_VizDataUtils.$getHtmlStringForColumn(dataDictionary, vizDataField, tupleIds, 0);
		};
		var result = $tab_VizDataUtils.decodeAndReplaceData(html, '&lt;', '&gt;', source, getStringForColumn);
		var ubertipHtmlObj = $(result.item1);
		var invalidNodes = [];
		$tab_VizDataUtils.getNodesOfInvalidFields(ubertipHtmlObj, invalidNodes);
		$tab_VizDataUtils.$deleteLines(ubertipHtmlObj, invalidNodes);
		$tab_VizDataUtils.updateVizInTooltipPlaceholderStyles(ubertipHtmlObj);
		return ($tab_VizDataUtils.shouldShowUbertipHTML(ubertipHtmlObj) ? ubertipHtmlObj.wrap('<div>').parent().html() : '');
	};
	$tab_VizDataUtils.updateVizInTooltipPlaceholderStyles = function VizDataUtils$UpdateVizInTooltipPlaceholderStyles(uberTip) {
		if ($tab_ApplicationModel.get_instance().get_isOffline()) {
			uberTip.find($tab_VizDataUtils.vizInTooltipSpanTag).remove();
			return;
		}
		if (tab.FeatureFlags.isEnabled('VizInTooltip')) {
			var vizInTooltips = uberTip.find($tab_VizDataUtils.vizInTooltipSpanTag);
			vizInTooltips.addClass('tab-ubertipPlaceholder');
			var leastTooltipCount = Math.min(vizInTooltips.length, $tab_VizDataUtils.lastWidthAndHeightForVizInTooltips.length);
			for (var i = 0; i < leastTooltipCount; i++) {
				vizInTooltips[i].style.width = $tab_VizDataUtils.lastWidthAndHeightForVizInTooltips[i].item1;
				vizInTooltips[i].style.height = $tab_VizDataUtils.lastWidthAndHeightForVizInTooltips[i].item2;
			}
		}
	};
	$tab_VizDataUtils.updateLastVizInTooltipSizes = function VizDataUtils$UpdateLastVizInTooltipSizes(html) {
		var uberTip = $(html);
		var vizInTooltips = uberTip.find('span[data-tableau="VizInTooltip"] img');
		var length = vizInTooltips.length;
		$tab_VizDataUtils.widestVizInTooltip = 0;
		for (var i = 0; i < length; i++) {
			var height = parseInt(vizInTooltips[i].getAttribute('height'));
			var width = parseInt(vizInTooltips[i].getAttribute('width'));
			$tab_VizDataUtils.lastWidthAndHeightForVizInTooltips[i] = { item1: (width + 'px').toString(), item2: (height + 'px').toString() };
			if (width > $tab_VizDataUtils.widestVizInTooltip) {
				$tab_VizDataUtils.widestVizInTooltip = width;
			}
		}
	};
	$tab_VizDataUtils.decodeAndReplaceData = function VizDataUtils$DecodeAndReplaceData(original, open, close, vizDataModel, getStringForColumn) {
		var replacementOutcome = 'success';
		var doubleOpenEscaped = $tab_VizDataUtils.$getRandomNotIn(original, 'escaped_open_tag');
		var doubleCloseEscaped = $tab_VizDataUtils.$getRandomNotIn(original, 'escaped_close_tag');
		var escapedOpenAndCloseReplaced = ss.replaceAllString(ss.replaceAllString(original, open + open, doubleOpenEscaped), close + close, doubleCloseEscaped);
		var urlParts = escapedOpenAndCloseReplaced.split(open);
		var sb = new ss.StringBuilder(urlParts.shift());
		for (var $t1 = 0; $t1 < urlParts.length; $t1++) {
			var urlPart = urlParts[$t1];
			ss.Debug.assert(!ss.isNullOrEmptyString(urlPart), 'There is an open tag without a matching close tag.');
			var urlClosingParts = urlPart.split(close);
			ss.Debug.assert(urlClosingParts.length === 2, "There must be exactly 1 closing '>' to match the open '<'");
			var fieldCaption = ss.htmlDecode(ss.replaceAllString(ss.replaceAllString(urlClosingParts[0], doubleOpenEscaped, open), doubleCloseEscaped, close));
			var urlClosingPart = urlClosingParts[1];
			var useAlias = true;
			var lastTilde = fieldCaption.lastIndexOf(String.fromCharCode(126));
			var lastBrace = fieldCaption.lastIndexOf(String.fromCharCode(93));
			if (lastTilde >= 0 && (lastBrace === -1 || lastBrace < lastTilde)) {
				var modifierOp = fieldCaption.substr(lastTilde);
				fieldCaption = fieldCaption.substr(0, lastTilde);
				if (modifierOp === '~na') {
					useAlias = false;
				}
			}
			var filterType = null;
			if ($tab_VizDataUtils.$useFilterValues(fieldCaption)) {
				var index = fieldCaption.indexOf('(');
				filterType = fieldCaption.substring(0, index);
				fieldCaption = fieldCaption.substring(index + 1, fieldCaption.length - 1);
			}
			var bracketStart = fieldCaption.indexOf(String.fromCharCode(91));
			var bracketEnd = fieldCaption.lastIndexOf(String.fromCharCode(93));
			if (bracketStart >= 0 && bracketStart < bracketEnd) {
				fieldCaption = fieldCaption.substring(bracketStart + 1, bracketEnd);
			}
			if (ss.startsWithString(fieldCaption, 'Parameters.')) {
				return { item1: '', item2: 'notEnoughInfoYet' };
			}
			var vizDataField = vizDataModel.getVizDataField(fieldCaption);
			if (ss.isNullOrUndefined(vizDataField)) {
				return { item1: '', item2: 'urlConstructionFail' };
			}
			var replacedDataString = getStringForColumn(vizDataField, filterType, useAlias);
			if (ss.isNullOrUndefined(replacedDataString)) {
				replacementOutcome = 'urlConstructionFail';
			}
			else {
				sb.append(replacedDataString);
			}
			sb.append(urlClosingPart);
		}
		var resultString = ss.replaceAllString(ss.replaceAllString(sb.toString(), doubleOpenEscaped, open), doubleCloseEscaped, close);
		return { item1: resultString, item2: replacementOutcome };
	};
	$tab_VizDataUtils.hasTupleWithNonTotalValue = function VizDataUtils$HasTupleWithNonTotalValue(vizData, dataDictionary, effectiveTupleIds) {
		for (var $t1 = 0; $t1 < effectiveTupleIds.length; $t1++) {
			var tupleId = { $: effectiveTupleIds[$t1] };
			var tupleHasTotal = { $: false };
			vizData.forEachVizDataField(ss.mkdel({ tupleId: tupleId, tupleHasTotal: tupleHasTotal }, function(vizColumn, colIndex) {
				if (vizColumn.get_role() === 'dimension') {
					if ($tab_VizDataLookup.isSpecial(this.tupleId.$, vizColumn, dataDictionary, tableau.format.specialAll)) {
						this.tupleHasTotal.$ = true;
						return false;
					}
				}
				return true;
			}));
			if (!tupleHasTotal.$) {
				return true;
			}
		}
		return false;
	};
	$tab_VizDataUtils.isFieldNameOfColumn = function VizDataUtils$IsFieldNameOfColumn(column, fieldName) {
		var escColumnFieldName = $tab_VizDataUtils.stripNewlines(column.fn);
		var escFieldName = $tab_VizDataUtils.stripNewlines(fieldName);
		var escFieldNameBracketed = '[' + escFieldName + ']';
		return ss.referenceEquals(escFieldName, escColumnFieldName) || ss.referenceEquals(escFieldName, $tab_VizDataUtils.stripNewlines(column.fnDisagg)) || ss.referenceEquals(escFieldNameBracketed, escColumnFieldName) || ss.referenceEquals(escFieldNameBracketed, $tab_VizDataUtils.stripNewlines(column.localBaseColumnName));
	};
	$tab_VizDataUtils.isFieldCaptionOfColumn = function VizDataUtils$IsFieldCaptionOfColumn(column, fieldCaption) {
		return ss.referenceEquals($tab_VizDataUtils.stripNewlines(fieldCaption), $tab_VizDataUtils.stripNewlines(column.fieldCaption));
	};
	$tab_VizDataUtils.$getRandomNotIn = function VizDataUtils$GetRandomNotIn(input, prefix) {
		var result = prefix;
		while (input.indexOf(result) > -1) {
			result += Math.random() * 10000 | 0;
		}
		return result;
	};
	$tab_VizDataUtils.stripNewlines = function VizDataUtils$StripNewlines(str) {
		return (ss.isValue(str) ? str.replace($tab_VizDataUtils.$newLineRegEx, '') : null);
	};
	$tab_VizDataUtils.objectContainsVizInTooltip = function VizDataUtils$ObjectContainsVizInTooltip(ubertipHtmlObj) {
		return tab.FeatureFlags.isEnabled('VizInTooltip') && ubertipHtmlObj.has($tab_VizDataUtils.vizInTooltipSpanTag).length !== 0;
	};
	$tab_VizDataUtils.shouldShowUbertipHTML = function VizDataUtils$ShouldShowUbertipHTML(ubertipHtmlObj) {
		return !tab.MiscUtil.isNullOrEmpty$3(ubertipHtmlObj.text().trim()) || $tab_VizDataUtils.objectContainsVizInTooltip(ubertipHtmlObj);
	};
	$tab_VizDataUtils.getNodesOfInvalidFields = function VizDataUtils$GetNodesOfInvalidFields(root, invalidNodes) {
		var textOfThisNodeOnly = '';
		var contents = root.contents().get();
		for (var $t1 = 0; $t1 < contents.length; $t1++) {
			var e = contents[$t1];
			if (e.nodeType === 3) {
				textOfThisNodeOnly += e.textContent || (e.textContent || '');
			}
			else {
				$tab_VizDataUtils.getNodesOfInvalidFields($(e), invalidNodes);
			}
		}
		if (textOfThisNodeOnly.indexOf($tab_VizDataUtils.unknownFieldMarker) !== -1) {
			invalidNodes.push(root);
		}
	};
	$tab_VizDataUtils.addVizDataToZones = function VizDataUtils$AddVizDataToZones(vizDatas, zones) {
		var zoneKeys = _.keys(zones);
		var $t1 = _.keys(vizDatas);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var sheetName = $t1[$t2];
			for (var $t3 = 0; $t3 < zoneKeys.length; $t3++) {
				var zoneKey = zoneKeys[$t3];
				var zone = zones[zoneKey];
				if (zone.zoneCommon.zoneType === 'viz' && ss.referenceEquals(zone.sheet, sheetName)) {
					var visual = zone.presModelHolder['visual'.toString()];
					if (ss.isValue(visual)) {
						var presModelHolder = vizDatas[sheetName].presModelHolder;
						visual.vizData = presModelHolder['genVizDataPresModel'];
					}
					break;
				}
			}
		}
	};
	$tab_VizDataUtils.$deleteLines = function VizDataUtils$DeleteLines(ubertip, invalidNodes) {
		for (var $t1 = 0; $t1 < invalidNodes.length; $t1++) {
			var invalid = invalidNodes[$t1];
			var tableRow = $tab_VizDataUtils.$getParentWithTag(ubertip, invalid, 'tr');
			if (ss.isValue(tableRow)) {
				tableRow.remove();
			}
			else {
				var div = $tab_VizDataUtils.$getParentWithTag(ubertip, invalid, 'div');
				if (ss.isValue(div)) {
					div.remove();
				}
				else {
					invalid.remove();
				}
			}
		}
	};
	$tab_VizDataUtils.$getParentWithTag = function VizDataUtils$GetParentWithTag(root, someChild, tag) {
		var iterator = someChild;
		if (ss.isValue(root) && ss.isValue(someChild) && root.find(someChild).length === 1) {
			while (!ss.referenceEquals(iterator[0], root[0])) {
				if (ss.referenceEquals(iterator[0].tagName.toLowerCase(), tag)) {
					return iterator;
				}
				iterator = iterator.parent();
			}
		}
		return null;
	};
	$tab_VizDataUtils.$getUrlStringForColumn = function VizDataUtils$GetUrlStringForColumn(dataDictionary, vizDataField, tupleIds, escapeFlag, linkInfo) {
		var dataValues = [];
		for (var $t1 = 0; $t1 < tupleIds.length; $t1++) {
			var tupleId = tupleIds[$t1];
			var newDataValue = $tab_VizDataLookup.lookupAlias(tupleId, vizDataField, dataDictionary);
			if (ss.isNullOrUndefined(newDataValue)) {
				continue;
			}
			if ($tab_VizDataLookup.isSpecial(tupleId, vizDataField, dataDictionary, null)) {
				continue;
			}
			if (newDataValue.indexOf(linkInfo.delimiter) !== -1) {
				newDataValue = ss.replaceAllString(newDataValue, linkInfo.delimiter, linkInfo.escapeString + linkInfo.delimiter);
			}
			if (linkInfo.shouldUrlEscape) {
				newDataValue = encodeURIComponent(newDataValue);
			}
			dataValues.push(newDataValue);
		}
		if (dataValues.length === 0) {
			return null;
		}
		if (dataValues.length > 1 && ss.isNullOrUndefined(linkInfo.delimiter)) {
			return null;
		}
		var toRet = dataValues.join(linkInfo.delimiter);
		if (escapeFlag === 0) {
			toRet = tab.EscapingUtil.escapeHtml(toRet);
		}
		return toRet;
	};
	$tab_VizDataUtils.$getTargetUrlStringForColumn = function VizDataUtils$GetTargetUrlStringForColumn(dataDictionary, vizDataField, tupleIds, useAlias, linkSpecPresModel) {
		var values = [];
		for (var $t1 = 0; $t1 < tupleIds.length; $t1++) {
			var tupleId = tupleIds[$t1];
			var newDataValue = (useAlias ? $tab_VizDataLookup.lookupAlias(tupleId, vizDataField, dataDictionary) : $tab_VizDataLookup.lookupRawDataValue(tupleId, vizDataField, dataDictionary));
			newDataValue = $tab_VizDataUtils.replaceUrlStringSpecialValues(newDataValue);
			newDataValue = ss.replaceAllString(newDataValue, linkSpecPresModel.delimiter, linkSpecPresModel.escapeString + linkSpecPresModel.delimiter);
			values.push(newDataValue);
		}
		return encodeURIComponent(values.join(linkSpecPresModel.delimiter));
	};
	$tab_VizDataUtils.replaceUrlStringSpecialValues = function VizDataUtils$ReplaceUrlStringSpecialValues(inputValue) {
		switch (inputValue) {
			case '%null%': {
				return $tab_VizDataUtils.urlStringNull;
			}
			case '%skipped%': {
				return $tab_VizDataUtils.urlStringSkipped;
			}
			case '%ragged%': {
				return $tab_VizDataUtils.urlStringRagged;
			}
			default: {
				return inputValue;
			}
		}
	};
	$tab_VizDataUtils.$getHtmlStringForColumn = function VizDataUtils$GetHtmlStringForColumn(dataDictionary, vizDataField, tupleIds, escapeFlag) {
		var replacedDataString;
		if (tupleIds.length > 1) {
			if (!vizDataField.get_hasDataValues()) {
				return $tab_VizDataUtils.noLocalSummary;
			}
			var dataValues = new Array(tupleIds.length);
			for (var ii = 0; ii < tupleIds.length; ++ii) {
				var dataValue = $tab_VizDataLookup.lookupRawDataValue(tupleIds[ii], vizDataField, dataDictionary);
				if (dataValue === null || tableau.format.isSpecialValue(dataValue)) {
					dataValue = '0';
				}
				else if (typeof(dataValue) === 'undefined' || dataValue.length === 0) {
					return $tab_VizDataUtils.noLocalSummary;
				}
				dataValues[ii] = dataValue;
			}
			var sum = 0;
			for (var ii1 = 0; ii1 < dataValues.length; ++ii1) {
				sum += parseFloat(dataValues[ii1]);
			}
			replacedDataString = tableau.format.formatString(sum.toString(), vizDataField.get_vizColumnDoNotUse());
		}
		else if (tupleIds.length === 1) {
			var alias = $tab_VizDataLookup.lookupDisplayValue(tupleIds[0], vizDataField, dataDictionary);
			if (ss.isNullOrUndefined(alias)) {
				return $tab_VizDataUtils.unknownFieldMarker;
			}
			replacedDataString = alias;
		}
		else {
			tab.Logger.lazyGetLogger($tab_VizDataUtils).warn('No tuples specified. GetHtmlStringForColumn expects one or more tuples.', []);
			return '';
		}
		if (escapeFlag === 0) {
			return tab.EscapingUtil.escapeHtml(replacedDataString);
		}
		else {
			return replacedDataString;
		}
	};
	$tab_VizDataUtils.$useFilterValues = function VizDataUtils$UseFilterValues(fieldCaption) {
		return ss.startsWithString(fieldCaption, 'FILTERMIN(') || ss.startsWithString(fieldCaption, 'FILTERMAX(') || ss.startsWithString(fieldCaption, 'FILTERVALUES(');
	};
	$tab_VizDataUtils.$getFilterValues = function VizDataUtils$GetFilterValues(dataDictionary, vizDataField, filterType, delimiter) {
		if (ss.isNullOrUndefined(vizDataField) || ss.isNullOrUndefined(vizDataField.get_filterContext())) {
			return '';
		}
		var filterContext = vizDataField.get_filterContext();
		var filterValIndexes;
		switch (filterType) {
			case 'FILTERMIN': {
				filterValIndexes = filterContext.filterMinIndices;
				break;
			}
			case 'FILTERMAX': {
				filterValIndexes = filterContext.filterMaxIndices;
				break;
			}
			case 'FILTERVALUES': {
				filterValIndexes = filterContext.filterValueIndices;
				break;
			}
			default: {
				return '';
			}
		}
		if (tab.MiscUtil.isNullOrEmpty$2(filterValIndexes)) {
			return '';
		}
		var filterTexts = [];
		for (var $t1 = 0; $t1 < filterValIndexes.length; $t1++) {
			var valIndex = filterValIndexes[$t1];
			var dataValue = $tab_VizDataLookup.lookupRawDataValueFromIndex(valIndex, vizDataField, dataDictionary);
			filterTexts.push(dataValue);
		}
		return filterTexts.join(delimiter || ',');
	};
	global.tab.VizDataUtils = $tab_VizDataUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizPortalServer
	var $tab_VizPortalServer = function() {
	};
	$tab_VizPortalServer.__typeName = 'tab.VizPortalServer';
	$tab_VizPortalServer.createRequest = function VizPortalServer$CreateRequest(methodName, methodParams, success, failure) {
		var xhrSuccessHandler = function(result) {
			if ($tab_VizPortalServer.$hasErrors(result)) {
				failure($tab_VizPortalServer.$firstErrorCodeIn(result));
			}
			else {
				success(result);
			}
		};
		return $tab_VizPortalServer.$createRequestInternal$1(methodName, methodParams, xhrSuccessHandler, failure);
	};
	$tab_VizPortalServer.createRequestWithPartialFailureHandling = function VizPortalServer$CreateRequestWithPartialFailureHandling(methodName, methodParams, success, failure, error) {
		var xhrSuccessHandler = function(result) {
			if ($tab_VizPortalServer.$hasErrors(result)) {
				failure(result);
			}
			else {
				success(result);
			}
		};
		return $tab_VizPortalServer.$createRequestInternal$1(methodName, methodParams, xhrSuccessHandler, error);
	};
	$tab_VizPortalServer.$createRequestInternal = function VizPortalServer$CreateRequestInternal(requestParams) {
		return $tab_VizPortalServer.$createRequestInternal$1(requestParams.methodName, requestParams.methodParams, requestParams.success, requestParams.error);
	};
	$tab_VizPortalServer.$createRequestInternal$1 = function VizPortalServer$CreateRequestInternal(methodName, methodParams, success, error) {
		var options = new Object();
		options.type = 'POST';
		options.contentType = 'application/json;charset=UTF-8';
		options.dataType = 'json';
		options.url = '/vizportal/api/web/v1/' + methodName;
		var xsrfToken = $tab_VizPortalServer.$getXsrfToken();
		if (ss.isValue(xsrfToken)) {
			options.headers = ss.mkdict(['X-XSRF-TOKEN', xsrfToken]);
		}
		options.data = JSON.stringify(ss.mkdict(['method', methodName, 'params', methodParams]));
		options.success = function(data, status, request) {
			success($tab_VizPortalServer.$getResult(data));
		};
		options.error = function() {
			error(0);
		};
		return options;
	};
	$tab_VizPortalServer.$getXsrfToken = function VizPortalServer$GetXsrfToken() {
		var keyValue = document.cookie.match(new RegExp('(^|;) ?XSRF-TOKEN=([^;]*)(;|$)'));
		return (ss.isValue(keyValue) ? keyValue[2] : null);
	};
	$tab_VizPortalServer.$hasErrors = function VizPortalServer$HasErrors(result) {
		if (ss.keyExists(result, 'errors')) {
			var errors = ss.cast(result['errors'], Array);
			return errors.length > 0;
		}
		else {
			return false;
		}
	};
	$tab_VizPortalServer.$firstErrorCodeIn = function VizPortalServer$FirstErrorCodeIn(result) {
		if (ss.keyExists(result, 'errors')) {
			var errors = ss.cast(result['errors'], Array);
			if (errors.length > 0 && ss.keyExists(errors[0], 'code')) {
				return ss.cast(errors[0]['code'], ss.Int32);
			}
		}
		return 0;
	};
	$tab_VizPortalServer.$getResult = function VizPortalServer$GetResult(data) {
		var response = data;
		return response['result'];
	};
	global.tab.VizPortalServer = $tab_VizPortalServer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizqlSessionRequest
	var $tab_VizqlSessionRequest = function(methodName, methodParams, success, error) {
		this.methodName = null;
		this.methodParams = null;
		this.success = null;
		this.error = null;
		this.methodName = methodName;
		this.methodParams = methodParams;
		this.success = success;
		this.error = error;
	};
	$tab_VizqlSessionRequest.__typeName = 'tab.VizqlSessionRequest';
	global.tab.VizqlSessionRequest = $tab_VizqlSessionRequest;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.VizRegionRectWrapper
	var $tab_VizRegionRectWrapper = function(rect) {
		this.$vizRegionRect = null;
		this.$vizRegionRect = rect;
	};
	$tab_VizRegionRectWrapper.__typeName = 'tab.VizRegionRectWrapper';
	$tab_VizRegionRectWrapper.create = function VizRegionRectWrapper$Create(rect) {
		return new $tab_VizRegionRectWrapper(rect);
	};
	global.tab.VizRegionRectWrapper = $tab_VizRegionRectWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.VizUriModel
	var $tab_VizUriModel = function(location) {
		this.explicitNotGuest = false;
		this.$vizUriType = 0;
		this.$datasourceUrl = '';
		this.$workbookId = '';
		this.$sheetId = '';
		this.$authoringSheetName = '';
		this.$queryParams = {};
		this.$customizedView = '';
		this.$hash = '';
		this.$origin = '';
		this.$revisionNumber = '';
		if (ss.getKeyCount($tab_VizUriModel.$uriTypeToUriTypeString) === 0) {
			$tab_VizUriModel.$initializeUriTypeToUriTypeStringMap();
		}
		if (ss.isValue(location)) {
			this.$fillVizUriModel(location);
		}
	};
	$tab_VizUriModel.__typeName = 'tab.VizUriModel';
	$tab_VizUriModel.createForCurrentWindowLocation = function VizUriModel$CreateForCurrentWindowLocation(window) {
		return new $tab_VizUriModel(tab.WindowHelper.getLocation(window || tabBootstrap.Utility.get_locationWindow()));
	};
	$tab_VizUriModel.$setupVizUriModel = function VizUriModel$SetupVizUriModel(vizUriModel, repositoryUrl) {
		var repoPathObject = new $tab_RepoPathObject(repositoryUrl);
		vizUriModel.$workbookId = repoPathObject.get_workbookId();
		vizUriModel.$sheetId = repoPathObject.get_sheetId();
		vizUriModel.$customizedView = repoPathObject.get_customizedView();
		vizUriModel.$authoringSheetName = '';
		return vizUriModel;
	};
	$tab_VizUriModel.createForViewingSheet = function VizUriModel$CreateForViewingSheet(repositoryUrl) {
		var vizUriModel = $tab_VizUriModel.$createForCurrentWindowLocationConstants(null);
		vizUriModel.$vizUriType = (tsConfig.is_revision_history_preview ? 6 : (vizUriModel.$vizUriType = 1));
		return $tab_VizUriModel.$setupVizUriModel(vizUriModel, repositoryUrl);
	};
	$tab_VizUriModel.createForViewingSheetNoQueryParamsNoHash = function VizUriModel$CreateForViewingSheetNoQueryParamsNoHash(repositoryUrl) {
		var vizUriModel = $tab_VizUriModel.$createForCurrentWindowLocationConstants(null);
		vizUriModel.$vizUriType = 1;
		vizUriModel.removeAllQueryParams();
		vizUriModel.removeHash();
		return $tab_VizUriModel.$setupVizUriModel(vizUriModel, repositoryUrl);
	};
	$tab_VizUriModel.createForCurrentWindowLocationAndVizState = function VizUriModel$CreateForCurrentWindowLocationAndVizState(repoUrl, currentSheetName) {
		var vizUriModel = $tab_VizUriModel.createForCurrentWindowLocation(null);
		var repoPathObject = new $tab_RepoPathObject(repoUrl);
		vizUriModel.$workbookId = repoPathObject.get_workbookId();
		vizUriModel.$sheetId = repoPathObject.get_sheetId();
		vizUriModel.$customizedView = repoPathObject.get_customizedView();
		vizUriModel.$authoringSheetName = currentSheetName;
		return vizUriModel;
	};
	$tab_VizUriModel.createForAuthoringUnpublishedSheet = function VizUriModel$CreateForAuthoringUnpublishedSheet(repoUrl, authoringSheetName) {
		var vizUriModel = $tab_VizUriModel.createForAuthoringPublishedSheet(repoUrl);
		vizUriModel.$authoringSheetName = authoringSheetName;
		return vizUriModel;
	};
	$tab_VizUriModel.createForAuthoringPublishedSheet = function VizUriModel$CreateForAuthoringPublishedSheet(repoUrl) {
		var vizUriModel = $tab_VizUriModel.$createForCurrentWindowLocationConstants(null);
		vizUriModel.$vizUriType = 2;
		var repoPathObject = new $tab_RepoPathObject(repoUrl);
		vizUriModel.$workbookId = repoPathObject.get_workbookId();
		vizUriModel.$sheetId = repoPathObject.get_sheetId();
		vizUriModel.$authoringSheetName = '';
		return vizUriModel;
	};
	$tab_VizUriModel.createInvalid = function VizUriModel$CreateInvalid() {
		var vizUriModel = new $tab_VizUriModel(null);
		vizUriModel.$vizUriType = 0;
		return vizUriModel;
	};
	$tab_VizUriModel.createForDeviceLayout = function VizUriModel$CreateForDeviceLayout(layout) {
		var vizUriModel = $tab_VizUriModel.createForCurrentWindowLocation(null);
		vizUriModel.set_deviceLayout(layout);
		return vizUriModel;
	};
	$tab_VizUriModel.$initializeUriTypeToUriTypeStringMap = function VizUriModel$InitializeUriTypeToUriTypeStringMap() {
		var $t1 = ss.getEnumerator(Object.keys($tab_VizUriModel.$uriTypeStringToUriType));
		try {
			while ($t1.moveNext()) {
				var uriTypeString = $t1.current();
				$tab_VizUriModel.$uriTypeToUriTypeString[$tab_VizUriModel.$uriTypeStringToUriType[uriTypeString]] = uriTypeString;
			}
		}
		finally {
			$t1.dispose();
		}
	};
	$tab_VizUriModel.$createForCurrentWindowLocationConstants = function VizUriModel$CreateForCurrentWindowLocationConstants(window) {
		if (tab.MiscUtil.isNullOrEmpty$2(window)) {
			window = tabBootstrap.Utility.get_locationWindow();
		}
		var location = tab.WindowHelper.getLocation(window);
		var vizUriModel = new $tab_VizUriModel(location);
		vizUriModel.$queryParams = $tab_VizUriModel.$getRelevantQueryParameters(location);
		vizUriModel.$hash = location.hash;
		vizUriModel.$origin = BrowserSupport.BrowserSupport.GetOrigin(location);
		return vizUriModel;
	};
	$tab_VizUriModel.$getRelevantQueryParameters = function VizUriModel$GetRelevantQueryParameters(location) {
		var queryParams = tab.UriExtensions.getUriQueryParameters(location.href);
		for (var $t1 = 0; $t1 < $tab_VizUriModel.$ignoredParams.length; $t1++) {
			var ignoredParam = $tab_VizUriModel.$ignoredParams[$t1];
			if (ss.keyExists(queryParams, ignoredParam)) {
				delete queryParams[ignoredParam];
			}
		}
		return queryParams;
	};
	$tab_VizUriModel.encodeUserName = function VizUriModel$EncodeUserName(username) {
		var encoded = tab.MiscUtil.percentEncode(username, $tab_VizUriModel.$usernameValidChars);
		return ss.replaceAllString(encoded, '%40', '@');
	};
	$tab_VizUriModel.createVizUriModelForAuthoringSheetInWorkbook = function VizUriModel$CreateVizUriModelForAuthoringSheetInWorkbook(sheetName, workbook) {
		var newVizUriModel;
		var sheetId = $tab_VizUriModel.$findSheetIdBySheetNameInWorkbook(sheetName, workbook);
		if (sheetId.length > 0) {
			newVizUriModel = $tab_VizUriModel.createForAuthoringPublishedSheet(workbook.repositoryUrl + '/' + sheetId);
		}
		else {
			var firstSheetId = $tab_VizUriModel.$findFirstSheetInWorkbook(workbook);
			newVizUriModel = $tab_VizUriModel.createForAuthoringUnpublishedSheet(workbook.repositoryUrl + '/' + firstSheetId, sheetName);
		}
		if (tab.MiscUtil.isNullOrEmpty$2(newVizUriModel)) {
			newVizUriModel = $tab_VizUriModel.createInvalid();
		}
		return newVizUriModel;
	};
	$tab_VizUriModel.createVizUriModelForViewingSheetInWorkbook = function VizUriModel$CreateVizUriModelForViewingSheetInWorkbook(sheetName, workbook) {
		var sheetId = $tab_VizUriModel.$findSheetIdBySheetNameInWorkbook(sheetName, workbook);
		return ((sheetId.length > 0) ? $tab_VizUriModel.createForViewingSheet(workbook.repositoryUrl + '/' + sheetId) : $tab_VizUriModel.createInvalid());
	};
	$tab_VizUriModel.$findSheetIdBySheetNameInWorkbook = function VizUriModel$FindSheetIdBySheetNameInWorkbook(sheetName, workbook) {
		var v = _.find(workbook.views, function(o) {
			return ss.referenceEquals(o.name, sheetName);
		});
		return (ss.isNullOrUndefined(v) ? '' : v.sheetId);
	};
	$tab_VizUriModel.$findFirstSheetInWorkbook = function VizUriModel$FindFirstSheetInWorkbook(workbook) {
		var v = _.first(workbook.views);
		return (ss.isNullOrUndefined(v) ? '' : v.sheetId);
	};
	global.tab.VizUriModel = $tab_VizUriModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Core.VizUriType
	var $tab_VizUriType = function() {
	};
	$tab_VizUriType.__typeName = 'tab.VizUriType';
	global.tab.VizUriType = $tab_VizUriType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WaitFeedbackType
	var $tab_WaitFeedbackType = function() {
	};
	$tab_WaitFeedbackType.__typeName = 'tab.WaitFeedbackType';
	global.tab.WaitFeedbackType = $tab_WaitFeedbackType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WaitHandler
	var $tab_WaitHandler = function() {
		this.$glassPaneNode = null;
		this.$spinnerNode = null;
		this.$refcnt = 0;
		this.$specialHideFunc = null;
		this.$isVisible = false;
		this.$isLocked = false;
		this.$glassInitialShowTimer = null;
		this.$glassSecondaryShowTimer = null;
		this.$spinnerShowTimer = null;
		this.$previousMouseDownTimestamp = 0;
		this.glassOpacityChangeDelay = ss.coalesce(tab.FeatureParamsLookup.getInt(48), 2000);
		this.spinnerShowDelay = ss.coalesce(tab.FeatureParamsLookup.getInt(49), 2000);
		this.$glassPaneNode = $('#loadingGlassPane');
		this.$glassPaneNode.on('mousedown', ss.mkdel(this, this.$handleMouseDown));
		this.$glassPaneNode.on('mouseup', ss.mkdel(this, this.$handleMouseUp));
		this.$glassPaneNode.on(BrowserSupport.BrowserSupport.MouseWheelEvent(), function(e) {
			e.preventDefault();
		});
		this.$spinnerNode = $('#loadingSpinner');
		this.$refcnt = 0;
		this.$isVisible = true;
		this.$isLocked = false;
		var boundKeyHandler = ss.mkdel(this, this.$onKey);
		document.body.addEventListener('keydown', boundKeyHandler, true);
		document.body.addEventListener('keyup', boundKeyHandler, true);
		document.body.addEventListener('keypress', boundKeyHandler, true);
	};
	$tab_WaitHandler.__typeName = 'tab.WaitHandler';
	$tab_WaitHandler.$loadingElementFadeIn = function WaitHandler$LoadingElementFadeIn(node, fadeDuration, opacity) {
		node.css('opacity', '0');
		node.css('transition', fadeDuration + 'ms opacity');
		node.show();
		node.css('display');
		node.css('opacity', opacity.toString());
	};
	$tab_WaitHandler.loadingElementFadeOut = function WaitHandler$LoadingElementFadeOut(node, fadeDuration, onEnd) {
		node.css('transition', fadeDuration + 'ms opacity');
		window.setTimeout(function() {
			node.css('opacity', '0');
		}, 0);
		window.setTimeout(function() {
			onEnd(node);
		}, fadeDuration);
	};
	global.tab.WaitHandler = $tab_WaitHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Commands.WebBaseCmd
	var $tab_WebBaseCmd$2 = function(TParam, TOut) {
		var $type = function() {
			this.$2$IsCheckedField = false;
			this.$2$IsDefaultField = false;
			this.$2$IsEnabledField = false;
			this.$2$IsRadioOnField = false;
			this.$2$IsVisibleField = false;
			ss.makeGenericType($tab_BaseCmd$2, [TParam, TOut]).call(this);
		};
		ss.registerGenericClassInstance($type, $tab_WebBaseCmd$2, [TParam, TOut], {
			get_isChecked: function WebBaseCmd$get_IsChecked() {
				return this.$2$IsCheckedField;
			},
			set_isChecked: function WebBaseCmd$set_IsChecked(value) {
				this.$2$IsCheckedField = value;
			},
			get_isDefault: function WebBaseCmd$get_IsDefault() {
				return this.$2$IsDefaultField;
			},
			set_isDefault: function WebBaseCmd$set_IsDefault(value) {
				this.$2$IsDefaultField = value;
			},
			get_isEnabled: function WebBaseCmd$get_IsEnabled() {
				return this.$2$IsEnabledField;
			},
			set_isEnabled: function WebBaseCmd$set_IsEnabled(value) {
				this.$2$IsEnabledField = value;
			},
			get_isRadioOn: function WebBaseCmd$get_IsRadioOn() {
				return this.$2$IsRadioOnField;
			},
			set_isRadioOn: function WebBaseCmd$set_IsRadioOn(value) {
				this.$2$IsRadioOnField = value;
			},
			get_isVisible: function WebBaseCmd$get_IsVisible() {
				return this.$2$IsVisibleField;
			},
			set_isVisible: function WebBaseCmd$set_IsVisible(value) {
				this.$2$IsVisibleField = value;
			},
			createCommand: function WebBaseCmd$CreateCommand() {
				return new $tab_$LocalClientCommand(ss.mkdel(this, function(t) {
					this.do$1();
				}));
			},
			transfer: function WebBaseCmd$Transfer(newCmdParams) {
				if (ss.isValue(newCmdParams)) {
					_.each(_.difference(Object.keys(newCmdParams), Object.keys(this.cmdParams)), ss.mkdel(this, function(key) {
						this.cmdParams[key] = newCmdParams[key];
					}));
				}
			},
			validateInvokeParams: function WebBaseCmd$ValidateInvokeParams() {
			},
			do$1: null,
			do$2: function WebBaseCmd$Do(returnsDeferred) {
				return null;
			},
			invoke: function WebBaseCmd$Invoke() {
				var deferred = $.Deferred();
				this.do$1();
				deferred.resolve();
				return deferred.promise();
			}
		}, function() {
			return ss.makeGenericType($tab_BaseCmd$2, [TParam, TOut]);
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_WebBaseCmd$2.__typeName = 'tab.WebBaseCmd$2';
	ss.initGenericClass($tab_WebBaseCmd$2, $asm, 2);
	global.tab.WebBaseCmd$2 = $tab_WebBaseCmd$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebCommandItemWrapper
	var $tab_WebCommandItemWrapper = function(itemModel) {
		this.$webCommand = null;
		$tab_CommandItemWrapper.call(this, itemModel);
		var actualCommand = $tab_CommandSerializer.deserialize(this.get_command(), false);
		var commandId = { ns: actualCommand.commandNamespace, cmd: actualCommand.commandName };
		ss.Debug.assert(ss.isValue(actualCommand) && $tab_WebCommandRegistry.get_instance().hasCommand(commandId), 'WebCommandItemWrapper cannot be De-serialized');
		this.$webCommand = $tab_WebCommandRegistry.get_instance().createCommand(commandId);
		this.$webCommand.set_isChecked($tab_CommandItemWrapper.prototype.get_isChecked.call(this));
		this.$webCommand.set_isDefault($tab_CommandItemWrapper.prototype.get_isDefault.call(this));
		this.$webCommand.set_isEnabled($tab_CommandItemWrapper.prototype.get_enabled.call(this));
		this.$webCommand.set_isRadioOn($tab_CommandItemWrapper.prototype.get_isRadioOn.call(this));
		this.$webCommand.set_isVisible($tab_CommandItemWrapper.prototype.get_isVisible.call(this));
		this.$webCommand.transfer(actualCommand.commandParams);
		tab.KeyboardShortcutManager.tryUpdateKeyboardShortcut(commandId.cmd, this);
	};
	$tab_WebCommandItemWrapper.__typeName = 'tab.WebCommandItemWrapper';
	global.tab.WebCommandItemWrapper = $tab_WebCommandItemWrapper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebCommandKeyboardShortcut
	var $tab_WebCommandKeyboardShortcut$1 = function(TWebCommand) {
		var $type = function(commandId, combos, shouldRequireIsEnabled, shouldRequireIsVisible, customIsAllowed, customExecuteShortcut, options, additionalCommandIds) {
			this.$webCommandWrapper = null;
			this.$combos = null;
			this.$webCommand = null;
			this.$options = null;
			this.$customExecuteShortcut = null;
			this.$customIsAllowed = null;
			this.$shouldRequireIsEnabled = false;
			this.$shouldRequireIsVisible = false;
			this.$commandId = null;
			tab.CommandKeyboardShortcut.call(this);
			this.$webCommand = $tab_WebCommandRegistry.get_instance().createCommand(commandId);
			this.$combos = combos;
			this.$options = options;
			this.$customIsAllowed = customIsAllowed;
			this.$shouldRequireIsEnabled = shouldRequireIsEnabled;
			this.$shouldRequireIsVisible = shouldRequireIsVisible;
			this.$customExecuteShortcut = customExecuteShortcut;
			this.$commandId = commandId;
			tab.KeyboardShortcutManager.associateShortcutWithCommand(this, commandId, additionalCommandIds);
		};
		ss.registerGenericClassInstance($type, $tab_WebCommandKeyboardShortcut$1, [TWebCommand], {
			get_element: function WebCommandKeyboardShortcut$get_Element() {
				return $(document.body);
			},
			get_shouldRequireCommandCheck: function WebCommandKeyboardShortcut$get_ShouldRequireCommandCheck() {
				return false;
			},
			get_keyCombos: function WebCommandKeyboardShortcut$get_KeyCombos() {
				return this.$combos;
			},
			get_additionalOptions: function WebCommandKeyboardShortcut$get_AdditionalOptions() {
				return this.$options || tab.KeyboardShortcut.prototype.get_additionalOptions.call(this);
			},
			get_commandId: function WebCommandKeyboardShortcut$get_CommandId() {
				return this.$commandId;
			},
			updateShortcutAction: function WebCommandKeyboardShortcut$UpdateShortcutAction(wrapper) {
				this.$webCommandWrapper = wrapper;
			},
			isAllowed: function WebCommandKeyboardShortcut$IsAllowed(e) {
				var customAllow = ss.staticEquals(this.$customIsAllowed, null) || this.$customIsAllowed(e);
				var isCommandEnabled = (ss.isNullOrUndefined(this.$webCommandWrapper) ? this.$webCommand.get_isEnabled() : this.$webCommandWrapper.get_enabled());
				var allowEnabled = !this.$shouldRequireIsEnabled || isCommandEnabled;
				var isCommandVisible = (ss.isNullOrUndefined(this.$webCommandWrapper) ? this.$webCommand.get_isVisible() : this.$webCommandWrapper.get_isVisible());
				var allowVisible = !this.$shouldRequireIsVisible || isCommandVisible;
				return customAllow && allowEnabled && allowVisible && tab.CommandKeyboardShortcut.prototype.isAllowed.call(this, e);
			},
			executeShortcut: function WebCommandKeyboardShortcut$ExecuteShortcut(e) {
				ss.Debug.assert(ss.isValue(this.$webCommand), 'the web command cannot be null');
				if (ss.isNullOrUndefined(this.$webCommand)) {
					return;
				}
				if (!ss.staticEquals(this.$customExecuteShortcut, null)) {
					this.$customExecuteShortcut(e, this.$webCommand);
				}
				else {
					this.$webCommand.invoke();
				}
			}
		}, function() {
			return tab.CommandKeyboardShortcut;
		}, function() {
			return [tab.IKeyboardShortcut, tab.IUpdatableKeyboardShortcut];
		});
		return $type;
	};
	$tab_WebCommandKeyboardShortcut$1.__typeName = 'tab.WebCommandKeyboardShortcut$1';
	ss.initGenericClass($tab_WebCommandKeyboardShortcut$1, $asm, 1);
	global.tab.WebCommandKeyboardShortcut$1 = $tab_WebCommandKeyboardShortcut$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebCommandRegistry
	var $tab_WebCommandRegistry = function() {
		this.$webCmdSingletonDictionary = {};
		this.$commandLocalBehavior = {};
	};
	$tab_WebCommandRegistry.__typeName = 'tab.WebCommandRegistry';
	$tab_WebCommandRegistry.get_instance = function WebCommandRegistry$get_Instance() {
		return $tab_WebCommandRegistry.$singletonInstance;
	};
	global.tab.WebCommandRegistry = $tab_WebCommandRegistry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebEditConnectionCmd
	var $tab_WebEditConnectionCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_WebEditConnectionCmd$Response]).call(this);
	};
	$tab_WebEditConnectionCmd.__typeName = 'tab.WebEditConnectionCmd';
	$tab_WebEditConnectionCmd.get_commandName = function WebEditConnectionCmd$get_CommandName() {
		return 'web-edit-connection';
	};
	global.tab.WebEditConnectionCmd = $tab_WebEditConnectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebEditConnectionCmd.Response
	var $tab_WebEditConnectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_WebEditConnectionCmd$Response.__typeName = 'tab.WebEditConnectionCmd$Response';
	global.tab.WebEditConnectionCmd$Response = $tab_WebEditConnectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebFilteredFontListProvider
	var $tab_WebFilteredFontListProvider = function(provider) {
		this.$fontFamilies = null;
		$('.TestFontContainer').remove();
		this.$fontFamilies = [];
		$tab_WebFilteredFontListProvider.$loadSupportedFontsCache(provider.toSimpleFontList());
		this.$constructListFromWebSupportedFonts(provider);
	};
	$tab_WebFilteredFontListProvider.__typeName = 'tab.WebFilteredFontListProvider';
	$tab_WebFilteredFontListProvider.get_testDiv = function WebFilteredFontListProvider$get_TestDiv() {
		return $tab_WebFilteredFontListProvider.$testDiv;
	};
	$tab_WebFilteredFontListProvider.get_supportedFonts = function WebFilteredFontListProvider$get_SupportedFonts() {
		return $tab_WebFilteredFontListProvider.$supportedFonts;
	};
	$tab_WebFilteredFontListProvider.$loadSupportedFontsCache = function WebFilteredFontListProvider$LoadSupportedFontsCache(fonts) {
		var mc = tabBootstrap.MetricsController.createContext('ComputeFonts', 32, null);
		var fontSize = '12pt';
		var testRootDiv = $('<div/>').css('visibility', 'hidden');
		var baseFont = $('<span/>').css({ display: 'inline-block', 'font-size': fontSize, 'font-family': $tab_WebFilteredFontListProvider.fakeFontName }).text($tab_WebFilteredFontListProvider.fakeFontTestText);
		testRootDiv.append(baseFont);
		var testFonts = {};
		var $t1 = ss.getEnumerator(fonts);
		try {
			while ($t1.moveNext()) {
				var font = $t1.current();
				if (ss.keyExists($tab_WebFilteredFontListProvider.get_supportedFonts(), font)) {
					continue;
				}
				var fontName = ss.formatString('"{0}", "{1}"', font, $tab_WebFilteredFontListProvider.fakeFontName);
				var testFont = $('<span/>').css({ display: 'inline-block', 'font-size': fontSize, 'font-family': fontName }).text($tab_WebFilteredFontListProvider.fakeFontTestText);
				$tab_FormattingConverters.cleanUpFontFamilyStyles(testFont);
				testRootDiv.append(testFont);
				testFonts[font] = testFont;
			}
		}
		finally {
			$t1.dispose();
		}
		if (ss.getKeyCount(testFonts) === 0) {
			return;
		}
		$tab_WebFilteredFontListProvider.get_testDiv().append(testRootDiv);
		$tab_WebFilteredFontListProvider.$baseFontWidth = tab.DoubleUtil.roundToInt(baseFont.width());
		$tab_WebFilteredFontListProvider.$baseFontHeight = tab.DoubleUtil.roundToInt(baseFont.height());
		var $t2 = _.keys(testFonts);
		for (var $t3 = 0; $t3 < $t2.length; $t3++) {
			var key = $t2[$t3];
			var elem = testFonts[key];
			var ans = $tab_WebFilteredFontListProvider.$baseFontWidth !== tab.DoubleUtil.roundToInt(elem.width()) || $tab_WebFilteredFontListProvider.$baseFontHeight !== tab.DoubleUtil.roundToInt(elem.height());
			$tab_WebFilteredFontListProvider.get_supportedFonts()[key] = ans;
		}
		testRootDiv.remove();
		mc.dispose();
	};
	global.tab.WebFilteredFontListProvider = $tab_WebFilteredFontListProvider;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebRenameConnectionCmd
	var $tab_WebRenameConnectionCmd = function() {
		ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_WebRenameConnectionCmd$Response]).call(this);
	};
	$tab_WebRenameConnectionCmd.__typeName = 'tab.WebRenameConnectionCmd';
	$tab_WebRenameConnectionCmd.get_commandName = function WebRenameConnectionCmd$get_CommandName() {
		return 'web-rename-connection';
	};
	global.tab.WebRenameConnectionCmd = $tab_WebRenameConnectionCmd;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebRenameConnectionCmd.Response
	var $tab_WebRenameConnectionCmd$Response = function(responseParams) {
		this.$$cmdParams = null;
		this.$$cmdParams = responseParams;
		this.$validateResponseParams();
	};
	$tab_WebRenameConnectionCmd$Response.__typeName = 'tab.WebRenameConnectionCmd$Response';
	global.tab.WebRenameConnectionCmd$Response = $tab_WebRenameConnectionCmd$Response;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WebZoneModel
	var $tab_WebZoneModel = function(parent) {
		this.$zoneModel = null;
		this.$2$NewWebZoneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('webZone'.toString(), null));
		this.$zoneModel = parent.get_zone();
	};
	$tab_WebZoneModel.__typeName = 'tab.WebZoneModel';
	global.tab.WebZoneModel = $tab_WebZoneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.Plugin.WidgetPlugins
	var $tab_WidgetPlugins = function() {
	};
	$tab_WidgetPlugins.__typeName = 'tab.WidgetPlugins';
	$tab_WidgetPlugins.registerWidgetPluginModule = function WidgetPlugins$RegisterWidgetPluginModule(moduleName, fileBaseName) {
		var widgetPluginModule = $tab_ModuleManager.registerRawJsModule(moduleName, fileBaseName + '.min', fileBaseName).andLoadOnDemandIf(true).moduleBeingConfigured;
		widgetPluginModule.addDependency($tab_PluginContractModules.menuApiContract);
		widgetPluginModule.addDependency($tab_PluginContractModules.hybridWidgetsContract);
		return widgetPluginModule;
	};
	global.tab.WidgetPlugins = $tab_WidgetPlugins;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WindowTableCalcModel
	var $tab_WindowTableCalcModel = function(parent) {
		this.$3$ModelUpdatedField = null;
		$tab_TypeSpecificTableCalcModel.call(this, parent, new $tab_PresModelPathItem('windowTableCalcPresModel'.toString(), null));
	};
	$tab_WindowTableCalcModel.__typeName = 'tab.WindowTableCalcModel';
	global.tab.WindowTableCalcModel = $tab_WindowTableCalcModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkbookModel
	var $tab_WorkbookModel = function(parent) {
		this.$commands = null;
		this.$2$DashboardUpdatedField = null;
		this.$2$DashboardDeletedField = null;
		this.$2$SheetsChangedField = null;
		this.$2$UIModeChangedField = null;
		this.$2$NewDataConnectionPromptField = null;
		this.$2$DataConnectionPromptDismissedField = null;
		this.$2$NewDataSchemaModelField = null;
		this.$2$SheetTypeChangedField = null;
		this.$2$DataSchemaField = null;
		this.$2$DashboardField = null;
		this.$2$SheetsInfoField = null;
		this.$2$ConnectionPromptModelField = null;
		this.$2$OAuthCredentialIdsField = null;
		this.$2$FormatPaneModelField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('workbookPresModel'.toString(), null));
		this.$commands = new $tab_CommandsModel(this);
		this.set_dataSchema(new $tab_DataSchemaModel(this));
		this.set_formatPaneModel(new $tab_FormatContainerModel(this));
		this.set_oAuthCredentialIds([]);
	};
	$tab_WorkbookModel.__typeName = 'tab.WorkbookModel';
	$tab_WorkbookModel.add_workbookModifiedChanged = function WorkbookModel$add_WorkbookModifiedChanged(value) {
		$tab_WorkbookModel.$2$WorkbookModifiedChangedField = ss.delegateCombine($tab_WorkbookModel.$2$WorkbookModifiedChangedField, value);
	};
	$tab_WorkbookModel.remove_workbookModifiedChanged = function WorkbookModel$remove_WorkbookModifiedChanged(value) {
		$tab_WorkbookModel.$2$WorkbookModifiedChangedField = ss.delegateRemove($tab_WorkbookModel.$2$WorkbookModifiedChangedField, value);
	};
	$tab_WorkbookModel.$sheetTypeFromPresModel = function WorkbookModel$SheetTypeFromPresModel(workbookPresModel) {
		if ($tab_WorkbookModel.$hasSheetLayoutInfo(workbookPresModel)) {
			return workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetType;
		}
		return null;
	};
	$tab_WorkbookModel.$hasSheetLayoutInfo = function WorkbookModel$HasSheetLayoutInfo(workbookPresModel) {
		return ss.isValue(workbookPresModel) && ss.isValue(workbookPresModel.dashboardPresModel) && ss.isValue(workbookPresModel.dashboardPresModel.sheetLayoutInfo);
	};
	$tab_WorkbookModel.fireWorkbookModifiedChanged = function WorkbookModel$FireWorkbookModifiedChanged(modified) {
		if (!ss.staticEquals($tab_WorkbookModel.$2$WorkbookModifiedChangedField, null)) {
			$tab_WorkbookModel.$2$WorkbookModifiedChangedField(modified);
		}
		$tab_AckbarEventsHelper.get().onWorkbookModifiedChanged(modified);
	};
	global.tab.WorkbookModel = $tab_WorkbookModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkbookTemplateCreationRefreshExtractJob
	var $tab_WorkbookTemplateCreationRefreshExtractJob = function(jobInProgress, jobId) {
		this.$1$JobInProgressField = false;
		this.$1$JobIdField = 0;
		this.set_jobInProgress(jobInProgress);
		this.set_jobId(jobId);
	};
	$tab_WorkbookTemplateCreationRefreshExtractJob.__typeName = 'tab.WorkbookTemplateCreationRefreshExtractJob';
	global.tab.WorkbookTemplateCreationRefreshExtractJob = $tab_WorkbookTemplateCreationRefreshExtractJob;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkbookTemplatesEnabledState
	var $tab_WorkbookTemplatesEnabledState = function() {
	};
	$tab_WorkbookTemplatesEnabledState.__typeName = 'tab.WorkbookTemplatesEnabledState';
	global.tab.WorkbookTemplatesEnabledState = $tab_WorkbookTemplatesEnabledState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupDataAlert
	var $tab_WorkgroupDataAlert = function(presModel, owner) {
		this.$presModel = null;
		this.$owner = null;
		this.$presModel = presModel;
		this.$owner = owner;
	};
	$tab_WorkgroupDataAlert.__typeName = 'tab.WorkgroupDataAlert';
	global.tab.WorkgroupDataAlert = $tab_WorkgroupDataAlert;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupDataSource
	var $tab_WorkgroupDataSource = function(presModel, project, owner) {
		this.$presModel = null;
		this.$project = null;
		this.$owner = null;
		this.$presModel = presModel;
		this.$project = project;
		this.$owner = owner;
	};
	$tab_WorkgroupDataSource.__typeName = 'tab.WorkgroupDataSource';
	$tab_WorkgroupDataSource.$filePathToBasename = function WorkgroupDataSource$FilePathToBasename(file) {
		var basenameMatch = (ss.isValue(file) ? file.match($tab_WorkgroupDataSource.$basenameRegexp) : null);
		return (ss.isValue(basenameMatch) ? basenameMatch[1] : file);
	};
	global.tab.WorkgroupDataSource = $tab_WorkgroupDataSource;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupServerCommands
	var $tab_WorkgroupServerCommands = function() {
	};
	$tab_WorkgroupServerCommands.__typeName = 'tab.WorkgroupServerCommands';
	$tab_WorkgroupServerCommands.get_getSessionInfo = function WorkgroupServerCommands$get_GetSessionInfo() {
		var deferred = $.Deferred();
		if (!tsConfig.is_guest) {
			$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getSessionInfo', null, function(sessionInfo) {
				deferred.resolve(sessionInfo);
			}, function(error) {
				deferred.reject(error);
			}), null);
		}
		else {
			ss.Debug.fail("We don't expect to use this property with guest access, since we only intend to call it when in Tableau Online.");
			deferred.reject();
		}
		return deferred;
	};
	$tab_WorkgroupServerCommands.getExtensionLoadStatus = function WorkgroupServerCommands$GetExtensionLoadStatus(url, requireFullData) {
		var deferred = $.Deferred();
		var requestParams = {};
		requestParams['path'] = tsConfig.site_url_name;
		requestParams['url'] = url;
		requestParams['requireFullData'] = requireFullData;
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getExtensionLoadStatus', requestParams, function(pm) {
			deferred.resolve(pm);
		}, function(error) {
			deferred.reject(error);
		}), null);
		return deferred;
	};
	$tab_WorkgroupServerCommands.getWritableProjects = function WorkgroupServerCommands$GetWritableProjects(callback) {
		var projects = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems(Object).call(null, 'getWritableProjects', new $tab_$FetchParamsBuilder(), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseProjects);
			ss.arrayAddRange(projects, pageOfItems.items);
			return pageOfItems;
		}), function() {
			callback(projects);
		});
	};
	$tab_WorkgroupServerCommands.getDestinationProjects = function WorkgroupServerCommands$GetDestinationProjects(sourceItemType, sourceItemIds) {
		var deferred = $.Deferred();
		var destinationProjects = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems$1(Object).call(null, 'getDestinationProjects', $tab_WorkgroupServerCommands.$createGetDestinationProjectsParams(0, sourceItemType, sourceItemIds), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseDestinationProjects);
			destinationProjects = destinationProjects.concat.apply(destinationProjects, pageOfItems.items);
			return pageOfItems;
		}), function() {
			deferred.resolve(destinationProjects);
		}, function() {
			deferred.reject();
		});
		return deferred.promise();
	};
	$tab_WorkgroupServerCommands.extendWorkgroupSession = function WorkgroupServerCommands$ExtendWorkgroupSession() {
		if (!tsConfig.is_guest) {
			$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getSessionInfo', null, function() {
			}, function() {
			}), null);
		}
	};
	$tab_WorkgroupServerCommands.getSchedules = function WorkgroupServerCommands$GetSchedules(callback) {
		var schedules = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems($tab_Schedule).call(null, 'getSchedules', new $tab_$FetchParamsBuilder(), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems($tab_Schedule).call(null, pageResult, $tab_WorkgroupServerCommands.$parseSchedules);
			ss.arrayAddRange(schedules, pageOfItems.items);
			return pageOfItems;
		}), function() {
			callback(schedules);
		});
	};
	$tab_WorkgroupServerCommands.getSiteUsers = function WorkgroupServerCommands$GetSiteUsers(text, callback) {
		var fetchParamsBuilder = $tab_WorkgroupServerCommands.$createGetSiteUsersParams(text);
		$tab_WorkgroupServerCommands.$fetchSiteUsersItems(fetchParamsBuilder, callback);
	};
	$tab_WorkgroupServerCommands.getSiteUsersWithoutGuest = function WorkgroupServerCommands$GetSiteUsersWithoutGuest(text, callback) {
		var fetchParamsBuilder = $tab_WorkgroupServerCommands.$createGetSiteUsersParams(text);
		fetchParamsBuilder.get_$params()['includeGuestIfEnabled'] = false;
		$tab_WorkgroupServerCommands.$fetchSiteUsersItems(fetchParamsBuilder, callback);
	};
	$tab_WorkgroupServerCommands.$fetchSiteUsersItems = function WorkgroupServerCommands$FetchSiteUsersItems(paramsBuilder, callback) {
		var users = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems(Object).call(null, 'getUsers', paramsBuilder, ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseSiteUsers);
			users.push.apply(users, pageOfItems.items);
			return pageOfItems;
		}), function() {
			callback(users);
		});
	};
	$tab_WorkgroupServerCommands.isWorkbookTemplateEnabled = function WorkgroupServerCommands$IsWorkbookTemplateEnabled() {
		var deferred = $.Deferred();
		var success = function(result) {
			var enabledState = ss.cast(ss.Enum.parse($tab_WorkbookTemplatesEnabledState, result['enabledState'].toString()), String);
			deferred.resolve(enabledState);
		};
		var failure = function(result1) {
			deferred.reject();
		};
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('isWorkbookTemplatesEnabled', {}, success, failure), null);
		return deferred;
	};
	$tab_WorkgroupServerCommands.retrieveAllWorkbookTemplates = function WorkgroupServerCommands$RetrieveAllWorkbookTemplates() {
		var deferred = $.Deferred();
		var success = function(result) {
			if (ss.isValue(result['errors']) || ss.isNullOrUndefined(result['workbookTemplates'])) {
				deferred.reject();
			}
			else {
				var templates = result['workbookTemplates'];
				deferred.resolve(new $tab_WorkgroupWorkbookTemplates(templates));
			}
		};
		var failure = function(result1) {
			deferred.reject();
		};
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getAllWorkbookTemplates', {}, success, failure), null);
		return deferred;
	};
	$tab_WorkgroupServerCommands.getWorkbookTemplateCreationRefreshExtractJob = function WorkgroupServerCommands$GetWorkbookTemplateCreationRefreshExtractJob(workbookId) {
		var deferred = $.Deferred();
		var success = function(result) {
			var jobInProgess = /^\s*true\s*$/i.test(result['jobInProgress'].toString());
			var jobId = parseInt(result['jobId'].toString());
			deferred.resolve(new $tab_WorkbookTemplateCreationRefreshExtractJob(jobInProgess, jobId));
		};
		var failure = function(result1) {
			deferred.reject();
		};
		var requestParams = ss.mkdict(['id', workbookId]);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getWorkbookTemplateCreationRefreshExtractJob', requestParams, success, failure), null);
		return deferred;
	};
	$tab_WorkgroupServerCommands.getBackgroundJobProgressState = function WorkgroupServerCommands$GetBackgroundJobProgressState(jobId) {
		var deferred = $.Deferred();
		var success = function(result) {
			var actions = result['actions'];
			if (actions.length === 0) {
				deferred.resolve('error');
			}
			else if (actions[0]['state'].toString() !== 'completed') {
				deferred.resolve('inProgress');
			}
			else if (/^\s*true\s*$/i.test(actions[0]['succeeded'].toString())) {
				deferred.resolve('success');
			}
			else {
				deferred.resolve('error');
			}
		};
		var failure = function(result1) {
			deferred.reject();
		};
		var requestParams = ss.mkdict(['actionId', jobId]);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getBackgroundActionInfo', requestParams, success, failure), null);
		return deferred;
	};
	$tab_WorkgroupServerCommands.getDataAlertForDataAlertId = function WorkgroupServerCommands$GetDataAlertForDataAlertId(viewId, dataAlertId) {
		var deferred = $.Deferred();
		var dataAlerts = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems$1(Object).call(null, 'getDataAlerts', $tab_WorkgroupServerCommands.$createGetDataAlertsParams(0, viewId, dataAlertId), ss.mkdel(this, function(pageResult) {
			var pageOfDataAlerts = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseDataAlerts);
			var userMap = _.indexBy($tab_WorkgroupServerCommands.$parseSiteUsers(pageResult), 'id');
			if (ss.isValue(pageOfDataAlerts)) {
				dataAlerts = dataAlerts.concat(_.map(pageOfDataAlerts.items, function(pm) {
					var owner = userMap[pm.ownerId];
					return new $tab_WorkgroupDataAlert(pm, owner);
				}));
			}
			return pageOfDataAlerts;
		}), function() {
			deferred.resolve(dataAlerts);
		}, function() {
			deferred.reject();
		});
		return deferred;
	};
	$tab_WorkgroupServerCommands.getDataAlertsForView = function WorkgroupServerCommands$GetDataAlertsForView(viewId) {
		var deferred = $.Deferred();
		var success = function(dataAlertListViewModel) {
			var userMap = _.indexBy($tab_WorkgroupServerCommands.$parseSiteUsers(dataAlertListViewModel), 'id');
			var dataAlertPresModels = $tab_WorkgroupServerCommands.$parseDataAlerts(dataAlertListViewModel);
			var dataAlerts = dataAlertPresModels.map(function(pm) {
				var owner = userMap[pm.ownerId];
				return new $tab_WorkgroupDataAlert(pm, owner);
			});
			deferred.resolve(dataAlerts);
		};
		var requestParams = {};
		requestParams['viewId'] = viewId;
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getDataAlertsForView', requestParams, success, function() {
			deferred.reject();
		}), null);
		return deferred;
	};
	$tab_WorkgroupServerCommands.getUsersForDataAlertId = function WorkgroupServerCommands$GetUsersForDataAlertId(dataAlertId) {
		var deferred = $.Deferred();
		var users = [];
		$tab_$VizPortalGetItemsUtil.$fetchItems$1(Object).call(null, 'getUsersForDataAlert', $tab_WorkgroupServerCommands.$createGetUsersForDataAlertIdParams(0, dataAlertId), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseSiteUsers);
			if (ss.isValue(pageOfItems)) {
				_.each(pageOfItems.items, function(user) {
					if (ss.isNullOrUndefined(user.dataAlertRecipientErrorCode)) {
						user.dataAlertRecipientErrorCode = 0;
					}
					users.push(user);
				});
			}
			return pageOfItems;
		}), function() {
			deferred.resolve(users);
		}, function() {
			deferred.reject();
		});
		return deferred;
	};
	$tab_WorkgroupServerCommands.checkIfUserCanReceiveDataAlert = function WorkgroupServerCommands$CheckIfUserCanReceiveDataAlert(userId) {
		var methodParams = ss.mkdict(['context', $tab_WorkgroupServerCommands.$buildViewContextObject(null), 'userId', userId]);
		var deferred = $.Deferred();
		var success = function(result) {
			deferred.resolve();
		};
		var failure = function(result1) {
			deferred.reject(result1);
		};
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('checkIfUserCanReceiveDataAlert', methodParams, success, failure), null);
		return deferred;
	};
	$tab_WorkgroupServerCommands.fetchPageOfDataSources = function WorkgroupServerCommands$FetchPageOfDataSources(index, ordering, matches) {
		var deferred = $.Deferred();
		$tab_$VizPortalGetItemsUtil.$fetchPage(Object).call(null, 'getDatasources', $tab_WorkgroupServerCommands.$createGetDataSourcesParamsForPublishedDatasources(index, ordering, matches), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseDatasources);
			var projectMap = _.indexBy($tab_WorkgroupServerCommands.$parseProjects(pageResult), 'id');
			var userMap = _.indexBy($tab_WorkgroupServerCommands.$parseSiteUsers(pageResult), 'id');
			var pageOfDataSources = { items: _.map(pageOfItems.items, function(pm) {
				var project = projectMap[pm.projectId.toString()];
				var owner = userMap[pm.ownerId.toString()];
				return new $tab_WorkgroupDataSource(pm, project, owner);
			}), moreItems: pageOfItems.moreItems };
			deferred.resolve(pageOfDataSources);
			return pageOfItems;
		}));
		return deferred.promise();
	};
	$tab_WorkgroupServerCommands.$fetchPageOfDataSourceByRepositoryUrl = function WorkgroupServerCommands$FetchPageOfDataSourceByRepositoryUrl(repositoryUrl) {
		var deferred = $.Deferred();
		var lookupKey = 'id';
		$tab_$VizPortalGetItemsUtil.$fetchPage(Object).call(null, 'getDatasources', $tab_WorkgroupServerCommands.$createGetDataSourceByRepositoryUrlParams(repositoryUrl), ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseDatasources);
			var projectMap = _.indexBy($tab_WorkgroupServerCommands.$parseProjects(pageResult), lookupKey);
			var userMap = _.indexBy($tab_WorkgroupServerCommands.$parseSiteUsers(pageResult), lookupKey);
			var pageOfDataSources = { items: _.map(pageOfItems.items, function(pm) {
				var project = projectMap[pm.projectId.toString()];
				var owner = userMap[pm.ownerId.toString()];
				return new $tab_WorkgroupDataSource(pm, project, owner);
			}), moreItems: pageOfItems.moreItems };
			deferred.resolve(pageOfDataSources);
			return pageOfItems;
		}));
		return deferred.promise();
	};
	$tab_WorkgroupServerCommands.fetchDataSourcesByRepositoryUrl = function WorkgroupServerCommands$FetchDataSourcesByRepositoryUrl(callback, repositoryUrl) {
		var datasources = [];
		$tab_WorkgroupServerCommands.$fetchPageOfDataSourceByRepositoryUrl(repositoryUrl).done(function(page) {
			ss.arrayAddRange(datasources, page.items);
			callback(datasources);
		});
	};
	$tab_WorkgroupServerCommands.fetchDataSourcesByWorkbookId = function WorkgroupServerCommands$FetchDataSourcesByWorkbookId(callback, workbookId) {
		var serverDatasources = [];
		$tab_WorkgroupServerCommands.$fetchDataSourcesWithParams(callback, $tab_WorkgroupServerCommands.$createGetDataSourcesParamsForCurrentWorkbook(workbookId), serverDatasources);
	};
	$tab_WorkgroupServerCommands.getDatasources = function WorkgroupServerCommands$GetDatasources(callback, ordering, matches) {
		var serverDatasources = [];
		$tab_WorkgroupServerCommands.$fetchDataSourcesWithParams(callback, $tab_WorkgroupServerCommands.$createGetDataSourcesParamsForPublishedDatasources(0, ordering, matches), serverDatasources);
	};
	$tab_WorkgroupServerCommands.fetchPageOfSiteUsers = function WorkgroupServerCommands$FetchPageOfSiteUsers(text, index) {
		var deferred = $.Deferred();
		var fetchParamsBuilder = $tab_WorkgroupServerCommands.$createGetSiteUsersParams(text);
		fetchParamsBuilder.set_$index(index);
		fetchParamsBuilder.get_$params()['includeGuestIfEnabled'] = false;
		$tab_$VizPortalGetItemsUtil.$fetchPage(Object).call(null, 'getUsers', fetchParamsBuilder, ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseSiteUsers);
			deferred.resolve(pageOfItems);
			return pageOfItems;
		}));
		return deferred.promise();
	};
	$tab_WorkgroupServerCommands.fetchPageOfGroups = function WorkgroupServerCommands$FetchPageOfGroups(text, index) {
		var deferred = $.Deferred();
		var fetchParamsBuilder = $tab_WorkgroupServerCommands.$createGetGroupsParams(text);
		fetchParamsBuilder.set_$index(index);
		$tab_$VizPortalGetItemsUtil.$fetchPage(Object).call(null, 'getGroups', fetchParamsBuilder, ss.mkdel(this, function(pageResult) {
			var pageOfItems = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseGroups);
			deferred.resolve(pageOfItems);
			return pageOfItems;
		}));
		return deferred.promise();
	};
	$tab_WorkgroupServerCommands.$fetchDataSourcesWithParams = function WorkgroupServerCommands$FetchDataSourcesWithParams(callback, parameters, serverDatasources) {
		$tab_$VizPortalGetItemsUtil.$fetchItems(Object).call(null, 'getDatasources', parameters, ss.mkdel(this, function(pageResult) {
			var pageOfDatasources = $tab_$VizPortalGetItemsUtil.$resolvePageOfItems(Object).call(null, pageResult, $tab_WorkgroupServerCommands.$parseDatasources);
			var projectMap = _.indexBy($tab_WorkgroupServerCommands.$parseProjects(pageResult), 'id');
			var userMap = _.indexBy($tab_WorkgroupServerCommands.$parseSiteUsers(pageResult), 'id');
			if (ss.isValue(pageOfDatasources)) {
				serverDatasources = serverDatasources.concat(_.map(pageOfDatasources.items, function(pm) {
					var project = projectMap[pm.projectId.toString()];
					var owner = userMap[pm.ownerId.toString()];
					return new $tab_WorkgroupDataSource(pm, project, owner);
				}));
			}
			return pageOfDatasources;
		}), function() {
			callback(serverDatasources);
		});
	};
	$tab_WorkgroupServerCommands.$createGetDestinationProjectsParams = function WorkgroupServerCommands$CreateGetDestinationProjectsParams(index, sourceItemType, sourceItemIds) {
		var sortOrder = { field: 'name', ascending: true };
		var $t1 = new $tab_$FetchParamsBuilder.$ctor2(sortOrder, {});
		$t1.set_$index(index);
		var fetchParamsBuilder = $t1;
		fetchParamsBuilder.get_$params()['contentType'] = sourceItemType;
		fetchParamsBuilder.get_$params()['sourceIds'] = sourceItemIds;
		return fetchParamsBuilder;
	};
	$tab_WorkgroupServerCommands.$createGetGroupsParams = function WorkgroupServerCommands$CreateGetGroupsParams(text) {
		var groupFetchOrder = { field: 'name', ascending: true };
		var groupFilter = { operator: 'and', clauses: [{ operator: 'matches', value: text }] };
		return new $tab_$FetchParamsBuilder.$ctor2(groupFetchOrder, groupFilter);
	};
	$tab_WorkgroupServerCommands.$createGetSiteUsersParams = function WorkgroupServerCommands$CreateGetSiteUsersParams(text) {
		var userFetchOrder = { field: 'displayName', ascending: true };
		var userFilter = { operator: 'and', clauses: [{ operator: 'matches', value: text }] };
		return new $tab_$FetchParamsBuilder.$ctor2(userFetchOrder, userFilter);
	};
	$tab_WorkgroupServerCommands.$createGetDataAlertsParams = function WorkgroupServerCommands$CreateGetDataAlertsParams(index, viewId, dataAlertId) {
		var filter = { operator: 'and', clauses: [{ field: 'viewId', operator: 'eq', value: viewId }, { field: 'id', operator: 'eq', value: dataAlertId }] };
		var ordering = { field: 'title', ascending: true };
		var $t1 = new $tab_$FetchParamsBuilder.$ctor2(ordering, filter);
		$t1.set_$index(index);
		var fetchParamsBuilder = $t1;
		return fetchParamsBuilder;
	};
	$tab_WorkgroupServerCommands.$createGetUsersForDataAlertIdParams = function WorkgroupServerCommands$CreateGetUsersForDataAlertIdParams(index, dataAlertId) {
		var ordering = { field: 'displayName', ascending: true };
		var $t1 = new $tab_$FetchParamsBuilder.$ctor2(ordering, null);
		$t1.set_$index(index);
		var fetchParamsBuilder = $t1;
		fetchParamsBuilder.get_$params()['dataAlertId'] = dataAlertId;
		return fetchParamsBuilder;
	};
	$tab_WorkgroupServerCommands.$createGetDataSourcesParamsForCurrentWorkbook = function WorkgroupServerCommands$CreateGetDataSourcesParamsForCurrentWorkbook(workbookId) {
		var currentWorkbookFilter = { operator: 'and', clauses: [{ field: 'workbookId', operator: 'eq', value: workbookId }] };
		return $tab_WorkgroupServerCommands.$createGetDataSourcesParams(0, null, currentWorkbookFilter, null);
	};
	$tab_WorkgroupServerCommands.$createGetDataSourcesParamsForPublishedDatasources = function WorkgroupServerCommands$CreateGetDataSourcesParamsForPublishedDatasources(index, ordering, matches) {
		var publishedDSFilter = { operator: 'and', clauses: [{ field: 'isPublished', operator: 'eq', value: true }] };
		return $tab_WorkgroupServerCommands.$createGetDataSourcesParams(index, ordering, publishedDSFilter, matches);
	};
	$tab_WorkgroupServerCommands.$createGetDataSourcesParams = function WorkgroupServerCommands$CreateGetDataSourcesParams(index, ordering, filterClause, matches) {
		if (ss.isValue(matches)) {
			filterClause.clauses = filterClause.clauses.concat([{ operator: 'matches', value: matches }]);
		}
		var $t1 = new $tab_$FetchParamsBuilder.$ctor1(ordering, filterClause);
		$t1.set_$index(index);
		var fetchParamsBuilder = $t1;
		return fetchParamsBuilder;
	};
	$tab_WorkgroupServerCommands.$createGetDataSourceByRepositoryUrlParams = function WorkgroupServerCommands$CreateGetDataSourceByRepositoryUrlParams(url) {
		var ordering = { field: 'name', ascending: true };
		var publishedDSFilter = { operator: 'and', clauses: [{ field: 'isPublished', operator: 'eq', value: true }, { field: 'repositoryUrl', operator: 'eq', value: url }] };
		var $t1 = new $tab_$FetchParamsBuilder.$ctor2(ordering, publishedDSFilter);
		$t1.set_$index(0);
		var fetchParamsBuilder = $t1;
		return fetchParamsBuilder;
	};
	$tab_WorkgroupServerCommands.setUserEmail = function WorkgroupServerCommands$SetUserEmail(email, success, failure) {
		$tab_WorkgroupServerCommands.$getSystemUserId(function(systemUserId) {
			var methodParams = ss.mkdict(['userId', systemUserId, 'email', email]);
			$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('updateUserEmail', methodParams, success, failure), null);
		}, failure);
	};
	$tab_WorkgroupServerCommands.$getSystemUserId = function WorkgroupServerCommands$GetSystemUserId(success, failure) {
		var username = tsConfig.current_user_name;
		var domainName = tsConfig.current_user_domain_name;
		var filterClauses = [{ field: 'username', operator: 'eq', value: username }, { field: 'domainName', operator: 'eq', value: domainName }];
		var getServerUsersParams = ss.mkdict(['filter', { clauses: filterClauses }]);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('getServerUsers', getServerUsersParams, function(result) {
			var users = result['users'];
			if (ss.isValue(users) && users.length > 0 && ss.keyExists(users[0], 'id')) {
				var systemUserId = ss.cast(users[0]['id'], String);
				success(systemUserId);
			}
			else {
				failure($tab_VizPortalServer.$firstErrorCodeIn(result));
			}
		}, failure), null);
	};
	$tab_WorkgroupServerCommands.createSubscription = function WorkgroupServerCommands$CreateSubscription(subject, workbook, schedule, dataConditionType, success, failure) {
		var methodParams = $tab_WorkgroupServerCommands.$buildCreateSubscriptionRequestParams(schedule.get_schedulePresModel().id, subject, workbook, ss.coalesce(dataConditionType, 'Always'), null, true, false);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('createSubscription', methodParams, success, failure), null);
	};
	$tab_WorkgroupServerCommands.createSubscriptions = function WorkgroupServerCommands$CreateSubscriptions(subject, workbook, userIds, schedule, dataConditionType, success, failure, error, message, groupIds, attachImage, attachPdf) {
		var methodParams = $tab_WorkgroupServerCommands.$buildCreateSubscriptionRequestParams(schedule.get_schedulePresModel().id, subject, workbook, ss.coalesce(dataConditionType, 'Always'), message, attachImage, attachPdf);
		methodParams['userIds'] = userIds;
		methodParams['groupIds'] = groupIds;
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequestWithPartialFailureHandling('createSubscriptions', methodParams, success, failure, error), null);
	};
	$tab_WorkgroupServerCommands.createDataAlert = function WorkgroupServerCommands$CreateDataAlert(dataAlert, success, failure) {
		var methodParams = $tab_WorkgroupServerCommands.buildCreateDataAlertRequestParams(dataAlert);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('createDataAlert', methodParams, success, failure), null);
	};
	$tab_WorkgroupServerCommands.updateDataAlert = function WorkgroupServerCommands$UpdateDataAlert(dataAlert, dataAlertId, usersToAdd, usersToRemove, success, failure) {
		var methodParams = $tab_WorkgroupServerCommands.buildUpdateDataAlertRequestParams(dataAlert, dataAlertId, usersToAdd.map(function(u) {
			return u.id.toString();
		}), usersToRemove.map(function(u1) {
			return u1.id.toString();
		}));
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('updateDataAlert', methodParams, success, failure), null);
	};
	$tab_WorkgroupServerCommands.deleteDataAlerts = function WorkgroupServerCommands$DeleteDataAlerts(dataAlertIds, success, failure) {
		var methodParams = ss.mkdict(['ids', dataAlertIds]);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('deleteDataAlerts', methodParams, success, failure), null);
	};
	$tab_WorkgroupServerCommands.resumeDataAlerts = function WorkgroupServerCommands$ResumeDataAlerts(dataAlertIds, success, failure) {
		var methodParams = ss.mkdict(['ids', dataAlertIds]);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('resumeDataAlerts', methodParams, success, failure), null);
	};
	$tab_WorkgroupServerCommands.removeUsersFromDataAlerts = function WorkgroupServerCommands$RemoveUsersFromDataAlerts(dataAlertIds, userIds, success, failure) {
		var methodParams = ss.mkdict(['dataAlertIds', dataAlertIds, 'userIds', userIds]);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('removeUsersFromDataAlerts', methodParams, success, failure), null);
	};
	$tab_WorkgroupServerCommands.addUsersToDataAlerts = function WorkgroupServerCommands$AddUsersToDataAlerts(dataAlertIds, userIds, success, failure) {
		var methodParams = ss.mkdict(['dataAlertIds', dataAlertIds, 'userIds', userIds]);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('addUsersToDataAlerts', methodParams, success, failure), null);
	};
	$tab_WorkgroupServerCommands.setDataAlertsOwner = function WorkgroupServerCommands$SetDataAlertsOwner(dataAlertIds, ownerId, success, failure) {
		var methodParams = ss.mkdict(['ids', dataAlertIds, 'ownerId', ownerId]);
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('setDataAlertsOwner', methodParams, success, failure), null);
	};
	$tab_WorkgroupServerCommands.buildCreateDataAlertRequestParams = function WorkgroupServerCommands$BuildCreateDataAlertRequestParams(dataAlert) {
		var methodParams = ss.mkdict(['title', dataAlert.get_title(), 'device', dataAlert.get_deviceType(), 'dataAlertSpecification', JSON.stringify(dataAlert.get_measurePresModel()), 'dataAlertCondition', JSON.stringify(dataAlert.get_conditionPresModel()), 'notificationIntervalInMinutes', dataAlert.get_notificationIntervalInMinutes(), 'userIds', dataAlert.get_userIds(), 'context', $tab_WorkgroupServerCommands.$buildViewContextObject(null), 'public', dataAlert.get_isPublic()]);
		return methodParams;
	};
	$tab_WorkgroupServerCommands.$buildViewContextObject = function WorkgroupServerCommands$BuildViewContextObject(dataAlert) {
		var contextType;
		var contextId;
		if (ss.isValue(dataAlert) && ss.isValue(dataAlert.get_customizedViewId())) {
			contextType = 'customizedView';
			contextId = dataAlert.get_customizedViewId() + '';
		}
		else if (ss.isValue(tsConfig.current_custom_view_id)) {
			contextType = 'customizedView';
			contextId = tsConfig.current_custom_view_id + '';
		}
		else {
			contextType = 'view';
			contextId = tsConfig.current_view_id;
		}
		return ss.mkdict(['contextType', contextType, 'id', contextId]);
	};
	$tab_WorkgroupServerCommands.buildUpdateDataAlertRequestParams = function WorkgroupServerCommands$BuildUpdateDataAlertRequestParams(dataAlert, dataAlertId, userIdsToAdd, userIdsToRemove) {
		var methodParams = ss.mkdict(['dataAlertId', dataAlertId, 'title', dataAlert.get_title(), 'dataAlertSpecification', JSON.stringify(dataAlert.get_measurePresModel()), 'dataAlertCondition', JSON.stringify(dataAlert.get_conditionPresModel()), 'notificationIntervalInMinutes', dataAlert.get_notificationIntervalInMinutes(), 'userIdsToAdd', userIdsToAdd, 'userIdsToRemove', userIdsToRemove, 'public', dataAlert.get_isPublic()]);
		return methodParams;
	};
	$tab_WorkgroupServerCommands.logOff = function WorkgroupServerCommands$LogOff(failure) {
		var success = function(result) {
			var redirectUrl = ss.cast(result['redirectUrl'], String);
			tab.WindowHelper.setLocationHref(window.self, (ss.isValue(redirectUrl) ? redirectUrl : '/'));
		};
		$tab_XhrUtil.helper($tab_VizPortalServer.createRequest('logout', {}, success, failure), null);
	};
	$tab_WorkgroupServerCommands.createCommentingServer = function WorkgroupServerCommands$CreateCommentingServer() {
		return new $tab_CommentingServer($tab_VizPortalServer.$createRequestInternal, $tab_CommandController.get().legacySession);
	};
	$tab_WorkgroupServerCommands.$buildCreateSubscriptionRequestParams = function WorkgroupServerCommands$BuildCreateSubscriptionRequestParams(scheduleId, subject, workbook, dataConditionType, message, attachImage, attachPdf) {
		return ss.mkdict(['scheduleId', scheduleId, 'subject', subject.trim(), 'targetType', (workbook ? 'Workbook' : 'View'), 'targetId', (workbook ? tsConfig.current_workbook_id : tsConfig.current_view_id), 'customizedViewId', tsConfig.current_custom_view_id, 'dataConditionType', dataConditionType, 'subscriptionMessage', message, 'attachImage', attachImage, 'attachPdf', attachPdf]);
	};
	$tab_WorkgroupServerCommands.$parseProjects = function WorkgroupServerCommands$ParseProjects(result) {
		return _.map(result['projects'], function(projectJson) {
			return projectJson;
		});
	};
	$tab_WorkgroupServerCommands.$parseDestinationProjects = function WorkgroupServerCommands$ParseDestinationProjects(result) {
		return _.map(result['projects'], function(projectJson) {
			return projectJson;
		});
	};
	$tab_WorkgroupServerCommands.$parseSchedules = function WorkgroupServerCommands$ParseSchedules(result) {
		return _.map(result['schedules'], function(scheduleJson) {
			return new $tab_Schedule(scheduleJson);
		});
	};
	$tab_WorkgroupServerCommands.$parseSiteUsers = function WorkgroupServerCommands$ParseSiteUsers(result) {
		return _.map(result['users'], function(userJson) {
			var recipientErrorKey = 'dataAlertRecipientErrorCode';
			var user = { username: userJson['username'].toString(), friendlyName: userJson['displayName'].toString(), id: parseInt(userJson['id'].toString()), hasEmail: userJson['hasEmail'] };
			if (ss.isValue(userJson[recipientErrorKey])) {
				user.dataAlertRecipientErrorCode = parseInt(userJson[recipientErrorKey].toString());
			}
			return user;
		});
	};
	$tab_WorkgroupServerCommands.$parseGroups = function WorkgroupServerCommands$ParseGroups(result) {
		return _.map(result['groups'], function(groupJson) {
			return { name: groupJson['name'].toString(), id: parseInt(groupJson['id'].toString()), userCount: parseInt(groupJson['userCount'].toString()) };
		});
	};
	$tab_WorkgroupServerCommands.$parseDataAlerts = function WorkgroupServerCommands$ParseDataAlerts(result) {
		return ss.cast(result['dataAlerts'], Array);
	};
	$tab_WorkgroupServerCommands.$parseDatasources = function WorkgroupServerCommands$ParseDatasources(result) {
		return ss.cast(result['datasources'], Array);
	};
	global.tab.WorkgroupServerCommands = $tab_WorkgroupServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupServerErrorCode
	var $tab_WorkgroupServerErrorCode = function() {
	};
	$tab_WorkgroupServerErrorCode.__typeName = 'tab.WorkgroupServerErrorCode';
	global.tab.WorkgroupServerErrorCode = $tab_WorkgroupServerErrorCode;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupServerOauthSettings
	var $tab_WorkgroupServerOauthSettings = function(oauthSettingsPresmodels) {
		this.$oauthSettingsPresmodels = null;
		this.$oauthSettingsPresmodels = oauthSettingsPresmodels;
	};
	$tab_WorkgroupServerOauthSettings.__typeName = 'tab.WorkgroupServerOauthSettings';
	global.tab.WorkgroupServerOauthSettings = $tab_WorkgroupServerOauthSettings;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupServerRequest
	var $tab_WorkgroupServerRequest = function(methodName, methodParams, success, error) {
		this.methodName = null;
		this.methodParams = null;
		this.success = null;
		this.error = null;
		this.methodName = methodName;
		this.methodParams = methodParams;
		this.success = success;
		this.error = error;
	};
	$tab_WorkgroupServerRequest.__typeName = 'tab.WorkgroupServerRequest';
	global.tab.WorkgroupServerRequest = $tab_WorkgroupServerRequest;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorkgroupWorkbookTemplates
	var $tab_WorkgroupWorkbookTemplates = function(presModels) {
		this.$templatePresmodels = null;
		this.$templatePresmodels = presModels;
	};
	$tab_WorkgroupWorkbookTemplates.__typeName = 'tab.WorkgroupWorkbookTemplates';
	global.tab.WorkgroupWorkbookTemplates = $tab_WorkgroupWorkbookTemplates;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorksheetServerCommands
	var $tab_WorksheetServerCommands = function() {
	};
	$tab_WorksheetServerCommands.__typeName = 'tab.WorksheetServerCommands';
	$tab_WorksheetServerCommands.revert = function WorksheetServerCommands$Revert(success) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'revert-workbook' }, null);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', success, null));
	};
	$tab_WorksheetServerCommands.undo = function WorksheetServerCommands$Undo() {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'undo' }, null);
		c.commandParams = {};
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', null, null));
	};
	$tab_WorksheetServerCommands.undo$1 = function WorksheetServerCommands$Undo(success, failure) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'undo' }, null);
		c.commandParams = {};
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', success, failure));
	};
	$tab_WorksheetServerCommands.undoToPosition = function WorksheetServerCommands$UndoToPosition(historyPosition) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'undo' }, null);
		c.commandParams = $tab_WorksheetServerCommands.$createHistoryParam(historyPosition);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', null, null));
	};
	$tab_WorksheetServerCommands.redo = function WorksheetServerCommands$Redo() {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'redo' }, null);
		c.commandParams = {};
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', null, null));
	};
	$tab_WorksheetServerCommands.redo$1 = function WorksheetServerCommands$Redo(success, failure) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'redo' }, null);
		c.commandParams = {};
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', success, failure));
	};
	$tab_WorksheetServerCommands.redoToPosition = function WorksheetServerCommands$RedoToPosition(historyPosition) {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'redo' }, null);
		c.commandParams = $tab_WorksheetServerCommands.$createHistoryParam(historyPosition);
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', null, null));
	};
	$tab_WorksheetServerCommands.clearFuture = function WorksheetServerCommands$ClearFuture() {
		var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'clear-future' }, null);
		c.commandParams = {};
		$tab_CommandController.SendCommand($tab_RemoteClientCommand.create(c, 'immediately', null, null));
	};
	$tab_WorksheetServerCommands.$createHistoryParam = function WorksheetServerCommands$CreateHistoryParam(historyPosition) {
		var cmdParams = {};
		cmdParams['undoPosition'] = historyPosition;
		return cmdParams;
	};
	global.tab.WorksheetServerCommands = $tab_WorksheetServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorldCheckpointHolder
	var $tab_WorldCheckpointHolder = function(commonDialogProvider) {
		this.$commonDialogProvider = null;
		this.$worldCheckpoint = null;
		this.currentWorldDiffersFromCheckpoint = false;
		this.$commonDialogProvider = commonDialogProvider;
		this.currentWorldDiffersFromCheckpoint = false;
	};
	$tab_WorldCheckpointHolder.__typeName = 'tab.WorldCheckpointHolder';
	global.tab.WorldCheckpointHolder = $tab_WorldCheckpointHolder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorldUpdateInterceptor
	var $tab_WorldUpdateInterceptor = function() {
		this.$1$OnBootstrapResponseField = null;
		this.$1$OnCommandResponseField = null;
		this.$1$OnProgressiveLoadCompleteField = null;
		this.$1$OnDashboardLoadCompleteField = null;
	};
	$tab_WorldUpdateInterceptor.__typeName = 'tab.WorldUpdateInterceptor';
	$tab_WorldUpdateInterceptor.get = function WorldUpdateInterceptor$Get() {
		return $tab_WorldUpdateInterceptor.$instance.value();
	};
	global.tab.WorldUpdateInterceptor = $tab_WorldUpdateInterceptor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.WorldUpdateServerCommands
	var $tab_WorldUpdateServerCommands = function() {
	};
	$tab_WorldUpdateServerCommands.__typeName = 'tab.WorldUpdateServerCommands';
	$tab_WorldUpdateServerCommands.getWorldUpdate = function WorldUpdateServerCommands$GetWorldUpdate(onFinish) {
		var cmd = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-world-update' }, $tab_WorldUpdateServerCommands.$createGetWorldUpdateParams());
		$tab_ServerCommands.executeServerCommand(cmd, 'immediately', ss.cast(onFinish, Function), ss.cast(onFinish, Function));
	};
	$tab_WorldUpdateServerCommands.$createGetWorldUpdateParams = function WorldUpdateServerCommands$CreateGetWorldUpdateParams() {
		var cmdParams = {};
		cmdParams['sheet'] = tsConfig.current_sheet_name;
		return cmdParams;
	};
	global.tab.WorldUpdateServerCommands = $tab_WorldUpdateServerCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.XhrUtil
	var $tab_XhrUtil = function() {
	};
	$tab_XhrUtil.__typeName = 'tab.XhrUtil';
	$tab_XhrUtil.get_currentTabName = function XhrUtil$get_CurrentTabName() {
		return $tab_XhrUtil.$currentTabName;
	};
	$tab_XhrUtil.set_currentTabName = function XhrUtil$set_CurrentTabName(value) {
		$tab_XhrUtil.$currentTabName = value;
	};
	$tab_XhrUtil.helper = function XhrUtil$Helper(args, handler) {
		var xhr = new $tab_XhrUtil();
		if (!ss.isValue(args.success) && ss.isValue(handler)) {
			args.success = handler.get_successDelegate();
		}
		if (!ss.isValue(args.complete) && ss.isValue(handler)) {
			args.complete = handler.get_completedDelegate();
		}
		if (!ss.isValue(args.error) && ss.isValue(handler)) {
			args.error = handler.get_errorDelegate();
		}
		return xhr.request(args);
	};
	$tab_XhrUtil.getMultipartData = function XhrUtil$GetMultipartData(file, nameValues) {
		var initBoundary = $tab_XhrUtil.randomString();
		var strBoundary = '--' + initBoundary;
		var CRLF = '\r\n';
		var sb = new ss.StringBuilder();
		if (ss.isValue(file)) {
			sb.append(strBoundary);
			sb.append(CRLF);
			sb.append('Content-Disposition: form-data; name="');
			sb.append(file['name']);
			sb.append('"');
			if ('filename' in file) {
				sb.append('; filename="');
				sb.append(file['filename']);
				sb.append('"');
			}
			sb.append(CRLF);
			sb.append('Content-Type: ');
			sb.append(file['contentType']);
			sb.append(CRLF);
			sb.append(CRLF);
			sb.append(file['content']);
			sb.append(CRLF);
		}
		if (ss.isValue(nameValues)) {
			var $t1 = new ss.ObjectEnumerator(nameValues);
			try {
				while ($t1.moveNext()) {
					var e = $t1.current();
					sb.append(strBoundary);
					sb.append(CRLF);
					sb.append('Content-Disposition: form-data; name="');
					sb.append(e.key);
					sb.append('"');
					sb.append(CRLF);
					sb.append(CRLF);
					if (ss.isInstanceOfType(e.value, String)) {
						sb.append(e.value);
					}
					else {
						sb.append(JSON.stringify(e.value));
					}
					sb.append(CRLF);
				}
			}
			finally {
				$t1.dispose();
			}
		}
		sb.append(strBoundary);
		sb.append('--');
		sb.append(CRLF);
		var result = { header: initBoundary, body: sb.toString() };
		return result;
	};
	$tab_XhrUtil.randomString = function XhrUtil$RandomString() {
		var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';
		var stringLength = 8;
		var randomString = '';
		for (var i = 0; i < stringLength; i++) {
			var ran = Math.random() * chars.length;
			var rnum = ran | 0;
			randomString += chars.substring(rnum, rnum + 1);
		}
		return randomString;
	};
	global.tab.XhrUtil = $tab_XhrUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZoneCommonModel
	var $tab_ZoneCommonModel = function(parent, zoneId) {
		this.$zoneStyleModel = null;
		this.$contentStyleModel = null;
		this.$localX = null;
		this.$localY = null;
		this.$2$ResizeZoneField = null;
		this.$2$ChangeZoneTitleVisibilityField = null;
		this.$2$ChangeZoneFloatingStateField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(zoneId.toString(), 0));
		this.$zoneStyleModel = new $tab_StyledBoxModel(this);
		this.$contentStyleModel = new $tab_StyledBoxModel(this);
	};
	$tab_ZoneCommonModel.__typeName = 'tab.ZoneCommonModel';
	global.tab.ZoneCommonModel = $tab_ZoneCommonModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZoneContentWrapperModel
	var $tab_ZoneContentWrapperModel = function(parent) {
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('presModelHolder'.toString(), null));
	};
	$tab_ZoneContentWrapperModel.__typeName = 'tab.ZoneContentWrapperModel';
	global.tab.ZoneContentWrapperModel = $tab_ZoneContentWrapperModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZoneModel
	var $tab_ZoneModel = function(parent, dashboard, zoneId) {
		this.$dashboardModel = null;
		this.$zoneContentModel = null;
		this.$zoneCommonModel = null;
		this.$contentWrapperModel = null;
		this.$chromeCommands = null;
		this.$convertedBGColor = null;
		this.$containsLegacyQuickFilter = false;
		this.$containsLegacyParameter = false;
		this.$localZoneIndex = null;
		this.$2$NewZoneContentField = null;
		this.$2$UpdateZIndexField = null;
		this.$2$RemoveZoneContentField = null;
		this.$2$UpdateZoneField = null;
		this.$2$ChildrenAddedField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem(zoneId.toString(), 0));
		this.$dashboardModel = dashboard;
		this.$zoneCommonModel = new $tab_ZoneCommonModel(this, zoneId);
		this.$chromeCommands = new $tab_CommandsModel(this);
	};
	$tab_ZoneModel.__typeName = 'tab.ZoneModel';
	$tab_ZoneModel.$typeOfContent = function ZoneModel$TypeOfContent(zonePresModel) {
		var content = zonePresModel.presModelHolder;
		if (ss.isNullOrUndefined(content)) {
			return null;
		}
		if (ss.getKeyCount(content) === 1) {
			var $t1 = ss.getEnumerator(Object.keys(content));
			try {
				while ($t1.moveNext()) {
					var key = $t1.current();
					return key;
				}
			}
			finally {
				$t1.dispose();
			}
		}
		return '';
	};
	$tab_ZoneModel.getContent = function ZoneModel$GetContent(zonePresModel, contentType) {
		if (ss.isNullOrUndefined(zonePresModel) || ss.isNullOrUndefined(zonePresModel.presModelHolder)) {
			return null;
		}
		if (!(contentType in zonePresModel.presModelHolder)) {
			return null;
		}
		return zonePresModel.presModelHolder[contentType];
	};
	$tab_ZoneModel.$parseJson = function ZoneModel$ParseJson(o) {
		return (ss.isNullOrEmptyString(o) ? null : JSON.parse(o));
	};
	$tab_ZoneModel.$getLegendTypeFromZoneType = function ZoneModel$GetLegendTypeFromZoneType(zt) {
		switch (zt) {
			case 'color': {
				return 'color';
			}
			case 'shape': {
				return 'shape';
			}
			case 'size': {
				return 'size';
			}
			case 'map': {
				return 'map';
			}
		}
		tab.Logger.getLogger($tab_ZoneModel, null).warn('Unsupported legend type: %s', [zt]);
		return 'color';
	};
	global.tab.ZoneModel = $tab_ZoneModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Domain.ZonesModel
	var $tab_ZonesModel = function(parent) {
		this.$zoneModels = null;
		this.$zoneChildren = null;
		this.$cachedZoneModelArray = null;
		this.$2$NewZoneField = null;
		this.$2$RemovedZoneField = null;
		$tab_Model.call(this, parent, new $tab_PresModelPathItem('zones'.toString(), null));
		this.set_zonePresModels({});
		this.$zoneModels = {};
		this.$zoneChildren = {};
	};
	$tab_ZonesModel.__typeName = 'tab.ZonesModel';
	$tab_ZonesModel.$zoneKey = function ZonesModel$ZoneKey(zoneId) {
		return 'z_' + zoneId;
	};
	global.tab.ZonesModel = $tab_ZonesModel;
	ss.initInterface($tab_IRemoteCommandHandler, $asm, { add_onRemoteCommandResponse: null, remove_onRemoteCommandResponse: null, add_onRemoteCommandException: null, remove_onRemoteCommandException: null, executeSingleRemoteCommand: null, cancelRunningCommand: null });
	ss.initClass($tab_$BaseSessionCommandHandler, $asm, {
		add_onRemoteCommandResponse: function BaseSessionCommandHandler$add_OnRemoteCommandResponse(value) {
			this.$1$OnRemoteCommandResponseField = ss.delegateCombine(this.$1$OnRemoteCommandResponseField, value);
		},
		remove_onRemoteCommandResponse: function BaseSessionCommandHandler$remove_OnRemoteCommandResponse(value) {
			this.$1$OnRemoteCommandResponseField = ss.delegateRemove(this.$1$OnRemoteCommandResponseField, value);
		},
		add_onRemoteCommandException: function BaseSessionCommandHandler$add_OnRemoteCommandException(value) {
			this.$1$OnRemoteCommandExceptionField = ss.delegateCombine(this.$1$OnRemoteCommandExceptionField, value);
		},
		remove_onRemoteCommandException: function BaseSessionCommandHandler$remove_OnRemoteCommandException(value) {
			this.$1$OnRemoteCommandExceptionField = ss.delegateRemove(this.$1$OnRemoteCommandExceptionField, value);
		},
		$getRemoteException: function BaseSessionCommandHandler$GetRemoteException(o) {
			if (ss.isNullOrUndefined(o)) {
				return null;
			}
			var response = o['vqlCmdResponse'.toString()];
			if (ss.isValue(response) && response.cmdResultList.length > 0) {
				var resultPM = response.cmdResultList[0];
				var result = resultPM.commandReturn;
				if (ss.isValue(result) && ss.keyExists(result, 'commandValidationPresModel')) {
					var validation = result['commandValidationPresModel'];
					if (!validation.valid) {
						return new ss.Exception(ss.formatString('{0}: {1}', resultPM.commandName, validation.errorMessage));
					}
				}
			}
			return null;
		},
		cancelRunningCommand: function BaseSessionCommandHandler$CancelRunningCommand(c, successHandler, failureHandler) {
			if (!tab.FeatureFlags.isEnabled('CommandCancellation')) {
				ss.Debug.assert(false, 'Should not be able to call this while feature flag is disabled.');
				return;
			}
			this.$session.cancelRunningCommand(c, function(o, cancelStatus) {
				successHandler(o, cancelStatus);
			}, failureHandler);
		},
		executeSingleRemoteCommand: function BaseSessionCommandHandler$ExecuteSingleRemoteCommand(command, onCommandSuccess, onCommandFailure) {
			for (var $t1 = 0; $t1 < this.$commandThrottlers.length; $t1++) {
				var throttler = this.$commandThrottlers[$t1];
				if (throttler.$processCommand(command, onCommandSuccess, onCommandFailure) === 0) {
					return;
				}
			}
			var metricsExtraInfo = 'cn: ' + command.commandName;
			var mc = tabBootstrap.MetricsController.createContext('EXEREM'.toString(), 4, metricsExtraInfo);
			var localCommandSeqId = this.$commandSequenceId;
			var internalFailure = ss.mkdel(this, function(x) {
				mc.dispose();
				var errMsg = ss.formatString("Command '{0}' (namespace: '{1}') encountered error: '{2}'", command.commandName, command.commandNamespace, x.get_message());
				tab.Log.get(this).error(errMsg, []);
				this.$handleRemoteCommandException(localCommandSeqId, command, x);
				onCommandFailure(x);
			});
			var internalSuccess = ss.mkdel(this, function(o, commandCanceled) {
				mc.dispose();
				if (commandCanceled) {
					return;
				}
				var remoteException = this.$getRemoteException(o);
				if (ss.isValue(remoteException)) {
					internalFailure(remoteException);
					return;
				}
				this.$handleRemoteCommandResponse(localCommandSeqId, command, o);
				var pm = $tab_PresentationModel.fromCommand(o, command);
				var connectionAttemptInfo = $tab_PresentationModel.getConnectionAttemptInfo(o);
				if (ss.isValue(connectionAttemptInfo) && connectionAttemptInfo.dataSourceConnectionAttemptInfos.length > 0) {
					if (connectionAttemptInfo.dataSourceConnectionAttemptInfos.length === 1) {
						var errorResponse = new tab.DataSourceConnectionAttemptErrorResponse.$ctor1(connectionAttemptInfo.dataSourceConnectionAttemptInfos[0]);
						onCommandFailure(new ss.Exception(JSON.stringify(errorResponse)));
					}
					else {
						onCommandFailure(new ss.Exception(tab.Strings.DataSourceGenericErrorMsg));
					}
				}
				else {
					onCommandSuccess(pm);
				}
			});
			tab.Log.get(this).debug('Executing command %o', [command]);
			this.$session.executeServerCommand(command, internalSuccess, internalFailure);
			++this.$commandSequenceId;
		},
		$installCommandThrottling$1: function BaseSessionCommandHandler$InstallCommandThrottling(commandNS, commandName, throttleRate) {
			var $t1 = new $tab_CommandThrottlerTarget();
			$t1.commandNamespace = commandNS;
			$t1.commandName = commandName;
			this.$installCommandThrottling([$t1], throttleRate);
		},
		$installCommandThrottling: function BaseSessionCommandHandler$InstallCommandThrottling(targets, throttleRate) {
			this.$installCommandThrottling$2(targets, throttleRate, null, null);
		},
		$installCommandThrottling$2: function BaseSessionCommandHandler$InstallCommandThrottling(targets, throttleRate, pendingCommandThreshold, pendingCommandDelay) {
			var throttler = new $tab_$CommandThrottler(this, targets, throttleRate, pendingCommandThreshold, pendingCommandDelay);
			throttler.add_$commandDropped(ss.mkdel(this, this.$handleDroppedCommand));
			this.$commandThrottlers.push(throttler);
		},
		$handleDroppedCommand: function BaseSessionCommandHandler$HandleDroppedCommand(c, success, failure) {
			var exception = new ss.Exception('Command ' + c.commandName + ' was dropped by the CommandThrottler');
			this.$handleRemoteCommandException(0, c, exception);
			failure(exception);
		},
		$handleRemoteCommandException: function BaseSessionCommandHandler$HandleRemoteCommandException(localCommandSeqId, command, x) {
			if (!ss.staticEquals(this.$1$OnRemoteCommandExceptionField, null)) {
				this.$1$OnRemoteCommandExceptionField(localCommandSeqId, command, x);
			}
		},
		$handleRemoteCommandResponse: function BaseSessionCommandHandler$HandleRemoteCommandResponse(localCommandSeqId, command, o) {
			if (!ss.staticEquals(this.$1$OnRemoteCommandResponseField, null)) {
				this.$1$OnRemoteCommandResponseField(localCommandSeqId, command, o);
			}
		}
	}, null, [$tab_IRemoteCommandHandler]);
	ss.initClass($tab_$BrushingDataUtils, $asm, {});
	ss.initClass($tab_$BrushingDataValues, $asm, {
		get_$fieldCaptions: function BrushingDataValues$get_FieldCaptions() {
			return this.$fieldCaptions;
		},
		get_$isEmpty: function BrushingDataValues$get_IsEmpty() {
			return this.$values.size === 0;
		},
		get_$values: function BrushingDataValues$get_Values() {
			var result = [];
			this.$values.forEach(function(ints) {
				result.push(ints);
			});
			return result;
		},
		$addValues: function BrushingDataValues$AddValues(valueIndexes, colIndexes) {
			if (ss.isNullOrUndefined(valueIndexes) || valueIndexes.length === 0) {
				return;
			}
			this.$colValTupleSets.push($tab_$BrushingDataValues.$createSortedColValPairs(colIndexes, valueIndexes));
			this.$areValuesMissing = this.$areValuesMissing || this.$isValueMissing(valueIndexes);
			valueIndexes = $tab_$BrushingDataValues.$sortValsByColumnIndexes(colIndexes, valueIndexes);
			this.$values.set(valueIndexes.join(','), valueIndexes);
		},
		$findMatch: function BrushingDataValues$FindMatch(colIndexes, valueIndexes) {
			if (ss.isNullOrUndefined(valueIndexes) || valueIndexes.length === 0) {
				return false;
			}
			var toRet;
			if (this.$areValuesMissing || this.$isValueMissing(valueIndexes)) {
				toRet = this.$mergeCompare(colIndexes, valueIndexes);
			}
			else {
				var sortedVals = $tab_$BrushingDataValues.$sortValsByColumnIndexes(colIndexes, valueIndexes);
				toRet = this.$values.has(sortedVals.join(','));
			}
			return toRet;
		},
		$isValueMissing: function BrushingDataValues$IsValueMissing(valueIndexes) {
			for (var $t1 = 0; $t1 < valueIndexes.length; $t1++) {
				var val = valueIndexes[$t1];
				if (!ss.isValue(val)) {
					return true;
				}
			}
			return false;
		},
		$mergeCompare: function BrushingDataValues$MergeCompare(colIndexes, valueIndexes) {
			var testVals = $tab_$BrushingDataValues.$createSortedColValPairs(colIndexes, valueIndexes);
			for (var $t1 = 0; $t1 < this.$colValTupleSets.length; $t1++) {
				var colVals = this.$colValTupleSets[$t1];
				var matchedAll = true;
				var nonNullMatchExists = false;
				var testIdx = 0;
				var localIdx = 0;
				while (matchedAll && localIdx < colVals.length && testIdx < testVals.length) {
					var localPair = colVals[localIdx];
					var testPair = testVals[testIdx];
					if (localPair.item1 < testPair.item1) {
						++localIdx;
					}
					else if (localPair.item1 > testPair.item1) {
						++testIdx;
					}
					else {
						matchedAll = !ss.isValue(localPair.item2) || !ss.isValue(testPair.item2) || ss.referenceEquals(localPair.item2, testPair.item2);
						nonNullMatchExists = nonNullMatchExists || ss.referenceEquals(localPair.item2, testPair.item2);
						++localIdx;
						++testIdx;
					}
				}
				if (matchedAll && nonNullMatchExists) {
					return true;
				}
			}
			return false;
		}
	});
	ss.initClass($tab_$CaptionHeuristics, $asm, {
		get_$longestByWord: function CaptionHeuristics$get_LongestByWord() {
			return this.$1$LongestByWordField;
		},
		set_$longestByWord: function CaptionHeuristics$set_LongestByWord(value) {
			this.$1$LongestByWordField = value;
		},
		get_$longestByChar: function CaptionHeuristics$get_LongestByChar() {
			return this.$1$LongestByCharField;
		},
		set_$longestByChar: function CaptionHeuristics$set_LongestByChar(value) {
			this.$1$LongestByCharField = value;
		},
		get_$avgLengthByChar: function CaptionHeuristics$get_AvgLengthByChar() {
			return this.$1$AvgLengthByCharField;
		},
		set_$avgLengthByChar: function CaptionHeuristics$set_AvgLengthByChar(value) {
			this.$1$AvgLengthByCharField = value;
		},
		get_$avgLengthByWord: function CaptionHeuristics$get_AvgLengthByWord() {
			return this.$1$AvgLengthByWordField;
		},
		set_$avgLengthByWord: function CaptionHeuristics$set_AvgLengthByWord(value) {
			this.$1$AvgLengthByWordField = value;
		}
	});
	$tab_$CaptionHeuristics.$ctor1.prototype = $tab_$CaptionHeuristics.prototype;
	ss.initClass($tab_$ClientCommandQueue, $asm, {
		get_$count: function ClientCommandQueue$get_Count() {
			return this.$commands.length;
		},
		$enqueue: function ClientCommandQueue$Enqueue(command) {
			if (command.get_isOneAtATime()) {
				this.$removeCommands(ss.getInstanceType(command));
			}
			this.$commands.push(command);
			tab.Log.get(this).debug('Enqueue new command (%s). There are %i commands queued up now.', [ss.getTypeName(ss.getInstanceType(command)), this.get_$count()]);
		},
		$dequeue: function ClientCommandQueue$Dequeue() {
			if (this.$commands.length <= 0) {
				return null;
			}
			var toReturn = this.$commands[0];
			ss.removeAt(this.$commands, 0);
			tab.Log.get(this).debug('Dequeue command. There are %i commands queued up now.', [this.get_$count()]);
			return toReturn;
		},
		$removeCommands: function ClientCommandQueue$RemoveCommands(commandType) {
			var removed = 0;
			for (var ii = this.$commands.length - 1; ii >= 0; --ii) {
				if (ss.referenceEquals(ss.getInstanceType(this.$commands[ii]), commandType)) {
					++removed;
					ss.removeAt(this.$commands, ii);
				}
			}
			if (removed > 0) {
				tab.Log.get(this).debug('# of %s commands removed: %i. There are %i commands queued up now.', [ss.getTypeFullName(commandType), removed, this.$commands.length]);
			}
		}
	});
	ss.initClass($tab_$CommandThrottler, $asm, {
		add_$commandDropped: function CommandThrottler$add_CommandDropped(value) {
			this.$1$CommandDroppedField = ss.delegateCombine(this.$1$CommandDroppedField, value);
		},
		remove_$commandDropped: function CommandThrottler$remove_CommandDropped(value) {
			this.$1$CommandDroppedField = ss.delegateRemove(this.$1$CommandDroppedField, value);
		},
		$processCommand: function CommandThrottler$ProcessCommand(command, success, failure) {
			var throttleCommand = false;
			for (var $t1 = 0; $t1 < this.$commandsToThrottle.length; $t1++) {
				var target = this.$commandsToThrottle[$t1];
				if (ss.referenceEquals(target.commandName, command.commandName) && ss.referenceEquals(target.commandNamespace, command.commandNamespace)) {
					throttleCommand = true;
					break;
				}
			}
			if (!throttleCommand) {
				return 1;
			}
			if (this.$currentlyExecuting) {
				return 1;
			}
			if (ss.isValue(this.$queuedCommand) && ss.isValue(this.$throttleTimer)) {
				this.$notifyDropCommand(this.$queuedCommand, this.$queuedSuccessCallback, this.$queuedFailureCallback);
				this.$queuedCommand = command;
				this.$queuedSuccessCallback = success;
				this.$queuedFailureCallback = failure;
				return 0;
			}
			var now = Math.floor(tabBootstrap.MetricsController.getTiming());
			var timeDelta = now - this.$lastCommandTime;
			if (this.$throttleRate !== -1 && timeDelta < this.$throttleRate) {
				this.$queuePendingCommand(command, success, failure, this.$throttleRate - timeDelta);
			}
			else if (this.$pendingCommandThreshold !== -1 && this.$pendingCommandCount >= this.$pendingCommandThreshold) {
				this.$queuePendingCommand(command, success, failure, this.$pendingCommandDelay * this.$pendingCommandCount);
			}
			else {
				this.$currentlyExecuting = true;
				++this.$pendingCommandCount;
				try {
					this.$commandHandler.executeSingleRemoteCommand(command, ss.mkdel(this, function(pm) {
						if (this.$pendingCommandCount > 0) {
							--this.$pendingCommandCount;
						}
						success(pm);
					}), ss.mkdel(this, function(e) {
						if (this.$pendingCommandCount > 0) {
							--this.$pendingCommandCount;
						}
						failure(e);
					}));
				}
				finally {
					this.$currentlyExecuting = false;
					this.$lastCommandTime = now;
				}
			}
			return 0;
		},
		$executePendingCommand: function CommandThrottler$ExecutePendingCommand() {
			var pendingCommand = this.$queuedCommand;
			var pendingSuccess = this.$queuedSuccessCallback;
			var pendingFailure = this.$queuedFailureCallback;
			this.$queuedCommand = null;
			this.$queuedSuccessCallback = null;
			this.$queuedFailureCallback = null;
			if (!ss.isValue(pendingCommand)) {
				return;
			}
			this.$commandHandler.executeSingleRemoteCommand(pendingCommand, pendingSuccess, pendingFailure);
		},
		$queuePendingCommand: function CommandThrottler$QueuePendingCommand(command, success, failure, timeout) {
			ss.Debug.assert(this.$throttleTimer === null, 'Expected throttle timer to be null');
			ss.Debug.assert(this.$queuedCommand === null, 'Expected queued command to be null');
			this.$queuedCommand = command;
			this.$queuedSuccessCallback = success;
			this.$queuedFailureCallback = failure;
			this.$throttleTimer = window.setTimeout(ss.mkdel(this, function() {
				this.$throttleTimer = null;
				this.$executePendingCommand();
			}), timeout);
		},
		$notifyDropCommand: function CommandThrottler$NotifyDropCommand(command, successCallback, failureCallback) {
			if (ss.isValue(this.$1$CommandDroppedField)) {
				this.$1$CommandDroppedField(command, successCallback, failureCallback);
			}
		}
	});
	ss.initEnum($tab_$CommandThrottlerResponse, $asm, { $handled: 0, $unhandled: 1 });
	ss.initClass($tab_$DateTimePartIndexes, $asm, {});
	ss.initEnum($tab_$DefaultSessionErrorHandler$DataConnectionErrorCodeEnum, $asm, { $updateConnectionsEmbeddedCredentialsDisabled: 60011 });
	ss.initEnum($tab_$DefaultSessionErrorHandler$DataSourceExceptionTypeEnum, $asm, { $dataServerNoAuth: 16, $noPermission: 20, $oAuthFailure: 22 });
	ss.initClass($tab_$E2eAutomationTestHooks, $asm, {
		get_waitingOnCommands: function E2eAutomationTestHooks$get_WaitingOnCommands() {
			return this.$waitingOnCommandsGetter();
		},
		get_deferredServerResponseQueueSize: function E2eAutomationTestHooks$get_DeferredServerResponseQueueSize() {
			return this.$serverResponseQueueSizeGetter();
		},
		get_currentWorldDiffersFromCheckpoint: function E2eAutomationTestHooks$get_CurrentWorldDiffersFromCheckpoint() {
			return this.$worldCheckpointHolder.currentWorldDiffersFromCheckpoint;
		},
		getWorldCheckpoint: function E2eAutomationTestHooks$GetWorldCheckpoint() {
			return this.$worldCheckpointHolder.worldCheckpoint();
		},
		$getRuntimeDatastoreFromZonePresModel: function E2eAutomationTestHooks$GetRuntimeDatastoreFromZonePresModel(zone) {
			var vizModel = zone.presModelHolder['visual'.toString()];
			if (ss.isValue(vizModel) && ss.isValue(vizModel.scene) && ss.isValue(vizModel.scene.runtimeRenderInputDatastore)) {
				return vizModel.scene.runtimeRenderInputDatastore;
			}
			return null;
		},
		getRuntimeFinalDataStoreRaw: function E2eAutomationTestHooks$GetRuntimeFinalDataStoreRaw(zoneId) {
			var checkpoint = this.getWorldCheckpoint();
			if (ss.isNullOrUndefined(checkpoint.workbookPresModel.dashboardPresModel.zones)) {
				return '';
			}
			var $t1 = new ss.ObjectEnumerator(checkpoint.workbookPresModel.dashboardPresModel.zones);
			try {
				while ($t1.moveNext()) {
					var zone = $t1.current();
					if (ss.isNullOrEmptyString(zoneId) || ss.equalsT(zone.key, zoneId)) {
						var ds = this.$getRuntimeDatastoreFromZonePresModel(zone.value);
						if (ss.isValue(ds)) {
							return ds;
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
			var flipboard = $tab_ApplicationModel.get_instance().get_workbook().get_storyboard().get_flipboard();
			var $t2 = flipboard.get_storyPointModel().get_dashboardModel().get_zoneModels();
			for (var $t3 = 0; $t3 < $t2.length; $t3++) {
				var zone1 = $t2[$t3];
				if (ss.isNullOrEmptyString(zoneId) || ss.equalsT(zone1.presModelKey.name, zoneId)) {
					var ds1 = this.$getRuntimeDatastoreFromZonePresModel(zone1.pm);
					if (ss.isValue(ds1)) {
						return ds1;
					}
				}
			}
			return '';
		}
	});
	ss.initClass($tab_$FetchParamsBuilder, $asm, {
		get_$index: function FetchParamsBuilder$get_Index() {
			return this.$page.startIndex;
		},
		set_$index: function FetchParamsBuilder$set_Index(value) {
			this.$page.startIndex = value;
		},
		get_$params: function FetchParamsBuilder$get_Params() {
			if (ss.isValue(this.$params)) {
				return this.$params;
			}
			var orderParam = _.map(this.$order, function(o) {
				return ss.mkdict(['field', o.field, 'ascending', o.ascending]);
			});
			this.$params = ss.mkdict(['page', this.$page, 'order', orderParam]);
			if (ss.isValue(this.$filter)) {
				this.$params['filter'] = this.$filter;
			}
			return this.$params;
		}
	});
	$tab_$FetchParamsBuilder.$ctor2.prototype = $tab_$FetchParamsBuilder.$ctor1.prototype = $tab_$FetchParamsBuilder.prototype;
	ss.initClass($tab_ClientCommand, $asm, {
		get_isBlocking: function ClientCommand$get_IsBlocking() {
			return this.$uiBlockType !== 'none' || this.get_isCancelable();
		},
		get_blockType: function ClientCommand$get_BlockType() {
			return this.$uiBlockType;
		},
		get_isOneAtATime: function ClientCommand$get_IsOneAtATime() {
			return false;
		},
		get_commandName: function ClientCommand$get_CommandName() {
			return this.$commandName;
		},
		set_commandName: function ClientCommand$set_CommandName(value) {
			this.$commandName = value;
		},
		get_isCancelable: function ClientCommand$get_IsCancelable() {
			return tab.FeatureFlags.isEnabled('CommandCancellation') && $tab_CommandCancellationWhiteList.canCancel(this.get_commandName()) && this.get_hasRemoteComponent();
		},
		get_shouldShowCommandWaiter: function ClientCommand$get_ShouldShowCommandWaiter() {
			return this.get_isCancelable() || ss.isValue(this.$commandWaiter);
		},
		get_commandWaiter: function ClientCommand$get_CommandWaiter() {
			if (!this.get_shouldShowCommandWaiter()) {
				return null;
			}
			return this.$commandWaiter || (this.get_isCancelable() ? $tab_CommandController.get().defaultCommandCanceler : null);
		},
		set_commandWaiter: function ClientCommand$set_CommandWaiter(value) {
			this.$commandWaiter = value;
		},
		get_hasLocalComponent: function ClientCommand$get_HasLocalComponent() {
			return this.hasLocalComponent;
		},
		get_hasRemoteComponent: function ClientCommand$get_HasRemoteComponent() {
			return this.hasRemoteComponent;
		},
		get_useGlobalConnectionErrorHandling: function ClientCommand$get_UseGlobalConnectionErrorHandling() {
			return this.useGlobalConnectionErrorHandling;
		},
		set_useGlobalConnectionErrorHandling: function ClientCommand$set_UseGlobalConnectionErrorHandling(value) {
			this.useGlobalConnectionErrorHandling = value;
		},
		get_remoteCommands: function ClientCommand$get_RemoteCommands() {
			return ss.arrayClone(this.$remoteCommands);
		},
		get_isFinished: function ClientCommand$get_IsFinished() {
			return this.$waitingRemoteCommands.length === 0;
		},
		execute: function ClientCommand$Execute(t, commandHandler, onAllRemoteAndLocalWorkFinished) {
			ss.Debug.assert(!ss.staticEquals(onAllRemoteAndLocalWorkFinished, null), 'Callback for Execute completion should never be null');
			var originalOnAllRemoteAndLocalWorkFinished = onAllRemoteAndLocalWorkFinished;
			onAllRemoteAndLocalWorkFinished = function(result) {
				_.defer(function() {
					originalOnAllRemoteAndLocalWorkFinished(result);
				});
			};
			this.$executeRemote(commandHandler, onAllRemoteAndLocalWorkFinished);
			this.executeLocal(t);
		},
		executeLocal: function ClientCommand$ExecuteLocal(t) {
			if (ss.isValue(this.doLocalWork)) {
				{
					var mc = tabBootstrap.MetricsController.createContext('EXELOC'.toString(), this.$getMetricsSuite(), this.$buildMetricsExtraInfo());
					try {
						this.doLocalWork(t);
					}
					finally {
						if (ss.isValue(mc)) {
							mc.dispose();
						}
					}
				}
			}
		},
		$executeRemote: function ClientCommand$ExecuteRemote(commandHandler, onAllRemoteAndLocalWorkFinished) {
			ss.Debug.assert(!ss.staticEquals(onAllRemoteAndLocalWorkFinished, null), 'Callback for ExecuteRemote completion should never be null');
			this.$processedRemoteCommands = new Array();
			this.executeNextRemoteCommand(commandHandler, function(result) {
				$tab_SessionHeartbeat.onVizqlPinged();
				onAllRemoteAndLocalWorkFinished(result);
			});
		},
		$buildMetricsExtraInfo: function ClientCommand$BuildMetricsExtraInfo() {
			return 'cn: ' + this.get_commandName();
		},
		$getMetricsSuite: function ClientCommand$GetMetricsSuite() {
			return (ss.referenceEquals(this.get_commandName(), { ns: 'tabsrv', cmd: 'render-tooltip-server' }.cmd) ? 32 : 4);
		},
		triggerCallbacks: function ClientCommand$TriggerCallbacks() {
			if (this.$commandErrors.length > 0) {
				if (!ss.staticEquals(this.failureCallback, null)) {
					this.failureCallback(this.$commandErrors[this.$commandErrors.length - 1]);
				}
			}
			else if (this.$commandResults.length > 0) {
				if (!ss.staticEquals(this.successCallback, null)) {
					this.successCallback(this.$commandResults[this.$commandResults.length - 1]);
				}
			}
		},
		clearCommandResults: function ClientCommand$ClearCommandResults() {
			ss.clear(this.$commandResults);
			ss.clear(this.$commandErrors);
		},
		reEnqueueCompletedCommandRecords: function ClientCommand$ReEnqueueCompletedCommandRecords() {
			if (ss.isNullOrUndefined(this.$processedRemoteCommands)) {
				return;
			}
			var processed = this.$processedRemoteCommands;
			var records = this.$waitingRemoteCommands;
			while (records.length > 0) {
				processed.push(records.shift());
			}
			this.$waitingRemoteCommands = processed;
			this.$processedRemoteCommands = records;
		},
		enqueueCommand: function ClientCommand$EnqueueCommand(cmd) {
			this.$remoteCommands.push(cmd);
			this.$waitingRemoteCommands.push(cmd);
		},
		handleRemoteCommandSuccess: function ClientCommand$HandleRemoteCommandSuccess(cmd, pm) {
			this.$commandResults.push(pm);
		},
		handleRemoteCommandFailure: function ClientCommand$HandleRemoteCommandFailure(cmd, o) {
			this.$commandErrors.push(o);
		},
		executeNextRemoteCommand: function ClientCommand$ExecuteNextRemoteCommand(commandHandler, onAllRemoteAndLocalWorkFinished) {
			if (this.$waitingRemoteCommands.length === 0) {
				if (!ss.staticEquals(onAllRemoteAndLocalWorkFinished, null)) {
					onAllRemoteAndLocalWorkFinished($tab_CommandExecutionResult.successResult);
				}
				return;
			}
			var cmd = this.$waitingRemoteCommands.shift();
			this.$processedRemoteCommands.push(cmd);
			commandHandler.executeSingleRemoteCommand(cmd, ss.mkdel(this, function(pm) {
				try {
					this.handleRemoteCommandSuccess(cmd, pm);
				}
				finally {
					this.executeNextRemoteCommand(commandHandler, onAllRemoteAndLocalWorkFinished);
				}
			}), ss.mkdel(this, function(exception) {
				try {
					this.handleRemoteCommandFailure(cmd, exception);
				}
				finally {
					if (ss.isValue(onAllRemoteAndLocalWorkFinished)) {
						onAllRemoteAndLocalWorkFinished(new $tab_CommandExecutionResult(false, exception));
					}
				}
			}));
		}
	});
	ss.initClass($tab_$GetUberTipClientCommand, $asm, {
		get_isOneAtATime: function GetUberTipClientCommand$get_IsOneAtATime() {
			return true;
		}
	}, $tab_ClientCommand);
	ss.initClass($tab_$KeyboardShortcutTelemetryLogger, $asm, {});
	ss.initClass($tab_$LegacySessionWaitHandler, $asm, {
		get_$incrementCount: function LegacySessionWaitHandler$get_IncrementCount() {
			return this.$1$IncrementCountField;
		},
		set_$incrementCount: function LegacySessionWaitHandler$set_IncrementCount(value) {
			this.$1$IncrementCountField = value;
		},
		$showFullWaitHandlerNow: function LegacySessionWaitHandler$ShowFullWaitHandlerNow() {
			this.set_$incrementCount(this.get_$incrementCount() + 1);
			$tab_BaseSession.get_waitHandler().addrefAndShowFullWaitHandlerNow();
		},
		$show: function LegacySessionWaitHandler$Show(immediate, showFeedback) {
			this.set_$incrementCount(this.get_$incrementCount() + 1);
			this.$legacySession.incrementWait(immediate, showFeedback);
		},
		$hide: function LegacySessionWaitHandler$Hide() {
			while (this.get_$incrementCount() > 0) {
				tab.Logger.getLogger($tab_WaitHandler, null).debug('Deferred decrement of WaitHandler', []);
				this.set_$incrementCount(this.get_$incrementCount() - 1);
				this.$legacySession.decrementWait();
			}
		}
	});
	ss.initClass($tab_$LocalClientCommand, $asm, {}, $tab_ClientCommand);
	ss.initClass($tab_$Page, $asm, {});
	ss.initClass($tab_Model, $asm, {
		getMutableCopyOfPresModel: function Model$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(false);
		},
		getPresModelPath: function Model$GetPresModelPath() {
			return this.$getPresModelPathRecursive(new $tab_PresModelPath());
		},
		reparent: function Model$Reparent(newParent) {
			this.parent = newParent;
		},
		getMutableCopyOfPresModelInternal: function Model$GetMutableCopyOfPresModelInternal(deepCopy) {
			var clone = (deepCopy ? tab.MiscUtil.cloneObject(this.pm) : $tab_PresentationModel.cloneObjWithScalarsOnly(this.pm));
			return clone || new Object();
		},
		swapAndCopyPresModel: function Model$SwapAndCopyPresModel(newPM) {
			var oldPM = this.pm;
			if (ss.isValue(oldPM) && ss.isValue(newPM)) {
				var newPMDict = newPM;
				var oldPMDict = oldPM;
				var $t1 = Object.keys(oldPMDict);
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var oldKey = $t1[$t2];
					ss.Debug.assert(!$.isFunction(oldPMDict[oldKey]), "Don't expect function here");
					if ((!ss.keyExists(newPMDict, oldKey) || typeof(newPMDict[oldKey]) === 'undefined') && (!_.isBoolean(oldPMDict[oldKey]) || !$tab_Model.removeUndefinedBoolsOnSwapCopy) && !ss.referenceEquals(oldKey, 'runtimeFinalDatastoreLocal'.toString()) && !ss.referenceEquals(oldKey, 'runtimeData'.toString())) {
						newPMDict[oldKey] = oldPMDict[oldKey];
					}
				}
			}
			this.pm = newPM;
		},
		swapPresModel: function Model$SwapPresModel(newPM) {
			this.pm = newPM;
		},
		simpleSwapToUpdate$1: function(T) {
			return function Model$SimpleSwapToUpdate(newPresModel, eventToFire, arg, context) {
				this.simpleSwapToUpdate(newPresModel, function() {
					if (!ss.staticEquals(eventToFire, null)) {
						eventToFire(arg);
					}
				}, context);
			};
		},
		simpleSwapToUpdate: function Model$SimpleSwapToUpdate(newPresModel, eventToFire, context) {
			if (this.isNewPresModelSameAsOld(newPresModel)) {
				return false;
			}
			this.swapAndCopyPresModel(newPresModel);
			this.raiseEvent(eventToFire, context);
			return true;
		},
		isNewPresModelSameAsOld: function Model$IsNewPresModelSameAsOld(newPM) {
			return _.isEqual(this.pm, newPM);
		},
		raiseEvent$1: function(T) {
			return function Model$RaiseEvent(a, arg, context) {
				if (ss.staticEquals(a, null)) {
					return;
				}
				this.raiseEvent(function() {
					a(arg);
				}, context);
			};
		},
		raiseEvent$2: function(T1, T2) {
			return function Model$RaiseEvent(a, arg1, arg2, context) {
				if (ss.staticEquals(a, null)) {
					return;
				}
				this.raiseEvent(function() {
					a(arg1, arg2);
				}, context);
			};
		},
		raiseEvent: function Model$RaiseEvent(a, context) {
			if (ss.staticEquals(a, null)) {
				return;
			}
			if (ss.isValue(this.pm)) {
				tab.Log.get(this).debug('calling event on model %s', [this.presModelKey.name]);
			}
			if (ss.isNullOrUndefined(context) || ss.isNullOrUndefined(context.eventHandler)) {
				ss.Debug.assert(false, 'missing ModelEventHandler');
				return;
			}
			context.eventHandler.processEvent(a);
		},
		$getPresModelPathRecursive: function Model$GetPresModelPathRecursive(path) {
			if (!ss.isValue(this.parent)) {
				path.reverse();
				return path;
			}
			if (ss.isValue(this.presModelKey)) {
				path.add(this.presModelKey);
			}
			var compilerWorkaround = this.parent;
			return compilerWorkaround.$getPresModelPathRecursive(path);
		}
	});
	ss.initClass($tab_$PresetSizesContainerModel, $asm, {}, $tab_Model);
	ss.initClass($tab_$ReferenceLineElement$Fill, $asm, {
		get_$hasFillAbove: function Fill$get_HasFillAbove() {
			return this.$1$HasFillAboveField;
		},
		set_$hasFillAbove: function Fill$set_HasFillAbove(value) {
			this.$1$HasFillAboveField = value;
		},
		get_$hasFillBelow: function Fill$get_HasFillBelow() {
			return this.$1$HasFillBelowField;
		},
		set_$hasFillBelow: function Fill$set_HasFillBelow(value) {
			this.$1$HasFillBelowField = value;
		},
		get_$fillColorCount: function Fill$get_FillColorCount() {
			return this.$fillColor.length;
		},
		$getFillColor: function Fill$GetFillColor(level) {
			return this.$fillColor[level];
		},
		$getFillRect: function Fill$GetFillRect(isForXAxis, refLineBound, screenPoint, level) {
			ss.Debug.assert(level === 0 || level === 1, 'Wrong level, out of range');
			if (isForXAxis) {
				var points = [refLineBound.x, screenPoint, refLineBound.x + refLineBound.w];
				return { x: points[level], y: refLineBound.y, w: points[level + 1] - points[level], h: refLineBound.h };
			}
			else {
				var points1 = [refLineBound.y + refLineBound.h, screenPoint, refLineBound.y];
				return { x: refLineBound.x, y: points1[level + 1], w: refLineBound.w, h: points1[level] - points1[level + 1] };
			}
		}
	});
	ss.initClass($tab_$ReferenceLineElement$Label, $asm, {
		$getTextRunOffset: function Label$GetTextRunOffset(index) {
			return this.$labelTable.TextRunOffset[index];
		},
		$getTextRunCount: function Label$GetTextRunCount(index) {
			return this.$labelTable.TextRunCount[index];
		},
		$getTextRun: function Label$GetTextRun(index) {
			return this.$textTable.text_run[index];
		},
		$getTextRunPosition: function Label$GetTextRunPosition(index) {
			return { x: this.$textTable.text_run_x_remote[index], y: this.$textTable.text_run_y_remote[index] };
		},
		$getWidth: function Label$GetWidth(index) {
			return this.$labelTable.Width[index];
		},
		$getHeight: function Label$GetHeight(index) {
			return this.$labelTable.Height[index];
		},
		$isTextAlignEnd: function Label$IsTextAlignEnd(index) {
			var offset = this.$getTextRunOffset(index);
			return !tab.DoubleUtil.isApproximatelyEqual(this.$textTable.text_run_x[offset], this.$textTable.text_run_x_remote[offset]) || !tab.DoubleUtil.isApproximatelyEqual(this.$textTable.text_run_y[offset], this.$textTable.text_run_y_remote[offset]);
		},
		$getBackgroundColor: function Label$GetBackgroundColor() {
			return this.$backgroundColor;
		},
		$getTextStyle: function Label$GetTextStyle(labelIndex) {
			if (labelIndex >= 0 && labelIndex < this.$labelTable.TextRunOffset.length) {
				var styleId = this.$textTable.text_style_id[this.$labelTable.TextRunOffset[labelIndex]];
				if (styleId >= 0 && styleId < this.$styleTable.font.length) {
					return { item1: this.$styleTable, item2: styleId };
				}
			}
			return null;
		},
		$computeLabelBoxPosition: function Label$ComputeLabelBoxPosition(refLineBound, screenPoint, labelIndex, penWidth, isX) {
			var w = Math.ceil(this.$labelTable.Width[labelIndex]);
			var h = Math.ceil(this.$labelTable.Height[labelIndex]);
			var orientation = this.$getTextOrient(labelIndex);
			var pos = { x: 0, y: 0 };
			var halfLineWidth = ss.Int32.trunc(penWidth / 2 + 0.5);
			if (orientation !== 'text-orient-horizontal') {
				var temp = w;
				w = h;
				h = temp;
			}
			var leftEdge = screenPoint - halfLineWidth;
			var rightEdge = screenPoint + halfLineWidth;
			var x = 0;
			switch (tab.EnumConversions.labelHAlignmentFromInt(this.$labelTable.HAligns[labelIndex])) {
				case 'h-align-left': {
					x = (isX ? (leftEdge - w) : refLineBound.x);
					break;
				}
				case 'h-align-right': {
					x = (isX ? rightEdge : (refLineBound.x + refLineBound.w - w));
					break;
				}
				case 'h-align-center': {
					x = (isX ? (screenPoint - w / 2) : (ss.Int32.div(refLineBound.x + refLineBound.x + refLineBound.w, 2) - w / 2));
					break;
				}
			}
			if (orientation === 'text-orient-vertical-down') {
				pos.x = Math.floor(x + w + 0.5);
			}
			else {
				pos.x = Math.floor(x + 0.5);
			}
			var y = 0;
			switch (tab.EnumConversions.labelVAlignmentFromInt(this.$labelTable.VAligns[labelIndex])) {
				case 'v-align-top': {
					y = (isX ? refLineBound.y : (leftEdge - h));
					break;
				}
				case 'v-align-bottom': {
					y = (isX ? (refLineBound.y + refLineBound.h - h) : rightEdge);
					break;
				}
				case 'v-align-center': {
					y = (isX ? (ss.Int32.div(refLineBound.y + refLineBound.y + refLineBound.h, 2) - h / 2) : (screenPoint - h / 2));
					break;
				}
			}
			if (orientation === 'text-orient-vertical-up') {
				pos.y = Math.floor(y + h + 0.5);
			}
			else {
				pos.y = Math.floor(y + 0.5);
			}
			return pos;
		},
		$getTextOrient: function Label$GetTextOrient(labelIndex) {
			var textStyle = this.$getTextStyle(labelIndex);
			if (ss.isValue(textStyle)) {
				return tab.EnumConversions.textOrientFromInt(textStyle.item1.text_orientation[textStyle.item2]);
			}
			return 'text-orient-horizontal';
		}
	});
	ss.initClass($tab_$ReferenceLineElement$Line, $asm, {
		$getLinePosition: function Line$GetLinePosition(domainTransformX, domainTransformY, index) {
			if (this.$isForXAxis) {
				return ss.Int32.trunc(domainTransformX(this.$linePositions[index]) + 0.5);
			}
			else {
				return ss.Int32.trunc(domainTransformY(this.$linePositions[index]) + 0.5);
			}
		},
		$getEndPoints: function Line$GetEndPoints(bound, screenPoint) {
			if (this.$isForXAxis) {
				return [screenPoint, bound.y, screenPoint, bound.y + bound.h];
			}
			else {
				return [bound.x, screenPoint, bound.x + bound.w, screenPoint];
			}
		},
		$getHitTestBound: function Line$GetHitTestBound(screenPoint, refLineBound, lineWidth, extension) {
			var halfWidth = ss.Int32.div(lineWidth, 2);
			if (this.$isForXAxis) {
				return { x: screenPoint - halfWidth - extension, y: refLineBound.y, w: lineWidth + 2 * extension - 1, h: refLineBound.h };
			}
			else {
				return { x: refLineBound.x, y: screenPoint - halfWidth - extension, w: refLineBound.w, h: lineWidth + 2 * extension - 1 };
			}
		}
	});
	ss.initClass($tab_$ReferenceLinesModel$PerPaneDescriptorRefLineData, $asm, {});
	ss.initClass($tab_$ReferenceLinesModel$ReferenceLineElementLookup, $asm, {
		$getRefLines: function ReferenceLineElementLookup$GetRefLines(pdKey) {
			if (!ss.keyExists(this.$pdToRefLines, pdKey)) {
				return [];
			}
			return this.$pdToRefLines[pdKey];
		},
		$getRefLineById: function ReferenceLineElementLookup$GetRefLineById(id) {
			if (!ss.keyExists(this.$refLineIdMap, id)) {
				return [];
			}
			return this.$refLineIdMap[id];
		},
		$getRefBands: function ReferenceLineElementLookup$GetRefBands(pdKey) {
			if (!ss.keyExists(this.$pdToRefBands, pdKey)) {
				return [];
			}
			return this.$pdToRefBands[pdKey];
		}
	});
	ss.initClass($tab_$ReferenceLinesModel$ReferenceLineElements, $asm, {
		$updatePaneSections: function ReferenceLineElements$UpdatePaneSections(paneIndex, start, end) {
			if (ss.isValue(this.$lineAndLabel)) {
				this.$lineAndLabel.setPaneSection(paneIndex, start, end);
			}
			if (ss.isValue(this.$fill)) {
				this.$fill.setPaneSection(paneIndex, start, end);
			}
		},
		$addElement: function ReferenceLineElements$AddElement(zorder, refLines, refBands) {
			if (ss.isValue(this.$lineAndLabel)) {
				refLines.push({ item1: zorder, item2: this.$lineAndLabel });
			}
			if (ss.isValue(this.$fill)) {
				refBands.push({ item1: zorder, item2: this.$fill });
			}
			return;
		}
	});
	ss.initEnum($tab_$SaveServerCommands$DataConnectionErrorCodeEnum, $asm, { $updateConnectionsEmbeddedCredentialsDisabled: 60011 });
	ss.initClass($tab_$SheetHeuristics, $asm, {
		get_$uniqueDashboards: function SheetHeuristics$get_UniqueDashboards() {
			return this.$1$UniqueDashboardsField;
		},
		set_$uniqueDashboards: function SheetHeuristics$set_UniqueDashboards(value) {
			this.$1$UniqueDashboardsField = value;
		},
		get_$uniqueSheets: function SheetHeuristics$get_UniqueSheets() {
			return this.$1$UniqueSheetsField;
		},
		set_$uniqueSheets: function SheetHeuristics$set_UniqueSheets(value) {
			this.$1$UniqueSheetsField = value;
		}
	});
	ss.initClass($tab_$SheetListItemArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_$SizeItemListModel, $asm, {}, $tab_Model);
	ss.initClass($tab_$SourceSheetWithHighlightAction, $asm, {});
	ss.initClass($tab_$StoryCacheRecord, $asm, {
		get_$storyPoint: function StoryCacheRecord$get_StoryPoint() {
			if (ss.isNullOrUndefined(this.$savedZonePresModels)) {
				return this.$storyPoint;
			}
			var keys = _.keys(this.$savedZonePresModels);
			var zones = this.$storyPoint.dashboardPresModel.zones;
			var cachedPresModels = this.$savedZonePresModels;
			for (var i = 0, len = keys.length; i < len; i++) {
				var key = keys[i];
				zones[key].presModelHolder = cachedPresModels[key];
			}
			return this.$storyPoint;
		}
	});
	ss.initClass($tab_$TransactionItem, $asm, {
		get_$model: function TransactionItem$get_Model() {
			return this.$itemModel;
		},
		get_$path: function TransactionItem$get_Path() {
			return this.$itemPath;
		}
	});
	ss.initClass($tab_VisualColumnIterator, $asm, {
		gv: function VisualColumnIterator$GetValue(i) {
			return this.v[i];
		},
		setValue: function VisualColumnIterator$SetValue(index, value) {
			ss.Debug.assert(ss.isValue(this.v), 'VisualColumnIterator should have valid column');
			this.v[index] = value;
		},
		transform: function VisualColumnIterator$Transform(transformFunc) {
			if (this.isValid && !ss.staticEquals(transformFunc, null)) {
				for (var i = 0; i < this.length; i++) {
					this.v[i] = transformFunc(this.v[i]);
				}
			}
		}
	});
	ss.initClass($tab_$VisualColumnIterator$ConstVisualColumnIterator, $asm, {
		gv: function ConstVisualColumnIterator$GetValue(i) {
			return this.v[0];
		},
		setValue: function ConstVisualColumnIterator$SetValue(index, value) {
			ss.Debug.assert(ss.isValue(this.v), 'ConstantColumnIterator should have valid column');
			this.v[0] = value;
		}
	}, $tab_VisualColumnIterator);
	ss.initClass($tab_$VizPortalGetItemsUtil, $asm, {});
	ss.initEnum($tab_$ZonePriority, $asm, { $priority1: 1, $priority2: 2, $priority3: 3, $priority4: 4, $priority5: 5, $priority6: 6 });
	ss.initClass($tab_RangeTransform, $asm, { fractionToValue: null, valueToFraction: null });
	ss.initClass($tab_AcceleratingRangeTransform, $asm, {
		fractionToValue: function AcceleratingRangeTransform$FractionToValue(fract) {
			if (fract <= this.$inflectionFrac1) {
				return this.$min + fract * (this.$inflectionVal1 - this.$min) / this.$inflectionFrac1;
			}
			if (fract <= this.$inflectionFrac2) {
				var m = (this.$inflectionVal2 - this.$inflectionVal1) / (this.$inflectionFrac2 - this.$inflectionFrac1);
				var b = this.$inflectionVal1 - m * this.$inflectionFrac1;
				return fract * m + b;
			}
			return this.$a * fract * fract + this.$b * fract + this.$c;
		},
		valueToFraction: function AcceleratingRangeTransform$ValueToFraction(value) {
			if (value <= this.$inflectionVal1) {
				return this.$inflectionFrac1 * (value - this.$min) / (this.$inflectionVal1 - this.$min);
			}
			if (value <= this.$inflectionVal2) {
				var m = (this.$inflectionVal2 - this.$inflectionVal1) / (this.$inflectionFrac2 - this.$inflectionFrac1);
				var b = this.$inflectionVal1 - m * this.$inflectionFrac1;
				return (value - b) / m;
			}
			var root = Math.sqrt(this.$b * this.$b - 4 * this.$a * (this.$c - value));
			return (-this.$b + root) / (2 * this.$a);
		}
	}, $tab_RangeTransform);
	ss.initClass($tab_AckbarEventsHelper, $asm, {
		add_doLaunchAuthoring: function AckbarEventsHelper$add_DoLaunchAuthoring(value) {
			this.$1$DoLaunchAuthoringField = ss.delegateCombine(this.$1$DoLaunchAuthoringField, value);
		},
		remove_doLaunchAuthoring: function AckbarEventsHelper$remove_DoLaunchAuthoring(value) {
			this.$1$DoLaunchAuthoringField = ss.delegateRemove(this.$1$DoLaunchAuthoringField, value);
		},
		add_newLayoutId: function AckbarEventsHelper$add_NewLayoutId(value) {
			this.$1$NewLayoutIdField = ss.delegateCombine(this.$1$NewLayoutIdField, value);
		},
		remove_newLayoutId: function AckbarEventsHelper$remove_NewLayoutId(value) {
			this.$1$NewLayoutIdField = ss.delegateRemove(this.$1$NewLayoutIdField, value);
		},
		add_workbookModifiedChanged: function AckbarEventsHelper$add_WorkbookModifiedChanged(value) {
			this.$1$WorkbookModifiedChangedField = ss.delegateCombine(this.$1$WorkbookModifiedChangedField, value);
		},
		remove_workbookModifiedChanged: function AckbarEventsHelper$remove_WorkbookModifiedChanged(value) {
			this.$1$WorkbookModifiedChangedField = ss.delegateRemove(this.$1$WorkbookModifiedChangedField, value);
		},
		add_orientationChange: function AckbarEventsHelper$add_OrientationChange(value) {
			this.$1$OrientationChangeField = ss.delegateCombine(this.$1$OrientationChangeField, value);
		},
		remove_orientationChange: function AckbarEventsHelper$remove_OrientationChange(value) {
			this.$1$OrientationChangeField = ss.delegateRemove(this.$1$OrientationChangeField, value);
		},
		onAuthoringLaunchRequested: function AckbarEventsHelper$OnAuthoringLaunchRequested() {
			var handler = this.$1$DoLaunchAuthoringField;
			if (!ss.staticEquals(handler, null)) {
				handler();
			}
		},
		onNewLayoutId: function AckbarEventsHelper$OnNewLayoutId(arg) {
			var handler = this.$1$NewLayoutIdField;
			if (!ss.staticEquals(handler, null)) {
				handler(arg);
			}
		},
		onWorkbookModifiedChanged: function AckbarEventsHelper$OnWorkbookModifiedChanged(modified) {
			var handler = this.$1$WorkbookModifiedChangedField;
			if (!ss.staticEquals(handler, null)) {
				handler(modified);
			}
		},
		onOrientationChange: function AckbarEventsHelper$OnOrientationChange() {
			var handler = this.$1$OrientationChangeField;
			if (!ss.staticEquals(handler, null)) {
				handler();
			}
		}
	});
	ss.initEnum($tab_ActionType, $asm, { highlight: 'highlight', filter: 'filter', url: 'url', group: 'group', navigation: 'navigation', parameter: 'parameter' }, true);
	ss.initClass($tab_ActionUtils, $asm, {});
	ss.initClass($tab_AddDataServerDataSourceCmd, $asm, {
		invoke: function AddDataServerDataSourceCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'add-dataserver-data-source' }, this.cmdParams));
		},
		validateInvokeParams: function AddDataServerDataSourceCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'datasourceDatabaseName')) {
				throw new ss.Exception('missing param DocParams.DatabaseName');
			}
			if (!ss.keyExists(this.cmdParams, 'repositoryUrl')) {
				throw new ss.Exception('missing param DocParams.RepositoryUrl');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_AddDataServerDataSourceCmd$Response]));
	ss.initClass($tab_AddDataServerDataSourceCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_AddObjectToDashboardCmd, $asm, {
		invoke: function AddObjectToDashboardCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'add-object-to-dashboard' }, this.cmdParams));
		},
		validateInvokeParams: function AddObjectToDashboardCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'zoneType')) {
				throw new ss.Exception('missing param DocParams.ZoneType');
			}
			if (!ss.keyExists(this.cmdParams, 'isHorizontal')) {
				throw new ss.Exception('missing param DocParams.IsHorizontal');
			}
			if (!ss.keyExists(this.cmdParams, 'addAsFloating')) {
				throw new ss.Exception('missing param DocParams.AddAsFloating');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_AddObjectToDashboardCmd$Response]));
	ss.initClass($tab_AddObjectToDashboardCmd$Response, $asm, {
		hasZoneID: function Response$HasZoneID() {
			return ss.keyExists(this.$$cmdParams, 'zoneId');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_AnalyticsPaneModel, $asm, {
		add_newAnalyticsPane: function AnalyticsPaneModel$add_NewAnalyticsPane(value) {
			this.$2$NewAnalyticsPaneField = ss.delegateCombine(this.$2$NewAnalyticsPaneField, value);
		},
		remove_newAnalyticsPane: function AnalyticsPaneModel$remove_NewAnalyticsPane(value) {
			this.$2$NewAnalyticsPaneField = ss.delegateRemove(this.$2$NewAnalyticsPaneField, value);
		},
		get_analyticsPresModel: function AnalyticsPaneModel$get_AnalyticsPresModel() {
			return this.pm;
		},
		update: function AnalyticsPaneModel$Update(analyticsPresModel, context) {
			this.simpleSwapToUpdate(analyticsPresModel, this.$2$NewAnalyticsPaneField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_AnimationClock, $asm, {});
	ss.initClass($tab_AnimationUtil, $asm, {});
	ss.initClass($tab_AnnotationClientCommands, $asm, {});
	ss.initClass($tab_ApiClientCommands, $asm, {});
	ss.initClass($tab_ApplicationModel, $asm, {
		add_newWorkbook: function ApplicationModel$add_NewWorkbook(value) {
			this.$2$NewWorkbookField = ss.delegateCombine(this.$2$NewWorkbookField, value);
		},
		remove_newWorkbook: function ApplicationModel$remove_NewWorkbook(value) {
			this.$2$NewWorkbookField = ss.delegateRemove(this.$2$NewWorkbookField, value);
		},
		add_applicationUpdate: function ApplicationModel$add_ApplicationUpdate(value) {
			this.$2$ApplicationUpdateField = ss.delegateCombine(this.$2$ApplicationUpdateField, value);
		},
		remove_applicationUpdate: function ApplicationModel$remove_ApplicationUpdate(value) {
			this.$2$ApplicationUpdateField = ss.delegateRemove(this.$2$ApplicationUpdateField, value);
		},
		get_rightAreaDrawer: function ApplicationModel$get_RightAreaDrawer() {
			return this.$2$RightAreaDrawerField;
		},
		set_rightAreaDrawer: function ApplicationModel$set_RightAreaDrawer(value) {
			this.$2$RightAreaDrawerField = value;
		},
		get_toolbar: function ApplicationModel$get_Toolbar() {
			return this.$2$ToolbarField;
		},
		set_toolbar: function ApplicationModel$set_Toolbar(value) {
			this.$2$ToolbarField = value;
		},
		get_workbook: function ApplicationModel$get_Workbook() {
			return this.$2$WorkbookField;
		},
		set_workbook: function ApplicationModel$set_Workbook(value) {
			this.$2$WorkbookField = value;
		},
		get_colorPalettes: function ApplicationModel$get_ColorPalettes() {
			return this.$2$ColorPalettesField;
		},
		set_colorPalettes: function ApplicationModel$set_ColorPalettes(value) {
			this.$2$ColorPalettesField = value;
		},
		get_dataDictionary: function ApplicationModel$get_DataDictionary() {
			return this.$2$DataDictionaryField;
		},
		set_dataDictionary: function ApplicationModel$set_DataDictionary(value) {
			this.$2$DataDictionaryField = value;
		},
		get_serverFonts: function ApplicationModel$get_ServerFonts() {
			return this.$2$ServerFontsField;
		},
		set_serverFonts: function ApplicationModel$set_ServerFonts(value) {
			this.$2$ServerFontsField = value;
		},
		get_isTableCalcHighlightingMode: function ApplicationModel$get_IsTableCalcHighlightingMode() {
			return this.modelInstance($tab_CompoundTableCalcModel).call(this).get_hasTableCalc();
		},
		get_shapeManager: function ApplicationModel$get_ShapeManager() {
			return this.$shapeManager;
		},
		get_extensionPermissionsCache: function ApplicationModel$get_ExtensionPermissionsCache() {
			return this.$extensionPermissionsCache;
		},
		get_renderMode: function ApplicationModel$get_RenderMode() {
			return (ss.isValue(this.get_appPresModel()) ? this.get_appPresModel().renderMode : 'render-mode-server');
		},
		get_localeDateFormat: function ApplicationModel$get_LocaleDateFormat() {
			return ((ss.isValue(this.get_appPresModel()) && !tab.MiscUtil.isNullOrEmpty$3(this.get_appPresModel().dateFormat)) ? this.get_appPresModel().dateFormat : 'M/d/yyyy');
		},
		get_localeTimeFormat: function ApplicationModel$get_LocaleTimeFormat() {
			return ((ss.isValue(this.get_appPresModel()) && !tab.MiscUtil.isNullOrEmpty$3(this.get_appPresModel().timeFormat)) ? this.get_appPresModel().timeFormat : 'h:mm tt');
		},
		get_numberFormat: function ApplicationModel$get_NumberFormat() {
			return this.get_appPresModel().numberFormats;
		},
		get_isLocalRenderMode: function ApplicationModel$get_IsLocalRenderMode() {
			return this.get_renderMode() === 'render-mode-client';
		},
		get_appPresModel: function ApplicationModel$get_AppPresModel() {
			ss.Debug.assert(ss.isValue(this.pm), 'ApplicationPresModel property read before first call to Update()');
			return this.pm;
		},
		get_autoUpdate: function ApplicationModel$get_AutoUpdate() {
			var contentDashboard = $tab_ModelUtils.findContentDashboard(null);
			return ss.isValue(contentDashboard) && contentDashboard.autoUpdate;
		},
		set_autoUpdate: function ApplicationModel$set_AutoUpdate(value) {
			var contentDashboard = $tab_ModelUtils.findContentDashboard(null);
			if (ss.isValue(contentDashboard)) {
				contentDashboard.autoUpdate = value;
			}
		},
		get_invalid: function ApplicationModel$get_Invalid() {
			return $tab_ModelUtils.findContentDashboard(null).invalid;
		},
		set_invalid: function ApplicationModel$set_Invalid(value) {
			var dashboard = $tab_ModelUtils.findContentDashboard(null);
			if (ss.isValue(dashboard)) {
				dashboard.invalid = value;
			}
		},
		get_showTabs: function ApplicationModel$get_ShowTabs() {
			return tsConfig.showTabs && !this.get_isOffline();
		},
		get_showToolbar: function ApplicationModel$get_ShowToolbar() {
			return !this.get_isOffline();
		},
		get_isOffline: function ApplicationModel$get_IsOffline() {
			return ss.isValue(tsConfig.offlineBootstrapResponse);
		},
		get_tabAnimInitialized: function ApplicationModel$get_TabAnimInitialized() {
			return this.$tabanimInitialized;
		},
		get_runtimeInitialized: function ApplicationModel$get_RuntimeInitialized() {
			return this.$runtimeInitialized;
		},
		registerNotificationHandler: function ApplicationModel$RegisterNotificationHandler(notificationId, callback) {
			var handlers = this.$notificationHandlers[notificationId];
			if (ss.isNullOrUndefined(handlers)) {
				handlers = [];
				this.$notificationHandlers[notificationId] = handlers;
			}
			for (var i = 0; i < handlers.length; i++) {
				if (ss.staticEquals(handlers[i], callback)) {
					throw new ss.Exception('This handler for ' + notificationId.toString() + ' already registered');
				}
			}
			handlers.push(callback);
			return callback;
		},
		unRegisterNotificationHandler: function ApplicationModel$UnRegisterNotificationHandler(notificationId, callback) {
			var handlers = this.$notificationHandlers[notificationId];
			if (ss.isValue(handlers)) {
				for (var i = handlers.length - 1; i >= 0; i--) {
					if (ss.staticEquals(handlers[i], callback)) {
						ss.removeAt(handlers, i);
						if (handlers.length === 0) {
							delete this.$notificationHandlers[notificationId];
							return;
						}
					}
				}
			}
		},
		$getNotificationHandlers: function ApplicationModel$GetNotificationHandlers(notificationId) {
			var handlers = this.$notificationHandlers[notificationId];
			if (ss.isNullOrUndefined(handlers)) {
				tab.Log.get(this).debug('No handlers for notification %s', [notificationId]);
				handlers = [];
			}
			return handlers;
		},
		raiseNotification: function ApplicationModel$RaiseNotification(notificationId, presentationModel, context) {
			var handlers = this.$getNotificationHandlers(notificationId);
			for (var $t1 = 0; $t1 < handlers.length; $t1++) {
				var handler = handlers[$t1];
				handler(presentationModel, context);
			}
		},
		$handleNotifications: function ApplicationModel$HandleNotifications(notifications, context) {
			if (ss.isNullOrUndefined(notifications)) {
				return;
			}
			for (var $t1 = 0; $t1 < notifications.length; $t1++) {
				var notificationEvent = notifications[$t1];
				var notificationId = notificationEvent.keyId;
				var presModelDict = notificationEvent.presModelHolder;
				var enumerator = new ss.ObjectEnumerator(presModelDict);
				var presModel = (enumerator.moveNext() ? enumerator.current().value : null);
				this.raiseNotification(notificationId, presModel, context);
			}
		},
		addModel: function(TModel) {
			return function ApplicationModel$AddModel() {
				ss.Debug.assert(!ss.keyExists(this.$models, TModel), ss.getTypeFullName(TModel) + ' has already been added');
				var model = ss.createInstance(TModel);
				var notify = ss.safeCast(model, $tab_IHandleNotifications);
				if (ss.isValue(notify)) {
					this.registerNotificationHandler(notify.get_notificationId(), ss.mkdel(notify, notify.onNotify));
				}
				this.$models[TModel] = model;
				return model;
			};
		},
		removeModel: function(TModel) {
			return function ApplicationModel$RemoveModel() {
				var model = this.$models[TModel];
				if (ss.isNullOrUndefined(model)) {
					return;
				}
				var notify = ss.safeCast(model, $tab_IHandleNotifications);
				if (ss.isValue(notify)) {
					this.unRegisterNotificationHandler(notify.get_notificationId(), ss.mkdel(notify, notify.onNotify));
				}
				delete this.$models[TModel];
			};
		},
		modelInstance: function(TModel) {
			return function ApplicationModel$ModelInstance() {
				return this.$models[TModel] || this.addModel(TModel).call(this);
			};
		},
		update: function ApplicationModel$Update(applicationPresModel, context) {
			if (ss.isNullOrUndefined(this.pm)) {
				this.pm = {};
			}
			if (ss.isValue(applicationPresModel.renderMode)) {
				this.get_appPresModel().renderMode = applicationPresModel.renderMode;
			}
			if (ss.isValue(applicationPresModel.dataDictionary)) {
				this.get_dataDictionary().update(applicationPresModel.dataDictionary);
			}
			if (ss.isValue(applicationPresModel.presentationLayerNotification)) {
				this.$handleNotifications(applicationPresModel.presentationLayerNotification, context);
			}
			if (ss.isValue(applicationPresModel.workbookPresModel)) {
				if (!ss.isValue(this.get_workbook())) {
					this.set_workbook(new $tab_WorkbookModel(this));
					this.raiseEvent$1($tab_WorkbookModel).call(this, this.$2$NewWorkbookField, this.get_workbook(), context);
				}
				this.get_workbook().update(applicationPresModel.workbookPresModel, context);
			}
			if (ss.isValue(applicationPresModel.colorPaletteCollection)) {
				this.get_colorPalettes().update(applicationPresModel.colorPaletteCollection, context);
			}
			if (ss.isValue(applicationPresModel.toolbarPresModel)) {
				this.get_toolbar().update(applicationPresModel.toolbarPresModel, context);
			}
			if (ss.isValue(applicationPresModel.serverFonts)) {
				this.set_serverFonts(ss.arrayClone(applicationPresModel.serverFonts.fontFamilies));
			}
			this.swapAndCopyPresModel(applicationPresModel);
			this.raiseEvent(this.$2$ApplicationUpdateField, context);
		},
		getMutableCopyOfPresModel: function ApplicationModel$GetMutableCopyOfPresModel() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			var copy = {};
			copy = $.extend(false, copy, this.pm);
			return copy;
		},
		$initTabAnim: function ApplicationModel$InitTabAnim() {
			if (!tab.FeatureFlags.isEnabled('MarkAnimation') || ss.isValue(this.$tabanimInitialized)) {
				return;
			}
			if (ss.isValue(this.$runtimeInitialized)) {
				this.$tabanimInitialized = this.$runtimeInitialized;
				return;
			}
			var tabanimReady = $.Deferred();
			this.$tabanimInitialized = tabanimReady;
			var mc = tabBootstrap.MetricsController.createContext('EMLOAD'.toString(), 15, null);
			$tab_TabAnimLoader.requestTabAnimLoad().done([function() {
				mc.dispose();
				tabanimReady.resolve();
				RuntimeWebModule._InitializeRuntime();
			}]);
		},
		shouldDoLocalCommand: function ApplicationModel$ShouldDoLocalCommand() {
			return tab.RuntimeUtil.canUseRuntime();
		},
		$requestRuntimeDataAndUpdateVM: function ApplicationModel$RequestRuntimeDataAndUpdateVM() {
			var visualModels = $tab_ModelUtils.getVisualModels(this);
			var $t1 = new ss.ObjectEnumerator(visualModels);
			try {
				while ($t1.moveNext()) {
					var vm = $t1.current();
					vm.value.$sendDisplayListTelemetry();
				}
			}
			finally {
				$t1.dispose();
			}
			if (!this.shouldDoLocalCommand()) {
				return;
			}
			if (ss.getKeyCount(visualModels) > 10) {
				return;
			}
			var $t2 = new ss.ObjectEnumerator(visualModels);
			try {
				while ($t2.moveNext()) {
					var vm1 = $t2.current();
					vm1.value.requestRuntimeDataAndUpdateVM();
				}
			}
			finally {
				$t2.dispose();
			}
		},
		setupRuntime: function ApplicationModel$SetupRuntime() {
			if (ss.isValue(this.$runtimeInitialized) || !this.shouldDoLocalCommand()) {
				return;
			}
			if (tab.FeatureFlags.isEnabled('MarkAnimation')) {
				if (ss.isValue(this.$tabanimInitialized)) {
					this.$runtimeInitialized = this.$tabanimInitialized;
					return;
				}
			}
			var runtimeReady = $.Deferred();
			this.$runtimeInitialized = runtimeReady;
			var mc = tabBootstrap.MetricsController.createContext('EMLOAD'.toString(), 32, null);
			$tab_RuntimeLoader.requestRuntimeLoad().done([function() {
				mc.dispose();
				var success = function() {
					runtimeReady.resolve();
				};
				var fail = function(e) {
					runtimeReady.reject();
					tab.ErrorTrace.report(e);
				};
				tab.RuntimeWebModule.proxy.initializeRuntime().then(success, fail);
			}]);
		}
	}, $tab_Model);
	ss.initClass($tab_AuthenticationCommands, $asm, {});
	ss.initClass($tab_AxisAuthoringTelemetry, $asm, {});
	ss.initClass($tab_AxisResizerDomElements, $asm, {});
	ss.initEnum($tab_BackgroundJobProgressState, $asm, { inProgress: 'inProgress', success: 'success', error: 'error' }, true);
	ss.initInterface($tab_IVizqlServerRequestHandler, $asm, { formatMethod: null, formatSessionMethod: null, request: null, createHandlerCC: null, createHandler: null });
	ss.initClass($tab_BaseSession, $asm, {
		get_urlRoot: function BaseSession$get_UrlRoot() {
			return this.$urlRoot;
		},
		get_id: function BaseSession$get_Id() {
			return tsConfig.sessionid;
		},
		get_historyPosition: function BaseSession$get_HistoryPosition() {
			return this.$history.get_tailIndex() + 1;
		},
		get_sessionErrorHandler: function BaseSession$get_SessionErrorHandler() {
			return this.defaultSessionErrorHandler;
		},
		get_errorHandlers: function BaseSession$get_ErrorHandlers() {
			return this.$errorHandlerChain;
		},
		get_commonDialogProvider: function BaseSession$get_CommonDialogProvider() {
			return this.$commonDialogProvider;
		},
		get_$sessionRoot: function BaseSession$get_SessionRoot() {
			return this.$urlRoot + '/sessions/' + tsConfig.sessionid;
		},
		formatThumbnailReference: function BaseSession$FormatThumbnailReference(worksheetPath) {
			return this.$siteRoot + '/thumb/views/' + worksheetPath;
		},
		formatSessionTempfileReference: function BaseSession$FormatSessionTempfileReference(tempfileid, keepfile, attachment) {
			return this.$urlRoot + '/tempfile/sessions/' + tsConfig.sessionid + '/?key=' + tempfileid + (keepfile ? '&keepfile=yes' : '') + (attachment ? '&attachment=yes' : '');
		},
		preEncodeSpecialUriComponentChars: function BaseSession$PreEncodeSpecialUriComponentChars(uriComponent) {
			var $t1 = new ss.ObjectEnumerator($tab_BaseSession.$preEncodingSpecialChars);
			try {
				while ($t1.moveNext()) {
					var specialCharPair = $t1.current();
					uriComponent = uriComponent.replace(specialCharPair.value, specialCharPair.key);
				}
			}
			finally {
				$t1.dispose();
			}
			return uriComponent;
		},
		nudgeWait: function BaseSession$NudgeWait() {
			if (ss.isNullOrUndefined($tab_BaseSession.$waitHandler)) {
				return false;
			}
			$tab_BaseSession.$waitHandler.nudge();
			return true;
		},
		incrementWait: function BaseSession$IncrementWait(immediate, showFeedback) {
			if (ss.isNullOrUndefined($tab_BaseSession.$waitHandler)) {
				return false;
			}
			$tab_BaseSession.$waitHandler.addref(immediate, showFeedback);
			return true;
		},
		decrementWait: function BaseSession$DecrementWait() {
			if (ss.isNullOrUndefined($tab_BaseSession.$waitHandler)) {
				return false;
			}
			$tab_BaseSession.$waitHandler.release();
			return true;
		},
		trackRedo: function BaseSession$TrackRedo() {
			try {
				this.$history.trackRedo();
			}
			catch ($t1) {
				$t1 = ss.Exception.wrap($t1);
				if (ss.isInstanceOfType($t1, ss.ArgumentOutOfRangeException)) {
					$tab_BaseSession.get_$log().error('BaseSession TrackRedo: nothing to redo', []);
				}
				else {
					throw $t1;
				}
			}
		},
		trackUndo: function BaseSession$TrackUndo() {
			try {
				this.$history.trackUndo();
			}
			catch ($t1) {
				$t1 = ss.Exception.wrap($t1);
				if (ss.isInstanceOfType($t1, ss.ArgumentOutOfRangeException)) {
					$tab_BaseSession.get_$log().error('BaseSession TrackUndo: nothing to undo', []);
				}
				else {
					throw $t1;
				}
			}
		},
		revertHistory: function BaseSession$RevertHistory(stateGuids, baseWorkbookGuid) {
			this.$history = new $tab_History(baseWorkbookGuid);
			if (ss.isValue(stateGuids)) {
				this.$history.adopt(stateGuids);
			}
		},
		getHistoryTail: function BaseSession$GetHistoryTail(maximumLength) {
			var length = ((this.$history.get_recoveryStates().length > maximumLength) ? maximumLength : this.$history.get_recoveryStates().length);
			var start = this.$history.get_recoveryStates().length - length;
			return this.$history.get_recoveryStates().slice(start, this.$history.get_recoveryStates().length);
		},
		handleAuthenticationFailure: function BaseSession$HandleAuthenticationFailure() {
			this.defaultSessionErrorHandler.handleAuthenticationFailure();
		},
		getWindow: function BaseSession$GetWindow(rootName) {
			return rootName + tsConfig.sessionid.replace(new RegExp('[^A-Za-z0-9_]', 'g'), '_');
		},
		informServerAboutErrors: function BaseSession$InformServerAboutErrors(url, userAgent, errorData) {
			var args = {};
			args.type = 'POST';
			args.url = this.formatSessionMethod('inform');
			args.headers = ss.mkdict(['Accept', 'text/plain']);
			args.contentType = 'text/plain';
			var availableChars = $tab_FailureHandler.$getCharsAvailableForAllErrorData(url, userAgent);
			var omittedErrors = 0;
			for (var ii = 0; ii < errorData.length; ++ii) {
				availableChars -= JSON.stringify(errorData[ii]).length;
				if (availableChars < 0) {
					omittedErrors = errorData.length - ii;
					errorData = errorData.slice(0, ii);
					break;
				}
			}
			var data = { url: url, userAgent: userAgent, errors: errorData, sessionId: tsConfig.sessionid, timeStampUtc: (new Date()).toUTCString() };
			if (omittedErrors > 0) {
				data.omittedErrors = omittedErrors;
			}
			args.data = JSON.stringify(data);
			this.request(args, null);
		},
		$requestUndoRedo: function BaseSession$RequestUndoRedo(historyPosition, redo) {
			$tab_BaseSession.get_$log().debug('Requesting redo/undo: redo=%s', [redo]);
			if (redo) {
				$tab_WorksheetServerCommands.redoToPosition(historyPosition);
			}
			else {
				$tab_WorksheetServerCommands.undoToPosition(historyPosition);
			}
		},
		executeServerCommand: function BaseSession$ExecuteServerCommand(c, successCallback, errorCallback) {
			var args = {};
			this.$prepareCommandRequst(args, c);
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			var onSuccess = function(data, textStatus, xhr) {
				if (ss.isValue(successCallback)) {
					successCallback(data, xhr.status === $tab_BaseSession.$commandCanceledStatus);
				}
			};
			var onError = ss.mkdel(this, function(request, textStatus1, error) {
				this.$handleError(error, request, c.noExceptionDialog, c);
				if (ss.isValue(errorCallback)) {
					var $t1 = request.responseText;
					if (ss.isNullOrUndefined($t1)) {
						$t1 = ss.coalesce($tab_BaseSession.getErrorMessageFromStringOrException(error), 'unknown error executing server command');
					}
					var errorBody = $t1;
					var errorContext = ['status: ' + request.status, 'textStatus: ' + textStatus1].join(', ');
					var e = new ss.Exception(c.commandName + ': ' + errorBody + ', ' + errorContext);
					e['status'] = request.status;
					errorCallback(e);
				}
			});
			var handler = this.createHandlerCC(null, onSuccess, (ss.isValue(errorCallback) ? onError : null));
			this.request(args, handler);
		},
		basicPostOpts: function BaseSession$BasicPostOpts(url, dat) {
			var args = {};
			args.type = 'POST';
			args.url = url;
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			args.dataType = 'json';
			args.data = dat;
			return args;
		},
		basicGetOpts: function BaseSession$BasicGetOpts(url) {
			var args = {};
			args.type = 'GET';
			args.url = url;
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			args.dataType = 'json';
			return args;
		},
		$prepareCommandRequst: function BaseSession$PrepareCommandRequst(args, command) {
			var payload = $tab_XhrUtil.getMultipartData(null, command.commandParams);
			args.type = 'POST';
			args.dataType = 'json';
			args.contentType = 'multipart/form-data; boundary=' + payload.header;
			args.data = payload.body;
			args.url = this.$formatSessionCommand(command.commandNamespace, command.commandName);
		},
		$pushServerUndo: function BaseSession$PushServerUndo(description, sessionStateId, serverHistoryPosition) {
			$tab_BaseSession.get_$log().debug('Push server undo: %s', [description]);
			var undo = ss.mkdel(this, function() {
				this.$requestUndoRedo(serverHistoryPosition - 1, false);
			});
			var redo = ss.mkdel(this, function() {
				this.$requestUndoRedo(serverHistoryPosition, true);
			});
			this.$history.add(sessionStateId, serverHistoryPosition);
			this.$pushUndo(undo, redo, sessionStateId);
		},
		formatMethod: function BaseSession$FormatMethod(method) {
			return this.$urlRoot + '/' + method;
		},
		formatSessionMethod: function BaseSession$FormatSessionMethod(method) {
			return tabBootstrap.BaseUrlFormatter.formatSessionMethod(method, tsConfig.sessionid, this.$urlRoot);
		},
		$formatSessionCommand: function BaseSession$FormatSessionCommand(ns, command) {
			return this.get_$sessionRoot() + '/commands/' + ns + '/' + command;
		},
		$pushUndo: function BaseSession$PushUndo(undo, redo, sessionStateId) {
			if (!tsConfig.embedded || tsConfig.browserBackButtonUndo) {
				if (ss.isValue($tab_BaseSession.$currentState)) {
					$tab_BaseSession.$currentState.onBack = undo;
				}
				else {
					$tab_HistoryManager.setInitialState(undo);
				}
				$tab_BaseSession.$currentState = $tab_HistoryManager.addToHistory(null, redo, sessionStateId);
			}
		},
		$handleError: function BaseSession$HandleError(error, xhr, noExceptionDialog, command) {
			this.$errorHandlerChain.handle(error, xhr, command, noExceptionDialog);
		},
		request: function BaseSession$Request(args, handler) {
			return $tab_XhrUtil.helper(args, handler);
		},
		createHandlerCC: function BaseSession$CreateHandlerCC(onComplete, onSuccess, onError) {
			return new $tab_SessionAjaxCallManager(this, onComplete, onSuccess, onError, false, false);
		},
		createHandler: function BaseSession$CreateHandler(onComplete, onSuccess, onError, uiBlockType) {
			var usesWaitHandler = uiBlockType !== 'none';
			var immediateWait = uiBlockType === 'immediately';
			return new $tab_SessionAjaxCallManager(this, onComplete, onSuccess, onError, usesWaitHandler, immediateWait);
		},
		formatLayoutMethod: function BaseSession$FormatLayoutMethod(layoutid, method) {
			var url = (ss.isValue(method) ? this.formatSessionMethod(method) : this.get_$sessionRoot());
			url += '/layouts/' + layoutid;
			return url;
		},
		formatViewMethod: function BaseSession$FormatViewMethod(viewid, method) {
			var url = (ss.isValue(method) ? this.formatSessionMethod(method) : this.get_$sessionRoot());
			url += '/views/' + viewid;
			return url;
		},
		formatFilterReference: function BaseSession$FormatFilterReference(sheetid, field, method) {
			return this.$formatSubSheetReference(sheetid, field, method, 'filters');
		},
		$formatSubSheetReference: function BaseSession$FormatSubSheetReference(sheetid, field, method, reftype) {
			var url;
			if (ss.isValue(method)) {
				url = this.formatSessionMethod(method);
			}
			else {
				url = this.get_$sessionRoot();
			}
			url += '/sheets/' + encodeURIComponent(this.preEncodeSpecialUriComponentChars(sheetid)) + '/' + reftype;
			if (ss.isValue(field)) {
				url += '/' + encodeURIComponent(this.preEncodeSpecialUriComponentChars(field));
			}
			return url;
		},
		$formatCancel: function BaseSession$FormatCancel(command) {
			return this.$urlRoot + '/cancel/sessions/' + tsConfig.sessionid + '/commands/' + command.commandNamespace + '/' + command.commandName;
		},
		cancelRunningCommand: function BaseSession$CancelRunningCommand(c, successCallback, failureCallback) {
			if (!tab.FeatureFlags.isEnabled('CommandCancellation')) {
				ss.Debug.assert(false, 'Should not be able to call this while feature flag is disabled.');
				return;
			}
			var url = this.$formatCancel(c);
			var args = this.basicGetOpts(url);
			var onSuccess = function(data, textStatus, xhr) {
				if (ss.isValue(successCallback)) {
					successCallback(data, xhr.status);
				}
			};
			var onError = function(request, textStatus1, error) {
				if (ss.isValue(failureCallback)) {
					failureCallback(error);
				}
			};
			var handler = this.createHandlerCC(null, onSuccess, onError);
			this.request(args, handler);
		}
	}, null, [$tab_IVizqlServerRequestHandler]);
	ss.initClass($tab_BlockExtensionCmd, $asm, {
		invoke: function BlockExtensionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'block-extension' }, this.cmdParams));
		},
		validateInvokeParams: function BlockExtensionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'addInLocatorPresModel')) {
				throw new ss.Exception('missing param DocParams.AddInLocator');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BlockExtensionCmd$Response]));
	ss.initClass($tab_BlockExtensionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_BorderDefinition, $asm, {
		get_hasColor: function BorderDefinition$get_HasColor() {
			return this.color !== 'rgba(0, 0, 0, 0)';
		},
		get_hasWidth: function BorderDefinition$get_HasWidth() {
			return this.width > 0;
		},
		get_hasStyle: function BorderDefinition$get_HasStyle() {
			return this.style !== 'bs-none';
		},
		get_cssDictionary: function BorderDefinition$get_CssDictionary() {
			var result = {};
			switch (this.side) {
				case 0: {
					result['border-width'] = this.width + 'px';
					result['border-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-color'] = this.color;
					break;
				}
				case 1: {
					result['border-top-width'] = this.width + 'px';
					result['border-top-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-top-color'] = this.color;
					break;
				}
				case 2: {
					result['border-left-width'] = this.width + 'px';
					result['border-left-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-left-color'] = this.color;
					break;
				}
				case 4: {
					result['border-bottom-width'] = this.width + 'px';
					result['border-bottom-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-bottom-color'] = this.color;
					break;
				}
				case 3: {
					result['border-right-width'] = this.width + 'px';
					result['border-right-style'] = $tab_BorderDefinition.borderStyleToCss(this.style);
					result['border-right-color'] = this.color;
					break;
				}
			}
			return result;
		},
		get_styledBoxPresModel: function BorderDefinition$get_StyledBoxPresModel() {
			var result = {};
			switch (this.side) {
				case 0: {
					result.uw = this.width;
					result.borderStyle = this.style;
					result.borderColor = this.color;
					break;
				}
				case 1: {
					result.uwt = this.width;
					result.borderStyleTop = this.style;
					result.borderColorTop = this.color;
					break;
				}
				case 2: {
					result.uwl = this.width;
					result.borderStyleLeft = this.style;
					result.borderColorLeft = this.color;
					break;
				}
				case 4: {
					result.uwb = this.width;
					result.borderStyleBottom = this.style;
					result.borderColorBottom = this.color;
					break;
				}
				case 3: {
					result.uwr = this.width;
					result.borderStyleRight = this.style;
					result.borderColorRight = this.color;
					break;
				}
			}
			return result;
		}
	});
	ss.initEnum($tab_BorderDefinition$BorderSide, $asm, { all: 0, top: 1, left: 2, right: 3, bottom: 4 });
	ss.initClass($tab_BrushingComputer, $asm, {
		get_isBrushingComputed: function BrushingComputer$get_IsBrushingComputed() {
			return this.$isBrushingComputed;
		},
		hasBrushingForSheet: function BrushingComputer$HasBrushingForSheet(worksheet) {
			return ss.isValue(this.$tupleBrushing[worksheet]) || ss.isValue(this.$nodeBrushing[worksheet]) || ss.isValue(this.$legendBrushing[worksheet]);
		},
		getTupleBrushing: function BrushingComputer$GetTupleBrushing(worksheet) {
			return this.$tupleBrushing[worksheet] || [];
		},
		getTrendlineBrushing: function BrushingComputer$GetTrendlineBrushing(worksheet) {
			return this.$trendLineBrushing[worksheet] || [];
		},
		getNodeBrushing: function BrushingComputer$GetNodeBrushing(worksheet) {
			return this.$nodeBrushing[worksheet] || [];
		},
		getLegendBrushing: function BrushingComputer$GetLegendBrushing(worksheet) {
			return this.$legendBrushing[worksheet] || {};
		},
		$calculateLegendsForViz: function BrushingComputer$CalculateLegendsForViz(legendViz, tupleViz, tupleIds, highlightCmd, actionName) {
			var targetVizData = legendViz.get_vizDataModel();
			var $t1 = $tab_ModelUtils.getModelsForViz($tab_CategoricalLegendModel).call(null, $tab_ModelUtils.findContentDashboard(null), legendViz);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var legend = $t1[$t2];
				if (ss.isNullOrUndefined(targetVizData)) {
					$tab_BrushingComputer.get_$log().error('Target viz data not found: %s.', [legend.get_worksheetName()]);
					continue;
				}
				if (!legend.get_isHighlightEnabled() || actionName.length === 0 && legend.get_isOneWay()) {
					continue;
				}
				var commonFields = _.intersection(tupleViz.get_vizDataModel().get_fieldCaptions(), legend.get_fieldCaptions());
				commonFields = $tab_BrushingComputer.getHighlightFieldCaptions(highlightCmd, tupleViz.get_vizDataModel().get_highlightCaptions(), commonFields);
				var dvs = $tab_$BrushingDataUtils.$buildTupleSelectionDataValues(tupleViz.get_vizDataModel(), tupleIds, commonFields);
				var legendsToBrush = $tab_$BrushingDataUtils.$findMatchingLegendItems(dvs, targetVizData, legend);
				$tab_BrushingComputer.get_$log().debug('Brushing legend items: %s, %o', [legend.get_id(), legendsToBrush]);
				if (!ss.keyExists(this.$legendBrushing, legendViz.get_worksheetName())) {
					this.$legendBrushing[legendViz.get_worksheetName()] = {};
				}
				this.$legendBrushing[legendViz.get_worksheetName()][$tab_BrushingComputer.$calculateLegendKey(legend.get_legendTypeEnum(), legend.get_legendNames())] = legendsToBrush;
			}
		}
	});
	ss.initClass($tab_BuildCaptionContextMenuCmd, $asm, {
		invoke: function BuildCaptionContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-caption-context-menu' }, this.cmdParams));
		},
		validateInvokeParams: function BuildCaptionContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sheetName')) {
				throw new ss.Exception('missing param DocParams.SheetName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildCaptionContextMenuCmd$Response]));
	ss.initClass($tab_BuildCaptionContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildDataTabFieldContextMenuCmd, $asm, {
		invoke: function BuildDataTabFieldContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-data-tab-field-context-menu' }, this.cmdParams));
		},
		validateInvokeParams: function BuildDataTabFieldContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fieldVector')) {
				throw new ss.Exception('missing param DocParams.FieldVector');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildDataTabFieldContextMenuCmd$Response]));
	ss.initClass($tab_BuildDataTabFieldContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildDeviceLayoutListContextMenuCmd, $asm, {
		invoke: function BuildDeviceLayoutListContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-device-layout-list-context-menu' }, this.cmdParams));
		},
		validateInvokeParams: function BuildDeviceLayoutListContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dashboardDeviceLayout')) {
				throw new ss.Exception('missing param DocParams.DashboardDeviceLayout');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildDeviceLayoutListContextMenuCmd$Response]));
	ss.initClass($tab_BuildDeviceLayoutListContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildLayoutTreeContextMenuCmd, $asm, {
		invoke: function BuildLayoutTreeContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-layout-tree-context-menu' }, this.cmdParams));
		},
		validateInvokeParams: function BuildLayoutTreeContextMenuCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildLayoutTreeContextMenuCmd$Response]));
	ss.initClass($tab_BuildLayoutTreeContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildObjectContextMenuCmd, $asm, {
		invoke: function BuildObjectContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-object-context-menu' }, this.cmdParams));
		},
		validateInvokeParams: function BuildObjectContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dataObjectModelObjectId')) {
				throw new ss.Exception('missing param DocParams.DataObjectModelObjectId');
			}
			if (!ss.keyExists(this.cmdParams, 'uniqueName')) {
				throw new ss.Exception('missing param DocParams.UniqueName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildObjectContextMenuCmd$Response]));
	ss.initClass($tab_BuildObjectContextMenuCmd$Response, $asm, {
		hasCommands: function Response$HasCommands() {
			return ss.keyExists(this.$$cmdParams, 'commands');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_BuildSchemaChangeDataTypeMenuCmd, $asm, {
		invoke: function BuildSchemaChangeDataTypeMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-schema-change-data-type-menu' }, this.cmdParams));
		},
		validateInvokeParams: function BuildSchemaChangeDataTypeMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fieldVector')) {
				throw new ss.Exception('missing param DocParams.FieldVector');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildSchemaChangeDataTypeMenuCmd$Response]));
	ss.initClass($tab_BuildSchemaChangeDataTypeMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildServerAxisContextMenuCmd, $asm, {
		invoke: function BuildServerAxisContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-server-axis-context-menu' }, this.cmdParams));
		},
		validateInvokeParams: function BuildServerAxisContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'regionPoint')) {
				throw new ss.Exception('missing param DocParams.RegionPoint');
			}
			if (!ss.keyExists(this.cmdParams, 'r')) {
				throw new ss.Exception('missing param DocParams.VizImageRegion');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildServerAxisContextMenuCmd$Response]));
	ss.initClass($tab_BuildServerAxisContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildSheetListContextMenuCmd, $asm, {
		invoke: function BuildSheetListContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-sheet-list-context-menu' }, this.cmdParams));
		},
		validateInvokeParams: function BuildSheetListContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sheetName')) {
				throw new ss.Exception('missing param DocParams.SheetName');
			}
			if (!ss.keyExists(this.cmdParams, 'addAsFloating')) {
				throw new ss.Exception('missing param DocParams.AddAsFloating');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildSheetListContextMenuCmd$Response]));
	ss.initClass($tab_BuildSheetListContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_BuildTitleContextMenuCmd, $asm, {
		invoke: function BuildTitleContextMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-title-context-menu' }, this.cmdParams));
		},
		validateInvokeParams: function BuildTitleContextMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sheetName')) {
				throw new ss.Exception('missing param DocParams.SheetName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_BuildTitleContextMenuCmd$Response]));
	ss.initClass($tab_BuildTitleContextMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_ButtonZoneModel, $asm, {
		add_contentUpdated: function ButtonZoneModel$add_ContentUpdated(value) {
			this.$2$ContentUpdatedField = ss.delegateCombine(this.$2$ContentUpdatedField, value);
		},
		remove_contentUpdated: function ButtonZoneModel$remove_ContentUpdated(value) {
			this.$2$ContentUpdatedField = ss.delegateRemove(this.$2$ContentUpdatedField, value);
		},
		get_$visualState: function ButtonZoneModel$get_VisualState() {
			return this.get_buttonZone().buttonVisualStates[this.get_buttonZone().activeVisualStateIndex];
		},
		get_internalModel: function ButtonZoneModel$get_InternalModel() {
			return this.pm;
		},
		get_buttonZone: function ButtonZoneModel$get_ButtonZone() {
			return this.get_internalModel().dashboardButtonSharedInfo;
		},
		get_borderStyle: function ButtonZoneModel$get_BorderStyle() {
			return this.get_$visualState().buttonObjectBorderStyle;
		},
		get_borderWidth: function ButtonZoneModel$get_BorderWidth() {
			return this.get_$visualState().buttonObjectBorderWidth;
		},
		get_borderColor: function ButtonZoneModel$get_BorderColor() {
			return $tab_ColorModel.convertColorForCanvas(this.get_$visualState().buttonObjectBorderColor);
		},
		get_backgroundColor: function ButtonZoneModel$get_BackgroundColor() {
			return $tab_ColorModel.convertColorForCanvas(this.get_$visualState().buttonObjectBackgroundColor);
		},
		get_caption: function ButtonZoneModel$get_Caption() {
			return this.get_$visualState().buttonCaption;
		},
		get_effectiveCaption: function ButtonZoneModel$get_EffectiveCaption() {
			return this.get_internalModel().buttonEffectiveCaption;
		},
		get_clickActionString: function ButtonZoneModel$get_ClickActionString() {
			return this.get_buttonZone().buttonClickAction;
		},
		get_buttonType: function ButtonZoneModel$get_ButtonType() {
			return this.get_buttonZone().dashboardButtonType;
		},
		get_buttonBehaviour: function ButtonZoneModel$get_ButtonBehaviour() {
			return this.get_buttonZone().dashboardButtonBehaviour;
		},
		get_tooltipText: function ButtonZoneModel$get_TooltipText() {
			if (!ss.isNullOrEmptyString(this.get_internalModel().buttonTooltipText)) {
				return this.get_internalModel().buttonTooltipText;
			}
			else {
				return this.get_$visualState().buttonTooltipText;
			}
		},
		get_imagePathKey: function ButtonZoneModel$get_ImagePathKey() {
			return this.get_internalModel().buttonImagePathKey;
		},
		get_width: function ButtonZoneModel$get_Width() {
			return this.get_internalModel().w;
		},
		get_height: function ButtonZoneModel$get_Height() {
			return this.get_internalModel().h;
		},
		get_enabledState: function ButtonZoneModel$get_EnabledState() {
			return this.get_internalModel().dashboardButtonEnabledState;
		},
		get_captionFontName: function ButtonZoneModel$get_CaptionFontName() {
			return this.get_$visualState().buttonCaptionFontFormat.fontName;
		},
		get_captionTextColor: function ButtonZoneModel$get_CaptionTextColor() {
			return $tab_ColorModel.convertColorForCanvas(this.get_$visualState().buttonCaptionFontFormat.fontColor);
		},
		get_captionFontSize: function ButtonZoneModel$get_CaptionFontSize() {
			return this.get_$visualState().buttonCaptionFontFormat.fontSize;
		},
		get_captionFontIsBold: function ButtonZoneModel$get_CaptionFontIsBold() {
			return this.get_$visualState().buttonCaptionFontFormat.isFontBold;
		},
		get_captionFontIsItalic: function ButtonZoneModel$get_CaptionFontIsItalic() {
			return this.get_$visualState().buttonCaptionFontFormat.isFontItalic;
		},
		get_captionFontIsUnderlined: function ButtonZoneModel$get_CaptionFontIsUnderlined() {
			return this.get_$visualState().buttonCaptionFontFormat.isFontUnderlined;
		},
		update: function ButtonZoneModel$Update(serverButtonZonePresModel, context) {
			$tab_FontNotificationUtil.notifyFontsFromServerButtonZonePresModel(serverButtonZonePresModel);
			this.simpleSwapToUpdate(serverButtonZonePresModel, this.$2$ContentUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_CalculationAutoCompleteCmd, $asm, {
		invoke: function CalculationAutoCompleteCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'calculation-auto-complete' }, this.cmdParams));
		},
		validateInvokeParams: function CalculationAutoCompleteCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'acSubstring')) {
				throw new ss.Exception('missing param DocParams.AutoCompleteSubstring');
			}
			if (!ss.keyExists(this.cmdParams, 'position')) {
				throw new ss.Exception('missing param DocParams.Position');
			}
			if (!ss.keyExists(this.cmdParams, 'calculation')) {
				throw new ss.Exception('missing param DocParams.Calculation');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CalculationAutoCompleteCmd$Response]));
	ss.initClass($tab_CalculationAutoCompleteCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'calculationAutocompleteContextMenu')) {
				throw new ss.Exception('missing param DocParams.CalculationAutoCompleteContextMenu');
			}
		}
	});
	ss.initClass($tab_CalculationModel, $asm, {
		add_calculationUpdated: function CalculationModel$add_CalculationUpdated(value) {
			this.$2$CalculationUpdatedField = ss.delegateCombine(this.$2$CalculationUpdatedField, value);
		},
		remove_calculationUpdated: function CalculationModel$remove_CalculationUpdated(value) {
			this.$2$CalculationUpdatedField = ss.delegateRemove(this.$2$CalculationUpdatedField, value);
		},
		get_isAdhoc: null,
		get_calculationFunctionListModel: function CalculationModel$get_CalculationFunctionListModel() {
			return this.$2$CalculationFunctionListModelField;
		},
		set_calculationFunctionListModel: function CalculationModel$set_CalculationFunctionListModel(value) {
			this.$2$CalculationFunctionListModelField = value;
		},
		get_hasCalculation: function CalculationModel$get_HasCalculation() {
			return ss.isValue(this.pm) && (!tab.MiscUtil.isNullOrEmpty$3(this.get_$calculationPresModel().calculationCaption) || !tab.MiscUtil.isNullOrEmpty$3(this.get_$calculationPresModel().pendingCalcName) || !tab.MiscUtil.isNullOrEmpty$3(this.get_$calculationPresModel().datasource));
		},
		get_isNewCalculation: function CalculationModel$get_IsNewCalculation() {
			return tab.MiscUtil.isNullOrEmpty$3(this.get_$calculationPresModel().fn);
		},
		get_adHocShelf: function CalculationModel$get_AdHocShelf() {
			return this.get_$calculationPresModel().shelfType || 'none-shelf';
		},
		get_adHocShelfPosition: function CalculationModel$get_AdHocShelfPosition() {
			return this.get_$calculationPresModel().shelfPosIndex;
		},
		get_adHocPaneSpecId: function CalculationModel$get_AdHocPaneSpecId() {
			return this.get_$calculationPresModel().paneSpec;
		},
		get_$calculationPresModel: function CalculationModel$get_CalculationPresModel() {
			return this.pm;
		},
		get_tokens: function CalculationModel$get_Tokens() {
			return this.get_$calculationPresModel().styleTokenList || [];
		},
		get_name: function CalculationModel$get_Name() {
			return this.get_$calculationPresModel().pendingCalcName || '';
		},
		get_fieldName: function CalculationModel$get_FieldName() {
			return this.get_$calculationPresModel().fn || '';
		},
		get_errors: function CalculationModel$get_Errors() {
			return this.get_$calculationPresModel().errorInfoList || [];
		},
		get_errorSummary: function CalculationModel$get_ErrorSummary() {
			return this.get_$calculationPresModel().errorString || '';
		},
		get_caption: function CalculationModel$get_Caption() {
			return this.get_$calculationPresModel().calculationCaption || '';
		},
		get_formula: function CalculationModel$get_Formula() {
			return this.get_$calculationPresModel().calculationFormula || '';
		},
		get_dependencies: function CalculationModel$get_Dependencies() {
			return this.get_$calculationPresModel().calculationDependencies || '';
		},
		get_dependenciesBtnLabel: function CalculationModel$get_DependenciesBtnLabel() {
			return this.get_$calculationPresModel().label || '';
		},
		get_dataSourceName: function CalculationModel$get_DataSourceName() {
			return this.get_$calculationPresModel().datasource || '';
		},
		get_dataSourceCaption: function CalculationModel$get_DataSourceCaption() {
			var dataSchema = $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema();
			if (ss.isNullOrUndefined(dataSchema)) {
				return null;
			}
			var dataSource = dataSchema.findDataSourceByName(this.get_dataSourceName());
			if (ss.isNullOrUndefined(dataSource)) {
				return null;
			}
			return dataSource.get_caption();
		},
		get_useParameters: function CalculationModel$get_UseParameters() {
			return ss.coalesce(this.get_$calculationPresModel().useParameters, false);
		},
		get_calculationContext: function CalculationModel$get_CalculationContext() {
			return ss.coalesce(this.get_$calculationPresModel().calculationContext, 'calculation-dialog');
		},
		get_isForJoin: function CalculationModel$get_IsForJoin() {
			return ss.isValue(this.get_$calculationPresModel().joinOnCalcInfo) && this.get_$calculationPresModel().joinOnCalcInfo.forJoin;
		},
		get_joinOnCalcInfoPresModel: function CalculationModel$get_JoinOnCalcInfoPresModel() {
			return this.get_$calculationPresModel().joinOnCalcInfo;
		},
		get_modelVersion: function CalculationModel$get_ModelVersion() {
			return this.$2$ModelVersionField;
		},
		set_modelVersion: function CalculationModel$set_ModelVersion(value) {
			this.$2$ModelVersionField = value;
		},
		update: function CalculationModel$Update(newCalculation, context) {
			var updated = this.simpleSwapToUpdate(newCalculation, this.$2$CalculationUpdatedField, context);
			if (updated) {
				this.set_modelVersion(this.get_modelVersion() + 1);
			}
			if (ss.isValue(this.get_$calculationPresModel()) && ss.isValue(this.get_$calculationPresModel().expressionFuncPm)) {
				this.get_calculationFunctionListModel().update(this.get_$calculationPresModel().expressionFuncPm, context);
			}
		}
	}, $tab_Model);
	ss.initInterface($tab_IHandleNotifications, $asm, { get_notificationId: null, onNotify: null });
	ss.initClass($tab_CalculationDialogModel, $asm, {
		get_notificationId: function CalculationDialogModel$get_NotificationId() {
			return 'doc:calculation-dialog-event';
		},
		get_isAdhoc: function CalculationDialogModel$get_IsAdhoc() {
			return false;
		},
		onNotify: function CalculationDialogModel$OnNotify(pm, context) {
			this.update(pm, context);
		}
	}, $tab_CalculationModel, [$tab_IHandleNotifications]);
	ss.initClass($tab_CalculationFunctionListModel, $asm, {
		add_functionListUpdated: function CalculationFunctionListModel$add_FunctionListUpdated(value) {
			this.$2$FunctionListUpdatedField = ss.delegateCombine(this.$2$FunctionListUpdatedField, value);
		},
		remove_functionListUpdated: function CalculationFunctionListModel$remove_FunctionListUpdated(value) {
			this.$2$FunctionListUpdatedField = ss.delegateRemove(this.$2$FunctionListUpdatedField, value);
		},
		get_$functionsPresModel: function CalculationFunctionListModel$get_FunctionsPresModel() {
			return this.pm;
		},
		get_functions: function CalculationFunctionListModel$get_Functions() {
			return this.get_$functionsPresModel().expressionFuncList || [];
		},
		update: function CalculationFunctionListModel$Update(newFunctionList, context) {
			this.simpleSwapToUpdate(newFunctionList, this.$2$FunctionListUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_CancelCommands, $asm, {});
	ss.initEnum($tab_CancellationStatus, $asm, { success: 200, nothingToCancel: 204 });
	ss.initClass($tab_CancelTelemetry, $asm, {});
	ss.initClass($tab_CategoricalFilterByIndexCmd, $asm, {
		invoke: function CategoricalFilterByIndexCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'categorical-filter-by-index' }, this.cmdParams));
		},
		validateInvokeParams: function CategoricalFilterByIndexCmd$ValidateInvokeParams() {
			if (ss.keyExists(this.cmdParams, 'globalFieldName') === ss.keyExists(this.cmdParams, 'qualifiedFieldCaption')) {
				throw new ss.Exception('must have one and only one of params DocParams.GlobalFieldName and DocParams.QualifiedFieldCaption');
			}
			if (!ss.keyExists(this.cmdParams, 'filterUpdateType')) {
				throw new ss.Exception('missing param DocParams.FilterUpdateType');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CategoricalFilterByIndexCmd$Response]));
	ss.initClass($tab_CategoricalFilterByIndexCmd$Response, $asm, {
		hasParameterError: function Response$HasParameterError() {
			return ss.keyExists(this.$$cmdParams, 'parameterError');
		},
		hasInvalidIndices: function Response$HasInvalidIndices() {
			return ss.keyExists(this.$$cmdParams, 'invalidIndices');
		},
		hasFieldCaption: function Response$HasFieldCaption() {
			return ss.keyExists(this.$$cmdParams, 'fieldCaption');
		},
		hasFieldName: function Response$HasFieldName() {
			return ss.keyExists(this.$$cmdParams, 'fn');
		},
		hasInvalidFieldName: function Response$HasInvalidFieldName() {
			return ss.keyExists(this.$$cmdParams, 'invalidFieldName');
		},
		hasInvalidFieldCaption: function Response$HasInvalidFieldCaption() {
			return ss.keyExists(this.$$cmdParams, 'invalidFieldCaption');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_CategoricalFilterCmd, $asm, {
		invoke: function CategoricalFilterCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'categorical-filter' }, this.cmdParams));
		},
		validateInvokeParams: function CategoricalFilterCmd$ValidateInvokeParams() {
			if (ss.keyExists(this.cmdParams, 'globalFieldName') === ss.keyExists(this.cmdParams, 'qualifiedFieldCaption')) {
				throw new ss.Exception('must have one and only one of params DocParams.GlobalFieldName and DocParams.QualifiedFieldCaption');
			}
			if (!ss.keyExists(this.cmdParams, 'filterUpdateType')) {
				throw new ss.Exception('missing param DocParams.FilterUpdateType');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CategoricalFilterCmd$Response]));
	ss.initClass($tab_CategoricalFilterCmd$Response, $asm, {
		hasParameterError: function Response$HasParameterError() {
			return ss.keyExists(this.$$cmdParams, 'parameterError');
		},
		hasInvalidValues: function Response$HasInvalidValues() {
			return ss.keyExists(this.$$cmdParams, 'invalidValues');
		},
		hasFieldCaption: function Response$HasFieldCaption() {
			return ss.keyExists(this.$$cmdParams, 'fieldCaption');
		},
		hasFieldName: function Response$HasFieldName() {
			return ss.keyExists(this.$$cmdParams, 'fn');
		},
		hasInvalidFieldName: function Response$HasInvalidFieldName() {
			return ss.keyExists(this.$$cmdParams, 'invalidFieldName');
		},
		hasInvalidFieldCaption: function Response$HasInvalidFieldCaption() {
			return ss.keyExists(this.$$cmdParams, 'invalidFieldCaption');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_CategoricalFilterModel, $asm, {
		get_items: function CategoricalFilterModel$get_Items() {
			return this.get_$categoricalFilterPresModel().domainTables;
		},
		get_$categoricalFilterPresModel: function CategoricalFilterModel$get_CategoricalFilterPresModel() {
			return this.pm;
		},
		update: function CategoricalFilterModel$Update(newPresModel) {
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
			}
		}
	}, $tab_Model);
	ss.initInterface($tab_IBrushingModelInfo, $asm, { getItemNamesFromObjectId: null });
	ss.initClass($tab_CategoricalLegendModel, $asm, {
		add_legendChanged: function CategoricalLegendModel$add_LegendChanged(value) {
			this.$2$LegendChangedField = ss.delegateCombine(this.$2$LegendChangedField, value);
		},
		remove_legendChanged: function CategoricalLegendModel$remove_LegendChanged(value) {
			this.$2$LegendChangedField = ss.delegateRemove(this.$2$LegendChangedField, value);
		},
		add_legendNameChanged: function CategoricalLegendModel$add_LegendNameChanged(value) {
			this.$2$LegendNameChangedField = ss.delegateCombine(this.$2$LegendNameChangedField, value);
		},
		remove_legendNameChanged: function CategoricalLegendModel$remove_LegendNameChanged(value) {
			this.$2$LegendNameChangedField = ss.delegateRemove(this.$2$LegendNameChangedField, value);
		},
		get_worksheetName: function CategoricalLegendModel$get_WorksheetName() {
			return this.get_$zone().get_worksheetName();
		},
		get_id: function CategoricalLegendModel$get_Id() {
			return this.get_legendNames().join(';') + this.$legendType;
		},
		get_catLegendPresModel: function CategoricalLegendModel$get_CatLegendPresModel() {
			return this.pm;
		},
		get_isContextMenuAllowed: function CategoricalLegendModel$get_IsContextMenuAllowed() {
			return this.get_catLegendPresModel().isContextMenuAllowed || false;
		},
		get_isHighlightEnabled: function CategoricalLegendModel$get_IsHighlightEnabled() {
			return this.get_catLegendPresModel().isHighlightEnabled || false;
		},
		get_isHighlightAllowed: function CategoricalLegendModel$get_IsHighlightAllowed() {
			return this.get_catLegendPresModel().isHighlightAllowed || false;
		},
		get_isOneWay: function CategoricalLegendModel$get_IsOneWay() {
			return this.get_catLegendPresModel().oneWayBrushing || false;
		},
		get_fieldCaptions: function CategoricalLegendModel$get_FieldCaptions() {
			return this.get_catLegendPresModel().fieldCaptions;
		},
		get_legendNames: function CategoricalLegendModel$get_LegendNames() {
			return this.get_catLegendPresModel().legendNames;
		},
		get_legendTypeEnum: function CategoricalLegendModel$get_LegendTypeEnum() {
			return this.$legendType;
		},
		get_items: function CategoricalLegendModel$get_Items() {
			return $tab_CategoricalLegendModel.$getPresModelItems(this.get_legendTypeEnum(), this.get_catLegendPresModel());
		},
		get_$zone: function CategoricalLegendModel$get_Zone() {
			var wrapper = ss.safeCast(this.parent, $tab_ZoneContentWrapperModel);
			return wrapper.get_zone();
		},
		getItemNamesFromObjectId: function CategoricalLegendModel$GetItemNamesFromObjectId(objectId) {
			var foundItemPresModel = _.find(this.get_items(), function(itemPresModel) {
				return itemPresModel.objectId === objectId;
			});
			return foundItemPresModel.itemValues;
		},
		update: function CategoricalLegendModel$Update(catLegendPresModel, context) {
			if (this.$legendType === 'shape' && ss.isValue(catLegendPresModel.markShapeList) && tab.FeatureFlags.isEnabled('WebDropServerRenderedLegends') && !$tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
				$tab_ApplicationModel.get_instance().get_shapeManager().updateCustomImageMap(catLegendPresModel.markShapeList);
			}
			if (this.isNewPresModelSameAsOld(catLegendPresModel)) {
				return;
			}
			$tab_FontNotificationUtil.notifyFontsFromCategoricalLegendPresModel(catLegendPresModel);
			var oldPM = this.get_catLegendPresModel();
			this.swapAndCopyPresModel(catLegendPresModel);
			if (ss.isValue(oldPM) && !_.isEqual(oldPM.legendNames, catLegendPresModel.legendNames)) {
				this.raiseEvent(this.$2$LegendNameChangedField, context);
			}
			this.raiseEvent(this.$2$LegendChangedField, context);
		}
	}, $tab_Model, [$tab_IBrushingModelInfo]);
	ss.initClass($tab_QuickFilterModel, $asm, {
		update: function QuickFilterModel$Update(newPresModel, context) {
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_CategoricalQuickFilterModel, $asm, {
		get_categoricalFilter: function CategoricalQuickFilterModel$get_CategoricalFilter() {
			return this.$3$CategoricalFilterField;
		},
		set_categoricalFilter: function CategoricalQuickFilterModel$set_CategoricalFilter(value) {
			this.$3$CategoricalFilterField = value;
		},
		get_mode: function CategoricalQuickFilterModel$get_Mode() {
			return this.$categoricalQuickFilterPresModel.categoricalMode;
		},
		get_isAllButtonVisible: function CategoricalQuickFilterModel$get_IsAllButtonVisible() {
			return this.$categoricalQuickFilterPresModel.isAllButtonVisible;
		},
		get_isAllButtonSelected: function CategoricalQuickFilterModel$get_IsAllButtonSelected() {
			return this.$categoricalQuickFilterPresModel.categoricalFilter.allSelected;
		},
		get_isSelectionExclusive: function CategoricalQuickFilterModel$get_IsSelectionExclusive() {
			return this.$categoricalQuickFilterPresModel.categoricalFilter.isSelectionExclusive;
		},
		get_showApplyAndCancelButtons: function CategoricalQuickFilterModel$get_ShowApplyAndCancelButtons() {
			return this.$categoricalQuickFilterPresModel.showApplyAndCancelButtons;
		},
		get_showSearchButton: function CategoricalQuickFilterModel$get_ShowSearchButton() {
			return this.$categoricalQuickFilterPresModel.isSearchable;
		},
		get_showMoreLessButton: function CategoricalQuickFilterModel$get_ShowMoreLessButton() {
			return this.$categoricalQuickFilterPresModel.canShowMoreFewerButton;
		},
		get_showClearButton: function CategoricalQuickFilterModel$get_ShowClearButton() {
			return this.$categoricalQuickFilterPresModel.canShowFilterStateButton;
		},
		get_getDomainValue: function CategoricalQuickFilterModel$get_GetDomainValue() {
			return this.$categoricalQuickFilterPresModel.filterDomainType;
		},
		getDomains: function CategoricalQuickFilterModel$GetDomains() {
			return this.$categoricalQuickFilterPresModel.filterDomains;
		},
		update: function CategoricalQuickFilterModel$Update(newPresModel, context) {
			$tab_QuickFilterModel.prototype.update.call(this, newPresModel, context);
			this.$categoricalQuickFilterPresModel = newPresModel;
			this.get_categoricalFilter().update(this.$categoricalQuickFilterPresModel.categoricalFilter);
		}
	}, $tab_QuickFilterModel);
	ss.initClass($tab_ChangeWorkbookUIModeCmd, $asm, {
		invoke: function ChangeWorkbookUIModeCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'change-workbook-ui-mode' }, this.cmdParams));
		},
		validateInvokeParams: function ChangeWorkbookUIModeCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'uiMode')) {
				throw new ss.Exception('missing param DocParams.UIMode');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ChangeWorkbookUIModeCmd$Response]));
	ss.initClass($tab_ChangeWorkbookUIModeCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_CheckConnectionCmd, $asm, {
		invoke: function CheckConnectionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'check-connection' }, this.cmdParams));
		},
		validateInvokeParams: function CheckConnectionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionConfigName')) {
				throw new ss.Exception('missing param DocParams.ConfigName');
			}
			if (!ss.keyExists(this.cmdParams, 'lookupTable')) {
				throw new ss.Exception('missing param DocParams.LookupTable');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CheckConnectionCmd$Response]));
	ss.initClass($tab_CheckConnectionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initEnum($tab_ClipCase, $asm, { clipNone: 0, clipX: 1, clipY: 2, clipXY: 3 });
	ss.initClass($tab_CloseDataAlertDialogCmd, $asm, {
		invoke: function CloseDataAlertDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'close-data-alert-dialog' }, this.cmdParams));
		},
		validateInvokeParams: function CloseDataAlertDialogCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CloseDataAlertDialogCmd$Response]));
	ss.initClass($tab_CloseDataAlertDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ColorModel, $asm, {
		get_r: function ColorModel$get_R() {
			return this.$r;
		},
		get_g: function ColorModel$get_G() {
			return this.$g;
		},
		get_b: function ColorModel$get_B() {
			return this.$b;
		},
		get_a: function ColorModel$get_A() {
			return this.$a;
		},
		get_isOpaque: function ColorModel$get_IsOpaque() {
			return this.get_a() >= $tab_ColorModel.$closeToOne;
		},
		isLuminanceAboveThreshold: function ColorModel$IsLuminanceAboveThreshold(luminanceThreshold) {
			return this.$luminance() > luminanceThreshold;
		},
		isLStarAboveThreshold: function ColorModel$IsLStarAboveThreshold(lstarThreshold) {
			return this.$lStar() > lstarThreshold;
		},
		isLuminanceAgainstBackgroundAboveThreshold: function ColorModel$IsLuminanceAgainstBackgroundAboveThreshold(backgroundColor, luminanceThreshold) {
			return this.$luminanceAgainstBackground(backgroundColor) > luminanceThreshold;
		},
		setRGBStr: function ColorModel$SetRGBStr(str) {
			this.$rgbStr = str;
		},
		isValueAboveThreshold: function ColorModel$IsValueAboveThreshold(darkThreshold) {
			var alphaBlended = $tab_ColorModel.alphaBlend(this, $tab_ColorModel.white);
			return Math.max(Math.max(alphaBlended.get_r(), alphaBlended.get_g()), alphaBlended.get_b()) > darkThreshold;
		},
		toString: function ColorModel$ToString() {
			if (this.$cachedStr === '') {
				this.$cachedStr = ((this.$a >= $tab_ColorModel.$closeToOne) ? this.toRgb() : this.toRgba());
			}
			return this.$cachedStr;
		},
		$lStar: function ColorModel$LStar() {
			var Y = this.$luminance();
			var L = 116 * $tab_ColorModel.$labTransform(Y) - 16;
			return L;
		},
		$luminance: function ColorModel$Luminance() {
			return $tab_ColorModel.$luminance(this.get_r(), this.get_g(), this.get_b());
		},
		$luminanceAgainstBackground: function ColorModel$LuminanceAgainstBackground(backgroundColor) {
			var newR = ss.Int32.trunc(this.$a * this.$r + (1 - this.$a) * backgroundColor.get_r());
			var newG = ss.Int32.trunc(this.$a * this.$g + (1 - this.$a) * backgroundColor.get_g());
			var newB = ss.Int32.trunc(this.$a * this.$b + (1 - this.$a) * backgroundColor.get_b());
			return $tab_ColorModel.$luminance(newR, newG, newB);
		},
		getApparentColor: function ColorModel$GetApparentColor(backgroundColor) {
			var newR = ss.Int32.trunc((1 - $tab_ColorModel.$getApparentAlphaPercent(this.$r)) * backgroundColor.get_r());
			var newG = ss.Int32.trunc((1 - $tab_ColorModel.$getApparentAlphaPercent(this.$g)) * backgroundColor.get_g());
			var newB = ss.Int32.trunc((1 - $tab_ColorModel.$getApparentAlphaPercent(this.$b)) * backgroundColor.get_b());
			return new $tab_ColorModel(newR, newG, newB, this.$a);
		},
		toRgba: function ColorModel$ToRgba() {
			return 'rgba(' + this.$r + ',' + this.$g + ',' + this.$b + ',' + this.$a + ')';
		},
		toRgba255: function ColorModel$ToRgba255() {
			return 'rgba(' + this.$r + ',' + this.$g + ',' + this.$b + ',' + $tab_ColorModel.alphaFractionTo255(this.$a) + ')';
		},
		toRgb: function ColorModel$ToRgb() {
			if (this.$rgbStr === '') {
				return 'rgb(' + this.$r + ',' + this.$g + ',' + this.$b + ')';
			}
			return this.$rgbStr;
		},
		toRgbHex: function ColorModel$ToRgbHex() {
			return '#' + $tab_ColorModel.$toHex(this.$r, 2) + $tab_ColorModel.$toHex(this.$g, 2) + $tab_ColorModel.$toHex(this.$b, 2);
		},
		toHoverColor: function ColorModel$ToHoverColor() {
			var hoverColor = (this.isValueAboveThreshold($tab_ColorModel.$hoverDarkThreshold) ? $tab_ColorModel.blackHoverColor : $tab_ColorModel.whiteHoverColor);
			return ((this.get_a() < 1) ? hoverColor : $tab_ColorModel.alphaBlend(hoverColor, this));
		},
		toArgbInt: function ColorModel$ToArgbInt() {
			var alpha255 = ss.Int32.trunc($tab_ColorModel.alphaFractionTo255(this.$a));
			return (alpha255 << 24) + (this.$r << 16) + (this.$g << 8) + this.$b;
		}
	});
	ss.initClass($tab_ColorPaletteCollectionModel, $asm, {
		get_paletteCollectionPresModel: function ColorPaletteCollectionModel$get_PaletteCollectionPresModel() {
			return this.pm;
		},
		get_qColorPaletteGroups: function ColorPaletteCollectionModel$get_QColorPaletteGroups() {
			return this.get_paletteCollectionPresModel().qColorPaletteGroups;
		},
		get_catColorPaletteGroups: function ColorPaletteCollectionModel$get_CatColorPaletteGroups() {
			return this.get_paletteCollectionPresModel().catColorPaletteGroups;
		},
		get_colorPalettes: function ColorPaletteCollectionModel$get_ColorPalettes() {
			var colorPresModel = this.pm;
			if (ss.isNullOrUndefined(colorPresModel)) {
				return [];
			}
			return colorPresModel.colorPalettes;
		},
		colorPaletteGroup: function ColorPaletteCollectionModel$ColorPaletteGroup(groupPresModel) {
			var indices = groupPresModel.palettesIndices;
			return _.map(indices, ss.mkdel(this, function(index) {
				return this.get_colorPalettes()[index];
			}));
		},
		update: function ColorPaletteCollectionModel$Update(newColorPalettes, context) {
			this.simpleSwapToUpdate(newColorPalettes, null, context);
		}
	}, $tab_Model);
	ss.initClass($tab_CommandCancellationWhiteList, $asm, {});
	ss.initClass($tab_CommandController, $asm, {
		add_onUrlActionsResponse: function CommandController$add_OnUrlActionsResponse(value) {
			this.$1$OnUrlActionsResponseField = ss.delegateCombine(this.$1$OnUrlActionsResponseField, value);
		},
		remove_onUrlActionsResponse: function CommandController$remove_OnUrlActionsResponse(value) {
			this.$1$OnUrlActionsResponseField = ss.delegateRemove(this.$1$OnUrlActionsResponseField, value);
		},
		add_onInvalidation: function CommandController$add_OnInvalidation(value) {
			this.$1$OnInvalidationField = ss.delegateCombine(this.$1$OnInvalidationField, value);
		},
		remove_onInvalidation: function CommandController$remove_OnInvalidation(value) {
			this.$1$OnInvalidationField = ss.delegateRemove(this.$1$OnInvalidationField, value);
		},
		add_tabChangeCompleted: function CommandController$add_TabChangeCompleted(value) {
			this.$1$TabChangeCompletedField = ss.delegateCombine(this.$1$TabChangeCompletedField, value);
		},
		remove_tabChangeCompleted: function CommandController$remove_TabChangeCompleted(value) {
			this.$1$TabChangeCompletedField = ss.delegateRemove(this.$1$TabChangeCompletedField, value);
		},
		add_newLayoutId: function CommandController$add_NewLayoutId(value) {
			this.$1$NewLayoutIdField = ss.delegateCombine(this.$1$NewLayoutIdField, value);
		},
		remove_newLayoutId: function CommandController$remove_NewLayoutId(value) {
			this.$1$NewLayoutIdField = ss.delegateRemove(this.$1$NewLayoutIdField, value);
		},
		add_onInitialBootstrap: function CommandController$add_OnInitialBootstrap(value) {
			this.$1$OnInitialBootstrapField = ss.delegateCombine(this.$1$OnInitialBootstrapField, value);
		},
		remove_onInitialBootstrap: function CommandController$remove_OnInitialBootstrap(value) {
			this.$1$OnInitialBootstrapField = ss.delegateRemove(this.$1$OnInitialBootstrapField, value);
		},
		add_onPrimaryBootstrapSuccess: function CommandController$add_OnPrimaryBootstrapSuccess(value) {
			this.$1$OnPrimaryBootstrapSuccessField = ss.delegateCombine(this.$1$OnPrimaryBootstrapSuccessField, value);
		},
		remove_onPrimaryBootstrapSuccess: function CommandController$remove_OnPrimaryBootstrapSuccess(value) {
			this.$1$OnPrimaryBootstrapSuccessField = ss.delegateRemove(this.$1$OnPrimaryBootstrapSuccessField, value);
		},
		add_switchingViz: function CommandController$add_SwitchingViz(value) {
			this.$1$SwitchingVizField = ss.delegateCombine(this.$1$SwitchingVizField, value);
		},
		remove_switchingViz: function CommandController$remove_SwitchingViz(value) {
			this.$1$SwitchingVizField = ss.delegateRemove(this.$1$SwitchingVizField, value);
		},
		add_destroyView: function CommandController$add_DestroyView(value) {
			this.$1$DestroyViewField = ss.delegateCombine(this.$1$DestroyViewField, value);
		},
		remove_destroyView: function CommandController$remove_DestroyView(value) {
			this.$1$DestroyViewField = ss.delegateRemove(this.$1$DestroyViewField, value);
		},
		add_commandQueueComplete: function CommandController$add_CommandQueueComplete(value) {
			this.$1$CommandQueueCompleteField = ss.delegateCombine(this.$1$CommandQueueCompleteField, value);
		},
		remove_commandQueueComplete: function CommandController$remove_CommandQueueComplete(value) {
			this.$1$CommandQueueCompleteField = ss.delegateRemove(this.$1$CommandQueueCompleteField, value);
		},
		add_undoCommand: function CommandController$add_UndoCommand(value) {
			this.$1$UndoCommandField = ss.delegateCombine(this.$1$UndoCommandField, value);
		},
		remove_undoCommand: function CommandController$remove_UndoCommand(value) {
			this.$1$UndoCommandField = ss.delegateRemove(this.$1$UndoCommandField, value);
		},
		add_redoCommand: function CommandController$add_RedoCommand(value) {
			this.$1$RedoCommandField = ss.delegateCombine(this.$1$RedoCommandField, value);
		},
		remove_redoCommand: function CommandController$remove_RedoCommand(value) {
			this.$1$RedoCommandField = ss.delegateRemove(this.$1$RedoCommandField, value);
		},
		add_modelsUpdated: function CommandController$add_ModelsUpdated(value) {
			this.$1$ModelsUpdatedField = ss.delegateCombine(this.$1$ModelsUpdatedField, value);
		},
		remove_modelsUpdated: function CommandController$remove_ModelsUpdated(value) {
			this.$1$ModelsUpdatedField = ss.delegateRemove(this.$1$ModelsUpdatedField, value);
		},
		add_intermediateUpdate: function CommandController$add_IntermediateUpdate(value) {
			this.$1$IntermediateUpdateField = ss.delegateCombine(this.$1$IntermediateUpdateField, value);
		},
		remove_intermediateUpdate: function CommandController$remove_IntermediateUpdate(value) {
			this.$1$IntermediateUpdateField = ss.delegateRemove(this.$1$IntermediateUpdateField, value);
		},
		add_remoteCommandFailure: function CommandController$add_RemoteCommandFailure(value) {
			this.$1$RemoteCommandFailureField = ss.delegateCombine(this.$1$RemoteCommandFailureField, value);
		},
		remove_remoteCommandFailure: function CommandController$remove_RemoteCommandFailure(value) {
			this.$1$RemoteCommandFailureField = ss.delegateRemove(this.$1$RemoteCommandFailureField, value);
		},
		get_loader: function CommandController$get_Loader() {
			return this.$progressiveLoader;
		},
		get_$isCommandQueueEmpty: function CommandController$get_IsCommandQueueEmpty() {
			return this.executingCommands.length === 0 && this.$waitingCommands.get_$count() === 0;
		},
		get_$commandQueueBlocked: function CommandController$get_CommandQueueBlocked() {
			return _.any(this.executingCommands, $tab_CommandController.$isCommandBlocking);
		},
		get_commandHandler: function CommandController$get_CommandHandler() {
			return this.$commandHandler;
		},
		set_commandHandler: function CommandController$set_CommandHandler(value) {
			if (ss.isValue(this.$commandHandler)) {
				this.$commandHandler.remove_onRemoteCommandResponse(ss.mkdel(this, this.$handleRemoteCommandSuccess));
				this.$commandHandler.remove_onRemoteCommandException(ss.mkdel(this, this.$handleRemoteCommandFailure));
			}
			this.$commandHandler = value;
			this.$commandHandler.add_onRemoteCommandResponse(ss.mkdel(this, this.$handleRemoteCommandSuccess));
			this.$commandHandler.add_onRemoteCommandException(ss.mkdel(this, this.$handleRemoteCommandFailure));
		},
		$createAndSetUpCommandHandler: function CommandController$CreateAndSetUpCommandHandler() {
			var baseSessionCommandHandler = new $tab_$BaseSessionCommandHandler(this.legacySession);
			baseSessionCommandHandler.$installCommandThrottling$1('tabsrv', { ns: 'tabsrv', cmd: 'render-tooltip-server' }.cmd, $tab_CommandController.$defaultMinimumThrottleTime);
			var $t1 = new $tab_CommandThrottlerTarget();
			$t1.commandNamespace = { ns: 'tabdoc', cmd: 'highlight-items' }.ns;
			$t1.commandName = { ns: 'tabdoc', cmd: 'highlight-items' }.cmd;
			var $t2 = new $tab_CommandThrottlerTarget();
			$t2.commandNamespace = { ns: 'tabdoc', cmd: 'clear-highlighting' }.ns;
			$t2.commandName = { ns: 'tabdoc', cmd: 'clear-highlighting' }.cmd;
			var $t3 = new $tab_CommandThrottlerTarget();
			$t3.commandNamespace = { ns: 'tabdoc', cmd: 'highlight-items-by-pattern-match' }.ns;
			$t3.commandName = { ns: 'tabdoc', cmd: 'highlight-items-by-pattern-match' }.cmd;
			var dataHighlighterCommandThrottlerTargets = [$t1, $t2, $t3];
			baseSessionCommandHandler.$installCommandThrottling(dataHighlighterCommandThrottlerTargets, $tab_CommandController.$defaultMinimumThrottleTime);
			return baseSessionCommandHandler;
		},
		cancelRunningCommand: function CommandController$CancelRunningCommand(command, successCallback, failureCallback) {
			if (!tab.FeatureFlags.isEnabled('CommandCancellation')) {
				ss.Debug.assert(false, 'Should not be able to call Cancel() while feature flag is disabled.');
				return;
			}
			this.$abortProgressiveLoad();
			this.$waitIndicator.$show(true, false);
			this.isCanceling = true;
			var cancelStartTime = new Date();
			while (ss.isValue(this.$waitingCommands.$dequeue())) {
			}
			this.$commandHandler.cancelRunningCommand(command, ss.mkdel(this, function(layoutStatus, cancelStatus) {
				var processResponseStartTime = new Date();
				if (cancelStatus === 200) {
					ss.clear(this.executingCommands);
					ss.clearKeys(this.deferredServerResponseQueue);
					ss.clear(this.$invalidations);
					this.$deferredLayoutInfo = null;
					if (ss.isValue(layoutStatus)) {
						this.$shouldResetWorld = !!(this.$shouldResetWorld | layoutStatus.isWorldNew);
						this.$updateDeferredLayout(layoutStatus);
						var $t1 = new $tab_InvalidationInfo();
						$t1.primarySheet = null;
						$t1.layoutStatus = layoutStatus;
						$t1.cmdResult = null;
						var info = $t1;
						var tuple = { item1: layoutStatus.applicationPresModel, item2: info };
						this.$enqueueServerResponse(0, tuple);
						this.$processCommandResponses(null);
					}
				}
				if (!ss.staticEquals(successCallback, null)) {
					successCallback(cancelStatus);
				}
				this.isCanceling = false;
				this.$waitIndicator.$hide();
				var cancelEndTime = new Date();
				$tab_CancelTelemetry.$logCancellationSuccessEvent(command.commandName, cancelStatus, cancelStartTime, processResponseStartTime, cancelEndTime);
			}), ss.mkdel(this, function(e) {
				$tab_CommandController.get_$log().debug('Cancel failed', []);
				if (!ss.staticEquals(failureCallback, null)) {
					failureCallback();
				}
				this.isCanceling = false;
				this.$waitIndicator.$hide();
				var cancelEndTime1 = new Date();
				$tab_CancelTelemetry.$logCancellationFailureEvent(command.commandName, cancelStartTime, cancelEndTime1);
			}));
		},
		resetInvalidationHandlers: function CommandController$ResetInvalidationHandlers() {
			this.$1$OnUrlActionsResponseField = null;
			this.$1$OnInvalidationField = null;
			this.$1$OnPrimaryBootstrapSuccessField = null;
		},
		setBrowserViewportFunc: function CommandController$SetBrowserViewportFunc(viewportFunc) {
			this.$getViewportFunc = viewportFunc;
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
				this.$getViewportFunc(ss.mkdel(this, function(viewport) {
					this.$progressiveLoader.setViewport(viewport);
				}));
			}
		},
		prepareForSheetChange: function CommandController$PrepareForSheetChange() {
			$tab_BaseSession.get_waitHandler().showAndLock();
		},
		switchViz: function CommandController$SwitchViz(config, url, bootstrap) {
			if (!ss.staticEquals(this.$1$SwitchingVizField, null)) {
				this.$1$SwitchingVizField();
			}
			this.$bootstrapComplete = false;
			this.$testHookOnlyAllContentReady = false;
			$tab_StartupUtils.reset();
			tabBootstrap.ViewerBootstrap.resetInstance();
			var staticAssetVersionPrev = tsConfig.staticAssetVersion;
			$tab_StartupUtils.resetTsConfig(config);
			var hasNewResources = this.$hasNewResources(tsConfig.cssStaticAssetFiles, tsConfig.jsStaticAssetFiles);
			var staticAssetsUpgraded = !ss.referenceEquals(staticAssetVersionPrev, tsConfig.staticAssetVersion);
			if (staticAssetsUpgraded || hasNewResources) {
				url.setWindowLocation(null);
				return;
			}
			$tab_CommandController.$parentCompletedSent = false;
			var isSessionRecovery = url.get_ignoreStickySession();
			if (!isSessionRecovery) {
				url.updateForViewingSheet(tsConfig.repositoryUrl).replaceState(null);
			}
			bootstrap(this.legacySession);
			if (!ss.staticEquals($tab_CommandController.$1$SwitchedVizField, null)) {
				$tab_CommandController.$1$SwitchedVizField();
			}
		},
		$hasNewResources: function CommandController$HasNewResources(cssFiles, scriptFiles) {
			for (var $t1 = 0; $t1 < cssFiles.length; $t1++) {
				var cssFile = cssFiles[$t1];
				if (!$tab_ModuleManager.isCssLoaded(cssFile)) {
					return true;
				}
			}
			for (var $t2 = 0; $t2 < scriptFiles.length; $t2++) {
				var scriptFile = scriptFiles[$t2];
				if (!$tab_ModuleManager.isScriptLoaded(scriptFile)) {
					return true;
				}
			}
			return false;
		},
		$handleBootstrapSuccess: function CommandController$HandleBootstrapSuccess(bootstrapResponse) {
			this.$updateTSConfigFromBootstrapResponse(bootstrapResponse);
			if (!ss.staticEquals(this.$1$OnPrimaryBootstrapSuccessField, null)) {
				this.$1$OnPrimaryBootstrapSuccessField();
			}
			var vizUriModel = $tab_VizUriModel.createForCurrentWindowLocation(null);
			if (vizUriModel.get_retry()) {
				vizUriModel.set_retry(false);
				vizUriModel.replaceState(null);
			}
			if (ss.isValue(bootstrapResponse.sessionState)) {
				this.adoptServerSessionState(bootstrapResponse.sessionState);
			}
			this.$handlePrimaryUpdate(bootstrapResponse.worldUpdate.applicationPresModel);
			this.$deferredConnectionsCommandHandler.handlePotentialBootstrapDataSourceException(bootstrapResponse);
			if (ss.isNullOrUndefined(bootstrapResponse.sessionState)) {
				if (!ss.staticEquals(this.$1$OnInitialBootstrapField, null)) {
					this.$1$OnInitialBootstrapField();
				}
			}
		},
		$handleBootstrapFailureStatus200: function CommandController$HandleBootstrapFailureStatus200(error) {
			var $t1 = error['message'];
			if (ss.isNullOrUndefined($t1)) {
				$t1 = error['_message'];
			}
			var message = $t1;
			if (ss.isValue(message) && message.substr(0, 12) === 'Invalid JSON') {
				$tab_CommandController.sendParentCompletedMessage();
				var errorMessage = tab.Strings.ServerErrorInvalidJSON + '<br>';
				this.$commonDialogProvider.ShowErrorDialog(errorMessage, tab.Strings.SessionUnknownErrorTitle, null);
				throw new ss.Exception('Invalid JSON');
			}
		},
		$handleBootstrapFailureStatus403: function CommandController$HandleBootstrapFailureStatus403(error) {
			var code = 0;
			var message = '';
			try {
				var exception = JSON.parse(error['responseText']);
				if (ss.isValue(exception)) {
					code = exception.code;
					message = exception.message;
				}
			}
			catch ($t1) {
			}
			$tab_CommandController.sendParentCompletedMessage();
			this.legacySession.get_sessionErrorHandler().handleSessionForbiddenAction(code, message);
		},
		$handleBootstrapFailureStatus401: function CommandController$HandleBootstrapFailureStatus401(error) {
			if (tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
				var response = error['responseText'];
				var errorObject = tab.DataSourceConnectionAttemptErrorResponse.tryDeserialize$1(response);
				var url = (ss.isNullOrUndefined(errorObject) ? response : errorObject.RedirectUrl);
				tab.WindowHelper.locationReplace(window.self, url);
			}
			else {
				var response1 = error['responseText'];
				tab.WindowHelper.locationReplace(window.self, response1);
			}
		},
		$handleBootstrapFailureStatus408: function CommandController$HandleBootstrapFailureStatus408() {
			$tab_CommandController.sendParentCompletedMessage();
			this.legacySession.get_sessionErrorHandler().handleSessionTimeoutLimitExceeded();
		},
		$handleBootstrapFailureStatus410: function CommandController$HandleBootstrapFailureStatus410() {
			this.legacySession.get_sessionErrorHandler().handleSessionExpiration(true);
		},
		$handleBootstrapFailureStatus413: function CommandController$HandleBootstrapFailureStatus413() {
			$tab_CommandController.sendParentCompletedMessage();
			this.legacySession.get_sessionErrorHandler().handleSessionResourceLimitExceeded();
		},
		$handleBootstrapFailureStatus429: function CommandController$HandleBootstrapFailureStatus429() {
			$tab_CommandController.sendParentCompletedMessage();
			this.legacySession.get_sessionErrorHandler().handleTooManyRequests();
		},
		$handlBootstrapFailureStatusOther: function CommandController$HandlBootstrapFailureStatusOther(status, error) {
			if (status !== 0) {
				$tab_CommandController.sendParentCompletedMessage();
				var errorDetails = error['responseText'];
				if (tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
					var errorObject = tab.DataSourceConnectionAttemptErrorResponse.tryDeserialize$1(errorDetails);
					if (ss.isValue(errorObject)) {
						errorDetails = errorObject.ErrorMessage;
					}
				}
				if (status === 502 || status === 503) {
					this.legacySession.get_sessionErrorHandler().handleSessionKilled(errorDetails);
				}
				else {
					this.legacySession.get_sessionErrorHandler().handleUnknownErrorStatus(errorDetails);
				}
				this.legacySession.nudgeWait();
			}
		},
		$handleBootstrapFailure: function CommandController$HandleBootstrapFailure(error) {
			$tab_SessionHeartbeat.onVizqlPinged();
			var status = error['status'];
			switch (status) {
				case 200: {
					this.$handleBootstrapFailureStatus200(error);
					break;
				}
				case 403: {
					this.$handleBootstrapFailureStatus403(error);
					break;
				}
				case 401: {
					this.$handleBootstrapFailureStatus401(error);
					break;
				}
				case 408: {
					this.$handleBootstrapFailureStatus408();
					break;
				}
				case 410: {
					this.$handleBootstrapFailureStatus410();
					break;
				}
				case 413: {
					this.$handleBootstrapFailureStatus413();
					break;
				}
				case 429: {
					this.$handleBootstrapFailureStatus429();
					break;
				}
				default: {
					this.$handlBootstrapFailureStatusOther(status, error);
					break;
				}
			}
		},
		refreshLayout: function CommandController$RefreshLayout() {
			$tab_CommandController.get_$log().debug('RefreshLayout', []);
			if (tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapCompleted()) {
				return;
			}
			var onBootstrapSuccess = ss.mkdel(this, function(arg) {
				if (tab.ObjectCoverage.shouldTrack('bootstrap-initial')) {
					arg = (new tab.ObjectCoverage('bootstrap-initial')).instrument(arg, '');
				}
				try {
					this.$handleBootstrapSuccess(arg);
				}
				catch ($t1) {
					var e = ss.Exception.wrap($t1);
					$tab_CommandController.handleBootstrapException(e, this.$commonDialogProvider);
				}
			});
			var onBootStrapSecondaryResponse = ss.mkdel(this, function(arg1) {
				var secondaryUpdate = arg1;
				if (ss.isValue(secondaryUpdate)) {
					$tab_CommandController.get_$log().debug('Deferring secondary payload processing', []);
					_.defer(ss.mkdel(this, function() {
						{
							var secondaryContext = tabBootstrap.MetricsController.createContext('PROSEC'.toString(), 2, null);
							try {
								try {
									this.$handleSecondaryUpdate(secondaryUpdate);
								}
								catch ($t2) {
									var e1 = ss.Exception.wrap($t2);
									$tab_CommandController.handleBootstrapException(e1, this.$commonDialogProvider);
								}
							}
							finally {
								if (ss.isValue(secondaryContext)) {
									secondaryContext.dispose();
								}
							}
						}
						if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
							this.$startProgressiveLoad();
						}
						else {
							this.$onBootstrapComplete();
						}
					}));
				}
			});
			var onBootstrapFailure = ss.mkdel(this, function(err) {
				this.$handleBootstrapFailure(err);
			});
			tabBootstrap.ViewerBootstrap.get_instance().waitOnInitialLayoutModel(onBootstrapSuccess, onBootstrapFailure, onBootStrapSecondaryResponse);
		},
		delayLocalUrlActions: function CommandController$DelayLocalUrlActions(urlActions) {
			this.$delayedLocalUrlActions = this.$delayedLocalUrlActions.concat.apply(this.$delayedLocalUrlActions, urlActions);
		},
		worldCheckpoint: function CommandController$WorldCheckpoint() {
			return this.$worldCheckpoint.worldCheckpoint();
		},
		$transitionGuestSession: function CommandController$TransitionGuestSession(successCallback) {
			var onSuccess = function() {
				successCallback();
			};
			var args = { type: 'POST', url: $tab_CommandController.$formatSessionMethod('transitionGuest', this.legacySession) };
			var pathnameParts = tab.MiscUtil.get_urlPathnameParts();
			var sheetId = (ss.keyExists(pathnameParts, 3) ? pathnameParts[3] : '');
			var authoringSheetname = tsConfig.current_sheet_name;
			var xhrData = ss.mkdict([':authSheet', authoringSheetname, 'sheet_id', sheetId]);
			args.data = xhrData;
			var handler = new $tab_SessionAjaxCallManager(this.legacySession, null, onSuccess, null, true, true);
			$tab_XhrUtil.helper(args, handler);
		},
		$onGlobalError: function CommandController$OnGlobalError(m, url, line, col, err) {
			var errorMessage = tab.Strings.UnhandledExceptionMessage(this.legacySession.get_id(), m);
			var links = $tab_CommandController.$appendErrorLinksToMessageIfPresent(this.legacySession.get_id(), m, err);
			this.$commonDialogProvider.ShowErrorDialog(errorMessage, tab.Strings.UnhandledExceptionTitle, links);
			$tab_CommandController.$postUnhandledExceptionMessage(JSON.stringify(m));
			tab.ErrorTrace.windowOnError(m, url, line, col, err);
			return false;
		},
		adoptServerSessionState: function CommandController$AdoptServerSessionState(initialState) {
			var outcome = initialState.outcome;
			$tab_CommandController.logErrorForUnknownRecoveryOutcome(outcome);
			var history = initialState.stateGuids;
			if ((outcome === 'FULL' || outcome === 'PARTIAL') && history.length > 0) {
				var recoveredGuid = history[history.length - 1];
				this.legacySession.revertHistory([], recoveredGuid);
			}
			else {
				this.legacySession.revertHistory(history, null);
			}
		},
		$onProgressiveUpdate: function CommandController$OnProgressiveUpdate(progressivePM, finalUpdate) {
			if (ss.isValue(progressivePM)) {
				$tab_Model.nonWorldUpdate(ss.mkdel(this, function(ctx) {
					ctx.dialogProvider = this.$commonDialogProvider;
					$tab_ApplicationModel.get_instance().update(progressivePM, ctx);
					this.$worldCheckpoint.checkpointAppPresModel();
				}));
				this.raiseModelsUpdated();
				if (!finalUpdate) {
					this.$notifyIntermediateUpdate();
				}
			}
		},
		$notifyIntermediateUpdate: function CommandController$NotifyIntermediateUpdate() {
			if (!ss.staticEquals(this.$1$IntermediateUpdateField, null)) {
				this.$1$IntermediateUpdateField();
			}
		},
		$initializeProgressiveLoader: function CommandController$InitializeProgressiveLoader() {
			ss.Debug.assert(ss.isNullOrUndefined(this.$progressiveLoader), 'CommandController tried to create ProgressiveLoader when it already exists');
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
				this.$progressiveLoader = new $tab_ProgressiveLoader();
				this.$progressiveLoader.add_progressiveLoad(ss.mkdel(this, this.$onProgressiveUpdate));
				this.$progressiveLoader.add_progressiveLoadComplete(ss.mkdel(this, this.$onProgressiveLoadComplete));
				this.$callOnProgLoadComplete = [];
			}
		},
		$startProgressiveLoad: function CommandController$StartProgressiveLoad() {
			$tab_CommandController.get_$log().info('Starting Progressive Load', []);
			this.$progressiveLoader.start();
		},
		$abortProgressiveLoad: function CommandController$AbortProgressiveLoad() {
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled() && this.$progressiveLoader.get_hasZonesToLoad()) {
				$tab_CommandController.get_$log().info('Aborting Progressive Load', []);
				this.$progressiveLoader.abort();
				this.$callOnProgLoadComplete = [];
				this.$onProgressiveLoadComplete();
			}
		},
		$onProgressiveLoadComplete: function CommandController$OnProgressiveLoadComplete() {
			$tab_CommandController.get_$log().info('Progressive Load Complete', []);
			this.$scheduleAllZonesLoaded();
			this.$onBootstrapComplete();
			$tab_WorldUpdateInterceptor.get().raiseOnProgressiveLoadComplete();
			$tab_WorldUpdateInterceptor.get().raiseOnDashboardLoadComplete();
			for (var $t1 = 0; $t1 < this.$callOnProgLoadComplete.length; $t1++) {
				var act = this.$callOnProgLoadComplete[$t1];
				act();
			}
			this.$callOnProgLoadComplete = [];
		},
		createModelUpdateContext: function CommandController$CreateModelUpdateContext() {
			var $t1 = new $tab_DeferredModelEventHandler();
			$t1.exceptionHandler = ss.mkdel(this, function(e) {
				$tab_CommandController.handleBootstrapException(e, this.$commonDialogProvider);
			});
			var modelEventHandler = $t1;
			var modelUpdateContext = { dialogProvider: this.$commonDialogProvider, eventHandler: modelEventHandler };
			return modelUpdateContext;
		},
		$handlePrimaryUpdate: function CommandController$HandlePrimaryUpdate(appPM) {
			{
				var $t3 = tabBootstrap.MetricsController.createContext('PROPRI', 2, null);
				try {
					var $t1 = new $tab_DeferredModelEventHandler();
					$t1.exceptionHandler = ss.mkdel(this, function(e) {
						$tab_CommandController.handleBootstrapException(e, this.$commonDialogProvider);
					});
					var modelEventHandler = $t1;
					var modelUpdateContext = { dialogProvider: this.$commonDialogProvider, eventHandler: modelEventHandler };
					$tab_WorldUpdateInterceptor.get().raiseOnBootstrapResponse(appPM);
					if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
						appPM = this.$progressiveLoader.extractZoneContent(appPM);
					}
					{
						var initModelsContext = tabBootstrap.MetricsController.createContext('MDLINI'.toString(), 2, null);
						try {
							var applicationModel = $tab_ApplicationModel.get_instance();
							applicationModel.update(appPM, modelUpdateContext);
							applicationModel.$initTabAnim();
						}
						finally {
							if (ss.isValue(initModelsContext)) {
								initModelsContext.dispose();
							}
						}
					}
					this.$worldCheckpoint.checkpointAppPresModel();
					$tab_StartupUtils.notifyModelsInitialized();
					{
						var $t2 = tabBootstrap.MetricsController.createContext('MDLEVT'.toString(), 2, null);
						try {
							modelEventHandler.fireDeferredEvents();
						}
						finally {
							if (ss.isValue($t2)) {
								$t2.dispose();
							}
						}
					}
				}
				finally {
					if (ss.isValue($t3)) {
						$t3.dispose();
					}
				}
			}
			this.raiseModelsUpdated();
			if (!$tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
				this.$scheduleAllZonesLoaded();
				$tab_WorldUpdateInterceptor.get().raiseOnDashboardLoadComplete();
			}
			this.legacySession.nudgeWait();
		},
		$handleSecondaryUpdate: function CommandController$HandleSecondaryUpdate(secondaryUpdate) {
			var secondaryInfo = secondaryUpdate['secondaryInfo'.toString()];
			if (!ss.isValue(secondaryInfo) || !ss.isValue(secondaryInfo.presModelMap) || ss.getKeyCount(secondaryInfo.presModelMap) === 0) {
				return;
			}
			var appClone = $tab_ApplicationModel.get_instance().get_appPresModel();
			if (ss.keyExists(secondaryInfo.presModelMap, 'dataDictionary')) {
				var presModelHolder = secondaryInfo.presModelMap['dataDictionary'].presModelHolder;
				var dataDictionary = presModelHolder['genDataDictionaryPresModel'];
				if (ss.isValue(dataDictionary)) {
					appClone.dataDictionary = dataDictionary;
				}
			}
			var $t1 = new $tab_DeferredModelEventHandler();
			$t1.exceptionHandler = ss.mkdel(this, function(e) {
				$tab_CommandController.handleBootstrapException(e, this.$commonDialogProvider);
			});
			var eventHandler = $t1;
			var modelUpdateContext = { dialogProvider: this.$commonDialogProvider, eventHandler: eventHandler };
			if (ss.keyExists(secondaryInfo.presModelMap, 'vizData')) {
				var dashboard = appClone.workbookPresModel.dashboardPresModel;
				var presModelHolder1 = secondaryInfo.presModelMap['vizData'].presModelHolder;
				var vizDatas = presModelHolder1['genPresModelMapPresModel'];
				if ($tab_ProgressiveLoader.get_progressiveLoadEnabled() && this.$progressiveLoader.get_hasZonesToLoad()) {
					this.$progressiveLoader.updateZonesWithVizData(vizDatas, modelUpdateContext);
				}
				else {
					$tab_VizDataUtils.addVizDataToZones(vizDatas.presModelMap, dashboard.zones);
				}
			}
			$tab_ApplicationModel.get_instance().update(appClone, modelUpdateContext);
			this.$worldCheckpoint.checkpointAppPresModel();
			if ($tab_ModelUtils.hasAnyImpliedSelection()) {
				eventHandler.fireDeferredEvents();
			}
			this.raiseModelsUpdated();
			$tab_CommandController.get_$log().debug('Secondary bootstrap complete', []);
		},
		$updateTSConfigFromBootstrapResponse: function CommandController$UpdateTSConfigFromBootstrapResponse(bootstrapResponse) {
			this.$updateLayoutId(bootstrapResponse.layoutId);
			var sessionId = bootstrapResponse.newSessionId;
			if (!tab.MiscUtil.isNullOrEmpty$3(sessionId)) {
				tsConfig.sessionid = sessionId;
			}
			var workbookLocale = bootstrapResponse.workbookLocale;
			if (!ss.isNullOrEmptyString(workbookLocale)) {
				tsConfig.workbookLocale = workbookLocale;
			}
			var clientNum = bootstrapResponse.newClientNum;
			if (!ss.isNullOrEmptyString(clientNum)) {
				tsConfig.clientNumber = clientNum;
				tabBootstrap.UrlLocationHashManager.addToUrlHash(tabBootstrap.UrlLocationHashManager.CLIENTNO, clientNum);
			}
			tsConfig.current_sheet_name = bootstrapResponse.sheetName;
			$tab_XhrUtil.set_currentTabName(tsConfig.current_sheet_name);
			tsConfig.workbook_allow_subscriptions = bootstrapResponse.allowSubscriptions;
			tsConfig.allow_subscribe_on_data_present = bootstrapResponse.allowSubscribeOnDataPresent;
			if (ss.isValue(bootstrapResponse.worldUpdate) && ss.isValue(bootstrapResponse.worldUpdate.applicationPresModel.workbookPresModel.dashboardPresModel)) {
				tsConfig.current_sheet_type = bootstrapResponse.worldUpdate.applicationPresModel.workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetType;
			}
		},
		$updateLayoutId: function CommandController$UpdateLayoutId(newLayoutId) {
			tsConfig.layoutid = newLayoutId;
		},
		$kickTheQueue: function CommandController$KickTheQueue() {
			while (this.$waitingCommands.get_$count() > 0 && !this.get_$commandQueueBlocked()) {
				this.$executeClientCommand(this.$waitingCommands.$dequeue());
			}
			$tab_CommandController.get_$log().debug('KickTheQueue: ' + this.$waitingCommands.get_$count() + ' are blocked and waiting.', []);
		},
		$executeClientCommand: function CommandController$ExecuteClientCommand(c) {
			$tab_CommandController.get_$log().debug('Executing client command, %o', [c]);
			this.executingCommands.push(c);
			if (c.get_isBlocking()) {
				this.$waitIndicator.$show(c.get_blockType() === 'immediately', !c.get_shouldShowCommandWaiter());
			}
			var eventHandler = new $tab_DeferredModelEventHandler();
			var modelUpdateContext = { dialogProvider: this.$commonDialogProvider, eventHandler: eventHandler };
			var t = this.$transactor.beginTransaction(modelUpdateContext);
			var localChange;
			try {
				c.execute(t, this.$commandHandler, ss.mkdel(this, function(executionResult) {
					this.commandCompleted(c, executionResult);
				}));
				localChange = this.$transactor.endTransaction();
				if ($tab_ApplicationModel.get_instance().get_isLocalRenderMode() && !$tab_CommandController.fireDeferredUrlActions) {
					this.$executeUrlActions(this.$delayedLocalUrlActions);
				}
				if (c.get_shouldShowCommandWaiter()) {
					c.get_commandWaiter().handleCommandStarted(c);
				}
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				tab.ErrorTrace.report(e);
				$tab_CommandController.get_$log().error('Error while executing a command: %s, %s', [c.get_commandName(), e.get_message()]);
				this.$transactor.rollbackTransaction();
				this.commandCompleted(c, new $tab_CommandExecutionResult(false, e));
				return;
			}
			finally {
				this.$resetDelayedLocalUrlActions();
			}
			var mc = null;
			if (c.get_hasLocalComponent()) {
				mc = tabBootstrap.MetricsController.createContext('PROLOC'.toString(), c.$getMetricsSuite(), c.$buildMetricsExtraInfo());
			}
			{
				var $t2 = mc;
				try {
					if (ss.isValue(localChange)) {
						if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
							localChange = this.$processUpdateForProgressiveLoad(localChange, modelUpdateContext, true);
						}
						$tab_ApplicationModel.get_instance().update(localChange, modelUpdateContext);
						this.$worldCheckpoint.markCurrentWorldAsDirty();
						eventHandler.fireDeferredEvents();
						this.raiseModelsUpdated();
					}
				}
				finally {
					if (ss.isValue($t2)) {
						$t2.dispose();
					}
				}
			}
			if (this.executingCommands.length > 0) {
				this.$testHookOnlyAllContentReady = false;
			}
		},
		commandCompleted: function CommandController$CommandCompleted(c, executionResult) {
			try {
				var mc = null;
				if (c.get_hasRemoteComponent()) {
					mc = tabBootstrap.MetricsController.createContext('PROREM'.toString(), c.$getMetricsSuite(), c.$buildMetricsExtraInfo());
				}
				{
					var $t1 = mc;
					try {
						try {
							ss.remove(this.executingCommands, c);
							if (this.get_$isCommandQueueEmpty()) {
								this.$processCommandResponses(c);
							}
						}
						finally {
							this.processingRenderModeChange = false;
							this.processingStoryPointChange = false;
						}
					}
					finally {
						if (ss.isValue($t1)) {
							$t1.dispose();
						}
					}
				}
				this.$handleDataSourceExceptions(c, executionResult);
				if (c.get_isFinished()) {
					c.triggerCallbacks();
					if (c.get_shouldShowCommandWaiter()) {
						c.get_commandWaiter().handleCommandCompleted();
					}
				}
				if (this.get_$isCommandQueueEmpty()) {
					this.$waitIndicator.$hide();
				}
				this.$kickTheQueue();
			}
			catch ($t2) {
				var failedErrorDialogCommands = tab.ListExtensions.where(Object).call(null, c.get_remoteCommands(), ss.mkdel(this, function(command) {
					return this.legacySession.get_sessionErrorHandler().checkForErrorDialogFailure(command);
				}));
				if (failedErrorDialogCommands.length > 0) {
					this.legacySession.get_sessionErrorHandler().handleErrorDialogFailure(failedErrorDialogCommands[0]);
				}
				else {
					if (c.get_shouldShowCommandWaiter()) {
						c.get_commandWaiter().handleCommandError();
					}
					throw $t2;
				}
			}
		},
		$handleDataSourceExceptions: function CommandController$HandleDataSourceExceptions(c, executionResult) {
			if (!executionResult.succeeded && tab.FeatureFlags.isEnabled('SkipConnectionsDuringLoad')) {
				var wasHandled = this.$deferredConnectionsCommandHandler.handle(executionResult.error, c);
				if (wasHandled) {
					this.$worldCheckpoint.revertLocalChanges();
					this.$waitIndicator.$hide();
				}
			}
		},
		$executeUrlActions: function CommandController$ExecuteUrlActions(urlActions) {
			var urlsActionsToFire = (ss.isValue(urlActions) ? ss.arrayClone(urlActions) : []);
			this.$resetDelayedLocalUrlActions();
			if (!ss.staticEquals(this.$1$OnUrlActionsResponseField, null) && urlsActionsToFire.length > 0) {
				this.$1$OnUrlActionsResponseField(urlsActionsToFire, this.$commonDialogProvider);
			}
		},
		$resetDelayedLocalUrlActions: function CommandController$ResetDelayedLocalUrlActions() {
			this.$delayedLocalUrlActions.length = 0;
		},
		$handleRemoteCommandSuccess: function CommandController$HandleRemoteCommandSuccess(sequenceID, c, o) {
			if (ss.isNullOrUndefined(c) || ss.isNullOrUndefined(o)) {
				return;
			}
			var response = o['vqlCmdResponse'.toString()];
			if (ss.isNullOrUndefined(response) || ss.isNullOrUndefined(response.layoutStatus)) {
				return;
			}
			var layoutStatus = response.layoutStatus;
			if (ss.isValue(layoutStatus.isWorldNew)) {
				this.$shouldResetWorld = !!(this.$shouldResetWorld | layoutStatus.isWorldNew);
			}
			if (ss.isValue(layoutStatus.urlActionList) && !$tab_ApplicationModel.get_instance().get_isLocalRenderMode() || $tab_CommandController.fireDeferredUrlActions) {
				if (layoutStatus.urlActionList.length > 0) {
					$tab_CommandController.fireDeferredUrlActions = false;
					this.$executeUrlActions(layoutStatus.urlActionList);
				}
			}
			this.$updateDeferredLayout(layoutStatus);
			var $t1 = new $tab_InvalidationInfo();
			$t1.primarySheet = this.$getPrimarySheet(c);
			$t1.layoutStatus = response.layoutStatus;
			$t1.cmdResult = response.cmdResultList[0];
			$t1.commandName = c.commandName;
			var info = $t1;
			var appPm = response.layoutStatus.applicationPresModel;
			var tuple = { item1: appPm, item2: info };
			this.$enqueueServerResponse(sequenceID, tuple);
			var sheetChanged = ss.isValue(this.$deferredLayoutInfo) && !ss.referenceEquals(tsConfig.current_sheet_name, this.$deferredLayoutInfo.sheetName);
			var $t2 = new $tab_CommandResponseEventArgs();
			$t2.set_applicationPresModel(appPm);
			$t2.set_worldUpdateCommand(c);
			$t2.set_sheetChanged(sheetChanged);
			$t2.set_rebuildTheWorld(this.$shouldResetWorld);
			var args = $t2;
			$tab_WorldUpdateInterceptor.get().raiseOnCommandResponse(args);
		},
		$getPrimarySheet: function CommandController$GetPrimarySheet(c) {
			var primarySheet = null;
			if (ss.isValue(c.commandParams) && !ss.referenceEquals(c.commandName, { ns: 'tabsrv', cmd: 'render-tooltip-server' }.cmd)) {
				if (ss.keyExists(c.commandParams, 'worksheet')) {
					primarySheet = c.commandParams['worksheet'];
				}
				else if (ss.keyExists(c.commandParams, 'visualIdPresModel')) {
					var visualIdPm;
					if (typeof(c.commandParams['visualIdPresModel']) === 'string') {
						var visualdIdJsonString = c.commandParams['visualIdPresModel'];
						visualIdPm = JSON.parse(visualdIdJsonString);
					}
					else {
						visualIdPm = c.commandParams['visualIdPresModel'];
					}
					primarySheet = visualIdPm.worksheet;
				}
			}
			return primarySheet;
		},
		$updateDeferredLayout: function CommandController$UpdateDeferredLayout(layoutStatus) {
			if (ss.isValue(layoutStatus.applicationPresModel) && ss.isValue(layoutStatus.applicationPresModel.workbookPresModel) && ss.isValue(layoutStatus.applicationPresModel.workbookPresModel.dashboardPresModel) && ss.isValue(layoutStatus.applicationPresModel.workbookPresModel.dashboardPresModel.sheetLayoutInfo)) {
				this.$deferredLayoutInfo = layoutStatus.applicationPresModel.workbookPresModel.dashboardPresModel.sheetLayoutInfo;
			}
		},
		$handleRemoteCommandFailure: function CommandController$HandleRemoteCommandFailure(sequenceID, c, e) {
			$tab_CommandController.get_$log().debug('HandleRemoteCommandFailure: SequenceId:%d Command:%s, Exception: %s', [sequenceID, c.commandName, e.get_message()]);
			var $t1 = new $tab_InvalidationInfo();
			$t1.cmdResult = { commandName: c.commandName, commandReturn: e };
			var info = $t1;
			var tuple = { item1: null, item2: info };
			this.$enqueueServerResponse(sequenceID, tuple);
			this.$raiseRemoteCommandFailure(e);
		},
		$processCommandResponses: function CommandController$ProcessCommandResponses(c) {
			ss.Debug.assert(this.get_$isCommandQueueEmpty(), 'should only call after all commands have been processed');
			if ($tab_ApplicationModel.get_instance().get_isOffline()) {
				return;
			}
			var eventHandler = new $tab_DeferredModelEventHandler();
			var modelUpdateContext = { dialogProvider: this.$commonDialogProvider, eventHandler: eventHandler };
			var hasServerResponse = ss.getKeyCount(this.deferredServerResponseQueue) > 0;
			var sheetChanged = false;
			if (ss.isValue(this.$deferredLayoutInfo)) {
				sheetChanged = !ss.referenceEquals(tsConfig.current_sheet_name, this.$deferredLayoutInfo.sheetName);
				this.$updateLayoutId(this.$deferredLayoutInfo.layoutId.toString());
				if (sheetChanged) {
					if (!ss.staticEquals($tab_CommandController.$1$SheetNameChangedField, null)) {
						$tab_CommandController.$1$SheetNameChangedField();
					}
				}
				if (sheetChanged || this.$shouldResetWorld) {
					this.$1$DestroyViewField();
				}
			}
			$tab_CommandController.get_$log().debug('Flushing the queue of %d pending server responses, shouldResetWorld=%s, sheetChanged=%s, layoutId=%s', [ss.getKeyCount(this.deferredServerResponseQueue), this.$shouldResetWorld, sheetChanged, tsConfig.layoutid]);
			var oldRenderMode = this._getRenderMode();
			var oldStoryState = this.$getStoryState();
			this.$cacheLocalStoreHandles();
			this.$transactor.rollbackTransactions(modelUpdateContext);
			if (this.$shouldResetWorld) {
				$tab_ApplicationModel.get_instance().get_workbook().handleWorldReset();
			}
			if (this.$shouldResetWorld || sheetChanged) {
				this.$abortProgressiveLoad();
			}
			this.$applyServerResponses(oldRenderMode, modelUpdateContext);
			this.$compareServerRenderInputDatastoreToLocal();
			ss.clearKeys(this.deferredServerResponseQueue);
			this.$worldCheckpoint.checkpointAppPresModel();
			this.$transactor.resetTransactedState();
			this.$processStoryPointChanges(oldStoryState);
			this.$processDeferredLayout(sheetChanged);
			if (hasServerResponse) {
				$tab_ModelUtils.reValidateVisualModels(modelUpdateContext);
			}
			eventHandler.fireDeferredEvents();
			this.$handleInvalidations(c);
			this.raiseModelsUpdated();
			this.$worldUpdateComplete();
			if (!$tab_ProgressiveLoader.get_progressiveLoadEnabled() && sheetChanged) {
				$tab_WorldUpdateInterceptor.get().raiseOnDashboardLoadComplete();
			}
		},
		$worldUpdateComplete: function CommandController$WorldUpdateComplete() {
			this.$postUpdateWorldActions.push(ss.mkdel(this, this.$raiseCommandQueueComplete));
			this.$postUpdateWorldActions.push(ss.mkdel(this, function() {
				$tab_ImageTileTracker.callWhenImagesLoaded(ss.mkdel(this, function() {
					this.$testHookOnlyAllContentReady = true;
				}));
			}));
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled() && this.$progressiveLoader.get_hasZonesToLoad()) {
				this.$callOnProgLoadComplete.push(ss.mkdel(this, function() {
					this.$doPostWorldUpdateActions();
				}));
			}
			else {
				this.$doPostWorldUpdateActions();
			}
			this.$shouldResetWorld = false;
		},
		$doPostWorldUpdateActions: function CommandController$DoPostWorldUpdateActions() {
			for (var $t1 = 0; $t1 < this.$postUpdateWorldActions.length; $t1++) {
				var action = this.$postUpdateWorldActions[$t1];
				action();
			}
			ss.clear(this.$postUpdateWorldActions);
		},
		$processStoryPointChanges: function CommandController$ProcessStoryPointChanges(prevStoryState) {
			if (prevStoryState.get_isStory()) {
				var currentStoryState = this.$getStoryState();
				if (currentStoryState.get_isStory() && prevStoryState.get_storyPointId() !== currentStoryState.get_storyPointId() && ss.isValue(prevStoryState.get_sheetName()) && ss.referenceEquals(prevStoryState.get_sheetName(), currentStoryState.get_sheetName())) {
					this.processingStoryPointChange = true;
					$tab_ApplicationModel.get_instance().$requestRuntimeDataAndUpdateVM();
				}
			}
		},
		$processDeferredLayout: function CommandController$ProcessDeferredLayout(sheetChanged) {
			if (ss.isNullOrUndefined(this.$deferredLayoutInfo)) {
				return;
			}
			if (!sheetChanged && !this.$shouldResetWorld) {
				return;
			}
			if (sheetChanged) {
				try {
					if (ss.isValue(window.parent) && typeof(window.parent['handleSheetChanged']) === 'function') {
						window.parent['handleSheetChanged'](this.$deferredLayoutInfo.sheetName, this.$deferredLayoutInfo.repositoryUrl);
					}
				}
				catch ($t1) {
				}
			}
			if (tsConfig.is_mobile_app && !('sheetname' in this.$deferredLayoutInfo)) {
				this.$deferredLayoutInfo['sheetName'] = this.$deferredLayoutInfo.sheetName;
			}
			var oldNewSheetNames = { item1: tsConfig.current_sheet_name, item2: this.$deferredLayoutInfo.sheetName };
			if (!ss.staticEquals(this.$1$NewLayoutIdField, null)) {
				this.$1$NewLayoutIdField(this.$deferredLayoutInfo);
			}
			$tab_AckbarEventsHelper.get().onNewLayoutId([this.$deferredLayoutInfo]);
			this.$postUpdateWorldActions.push(ss.mkdel(this, function() {
				if (!ss.staticEquals(this.$1$TabChangeCompletedField, null)) {
					this.$1$TabChangeCompletedField(oldNewSheetNames);
				}
			}));
			this.$deferredLayoutInfo = null;
		},
		$cacheLocalStoreHandles: function CommandController$CacheLocalStoreHandles() {
			if (!tab.FeatureParamsLookup.getBool(46)) {
				return;
			}
			ss.clearKeys(this.$localStoreHandles);
			var applicationPresModel = $tab_ApplicationModel.get_instance().pm;
			if (applicationPresModel === Object(applicationPresModel) && applicationPresModel.workbookPresModel === Object(applicationPresModel.workbookPresModel) && applicationPresModel.workbookPresModel.dashboardPresModel === Object(applicationPresModel.workbookPresModel.dashboardPresModel)) {
				var $t1 = new ss.ObjectEnumerator(applicationPresModel.workbookPresModel.dashboardPresModel.zones);
				try {
					while ($t1.moveNext()) {
						var zone = $t1.current();
						if (zone.value === Object(zone.value) && zone.value.presModelHolder === Object(zone.value.presModelHolder) && ss.keyExists(zone.value.presModelHolder, 'visual')) {
							var vpm = zone.value.presModelHolder['visual'];
							if (vpm.scene === Object(vpm.scene) && ss.isValue(vpm.scene.runtimeFinalDatastoreLocal)) {
								this.$localStoreHandles[zone.key] = vpm.scene.runtimeFinalDatastoreLocal;
							}
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
		},
		$compareServerRenderInputDatastoreToLocal: function CommandController$CompareServerRenderInputDatastoreToLocal() {
			if (!tab.FeatureParamsLookup.getBool(46) || ss.getKeyCount(this.$localStoreHandles) === 0) {
				return;
			}
			var applicationPresModel = $tab_ApplicationModel.get_instance().pm;
			if (applicationPresModel.workbookPresModel === Object(applicationPresModel.workbookPresModel) && applicationPresModel.workbookPresModel.workbookModified) {
				var $t1 = new ss.ObjectEnumerator(applicationPresModel.workbookPresModel.dashboardPresModel.zones);
				try {
					while ($t1.moveNext()) {
						var newZone = { $: $t1.current() };
						if (ss.keyExists(this.$localStoreHandles, newZone.$.key)) {
							var fakeHandle = new tab.DatastoreHandle(this.$localStoreHandles[newZone.$.key], null);
							tab.RuntimeWebModule.proxy.marshallDatastore(fakeHandle).done(ss.mkdel({ newZone: newZone }, function(marshalled) {
								var newRenderInputDatastoreStr = this.newZone.$.value.presModelHolder['visual'].scene.runtimeRenderInputDatastore;
								var newDatastore = tab.JsHeapMarshaller.unmarshallHex(newRenderInputDatastoreStr);
								if (!$tab_DeepCompareUtils.deepCompare(marshalled, newDatastore, 0.001, '')) {
									$tab_CommandController.get_$log().error('RuntimeError: Verify server datastore matches locally processed datastore for zone: ' + this.newZone.$, []);
								}
							}));
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
		},
		$applyServerResponses: function CommandController$ApplyServerResponses(oldRenderMode, context) {
			var commandSequenceIDs = _.keys(this.deferredServerResponseQueue);
			commandSequenceIDs = commandSequenceIDs.sort(function(key1, key2) {
				var id1 = parseInt(key1);
				var id2 = parseInt(key2);
				return ((id1 > id2) ? 1 : -1);
			});
			var applicationModel = $tab_ApplicationModel.get_instance();
			var ensureSheetLayoutDelegate = { $: null };
			for (var i = this.$getIndexOfLastWorldResetResponse(commandSequenceIDs); i < commandSequenceIDs.length; i++) {
				var sequenceId = commandSequenceIDs[i];
				var tuple = this.deferredServerResponseQueue[sequenceId];
				var commandApp = tuple.item1;
				var commandInvalidInfo = tuple.item2;
				if (ss.isNullOrUndefined(commandApp) || ss.isNullOrUndefined(commandInvalidInfo) || ss.isNullOrUndefined(commandInvalidInfo.layoutStatus)) {
					continue;
				}
				if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
					commandApp = this.$processUpdateForProgressiveLoad(commandApp, context, false);
				}
				var commandSheetName = commandInvalidInfo.layoutStatus.active_tab || '';
				this.$setupEnsureSheetLayoutDelegateIfNeeded(commandApp, applicationModel, commandSheetName, ensureSheetLayoutDelegate);
				applicationModel.update(commandApp, context);
				this.$invalidations.push(commandInvalidInfo);
				this.$updateHistory(commandInvalidInfo);
				if (!this.processingRenderModeChange && commandApp.renderMode !== oldRenderMode) {
					this.processingRenderModeChange = true;
					this.$waitIndicator.$showFullWaitHandlerNow();
				}
			}
			if (this.$shouldResetWorld) {
				$tab_CommandController.get_$log().debug('Deferring RequestRuntimeDataAndUpdateVM until after server response applied', []);
				_.defer(function() {
					$tab_ApplicationModel.get_instance().$requestRuntimeDataAndUpdateVM();
				});
			}
			if (!ss.staticEquals(ensureSheetLayoutDelegate.$, null)) {
				this.remove_undoCommand(ensureSheetLayoutDelegate.$);
				this.remove_redoCommand(ensureSheetLayoutDelegate.$);
			}
		},
		$getIndexOfLastWorldResetResponse: function CommandController$GetIndexOfLastWorldResetResponse(commandSequenceIDs) {
			var resetWorldResponseIndex = 0;
			if (this.$shouldResetWorld) {
				for (var i = commandSequenceIDs.length - 1; i >= 0; i--) {
					var seqId = commandSequenceIDs[i];
					var response = this.deferredServerResponseQueue[seqId];
					var commandApp = response.item1;
					var commandInvalidInfo = response.item2;
					var responseValid = !(ss.isNullOrUndefined(commandApp) || ss.isNullOrUndefined(commandInvalidInfo) || ss.isNullOrUndefined(commandInvalidInfo.layoutStatus));
					if (responseValid && commandInvalidInfo.layoutStatus.isWorldNew) {
						resetWorldResponseIndex = i;
						break;
					}
				}
			}
			return resetWorldResponseIndex;
		},
		$updateHistory: function CommandController$UpdateHistory(commandInvalidInfo) {
			if (!ss.isValue(commandInvalidInfo.layoutStatus.undoPosition)) {
				return;
			}
			if (ss.isNullOrUndefined(commandInvalidInfo.cmdResult)) {
				return;
			}
			var command = commandInvalidInfo.cmdResult.commandName;
			var clientHistoryPosition = this.legacySession.get_historyPosition();
			var serverHistoryPosition = commandInvalidInfo.layoutStatus.undoPosition;
			if (ss.referenceEquals(command, $tab_CommandUtils.serialize({ ns: 'tabsrv', cmd: 'revert-workbook' }))) {
				this.legacySession.revertHistory([], null);
			}
			else if (serverHistoryPosition === clientHistoryPosition - 1) {
				this.$raiseUndoCommand();
				this.legacySession.trackUndo();
			}
			else if (serverHistoryPosition > clientHistoryPosition) {
				if (ss.referenceEquals(command, $tab_CommandUtils.serialize({ ns: 'tabdoc', cmd: 'redo' }))) {
					this.$raiseRedoCommand();
					this.legacySession.trackRedo();
				}
				else {
					this.legacySession.$pushServerUndo('', commandInvalidInfo.layoutStatus.guid, commandInvalidInfo.layoutStatus.undoPosition);
				}
			}
		},
		$setupEnsureSheetLayoutDelegateIfNeeded: function CommandController$SetupEnsureSheetLayoutDelegateIfNeeded(commandApp, applicationModel, commandSheetName, ensureSheetLayoutDelegate) {
			if (ss.staticEquals(ensureSheetLayoutDelegate.$, null) && ss.isValue(commandApp.workbookPresModel) && (!ss.isValue(commandApp.workbookPresModel.uiMode) || commandApp.workbookPresModel.uiMode === 'document') && ss.isValue(applicationModel.get_workbook()) && applicationModel.get_workbook().get_uiMode() === 'data-tab' && ss.referenceEquals(commandSheetName, tsConfig.current_sheet_name)) {
				ensureSheetLayoutDelegate.$ = function() {
					var clientCommand = $tab_DeferredConnectionsCommandHandler.constructEnsureLayoutForSheetCommand();
					$tab_CommandController.SendCommand(clientCommand);
				};
				this.add_undoCommand(ensureSheetLayoutDelegate.$);
				this.add_redoCommand(ensureSheetLayoutDelegate.$);
			}
		},
		$processUpdateForProgressiveLoad: function CommandController$ProcessUpdateForProgressiveLoad(updatePM, context, local) {
			if ($tab_ProgressiveLoader.get_progressiveLoadEnabled()) {
				var currentPM = $tab_ApplicationModel.get_instance().get_appPresModel();
				var storyChanged = false;
				if ($tab_ApplicationModel.get_instance().get_workbook().get_isCurrentSheetStoryboard() && ss.isValue($tab_ApplicationModel.get_instance().get_workbook().get_storyboard().get_flipboard())) {
					var currentStoryPointId = $tab_ApplicationModel.get_instance().get_workbook().get_storyboard().get_flipboard().get_currentStoryPointId();
					var newStoryId = $tab_CommandController.$getStoryPointIdFromUpdate(updatePM);
					storyChanged = ss.isValue(newStoryId) && newStoryId !== currentStoryPointId;
				}
				var newSheet = $tab_CommandController.$getSheetNameFromUpdate(updatePM);
				var sheetChanged = !ss.isNullOrEmptyString(newSheet) && !ss.referenceEquals(newSheet, $tab_CommandController.$getSheetNameFromUpdate(currentPM));
				if (storyChanged || sheetChanged) {
					this.$abortProgressiveLoad();
					updatePM = this.$progressiveLoader.extractZoneContent(updatePM);
					this.$startProgressiveLoad();
				}
				else {
					updatePM = this.$progressiveLoader.processModelUpdate(updatePM, context, local);
				}
			}
			return updatePM;
		},
		$handleInvalidations: function CommandController$HandleInvalidations(c) {
			for (var $t1 = 0; $t1 < this.$invalidations.length; $t1++) {
				var invalidationInfo = this.$invalidations[$t1];
				$tab_CommandController.get_$log().debug('OnInvalidation', []);
				if (!ss.staticEquals(this.$1$OnInvalidationField, null)) {
					this.$1$OnInvalidationField(invalidationInfo);
				}
				var isEnsureLayoutForSheetCommand = ss.isValue(invalidationInfo) && ss.isValue(invalidationInfo.cmdResult) && ss.referenceEquals(invalidationInfo.cmdResult.commandName, $tab_CommandSerializer.buildQualifiedCommandName({ ns: 'tabsrv', cmd: 'ensure-layout-for-sheet' }.ns, { ns: 'tabsrv', cmd: 'ensure-layout-for-sheet' }.cmd));
				this.$deferredConnectionsCommandHandler.handlePotentialDataSourceException(c, invalidationInfo.layoutStatus, isEnsureLayoutForSheetCommand);
			}
			ss.clear(this.$invalidations);
		},
		$onBootstrapComplete: function CommandController$OnBootstrapComplete() {
			if (this.$bootstrapComplete) {
				return;
			}
			this.$bootstrapComplete = true;
			$tab_CommandController.$logClientFullyLoaded();
			$tab_StartupUtils.notifyClientFullyLoaded();
			$tab_ImageTileTracker.callWhenImagesLoaded(ss.mkdel(this, function() {
				$tab_ModuleManager.registerModulesLoadedCallback(ss.mkdel(this, function() {
					this.$testHookOnlyAllContentReady = true;
				}));
			}));
			$tab_CommandController.sendParentCompletedMessage();
			$tab_SessionHeartbeat.onVizqlPinged();
			$tab_CommandControllerTelemetry.$bootstrapCompleteTelemetry();
			$tab_CommandControllerStoryTelemetry.bootstrapCompleteStoryTelemetry();
		},
		$enqueueServerResponse: function CommandController$EnqueueServerResponse(sequenceID, tuple) {
			if (ss.isValue(tuple)) {
				$tab_CommandController.get_$log().debug('Adding a server response to the queue', []);
				this.deferredServerResponseQueue[sequenceID.toString()] = tuple;
			}
		},
		_getRenderMode: function CommandController$GetRenderMode() {
			return $tab_ApplicationModel.get_instance().get_renderMode();
		},
		$getStoryState: function CommandController$GetStoryState() {
			return new $tab_StoryState();
		},
		$raiseCommandQueueComplete: function CommandController$RaiseCommandQueueComplete() {
			if (!ss.staticEquals(this.$1$CommandQueueCompleteField, null)) {
				this.$1$CommandQueueCompleteField();
			}
		},
		$raiseUndoCommand: function CommandController$RaiseUndoCommand() {
			if (!ss.staticEquals(this.$1$UndoCommandField, null)) {
				this.$1$UndoCommandField();
			}
		},
		$raiseRedoCommand: function CommandController$RaiseRedoCommand() {
			if (!ss.staticEquals(this.$1$RedoCommandField, null)) {
				this.$1$RedoCommandField();
			}
		},
		raiseModelsUpdated: function CommandController$RaiseModelsUpdated() {
			if (!ss.staticEquals(this.$1$ModelsUpdatedField, null)) {
				this.$1$ModelsUpdatedField();
			}
		},
		$raiseRemoteCommandFailure: function CommandController$RaiseRemoteCommandFailure(e) {
			if (!ss.staticEquals(this.$1$RemoteCommandFailureField, null)) {
				this.$1$RemoteCommandFailureField(e);
			}
		},
		$scheduleAllZonesLoaded: function CommandController$ScheduleAllZonesLoaded() {
			if (this.$bootstrapComplete) {
				return;
			}
			var fireAllZonesEvent = function() {
				tabBootstrap.MetricsController.logMetricsEvent('ALLZNS'.toString(), 2);
				window.setTimeout(function() {
					$tab_ApplicationModel.get_instance().$requestRuntimeDataAndUpdateVM();
				}, 2500);
			};
			$tab_ImageTileTracker.callWhenImagesLoaded(function() {
				$tab_ModuleManager.registerModulesLoadedCallback(fireAllZonesEvent);
			});
		},
		$abortLoadForCommandIfAppropriate: function CommandController$AbortLoadForCommandIfAppropriate(cmd) {
			var commandName = cmd.get_commandName();
			if (ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'next-story-point' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'previous-story-point' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'set-active-story-point' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabsrv', cmd: 'ensure-layout-for-sheet' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabsrv', cmd: 'revert-workbook' }.cmd)) {
				this.$abortProgressiveLoad();
			}
		},
		$isWaitingOnCommands: function CommandController$IsWaitingOnCommands() {
			return ss.getKeyCount(this.deferredServerResponseQueue) > 0 || this.executingCommands.length > 0 || this.$waitingCommands.get_$count() > 0;
		},
		$resetAllContentReady: function CommandController$ResetAllContentReady() {
			this.$testHookOnlyAllContentReady = false;
		}
	});
	ss.initClass($tab_CommandControllerStoryTelemetry, $asm, {});
	ss.initClass($tab_CommandControllerTelemetry, $asm, {});
	ss.initClass($tab_CommandExecutionResult, $asm, {});
	ss.initEnum($tab_CommandInterceptorResult, $asm, { proceed: 0, stop: 1 });
	ss.initInterface($tab_ICommandModel, $asm, { get_commandType: null, get_name: null });
	ss.initClass($tab_UbertipButtonModel, $asm, {
		get_serializedCommand: function UbertipButtonModel$get_SerializedCommand() {
			return this.$2$SerializedCommandField;
		},
		set_serializedCommand: function UbertipButtonModel$set_SerializedCommand(value) {
			this.$2$SerializedCommandField = value;
		},
		get_isMenuButton: function UbertipButtonModel$get_IsMenuButton() {
			return ss.isValue(this.get_wrappedCommandItemPresModel()) && ss.isValue(this.get_wrappedCommandItemPresModel().get_commands());
		},
		get_asMenuButton: function UbertipButtonModel$get_AsMenuButton() {
			ss.Debug.assert(this.get_isMenuButton(), 'expecting IsMenuButton to be true when casting this to a button menu');
			return this;
		},
		get_isPlaceholder: function UbertipButtonModel$get_IsPlaceholder() {
			return this.$2$IsPlaceholderField;
		},
		set_isPlaceholder: function UbertipButtonModel$set_IsPlaceholder(value) {
			this.$2$IsPlaceholderField = value;
		},
		get_legacyCommandModel: function UbertipButtonModel$get_LegacyCommandModel() {
			return this.$2$LegacyCommandModelField;
		},
		set_legacyCommandModel: function UbertipButtonModel$set_LegacyCommandModel(value) {
			this.$2$LegacyCommandModelField = value;
		},
		get_status: null,
		get_commandType: null,
		get_name: null,
		get_description: null,
		get_imageRes: null,
		get_wrappedCommandItemPresModel: null
	}, $tab_Model, [$tab_ICommandModel]);
	ss.initClass($tab_CommandItemBasedUbertipButtonModel, $asm, {
		get_legacyCommandModel: function CommandItemBasedUbertipButtonModel$get_LegacyCommandModel() {
			var $t1 = new $tab_CommandModel();
			$t1.set_commandType(this.get_commandType());
			$t1.command = this.get_serializedCommand();
			$t1.set_name(this.get_name());
			$t1.description = this.get_description();
			$t1.imageRes = this.get_imageRes();
			$t1.status = this.get_status();
			return $t1;
		},
		set_legacyCommandModel: function CommandItemBasedUbertipButtonModel$set_LegacyCommandModel(value) {
			ss.Debug.assert(false, 'CommandItemBased UbertipButtonModel should never set CommandModel explicitly.');
		},
		get_status: function CommandItemBasedUbertipButtonModel$get_Status() {
			var state = this.get_wrappedCommandItemPresModel().get_enabled();
			return ((ss.isNullOrUndefined(state) || state) ? 'enabled' : 'disabled');
		},
		get_commandType: function CommandItemBasedUbertipButtonModel$get_CommandType() {
			if (ss.isNullOrUndefined(this.get_serializedCommand())) {
				return 99;
			}
			var serializedCommandType = $tab_CommandSerializer.getCommandType(this.get_serializedCommand());
			return (ss.isValue(serializedCommandType) ? ss.unbox(serializedCommandType) : 99);
		},
		get_name: function CommandItemBasedUbertipButtonModel$get_Name() {
			return this.get_wrappedCommandItemPresModel().get_name();
		},
		get_description: function CommandItemBasedUbertipButtonModel$get_Description() {
			return this.get_wrappedCommandItemPresModel().get_description();
		},
		get_imageRes: function CommandItemBasedUbertipButtonModel$get_ImageRes() {
			if (ss.isNullOrUndefined(this.get_wrappedCommandItemPresModel().get_iconRes())) {
				return null;
			}
			return ss.coalesce($tab_TabResources.lookupFullResourceAlias(this.get_wrappedCommandItemPresModel().get_iconRes()), null);
		},
		get_wrappedCommandItemPresModel: function CommandItemBasedUbertipButtonModel$get_WrappedCommandItemPresModel() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return $tab_CommandItemWrapper.create(this.pm);
		},
		update: function CommandItemBasedUbertipButtonModel$Update(commandItemPresModel, tupleId) {
			this.pm = commandItemPresModel;
			this.set_serializedCommand($tab_CommandSerializer.deserialize(this.get_wrappedCommandItemPresModel().get_command(), false));
			if (ss.isValue(this.get_serializedCommand()) && tupleId !== $tab_VizDataUtils.invalidTupleId && !ss.isValue(this.get_serializedCommand().commandParams['selectAtPoint'])) {
				this.get_serializedCommand().commandParams['tupleId'] = tupleId.toString();
			}
		}
	}, $tab_UbertipButtonModel, [$tab_ICommandModel]);
	ss.initClass($tab_CommandItemWrapper, $asm, {
		get_item: function CommandItemWrapper$get_Item() {
			return this.$item;
		},
		get_name: function CommandItemWrapper$get_Name() {
			return this.$item['name'.toString()];
		},
		set_name: function CommandItemWrapper$set_Name(value) {
			this.$item['name'.toString()] = value;
		},
		get_description: function CommandItemWrapper$get_Description() {
			return this.$item['description'.toString()];
		},
		set_description: function CommandItemWrapper$set_Description(value) {
			this.$item['description'.toString()] = value;
		},
		get_readId: function CommandItemWrapper$get_ReadId() {
			return this.$item['readId'.toString()];
		},
		set_readId: function CommandItemWrapper$set_ReadId(value) {
			this.$item['readId'.toString()] = value;
		},
		get_colorSwatch: function CommandItemWrapper$get_ColorSwatch() {
			return this.$item['colorSwatch'.toString()];
		},
		set_colorSwatch: function CommandItemWrapper$set_ColorSwatch(value) {
			this.$item['colorSwatch'.toString()] = value;
		},
		get_commandsType: function CommandItemWrapper$get_CommandsType() {
			return this.$item['commandsType'.toString()];
		},
		set_commandsType: function CommandItemWrapper$set_CommandsType(value) {
			this.$item['commandsType'.toString()] = value;
		},
		get_enabled: function CommandItemWrapper$get_Enabled() {
			var enabled = this.$item['state'.toString()];
			return ss.isNullOrUndefined(enabled) || enabled;
		},
		set_enabled: function CommandItemWrapper$set_Enabled(value) {
			this.$item['state'.toString()] = value;
		},
		get_isChecked: function CommandItemWrapper$get_IsChecked() {
			return this.$item['isChecked'.toString()];
		},
		set_isChecked: function CommandItemWrapper$set_IsChecked(value) {
			this.$item['isChecked'.toString()] = value;
		},
		get_isDefault: function CommandItemWrapper$get_IsDefault() {
			return this.$item['isDefault'.toString()];
		},
		set_isDefault: function CommandItemWrapper$set_IsDefault(value) {
			this.$item['isDefault'.toString()] = value;
		},
		get_isRadioOn: function CommandItemWrapper$get_IsRadioOn() {
			return this.$item['isRadioOn'.toString()];
		},
		set_isRadioOn: function CommandItemWrapper$set_IsRadioOn(value) {
			this.$item['isRadioOn'.toString()] = value;
		},
		get_isVisible: function CommandItemWrapper$get_IsVisible() {
			return ss.coalesce(this.$item['isVisible'.toString()], true);
		},
		set_isVisible: function CommandItemWrapper$set_IsVisible(value) {
			this.$item['isVisible'.toString()] = value;
		},
		get_commands: function CommandItemWrapper$get_Commands() {
			return this.$item['commands'.toString()];
		},
		set_commands: function CommandItemWrapper$set_Commands(value) {
			this.$item['commands'.toString()] = value;
		},
		get_command: function CommandItemWrapper$get_Command() {
			return this.$item['command'.toString()];
		},
		set_command: function CommandItemWrapper$set_Command(value) {
			this.$item['command'.toString()] = value;
		},
		get_argumentParams: function CommandItemWrapper$get_ArgumentParams() {
			return this.$item['argumentParams'.toString()];
		},
		set_argumentParams: function CommandItemWrapper$set_ArgumentParams(value) {
			this.$item['argumentParams'.toString()] = value;
		},
		get_commandName: function CommandItemWrapper$get_CommandName() {
			return (ss.isNullOrUndefined(this.get_command()) ? null : this.get_command().split(' ')[0]);
		},
		get_hasIcon: function CommandItemWrapper$get_HasIcon() {
			return !ss.isNullOrEmptyString(this.get_iconRes());
		},
		get_iconRes: function CommandItemWrapper$get_IconRes() {
			return this.$item['iconRes'.toString()];
		},
		set_iconRes: function CommandItemWrapper$set_IconRes(value) {
			this.$item['iconRes'.toString()] = value;
		},
		get_key: function CommandItemWrapper$get_Key() {
			return this.get_commandName();
		},
		execute: function CommandItemWrapper$Execute() {
			$tab_CommandController.SendCommand(new $tab_ClientCommand('immediately', null, $tab_CommandSerializer.deserialize(this.get_command(), false), null, null));
		},
		dispose: function CommandItemWrapper$Dispose() {
			tab.KeyboardShortcutManager.unregisterShortcut(this.get_commandName());
		}
	}, null, [ss.IDisposable, tab.IShortcutAction]);
	ss.initClass($tab_CommandLocalOptions, $asm, {});
	ss.initClass($tab_CommandModel, $asm, {
		get_commandType: function CommandModel$get_CommandType() {
			return this.$1$CommandTypeField;
		},
		set_commandType: function CommandModel$set_CommandType(value) {
			this.$1$CommandTypeField = value;
		},
		get_name: function CommandModel$get_Name() {
			return this.$1$NameField;
		},
		set_name: function CommandModel$set_Name(value) {
			this.$1$NameField = value;
		}
	}, null, [$tab_ICommandModel]);
	ss.initClass($tab_CommandModelBasedUbertipButtonModel, $asm, {
		get_status: function CommandModelBasedUbertipButtonModel$get_Status() {
			return this.get_legacyCommandModel().status;
		},
		get_commandType: function CommandModelBasedUbertipButtonModel$get_CommandType() {
			return this.get_legacyCommandModel().get_commandType();
		},
		get_name: function CommandModelBasedUbertipButtonModel$get_Name() {
			return this.get_legacyCommandModel().get_name();
		},
		get_description: function CommandModelBasedUbertipButtonModel$get_Description() {
			return this.get_legacyCommandModel().description;
		},
		get_imageRes: function CommandModelBasedUbertipButtonModel$get_ImageRes() {
			return this.get_legacyCommandModel().imageRes;
		},
		get_wrappedCommandItemPresModel: function CommandModelBasedUbertipButtonModel$get_WrappedCommandItemPresModel() {
			return null;
		},
		update: function CommandModelBasedUbertipButtonModel$Update(commandModel, isPlaceHolder) {
			this.pm = null;
			this.set_legacyCommandModel(commandModel);
			this.set_serializedCommand(this.get_legacyCommandModel().command);
			this.set_isPlaceholder(isPlaceHolder);
		}
	}, $tab_UbertipButtonModel, [$tab_ICommandModel]);
	ss.initClass($tab_CommandPermission, $asm, {
		test: function CommandPermission$Test(command) {
			tab.Param.verifyValue(command, 'command');
			if (ss.isNullOrUndefined(command.get_commandType())) {
				tab.Log.get(this).debug('Command type not defined for %s. Perhaps we need to add that command type?', [command.get_name()]);
			}
			return ss.isValue(command.get_commandType()) && command.get_commandType() !== 99 && ss.keyExists(this.$availableCommands, command.get_commandType()) && ss.referenceEquals(this.$availableCommands[command.get_commandType()], $tab_CommandPermission.$permissionGranted);
		}
	});
	ss.initClass($tab_CommandRedirectRegistry, $asm, {});
	ss.initClass($tab_CommandResponseEventArgs, $asm, {
		get_applicationPresModel: function CommandResponseEventArgs$get_ApplicationPresModel() {
			return this.$2$ApplicationPresModelField;
		},
		set_applicationPresModel: function CommandResponseEventArgs$set_ApplicationPresModel(value) {
			this.$2$ApplicationPresModelField = value;
		},
		get_worldUpdateCommand: function CommandResponseEventArgs$get_WorldUpdateCommand() {
			return this.$2$WorldUpdateCommandField;
		},
		set_worldUpdateCommand: function CommandResponseEventArgs$set_WorldUpdateCommand(value) {
			this.$2$WorldUpdateCommandField = value;
		},
		get_sheetChanged: function CommandResponseEventArgs$get_SheetChanged() {
			return this.$2$SheetChangedField;
		},
		set_sheetChanged: function CommandResponseEventArgs$set_SheetChanged(value) {
			this.$2$SheetChangedField = value;
		},
		get_rebuildTheWorld: function CommandResponseEventArgs$get_RebuildTheWorld() {
			return this.$2$RebuildTheWorldField;
		},
		set_rebuildTheWorld: function CommandResponseEventArgs$set_RebuildTheWorld(value) {
			this.$2$RebuildTheWorldField = value;
		}
	}, ss.EventArgs);
	ss.initClass($tab_CommandSerializer, $asm, {});
	ss.initClass($tab_CommandsModel, $asm, {
		add_commandsChanged: function CommandsModel$add_CommandsChanged(value) {
			this.$2$CommandsChangedField = ss.delegateCombine(this.$2$CommandsChangedField, value);
		},
		remove_commandsChanged: function CommandsModel$remove_CommandsChanged(value) {
			this.$2$CommandsChangedField = ss.delegateRemove(this.$2$CommandsChangedField, value);
		},
		get_shouldUpdate: function CommandsModel$get_ShouldUpdate() {
			return this.$shouldUpdate;
		},
		set_shouldUpdate: function CommandsModel$set_ShouldUpdate(value) {
			this.$shouldUpdate = value;
		},
		get_commands: function CommandsModel$get_Commands() {
			return this.pm;
		},
		update: function CommandsModel$Update(newCommands, context) {
			if (this.get_shouldUpdate()) {
				this.forceUpdate(newCommands, context);
			}
		},
		forceUpdate: function CommandsModel$ForceUpdate(newCommands, context) {
			this.simpleSwapToUpdate$1($tab_CommandsModel).call(this, newCommands, this.$2$CommandsChangedField, this, context);
		}
	}, $tab_Model);
	ss.initClass($tab_CommandsPresModelWrapper, $asm, {
		get_presModel: function CommandsPresModelWrapper$get_PresModel() {
			return this.$model;
		},
		get_commandItems: function CommandsPresModelWrapper$get_CommandItems() {
			return this.$model['commandItems'.toString()];
		},
		set_commandItems: function CommandsPresModelWrapper$set_CommandItems(value) {
			this.$model['commandItems'.toString()] = value;
		},
		get_defaultItem: function CommandsPresModelWrapper$get_DefaultItem() {
			return this.$model['defaultItem'.toString()];
		},
		set_defaultItem: function CommandsPresModelWrapper$set_DefaultItem(value) {
			this.$model['defaultItem'.toString()] = value;
		}
	});
	$tab_CommandsPresModelWrapper.$ctor1.prototype = $tab_CommandsPresModelWrapper.prototype;
	ss.initClass($tab_CommandThrottlerTarget, $asm, {});
	ss.initClass($tab_CommandUtils, $asm, {});
	ss.initClass($tab_CommentingServer, $asm, {
		sendRequest: function CommentingServer$SendRequest(request) {
			var deferred = { $: $.Deferred() };
			var requestParams = new $tab_WorkgroupServerRequest(request.method, request.params, ss.mkdel({ deferred: deferred, $this: this }, function(result) {
				this.$this.$resolveIfNoErrors(this.deferred, result);
			}), ss.mkdel({ deferred: deferred }, function(errorCode) {
				var errorResponse = {};
				errorResponse['errors'] = [ss.mkdict(['code', errorCode])];
				this.deferred.$.reject(errorResponse);
			}));
			var options = this.$createVizportalRequest(requestParams);
			$tab_XhrUtil.helper(options, null);
			return deferred.$;
		},
		$resolveIfNoErrors: function CommentingServer$ResolveIfNoErrors(deferred, resultFromServer) {
			if (ss.keyExists(resultFromServer, 'errors')) {
				deferred.$.reject(resultFromServer);
			}
			else {
				deferred.$.resolve(resultFromServer);
			}
		},
		sendVizqlRequest: function CommentingServer$SendVizqlRequest(request) {
			var deferred = { $: $.Deferred() };
			var onSuccess = ss.mkdel({ deferred: deferred, $this: this }, function(data, textStatus, xhr) {
				var resultJson = data;
				delete resultJson['msg'];
				delete resultJson['status'];
				this.$this.$resolveIfNoErrors(this.deferred, resultJson);
			});
			var onError = ss.mkdel({ deferred: deferred, $this: this }, function(xhr1, status, e) {
				tab.Log.get(this.$this).error(ss.formatString("Request to '{0}' failed with status '{1}'", request.method, xhr1.status), []);
				this.deferred.$.reject();
			});
			var requestParams = new $tab_VizqlSessionRequest(request.method, request.params, onSuccess, onError);
			this.$sendVizqlSessionRequest(requestParams);
			return deferred.$;
		},
		$sendVizqlSessionRequest: function CommentingServer$SendVizqlSessionRequest(request) {
			var args = {};
			args.type = 'POST';
			args.url = this.$baseSession.formatSessionMethod(request.methodName);
			args.headers = ss.mkdict(['Accept', 'text/javascript']);
			args.dataType = 'json';
			if (ss.isValue(request.methodParams)) {
				args.data = request.methodParams;
			}
			var handler = this.$baseSession.createHandler(null, request.success, request.error, 'immediately');
			this.$baseSession.request(args, handler);
		}
	}, null, [Object]);
	ss.initClass($tab_CompoundTableCalcModel, $asm, {
		add_compoundTableCalcUpdated: function CompoundTableCalcModel$add_CompoundTableCalcUpdated(value) {
			this.$2$CompoundTableCalcUpdatedField = ss.delegateCombine(this.$2$CompoundTableCalcUpdatedField, value);
		},
		remove_compoundTableCalcUpdated: function CompoundTableCalcModel$remove_CompoundTableCalcUpdated(value) {
			this.$2$CompoundTableCalcUpdatedField = ss.delegateRemove(this.$2$CompoundTableCalcUpdatedField, value);
		},
		get_notificationId: function CompoundTableCalcModel$get_NotificationId() {
			return 'doc:table-calc-dialog-event';
		},
		get_tableCalcsPresModel: function CompoundTableCalcModel$get_TableCalcsPresModel() {
			return this.pm;
		},
		get_hasTableCalc: function CompoundTableCalcModel$get_HasTableCalc() {
			return this.get_primaryTableCalc().get_hasTableCalc();
		},
		get_fieldCaption: function CompoundTableCalcModel$get_FieldCaption() {
			return this.get_tableCalcsPresModel().fieldCaption;
		},
		get_primaryTableCalc: function CompoundTableCalcModel$get_PrimaryTableCalc() {
			return this.$primaryTableCalcModel;
		},
		get_allowSecondaryTableCalc: function CompoundTableCalcModel$get_AllowSecondaryTableCalc() {
			return ss.isValue(this.get_tableCalcsPresModel()) && this.get_tableCalcsPresModel().isSecondaryAllowed;
		},
		get_hasSecondaryTableCalc: function CompoundTableCalcModel$get_HasSecondaryTableCalc() {
			return this.get_allowSecondaryTableCalc() && this.get_secondaryTableCalc().get_hasTableCalc();
		},
		get_secondaryTableCalc: function CompoundTableCalcModel$get_SecondaryTableCalc() {
			return this.$secondaryTableCalcModel;
		},
		get_isCalcAssistanceEnabled: function CompoundTableCalcModel$get_IsCalcAssistanceEnabled() {
			return (ss.isNullOrUndefined(this.get_tableCalcsPresModel()) ? true : this.get_tableCalcsPresModel().isCalcAssistanceEnabled);
		},
		get_calcAssistanceWidgetState: function CompoundTableCalcModel$get_CalcAssistanceWidgetState() {
			return (ss.isNullOrUndefined(this.get_tableCalcsPresModel()) ? 'widget-state-enabled' : this.get_tableCalcsPresModel().tableCalcAssistanceWidgetState);
		},
		onNotify: function CompoundTableCalcModel$OnNotify(pm, context) {
			if (this.isNewPresModelSameAsOld(pm)) {
				return;
			}
			var newCompoundPresModel = pm;
			this.$primaryTableCalcModel.update($tab_CompoundTableCalcModel.$getPresModelTableCalc(newCompoundPresModel, $tab_CompoundTableCalcModel.primaryTableCalcIndex), context);
			this.$secondaryTableCalcModel.update($tab_CompoundTableCalcModel.$getPresModelTableCalc(newCompoundPresModel, $tab_CompoundTableCalcModel.secondaryTableCalcIndex), context);
			this.swapAndCopyPresModel(newCompoundPresModel);
			this.raiseEvent(this.$2$CompoundTableCalcUpdatedField, context);
		}
	}, $tab_Model, [$tab_IHandleNotifications]);
	ss.initClass($tab_ConnectionClass, $asm, {});
	ss.initClass($tab_FontFamily, $asm, {
		get_fontGroup: function FontFamily$get_FontGroup() {
			return this.$1$FontGroupField;
		},
		set_fontGroup: function FontFamily$set_FontGroup(value) {
			this.$1$FontGroupField = value;
		},
		get_fonts: function FontFamily$get_Fonts() {
			return this.$1$FontsField;
		},
		set_fonts: function FontFamily$set_Fonts(value) {
			this.$1$FontsField = value;
		}
	});
	$tab_FontFamily.$ctor1.prototype = $tab_FontFamily.prototype;
	ss.initClass($tab_ConstructableFontFamily, $asm, {
		addFont: function ConstructableFontFamily$AddFont(fontName) {
			if (!_.any(this.get_fonts(), function(f) {
				return ss.compareStrings(f, fontName, true) === 0;
			})) {
				this.get_fonts().push(fontName);
				this.set_fonts(_.sortBy(this.get_fonts(), function(s) {
					return s.toLowerCase();
				}));
			}
		}
	}, $tab_FontFamily);
	ss.initClass($tab_CopyTempFileToSessionSpecificStorageCmd, $asm, {
		invoke: function CopyTempFileToSessionSpecificStorageCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'copy-temp-file-to-session-specific-storage' }, this.cmdParams));
		},
		validateInvokeParams: function CopyTempFileToSessionSpecificStorageCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fileName')) {
				throw new ss.Exception('missing param DocParams.FileName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CopyTempFileToSessionSpecificStorageCmd$Response]));
	ss.initClass($tab_CopyTempFileToSessionSpecificStorageCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'sessionStorageId')) {
				throw new ss.Exception('missing param DocParams.SessionStorageId');
			}
		}
	});
	ss.initClass($tab_CreateAndEstablishCloudConnectionCmd, $asm, {
		invoke: function CreateAndEstablishCloudConnectionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-and-establish-cloud-connection' }, this.cmdParams));
		},
		validateInvokeParams: function CreateAndEstablishCloudConnectionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dsClass')) {
				throw new ss.Exception('missing param DocParams.DSClass');
			}
			if (!ss.keyExists(this.cmdParams, 'widgetConnectionParams')) {
				throw new ss.Exception('missing param DocParams.ConnectionWidgetParams');
			}
			if (!ss.keyExists(this.cmdParams, 'bool')) {
				throw new ss.Exception('missing param DocParams.Bool');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateAndEstablishCloudConnectionCmd$Response]));
	ss.initClass($tab_CreateAndEstablishCloudConnectionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
		}
	});
	ss.initClass($tab_CreateAndEstablishConnectionCmd, $asm, {
		invoke: function CreateAndEstablishConnectionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-and-establish-connection' }, this.cmdParams));
		},
		validateInvokeParams: function CreateAndEstablishConnectionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dsClass')) {
				throw new ss.Exception('missing param DocParams.DSClass');
			}
			if (!ss.keyExists(this.cmdParams, 'widgetConnectionParams')) {
				throw new ss.Exception('missing param DocParams.ConnectionWidgetParams');
			}
			if (!ss.keyExists(this.cmdParams, 'bool')) {
				throw new ss.Exception('missing param DocParams.Bool');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateAndEstablishConnectionCmd$Response]));
	ss.initClass($tab_CreateAndEstablishConnectionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
		}
	});
	ss.initClass($tab_CreateAnnotationCmd, $asm, {
		invoke: function CreateAnnotationCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-annotation' }, this.cmdParams));
		},
		validateInvokeParams: function CreateAnnotationCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'annotateEnum')) {
				throw new ss.Exception('missing param DocParams.AnnotateEnum');
			}
			if (!ss.keyExists(this.cmdParams, 'targetPoint')) {
				throw new ss.Exception('missing param DocParams.TargetPt');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateAnnotationCmd$Response]));
	ss.initClass($tab_CreateAnnotationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_CreateAnnotationRichTextEditorCmd, $asm, {
		invoke: function CreateAnnotationRichTextEditorCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-annotation-rich-text-editor' }, this.cmdParams));
		},
		validateInvokeParams: function CreateAnnotationRichTextEditorCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'objectIds')) {
				throw new ss.Exception('missing param DocParams.ObjectIDs');
			}
			if (!ss.keyExists(this.cmdParams, 'richTextEditorConfiguration')) {
				throw new ss.Exception('missing param DocParams.RichTextEditorConfiguration');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateAnnotationRichTextEditorCmd$Response]));
	ss.initClass($tab_CreateAnnotationRichTextEditorCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_CreateDataSourceFromFileUploadCmd, $asm, {
		invoke: function CreateDataSourceFromFileUploadCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-data-source-from-file-upload' }, this.cmdParams));
		},
		validateInvokeParams: function CreateDataSourceFromFileUploadCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dsClasses')) {
				throw new ss.Exception('missing param DocParams.DSClasses');
			}
			if (!ss.keyExists(this.cmdParams, 'fileNames')) {
				throw new ss.Exception('missing param DocParams.FileNames');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateDataSourceFromFileUploadCmd$Response]));
	ss.initClass($tab_CreateDataSourceFromFileUploadCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dataSourceNames')) {
				throw new ss.Exception('missing param DocParams.DataSourceNames');
			}
			if (!ss.keyExists(this.$$cmdParams, 'fileNames')) {
				throw new ss.Exception('missing param DocParams.FileNames');
			}
			if (!ss.keyExists(this.$$cmdParams, 'dataSourcesWithEmptyRelation')) {
				throw new ss.Exception('missing param DocParams.DataSourcesWithEmptyRelation');
			}
			if (!ss.keyExists(this.$$cmdParams, 'dataSourceCreationErrors')) {
				throw new ss.Exception('missing param DocParams.DataSourceCreationErrors');
			}
		}
	});
	ss.initClass($tab_CreateWorksheetTitleRichTextEditorCmd, $asm, {
		invoke: function CreateWorksheetTitleRichTextEditorCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-worksheet-title-rich-text-editor' }, this.cmdParams));
		},
		validateInvokeParams: function CreateWorksheetTitleRichTextEditorCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'richTextEditorConfiguration')) {
				throw new ss.Exception('missing param DocParams.RichTextEditorConfiguration');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateWorksheetTitleRichTextEditorCmd$Response]));
	ss.initClass($tab_CreateWorksheetTitleRichTextEditorCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_CreateZoneRichTextEditorCmd, $asm, {
		invoke: function CreateZoneRichTextEditorCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-zone-rich-text-editor' }, this.cmdParams));
		},
		validateInvokeParams: function CreateZoneRichTextEditorCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'richTextEditorConfiguration')) {
				throw new ss.Exception('missing param DocParams.RichTextEditorConfiguration');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_CreateZoneRichTextEditorCmd$Response]));
	ss.initClass($tab_CreateZoneRichTextEditorCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_FieldModel, $asm, {
		get_instanceType: null,
		get_fieldsModel: function FieldModel$get_FieldsModel() {
			return ss.cast(this.parent, $tab_FieldsModel);
		},
		get_dataSourceName: function FieldModel$get_DataSourceName() {
			if (ss.isNullOrUndefined(this.get_dataSource())) {
				return '';
			}
			return this.get_dataSource().get_name();
		},
		get_canHaveChildren: function FieldModel$get_CanHaveChildren() {
			return false;
		},
		get_isParameter: function FieldModel$get_IsParameter() {
			return ss.isValue(this.get_dataSource()) && this.get_dataSource().get_isParametersDataSource();
		},
		get_isUnsortedContainer: function FieldModel$get_IsUnsortedContainer() {
			return false;
		},
		get_isSelectable: function FieldModel$get_IsSelectable() {
			return !this.get_isUnsortedContainer();
		},
		get_isDraggable: function FieldModel$get_IsDraggable() {
			return this.get_isSelectable() && !this.get_isHidden() && !this.get_isInvalid();
		},
		get_childToSelect: function FieldModel$get_ChildToSelect() {
			return (this.get_isUnsortedContainer() ? null : this);
		},
		get_isDerived: function FieldModel$get_IsDerived() {
			if (this.get_canHaveChildren()) {
				return false;
			}
			return this.get_isGenerated() || this.get_isAutoColumn() || this.get_isColumn() && this.asColumn().get_isInstance();
		},
		get_isMeasureNamesOrValues: function FieldModel$get_IsMeasureNamesOrValues() {
			return ss.referenceEquals(this.get_localName(), $tab_FieldModel.nameOfMeasuresColumn) || ss.referenceEquals(this.get_localName(), $tab_FieldModel.nameOfMeasureValuesColumn);
		},
		get_fieldCaptionForReset: function FieldModel$get_FieldCaptionForReset() {
			return this.pm.fieldCaptionForReset;
		},
		get_fieldIconResource: function FieldModel$get_FieldIconResource() {
			var iconString = this.pm.fieldIconRes || '';
			if (iconString.length === 0) {
				return iconString;
			}
			if (this.pm.isInvalid) {
				iconString += '-invalid';
			}
			return iconString;
		},
		get_isInstance: function FieldModel$get_IsInstance() {
			return !this.get_isGenerated() && this.get_isDerived();
		},
		get_isHidden: function FieldModel$get_IsHidden() {
			return this.pm.isHidden || this.get_isInstance();
		},
		get_isAutoHidden: function FieldModel$get_IsAutoHidden() {
			return this.pm.isAutoHidden;
		},
		get_isInvalid: function FieldModel$get_IsInvalid() {
			return this.pm.isInvalid;
		},
		get_isOrphaned: function FieldModel$get_IsOrphaned() {
			return this.pm.isOrphaned;
		},
		get_isGenerated: function FieldModel$get_IsGenerated() {
			return this.pm.isGenerated;
		},
		get_isAutoColumn: function FieldModel$get_IsAutoColumn() {
			return this.pm.isAutoColumn;
		},
		get_isAllowedInCalcs: function FieldModel$get_IsAllowedInCalcs() {
			return this.pm.isAllowedInCalcs;
		},
		get_isUnnamedCalc: function FieldModel$get_IsUnnamedCalc() {
			return this.pm.isUnnamed;
		},
		get_isQuickTableCalc: function FieldModel$get_IsQuickTableCalc() {
			return this.pm.isQuickTableCalc;
		},
		get_globalName: function FieldModel$get_GlobalName() {
			return this.pm.fn;
		},
		get_localName: function FieldModel$get_LocalName() {
			return this.pm.name;
		},
		get_qualifiedLocalName: function FieldModel$get_QualifiedLocalName() {
			return '[' + this.get_localName() + ']';
		},
		get_description: function FieldModel$get_Description() {
			return this.pm.description;
		},
		get_userCaption: function FieldModel$get_UserCaption() {
			return this.pm.userCaption;
		},
		get_ordinal: function FieldModel$get_Ordinal() {
			return this.pm.datasourceOrdinal;
		},
		get_isFieldContainer: function FieldModel$get_IsFieldContainer() {
			return this.get_instanceType() === 'fieldContainer';
		},
		get_isColumn: function FieldModel$get_IsColumn() {
			return this.get_instanceType() === 'column' || this.get_instanceType() === 'group' || this.get_instanceType() === 'structuredMeasure' || this.get_instanceType() === 'level';
		},
		get_isGroup: function FieldModel$get_IsGroup() {
			return this.get_instanceType() === 'group';
		},
		get_isCubeDimension: function FieldModel$get_IsCubeDimension() {
			return this.get_instanceType() === 'cubeDimension';
		},
		get_isDrillPath: function FieldModel$get_IsDrillPath() {
			return this.get_instanceType() === 'drillPath';
		},
		get_isCubeHierarchy: function FieldModel$get_IsCubeHierarchy() {
			return this.get_instanceType() === 'cubeHierarchy';
		},
		get_isCubeFolder: function FieldModel$get_IsCubeFolder() {
			return this.get_instanceType() === 'cubeFolder';
		},
		get_isFolder: function FieldModel$get_IsFolder() {
			var fieldPresModel = this.pm;
			if (ss.isNullOrUndefined(fieldPresModel)) {
				return false;
			}
			return fieldPresModel.schemaItemType === 'field-folder';
		},
		get_isFolderNew: function FieldModel$get_IsFolderNew() {
			return this.get_instanceType() === 'folderNew';
		},
		get_isObject: function FieldModel$get_IsObject() {
			var fieldPresModel = this.pm;
			if (ss.isNullOrUndefined(fieldPresModel)) {
				return false;
			}
			return fieldPresModel.schemaItemType === 'object';
		},
		get_isRelationalTable: function FieldModel$get_IsRelationalTable() {
			return this.get_instanceType() === 'relationalTable';
		},
		get_isStructuredMeasure: function FieldModel$get_IsStructuredMeasure() {
			return this.get_instanceType() === 'structuredMeasure';
		},
		get_isCubeBaseDimension: function FieldModel$get_IsCubeBaseDimension() {
			return this.get_instanceType() === 'cubeStandardDimension' || this.get_instanceType() === 'cubeAttributeDimension';
		},
		get_isCubeStandardDimension: function FieldModel$get_IsCubeStandardDimension() {
			return this.get_instanceType() === 'cubeStandardDimension';
		},
		get_isCubeAttributeDimension: function FieldModel$get_IsCubeAttributeDimension() {
			return this.get_instanceType() === 'cubeAttributeDimension';
		},
		get_isLevel: function FieldModel$get_IsLevel() {
			return this.get_instanceType() === 'level';
		},
		get_defaultRole: function FieldModel$get_DefaultRole() {
			return this.pm.defaultFieldRole;
		},
		get_role: function FieldModel$get_Role() {
			return this.pm.fieldRole;
		},
		get_defaultFieldType: function FieldModel$get_DefaultFieldType() {
			return (this.get_isColumn() ? this.pm.defaultFieldType : 'unknown');
		},
		get_fieldType: function FieldModel$get_FieldType() {
			return (this.get_isColumn() ? this.pm.fieldType : 'unknown');
		},
		get_displayName: function FieldModel$get_DisplayName() {
			return this.pm.fieldCaption;
		},
		get_tooltip: function FieldModel$get_Tooltip() {
			if (this.get_isInvalid()) {
				return this.pm.tooltipText;
			}
			else {
				return this.get_userCaption() || (this.get_description() || this.get_displayName());
			}
		},
		get_canBeUsedInCalculation: function FieldModel$get_CanBeUsedInCalculation() {
			return this.get_isAllowedInCalcs() || this.get_isUnnamedCalc() || this.get_isQuickTableCalc();
		},
		get_canBeAddedToDataSchema: function FieldModel$get_CanBeAddedToDataSchema() {
			return this.get_isUnnamedCalc() || this.get_isQuickTableCalc();
		},
		get_dataSource: function FieldModel$get_DataSource() {
			return (ss.isNullOrUndefined(this.get_fieldsModel()) ? null : this.get_fieldsModel().get_dataSource());
		},
		matchesFolderRole: function FieldModel$MatchesFolderRole(section) {
			if (this.get_isFolder()) {
				return this.asFolder().get_folderRole() === section;
			}
			else if (this.get_isFolderNew()) {
				return this.asFolderNew().get_folderRole() === section;
			}
			else {
				switch (section) {
					case 'dimensions': {
						return this.get_defaultRole() === 'dimension';
					}
					case 'measure': {
						return this.get_defaultRole() === 'measure';
					}
					case 'groups': {
						return this.get_isGroup();
					}
					case 'parameters': {
						return true;
					}
					default: {
						return false;
					}
				}
			}
		},
		asColumn: function FieldModel$AsColumn() {
			ss.Debug.assert(this.get_isColumn(), 'Field is not a FieldColumnModel');
			return ss.safeCast(this, $tab_FieldColumnModel);
		},
		asGroup: function FieldModel$AsGroup() {
			ss.Debug.assert(this.get_isGroup(), 'Field is not a GroupModel');
			return ss.safeCast(this, $tab_GroupModel);
		},
		asDimension: function FieldModel$AsDimension() {
			ss.Debug.assert(this.get_isCubeDimension(), 'Field is not a CubeDimensionModel');
			return ss.safeCast(this, $tab_CubeDimensionModel);
		},
		asHierarchy: function FieldModel$AsHierarchy() {
			ss.Debug.assert(this.get_isCubeHierarchy(), 'Field is not a CubeHierarchyModel');
			return ss.safeCast(this, $tab_CubeHierarchyModel);
		},
		asCubeFolder: function FieldModel$AsCubeFolder() {
			ss.Debug.assert(this.get_isCubeFolder(), 'Field is not a CubeFolderModel');
			return ss.safeCast(this, $tab_CubeFolderModel);
		},
		asFolder: function FieldModel$AsFolder() {
			ss.Debug.assert(this.get_isFolder(), 'Field is not a FolderModel');
			return ss.safeCast(this, $tab_FolderModel);
		},
		asFolderNew: function FieldModel$AsFolderNew() {
			ss.Debug.assert(this.get_isFolderNew(), 'Field is not a FolderNewModel');
			return ss.safeCast(this, $tab_FolderNewModel);
		},
		asDrillPath: function FieldModel$AsDrillPath() {
			ss.Debug.assert(this.get_isDrillPath(), 'Field is not a DrillPathModel');
			return ss.safeCast(this, $tab_DrillPathModel);
		},
		asRelationalTable: function FieldModel$AsRelationalTable() {
			ss.Debug.assert(this.get_isRelationalTable(), 'Field is not a RelationalTableModel');
			return ss.safeCast(this, $tab_RelationalTableModel);
		},
		asStructuredMeasure: function FieldModel$AsStructuredMeasure() {
			ss.Debug.assert(this.get_isStructuredMeasure(), 'Field is not a StructuredMeasureModel');
			return ss.safeCast(this, $tab_StructuredMeasureModel);
		},
		asCubeStandardDimension: function FieldModel$AsCubeStandardDimension() {
			ss.Debug.assert(this.get_isCubeStandardDimension(), 'Field is not a CubeStandardDimensionModel');
			return ss.safeCast(this, $tab_CubeStandardDimensionModel);
		},
		asCubeAttributeDimension: function FieldModel$AsCubeAttributeDimension() {
			ss.Debug.assert(this.get_isCubeAttributeDimension(), 'Field is not a CubeAttributeDimensionModel');
			return ss.safeCast(this, $tab_CubeAttributeDimensionModel);
		},
		asCubeBaseDimension: function FieldModel$AsCubeBaseDimension() {
			ss.Debug.assert(this.get_isCubeBaseDimension(), 'Field is not a CubeBaseDimensionModel');
			return ss.safeCast(this, $tab_CubeBaseDimensionModel);
		},
		asLevel: function FieldModel$AsLevel() {
			ss.Debug.assert(this.get_isLevel(), 'Field is not a LevelModel');
			return ss.safeCast(this, $tab_LevelModel);
		},
		asFieldContainer: function FieldModel$AsFieldContainer() {
			ss.Debug.assert(this.get_isFieldContainer(), 'Field is not a FieldContainerModel');
			return ss.safeCast(this, $tab_FieldContainerModel);
		}
	}, $tab_Model);
	ss.initClass($tab_CubeBaseDimensionModel, $asm, {
		get_instanceType: null,
		get_cubeHierarchies: function CubeBaseDimensionModel$get_CubeHierarchies() {
			return this.$3$CubeHierarchiesField;
		},
		set_cubeHierarchies: function CubeBaseDimensionModel$set_CubeHierarchies(value) {
			this.$3$CubeHierarchiesField = value;
		},
		get_cubeFolders: function CubeBaseDimensionModel$get_CubeFolders() {
			return this.$3$CubeFoldersField;
		},
		set_cubeFolders: function CubeBaseDimensionModel$set_CubeFolders(value) {
			this.$3$CubeFoldersField = value;
		},
		get_defaultCubeHierarchy: function CubeBaseDimensionModel$get_DefaultCubeHierarchy() {
			return this.$3$DefaultCubeHierarchyField;
		},
		set_defaultCubeHierarchy: function CubeBaseDimensionModel$set_DefaultCubeHierarchy(value) {
			this.$3$DefaultCubeHierarchyField = value;
		},
		get_dimensionType: function CubeBaseDimensionModel$get_DimensionType() {
			return this.pm.dimensionType;
		},
		get_defaultHierarchyName: function CubeBaseDimensionModel$get_DefaultHierarchyName() {
			return this.pm.defaultHierarchyName;
		},
		get_hasOnlyOneHierarchy: function CubeBaseDimensionModel$get_HasOnlyOneHierarchy() {
			return this.pm.hasOnlyOneHierarchy;
		},
		get_dimensionIsEffectivelyEmpty: function CubeBaseDimensionModel$get_DimensionIsEffectivelyEmpty() {
			return this.pm.dimensionIsEffectivelyEmpty;
		},
		get_timeIntelligenceColumn: function CubeBaseDimensionModel$get_TimeIntelligenceColumn() {
			return this.$3$TimeIntelligenceColumnField;
		},
		set_timeIntelligenceColumn: function CubeBaseDimensionModel$set_TimeIntelligenceColumn(value) {
			this.$3$TimeIntelligenceColumnField = value;
		},
		get_timeIntelligenceCaption: function CubeBaseDimensionModel$get_TimeIntelligenceCaption() {
			return this.pm.timeIntelligenceCaption;
		},
		get_isTimeIntelligence: function CubeBaseDimensionModel$get_IsTimeIntelligence() {
			return this.pm.isTimeIntelligence;
		},
		get_canHaveChildren: function CubeBaseDimensionModel$get_CanHaveChildren() {
			return true;
		},
		get_childToSelect: function CubeBaseDimensionModel$get_ChildToSelect() {
			var defaultHierarchyName = this.pm.defaultHierarchyName;
			if (!ss.isNullOrEmptyString(defaultHierarchyName) && ss.isValue(this.get_defaultCubeHierarchy())) {
				return this.get_defaultCubeHierarchy().get_levels()[0];
			}
			var hierarchyModels = [];
			var $t1 = this.get_cubeHierarchies();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var hierarchyModel = $t1[$t2];
				hierarchyModels.push(hierarchyModel);
			}
			var $t3 = this.get_cubeFolders();
			for (var $t4 = 0; $t4 < $t3.length; $t4++) {
				var folderModel = $t3[$t4];
				var $t5 = folderModel.get_hierarchies();
				for (var $t6 = 0; $t6 < $t5.length; $t6++) {
					var hierarchyModel1 = $t5[$t6];
					hierarchyModels.push(hierarchyModel1);
				}
			}
			hierarchyModels.sort(function(a, b) {
				if (a.get_levels().length > 1 && b.get_levels().length <= 1) {
					return -1;
				}
				else if (a.get_levels().length <= 1 && b.get_levels().length > 1) {
					return 1;
				}
				else {
					return 0;
				}
			});
			return ((hierarchyModels.length > 0) ? hierarchyModels[0].get_levels()[0] : null);
		},
		update: function CubeBaseDimensionModel$Update(pm, newCubeHierarchies, newCubeFolders, newDefaultCubeHierarchy, newTimeIntelligenceColumn) {
			this.swapAndCopyPresModel(pm);
			this.set_cubeHierarchies(newCubeHierarchies);
			this.set_cubeFolders(newCubeFolders);
			this.set_defaultCubeHierarchy(newDefaultCubeHierarchy);
			this.set_timeIntelligenceColumn(newTimeIntelligenceColumn);
		}
	}, $tab_FieldModel);
	ss.initClass($tab_CubeAttributeDimensionModel, $asm, {
		get_instanceType: function CubeAttributeDimensionModel$get_InstanceType() {
			return 'cubeAttributeDimension';
		},
		get_isLinked: function CubeAttributeDimensionModel$get_IsLinked() {
			return this.pm.isLinked;
		},
		update$1: function CubeAttributeDimensionModel$Update(pm, newCubeHierarchies, newCubeFolders, newDefaultCubeHierarchy, newTimeIntelligenceColumn) {
			this.swapAndCopyPresModel(pm);
			this.update(pm, newCubeHierarchies, newCubeFolders, newDefaultCubeHierarchy, newTimeIntelligenceColumn);
		}
	}, $tab_CubeBaseDimensionModel);
	ss.initClass($tab_CubeAttributeDimensionModelFactory, $asm, {});
	ss.initClass($tab_CubeDimensionModel, $asm, {
		get_hierarchies: function CubeDimensionModel$get_Hierarchies() {
			return this.$hierarchies;
		},
		get_childToSelect: function CubeDimensionModel$get_ChildToSelect() {
			var defaultHierarchyName = this.pm.defaultHierarchyName;
			if (!ss.isNullOrEmptyString(defaultHierarchyName)) {
				for (var $t1 = 0; $t1 < this.$hierarchies.length; $t1++) {
					var h = this.$hierarchies[$t1];
					if (ss.referenceEquals(h.get_localName(), defaultHierarchyName)) {
						return h.get_levels()[0];
					}
				}
			}
			var hierarchyModels = [];
			for (var $t2 = 0; $t2 < this.$hierarchies.length; $t2++) {
				var h1 = this.$hierarchies[$t2];
				hierarchyModels.push(h1);
			}
			var $t3 = this.get_folders();
			for (var $t4 = 0; $t4 < $t3.length; $t4++) {
				var f = $t3[$t4];
				var $t5 = f.get_hierarchies();
				for (var $t6 = 0; $t6 < $t5.length; $t6++) {
					var h2 = $t5[$t6];
					hierarchyModels.push(h2);
				}
			}
			hierarchyModels.sort(function(a, b) {
				if (a.get_levels().length > 1 && b.get_levels().length <= 1) {
					return -1;
				}
				else if (a.get_levels().length <= 1 && b.get_levels().length > 1) {
					return 1;
				}
				else {
					return 0;
				}
			});
			return ((hierarchyModels.length > 0) ? hierarchyModels[0].get_levels()[0] : null);
		},
		get_folders: function CubeDimensionModel$get_Folders() {
			return this.$3$FoldersField;
		},
		set_folders: function CubeDimensionModel$set_Folders(value) {
			this.$3$FoldersField = value;
		},
		get_attributes: function CubeDimensionModel$get_Attributes() {
			return this.$3$AttributesField;
		},
		set_attributes: function CubeDimensionModel$set_Attributes(value) {
			this.$3$AttributesField = value;
		},
		get_instanceType: function CubeDimensionModel$get_InstanceType() {
			return 'cubeDimension';
		},
		get_canHaveChildren: function CubeDimensionModel$get_CanHaveChildren() {
			return true;
		},
		update: function CubeDimensionModel$Update(pm, newHierarchies, newFolders, newAttributes) {
			this.swapAndCopyPresModel(pm);
			this.$hierarchies = newHierarchies;
			this.set_folders(newFolders);
			this.set_attributes(newAttributes);
		}
	}, $tab_FieldModel);
	ss.initClass($tab_CubeFolderModel, $asm, {
		get_hierarchies: function CubeFolderModel$get_Hierarchies() {
			return this.$hierarchies;
		},
		get_childToSelect: function CubeFolderModel$get_ChildToSelect() {
			return this.$hierarchies[0];
		},
		get_columns: function CubeFolderModel$get_Columns() {
			return this.$columns;
		},
		get_instanceType: function CubeFolderModel$get_InstanceType() {
			return 'cubeFolder';
		},
		get_canHaveChildren: function CubeFolderModel$get_CanHaveChildren() {
			return true;
		},
		get_isUnsortedContainer: function CubeFolderModel$get_IsUnsortedContainer() {
			return true;
		},
		update: function CubeFolderModel$Update(pm, newHierarchies, newColumns) {
			this.swapAndCopyPresModel(pm);
			this.$hierarchies = newHierarchies;
			this.$columns = newColumns;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_CubeFolderModelFactory, $asm, {});
	ss.initClass($tab_CubeHierarchyModel, $asm, {
		get_levels: function CubeHierarchyModel$get_Levels() {
			return this.$levels;
		},
		get_userDefinedAttributes: function CubeHierarchyModel$get_UserDefinedAttributes() {
			return this.$userDefinedAttributes;
		},
		get_childToSelect: function CubeHierarchyModel$get_ChildToSelect() {
			return this.$levels[0];
		},
		get_instanceType: function CubeHierarchyModel$get_InstanceType() {
			return 'cubeHierarchy';
		},
		get_canHaveChildren: function CubeHierarchyModel$get_CanHaveChildren() {
			return true;
		},
		get_isAttributeHierarchy: function CubeHierarchyModel$get_IsAttributeHierarchy() {
			return this.pm.isAttributeHierarchy;
		},
		update: function CubeHierarchyModel$Update(pm, newLevels, newUserDefinedAttributes) {
			this.swapAndCopyPresModel(pm);
			this.$levels = newLevels;
			this.$userDefinedAttributes = newUserDefinedAttributes;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_CubeHierarchyModelFactory, $asm, {});
	ss.initClass($tab_CubeStandardDimensionModel, $asm, {
		get_instanceType: function CubeStandardDimensionModel$get_InstanceType() {
			return 'cubeStandardDimension';
		},
		get_cubeAttributeDimensions: function CubeStandardDimensionModel$get_CubeAttributeDimensions() {
			return this.$4$CubeAttributeDimensionsField;
		},
		set_cubeAttributeDimensions: function CubeStandardDimensionModel$set_CubeAttributeDimensions(value) {
			this.$4$CubeAttributeDimensionsField = value;
		},
		update$1: function CubeStandardDimensionModel$Update(pm, newCubeHierarchies, newCubeFolders, newCubeAttributeDimensions, newDefaultCubeHierarchy, newTimeIntelligenceColumn) {
			this.swapAndCopyPresModel(pm);
			this.set_cubeAttributeDimensions(newCubeAttributeDimensions);
			this.update(pm, newCubeHierarchies, newCubeFolders, newDefaultCubeHierarchy, newTimeIntelligenceColumn);
		}
	}, $tab_CubeBaseDimensionModel);
	ss.initClass($tab_CubeStandardDimensionModelFactory, $asm, {});
	ss.initClass($tab_TypeSpecificTableCalcModel, $asm, {
		get_tableCalcIdentifier: function TypeSpecificTableCalcModel$get_TableCalcIdentifier() {
			var tableCalcModelParent = this.parent;
			return (ss.isNullOrUndefined(tableCalcModelParent) ? new $tab_TableCalcIdentifierModel(null) : tableCalcModelParent.get_tableCalcIdentifier());
		},
		update: null
	}, $tab_Model);
	ss.initClass($tab_CumulativeTableCalcModel, $asm, {
		add_modelUpdated: function CumulativeTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function CumulativeTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$cumulativePresModel: function CumulativeTableCalcModel$get_CumulativePresModel() {
			return this.pm;
		},
		get_aggregationIndex: function CumulativeTableCalcModel$get_AggregationIndex() {
			return this.get_$cumulativePresModel().aggregationIndex;
		},
		get_aggregationValues: function CumulativeTableCalcModel$get_AggregationValues() {
			return this.get_$cumulativePresModel().aggregationValues;
		},
		get_aggregationCaptions: function CumulativeTableCalcModel$get_AggregationCaptions() {
			return this.get_$cumulativePresModel().aggregationCaptions;
		},
		get_hasAggregation: function CumulativeTableCalcModel$get_HasAggregation() {
			return ss.isValue(this.get_aggregationValues()) && this.get_aggregationValues().length > 0;
		},
		update: function CumulativeTableCalcModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_CustomizedViewRequests, $asm, {});
	ss.initClass($tab_CustomTableCalcModel, $asm, {
		add_modelUpdated: function CustomTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function CustomTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$customPresModel: function CustomTableCalcModel$get_CustomPresModel() {
			return this.pm;
		},
		get_referenceModel: function CustomTableCalcModel$get_ReferenceModel() {
			return this.$3$ReferenceModelField;
		},
		set_referenceModel: function CustomTableCalcModel$set_ReferenceModel(value) {
			this.$3$ReferenceModelField = value;
		},
		get_nullIfIncomplete: function CustomTableCalcModel$get_NullIfIncomplete() {
			return this.get_$customPresModel().nullIfIncomplete;
		},
		get_nullIfIncompleteState: function CustomTableCalcModel$get_NullIfIncompleteState() {
			return this.get_$customPresModel().customNullIfIncompleteState;
		},
		get_allPages: function CustomTableCalcModel$get_AllPages() {
			return this.get_$customPresModel().includeAllPages;
		},
		get_allPagesState: function CustomTableCalcModel$get_AllPagesState() {
			return this.get_$customPresModel().allPagesState;
		},
		get_nestedCalcsWidgetState: function CustomTableCalcModel$get_NestedCalcsWidgetState() {
			return this.get_$customPresModel().nestedCalcsState;
		},
		get_nestedCalcsIndex: function CustomTableCalcModel$get_NestedCalcsIndex() {
			return this.get_$customPresModel().nestedCalcsIndex;
		},
		get_nestedTableCalcInfoArray: function CustomTableCalcModel$get_NestedTableCalcInfoArray() {
			return this.get_$customPresModel().nestedTableCalcInfos;
		},
		update: function CustomTableCalcModel$Update(newPresModel, context) {
			var newCustomPresModel = newPresModel;
			if (this.isNewPresModelSameAsOld(newCustomPresModel)) {
				return;
			}
			this.swapAndCopyPresModel(newCustomPresModel);
			this.get_referenceModel().update(newCustomPresModel.tableCalcReferenceOptionsPresModel, context);
			this.raiseEvent(this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_PluginPresentationLayer, $asm, {
		invokeCommand: function PluginPresentationLayer$InvokeCommand(commandNamespace, commandName, parameters) {
			var commandId = { ns: commandNamespace, cmd: commandName };
			if ($tab_WebCommandRegistry.get_instance().hasCommand(commandId)) {
				var command = $tab_WebCommandRegistry.get_instance().createCommandWithParams(commandId, parameters);
				return command.invoke();
			}
			else {
				var deferred = $.Deferred();
				var successHandler = function(pm) {
					deferred.resolve(pm);
				};
				var failureHandler = function(e) {
					deferred.reject(e);
				};
				var cmd = { commandName: commandName, commandNamespace: commandNamespace, commandParams: parameters, preserveRootResult: true };
				var localWork = null;
				var blocking = this.getUIBlockingType(commandNamespace, commandName);
				var suppressConnectionDialog = false;
				if ($tab_WebCommandRegistry.get_instance().hasCommandLocalOptions(commandId)) {
					var localOptions = $tab_WebCommandRegistry.get_instance().getCommandLocalOptions(commandId);
					if (!ss.staticEquals(localOptions.localWorkFactory, null)) {
						localWork = localOptions.localWorkFactory(parameters);
					}
					if (ss.isValue(localOptions.blocking)) {
						blocking = ss.unbox(localOptions.blocking);
					}
					suppressConnectionDialog = localOptions.suppressConnectionDialog;
				}
				var $t1 = new $tab_ClientCommand(blocking, localWork, cmd, successHandler, failureHandler);
				$t1.set_useGlobalConnectionErrorHandling(!suppressConnectionDialog);
				var clientCommand = $t1;
				$tab_CommandController.SendCommand(clientCommand);
				return deferred.promise();
			}
		},
		dispose: function PluginPresentationLayer$Dispose() {
			this.$disposables.dispose();
		},
		registerNotificationHandler: function PluginPresentationLayer$RegisterNotificationHandler(eventId, handler) {
			var appModel = $tab_ApplicationModel.get_instance();
			var unregisterHandle = appModel.registerNotificationHandler(eventId, function(model, context) {
				handler(model);
			});
			var disposable = function() {
				appModel.unRegisterNotificationHandler(eventId, unregisterHandle);
			};
			this.$disposables.add(disposable);
			return disposable;
		},
		getUIBlockingType: function PluginPresentationLayer$GetUIBlockingType(commandNameSpace, commandName) {
			return 'immediately';
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_CustomUIBlockingPluginPresentationLayer, $asm, {
		getUIBlockingType: function CustomUIBlockingPluginPresentationLayer$GetUIBlockingType(commandNameSpace, commandName) {
			var command = commandNameSpace + ':' + commandName;
			return (ss.contains(this.$nonBlockingCommands, command) ? 'none' : 'immediately');
		}
	}, $tab_PluginPresentationLayer, [ss.IDisposable]);
	ss.initClass($tab_DashboardButtonClientCommands, $asm, {});
	ss.initClass($tab_DashboardClientCommands, $asm, {});
	ss.initInterface($tab_IDetachableNotificationHandler, $asm, { add_stopNotifying: null, remove_stopNotifying: null }, [$tab_IHandleNotifications]);
	ss.initClass($tab_DashboardGridDialogModel, $asm, {
		add_stopNotifying: function DashboardGridDialogModel$add_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateCombine(this.$2$StopNotifyingField, value);
		},
		remove_stopNotifying: function DashboardGridDialogModel$remove_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateRemove(this.$2$StopNotifyingField, value);
		},
		add_updateGridDialogInfo: function DashboardGridDialogModel$add_UpdateGridDialogInfo(value) {
			this.$2$UpdateGridDialogInfoField = ss.delegateCombine(this.$2$UpdateGridDialogInfoField, value);
		},
		remove_updateGridDialogInfo: function DashboardGridDialogModel$remove_UpdateGridDialogInfo(value) {
			this.$2$UpdateGridDialogInfoField = ss.delegateRemove(this.$2$UpdateGridDialogInfoField, value);
		},
		get_notificationId: function DashboardGridDialogModel$get_NotificationId() {
			return 'doc:dashboard-grid-dialog-event';
		},
		get_dashboardGridDialogPresModel: function DashboardGridDialogModel$get_DashboardGridDialogPresModel() {
			return this.pm;
		},
		get_gridSize: function DashboardGridDialogModel$get_GridSize() {
			return this.get_dashboardGridDialogPresModel().dashboardGridSize;
		},
		onNotify: function DashboardGridDialogModel$OnNotify(pm, context) {
			this.simpleSwapToUpdate(pm, this.$2$UpdateGridDialogInfoField, context);
		},
		detachNotifications: function DashboardGridDialogModel$DetachNotifications() {
			this.pm = null;
			if (!ss.staticEquals(this.$2$StopNotifyingField, null)) {
				this.$2$StopNotifyingField();
			}
		},
		update: function DashboardGridDialogModel$Update(newPresModel, context) {
			this.swapAndCopyPresModel(newPresModel);
			this.raiseEvent(this.$2$UpdateGridDialogInfoField, context);
		}
	}, $tab_Model, [$tab_IHandleNotifications, $tab_IDetachableNotificationHandler]);
	ss.initClass($tab_DashboardModel, $asm, {
		add_newDashboard: function DashboardModel$add_NewDashboard(value) {
			this.$2$NewDashboardField = ss.delegateCombine(this.$2$NewDashboardField, value);
		},
		remove_newDashboard: function DashboardModel$remove_NewDashboard(value) {
			this.$2$NewDashboardField = ss.delegateRemove(this.$2$NewDashboardField, value);
		},
		add_activeZoneChanged: function DashboardModel$add_ActiveZoneChanged(value) {
			this.$2$ActiveZoneChangedField = ss.delegateCombine(this.$2$ActiveZoneChangedField, value);
		},
		remove_activeZoneChanged: function DashboardModel$remove_ActiveZoneChanged(value) {
			this.$2$ActiveZoneChangedField = ss.delegateRemove(this.$2$ActiveZoneChangedField, value);
		},
		add_activeZoneNameChanged: function DashboardModel$add_ActiveZoneNameChanged(value) {
			this.$2$ActiveZoneNameChangedField = ss.delegateCombine(this.$2$ActiveZoneNameChangedField, value);
		},
		remove_activeZoneNameChanged: function DashboardModel$remove_ActiveZoneNameChanged(value) {
			this.$2$ActiveZoneNameChangedField = ss.delegateRemove(this.$2$ActiveZoneNameChangedField, value);
		},
		add_gridOverlayModeChanged: function DashboardModel$add_GridOverlayModeChanged(value) {
			this.$2$GridOverlayModeChangedField = ss.delegateCombine(this.$2$GridOverlayModeChangedField, value);
		},
		remove_gridOverlayModeChanged: function DashboardModel$remove_GridOverlayModeChanged(value) {
			this.$2$GridOverlayModeChangedField = ss.delegateRemove(this.$2$GridOverlayModeChangedField, value);
		},
		add_gridSizeChanged: function DashboardModel$add_GridSizeChanged(value) {
			this.$2$GridSizeChangedField = ss.delegateCombine(this.$2$GridSizeChangedField, value);
		},
		remove_gridSizeChanged: function DashboardModel$remove_GridSizeChanged(value) {
			this.$2$GridSizeChangedField = ss.delegateRemove(this.$2$GridSizeChangedField, value);
		},
		add_readyZoneChanged: function DashboardModel$add_ReadyZoneChanged(value) {
			this.$2$ReadyZoneChangedField = ss.delegateCombine(this.$2$ReadyZoneChangedField, value);
		},
		remove_readyZoneChanged: function DashboardModel$remove_ReadyZoneChanged(value) {
			this.$2$ReadyZoneChangedField = ss.delegateRemove(this.$2$ReadyZoneChangedField, value);
		},
		add_renderModeChanged: function DashboardModel$add_RenderModeChanged(value) {
			this.$2$RenderModeChangedField = ss.delegateCombine(this.$2$RenderModeChangedField, value);
		},
		remove_renderModeChanged: function DashboardModel$remove_RenderModeChanged(value) {
			this.$2$RenderModeChangedField = ss.delegateRemove(this.$2$RenderModeChangedField, value);
		},
		add_sizeChanged: function DashboardModel$add_SizeChanged(value) {
			this.$2$SizeChangedField = ss.delegateCombine(this.$2$SizeChangedField, value);
		},
		remove_sizeChanged: function DashboardModel$remove_SizeChanged(value) {
			this.$2$SizeChangedField = ss.delegateRemove(this.$2$SizeChangedField, value);
		},
		add_formatsChanged: function DashboardModel$add_FormatsChanged(value) {
			this.$2$FormatsChangedField = ss.delegateCombine(this.$2$FormatsChangedField, value);
		},
		remove_formatsChanged: function DashboardModel$remove_FormatsChanged(value) {
			this.$2$FormatsChangedField = ss.delegateRemove(this.$2$FormatsChangedField, value);
		},
		add_titleVisibilityChanged: function DashboardModel$add_TitleVisibilityChanged(value) {
			this.$2$TitleVisibilityChangedField = ss.delegateCombine(this.$2$TitleVisibilityChangedField, value);
		},
		remove_titleVisibilityChanged: function DashboardModel$remove_TitleVisibilityChanged(value) {
			this.$2$TitleVisibilityChangedField = ss.delegateRemove(this.$2$TitleVisibilityChangedField, value);
		},
		add_currentDeviceLayoutChanged: function DashboardModel$add_CurrentDeviceLayoutChanged(value) {
			this.$2$CurrentDeviceLayoutChangedField = ss.delegateCombine(this.$2$CurrentDeviceLayoutChangedField, value);
		},
		remove_currentDeviceLayoutChanged: function DashboardModel$remove_CurrentDeviceLayoutChanged(value) {
			this.$2$CurrentDeviceLayoutChangedField = ss.delegateRemove(this.$2$CurrentDeviceLayoutChangedField, value);
		},
		add_currentDeviceLayoutListChanged: function DashboardModel$add_CurrentDeviceLayoutListChanged(value) {
			this.$2$CurrentDeviceLayoutListChangedField = ss.delegateCombine(this.$2$CurrentDeviceLayoutListChangedField, value);
		},
		remove_currentDeviceLayoutListChanged: function DashboardModel$remove_CurrentDeviceLayoutListChanged(value) {
			this.$2$CurrentDeviceLayoutListChangedField = ss.delegateRemove(this.$2$CurrentDeviceLayoutListChangedField, value);
		},
		add_dashboardNameChanged: function DashboardModel$add_DashboardNameChanged(value) {
			this.$2$DashboardNameChangedField = ss.delegateCombine(this.$2$DashboardNameChangedField, value);
		},
		remove_dashboardNameChanged: function DashboardModel$remove_DashboardNameChanged(value) {
			this.$2$DashboardNameChangedField = ss.delegateRemove(this.$2$DashboardNameChangedField, value);
		},
		get_zoneModels: function DashboardModel$get_ZoneModels() {
			return this.zonesModel.get_zoneModels();
		},
		get_contentDashboard: function DashboardModel$get_ContentDashboard() {
			if (ss.isValue(this.pm) && this.pm.isStory) {
				this.$storyContentDashboard = this.$storyContentDashboard || this.$findStoryContentDashboard();
				return this.$storyContentDashboard;
			}
			return this;
		},
		get_actionPresModels: function DashboardModel$get_ActionPresModels() {
			if (ss.isValue(this.pm)) {
				return this.pm.userActions;
			}
			return null;
		},
		get_storyboardName: function DashboardModel$get_StoryboardName() {
			if (ss.isNullOrUndefined(this.pm)) {
				return new Object();
			}
			return this.pm.sheetPath.storyboard;
		},
		get_backgroundColor: function DashboardModel$get_BackgroundColor() {
			if (ss.isValue(this.pm) && ss.isValue(this.pm.cssAttrs)) {
				return this.pm.cssAttrs['backgroundColor'];
			}
			return null;
		},
		get_zonePlaceholderColor: function DashboardModel$get_ZonePlaceholderColor() {
			var $t1 = this.$zonePlaceholderColor;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.$computeZonePlaceholderColor();
			}
			this.$zonePlaceholderColor = $t1;
			return this.$zonePlaceholderColor;
		},
		get_gridMode: function DashboardModel$get_GridMode() {
			if (ss.isValue(this.pm)) {
				return this.pm.gridOverlayMode;
			}
			return 'gom-off';
		},
		get_gridSize: function DashboardModel$get_GridSize() {
			if (ss.isValue(this.pm)) {
				return this.pm.size;
			}
			return $tab_DashboardModel.defaultGridSize;
		},
		get_sheetName: function DashboardModel$get_SheetName() {
			if (ss.isValue(this.pm) && ss.isValue(this.pm.sheetLayoutInfo)) {
				return this.pm.sheetLayoutInfo.sheetName;
			}
			return null;
		},
		get_sheetPath: function DashboardModel$get_SheetPath() {
			if (ss.isValue(this.pm)) {
				return this.pm.sheetPath;
			}
			return null;
		},
		get_worksheetsOnDashboard: function DashboardModel$get_WorksheetsOnDashboard() {
			var sheetSet = {};
			var $t1 = this.get_zoneModels();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zone = $t1[$t2];
				if (zone.get_zoneType() === 'viz') {
					sheetSet[zone.get_worksheetName()] = true;
				}
			}
			return ss.arrayFromEnumerable(Object.keys(sheetSet));
		},
		get_invalidSheets: function DashboardModel$get_InvalidSheets() {
			if (ss.isValue(this.pm)) {
				return this.pm.invalidSheets;
			}
			return [];
		},
		get_activeZoneIDs: function DashboardModel$get_ActiveZoneIDs() {
			var isAuthoringDevice = tsConfig.is_authoring && this.get_currentDeviceLayout() !== 'default';
			if (ss.isValue(this.pm) && !isAuthoringDevice) {
				if (ss.isValue(this.pm.activeZoneIds)) {
					return this.pm.activeZoneIds;
				}
			}
			return [];
		},
		get_activeZoneID: function DashboardModel$get_ActiveZoneID() {
			var isAuthoringDevice = tsConfig.is_authoring && this.get_currentDeviceLayout() !== 'default';
			if (ss.isValue(this.pm) && !isAuthoringDevice) {
				if (!tab.FeatureFlags.isEnabled('MultiSelect')) {
					return this.pm.activeZoneId;
				}
				else if (this.pm.activeZoneIds.length === 1) {
					return this.pm.activeZoneIds[0];
				}
			}
			return 0;
		},
		get_readyZoneID: function DashboardModel$get_ReadyZoneID() {
			return this.$readyZoneId;
		},
		set_readyZoneID: function DashboardModel$set_ReadyZoneID(value) {
			if (value === this.$readyZoneId) {
				return;
			}
			this.$readyZoneId = value;
			if (!ss.staticEquals(this.$2$ReadyZoneChangedField, null)) {
				this.$2$ReadyZoneChangedField();
			}
		},
		get_hasActiveZone: function DashboardModel$get_HasActiveZone() {
			if (this.get_activeZoneID() !== 0) {
				return true;
			}
			return false;
		},
		get_activeVisual: function DashboardModel$get_ActiveVisual() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			if (this.get_activeZoneID() > 0) {
				var $t1 = this.get_zoneModels();
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var zone = $t1[$t2];
					if (zone.get_zoneId() === this.get_activeZoneID()) {
						return zone.get_visualModel();
					}
				}
			}
			return null;
		},
		get_renderMode: function DashboardModel$get_RenderMode() {
			return $tab_ApplicationModel.get_instance().get_renderMode();
		},
		get_formats: function DashboardModel$get_Formats() {
			if (ss.isValue(this.pm)) {
				return this.pm.cssAttrs;
			}
			return null;
		},
		get_dashboardSize: function DashboardModel$get_DashboardSize() {
			return (ss.isValue(this.pm) ? this.pm.viewportSize : null);
		},
		get_dashboardSizeControlModel: function DashboardModel$get_DashboardSizeControlModel() {
			return this.$dashboardSizeControlModel;
		},
		get_isDashboard: function DashboardModel$get_IsDashboard() {
			if (ss.isValue(this.pm) && ss.isValue(this.pm.sheetPath)) {
				return this.pm.sheetPath.isDashboard;
			}
			return false;
		},
		get_isFlexibleLayoutEnabled: function DashboardModel$get_IsFlexibleLayoutEnabled() {
			if (ss.isValue(this.pm) && ss.isValue(this.pm.isFlexibleLayout)) {
				return this.pm.isFlexibleLayout;
			}
			return false;
		},
		get_flipboard: function DashboardModel$get_Flipboard() {
			var model = _.find(this.get_zoneModels(), function(z) {
				return z.get_zoneType() === 'flipboard';
			});
			return (ss.isNullOrUndefined(model) ? null : ss.cast(model.get_model(), $tab_FlipboardModel));
		},
		get_autoGeneratedDeviceLayouts: function DashboardModel$get_AutoGeneratedDeviceLayouts() {
			if (ss.isNullOrUndefined(this.pm)) {
				return [];
			}
			return this.pm.autogeneratedDeviceLayouts;
		},
		get_deviceLayouts: function DashboardModel$get_DeviceLayouts() {
			if (ss.isNullOrUndefined(this.pm)) {
				return [];
			}
			return this.pm.dashboardDeviceLayouts;
		},
		get_currentDeviceLayout: function DashboardModel$get_CurrentDeviceLayout() {
			if (ss.isNullOrUndefined(this.pm) || typeof(this.pm.dashboardDeviceLayout) === 'undefined') {
				return 'default';
			}
			return this.pm.dashboardDeviceLayout;
		},
		get_isTitleVisible: function DashboardModel$get_IsTitleVisible() {
			if (ss.isNullOrUndefined(this.pm)) {
				return false;
			}
			return this.pm.hasTitle;
		},
		get_flipboardNavModel: function DashboardModel$get_FlipboardNavModel() {
			var $t1 = this.get_zoneModels();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zone = $t1[$t2];
				if (zone.get_zoneType() === 'flipboard-nav') {
					return zone.get_model();
				}
			}
			return null;
		},
		get_hasDescription: function DashboardModel$get_HasDescription() {
			if (ss.isNullOrUndefined(this.get_flipboard())) {
				return false;
			}
			var dashboardTextObj = _.filter(this.get_zoneModels(), function(zm) {
				return ss.equalsT(zm.get_contentType(), 'dashboardText'.toString());
			});
			return ss.isValue(dashboardTextObj) && dashboardTextObj.length > 0;
		},
		getViewId: function DashboardModel$GetViewId(sheetName) {
			if (!ss.keyExists(this.pm.viewIds, sheetName)) {
				tab.Log.get(this).warn('Specified sheet does not exist. Returning null.', []);
				return null;
			}
			return this.pm.viewIds[sheetName];
		},
		getViewSession: function DashboardModel$GetViewSession(sheetName) {
			ss.Debug.assert(ss.keyExists(this.$viewSessions, sheetName), 'ViewSession not found');
			return this.$viewSessions[sheetName];
		},
		getZone: function DashboardModel$GetZone(zoneId) {
			return this.zonesModel.getZone(zoneId);
		},
		hasZone: function DashboardModel$HasZone(zoneId) {
			return this.zonesModel.hasZone(zoneId);
		},
		isValidSheet: function DashboardModel$IsValidSheet(zone) {
			return ss.isValue(this.pm.invalidSheets) && (zone.get_zoneCommonModel().get_zoneType() !== 'viz' || !_.any(this.pm.invalidSheets, function(invalidSheet) {
				return ss.referenceEquals(invalidSheet.worksheet, zone.get_worksheetName());
			}));
		},
		isStory: function DashboardModel$IsStory() {
			return this.pm.isStory;
		},
		getMutableCopyOfPresModel: function DashboardModel$GetMutableCopyOfPresModel() {
			var zones = this.pm.zones;
			delete this.pm['zones'.toString()];
			var copy = $tab_Model.prototype.getMutableCopyOfPresModel.call(this);
			copy.dashboardDeviceLayouts = this.pm.dashboardDeviceLayouts;
			copy.activeZoneIds = this.pm.activeZoneIds;
			this.pm.zones = zones;
			return copy;
		},
		update: function DashboardModel$Update(dashboardPresModel, context) {
			if (ss.isValue(this.$oldRenderMode) && this.$oldRenderMode !== this.get_renderMode()) {
				tab.Log.get(this).debug('Render mode changed to: %s', [this.get_renderMode()]);
				this.raiseEvent(this.$2$RenderModeChangedField, context);
			}
			this.$oldRenderMode = this.get_renderMode();
			this.$setDefaultForNonSerialized(dashboardPresModel);
			this.$storyContentDashboard = null;
			if (ss.isValue(dashboardPresModel.zones)) {
				this.zonesModel.update(dashboardPresModel.zones, context);
				if (!this.zonesModel.hasZone(this.get_readyZoneID())) {
					this.set_readyZoneID(0);
				}
			}
			if (ss.isValue(dashboardPresModel.hasSelection)) {
				tab.Log.get(this).debug('HasSelection: ' + dashboardPresModel.hasSelection, []);
			}
			if (ss.isValue(dashboardPresModel.autoUpdate)) {
				this.autoUpdate = dashboardPresModel.autoUpdate;
			}
			this.$updateViewSessions(dashboardPresModel, context.dialogProvider);
			if (!(typeof(dashboardPresModel.modifiedSheets) === 'undefined') && (ss.isNullOrUndefined(this.pm) || !_.isEqual(dashboardPresModel.modifiedSheets, this.pm.modifiedSheets))) {
				this.raiseEvent($tab_DashboardModel.$fireModifiedSheetsChanged, context);
			}
			if (ss.isValue(dashboardPresModel.sheetList)) {
				if (ss.isNullOrUndefined(this.sheetListModel)) {
					this.sheetListModel = new $tab_SheetListModel(this);
				}
				this.sheetListModel.update(dashboardPresModel.sheetList, context);
			}
			if (ss.isValue(dashboardPresModel.dashboardZoneHierarchy)) {
				if (ss.isNullOrUndefined(this.layoutTreeModel)) {
					this.layoutTreeModel = new $tab_LayoutTreeModel(this);
				}
				this.layoutTreeModel.update(dashboardPresModel.dashboardZoneHierarchy, context);
			}
			if (ss.isValue(this.pm)) {
				if (ss.isValue(dashboardPresModel.cssAttrs) && !_.isEqual(dashboardPresModel.cssAttrs, this.pm.cssAttrs)) {
					this.raiseEvent(this.$2$FormatsChangedField, context);
				}
			}
			if (ss.isNullOrUndefined(this.get_sheetName()) || ss.isValue(dashboardPresModel.sheetLayoutInfo) && !ss.referenceEquals(dashboardPresModel.sheetLayoutInfo.sheetName, this.get_sheetName())) {
				this.raiseEvent(this.$2$DashboardNameChangedField, context);
			}
			if (ss.isNullOrUndefined(this.pm) || this.pm.hasTitle !== dashboardPresModel.hasTitle) {
				this.raiseEvent(this.$2$TitleVisibilityChangedField, context);
			}
			if (ss.isNullOrUndefined(this.pm) || this.pm.gridOverlayMode !== dashboardPresModel.gridOverlayMode) {
				this.raiseEvent(this.$2$GridOverlayModeChangedField, context);
			}
			if (ss.isNullOrUndefined(this.pm) || this.pm.size !== dashboardPresModel.size) {
				this.raiseEvent(this.$2$GridSizeChangedField, context);
			}
			if (!ss.isValue(this.emptyShowMeModel)) {
				this.emptyShowMeModel = new $tab_CommandsModel(this);
			}
			if (ss.isValue(dashboardPresModel.showMeCommands)) {
				this.emptyShowMeModel.update(dashboardPresModel.showMeCommands, context);
			}
			this.$raiseDashboardSizeEvents(dashboardPresModel, context);
			this.$raiseDeviceLayoutEvents(dashboardPresModel, context);
			this.$raiseActiveZoneChangedAndUpdateActiveZoneDescription(dashboardPresModel, context);
			this.$raiseActiveZoneNameChanged(dashboardPresModel, context);
			this.swapAndCopyPresModel(dashboardPresModel);
			this.raiseEvent(this.$2$NewDashboardField, context);
			this.$updateBrushingFromActions(context);
		},
		$setDefaultForNonSerialized: function DashboardModel$SetDefaultForNonSerialized(dashboardPresModel) {
			dashboardPresModel.isStory = dashboardPresModel.isStory || false;
			dashboardPresModel.hasTitle = dashboardPresModel.hasTitle || false;
			dashboardPresModel.gridOverlayMode = dashboardPresModel.gridOverlayMode || 'gom-off';
			dashboardPresModel.size = dashboardPresModel.size || $tab_DashboardModel.defaultGridSize;
		},
		$updateViewSessions: function DashboardModel$UpdateViewSessions(dashboardPresModel, commonDialogProvider) {
			if (ss.isValue(dashboardPresModel.viewIds)) {
				var $t1 = _.keys(dashboardPresModel.viewIds);
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var sheetName = $t1[$t2];
					var viewId = dashboardPresModel.viewIds[sheetName];
					var vs = this.$viewSessions[sheetName];
					if (ss.isNullOrUndefined(vs)) {
						vs = new $tab_ViewSession($tab_CommandController.get().legacySession.get_urlRoot(), sheetName, viewId, commonDialogProvider);
						this.$viewSessions[sheetName] = vs;
					}
					vs.set_viewId(viewId);
				}
				var viewSessionKeys = _.keys(this.$viewSessions);
				var viewsToDelete = _.difference(viewSessionKeys, _.keys(dashboardPresModel.viewIds));
				for (var $t3 = 0; $t3 < viewsToDelete.length; $t3++) {
					var viewId1 = viewsToDelete[$t3];
					delete this.$viewSessions[viewId1];
				}
			}
		},
		$raiseDashboardSizeEvents: function DashboardModel$RaiseDashboardSizeEvents(dashboardPresModel, context) {
			if (ss.isValue(dashboardPresModel.dashboardSizeControl)) {
				if (ss.isNullOrUndefined(this.$dashboardSizeControlModel)) {
					this.$dashboardSizeControlModel = new $tab_DashboardSizeControlModel(this);
				}
				this.$dashboardSizeControlModel.update(dashboardPresModel.dashboardSizeControl, context);
			}
			if (ss.isValue(this.pm)) {
				if (ss.isValue(dashboardPresModel.viewportSize) && !_.isEqual(dashboardPresModel.viewportSize, this.pm.viewportSize)) {
					this.raiseEvent(this.$2$SizeChangedField, context);
				}
			}
		},
		$raiseDeviceLayoutEvents: function DashboardModel$RaiseDeviceLayoutEvents(dashboardPresModel, context) {
			dashboardPresModel.dashboardDeviceLayout = ss.coalesce(dashboardPresModel.dashboardDeviceLayout, 'default');
			if (ss.isNullOrUndefined(this.pm) || this.pm.dashboardDeviceLayout !== dashboardPresModel.dashboardDeviceLayout) {
				this.raiseEvent(this.$2$CurrentDeviceLayoutChangedField, context);
				this.raiseEvent(this.$2$ActiveZoneChangedField, context);
			}
			if (ss.isNullOrUndefined(dashboardPresModel.dashboardDeviceLayouts) || ss.isNullOrUndefined(this.pm) || !_.isEqual(this.pm.dashboardDeviceLayouts, dashboardPresModel.dashboardDeviceLayouts)) {
				this.raiseEvent(this.$2$CurrentDeviceLayoutListChangedField, context);
			}
		},
		$raiseActiveZoneChangedAndUpdateActiveZoneDescription: function DashboardModel$RaiseActiveZoneChangedAndUpdateActiveZoneDescription(dashboardPresModel, context) {
			if (tab.FeatureFlags.isEnabled('MultiSelect')) {
				var changedActiveZoneIds = dashboardPresModel.activeZoneIds;
				if (ss.isValue(this.pm)) {
					changedActiveZoneIds = _.union(_.difference(this.pm.activeZoneIds, dashboardPresModel.activeZoneIds), _.difference(dashboardPresModel.activeZoneIds, this.pm.activeZoneIds));
				}
				if (!tab.MiscUtil.isNullOrEmpty(changedActiveZoneIds)) {
					this.$updateCurrentActiveZoneDescription(dashboardPresModel.activeZoneId);
					this.raiseEvent(this.$2$ActiveZoneChangedField, context);
				}
			}
			else if (ss.isValue(dashboardPresModel.activeZoneId)) {
				if (ss.isNullOrUndefined(this.pm) || this.pm.activeZoneId !== dashboardPresModel.activeZoneId) {
					this.$updateCurrentActiveZoneDescription(dashboardPresModel.activeZoneId);
					this.raiseEvent(this.$2$ActiveZoneChangedField, context);
				}
			}
		},
		$raiseActiveZoneNameChanged: function DashboardModel$RaiseActiveZoneNameChanged(dashboardPresModel, context) {
			if (this.$isActiveZoneNameChanged(dashboardPresModel.activeZoneId)) {
				this.$updateCurrentActiveZoneDescription(dashboardPresModel.activeZoneId);
				this.raiseEvent(this.$2$ActiveZoneNameChangedField, context);
			}
		},
		$updateBrushingFromActions: function DashboardModel$UpdateBrushingFromActions(context) {
			if (!$tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
				return;
			}
			var vizModelLookup = $tab_ModelUtils.getVisualModelsFromDashboard(this);
			var dashboardSheetNames = _.keys(vizModelLookup);
			var hasBrushingFromLegendOrDataHL = _.any(dashboardSheetNames, ss.mkdel(this, function(sheetName) {
				var vizModel = vizModelLookup[sheetName];
				return this.$hasLegendSelectionForBrushing(vizModel) || this.$hasActiveDataHighlighter(vizModel);
			}));
			if (hasBrushingFromLegendOrDataHL) {
				for (var $t1 = 0; $t1 < dashboardSheetNames.length; $t1++) {
					var sheetName1 = dashboardSheetNames[$t1];
					vizModelLookup[sheetName1].setIsBrushedFromAction(true, context);
				}
			}
			else {
				var sheetsToBrush = $tab_DashboardModel.$getSheetsToBrushFromActions(dashboardSheetNames, vizModelLookup);
				for (var $t2 = 0; $t2 < dashboardSheetNames.length; $t2++) {
					var sheetName2 = dashboardSheetNames[$t2];
					var shouldBrush = sheetsToBrush.has(sheetName2);
					vizModelLookup[sheetName2].setIsBrushedFromAction(shouldBrush, context);
				}
			}
		},
		$hasLegendSelectionForBrushing: function DashboardModel$HasLegendSelectionForBrushing(vm) {
			var catLegendModels = $tab_ModelUtils.getModelsForViz($tab_CategoricalLegendModel).call(null, this.get_contentDashboard(), vm);
			return _.any(catLegendModels, function(model) {
				if (!model.get_isHighlightEnabled()) {
					return false;
				}
				var legendSelectionModel = vm.get_selectionsModel().getLegendSelection(model.get_legendTypeEnum(), model.get_legendNames());
				return !legendSelectionModel.isEmpty;
			});
		},
		$hasActiveDataHighlighter: function DashboardModel$HasActiveDataHighlighter(vm) {
			var dataHighlighterModels = $tab_ModelUtils.getModelsForViz($tab_DataHighlighterModel).call(null, this.get_contentDashboard(), vm);
			return _.any(dataHighlighterModels, function(model) {
				var dataHLSelectionModel = vm.get_selectionsModel().getLegendSelection('highlight', [model.get_fieldName()]);
				return !dataHLSelectionModel.isEmpty;
			});
		},
		$isActiveZoneNameChanged: function DashboardModel$IsActiveZoneNameChanged(activeZoneID) {
			var activeZoneModel = this.getZone(activeZoneID);
			return !ss.isNullOrUndefined(activeZoneModel) && !ss.referenceEquals(activeZoneModel.get_zoneDescription(), this.$currentActiveZoneDescription);
		},
		$findStoryContentDashboard: function DashboardModel$FindStoryContentDashboard() {
			if (!this.pm.isStory) {
				return null;
			}
			var dashboard = null;
			var $t1 = this.zonesModel.get_zoneModels();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zone = $t1[$t2];
				if (ss.isInstanceOfType(zone.get_model(), $tab_FlipboardModel)) {
					dashboard = zone.get_model().get_dashboardModel();
					break;
				}
			}
			return dashboard;
		},
		$computeZonePlaceholderColor: function DashboardModel$ComputeZonePlaceholderColor() {
			var backgroundColor = $tab_ColorModel.fromColorCode(this.get_backgroundColor());
			backgroundColor = backgroundColor || $tab_ColorModel.white;
			var isLightBackground = backgroundColor.isLuminanceAboveThreshold(0.314999997615814);
			var blendFactor = (isLightBackground ? 0.0199999995529652 : 0.0299999993294477);
			var blendColor = (isLightBackground ? new $tab_ColorModel(0, 0, 0, blendFactor) : new $tab_ColorModel(255, 255, 255, blendFactor));
			var zonePlaceHolderColor = blendColor.toRgba();
			return zonePlaceHolderColor;
		},
		$updateCurrentActiveZoneDescription: function DashboardModel$UpdateCurrentActiveZoneDescription(activeZoneID) {
			var activeZoneModel = this.getZone(activeZoneID);
			if (ss.isNullOrUndefined(activeZoneModel)) {
				this.$currentActiveZoneDescription = '';
			}
			else {
				this.$currentActiveZoneDescription = activeZoneModel.get_zoneDescription();
			}
		}
	}, $tab_Model);
	ss.initClass($tab_DashboardNewObjectsModel, $asm, {
		get_addNewZoneAsFloating: function DashboardNewObjectsModel$get_AddNewZoneAsFloating() {
			return this.$addNewZoneAsFloating;
		},
		set_addNewZoneAsFloating: function DashboardNewObjectsModel$set_AddNewZoneAsFloating(value) {
			if (this.$addNewZoneAsFloating === value) {
				return;
			}
			this.$addNewZoneAsFloating = value;
		}
	}, $tab_Model);
	ss.initClass($tab_DashboardSetGridSizeCmd, $asm, {
		invoke: function DashboardSetGridSizeCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'dashboard-set-grid-size' }, this.cmdParams));
		},
		validateInvokeParams: function DashboardSetGridSizeCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dashboardGridSize')) {
				throw new ss.Exception('missing param DocParams.DashboardGridSize');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DashboardSetGridSizeCmd$Response]));
	ss.initClass($tab_DashboardSetGridSizeCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_DashboardShowGridCmd, $asm, {
		invoke: function DashboardShowGridCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'dashboard-show-grid' }, this.cmdParams));
		},
		validateInvokeParams: function DashboardShowGridCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DashboardShowGridCmd$Response]));
	ss.initClass($tab_DashboardShowGridCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_DashboardShowGridWebWrapperCmd, $asm, {
		validateInvokeParams: function DashboardShowGridWebWrapperCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_DashboardShowGridWebWrapperCmd$Response]));
	ss.initClass($tab_DashboardShowGridWebWrapperCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_DashboardShowGridWebWrapperCommand, $asm, {
		do$1: function DashboardShowGridWebWrapperCommand$Do() {
			if (ss.keyExists(this.cmdParams, 'dashboardShowGrid')) {
				var showGrid = /^\s*true\s*$/i.test(this.cmdParams['dashboardShowGrid'].toString());
				$tab_DashboardClientCommands.showGridOnDashboard(showGrid);
			}
		}
	}, $tab_DashboardShowGridWebWrapperCmd);
	ss.initClass($tab_DashboardSizeCalculator, $asm, {});
	ss.initClass($tab_DashboardSizeControlModel, $asm, {
		add_sizeInfoUpdated: function DashboardSizeControlModel$add_SizeInfoUpdated(value) {
			this.$2$SizeInfoUpdatedField = ss.delegateCombine(this.$2$SizeInfoUpdatedField, value);
		},
		remove_sizeInfoUpdated: function DashboardSizeControlModel$remove_SizeInfoUpdated(value) {
			this.$2$SizeInfoUpdatedField = ss.delegateRemove(this.$2$SizeInfoUpdatedField, value);
		},
		get_minDimension: function DashboardSizeControlModel$get_MinDimension() {
			return this.pm.minSize;
		},
		get_maxDimension: function DashboardSizeControlModel$get_MaxDimension() {
			return this.pm.maxSize;
		},
		get_stepSize: function DashboardSizeControlModel$get_StepSize() {
			return this.pm.stepSize;
		},
		get_sizeModeOptions: function DashboardSizeControlModel$get_SizeModeOptions() {
			return this.pm.sizeModeOptions || [];
		},
		update: function DashboardSizeControlModel$Update(dashboardSizeControlPresModel, context) {
			if (ss.isValue(dashboardSizeControlPresModel.dashboardSizePresModel)) {
				if (ss.isNullOrUndefined(this.dashboardSizeModel)) {
					this.dashboardSizeModel = new $tab_DashboardSizeModel(this);
				}
				this.dashboardSizeModel.update(dashboardSizeControlPresModel.dashboardSizePresModel, context);
			}
			if (ss.isValue(dashboardSizeControlPresModel.deviceLayoutInfoItem)) {
				if (ss.isNullOrUndefined(this.layoutInfoModel)) {
					this.layoutInfoModel = new $tab_DeviceLayoutInfoItemModel(this);
				}
				this.layoutInfoModel.update(dashboardSizeControlPresModel.deviceLayoutInfoItem, context);
			}
			this.simpleSwapToUpdate(dashboardSizeControlPresModel, this.$2$SizeInfoUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_DashboardSizeModel, $asm, {
		add_sizeUpdated: function DashboardSizeModel$add_SizeUpdated(value) {
			this.$2$SizeUpdatedField = ss.delegateCombine(this.$2$SizeUpdatedField, value);
		},
		remove_sizeUpdated: function DashboardSizeModel$remove_SizeUpdated(value) {
			this.$2$SizeUpdatedField = ss.delegateRemove(this.$2$SizeUpdatedField, value);
		},
		get_currentSizeText: function DashboardSizeModel$get_CurrentSizeText() {
			return this.pm.summaryText;
		},
		get_sizeMode: function DashboardSizeModel$get_SizeMode() {
			if (this.pm.dashboardSizingMode !== 'unspecified') {
				return this.pm.dashboardSizingMode;
			}
			switch (this.pm.sizeMode) {
				case 'size-mode-auto': {
					return 'automatic';
				}
				case 'size-mode-fixed': {
					return 'fixed';
				}
				default: {
					return 'range';
				}
			}
		},
		get_currentWidth: function DashboardSizeModel$get_CurrentWidth() {
			return this.pm.w;
		},
		get_currentMinWidth: function DashboardSizeModel$get_CurrentMinWidth() {
			return this.pm.minWidth;
		},
		get_currentMaxWidth: function DashboardSizeModel$get_CurrentMaxWidth() {
			return this.pm.maxWidth;
		},
		get_currentHeight: function DashboardSizeModel$get_CurrentHeight() {
			return this.pm.h;
		},
		get_currentMinHeight: function DashboardSizeModel$get_CurrentMinHeight() {
			return this.pm.minHeight;
		},
		get_currentMaxHeight: function DashboardSizeModel$get_CurrentMaxHeight() {
			return this.pm.maxHeight;
		},
		update: function DashboardSizeModel$Update(dashboardSizePresModel, context) {
			this.simpleSwapToUpdate(dashboardSizePresModel, this.$2$SizeUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_DataAlert, $asm, {
		add_notificationIntervalChanged: function DataAlert$add_NotificationIntervalChanged(value) {
			this.$1$NotificationIntervalChangedField = ss.delegateCombine(this.$1$NotificationIntervalChangedField, value);
		},
		remove_notificationIntervalChanged: function DataAlert$remove_NotificationIntervalChanged(value) {
			this.$1$NotificationIntervalChangedField = ss.delegateRemove(this.$1$NotificationIntervalChangedField, value);
		},
		add_titleChanged: function DataAlert$add_TitleChanged(value) {
			this.$1$TitleChangedField = ss.delegateCombine(this.$1$TitleChangedField, value);
		},
		remove_titleChanged: function DataAlert$remove_TitleChanged(value) {
			this.$1$TitleChangedField = ss.delegateRemove(this.$1$TitleChangedField, value);
		},
		add_publicChanged: function DataAlert$add_PublicChanged(value) {
			this.$1$PublicChangedField = ss.delegateCombine(this.$1$PublicChangedField, value);
		},
		remove_publicChanged: function DataAlert$remove_PublicChanged(value) {
			this.$1$PublicChangedField = ss.delegateRemove(this.$1$PublicChangedField, value);
		},
		add_measureChanged: function DataAlert$add_MeasureChanged(value) {
			this.$1$MeasureChangedField = ss.delegateCombine(this.$1$MeasureChangedField, value);
		},
		remove_measureChanged: function DataAlert$remove_MeasureChanged(value) {
			this.$1$MeasureChangedField = ss.delegateRemove(this.$1$MeasureChangedField, value);
		},
		add_conditionChanged: function DataAlert$add_ConditionChanged(value) {
			this.$1$ConditionChangedField = ss.delegateCombine(this.$1$ConditionChangedField, value);
		},
		remove_conditionChanged: function DataAlert$remove_ConditionChanged(value) {
			this.$1$ConditionChangedField = ss.delegateRemove(this.$1$ConditionChangedField, value);
		},
		add_recipientsChanged: function DataAlert$add_RecipientsChanged(value) {
			this.$1$RecipientsChangedField = ss.delegateCombine(this.$1$RecipientsChangedField, value);
		},
		remove_recipientsChanged: function DataAlert$remove_RecipientsChanged(value) {
			this.$1$RecipientsChangedField = ss.delegateRemove(this.$1$RecipientsChangedField, value);
		},
		get_recipients: function DataAlert$get_Recipients() {
			return this.$1$RecipientsField;
		},
		set_recipients: function DataAlert$set_Recipients(value) {
			this.$1$RecipientsField = value;
		},
		get_userIds: function DataAlert$get_UserIds() {
			return _.map(this.get_recipients(), function(user) {
				return user.id.toString();
			});
		},
		get_notificationIntervalInMinutes: function DataAlert$get_NotificationIntervalInMinutes() {
			return this.$notificationInterval;
		},
		set_notificationIntervalInMinutes: function DataAlert$set_NotificationIntervalInMinutes(value) {
			if (this.$notificationInterval !== value) {
				this.$notificationInterval = value;
				if (!ss.staticEquals(this.$1$NotificationIntervalChangedField, null)) {
					this.$1$NotificationIntervalChangedField();
				}
			}
		},
		get_title: function DataAlert$get_Title() {
			return this.$title;
		},
		set_title: function DataAlert$set_Title(value) {
			if (!ss.referenceEquals(this.$title, value)) {
				this.$title = value;
				if (!ss.staticEquals(this.$1$TitleChangedField, null)) {
					this.$1$TitleChangedField();
				}
			}
		},
		get_isPublic: function DataAlert$get_IsPublic() {
			return this.$isPublic;
		},
		set_isPublic: function DataAlert$set_IsPublic(value) {
			if (this.$isPublic !== value) {
				this.$isPublic = value;
				if (!ss.staticEquals(this.$1$PublicChangedField, null)) {
					this.$1$PublicChangedField();
				}
			}
		},
		get_deviceType: function DataAlert$get_DeviceType() {
			return this.$1$DeviceTypeField;
		},
		set_deviceType: function DataAlert$set_DeviceType(value) {
			this.$1$DeviceTypeField = value;
		},
		get_isViewSaveNeeded: function DataAlert$get_IsViewSaveNeeded() {
			return this.$1$IsViewSaveNeededField;
		},
		set_isViewSaveNeeded: function DataAlert$set_IsViewSaveNeeded(value) {
			this.$1$IsViewSaveNeededField = value;
		},
		get_customizedViewId: function DataAlert$get_CustomizedViewId() {
			return this.$1$CustomizedViewIdField;
		},
		set_customizedViewId: function DataAlert$set_CustomizedViewId(value) {
			this.$1$CustomizedViewIdField = value;
		},
		get_selectionCaption: function DataAlert$get_SelectionCaption() {
			return this.$1$SelectionCaptionField;
		},
		set_selectionCaption: function DataAlert$set_SelectionCaption(value) {
			this.$1$SelectionCaptionField = value;
		},
		get_measurePresModel: function DataAlert$get_MeasurePresModel() {
			return this.$measurePresModel;
		},
		set_measurePresModel: function DataAlert$set_MeasurePresModel(value) {
			if (!ss.referenceEquals(this.$measurePresModel, value)) {
				this.$measurePresModel = value;
				if (!ss.staticEquals(this.$1$MeasureChangedField, null)) {
					this.$1$MeasureChangedField();
				}
			}
		},
		get_conditionPresModel: function DataAlert$get_ConditionPresModel() {
			return this.$conditionPresModel;
		},
		set_conditionPresModel: function DataAlert$set_ConditionPresModel(value) {
			if (!ss.referenceEquals(this.$conditionPresModel, value)) {
				this.$conditionPresModel = value;
				if (!ss.staticEquals(this.$1$ConditionChangedField, null)) {
					this.$1$ConditionChangedField();
				}
			}
		},
		get_operator: function DataAlert$get_Operator() {
			return this.$conditionPresModel.dataAlertConditionOp;
		},
		get_threshold: function DataAlert$get_Threshold() {
			return this.$threshold;
		},
		set_threshold: function DataAlert$set_Threshold(value) {
			if (ss.referenceEquals(this.$threshold, value)) {
				return;
			}
			this.$threshold = value;
			if (ss.isNullOrUndefined(this.get_conditionPresModel().dataType)) {
				return;
			}
			this.set_thresholdIsValid(this.isValidThresholdText(value));
		},
		get_thresholdIsValid: function DataAlert$get_ThresholdIsValid() {
			return this.$1$ThresholdIsValidField;
		},
		set_thresholdIsValid: function DataAlert$set_ThresholdIsValid(value) {
			this.$1$ThresholdIsValidField = value;
		},
		get_alertConditionMet: function DataAlert$get_AlertConditionMet() {
			return this.$1$AlertConditionMetField;
		},
		set_alertConditionMet: function DataAlert$set_AlertConditionMet(value) {
			this.$1$AlertConditionMetField = value;
		},
		get_viewType: function DataAlert$get_ViewType() {
			return this.$1$ViewTypeField;
		},
		set_viewType: function DataAlert$set_ViewType(value) {
			this.$1$ViewTypeField = value;
		},
		$isValidFormattedThresholdText: function DataAlert$IsValidFormattedThresholdText(text) {
			return this.get_conditionPresModel().dataType === 'real' && tab.DoubleUtil.isValidDouble(text) || this.get_conditionPresModel().dataType === 'integer' && tab.DoubleUtil.isValid64BitInteger(text);
		},
		isValidThresholdText: function DataAlert$IsValidThresholdText(text) {
			if (ss.isNullOrEmptyString(text)) {
				return false;
			}
			else if (ss.isNullOrUndefined($tab_ApplicationModel.get_instance().get_appPresModel()) || ss.isNullOrUndefined($tab_ApplicationModel.get_instance().get_appPresModel().numberFormats)) {
				return this.$isValidFormattedThresholdText(text);
			}
			else {
				var format = $tab_ApplicationModel.get_instance().get_appPresModel().numberFormats;
				return this.$isValidFormattedThresholdText(tableau.format.reformatNumberToJsFormat(text, format));
			}
		},
		updateRecipients: function DataAlert$UpdateRecipients(users) {
			this.set_recipients(users);
			if (!ss.staticEquals(this.$1$RecipientsChangedField, null)) {
				this.$1$RecipientsChangedField();
			}
		}
	});
	$tab_DataAlert.$ctor2.prototype = $tab_DataAlert.$ctor1.prototype = $tab_DataAlert.prototype;
	ss.initClass($tab_DataAlertClientCommands, $asm, {});
	ss.initClass($tab_DataAlertConditionOperation, $asm, {});
	ss.initClass($tab_DataAlertDialogModel, $asm, {
		add_stopNotifying: function DataAlertDialogModel$add_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateCombine(this.$2$StopNotifyingField, value);
		},
		remove_stopNotifying: function DataAlertDialogModel$remove_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateRemove(this.$2$StopNotifyingField, value);
		},
		add_showOrUpdateDialog: function DataAlertDialogModel$add_ShowOrUpdateDialog(value) {
			this.$2$ShowOrUpdateDialogField = ss.delegateCombine(this.$2$ShowOrUpdateDialogField, value);
		},
		remove_showOrUpdateDialog: function DataAlertDialogModel$remove_ShowOrUpdateDialog(value) {
			this.$2$ShowOrUpdateDialogField = ss.delegateRemove(this.$2$ShowOrUpdateDialogField, value);
		},
		get_notificationId: function DataAlertDialogModel$get_NotificationId() {
			return 'doc:data-alert-dialog-event';
		},
		get_operation: function DataAlertDialogModel$get_Operation() {
			return this.pm.dataAlertConditionOp;
		},
		get_thresholdText: function DataAlertDialogModel$get_ThresholdText() {
			return this.pm.dataAlertThresholdText;
		},
		onNotify: function DataAlertDialogModel$OnNotify(pm, context) {
			if (ss.isValue(pm)) {
				this.swapAndCopyPresModel(pm);
				this.raiseEvent(this.$2$ShowOrUpdateDialogField, context);
			}
		},
		detachNotifications: function DataAlertDialogModel$DetachNotifications() {
			this.pm = null;
			if (!ss.staticEquals(this.$2$StopNotifyingField, null)) {
				this.$2$StopNotifyingField();
			}
		}
	}, $tab_Model, [$tab_IHandleNotifications, $tab_IDetachableNotificationHandler]);
	ss.initClass($tab_DataAlertNotificationInterval, $asm, {});
	ss.initClass($tab_DataConnectionCommands, $asm, {});
	ss.initClass($tab_DataConnectionPromptModel, $asm, {
		get_$dataConnectionPromptPresModel: function DataConnectionPromptModel$get_DataConnectionPromptPresModel() {
			return this.pm;
		},
		get_connectionName: function DataConnectionPromptModel$get_ConnectionName() {
			return this.get_$dataConnectionPromptPresModel().connectionName || '';
		},
		get_promptTitle: function DataConnectionPromptModel$get_PromptTitle() {
			return this.get_$dataConnectionPromptPresModel().dialogTitle || '';
		},
		get_variableListInstruction: function DataConnectionPromptModel$get_VariableListInstruction() {
			return this.get_$dataConnectionPromptPresModel().valuesTableHeader || '';
		},
		get_variableListNameLabel: function DataConnectionPromptModel$get_VariableListNameLabel() {
			return this.get_$dataConnectionPromptPresModel().listViewNameLabel || '';
		},
		get_variableListValueLabel: function DataConnectionPromptModel$get_VariableListValueLabel() {
			return this.get_$dataConnectionPromptPresModel().listViewValueLabel || '';
		},
		get_addVariableLabel: function DataConnectionPromptModel$get_AddVariableLabel() {
			return this.get_$dataConnectionPromptPresModel().addVariableLabel || '';
		},
		get_addVariableTooltip: function DataConnectionPromptModel$get_AddVariableTooltip() {
			return this.get_$dataConnectionPromptPresModel().addVariableTooltip || '';
		},
		get_deleteVariableTooltip: function DataConnectionPromptModel$get_DeleteVariableTooltip() {
			return this.get_$dataConnectionPromptPresModel().deleteVariableTooltip || '';
		},
		get_requiredVariableMessage: function DataConnectionPromptModel$get_RequiredVariableMessage() {
			return this.get_$dataConnectionPromptPresModel().requiredVariableMessage || '';
		},
		get_editSectionTitle: function DataConnectionPromptModel$get_EditSectionTitle() {
			return this.get_$dataConnectionPromptPresModel().editWidgetHeader || '';
		},
		get_editSectionInstruction: function DataConnectionPromptModel$get_EditSectionInstruction() {
			return this.get_$dataConnectionPromptPresModel().editWidgetInstruction || '';
		},
		get_editSectionFromLabel: function DataConnectionPromptModel$get_EditSectionFromLabel() {
			return this.get_$dataConnectionPromptPresModel().fromLabel || '';
		},
		get_editSectionToLabel: function DataConnectionPromptModel$get_EditSectionToLabel() {
			return this.get_$dataConnectionPromptPresModel().toLabel || '';
		},
		get_connectionVariables: function DataConnectionPromptModel$get_ConnectionVariables() {
			return this.$connectionVariableModels;
		},
		update: function DataConnectionPromptModel$Update(promptPresModels) {
			this.swapAndCopyPresModel(promptPresModels);
			if (ss.isValue(this.get_$dataConnectionPromptPresModel().promptVariables)) {
				this.$connectionVariableModels = [];
				for (var i = 0; i < this.get_$dataConnectionPromptPresModel().promptVariables.length; i++) {
					var variableModel = new $tab_DataConnectionVariableModel(new $tab_DataConnectionVariableArrayModel(this), i);
					variableModel.update(this.get_$dataConnectionPromptPresModel().promptVariables[i]);
					this.$connectionVariableModels.push(variableModel);
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_DataConnectionUtils, $asm, {});
	ss.initClass($tab_DataConnectionVariableArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_DataConnectionVariableModel, $asm, {
		get_$variablePresModel: function DataConnectionVariableModel$get_VariablePresModel() {
			return this.pm;
		},
		get_displayName: function DataConnectionVariableModel$get_DisplayName() {
			return this.get_$variablePresModel().variableDisplayName;
		},
		get_description: function DataConnectionVariableModel$get_Description() {
			return this.get_$variablePresModel().variableDescription;
		},
		get_guid: function DataConnectionVariableModel$get_Guid() {
			return this.get_$variablePresModel().variableGuid;
		},
		get_isRequired: function DataConnectionVariableModel$get_IsRequired() {
			return this.get_$variablePresModel().isRequired;
		},
		get_defaultValue: function DataConnectionVariableModel$get_DefaultValue() {
			return this.$defaultValue;
		},
		get_supportMultiValue: function DataConnectionVariableModel$get_SupportMultiValue() {
			return this.get_$variablePresModel().supportsMultipleValues;
		},
		get_values: function DataConnectionVariableModel$get_Values() {
			return this.$valueModels;
		},
		get_selectableOperations: function DataConnectionVariableModel$get_SelectableOperations() {
			return this.get_$variablePresModel().serverVariableMetadata.variableValueOperations;
		},
		get_selectableValues: function DataConnectionVariableModel$get_SelectableValues() {
			return this.get_$variablePresModel().serverVariableMetadata.selectionValueList;
		},
		update: function DataConnectionVariableModel$Update(variablePresModel) {
			this.swapAndCopyPresModel(variablePresModel);
			this.$defaultValue = new $tab_DataConnectionVariableValueModel(null, -1);
			this.$defaultValue.update(this.get_$variablePresModel().serverVariableMetadata.variableValue);
			if (ss.isValue(this.get_$variablePresModel().variableValues)) {
				this.$valueModels = [];
				for (var i = 0; i < this.get_$variablePresModel().variableValues.length; i++) {
					var valueModel = new $tab_DataConnectionVariableValueModel(new $tab_DataConnectionVariableValueArrayModel(this), i);
					valueModel.update(this.get_$variablePresModel().variableValues[i]);
					this.$valueModels.push(valueModel);
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_DataConnectionVariableValueArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_DataConnectionVariableValueModel, $asm, {
		get_$valuePresModel: function DataConnectionVariableValueModel$get_ValuePresModel() {
			return this.pm;
		},
		get_displayValue: function DataConnectionVariableValueModel$get_DisplayValue() {
			return this.get_$valuePresModel().displayValue;
		},
		get_valueIndex: function DataConnectionVariableValueModel$get_ValueIndex() {
			return this.get_$valuePresModel().valueIndex;
		},
		get_operation: function DataConnectionVariableValueModel$get_Operation() {
			return this.get_$valuePresModel().serverVariableValue.variableValueOperation;
		},
		set_operation: function DataConnectionVariableValueModel$set_Operation(value) {
			this.get_$valuePresModel().serverVariableValue.variableValueOperation = value;
		},
		get_firstValue: function DataConnectionVariableValueModel$get_FirstValue() {
			return this.get_$valuePresModel().serverVariableValue.firstValue;
		},
		get_firstValueIndex: function DataConnectionVariableValueModel$get_FirstValueIndex() {
			return this.get_$valuePresModel().serverVariableValue.firstValueIndex;
		},
		get_secondValue: function DataConnectionVariableValueModel$get_SecondValue() {
			return (this.get_$valuePresModel().serverVariableValue.isTwoValued ? this.get_$valuePresModel().serverVariableValue.secondValue : null);
		},
		get_secondValueIndex: function DataConnectionVariableValueModel$get_SecondValueIndex() {
			return (this.get_$valuePresModel().serverVariableValue.isTwoValued ? this.get_$valuePresModel().serverVariableValue.secondValueIndex : -1);
		},
		update: function DataConnectionVariableValueModel$Update(variableValuePresModel) {
			this.swapAndCopyPresModel(variableValuePresModel);
		}
	}, $tab_Model);
	ss.initClass($tab_DataDictionaryModel, $asm, {
		get_isEmpty: function DataDictionaryModel$get_IsEmpty() {
			return tab.MiscUtil.isNullOrEmpty$2(this.get_$dataDictionaryPM()) || tab.MiscUtil.isNullOrEmpty$2(this.get_$dataDictionaryPM().dataSegments);
		},
		get_$dataDictionaryPM: function DataDictionaryModel$get_DataDictionaryPM() {
			return this.pm;
		},
		update: function DataDictionaryModel$Update(dataPM) {
			if (ss.isValue(this.get_$dataDictionaryPM()) && ss.isValue(dataPM)) {
				var newDataSegments = dataPM.dataSegments;
				if (ss.isValue(newDataSegments)) {
					var oldDataSegments = this.get_$dataDictionaryPM().dataSegments;
					if (ss.isValue(oldDataSegments)) {
						var $t1 = new ss.ObjectEnumerator(oldDataSegments);
						try {
							while ($t1.moveNext()) {
								var entry = $t1.current();
								if (!ss.keyExists(newDataSegments, entry.key)) {
									newDataSegments[entry.key] = entry.value;
								}
							}
						}
						finally {
							$t1.dispose();
						}
					}
					var $t2 = new ss.ObjectEnumerator(newDataSegments);
					try {
						while ($t2.moveNext()) {
							var entry1 = $t2.current();
							if (entry1.value === null) {
								delete newDataSegments[entry1.key];
							}
						}
					}
					finally {
						$t2.dispose();
					}
					this.$numSegments = null;
				}
			}
			this.pm = dataPM;
		},
		getRawValue: function DataDictionaryModel$GetRawValue(dt, index) {
			if (ss.isNullOrUndefined(this.get_$dataDictionaryPM()) || ss.isNullOrUndefined(this.get_$dataDictionaryPM().dataSegments)) {
				return null;
			}
			if (ss.isNullOrUndefined(this.$numSegments)) {
				var maxSegment = 0;
				var $t1 = ss.getEnumerator(Object.keys(this.get_$dataDictionaryPM().dataSegments));
				try {
					while ($t1.moveNext()) {
						var segmentStr = $t1.current();
						var segNum = parseInt(segmentStr);
						maxSegment = Math.max(segNum, maxSegment);
					}
				}
				finally {
					$t1.dispose();
				}
				this.$numSegments = maxSegment + 1;
			}
			for (var segmentNum = 0; ss.Nullable$1.lt(segmentNum, this.$numSegments); segmentNum++) {
				var dataSegment = this.get_$dataDictionaryPM().dataSegments[segmentNum.toString()];
				if (ss.isNullOrUndefined(dataSegment) || ss.isNullOrUndefined(dataSegment.dataColumns)) {
					continue;
				}
				for (var $t2 = 0; $t2 < dataSegment.dataColumns.length; $t2++) {
					var dataColumn = dataSegment.dataColumns[$t2];
					if (ss.isNullOrUndefined(dataColumn) || dataColumn.dataType !== dt) {
						continue;
					}
					if (index < dataColumn.dataValues.length) {
						return dataColumn.dataValues[index];
					}
					index -= dataColumn.dataValues.length;
					break;
				}
			}
			return null;
		}
	}, $tab_Model);
	ss.initClass($tab_DataHighlighterModel, $asm, {
		add_newDataHighlighterPresModel: function DataHighlighterModel$add_NewDataHighlighterPresModel(value) {
			this.$2$NewDataHighlighterPresModelField = ss.delegateCombine(this.$2$NewDataHighlighterPresModelField, value);
		},
		remove_newDataHighlighterPresModel: function DataHighlighterModel$remove_NewDataHighlighterPresModel(value) {
			this.$2$NewDataHighlighterPresModelField = ss.delegateRemove(this.$2$NewDataHighlighterPresModelField, value);
		},
		get_fieldName: function DataHighlighterModel$get_FieldName() {
			return this.get_$dataHighlighterPresModel().fn;
		},
		get_searchPlaceholderString: function DataHighlighterModel$get_SearchPlaceholderString() {
			return this.get_$dataHighlighterPresModel().searchPlaceholder;
		},
		get_$dataHighlighterPresModel: function DataHighlighterModel$get_DataHighlighterPresModel() {
			return this.pm;
		},
		get_fullDomainItemSet: function DataHighlighterModel$get_FullDomainItemSet() {
			return this.get_$dataHighlighterPresModel().dataHighlighterItemSet;
		},
		get_searchText: function DataHighlighterModel$get_SearchText() {
			return this.get_$dataHighlighterPresModel().queryText;
		},
		get_maxNumberListItems: function DataHighlighterModel$get_MaxNumberListItems() {
			return this.get_$dataHighlighterPresModel().maxNumberWebListItems;
		},
		get_isActive: function DataHighlighterModel$get_IsActive() {
			return this.get_$dataHighlighterPresModel().isActive;
		},
		get_bodyTextStyle: function DataHighlighterModel$get_BodyTextStyle() {
			return this.get_$dataHighlighterPresModel().textStyle;
		},
		get_numHighlighted: function DataHighlighterModel$get_NumHighlighted() {
			return this.get_$dataHighlighterPresModel().numHighlighted;
		},
		get_zoneHasBorder: function DataHighlighterModel$get_ZoneHasBorder() {
			if (ss.isNullOrUndefined(this.parent)) {
				return false;
			}
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone().get_zoneCommonModel().get_hasBorder();
		},
		get_zoneWidth: function DataHighlighterModel$get_ZoneWidth() {
			if (ss.isNullOrUndefined(this.parent)) {
				return 0;
			}
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone().get_zoneCommonModel().get_width();
		},
		update: function DataHighlighterModel$Update(dataHighlighterPresModel, context) {
			if (ss.isValue(dataHighlighterPresModel)) {
				$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(dataHighlighterPresModel.textStyle);
			}
			this.$brushingLookupTable = null;
			this.simpleSwapToUpdate(dataHighlighterPresModel, this.$2$NewDataHighlighterPresModelField, context);
		},
		getItemNamesFromObjectId: function DataHighlighterModel$GetItemNamesFromObjectId(objectId) {
			if (ss.isNullOrUndefined(this.$brushingLookupTable)) {
				this.$buildLookupTable();
			}
			return [this.$brushingLookupTable[objectId]];
		},
		$buildLookupTable: function DataHighlighterModel$BuildLookupTable() {
			this.$brushingLookupTable = {};
			var $t1 = this.get_fullDomainItemSet().dataHighlighterItems;
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var item = $t1[$t2];
				this.$brushingLookupTable[item.objectId] = item.text;
			}
		}
	}, $tab_Model, [$tab_IBrushingModelInfo]);
	ss.initClass($tab_DataSchemaModel, $asm, {
		add_newActiveDataSource: function DataSchemaModel$add_NewActiveDataSource(value) {
			this.$2$NewActiveDataSourceField = ss.delegateCombine(this.$2$NewActiveDataSourceField, value);
		},
		remove_newActiveDataSource: function DataSchemaModel$remove_NewActiveDataSource(value) {
			this.$2$NewActiveDataSourceField = ss.delegateRemove(this.$2$NewActiveDataSourceField, value);
		},
		add_newDataSchema: function DataSchemaModel$add_NewDataSchema(value) {
			this.$2$NewDataSchemaField = ss.delegateCombine(this.$2$NewDataSchemaField, value);
		},
		remove_newDataSchema: function DataSchemaModel$remove_NewDataSchema(value) {
			this.$2$NewDataSchemaField = ss.delegateRemove(this.$2$NewDataSchemaField, value);
		},
		add_newDataSourceAdded: function DataSchemaModel$add_NewDataSourceAdded(value) {
			this.$2$NewDataSourceAddedField = ss.delegateCombine(this.$2$NewDataSourceAddedField, value);
		},
		remove_newDataSourceAdded: function DataSchemaModel$remove_NewDataSourceAdded(value) {
			this.$2$NewDataSourceAddedField = ss.delegateRemove(this.$2$NewDataSourceAddedField, value);
		},
		get_parametersDataSource: function DataSchemaModel$get_ParametersDataSource() {
			return (ss.isNullOrUndefined(this.get_dataSources()) ? null : this.get_dataSources().getDataSource(this.$parametersDSName));
		},
		get_activeDataSource: function DataSchemaModel$get_ActiveDataSource() {
			return (ss.isNullOrUndefined(this.get_dataSources()) ? null : this.get_dataSources().getDataSource(this.get_activeDataSourceName()));
		},
		get_dataSchemaPresModel: function DataSchemaModel$get_DataSchemaPresModel() {
			return this.pm;
		},
		get_activeDataSourceName: function DataSchemaModel$get_ActiveDataSourceName() {
			if (ss.isValue(this.get_dataSchemaPresModel()) && ss.isValue(this.get_dataSchemaPresModel().datasource)) {
				return this.get_dataSchemaPresModel().datasource;
			}
			return '';
		},
		get_dataSources: function DataSchemaModel$get_DataSources() {
			return this.$dataSources;
		},
		get_dataSourcesList: function DataSchemaModel$get_DataSourcesList() {
			return (ss.isNullOrUndefined(this.get_dataSources()) ? [] : this.get_dataSources().get_dataSources());
		},
		get_hasDataSourcesModel: function DataSchemaModel$get_HasDataSourcesModel() {
			return ss.isValue(this.get_dataSources());
		},
		get_currentBlendingFields: function DataSchemaModel$get_CurrentBlendingFields() {
			return this.$localCurrentBlendingFields;
		},
		get_blendingFieldCandidates: function DataSchemaModel$get_BlendingFieldCandidates() {
			return this.$localBlendingFieldCandidates;
		},
		notifyNewDataSourceAdded: function DataSchemaModel$NotifyNewDataSourceAdded(context, name) {
			this.raiseEvent$1(String).call(this, this.$2$NewDataSourceAddedField, name, context);
		},
		getDefaultDataSourceForSheet: function DataSchemaModel$GetDefaultDataSourceForSheet(sheetName) {
			if (ss.isNullOrUndefined(this.get_dataSchemaPresModel())) {
				return null;
			}
			var primaryDatasourceName = null;
			if (ss.isValue(this.get_dataSchemaPresModel().worksheetDataSchemaMap) && ss.keyExists(this.get_dataSchemaPresModel().worksheetDataSchemaMap, sheetName)) {
				primaryDatasourceName = this.get_dataSchemaPresModel().worksheetDataSchemaMap[sheetName].primaryDatasource;
			}
			if (ss.isNullOrEmptyString(primaryDatasourceName)) {
				return _.chain(this.$dataSources.get_dataSources()).filter(ss.mkdel(this, function(model) {
					return !ss.referenceEquals(model.get_name(), this.get_dataSchemaPresModel().parametersDatasource);
				})).first().value();
			}
			return this.$dataSources.getDataSource(primaryDatasourceName);
		},
		getDefaultDatasourceNamesForSheets: function DataSchemaModel$GetDefaultDatasourceNamesForSheets(sheets) {
			var dataSourcesSet = {};
			for (var $t1 = 0; $t1 < sheets.length; $t1++) {
				var sheet = sheets[$t1];
				var ds = this.getDefaultDataSourceForSheet(sheet);
				if (ss.isValue(ds)) {
					dataSourcesSet[ds.get_name()] = true;
				}
			}
			return ss.arrayFromEnumerable(Object.keys(dataSourcesSet));
		},
		getDataSourceCount: function DataSchemaModel$GetDataSourceCount(includeParameters) {
			var count = 0;
			if (ss.isValue(this.get_dataSources()) && ss.isValue(this.get_dataSources().get_dataSources())) {
				count = this.get_dataSources().get_dataSources().length;
				if (!includeParameters && ss.isValue(this.get_parametersDataSource())) {
					count--;
				}
			}
			return count;
		},
		findField: function DataSchemaModel$FindField(globalFieldName) {
			var model = this.findDataSourceFromGlobalFieldName(globalFieldName);
			return (ss.isNullOrUndefined(model) ? null : model.findField(globalFieldName));
		},
		findDataSourceByName: function DataSchemaModel$FindDataSourceByName(datasourceName) {
			return (ss.isNullOrUndefined(this.get_dataSources()) ? null : this.get_dataSources().getDataSource(datasourceName));
		},
		findConnectionSummaryByName: function DataSchemaModel$FindConnectionSummaryByName(connectionConfigName) {
			if (ss.isNullOrUndefined(this.get_dataSources()) || ss.isNullOrUndefined(this.get_dataSources().get_dataSources())) {
				return null;
			}
			var $t1 = this.get_dataSources().get_dataSources();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var dataSourceModel = $t1[$t2];
				var connectionSummaryPresModel = dataSourceModel.findConnectionSummaryPresModel(connectionConfigName);
				if (ss.isValue(connectionSummaryPresModel)) {
					return connectionSummaryPresModel;
				}
			}
			return null;
		},
		findDataSourceFromGlobalFieldName: function DataSchemaModel$FindDataSourceFromGlobalFieldName(fn) {
			var fieldNameParts = $tab_DataSourceModel.splitGlobalFieldName(fn);
			if (fieldNameParts.length <= 1) {
				return null;
			}
			var sourceName = fieldNameParts[0].replace(new RegExp('\\]\\]'), ']');
			return this.findDataSourceByName(sourceName);
		},
		raiseNewActiveDataSourceEvent: function DataSchemaModel$RaiseNewActiveDataSourceEvent(context) {
			this.raiseEvent(this.$2$NewActiveDataSourceField, context);
		},
		raiseNewDataSchemaEvent: function DataSchemaModel$RaiseNewDataSchemaEvent(context) {
			this.raiseEvent(this.$2$NewDataSchemaField, context);
		},
		update: function DataSchemaModel$Update(newPresModel, context) {
			if (ss.isNullOrUndefined(newPresModel)) {
				return;
			}
			if (_.isEqual(newPresModel, this.pm)) {
				return;
			}
			var newBlendingFields = (ss.isValue(newPresModel.currentBlendingFields) ? newPresModel.currentBlendingFields : []);
			var newBlendingCandidates = (ss.isValue(newPresModel.blendingFieldCandidates) ? newPresModel.blendingFieldCandidates : []);
			this.$localCurrentBlendingFields = ss.arrayClone(newBlendingFields);
			this.$localBlendingFieldCandidates = ss.arrayClone(newBlendingCandidates);
			if (ss.isValue(newPresModel.parametersDatasource)) {
				this.$parametersDSName = newPresModel.parametersDatasource;
			}
			tab.Log.get(this).debug('Updating DataSchemaModel', []);
			var prevDataSourcesCount = this.getDataSourceCount(true);
			if (ss.isValue(newPresModel.schemaViewerDataSources)) {
				this.$dataSources = this.$dataSources || new $tab_DataSourcesModel(this);
				this.$dataSources.update(newPresModel.schemaViewerDataSources, context);
			}
			if (this.getDataSourceCount(true) > prevDataSourcesCount) {
				this.notifyNewDataSourceAdded(context, '');
			}
			if (ss.isValue(this.pm)) {
				var oldWorksheetSchemas = this.pm.worksheetDataSchemaMap;
				var newWorksheetSchemas = newPresModel.worksheetDataSchemaMap;
				$tab_ModelUtils.mergeMapPresModelDelta(oldWorksheetSchemas, newWorksheetSchemas);
			}
			if (!ss.referenceEquals(newPresModel.datasource, this.get_activeDataSourceName())) {
				this.raiseNewActiveDataSourceEvent(context);
			}
			this.swapAndCopyPresModel(newPresModel);
			this.raiseNewDataSchemaEvent(context);
		},
		getDataSource: function DataSchemaModel$GetDataSource(dataSourceName) {
			return (ss.isNullOrUndefined(this.get_dataSources()) ? null : this.get_dataSources().getDataSource(dataSourceName));
		}
	}, $tab_Model);
	ss.initClass($tab_DataSchemaSelectionModel, $asm, {
		add_selectionChanged: function DataSchemaSelectionModel$add_SelectionChanged(value) {
			this.$2$SelectionChangedField = ss.delegateCombine(this.$2$SelectionChangedField, value);
		},
		remove_selectionChanged: function DataSchemaSelectionModel$remove_SelectionChanged(value) {
			this.$2$SelectionChangedField = ss.delegateRemove(this.$2$SelectionChangedField, value);
		},
		get_notificationId: function DataSchemaSelectionModel$get_NotificationId() {
			return 'doc:data-schema-selection-event';
		},
		get_$selectedFields: function DataSchemaSelectionModel$get_SelectedFields() {
			var pm = this.pm;
			if (ss.isNullOrUndefined(pm)) {
				return null;
			}
			var fieldNames = [];
			for (var $t1 = 0; $t1 < pm.fieldVector.length; $t1++) {
				var field = pm.fieldVector[$t1];
				fieldNames.push(field);
			}
			return fieldNames;
		},
		onNotify: function DataSchemaSelectionModel$OnNotify(pm, context) {
			this.swapPresModel(pm);
			this.$fireDeferredSelectionChangeEvent();
		},
		$fireDeferredSelectionChangeEvent: function DataSchemaSelectionModel$FireDeferredSelectionChangeEvent() {
			if (!ss.isValue(this.$2$SelectionChangedField)) {
				return;
			}
			var postWorldUpdateAction = null;
			postWorldUpdateAction = ss.mkdel(this, function() {
				this.$2$SelectionChangedField(this.get_$selectedFields());
				$tab_CommandController.get().remove_commandQueueComplete(postWorldUpdateAction);
			});
			$tab_CommandController.get().add_commandQueueComplete(postWorldUpdateAction);
		}
	}, $tab_Model, [$tab_IHandleNotifications]);
	ss.initClass($tab_DataSourceDataModel, $asm, {
		add_modelUpdated: function DataSourceDataModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function DataSourceDataModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		add_stopNotifying: function DataSourceDataModel$add_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateCombine(this.$2$StopNotifyingField, value);
		},
		remove_stopNotifying: function DataSourceDataModel$remove_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateRemove(this.$2$StopNotifyingField, value);
		},
		get_notificationId: function DataSourceDataModel$get_NotificationId() {
			return 'doc:update-data-source-data-event';
		},
		onNotify: function DataSourceDataModel$OnNotify(pm, context) {
			this.onNotify$1(pm, context);
		},
		onNotify$1: function DataSourceDataModel$OnNotify(newPresModel, context) {
			if (ss.isValue(newPresModel)) {
				this.update(newPresModel, context);
			}
		},
		detachNotifications: function DataSourceDataModel$DetachNotifications() {
			if (!ss.staticEquals(this.$2$StopNotifyingField, null)) {
				this.$2$StopNotifyingField();
			}
		},
		getColumnByName: function DataSourceDataModel$GetColumnByName(fieldName) {
			if (ss.isValue(this.columnInfoLookup)) {
				return this.columnInfoLookup[fieldName];
			}
			return null;
		},
		clearModel: function DataSourceDataModel$ClearModel() {
			this.numRows = 0;
			this.isEmpty = true;
			this.isExtract = false;
			this.columnInfoLookup = null;
			this.dataDictionaryModel = new $tab_DataDictionaryModel(this);
		},
		update: function DataSourceDataModel$Update(dataPM, context) {
			if (ss.isNullOrUndefined(dataPM)) {
				return;
			}
			this.pm = dataPM;
			this.numRows = dataPM.numRows;
			this.isEmpty = dataPM.isEmpty;
			this.isExtract = dataPM.isExtract;
			this.dataDictionaryModel.update(dataPM.dataDictionary);
			this.columnInfoLookup = {};
			for (var $t1 = 0; $t1 < dataPM.columnInfos.length; $t1++) {
				var colInfo = dataPM.columnInfos[$t1];
				var temp = new $tab_DSColumnInfoModel(null);
				temp.update(colInfo);
				var colFieldName = temp.get_fieldName();
				this.columnInfoLookup[colFieldName] = temp;
			}
			this.raiseEvent(this.$2$ModelUpdatedField, context);
		}
	}, $tab_Model, [$tab_IHandleNotifications, $tab_IDetachableNotificationHandler]);
	ss.initEnum($tab_DataSourceFieldSection, $asm, { dimensions: 0, measure: 1, groups: 2, parameters: 3, containers: 4, topLevelDimensions: 5, topLevelMeasures: 6 });
	ss.initClass($tab_DataSourceModel, $asm, {
		add_captionChanged: function DataSourceModel$add_CaptionChanged(value) {
			this.$2$CaptionChangedField = ss.delegateCombine(this.$2$CaptionChangedField, value);
		},
		remove_captionChanged: function DataSourceModel$remove_CaptionChanged(value) {
			this.$2$CaptionChangedField = ss.delegateRemove(this.$2$CaptionChangedField, value);
		},
		add_canAnalyzeDataChanged: function DataSourceModel$add_CanAnalyzeDataChanged(value) {
			this.$2$CanAnalyzeDataChangedField = ss.delegateCombine(this.$2$CanAnalyzeDataChangedField, value);
		},
		remove_canAnalyzeDataChanged: function DataSourceModel$remove_CanAnalyzeDataChanged(value) {
			this.$2$CanAnalyzeDataChangedField = ss.delegateRemove(this.$2$CanAnalyzeDataChangedField, value);
		},
		add_sortOrderChanged: function DataSourceModel$add_SortOrderChanged(value) {
			this.$2$SortOrderChangedField = ss.delegateCombine(this.$2$SortOrderChangedField, value);
		},
		remove_sortOrderChanged: function DataSourceModel$remove_SortOrderChanged(value) {
			this.$2$SortOrderChangedField = ss.delegateRemove(this.$2$SortOrderChangedField, value);
		},
		get_name: function DataSourceModel$get_Name() {
			if (ss.isNullOrUndefined(this.pm) || ss.isNullOrUndefined(this.pm.datasource)) {
				return '';
			}
			return this.pm.datasource;
		},
		get_caption: function DataSourceModel$get_Caption() {
			return this.pm.datasourceCaption;
		},
		get_connectionsTypeSummary: function DataSourceModel$get_ConnectionsTypeSummary() {
			var connectionSummaries = '';
			if (ss.isValue(this.pm) && ss.isValue(this.pm.connectionSummaries)) {
				var firstPass = true;
				for (var $t1 = 0; $t1 < this.pm.connectionSummaries.length; $t1++) {
					var model = this.pm.connectionSummaries[$t1];
					var separator = (firstPass ? '' : ', ');
					var type = model.connectionName.toString().split(String.fromCharCode(46))[0];
					connectionSummaries = connectionSummaries + separator + type;
					firstPass = false;
				}
			}
			return connectionSummaries;
		},
		get_rootFieldsNew: function DataSourceModel$get_RootFieldsNew() {
			return this.baseColumnsModel.rootFieldsNew;
		},
		get_dataSourceLayoutPresModel: function DataSourceModel$get_DataSourceLayoutPresModel() {
			return this.pm.dataSourceLayout;
		},
		get_isHierarchical: function DataSourceModel$get_IsHierarchical() {
			return this.pm.isDsHierarchical;
		},
		get_isParametersDataSource: function DataSourceModel$get_IsParametersDataSource() {
			return ss.equals(this, $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema().get_parametersDataSource());
		},
		get_fieldOrderType: function DataSourceModel$get_FieldOrderType() {
			return (ss.isValue(this.pm) ? this.pm.fieldOrderType : 'datasource-order');
		},
		get_fieldSortOrder: function DataSourceModel$get_FieldSortOrder() {
			return ss.isValue(this.pm) && this.pm.fieldSortOrder;
		},
		get_isDataTabViewSupported: function DataSourceModel$get_IsDataTabViewSupported() {
			return this.pm.isWebDataTabViewSupported;
		},
		get_shouldShowDataSourceConnectionError: function DataSourceModel$get_ShouldShowDataSourceConnectionError() {
			return this.pm.shouldShowDataSourceConnectionError;
		},
		get_shouldShowInSchemaViewer: function DataSourceModel$get_ShouldShowInSchemaViewer() {
			return this.pm.canBeAddedToSchemaViewer;
		},
		get_canAnalyzeData: function DataSourceModel$get_CanAnalyzeData() {
			return ss.isValue(this.pm) && this.pm.canAnalyzeData;
		},
		get_canUseMultipleHierarchies: function DataSourceModel$get_CanUseMultipleHierarchies() {
			return ss.isValue(this.pm) && this.pm.canUseMultipleHierarchies;
		},
		get_measuresHeaderName: function DataSourceModel$get_MeasuresHeaderName() {
			return ((ss.isValue(this.pm) || ss.isNullOrUndefined(this.pm.measuresHeaderName)) ? tab.Strings.AuthSchemaViewerHeaderMeaures : this.pm.measuresHeaderName.toString());
		},
		get_specifiedWidth: function DataSourceModel$get_SpecifiedWidth() {
			return this.$2$SpecifiedWidthField;
		},
		set_specifiedWidth: function DataSourceModel$set_SpecifiedWidth(value) {
			this.$2$SpecifiedWidthField = value;
		},
		getCustomOrders: function DataSourceModel$GetCustomOrders() {
			return this.pm.customFieldOrder;
		},
		getFilteredFields: function DataSourceModel$GetFilteredFields(filter) {
			var fieldList = [];
			var $t1 = this.baseColumnsModel.get_allFields();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var field = $t1[$t2];
				if (filter(field)) {
					fieldList.push(field);
				}
			}
			return fieldList;
		},
		findField: function DataSourceModel$FindField(fn) {
			var foundField = this.baseColumnsModel.findField(fn);
			if (ss.isValue(foundField)) {
				return foundField;
			}
			return (ss.isValue(this.$columnInstancesModel) ? this.$columnInstancesModel.findField(fn) : null);
		},
		findDrillPath: function DataSourceModel$FindDrillPath(drillPathName) {
			return this.baseColumnsModel.findDrillPath(drillPathName);
		},
		findFieldContainer: function DataSourceModel$FindFieldContainer(fieldContainerName) {
			return this.baseColumnsModel.findFieldContainer(fieldContainerName);
		},
		findFolderNew: function DataSourceModel$FindFolderNew(folderName) {
			return this.baseColumnsModel.findFolderNew(folderName);
		},
		findRelationalTable: function DataSourceModel$FindRelationalTable(tableName) {
			return this.baseColumnsModel.findRelationalTable(tableName);
		},
		findCubeFolder: function DataSourceModel$FindCubeFolder(folderName) {
			return this.baseColumnsModel.findCubeFolder(folderName);
		},
		findConnectionSummaryPresModel: function DataSourceModel$FindConnectionSummaryPresModel(connectionConfigName) {
			return _.find(this.pm.connectionSummaries, function(connectionSummary) {
				return ss.referenceEquals(connectionSummary.connectionName, connectionConfigName);
			});
		},
		$raiseCaptionChangedEvent: function DataSourceModel$RaiseCaptionChangedEvent(context) {
			this.raiseEvent(this.$2$CaptionChangedField, context);
		},
		$raiseCanAnalyzeDataChangedEvent: function DataSourceModel$RaiseCanAnalyzeDataChangedEvent(context) {
			this.raiseEvent(this.$2$CanAnalyzeDataChangedField, context);
		},
		$raiseSortOrderChanged: function DataSourceModel$RaiseSortOrderChanged(context) {
			this.raiseEvent(this.$2$SortOrderChangedField, context);
		},
		update: function DataSourceModel$Update(datasourcePresModel, context) {
			if (ss.isNullOrUndefined(datasourcePresModel)) {
				return;
			}
			if (ss.isNullOrUndefined(this.pm) || !ss.referenceEquals(this.pm.datasourceCaption, datasourcePresModel.datasourceCaption)) {
				this.$raiseCaptionChangedEvent(context);
			}
			if (ss.isNullOrUndefined(this.pm) || this.pm.canAnalyzeData !== datasourcePresModel.canAnalyzeData) {
				this.$raiseCanAnalyzeDataChangedEvent(context);
			}
			if (ss.isNullOrUndefined(this.pm) || this.pm.fieldOrderType !== datasourcePresModel.fieldOrderType || this.pm.fieldSortOrder !== datasourcePresModel.fieldSortOrder) {
				this.$raiseSortOrderChanged(context);
			}
			var fieldsMap = this.$initializeFieldsMap();
			var modelNeedsUpdate = false;
			$tab_DataSourceModel.$addPresModelFieldsToMap(datasourcePresModel, fieldsMap, function() {
				modelNeedsUpdate = true;
			});
			if (modelNeedsUpdate) {
				this.baseColumnsModel.update$1(fieldsMap, context);
			}
			if (ss.isValue(datasourcePresModel.columnList)) {
				this.$columnInstancesModel = this.$columnInstancesModel || new $tab_FieldsModel('columnList', this);
				this.$columnInstancesModel.update(datasourcePresModel.columnList, context);
			}
			this.swapAndCopyPresModel(datasourcePresModel);
		},
		$initializeFieldsMap: function DataSourceModel$InitializeFieldsMap() {
			var fieldsMap = {};
			fieldsMap[0] = [];
			fieldsMap[1] = [];
			fieldsMap[2] = [];
			fieldsMap[3] = [];
			fieldsMap[4] = [];
			fieldsMap[5] = [];
			fieldsMap[6] = [];
			return fieldsMap;
		}
	}, $tab_Model);
	ss.initClass($tab_DataSourcesModel, $asm, {
		get_dataSources: function DataSourcesModel$get_DataSources() {
			return _.values(this.$dataSourceModels);
		},
		getDataSource: function DataSourcesModel$GetDataSource(dataSourceName) {
			return this.$dataSourceModels[dataSourceName];
		},
		update: function DataSourcesModel$Update(dataSources, context) {
			var dataSourceNames = _.keys(dataSources);
			for (var $t1 = 0; $t1 < dataSourceNames.length; $t1++) {
				var dataSourceName = dataSourceNames[$t1];
				var dataSourcePM = dataSources[dataSourceName];
				if (dataSourcePM === null) {
					delete this.$dataSourceModels[dataSourceName];
					tab.Log.get(this).debug('Removing data source: %s', [dataSourceName]);
				}
				else {
					var model = this.$dataSourceModels[dataSourceName];
					if (ss.isNullOrUndefined(model)) {
						model = new $tab_DataSourceModel(this, dataSourceName);
						this.$dataSourceModels[dataSourceName] = model;
					}
					model.update(dataSourcePM, context);
				}
			}
			if (ss.isValue(this.pm)) {
				$tab_ModelUtils.mergeMapPresModelDelta(this.pm, dataSources);
			}
			this.swapPresModel(dataSources);
		}
	}, $tab_Model);
	ss.initClass($tab_DeepCompareUtils, $asm, {});
	ss.initInterface($tab_ICommandDispatcher, $asm, { dispatch: null });
	ss.initClass($tab_DefaultCommandDispatcher, $asm, {
		dispatch: function(TParam, TResponse) {
			return function DefaultCommandDispatcher$Dispatch(cmd) {
				var deferred = $.Deferred();
				var successHandler = function(pm) {
					deferred.resolve(new TResponse(pm));
				};
				var failureHandler = function(e) {
					deferred.reject(e);
				};
				var clientCommand = new $tab_ClientCommand(cmd.get_uiBlocking(), cmd.get_localWork(), cmd.get_remoteCommand(), successHandler, failureHandler);
				clientCommand.set_useGlobalConnectionErrorHandling(!cmd.get_suppressConnectionDialog());
				clientCommand.set_commandWaiter(cmd.get_commandWaiter());
				$tab_CommandController.SendCommand(clientCommand);
				return deferred.promise();
			};
		}
	}, null, [$tab_ICommandDispatcher]);
	ss.initInterface($tab_ISessionErrorHandler, $asm, { handleCommandFailure: null });
	ss.initClass($tab_DefaultSessionErrorHandler, $asm, {
		checkForErrorDialogFailure: function DefaultSessionErrorHandler$CheckForErrorDialogFailure(command) {
			var useLocalDialog = false;
			if (ss.isNullOrUndefined(command)) {
				return false;
			}
			if (ss.referenceEquals(command.commandName, { ns: 'tabdoc', cmd: 'show-detailed-error-dialog' }.cmd)) {
				useLocalDialog = true;
			}
			return useLocalDialog;
		},
		handleCommandFailure: function DefaultSessionErrorHandler$HandleCommandFailure(error, xhr, command, noExceptionDialog) {
			if (tabBootstrap.ViewerBootstrap.get_instance().get_sessionBeingCleared()) {
				return false;
			}
			var showLocalDialog = this.checkForErrorDialogFailure(command);
			if (showLocalDialog) {
				this.handleErrorDialogFailure(command);
				return true;
			}
			if (xhr.status === 410 || xhr.status === 404) {
				this.handleSessionExpiration(false);
			}
			else if (xhr.status === 403) {
				ss.Debug.fail('Command denied due to lack of permissions');
			}
			else if (xhr.status === 401) {
				this.handleAuthenticationFailure();
			}
			else if (xhr.status === 502 || xhr.status === 503) {
				this.handleSessionKilled(null);
			}
			else if (xhr.status === 413) {
				this.handleSessionResourceLimitExceeded();
			}
			else if (xhr.status === 408) {
				this.handleSessionTimeoutLimitExceeded();
			}
			else if (xhr.status === 429) {
				this.handleTooManyRequests();
			}
			else if (xhr.status === 0) {
				this.$handleNoResponse(error, xhr);
			}
			else if (ss.isNullOrUndefined(noExceptionDialog) || !noExceptionDialog) {
				this.$displayHttpRequestError(xhr, error);
			}
			return true;
		},
		$handleNoResponse: function DefaultSessionErrorHandler$HandleNoResponse(error, xhr) {
			var status0Handler;
			if (!tab.MiscUtil.isNullOrEmpty$3(xhr.responseText)) {
				var sb = new ss.StringBuilder();
				sb.append('XHR Response Status: 0\nReadyState:');
				sb.append(xhr.readyState);
				sb.append('\nHeaders:\n');
				sb.append(xhr.getAllResponseHeaders());
				sb.append('\nResponse:\n');
				sb.append(xhr.responseText);
				status0Handler = ss.mkdel(this, function() {
					this.$commonDialogProvider.ShowErrorDialog(sb.toString(), tab.Strings.RequestAbortedByBrowser, null);
				});
			}
			else {
				status0Handler = ss.mkdel(this, function() {
					this.$displayHttpRequestError(xhr, error);
				});
			}
			window.setTimeout(status0Handler, 5000);
		},
		handleSessionExpiration: function DefaultSessionErrorHandler$HandleSessionExpiration(limitAttempts) {
			var uriModel = $tab_VizUriModel.createForCurrentWindowLocation(null);
			if (limitAttempts && uriModel.get_retry()) {
				throw new ss.Exception('Failed to re-initialize session');
			}
			this.reloadPage(limitAttempts);
		},
		handleAuthenticationFailure: function DefaultSessionErrorHandler$HandleAuthenticationFailure() {
			this.reloadPage(false);
		},
		$getErrorMessage: function DefaultSessionErrorHandler$GetErrorMessage(xhr, error) {
			var msg = ss.replaceAllString($tab_BaseSession.getErrorMessageFromStringOrException(error), 'XMLHttpTransport.watchInFlight Error: ', '');
			msg = ss.replaceAllString(msg, 'XMLHttpTransport Error: ', '');
			if (xhr.status < 400) {
				msg = tab.Strings.BrowserErrorProcessingMessage + '<br>' + msg;
			}
			else if (xhr.status === 400) {
				msg = tab.Strings.ServerErrorRejectedMessage + '<br>';
			}
			else {
				var show_to_user = xhr.responseText;
				try {
					show_to_user = show_to_user.replace(new RegExp('\n(?=s*[A-Z])', 'g'), '<li>').replace(new RegExp('\n', 'g'), '<br>');
					show_to_user = '<ul><li>' + show_to_user + '</ul>';
				}
				catch ($t1) {
					show_to_user = $tab_ExtraHtmlMarkupRemover.stripOutMarkup(show_to_user);
				}
				if (ss.isNullOrEmptyString(show_to_user)) {
					msg = tab.Strings.ServerErrorGeneral(xhr.status) + '<br>';
				}
				else {
					msg = show_to_user;
				}
			}
			return msg;
		},
		$getErrorTitle: function DefaultSessionErrorHandler$GetErrorTitle(xhr) {
			var title = tab.Strings.ServerErrorUnexpected;
			if (xhr.status < 400) {
				title = tab.Strings.BrowserErrorProcessing;
			}
			else if (xhr.status === 400) {
				title = tab.Strings.ServerErrorRejected;
			}
			return title;
		},
		handleErrorDialogFailure: function DefaultSessionErrorHandler$HandleErrorDialogFailure(command) {
			var title = ss.cast(command.commandParams['errorDialogTitle'], String);
			var msg = ss.cast(command.commandParams['errorShortMessage'], String);
			var details = ss.cast(command.commandParams['errorDetails'], Array);
			if (ss.isValue(details)) {
				msg = ((details.length > 0) ? (msg + '<br/>' + details.join('<br/>')) : msg);
			}
			this.$commonDialogProvider.ShowLocalErrorDialog(msg, title, null);
		},
		$displayHttpRequestError: function DefaultSessionErrorHandler$DisplayHttpRequestError(xhr, error) {
			var title = this.$getErrorTitle(xhr);
			var msg = this.$getErrorMessage(xhr, error);
			if (xhr.status === 0) {
				tab.ErrorTrace.report(new ss.Exception('Error when displaying a DisplayHttpRequestError in the error dialog.'));
			}
			else {
				this.$commonDialogProvider.ShowErrorDialog(msg, title, null);
			}
		},
		$displayConnectionErrorMessage: function DefaultSessionErrorHandler$DisplayConnectionErrorMessage(info, dialogTitle, primaryMessage) {
			info = ss.coalesce(info, '').trim();
			info = $tab_ExtraHtmlMarkupRemover.stripOutMarkup(info);
			var command = new tab.NonApiCommand('tableau.completed', []);
			tabBootstrap.Utility.doPostMessage(command.serialize());
			var msg = tab.Strings.UnhandledExceptionMessage(tsConfig.sessionid, info);
			if (!ss.isNullOrEmptyString(info)) {
				msg += '<br/><br/>';
			}
			msg += primaryMessage;
			var onYes = ss.mkdel(this, function() {
				this.requestSetIgnore();
				document.body.style.cursor = 'wait';
				this.reloadPage(false);
			});
			this.$commonDialogProvider.showConfirmationDialog(msg, dialogTitle, true, onYes, null);
		},
		reloadPage: function DefaultSessionErrorHandler$ReloadPage(addRetryInfo) {
			document.body.style.cursor = 'wait';
			var repositoryUrl = tsConfig.repositoryUrl || tsConfig.origin_repository_url;
			var uriModel = $tab_VizUriModel.createForCurrentWindowLocationAndVizState(repositoryUrl, tsConfig.current_sheet_name);
			uriModel.set_retry(addRetryInfo);
			uriModel.explicitNotGuest = tsConfig.is_authoring && !tsConfig.is_guest;
			uriModel.fullPageLoad(null);
		},
		handleSessionForbiddenAction: function DefaultSessionErrorHandler$HandleSessionForbiddenAction(code, message) {
			var title = tab.Strings.SessionForbiddenActionTitle;
			var msg = tab.Strings.SessionForbiddenActionMsg;
			switch (code) {
				case 16:
				case 20:
				case 22:
				case 60011: {
					msg = message;
					break;
				}
			}
			this.$commonDialogProvider.ShowErrorDialog(msg, title, null);
		},
		handleSessionResourceLimitExceeded: function DefaultSessionErrorHandler$HandleSessionResourceLimitExceeded() {
			var msg = 'Computing the current visualization has exceeded the resource limit.';
			msg += '\n';
			msg += tab.Strings.PressBackButtonMessage;
			var title = 'Resource Limit Exceeded';
			this.$commonDialogProvider.ShowErrorDialog(msg, title, null);
		},
		handleSessionTimeoutLimitExceeded: function DefaultSessionErrorHandler$HandleSessionTimeoutLimitExceeded() {
			if ($tab_DefaultSessionErrorHandler.$limitExceeded) {
				return;
			}
			var msg = tab.Strings.TimeLimitExceededWarning;
			msg += '\n';
			msg += tab.Strings.PressBackButtonMessage;
			var title = tab.Strings.TimeLimitExceededTitle;
			$tab_DefaultSessionErrorHandler.$limitExceeded = true;
			this.$commonDialogProvider.ShowErrorDialog(msg, title, null);
		},
		handleTooManyRequests: function DefaultSessionErrorHandler$HandleTooManyRequests() {
			var msg = tab.Strings.RequestCountExceededWarning;
			msg += '\n';
			msg += tab.Strings.PressBackButtonMessage;
			var title = tab.Strings.RequestCountExceededTitle;
			this.$commonDialogProvider.ShowErrorDialog(msg, title, null);
		},
		handleSessionKilled: function DefaultSessionErrorHandler$HandleSessionKilled(info) {
			this.$displayConnectionErrorMessage(info, tab.Strings.SessionEndedAlertTitle, tab.Strings.SessionEndedAlertMessage);
		},
		handleUnknownErrorStatus: function DefaultSessionErrorHandler$HandleUnknownErrorStatus(info) {
			this.$displayConnectionErrorMessage(info, tab.Strings.SessionUnknownErrorTitle, tab.Strings.SessionEndedAlertMessage);
		},
		requestSetIgnore: function DefaultSessionErrorHandler$RequestSetIgnore() {
			$tab_DefaultSessionErrorHandler.$setIgnore(this.$urlRoot);
		}
	}, null, [$tab_ISessionErrorHandler]);
	ss.initClass($tab_DeferLayoutImpl, $asm, {
		get_isZoomin: function DeferLayoutImpl$get_IsZoomin() {
			return this.$isZoomin;
		},
		set_isZoomin: function DeferLayoutImpl$set_IsZoomin(value) {
			this.$isZoomin = value;
		},
		shouldDeferLayoutUpdates: function DeferLayoutImpl$ShouldDeferLayoutUpdates() {
			return this.$shouldDeferLayoutUpdates;
		},
		setDeferLayoutUpdates: function DeferLayoutImpl$SetDeferLayoutUpdates(b) {
			this.$shouldDeferLayoutUpdates = b;
		}
	});
	ss.initClass($tab_DeferredConnectionsCommandHandler, $asm, {
		handle: function DeferredConnectionsCommandHandler$Handle(error, failedCommand) {
			if (!this.$lazyConnectionsEnabled || ss.isValue(failedCommand) && !failedCommand.get_useGlobalConnectionErrorHandling()) {
				return false;
			}
			if (ss.isNullOrUndefined(error)) {
				return false;
			}
			var errorResponse = tab.DataSourceConnectionAttemptErrorResponse.tryDeserialize$1(error.get_message());
			if (ss.isNullOrUndefined(errorResponse)) {
				return false;
			}
			var status = error['status'];
			if (ss.isNullOrUndefined(status)) {
				ss.Debug.assert($tab_DeferredConnectionsCommandHandler.isBadPasswordError(errorResponse.ErrorType), "errorResponse was parsed, so it means that we've got properly formatted message, but can't get status.");
				return false;
			}
			if (!$tab_DeferredConnectionsCommandHandler.shouldHandleWithGivenStatus(status)) {
				return false;
			}
			this.$handleCommandFailure(failedCommand, errorResponse, null, false);
			return true;
		},
		$handleConnectionAttemptInfo: function DeferredConnectionsCommandHandler$HandleConnectionAttemptInfo(clientCommand, connectionAttemptInfo, isEnsureLayoutForSheetCommand) {
			if (!this.$lazyConnectionsEnabled) {
				return;
			}
			if (isEnsureLayoutForSheetCommand) {
				clientCommand = $tab_DeferredConnectionsCommandHandler.constructEnsureLayoutForSheetCommand();
			}
			if (ss.isNullOrUndefined(clientCommand)) {
				return;
			}
			if (ss.isNullOrUndefined(connectionAttemptInfo) || ss.isNullOrUndefined(connectionAttemptInfo.dataSourceConnectionAttemptInfos) || connectionAttemptInfo.dataSourceConnectionAttemptInfos.length === 0) {
				return;
			}
			var dataSourceConnectionAttemptInfo = this.getFirstDataSource(connectionAttemptInfo);
			var $t1 = new tab.DataSourceConnectionAttemptErrorResponse();
			$t1.ErrorType = dataSourceConnectionAttemptInfo.exceptionType;
			$t1.ErrorMessage = dataSourceConnectionAttemptInfo.exceptionMessage;
			$t1.DataSourceCaption = dataSourceConnectionAttemptInfo.datasourceCaption;
			$t1.ConnectionName = $tab_DataConnectionUtils.connectionNameFromFullConnectionName(dataSourceConnectionAttemptInfo.connectionFullName);
			$t1.ConnectionClass = ((ss.isValue(dataSourceConnectionAttemptInfo.exceptionAttrs) && ss.keyExists(dataSourceConnectionAttemptInfo.exceptionAttrs, $tab_DataConnectionUtils.exceptionAttributesClass)) ? dataSourceConnectionAttemptInfo.exceptionAttrs[$tab_DataConnectionUtils.exceptionAttributesClass] : null);
			var errorResponse = $t1;
			if ($tab_DeferredConnectionsCommandHandler.isBadPasswordError(dataSourceConnectionAttemptInfo.exceptionType)) {
				var path = $tab_DeferredConnectionsCommandHandler.$createRedirectPath(dataSourceConnectionAttemptInfo);
				errorResponse.RedirectUrl = path;
			}
			else {
				errorResponse.ErrorMessage = dataSourceConnectionAttemptInfo.exceptionMessage;
			}
			if (this.$handleSupportedFileBasedConnectionIfApplicable(clientCommand, errorResponse, connectionAttemptInfo)) {
				return;
			}
			var suppressAutomaticPopup = !dataSourceConnectionAttemptInfo.triedToConnect;
			this.$handleCommandFailure(clientCommand, errorResponse, connectionAttemptInfo, suppressAutomaticPopup);
		},
		handlePotentialDataSourceException: function DeferredConnectionsCommandHandler$HandlePotentialDataSourceException(c, layoutStatus, isEnsureLayoutForSheetCommand) {
			if (!this.$lazyConnectionsEnabled || ss.isValue(c) && !c.get_useGlobalConnectionErrorHandling()) {
				return;
			}
			if (!ss.isNullOrUndefined(layoutStatus)) {
				this.$handleConnectionAttemptInfo(c, layoutStatus.connectionAttemptInfo, isEnsureLayoutForSheetCommand);
			}
		},
		handlePotentialBootstrapDataSourceException: function DeferredConnectionsCommandHandler$HandlePotentialBootstrapDataSourceException(bootstrapResponse) {
			if (!this.$lazyConnectionsEnabled) {
				return;
			}
			if (!ss.isNullOrUndefined(bootstrapResponse)) {
				this.$handleConnectionAttemptInfo(null, bootstrapResponse.connectionAttemptInfo, true);
			}
		},
		getFirstDataSource: function DeferredConnectionsCommandHandler$GetFirstDataSource(connectionAttempt) {
			return (ss.isValue(connectionAttempt) ? connectionAttempt.dataSourceConnectionAttemptInfos[0] : null);
		},
		$handleCommandFailure: function DeferredConnectionsCommandHandler$HandleCommandFailure(command, errorResponse, connectionAttemptInfo, suppressAutomaticPopup) {
			ss.Debug.assert(!ss.isNullOrUndefined(command), 'Command must be passed so it can be retried');
			if ($tab_DeferredConnectionsCommandHandler.isBadOAuthCredentialsError(errorResponse.ErrorType)) {
				tab.WindowHelper.locationReplace(window.self, errorResponse.RedirectUrl);
				return;
			}
			if (!ss.isNullOrEmptyString(errorResponse.RedirectUrl)) {
				var skipPopupArg = (suppressAutomaticPopup ? '&skippopup=1' : '');
				errorResponse.RedirectUrl = ss.formatString('{0}{1}&vizqlSessionId={2}', errorResponse.RedirectUrl, skipPopupArg, tsConfig.sessionid);
			}
			command.reEnqueueCompletedCommandRecords();
			var onProceed = function() {
				command.clearCommandResults();
				$tab_CommandController.SendCommand(command);
			};
			var onCancel = ss.mkdel(command, command.triggerCallbacks);
			var isEnsureLayoutForSheetCommand = ss.isValue(command.get_commandName()) && ss.equalsT(command.get_commandName(), { ns: 'tabsrv', cmd: 'ensure-layout-for-sheet' }.cmd);
			var isEditDataSourceCommand = ss.isValue(command.get_commandName()) && ss.equalsT(command.get_commandName(), { ns: 'tabdoc', cmd: 'change-workbook-ui-mode' }.cmd);
			var isBadPasswordError = $tab_DeferredConnectionsCommandHandler.isBadPasswordError(errorResponse.ErrorType);
			if (isEnsureLayoutForSheetCommand) {
				this.$handleConnectionErrorForEnsureLayoutForSheetCommand(errorResponse, connectionAttemptInfo, isBadPasswordError, onProceed);
			}
			else {
				this.$handleConnectionErrorForNonEnsureLayoutForSheetCommand(errorResponse, connectionAttemptInfo, isBadPasswordError, isEditDataSourceCommand, onProceed, onCancel);
			}
		},
		$handleConnectionErrorForEnsureLayoutForSheetCommand: function DeferredConnectionsCommandHandler$HandleConnectionErrorForEnsureLayoutForSheetCommand(errorResponse, connectionAttemptInfo, isBadPasswordError, onProceed) {
			var dataSourceConnectionAttemptInfo = this.getFirstDataSource(connectionAttemptInfo);
			var showAuthOverlay = ss.mkdel(this, function() {
				this.$commonDialogProvider.showSheetAuthenticationOverlay(errorResponse, connectionAttemptInfo, onProceed);
			});
			if (isBadPasswordError) {
				if (dataSourceConnectionAttemptInfo.triedToConnect) {
					if (!$tab_TabbedAuthenticationDialogCommands.useTabbedAuthDialog(connectionAttemptInfo)) {
						this.$commonDialogProvider.showConnectionSignInDialog(connectionAttemptInfo, false).done([onProceed]).fail([showAuthOverlay]);
					}
					else {
						var signInDialogIDeferred = this.$commonDialogProvider.showConnectionSignInDialog(connectionAttemptInfo, false);
						var resolvedCallback = function(dummyPresModel, dummyContext) {
							signInDialogIDeferred.resolve();
						};
						var rejectCallback = function(dummyPresModel1, dummyContext1) {
							signInDialogIDeferred.reject();
						};
						$tab_ApplicationModel.get_instance().registerNotificationHandler('doc:tabbed-auth-dialog-closed-event', rejectCallback);
						$tab_ApplicationModel.get_instance().registerNotificationHandler('doc:tabbed-auth-dialog-connected-event', resolvedCallback);
						signInDialogIDeferred.done([onProceed]).fail([showAuthOverlay]);
					}
				}
				else {
					showAuthOverlay();
				}
			}
			else {
				$tab_DeferredConnectionsCommandHandler.$isShowEditConnectionInformationDialogApplicable(dataSourceConnectionAttemptInfo).done(ss.mkdel(this, function(isApplicable) {
					if (isApplicable) {
						this.$commonDialogProvider.showEditConnectionInformationDialog(dataSourceConnectionAttemptInfo, false).done(ss.mkdel(this, function(handled) {
							if (!handled) {
								$tab_SheetClientCommands.ensureLayoutForSheet(tsConfig.current_sheet_name);
								this.$commonDialogProvider.showGenericDataSourceErrorOverlay(errorResponse, dataSourceConnectionAttemptInfo, onProceed);
							}
						}));
					}
					else {
						this.$commonDialogProvider.showGenericDataSourceErrorOverlay(errorResponse, dataSourceConnectionAttemptInfo, onProceed);
					}
				}));
			}
		},
		$handleConnectionErrorForNonEnsureLayoutForSheetCommand: function DeferredConnectionsCommandHandler$HandleConnectionErrorForNonEnsureLayoutForSheetCommand(errorResponse, connectionAttemptInfo, isBadPasswordError, isEditDataSourceCommand, onProceed, onCancel) {
			var dataSourceConnectionInfo = this.getFirstDataSource(connectionAttemptInfo);
			if (isBadPasswordError && !isEditDataSourceCommand) {
				if (!$tab_TabbedAuthenticationDialogCommands.useTabbedAuthDialog(connectionAttemptInfo)) {
					this.$commonDialogProvider.showConnectionSignInDialog(connectionAttemptInfo, isEditDataSourceCommand).done([onProceed]).fail([onCancel]);
				}
				else {
					var signInDialogIDeferred = this.$commonDialogProvider.showConnectionSignInDialog(connectionAttemptInfo, false);
					var resolvedCallback = function(dummyPresModel, dummyContext) {
						signInDialogIDeferred.resolve();
					};
					var rejectCallback = function(dummyPresModel1, dummyContext1) {
						signInDialogIDeferred.reject();
					};
					$tab_ApplicationModel.get_instance().registerNotificationHandler('doc:tabbed-auth-dialog-closed-event', rejectCallback);
					$tab_ApplicationModel.get_instance().registerNotificationHandler('doc:tabbed-auth-dialog-connected-event', resolvedCallback);
					signInDialogIDeferred.done([onProceed]);
				}
			}
			else {
				$tab_DeferredConnectionsCommandHandler.$isShowEditConnectionInformationDialogApplicable(dataSourceConnectionInfo).done(ss.mkdel(this, function(isApplicable) {
					if (isApplicable) {
						this.$commonDialogProvider.showEditConnectionInformationDialog(dataSourceConnectionInfo, isEditDataSourceCommand).done(function(handled) {
							if (!handled && !isEditDataSourceCommand) {
								$tab_SheetClientCommands.ensureLayoutForSheet(tsConfig.current_sheet_name);
							}
							onCancel();
						});
					}
					else if (isBadPasswordError) {
						if (!$tab_TabbedAuthenticationDialogCommands.useTabbedAuthDialog(connectionAttemptInfo)) {
							this.$commonDialogProvider.showConnectionSignInDialog(connectionAttemptInfo, isEditDataSourceCommand).done([onProceed]).fail([onCancel]);
						}
						else {
							var signInDialogIDeferred1 = this.$commonDialogProvider.showConnectionSignInDialog(connectionAttemptInfo, false);
							var resolvedCallback1 = function(dummyPresModel2, dummyContext2) {
								signInDialogIDeferred1.resolve();
							};
							var rejectCallback1 = function(dummyPresModel3, dummyContext3) {
								signInDialogIDeferred1.reject();
							};
							$tab_ApplicationModel.get_instance().registerNotificationHandler('doc:tabbed-auth-dialog-closed-event', rejectCallback1);
							$tab_ApplicationModel.get_instance().registerNotificationHandler('doc:tabbed-auth-dialog-connected-event', resolvedCallback1);
							signInDialogIDeferred1.done([onProceed]).fail([onCancel]);
						}
					}
					else {
						this.$commonDialogProvider.showGenericDataSourceErrorDialog(errorResponse, onProceed, onCancel);
					}
				}));
			}
		},
		$handleSupportedFileBasedConnectionIfApplicable: function DeferredConnectionsCommandHandler$HandleSupportedFileBasedConnectionIfApplicable(command, errorResponse, connectionAttemptInfo) {
			var dataSourceConnectionAttemptInfo = this.getFirstDataSource(connectionAttemptInfo);
			if ($tab_DeferredConnectionsCommandHandler.$isDsConnectionErrorEditConnectionDialogEnabled() && dataSourceConnectionAttemptInfo.connectionErrorType === 'exception-while-connecting' && ss.isValue(errorResponse.ConnectionClass)) {
				var connectionClass = errorResponse.ConnectionClass;
				if (!ss.contains($tab_ConnectionClass.get_getSupportedFileClasses(), connectionClass)) {
					return false;
				}
				command.reEnqueueCompletedCommandRecords();
				var retryCommand = function() {
					command.clearCommandResults();
					$tab_CommandController.SendCommand(command);
				};
				if (dataSourceConnectionAttemptInfo.connectionErrorStage === 'create-protocol-failed') {
					if (this.$showMissingFileDialogIfSupported(command, errorResponse, connectionAttemptInfo, connectionClass, retryCommand)) {
						return true;
					}
				}
				if (dataSourceConnectionAttemptInfo.connectionErrorStage === 'load-metadata-failed' && $tab_ApplicationModel.get_instance().get_workbook().get_uiMode() !== 'data-tab' && $tab_DataConnectionUtils.isEditConnectionForFilesSupported(connectionClass)) {
					var promise = this.$commonDialogProvider.showEditConnectionInformationDialog(dataSourceConnectionAttemptInfo, false);
					promise.done(ss.mkdel(this, function(handled) {
						if (!handled) {
							this.$handleCommandFailure(command, errorResponse, connectionAttemptInfo, !dataSourceConnectionAttemptInfo.triedToConnect);
						}
					}));
					return true;
				}
			}
			return false;
		},
		$showMissingFileDialogIfSupported: function DeferredConnectionsCommandHandler$ShowMissingFileDialogIfSupported(command, errorResponse, connectionAttemptInfo, connectionClass, retryCommand) {
			var dataSourceConnectionAttemptInfo = this.getFirstDataSource(connectionAttemptInfo);
			var connectionName = $tab_DataConnectionUtils.connectionNameFromFullConnectionName(dataSourceConnectionAttemptInfo.connectionFullName);
			if (ss.referenceEquals(connectionClass, $tab_ConnectionClass.excel) || connectionClass === 'excel-direct') {
				var missingFilename = '';
				if (ss.keyExists(dataSourceConnectionAttemptInfo.exceptionAttrs, $tab_DataConnectionUtils.exceptionAttributesFilename)) {
					var missingFilePath = dataSourceConnectionAttemptInfo.exceptionAttrs[$tab_DataConnectionUtils.exceptionAttributesFilename];
					missingFilename = $tab_DataConnectionUtils.stripDirectoryFromPath(missingFilePath);
				}
				var promise = this.$commonDialogProvider.showConnectionMissingFileDialog(missingFilename, connectionName, 'excel-direct');
				promise.done(ss.mkdel(this, function(handled) {
					if (!handled) {
						this.$handleCommandFailure(command, errorResponse, connectionAttemptInfo, !dataSourceConnectionAttemptInfo.triedToConnect);
					}
					else {
						retryCommand();
					}
				}));
				return true;
			}
			else if (connectionClass === 'textscan') {
				var missingDirectory = '';
				if (ss.keyExists(dataSourceConnectionAttemptInfo.exceptionAttrs, $tab_DataConnectionUtils.exceptionAttributesDirectory)) {
					missingDirectory = dataSourceConnectionAttemptInfo.exceptionAttrs[$tab_DataConnectionUtils.exceptionAttributesDirectory];
				}
				var promise1 = this.$commonDialogProvider.showConnectionMissingFileDialog(missingDirectory, connectionName, 'textscan');
				promise1.done(ss.mkdel(this, function(handled1) {
					if (!handled1) {
						this.$handleCommandFailure(command, errorResponse, connectionAttemptInfo, !dataSourceConnectionAttemptInfo.triedToConnect);
					}
					else {
						retryCommand();
					}
				}));
				return true;
			}
			return false;
		}
	});
	ss.initClass($tab_DeferredConnectionsSessionErrorHandler, $asm, {
		handleCommandFailure: function DeferredConnectionsSessionErrorHandler$HandleCommandFailure(error, xhr, command, noExceptionDialog) {
			if (!this.$lazyConnectionsEnabled) {
				return false;
			}
			if (!$tab_DeferredConnectionsCommandHandler.shouldHandleWithGivenStatus(xhr.status)) {
				return false;
			}
			var errorResponse = tab.DataSourceConnectionAttemptErrorResponse.tryDeserialize$1(xhr.responseText);
			if (ss.isNullOrUndefined(errorResponse)) {
				return false;
			}
			return true;
		}
	}, null, [$tab_ISessionErrorHandler]);
	ss.initInterface($tab_IModelEventHandler, $asm, { processEvent: null });
	ss.initClass($tab_DeferredModelEventHandler, $asm, {
		dispose: function DeferredModelEventHandler$Dispose() {
			this.fireDeferredEvents();
		},
		fireDeferredEvents: function DeferredModelEventHandler$FireDeferredEvents() {
			tab.Log.get(this).debug('FireDeferredEvents', []);
			var eventsCopy = this.$deferredEvents;
			this.$deferredEvents = null;
			if (ss.isNullOrUndefined(eventsCopy)) {
				return;
			}
			for (var $t1 = 0; $t1 < eventsCopy.length; $t1++) {
				var deferredEvent = eventsCopy[$t1];
				try {
					deferredEvent();
				}
				catch ($t2) {
					var e = ss.Exception.wrap($t2);
					tab.Logger.getLogger($tab_ApplicationModel, null).warn('Error when processing deferred event', [e]);
					if (!ss.staticEquals(this.exceptionHandler, null)) {
						this.exceptionHandler(e);
					}
				}
			}
		},
		processEvent: function DeferredModelEventHandler$ProcessEvent(a) {
			if (ss.isNullOrUndefined(this.$deferredEvents)) {
				this.$deferredEvents = [];
			}
			this.$deferredEvents.push(a);
		}
	}, null, [$tab_IModelEventHandler, ss.IDisposable]);
	ss.initClass($tab_DeviceLayoutInfoItemModel, $asm, {
		add_layoutInfoUpdated: function DeviceLayoutInfoItemModel$add_LayoutInfoUpdated(value) {
			this.$2$LayoutInfoUpdatedField = ss.delegateCombine(this.$2$LayoutInfoUpdatedField, value);
		},
		remove_layoutInfoUpdated: function DeviceLayoutInfoItemModel$remove_LayoutInfoUpdated(value) {
			this.$2$LayoutInfoUpdatedField = ss.delegateRemove(this.$2$LayoutInfoUpdatedField, value);
		},
		get_presetSizes: function DeviceLayoutInfoItemModel$get_PresetSizes() {
			return this.$presetSizes;
		},
		get_defaultWidth: function DeviceLayoutInfoItemModel$get_DefaultWidth() {
			return this.pm.defaultWidth;
		},
		get_defaultHeight: function DeviceLayoutInfoItemModel$get_DefaultHeight() {
			return this.pm.defaultHeight;
		},
		get_defaultMaxWidth: function DeviceLayoutInfoItemModel$get_DefaultMaxWidth() {
			return this.pm.maxWidth;
		},
		get_defaultMaxHeight: function DeviceLayoutInfoItemModel$get_DefaultMaxHeight() {
			return this.pm.maxHeight;
		},
		get_defaultMinWidth: function DeviceLayoutInfoItemModel$get_DefaultMinWidth() {
			return this.pm.minWidth;
		},
		get_defaultMinHeight: function DeviceLayoutInfoItemModel$get_DefaultMinHeight() {
			return this.pm.minHeight;
		},
		update: function DeviceLayoutInfoItemModel$Update(deviceLayoutInfoItemPresModel, context) {
			if (ss.isValue(deviceLayoutInfoItemPresModel.presetSizesList)) {
				this.$presetSizes.length = 0;
				for (var i = 0; i < deviceLayoutInfoItemPresModel.presetSizesList.sizeItems.length; i++) {
					var sizeItem = new $tab_SizeItemModel(this.$presetSizesArray, i);
					sizeItem.update(deviceLayoutInfoItemPresModel.presetSizesList.sizeItems[i], context);
					this.$presetSizes.push(sizeItem);
				}
			}
			this.simpleSwapToUpdate(deviceLayoutInfoItemPresModel, this.$2$LayoutInfoUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_DialogPlugins, $asm, {});
	ss.initClass($tab_DifferenceTableCalcModel, $asm, {
		add_modelUpdated: function DifferenceTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function DifferenceTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$differencePresModel: function DifferenceTableCalcModel$get_DifferencePresModel() {
			return this.pm;
		},
		get_referenceModel: function DifferenceTableCalcModel$get_ReferenceModel() {
			return this.$3$ReferenceModelField;
		},
		set_referenceModel: function DifferenceTableCalcModel$set_ReferenceModel(value) {
			this.$3$ReferenceModelField = value;
		},
		get_computeCompoundedRate: function DifferenceTableCalcModel$get_ComputeCompoundedRate() {
			return this.get_$differencePresModel().computeCompoundedRate;
		},
		get_computeCompoundedRateState: function DifferenceTableCalcModel$get_ComputeCompoundedRateState() {
			return this.get_$differencePresModel().computeCompoundedRateState;
		},
		update: function DifferenceTableCalcModel$Update(newPresModel, context) {
			var newDifferencePresModel = newPresModel;
			if (this.isNewPresModelSameAsOld(newDifferencePresModel)) {
				return;
			}
			this.swapAndCopyPresModel(newDifferencePresModel);
			this.get_referenceModel().update(newDifferencePresModel.tableCalcReferenceOptionsPresModel, context);
			this.raiseEvent(this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_DisplayDataAlertCmd, $asm, {
		invoke: function DisplayDataAlertCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'display-data-alert' }, this.cmdParams));
		},
		validateInvokeParams: function DisplayDataAlertCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dataAlertSpecSerializedText')) {
				throw new ss.Exception('missing param DocParams.DataAlertSpecSerializedText');
			}
			if (!ss.keyExists(this.cmdParams, 'dataAlertDialogMode')) {
				throw new ss.Exception('missing param DocParams.DataAlertDialogMode');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DisplayDataAlertCmd$Response]));
	ss.initClass($tab_DisplayDataAlertCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_DoubleClickRegionNoReturnServerCmd, $asm, {
		invoke: function DoubleClickRegionNoReturnServerCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'double-click-region-no-return-server' }, this.cmdParams));
		},
		validateInvokeParams: function DoubleClickRegionNoReturnServerCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'regionPoint')) {
				throw new ss.Exception('missing param DocParams.RegionPoint');
			}
			if (!ss.keyExists(this.cmdParams, 'r')) {
				throw new ss.Exception('missing param DocParams.VizImageRegion');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DoubleClickRegionNoReturnServerCmd$Response]));
	ss.initClass($tab_DoubleClickRegionNoReturnServerCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_FontProperties, $asm, {
		get_fontFamily: function FontProperties$get_FontFamily() {
			return this.$internalFamily;
		},
		set_fontFamily: function FontProperties$set_FontFamily(value) {
			this.$internalFamily = value;
			this.$hash = '';
		},
		get_weight: function FontProperties$get_Weight() {
			return this.$internalWeight;
		},
		set_weight: function FontProperties$set_Weight(value) {
			if (ss.isNullOrEmptyString(value)) {
				this.$internalWeight = $tab_FontProperties.defaultWeight;
			}
			else {
				this.$internalWeight = value;
			}
			this.$hash = '';
		},
		get_style: function FontProperties$get_Style() {
			return this.$internalStyle;
		},
		set_style: function FontProperties$set_Style(value) {
			if (ss.isNullOrEmptyString(value)) {
				this.$internalStyle = $tab_FontProperties.defaultStyle;
			}
			else {
				this.$internalStyle = value;
			}
			this.$hash = '';
		},
		get_hash: function FontProperties$get_Hash() {
			if (this.$hash === '') {
				this.$hash = this.get_fontFamily().replace($tab_FontProperties.matchQuotes, '').toLowerCase() + $tab_FontProperties.hashSeparator + this.$internalWeight.toLowerCase() + $tab_FontProperties.hashSeparator + this.$internalStyle.toLowerCase();
			}
			return this.$hash;
		},
		equals$1: function FontProperties$Equals(compare) {
			var thisFontNameNoQuotes = ss.replaceAllString(ss.replaceAllString(this.get_fontFamily(), "'", ''), '"', '');
			var compareFontNameNoQuotes = ss.replaceAllString(ss.replaceAllString(compare.get_fontFamily(), "'", ''), '"', '');
			return ss.compareStrings(thisFontNameNoQuotes, compareFontNameNoQuotes, true) === 0 && ss.compareStrings(this.get_weight(), compare.get_weight(), true) === 0 && ss.compareStrings(this.get_style(), compare.get_style(), true) === 0;
		}
	});
	ss.initClass($tab_DownloadableFontProperties, $asm, {
		get_source: function DownloadableFontProperties$get_Source() {
			return ss.formatString("url('{0}2') format('woff2'), url('{0}') format('woff')", ss.coalesce(this.woffLocation, ''));
		},
		clone: function DownloadableFontProperties$Clone() {
			var $t1 = new $tab_DownloadableFontProperties();
			$t1.set_fontFamily(this.get_fontFamily());
			$t1.set_style(this.get_style());
			$t1.set_weight(this.get_weight());
			$t1.woffLocation = this.woffLocation;
			return $t1;
		},
		equals$2: function DownloadableFontProperties$Equals(compare) {
			return this.equalsIgnoreWoff(compare) && ss.compareStrings(this.woffLocation, compare.woffLocation, true) === 0;
		},
		equalsIgnoreWoff: function DownloadableFontProperties$EqualsIgnoreWoff(compare) {
			return this.equals$1(compare);
		},
		toCSSRules: function DownloadableFontProperties$ToCSSRules() {
			ss.Debug.assert(!tab.MiscUtil.isNullOrEmpty$3(this.woffLocation), 'Font resource URL not set');
			var cssRules = {};
			cssRules['font-family'] = tab.FontUtil.addQuotationMarks(this.get_fontFamily(), true);
			cssRules['font-weight'] = this.get_weight();
			cssRules['font-style'] = this.get_style();
			cssRules['src'] = this.get_source();
			return cssRules;
		}
	}, $tab_FontProperties);
	ss.initClass($tab_DownloadableFontPropertiesExtensions, $asm, {});
	ss.initClass($tab_DownloadAsVersionCmd, $asm, {
		validateInvokeParams: function DownloadAsVersionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'targetVersion')) {
				throw new ss.Exception('missing param DocParams.TargetVersion');
			}
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_DownloadAsVersionCmd$Response]));
	ss.initClass($tab_DownloadAsVersionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_DownloadAsVersionCommand, $asm, {
		do$1: function DownloadAsVersionCommand$Do() {
			var targetVersion = ss.safeCast(this.cmdParams['targetVersion'], String);
			$tab_ToolbarServerCommands.downloadWorkbook(null, targetVersion);
		}
	}, $tab_DownloadAsVersionCmd);
	ss.initClass($tab_DownloadWorkbookCmd, $asm, {
		validateInvokeParams: function DownloadWorkbookCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'urlString')) {
				throw new ss.Exception('missing param DocParams.URLString');
			}
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_DownloadWorkbookCmd$Response]));
	ss.initClass($tab_DownloadWorkbookCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initInterface($tab_IDrawItemFontExtractor, $asm, { canExtractFont: null, extractFontFromPresModel: null });
	ss.initClass($tab_DrawItemFontExtractor, $asm, {
		canExtractFont: function DrawItemFontExtractor$CanExtractFont(model) {
			return model.type === 'draw-text-props';
		},
		extractFontFromPresModel: function DrawItemFontExtractor$ExtractFontFromPresModel(model) {
			if (!this.canExtractFont(model)) {
				return null;
			}
			var textPropsPresModel = model;
			var fontName = textPropsPresModel.fontName;
			if (ss.isNullOrEmptyString(fontName)) {
				return null;
			}
			var fontProperties = [];
			var $t1 = new $tab_FontProperties();
			$t1.set_fontFamily(fontName);
			$t1.set_weight((textPropsPresModel.isBold ? $tab_DrawItemFontExtractor.boldWeight : $tab_DrawItemFontExtractor.normalWeight));
			fontProperties.push($t1);
			return fontProperties;
		}
	}, null, [$tab_IDrawItemFontExtractor]);
	ss.initClass($tab_DrillPathModel, $asm, {
		get_levels: function DrillPathModel$get_Levels() {
			return this.$levels;
		},
		get_childToSelect: function DrillPathModel$get_ChildToSelect() {
			return this.$levels[0];
		},
		get_instanceType: function DrillPathModel$get_InstanceType() {
			return 'drillPath';
		},
		get_canHaveChildren: function DrillPathModel$get_CanHaveChildren() {
			return true;
		},
		update: function DrillPathModel$Update(pm, newLevels) {
			this.swapAndCopyPresModel(pm);
			this.$levels = newLevels;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_DrillPathModelFactory, $asm, {});
	ss.initClass($tab_DropOnDashboardCmd, $asm, {
		invoke: function DropOnDashboardCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-on-dashboard' }, this.cmdParams));
		},
		validateInvokeParams: function DropOnDashboardCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'addAsFloating')) {
				throw new ss.Exception('missing param DocParams.AddAsFloating');
			}
			if (!ss.keyExists(this.cmdParams, 'dropLocation')) {
				throw new ss.Exception('missing param DocParams.DropLocation');
			}
			if (!ss.keyExists(this.cmdParams, 'zoneType')) {
				throw new ss.Exception('missing param DocParams.ZoneType');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DropOnDashboardCmd$Response]));
	ss.initClass($tab_DropOnDashboardCmd$Response, $asm, {
		hasZoneID: function Response$HasZoneID() {
			return ss.keyExists(this.$$cmdParams, 'zoneId');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_DropOnSchemaDrillPathCmd, $asm, {
		invoke: function DropOnSchemaDrillPathCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-on-schema-drill-path' }, this.cmdParams));
		},
		validateInvokeParams: function DropOnSchemaDrillPathCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'drillPathName')) {
				throw new ss.Exception('missing param DocParams.DrillPathName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DropOnSchemaDrillPathCmd$Response]));
	ss.initClass($tab_DropOnSchemaDrillPathCmd$Response, $asm, {
		hasDropCommand: function Response$HasDropCommand() {
			return ss.keyExists(this.$$cmdParams, 'dropCommandModel');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_DropOnSchemaFieldCmd, $asm, {
		invoke: function DropOnSchemaFieldCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-on-schema-field' }, this.cmdParams));
		},
		validateInvokeParams: function DropOnSchemaFieldCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fieldNameLocal')) {
				throw new ss.Exception('missing param DocParams.FieldNameLocal');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DropOnSchemaFieldCmd$Response]));
	ss.initClass($tab_DropOnSchemaFieldCmd$Response, $asm, {
		hasDropCommand: function Response$HasDropCommand() {
			return ss.keyExists(this.$$cmdParams, 'dropCommandModel');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_DropOnSchemaSectionCmd, $asm, {
		invoke: function DropOnSchemaSectionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-on-schema-section' }, this.cmdParams));
		},
		validateInvokeParams: function DropOnSchemaSectionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'folderRole')) {
				throw new ss.Exception('missing param DocParams.FolderRole');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_DropOnSchemaSectionCmd$Response]));
	ss.initClass($tab_DropOnSchemaSectionCmd$Response, $asm, {
		hasDropCommand: function Response$HasDropCommand() {
			return ss.keyExists(this.$$cmdParams, 'dropCommandModel');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_DSColumnInfoModel, $asm, {
		get_dataType: function DSColumnInfoModel$get_DataType() {
			if (ss.isNullOrUndefined(this.pm)) {
				return 'unknown';
			}
			return this.pm.dataType;
		},
		get_fieldName: function DSColumnInfoModel$get_FieldName() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.fn;
		},
		get_valueIndexs: function DSColumnInfoModel$get_ValueIndexs() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.valueIndices;
		},
		get_aliasIndexs: function DSColumnInfoModel$get_AliasIndexs() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.aliasIndices;
		},
		get_formattedValueIndexs: function DSColumnInfoModel$get_FormattedValueIndexs() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.formatValIdxs;
		},
		get_stringCollation: function DSColumnInfoModel$get_StringCollation() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			return this.pm.stringCollation;
		},
		update: function DSColumnInfoModel$Update(newColInfoPM) {
			if (ss.isValue(newColInfoPM)) {
				this.pm = newColInfoPM;
			}
		}
	}, $tab_Model);
	ss.initClass($tab_EditObjectCaptionCmd, $asm, {
		invoke: function EditObjectCaptionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'edit-object-caption' }, this.cmdParams));
		},
		validateInvokeParams: function EditObjectCaptionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dataObjectModelObjectId')) {
				throw new ss.Exception('missing param DocParams.DataObjectModelObjectId');
			}
			if (!ss.keyExists(this.cmdParams, 'objectCaption')) {
				throw new ss.Exception('missing param DocParams.ObjectCaption');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EditObjectCaptionCmd$Response]));
	ss.initClass($tab_EditObjectCaptionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_EditValueWidgetModel, $asm, {
		add_modelUpdated: function EditValueWidgetModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function EditValueWidgetModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		get_$editValueWidgetPresModel: function EditValueWidgetModel$get_EditValueWidgetPresModel() {
			return this.pm;
		},
		get_selectedParameter: function EditValueWidgetModel$get_SelectedParameter() {
			var selectedParameter = this.get_$editValueWidgetPresModel().fieldCaptionPair;
			if (ss.isNullOrUndefined(selectedParameter)) {
				return null;
			}
			return { key: selectedParameter.fieldCaption, value: selectedParameter.fn };
		},
		get_parameters: function EditValueWidgetModel$get_Parameters() {
			return _.map(this.get_$editValueWidgetPresModel().fieldCaptionPairs, function(p) {
				return { key: p.fieldCaption, value: p.fn };
			});
		},
		get_selectedValue: function EditValueWidgetModel$get_SelectedValue() {
			return this.get_$editValueWidgetPresModel().selectedValue;
		},
		set_selectedValue: function EditValueWidgetModel$set_SelectedValue(value) {
			this.get_$editValueWidgetPresModel().selectedValue = value;
		},
		get_enterValueText: function EditValueWidgetModel$get_EnterValueText() {
			return this.get_$editValueWidgetPresModel().enterValueText;
		},
		get_isCustomValueEnabled: function EditValueWidgetModel$get_IsCustomValueEnabled() {
			return this.get_$editValueWidgetPresModel().isCustomValueEnabled;
		},
		get_precannedValues: function EditValueWidgetModel$get_PrecannedValues() {
			var values = [];
			var $t1 = this.get_$editValueWidgetPresModel().precannedDataValues;
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var value = $t1[$t2];
				values.push(value);
			}
			return values;
		},
		update: function EditValueWidgetModel$Update(editValueWidgetPresModel, context) {
			this.swapPresModel(editValueWidgetPresModel);
			this.raiseEvent(this.$2$ModelUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ErrorHandlerChain, $asm, {
		get_length: function ErrorHandlerChain$get_Length() {
			return this.$errorHandlers.length;
		},
		handle: function ErrorHandlerChain$Handle(error, xhr, command, noExceptionDialog) {
			var handlers = this.$errorHandlers;
			for (var i = 0; i < handlers.length; i++) {
				var handler = handlers[i];
				if (handler.handleCommandFailure(error, xhr, command, noExceptionDialog)) {
					return;
				}
			}
		},
		indexOf: function ErrorHandlerChain$IndexOf(searchType) {
			var position = 0;
			for (var $t1 = 0; $t1 < this.$errorHandlers.length; $t1++) {
				var handler = this.$errorHandlers[$t1];
				if (ss.referenceEquals(ss.getInstanceType(handler), searchType)) {
					return position;
				}
				position += 1;
			}
			return -1;
		}
	});
	ss.initClass($tab_EstablishCloudConnectionCmd, $asm, {
		invoke: function EstablishCloudConnectionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'establish-cloud-connection' }, this.cmdParams));
		},
		validateInvokeParams: function EstablishCloudConnectionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionConfigName')) {
				throw new ss.Exception('missing param DocParams.ConfigName');
			}
			if (!ss.keyExists(this.cmdParams, 'widgetConnectionParams')) {
				throw new ss.Exception('missing param DocParams.ConnectionWidgetParams');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EstablishCloudConnectionCmd$Response]));
	ss.initClass($tab_EstablishCloudConnectionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'connectionConfigName')) {
				throw new ss.Exception('missing param DocParams.ConfigName');
			}
		}
	});
	ss.initClass($tab_EstablishCloudConnectionNoUndoCmd, $asm, {
		invoke: function EstablishCloudConnectionNoUndoCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'establish-cloud-connection-no-undo' }, this.cmdParams));
		},
		validateInvokeParams: function EstablishCloudConnectionNoUndoCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionConfigName')) {
				throw new ss.Exception('missing param DocParams.ConfigName');
			}
			if (!ss.keyExists(this.cmdParams, 'widgetConnectionParams')) {
				throw new ss.Exception('missing param DocParams.ConnectionWidgetParams');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EstablishCloudConnectionNoUndoCmd$Response]));
	ss.initClass($tab_EstablishCloudConnectionNoUndoCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'connectionConfigName')) {
				throw new ss.Exception('missing param DocParams.ConfigName');
			}
		}
	});
	ss.initClass($tab_EstablishConnectionCmd, $asm, {
		invoke: function EstablishConnectionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'establish-connection' }, this.cmdParams));
		},
		validateInvokeParams: function EstablishConnectionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionConfigName')) {
				throw new ss.Exception('missing param DocParams.ConfigName');
			}
			if (!ss.keyExists(this.cmdParams, 'widgetConnectionParams')) {
				throw new ss.Exception('missing param DocParams.ConnectionWidgetParams');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EstablishConnectionCmd$Response]));
	ss.initClass($tab_EstablishConnectionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'connectionConfigName')) {
				throw new ss.Exception('missing param DocParams.ConfigName');
			}
		}
	});
	ss.initClass($tab_EstablishConnectionNoUndoCmd, $asm, {
		invoke: function EstablishConnectionNoUndoCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'establish-connection-no-undo' }, this.cmdParams));
		},
		validateInvokeParams: function EstablishConnectionNoUndoCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionConfigName')) {
				throw new ss.Exception('missing param DocParams.ConfigName');
			}
			if (!ss.keyExists(this.cmdParams, 'widgetConnectionParams')) {
				throw new ss.Exception('missing param DocParams.ConnectionWidgetParams');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EstablishConnectionNoUndoCmd$Response]));
	ss.initClass($tab_EstablishConnectionNoUndoCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'connectionConfigName')) {
				throw new ss.Exception('missing param DocParams.ConfigName');
			}
		}
	});
	ss.initClass($tab_EvaluateDataAlertCmd, $asm, {
		invoke: function EvaluateDataAlertCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'evaluate-data-alert' }, this.cmdParams));
		},
		validateInvokeParams: function EvaluateDataAlertCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dataAlertSpecSerializedText')) {
				throw new ss.Exception('missing param DocParams.DataAlertSpecSerializedText');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_EvaluateDataAlertCmd$Response]));
	ss.initClass($tab_EvaluateDataAlertCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'alertConditionMet')) {
				throw new ss.Exception('missing param DocParams.AlertConditionMet');
			}
		}
	});
	ss.initClass($tab_ExportServerCommands, $asm, {});
	ss.initClass($tab_ExtensionClientCommands, $asm, {});
	ss.initClass($tab_ExtensionPermissionsCache, $asm, {
		add_updated: function ExtensionPermissionsCache$add_Updated(value) {
			this.$1$UpdatedField = ss.delegateCombine(this.$1$UpdatedField, value);
		},
		remove_updated: function ExtensionPermissionsCache$remove_Updated(value) {
			this.$1$UpdatedField = ss.delegateRemove(this.$1$UpdatedField, value);
		},
		add_stopNotifying: function ExtensionPermissionsCache$add_StopNotifying(value) {
			this.$1$StopNotifyingField = ss.delegateCombine(this.$1$StopNotifyingField, value);
		},
		remove_stopNotifying: function ExtensionPermissionsCache$remove_StopNotifying(value) {
			this.$1$StopNotifyingField = ss.delegateRemove(this.$1$StopNotifyingField, value);
		},
		get_notificationId: function ExtensionPermissionsCache$get_NotificationId() {
			return 'doc:permissions-update-event';
		},
		onNotify: function ExtensionPermissionsCache$OnNotify(pm, context) {
			var updates = pm;
			for (var $t1 = 0; $t1 < updates.permissionsApprovalPresModelList.length; $t1++) {
				var approvalPm = updates.permissionsApprovalPresModelList[$t1];
				var key = JSON.stringify(approvalPm.extensionRegistrationKeyPresModel);
				if (ss.keyExists(this.$responses, key) && this.$responses[key] === approvalPm.extensionPermissionsGranted) {
					return;
				}
				this.$responses[key] = approvalPm.extensionPermissionsGranted;
			}
			this.$1$UpdatedField();
		},
		detachNotifications: function ExtensionPermissionsCache$DetachNotifications() {
			if (!ss.staticEquals(this.$1$StopNotifyingField, null)) {
				this.$1$StopNotifyingField();
			}
		},
		hasUserResponse: function ExtensionPermissionsCache$HasUserResponse(keyPm) {
			return ss.keyExists(this.$responses, JSON.stringify(keyPm));
		},
		getPermissionsApproval: function ExtensionPermissionsCache$GetPermissionsApproval(keyPm) {
			return this.$responses[JSON.stringify(keyPm)];
		}
	}, null, [$tab_IHandleNotifications, $tab_IDetachableNotificationHandler]);
	ss.initClass($tab_ExtensionPermissionsProxy, $asm, {});
	ss.initClass($tab_ExtensionZoneModel, $asm, {
		add_extensionZoneUpdated: function ExtensionZoneModel$add_ExtensionZoneUpdated(value) {
			this.$2$ExtensionZoneUpdatedField = ss.delegateCombine(this.$2$ExtensionZoneUpdatedField, value);
		},
		remove_extensionZoneUpdated: function ExtensionZoneModel$remove_ExtensionZoneUpdated(value) {
			this.$2$ExtensionZoneUpdatedField = ss.delegateRemove(this.$2$ExtensionZoneUpdatedField, value);
		},
		get_zoneModel: function ExtensionZoneModel$get_ZoneModel() {
			return this.$zoneModel;
		},
		update: function ExtensionZoneModel$Update(addInZonePresModel, context) {
			this.simpleSwapToUpdate(addInZonePresModel, this.$2$ExtensionZoneUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ExtraHtmlMarkupRemover, $asm, {});
	ss.initClass($tab_FailureHandler, $asm, {});
	ss.initClass($tab_FieldColumnModel, $asm, {
		get_instanceType: function FieldColumnModel$get_InstanceType() {
			return 'column';
		},
		get_defaultRole: function FieldColumnModel$get_DefaultRole() {
			return this.pm.defaultFieldRole;
		},
		get_role: function FieldColumnModel$get_Role() {
			return this.pm.fieldRole;
		},
		get_baseColumnName: function FieldColumnModel$get_BaseColumnName() {
			return (this.get_isInstance() ? this.pm.baseColumnName : this.get_globalName());
		},
		get_baseColumn: function FieldColumnModel$get_BaseColumn() {
			return (this.get_isInstance() ? ss.cast(this.get_dataSource().findField(this.get_baseColumnName()), $tab_FieldColumnModel) : this);
		},
		get_isInstance: function FieldColumnModel$get_IsInstance() {
			return !ss.isNullOrUndefined(this.pm.isInstance) && this.pm.isInstance;
		},
		get_hasWarning: function FieldColumnModel$get_HasWarning() {
			return this.pm.hasWarning;
		},
		get_isAllowedInCalcs: function FieldColumnModel$get_IsAllowedInCalcs() {
			var col = this.get_baseColumn();
			return (ss.referenceEquals(col, this) ? $tab_FieldModel.prototype.get_isAllowedInCalcs.call(this) : col.get_isAllowedInCalcs());
		},
		get_isCalculated: function FieldColumnModel$get_IsCalculated() {
			return this.pm.isCalculated;
		},
		get_formattedFamilyName: function FieldColumnModel$get_FormattedFamilyName() {
			return this.pm.formattedFamilyName;
		},
		get_canAddToDrillPath: function FieldColumnModel$get_CanAddToDrillPath() {
			return this.pm.canAddToDrillPath;
		},
		get_isInDrillPath: function FieldColumnModel$get_IsInDrillPath() {
			return this.pm.isInDrillPath;
		},
		get_columnClass: function FieldColumnModel$get_ColumnClass() {
			return this.pm.columnClass;
		},
		get_isTimeIntelligenceColumn: function FieldColumnModel$get_IsTimeIntelligenceColumn() {
			return this.$3$IsTimeIntelligenceColumnField;
		},
		set_isTimeIntelligenceColumn: function FieldColumnModel$set_IsTimeIntelligenceColumn(value) {
			this.$3$IsTimeIntelligenceColumnField = value;
		},
		get_isHidden: function FieldColumnModel$get_IsHidden() {
			return this.pm.isHidden || this.get_isInstance() && !this.get_isTimeIntelligenceColumn();
		},
		update: function FieldColumnModel$Update(pm) {
			this.swapAndCopyPresModel(pm);
		},
		get_connectionName: function FieldColumnModel$get_ConnectionName() {
			return this.pm.connectionName;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_FieldColumnModelFactory, $asm, {});
	ss.initClass($tab_FieldContainerModel, $asm, {
		get_fields: function FieldContainerModel$get_Fields() {
			return this.$fields;
		},
		get_folderRole: function FieldContainerModel$get_FolderRole() {
			return this.pm.folderRole;
		},
		get_instanceType: function FieldContainerModel$get_InstanceType() {
			return 'fieldContainer';
		},
		get_canHaveChildren: function FieldContainerModel$get_CanHaveChildren() {
			return true;
		},
		get_isUnsortedContainer: function FieldContainerModel$get_IsUnsortedContainer() {
			return true;
		},
		update: function FieldContainerModel$Update(pm, newFields) {
			this.swapAndCopyPresModel(pm);
			this.$fields = newFields;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_FieldContainerModelFactory, $asm, {});
	ss.initEnum($tab_FieldInstanceType, $asm, { column: 'column', drillPath: 'drillPath', cubeDimension: 'cubeDimension', group: 'group', cubeHierarchy: 'cubeHierarchy', relationalTable: 'relationalTable', cubeFolder: 'cubeFolder', folder: 'folder', multiple: 'multiple', folderNew: 'folderNew', structuredMeasure: 'structuredMeasure', cubeStandardDimension: 'cubeStandardDimension', cubeAttributeDimension: 'cubeAttributeDimension', level: 'level', fieldContainer: 'fieldContainer' }, true);
	ss.initClass($tab_FieldModelCache, $asm, {
		get_fields: function FieldModelCache$get_Fields() {
			return this.$1$FieldsField;
		},
		set_fields: function FieldModelCache$set_Fields(value) {
			this.$1$FieldsField = value;
		},
		get_tables: function FieldModelCache$get_Tables() {
			return this.$1$TablesField;
		},
		set_tables: function FieldModelCache$set_Tables(value) {
			this.$1$TablesField = value;
		},
		get_folders: function FieldModelCache$get_Folders() {
			return this.$1$FoldersField;
		},
		set_folders: function FieldModelCache$set_Folders(value) {
			this.$1$FoldersField = value;
		},
		get_drillPaths: function FieldModelCache$get_DrillPaths() {
			return this.$1$DrillPathsField;
		},
		set_drillPaths: function FieldModelCache$set_DrillPaths(value) {
			this.$1$DrillPathsField = value;
		},
		get_fieldContainers: function FieldModelCache$get_FieldContainers() {
			return this.$1$FieldContainersField;
		},
		set_fieldContainers: function FieldModelCache$set_FieldContainers(value) {
			this.$1$FieldContainersField = value;
		}
	});
	ss.initClass($tab_FieldModelFactory, $asm, {});
	ss.initClass($tab_FieldsModel, $asm, {
		get_allFields: function FieldsModel$get_AllFields() {
			if (ss.isNullOrUndefined(this.$allFieldsArray)) {
				this.$initializeAllFieldsArrayCache();
			}
			return this.$allFieldsArray;
		},
		get_dataSource: function FieldsModel$get_DataSource() {
			return this.$dataSourceModel;
		},
		$initializeAllFieldsArrayCache: function FieldsModel$InitializeAllFieldsArrayCache() {
			var fieldsSet = new Set();
			tab.SetUtilities.addAll($tab_FieldModel).call(null, fieldsSet, _.values(this.$allFields));
			this.$allFieldsArray = tab.SetUtilities.getValues($tab_FieldModel).call(null, fieldsSet);
		},
		findField: function FieldsModel$FindField(fn) {
			return this.$allFields[fn];
		},
		findDrillPath: function FieldsModel$FindDrillPath(drillPathName) {
			return this.$drillPathLookup[drillPathName];
		},
		findFieldContainer: function FieldsModel$FindFieldContainer(fieldContainerName) {
			return this.$fieldContainerLookup[fieldContainerName];
		},
		findFolderNew: function FieldsModel$FindFolderNew(folderName) {
			return this.$folderNewLookup[folderName];
		},
		findRelationalTable: function FieldsModel$FindRelationalTable(tableName) {
			return this.$tableLookup[tableName];
		},
		findCubeFolder: function FieldsModel$FindCubeFolder(folderName) {
			return this.$cubeFolderLookup[folderName];
		},
		getMutableCopyOfPresModel: function FieldsModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		update$1: function FieldsModel$Update(fieldsMap, context) {
			this.$internalUpdate(fieldsMap, context, ss.mkdel(this, function(oldFields) {
				this.$processFields(fieldsMap[0], oldFields, ss.mkdel(this, this.$addToDimensionsRootFields));
				this.$processFields(fieldsMap[1], oldFields, ss.mkdel(this, this.$addToMeasuresRootFields));
				this.$processFields(fieldsMap[2], oldFields, ss.mkdel(this, this.$addToGroupsRootFields));
				this.$processFields(fieldsMap[3], oldFields, ss.mkdel(this, this.$addToParametersRootFields));
				this.$processFields(fieldsMap[4], oldFields, ss.mkdel(this, this.$addToFieldContainers));
				this.$processFields(fieldsMap[5], oldFields, ss.mkdel(this, this.$addToTopLevelDimensions));
				this.$processFields(fieldsMap[6], oldFields, ss.mkdel(this, this.$addToTopLevelMeasures));
			}));
		},
		update: function FieldsModel$Update(fields, context) {
			this.$internalUpdate(fields, context, ss.mkdel(this, function(oldFields) {
				var nullAddRootFieldModel = function(fieldModel) {
				};
				this.$processFields(fields, oldFields, nullAddRootFieldModel);
			}));
		},
		$addToDimensionsRootFields: function FieldsModel$AddToDimensionsRootFields(fieldModel) {
			this.rootFieldsNew[0].push(fieldModel);
		},
		$addToMeasuresRootFields: function FieldsModel$AddToMeasuresRootFields(fieldModel) {
			this.rootFieldsNew[1].push(fieldModel);
		},
		$addToGroupsRootFields: function FieldsModel$AddToGroupsRootFields(fieldModel) {
			this.rootFieldsNew[2].push(fieldModel);
		},
		$addToParametersRootFields: function FieldsModel$AddToParametersRootFields(fieldModel) {
			this.rootFieldsNew[3].push(fieldModel);
		},
		$addToFieldContainers: function FieldsModel$AddToFieldContainers(fieldModel) {
			this.rootFieldsNew[4].push(ss.safeCast(fieldModel, $tab_FieldContainerModel));
		},
		$addToTopLevelDimensions: function FieldsModel$AddToTopLevelDimensions(fieldModel) {
			this.rootFieldsNew[5].push(fieldModel);
		},
		$addToTopLevelMeasures: function FieldsModel$AddToTopLevelMeasures(fieldModel) {
			this.rootFieldsNew[6].push(fieldModel);
		},
		$internalUpdate: function FieldsModel$InternalUpdate(updateObject, context, updateCallback) {
			if (!this.$shouldUpdateWith(updateObject)) {
				return;
			}
			this.$clearArrayOfFieldsCache();
			var fieldModelCache = new $tab_FieldModelCache(this.$allFields, this.$tableLookup, this.$folderNewLookup, this.$drillPathLookup, this.$fieldContainerLookup);
			this.$resetLookupTables();
			updateCallback(fieldModelCache);
			this.$addLocalNamesToAllFieldsLookup();
			this.swapPresModel(updateObject);
			this.raiseEvent(this.fieldsChanged, context);
		},
		$shouldUpdateWith: function FieldsModel$ShouldUpdateWith(updateObj) {
			return ss.isValue(updateObj) && !_.isEqual(this.pm, updateObj);
		},
		$clearArrayOfFieldsCache: function FieldsModel$ClearArrayOfFieldsCache() {
			this.$allFieldsArray = null;
		},
		$resetLookupTables: function FieldsModel$ResetLookupTables() {
			this.$allFields = {};
			this.$tableLookup = {};
			this.$folderNewLookup = {};
			this.$drillPathLookup = {};
			this.$cubeFolderLookup = {};
			this.$fieldContainerLookup = {};
			this.rootFieldsNew = {};
			this.rootFieldsNew[0] = [];
			this.rootFieldsNew[1] = [];
			this.rootFieldsNew[2] = [];
			this.rootFieldsNew[3] = [];
			this.rootFieldsNew[4] = [];
			this.rootFieldsNew[5] = [];
			this.rootFieldsNew[6] = [];
		},
		$addLocalNamesToAllFieldsLookup: function FieldsModel$AddLocalNamesToAllFieldsLookup() {
			var $t1 = _.keys(this.$allFields);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var globalFieldName = $t1[$t2];
				var field = this.$allFields[globalFieldName];
				this.$allFields[field.get_localName()] = field;
			}
		},
		$processFields: function FieldsModel$ProcessFields(fields, oldFields, addRootFieldModel) {
			if (ss.isNullOrUndefined(fields) || fields.length === 0) {
				return;
			}
			for (var $t1 = 0; $t1 < fields.length; $t1++) {
				var f = fields[$t1];
				var fieldModel = $tab_FieldModelFactory.create(f, this, oldFields);
				addRootFieldModel(fieldModel);
				this.$updateCache(fieldModel);
			}
		},
		$updateCache: function FieldsModel$UpdateCache(fieldModel) {
			if (ss.isInstanceOfType(fieldModel, $tab_RelationalTableModel)) {
				var tableModel = ss.safeCast(fieldModel, $tab_RelationalTableModel);
				this.$tableLookup[fieldModel.get_globalName()] = tableModel;
				var $t1 = tableModel.get_columns();
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var column = $t1[$t2];
					this.$updateCache(column);
				}
			}
			else if (ss.isInstanceOfType(fieldModel, $tab_FolderNewModel)) {
				var folderModel = ss.safeCast(fieldModel, $tab_FolderNewModel);
				this.$folderNewLookup[fieldModel.get_globalName()] = folderModel;
				var $t3 = folderModel.get_fields();
				for (var $t4 = 0; $t4 < $t3.length; $t4++) {
					var field = $t3[$t4];
					this.$updateCache(field);
				}
			}
			else if (ss.isInstanceOfType(fieldModel, $tab_DrillPathModel)) {
				var drillPathModel = ss.safeCast(fieldModel, $tab_DrillPathModel);
				this.$drillPathLookup[fieldModel.get_globalName()] = drillPathModel;
				var $t5 = drillPathModel.get_levels();
				for (var $t6 = 0; $t6 < $t5.length; $t6++) {
					var level = $t5[$t6];
					this.$updateCache(level);
				}
			}
			else if (ss.isInstanceOfType(fieldModel, $tab_CubeHierarchyModel)) {
				var cubeHierarchyModel = ss.safeCast(fieldModel, $tab_CubeHierarchyModel);
				this.$allFields[fieldModel.get_globalName()] = cubeHierarchyModel;
				var $t7 = cubeHierarchyModel.get_levels();
				for (var $t8 = 0; $t8 < $t7.length; $t8++) {
					var level1 = $t7[$t8];
					this.$updateCache(level1);
				}
				var $t9 = cubeHierarchyModel.get_userDefinedAttributes();
				for (var $t10 = 0; $t10 < $t9.length; $t10++) {
					var attribute = $t9[$t10];
					this.$updateCache(attribute);
				}
			}
			else if (ss.isInstanceOfType(fieldModel, $tab_CubeAttributeDimensionModel)) {
				var cubeAttributeDimensionModel = ss.safeCast(fieldModel, $tab_CubeAttributeDimensionModel);
				this.$allFields[fieldModel.get_globalName()] = cubeAttributeDimensionModel;
				var $t11 = cubeAttributeDimensionModel.get_cubeHierarchies();
				for (var $t12 = 0; $t12 < $t11.length; $t12++) {
					var hierarchy = $t11[$t12];
					this.$updateCache(hierarchy);
				}
				var $t13 = cubeAttributeDimensionModel.get_cubeFolders();
				for (var $t14 = 0; $t14 < $t13.length; $t14++) {
					var folder = $t13[$t14];
					this.$updateCache(folder);
				}
			}
			else if (ss.isInstanceOfType(fieldModel, $tab_CubeFolderModel)) {
				var cubeFolderModel = ss.safeCast(fieldModel, $tab_CubeFolderModel);
				this.$cubeFolderLookup[fieldModel.get_globalName()] = cubeFolderModel;
				var $t15 = cubeFolderModel.get_hierarchies();
				for (var $t16 = 0; $t16 < $t15.length; $t16++) {
					var hierarchy1 = $t15[$t16];
					this.$updateCache(hierarchy1);
				}
				var $t17 = cubeFolderModel.get_columns();
				for (var $t18 = 0; $t18 < $t17.length; $t18++) {
					var column1 = $t17[$t18];
					this.$updateCache(column1);
				}
			}
			else if (ss.isInstanceOfType(fieldModel, $tab_StructuredMeasureModel)) {
				var structuredMeasureModel = ss.safeCast(fieldModel, $tab_StructuredMeasureModel);
				this.$allFields[fieldModel.get_globalName()] = structuredMeasureModel;
				var $t19 = structuredMeasureModel.get_measures();
				for (var $t20 = 0; $t20 < $t19.length; $t20++) {
					var measure = $t19[$t20];
					this.$updateCache(measure);
				}
			}
			else if (ss.isInstanceOfType(fieldModel, $tab_CubeStandardDimensionModel)) {
				var cubeStandardDimensionModel = ss.safeCast(fieldModel, $tab_CubeStandardDimensionModel);
				this.$allFields[fieldModel.get_globalName()] = cubeStandardDimensionModel;
				var $t21 = cubeStandardDimensionModel.get_cubeAttributeDimensions();
				for (var $t22 = 0; $t22 < $t21.length; $t22++) {
					var dimension = $t21[$t22];
					this.$updateCache(dimension);
				}
				var $t23 = cubeStandardDimensionModel.get_cubeHierarchies();
				for (var $t24 = 0; $t24 < $t23.length; $t24++) {
					var hierarchy2 = $t23[$t24];
					this.$updateCache(hierarchy2);
				}
				var $t25 = cubeStandardDimensionModel.get_cubeFolders();
				for (var $t26 = 0; $t26 < $t25.length; $t26++) {
					var folder1 = $t25[$t26];
					this.$updateCache(folder1);
				}
			}
			else if (ss.isInstanceOfType(fieldModel, $tab_LevelModel)) {
				var levelModel = ss.safeCast(fieldModel, $tab_LevelModel);
				this.$allFields[fieldModel.get_globalName()] = levelModel;
				var $t27 = levelModel.get_linkedAttributes();
				for (var $t28 = 0; $t28 < $t27.length; $t28++) {
					var attribute1 = $t27[$t28];
					this.$updateCache(attribute1);
				}
			}
			else if (ss.isInstanceOfType(fieldModel, $tab_FieldContainerModel)) {
				var fieldContainerModel = ss.safeCast(fieldModel, $tab_FieldContainerModel);
				this.$fieldContainerLookup[fieldModel.get_globalName()] = fieldContainerModel;
				var $t29 = fieldContainerModel.get_fields();
				for (var $t30 = 0; $t30 < $t29.length; $t30++) {
					var field1 = $t29[$t30];
					this.$updateCache(field1);
				}
			}
			else {
				this.$allFields[fieldModel.get_globalName()] = fieldModel;
			}
		}
	}, $tab_Model);
	ss.initEnum($tab_FieldValueType, $asm, { localName: 'localName', globalName: 'globalName', qualifiedLocalName: 'qualifiedLocalName', description: 'description', userCaption: 'userCaption', displayName: 'displayName' }, true);
	ss.initClass($tab_FileConnectionInfo, $asm, {
		get_corsProxyUrlPrefix: function FileConnectionInfo$get_CorsProxyUrlPrefix() {
			return this.$1$CorsProxyUrlPrefixField;
		},
		set_corsProxyUrlPrefix: function FileConnectionInfo$set_CorsProxyUrlPrefix(value) {
			this.$1$CorsProxyUrlPrefixField = value;
		},
		getSupportedExtensions: function FileConnectionInfo$GetSupportedExtensions() {
			return ss.arrayClone(this.$supportedExtensions);
		}
	});
	ss.initClass($tab_FileDownloadHelper, $asm, {
		openDownload: function FileDownloadHelper$OpenDownload(url, dialogData) {
			if (tab.FeatureFlags.isEnabled('OneClickExport')) {
				this.$openDownloadNoPopup_New(url, dialogData);
			}
			else if (ss.isValue(dialogData.popup)) {
				this.$openDownloadUsingPopup(url, dialogData);
			}
			else {
				this.$openDownloadNoPopup(url, dialogData);
			}
		},
		$openDownloadNoPopup: function FileDownloadHelper$OpenDownloadNoPopup(url, dialogData) {
			var ch1 = ((url.indexOf(String.fromCharCode(63)) === -1) ? '?' : '&');
			url += ch1 + 'download=true';
			var urlTarget = '_blank';
			var urlCopy = url;
			if (ss.isNullOrUndefined(dialogData.noping)) {
				var onSuccess = ss.mkdel(this, function() {
					this.$commonDialogProvider.showFileDownloadDialog(dialogData.title, dialogData.message, urlCopy, urlTarget);
				});
				var ch = ((url.indexOf(String.fromCharCode(63)) === -1) ? '?' : '&');
				url += ch + 'nodata=true';
				var handler = this.$session.createHandler(null, onSuccess, null, 'immediately');
				var args = {};
				args.headers = ss.mkdict(['Accept', 'text/plain']);
				args.dataType = 'text';
				args.type = 'GET';
				args.url = url;
				this.$session.request(args, handler);
			}
			else {
				this.$commonDialogProvider.showFileDownloadDialog(dialogData.title, dialogData.message, urlCopy, urlTarget);
			}
		},
		$openDownloadNoPopup_New: function FileDownloadHelper$OpenDownloadNoPopup_New(url, dialogData) {
			var $t1 = document.createElement('a');
			var anchor = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'A'));
			anchor.href = url;
			anchor.download = dialogData.title;
			anchor.style.display = 'none';
			document.body.appendChild(anchor);
			anchor.click();
			document.body.removeChild(anchor);
		},
		$openDownloadUsingPopup: function FileDownloadHelper$OpenDownloadUsingPopup(url, dialogData) {
			var popupName = dialogData.popup;
			var downloadPopup = window.open('about:blank', popupName);
			window.setTimeout(ss.mkdel(this, function() {
				var h = new tab.WindowHelper(downloadPopup);
				if (ss.isValue(downloadPopup) && !downloadPopup.closed && h.get_innerWidth() !== 0 && h.get_innerHeight() !== 0) {
					downloadPopup.location.href = url;
				}
				else {
					if (ss.isValue(downloadPopup)) {
						downloadPopup.close();
					}
					dialogData.popup = null;
					this.openDownload(url, dialogData);
				}
			}), 500);
		}
	});
	ss.initClass($tab_FileUploadTelemetry, $asm, {
		get_$fileUploadEventUUID: function FileUploadTelemetry$get_FileUploadEventUUID() {
			return this.$1$FileUploadEventUUIDField;
		},
		set_$fileUploadEventUUID: function FileUploadTelemetry$set_FileUploadEventUUID(value) {
			this.$1$FileUploadEventUUIDField = value;
		},
		$shouldLog: function FileUploadTelemetry$ShouldLog() {
			return tab.FeatureFlags.isEnabled('WebAuthoringOnlineTelemetry');
		},
		logFileUploadRequestEvent: function FileUploadTelemetry$LogFileUploadRequestEvent(numFiles, origin, reason) {
			if (this.$shouldLog()) {
				this.set_$fileUploadEventUUID($tab_TelemetryUtils.generateUUID());
				$tab_OnlineAnalyticsClient.logEvent('Authoring_DataTab_FileUpload_RequestEvent', ss.mkdict(['FileUploadRequestID', this.get_$fileUploadEventUUID(), 'NumFiles', numFiles, 'Origin', origin.toString(), 'Reason', reason.toString()]));
			}
		},
		logFileUploadStartEvent: function FileUploadTelemetry$LogFileUploadStartEvent(uploadId, fileType, fileSize) {
			if (this.$shouldLog() && !ss.isNullOrEmptyString(this.get_$fileUploadEventUUID())) {
				$tab_OnlineAnalyticsClient.logEvent('Authoring_DataTab_FileUpload_StartEvent', ss.mkdict(['FileUploadRequestID', this.get_$fileUploadEventUUID(), 'UploadID', uploadId, 'FileType', fileType, 'Size', fileSize]));
			}
		},
		logFileUploadSuccessEvent: function FileUploadTelemetry$LogFileUploadSuccessEvent(uploadID, time) {
			if (this.$shouldLog() && !ss.isNullOrEmptyString(this.get_$fileUploadEventUUID())) {
				$tab_OnlineAnalyticsClient.logEvent('Authoring_DataTab_FileUpload_SuccessEvent', ss.mkdict(['FileUploadRequestID', this.get_$fileUploadEventUUID(), 'UploadID', uploadID, 'UploadTime', time]));
			}
		},
		logFileUploadFailureEvent: function FileUploadTelemetry$LogFileUploadFailureEvent(uploadID, errorType) {
			if (this.$shouldLog() && !ss.isNullOrEmptyString(this.get_$fileUploadEventUUID())) {
				$tab_OnlineAnalyticsClient.logEvent('Authoring_DataTab_FileUpload_FailureEvent', ss.mkdict(['FileUploadRequestID', this.get_$fileUploadEventUUID(), 'UploadID', uploadID, 'ErrorType', errorType.toString()]));
			}
		},
		logFileUploadRetryEvent: function FileUploadTelemetry$LogFileUploadRetryEvent(retryType) {
			if (this.$shouldLog() && !ss.isNullOrEmptyString(this.get_$fileUploadEventUUID())) {
				$tab_OnlineAnalyticsClient.logEvent('Authoring_DataTab_FileUpload_RetryEvent', ss.mkdict(['FileUploadRequestID', this.get_$fileUploadEventUUID(), 'Retry', retryType.toString()]));
			}
		},
		logFileUploadReplaceEvent: function FileUploadTelemetry$LogFileUploadReplaceEvent(addReplaceType) {
			if (this.$shouldLog() && !ss.isNullOrEmptyString(this.get_$fileUploadEventUUID())) {
				$tab_OnlineAnalyticsClient.logEvent('Authoring_DataTab_FileUpload_ReplaceEvent', ss.mkdict(['FileUploadRequestID', this.get_$fileUploadEventUUID(), 'AddReplace', addReplaceType.toString()]));
			}
		},
		logFileUploadDSCreationEvent: function FileUploadTelemetry$LogFileUploadDSCreationEvent(numSuccess, numFail, time) {
			if (this.$shouldLog() && !ss.isNullOrEmptyString(this.get_$fileUploadEventUUID())) {
				$tab_OnlineAnalyticsClient.logEvent('Authoring_DataTab_FileUpload_DSCreationEvent', ss.mkdict(['FileUploadRequestID', this.get_$fileUploadEventUUID(), 'Success', numSuccess, 'Fail', numFail, 'DSCreationTime', time]));
			}
		}
	});
	ss.initEnum($tab_FileUploadTelemetry$AddReplaceType, $asm, { cancel: 'cancel', replace: 'replace', add: 'add' }, true);
	ss.initEnum($tab_FileUploadTelemetry$ErrorType, $asm, { unsupported: 'unsupported', type_mismatch: 'type_mismatch', too_big: 'too_big', empty: 'empty', exists: 'exists', multi_file_rejected: 'multi_file_rejected', locked: 'locked', upload_error: 'upload_error', ds_error: 'ds_error', upload_canceled: 'upload_canceled' }, true);
	ss.initEnum($tab_FileUploadTelemetry$FileUploadOrigin, $asm, { file_drop_joinarea: 'file_drop_joinarea', file_drop_tablearea: 'file_drop_tablearea', file_drop_connectionpill: 'file_drop_connectionpill', file_drop_dialog: 'file_drop_dialog', file_browse_dialog: 'file_browse_dialog' }, true);
	ss.initEnum($tab_FileUploadTelemetry$FileUploadReason, $asm, { create_ds: 'create_ds', edit_connection: 'edit_connection', create_connection: 'create_connection' }, true);
	ss.initEnum($tab_FileUploadTelemetry$RetryType, $asm, { cancel: 'cancel', skip: 'skip', retry: 'retry' }, true);
	ss.initClass($tab_FilterClientCommands, $asm, {});
	ss.initClass($tab_FilterClientCommandsHelpers, $asm, {});
	ss.initClass($tab_FlipboardModel, $asm, {
		add_invalidateZone: function FlipboardModel$add_InvalidateZone(value) {
			this.$2$InvalidateZoneField = ss.delegateCombine(this.$2$InvalidateZoneField, value);
		},
		remove_invalidateZone: function FlipboardModel$remove_InvalidateZone(value) {
			this.$2$InvalidateZoneField = ss.delegateRemove(this.$2$InvalidateZoneField, value);
		},
		get_flipboardPresModel: function FlipboardModel$get_FlipboardPresModel() {
			return this.pm;
		},
		get_storyPointModel: function FlipboardModel$get_StoryPointModel() {
			return this.$storyPointsModel.get_currentStoryPoint();
		},
		get_dashboardModel: function FlipboardModel$get_DashboardModel() {
			return this.get_storyPointModel().get_dashboardModel();
		},
		get_zoneId: function FlipboardModel$get_ZoneId() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone().get_zoneId();
		},
		get_currentStoryPointId: function FlipboardModel$get_CurrentStoryPointId() {
			return this.get_flipboardPresModel().activeStoryPointId;
		},
		get_isEmpty: function FlipboardModel$get_IsEmpty() {
			return ss.isNullOrEmptyString(this.get_storyPointModel().get_currentSheet());
		},
		invalidated: function FlipboardModel$Invalidated(context) {
			this.raiseEvent(this.$2$InvalidateZoneField, context);
		},
		update: function FlipboardModel$Update(flipboardPresModel, context) {
			if (ss.isValue(flipboardPresModel.activeStoryPointId)) {
				var storyPointPresModel = flipboardPresModel.storyPoints[flipboardPresModel.activeStoryPointId.toString()];
				this.$storyPointsModel.update(storyPointPresModel, context);
			}
			this.swapPresModel(flipboardPresModel);
		},
		getMutableCopyOfPresModel: function FlipboardModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		}
	}, $tab_Model);
	ss.initClass($tab_FlipboardNavigatorModel, $asm, {
		add_newFlipboardNav: function FlipboardNavigatorModel$add_NewFlipboardNav(value) {
			this.$2$NewFlipboardNavField = ss.delegateCombine(this.$2$NewFlipboardNavField, value);
		},
		remove_newFlipboardNav: function FlipboardNavigatorModel$remove_NewFlipboardNav(value) {
			this.$2$NewFlipboardNavField = ss.delegateRemove(this.$2$NewFlipboardNavField, value);
		},
		add_pointWasCaptured: function FlipboardNavigatorModel$add_PointWasCaptured(value) {
			this.$2$PointWasCapturedField = ss.delegateCombine(this.$2$PointWasCapturedField, value);
		},
		remove_pointWasCaptured: function FlipboardNavigatorModel$remove_PointWasCaptured(value) {
			this.$2$PointWasCapturedField = ss.delegateRemove(this.$2$PointWasCapturedField, value);
		},
		add_navArrowVisibilityChanged: function FlipboardNavigatorModel$add_NavArrowVisibilityChanged(value) {
			this.$2$NavArrowVisibilityChangedField = ss.delegateCombine(this.$2$NavArrowVisibilityChangedField, value);
		},
		remove_navArrowVisibilityChanged: function FlipboardNavigatorModel$remove_NavArrowVisibilityChanged(value) {
			this.$2$NavArrowVisibilityChangedField = ss.delegateRemove(this.$2$NavArrowVisibilityChangedField, value);
		},
		get_flipboardNavPresModel: function FlipboardNavigatorModel$get_FlipboardNavPresModel() {
			return this.pm;
		},
		get_currentPointIndex: function FlipboardNavigatorModel$get_CurrentPointIndex() {
			return this.get_flipboardNavPresModel().currentStorypointIndex;
		},
		get_storyPoints: function FlipboardNavigatorModel$get_StoryPoints() {
			return this.get_flipboardNavPresModel().storypointNavItems;
		},
		get_zone: function FlipboardNavigatorModel$get_Zone() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone();
		},
		get_navType: function FlipboardNavigatorModel$get_NavType() {
			return this.get_flipboardNavPresModel().flipboardNavStyle.flipboardNavType;
		},
		get_arrowVisibility: function FlipboardNavigatorModel$get_ArrowVisibility() {
			return this.get_flipboardNavPresModel().navArrowsVisible;
		},
		get_width: function FlipboardNavigatorModel$get_Width() {
			return this.get_flipboardNavPresModel().selectedStoryPointStyle.w;
		},
		get_height: function FlipboardNavigatorModel$get_Height() {
			return this.get_flipboardNavPresModel().selectedStoryPointStyle.h;
		},
		get_isStoryEmpty: function FlipboardNavigatorModel$get_IsStoryEmpty() {
			return this.get_flipboardNavPresModel().isStoryEmpty;
		},
		getMutableCopyOfPresModel: function FlipboardNavigatorModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		update: function FlipboardNavigatorModel$Update(flipboardNavPresModel, context) {
			if (ss.isValue(flipboardNavPresModel)) {
				if (ss.isValue(flipboardNavPresModel.selectedStoryPointStyle)) {
					$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(flipboardNavPresModel.selectedStoryPointStyle.textStyle);
				}
				if (ss.isValue(flipboardNavPresModel.unselectedStoryPointStyle)) {
					$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(flipboardNavPresModel.unselectedStoryPointStyle.textStyle);
				}
			}
			var wasNavArrowVisibilityChanged = ss.isValue(this.get_flipboardNavPresModel()) && flipboardNavPresModel.navArrowsVisible !== this.get_flipboardNavPresModel().navArrowsVisible;
			this.$markCapturedPoints(flipboardNavPresModel);
			this.simpleSwapToUpdate(flipboardNavPresModel, this.$2$NewFlipboardNavField, context);
			this.$notifyCapturedPoints(context);
			if (wasNavArrowVisibilityChanged) {
				this.raiseEvent(this.$2$NavArrowVisibilityChangedField, context);
			}
		},
		$markCapturedPoints: function FlipboardNavigatorModel$MarkCapturedPoints(flipboardNavPresModel) {
			if (ss.isNullOrUndefined(this.get_flipboardNavPresModel())) {
				return;
			}
			ss.clear(this.$pointsCaptured);
			if (flipboardNavPresModel.storypointNavItems.length !== this.get_flipboardNavPresModel().storypointNavItems.length) {
				return;
			}
			var previousCurrentIndex = this.get_flipboardNavPresModel().currentStorypointIndex;
			var currentIndex = flipboardNavPresModel.currentStorypointIndex;
			var previousPoint = this.get_flipboardNavPresModel().storypointNavItems[previousCurrentIndex];
			var currentPoint = flipboardNavPresModel.storypointNavItems[currentIndex];
			if (previousCurrentIndex !== currentIndex && previousPoint.storyPointId === currentPoint.storyPointId && !previousPoint.isCaptured && currentPoint.isCaptured) {
				this.$pointsCaptured.push(currentPoint.storyPointId);
			}
			var capturedPoints = _.filter(flipboardNavPresModel.storypointNavItems, function(p, i) {
				return p.isCaptured === true && i !== flipboardNavPresModel.currentStorypointIndex;
			});
			for (var $t1 = 0; $t1 < capturedPoints.length; $t1++) {
				var point = capturedPoints[$t1];
				var currentId = { $: point.storyPointId };
				var oldPoint = _.find(this.get_flipboardNavPresModel().storypointNavItems, ss.mkdel({ currentId: currentId }, function(pm) {
					return pm.storyPointId === this.currentId.$;
				}));
				if (ss.isNullOrUndefined(oldPoint)) {
					continue;
				}
				if (!oldPoint.isCaptured) {
					this.$pointsCaptured.push(currentId.$);
				}
			}
		},
		$notifyCapturedPoints: function FlipboardNavigatorModel$NotifyCapturedPoints(context) {
			for (var $t1 = 0; $t1 < this.$pointsCaptured.length; $t1++) {
				var id = this.$pointsCaptured[$t1];
				this.raiseEvent$1(ss.Int32).call(this, this.$2$PointWasCapturedField, id, context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_FloatingToolbarClientCommands, $asm, {});
	ss.initClass($tab_FolderModel, $asm, {
		get_fields: function FolderModel$get_Fields() {
			return this.$fields;
		},
		get_folderRole: function FolderModel$get_FolderRole() {
			return this.pm.folderRole;
		},
		get_instanceType: function FolderModel$get_InstanceType() {
			return 'folder';
		},
		get_canHaveChildren: function FolderModel$get_CanHaveChildren() {
			return true;
		},
		get_isUnsortedContainer: function FolderModel$get_IsUnsortedContainer() {
			return true;
		},
		update: function FolderModel$Update(pm, newFields) {
			this.swapAndCopyPresModel(pm);
			this.$fields = newFields;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_FolderModelFactory, $asm, {});
	ss.initClass($tab_FolderNewModel, $asm, {
		get_fields: function FolderNewModel$get_Fields() {
			return this.$fields;
		},
		get_folderRole: function FolderNewModel$get_FolderRole() {
			return this.pm.folderRole;
		},
		get_instanceType: function FolderNewModel$get_InstanceType() {
			return 'folderNew';
		},
		get_canHaveChildren: function FolderNewModel$get_CanHaveChildren() {
			return true;
		},
		get_isUnsortedContainer: function FolderNewModel$get_IsUnsortedContainer() {
			return true;
		},
		update: function FolderNewModel$Update(pm, newFields) {
			this.swapAndCopyPresModel(pm);
			this.$fields = newFields;
		}
	}, $tab_FieldModel);
	ss.initClass($tab_FontFamilyProviderBuilder, $asm, {});
	ss.initClass($tab_FontNotificationUtil, $asm, {});
	ss.initClass($tab_FormatItemModel, $asm, {
		add_updated: function FormatItemModel$add_Updated(value) {
			this.$2$UpdatedField = ss.delegateCombine(this.$2$UpdatedField, value);
		},
		remove_updated: function FormatItemModel$remove_Updated(value) {
			this.$2$UpdatedField = ss.delegateRemove(this.$2$UpdatedField, value);
		},
		get_$itemPresModel: function FormatItemModel$get_ItemPresModel() {
			return this.pm;
		},
		get_typeOfFormatItem: function FormatItemModel$get_TypeOfFormatItem() {
			return this.get_$itemPresModel().typeOfFormatItem;
		},
		get_widgetIdentifier: function FormatItemModel$get_WidgetIdentifier() {
			return this.get_$itemPresModel().widgetUniqueId;
		},
		get_isFormatContainer: function FormatItemModel$get_IsFormatContainer() {
			return this.get_typeOfFormatItem() === 'formatContainer';
		},
		get_isFormatPane: function FormatItemModel$get_IsFormatPane() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'formatPane';
		},
		get_isFormatSection: function FormatItemModel$get_IsFormatSection() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'formatSection';
		},
		get_isCollapsibleSection: function FormatItemModel$get_IsCollapsibleSection() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'collapsibleSection';
		},
		get_isCompositeContainer: function FormatItemModel$get_IsCompositeContainer() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'compositeContainer';
		},
		get_isUnitContainer: function FormatItemModel$get_IsUnitContainer() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'unitContainer';
		},
		get_isTabGroup: function FormatItemModel$get_IsTabGroup() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'tabGroup';
		},
		get_isTab: function FormatItemModel$get_IsTab() {
			return this.get_isFormatContainer() && this.asFormatContainer().get_typeOfFormatContainer() === 'tab';
		},
		get_isFormatControl: function FormatItemModel$get_IsFormatControl() {
			return this.get_typeOfFormatItem() === 'formatControl';
		},
		get_isTextControl: function FormatItemModel$get_IsTextControl() {
			return this.get_isFormatControl() && this.asFormatControl().get_typeOfFormatControl() === 'text-control';
		},
		raiseUpdated: function FormatItemModel$RaiseUpdated() {
			if (!ss.staticEquals(this.$2$UpdatedField, null) && ss.isValue(this.get_$itemPresModel())) {
				this.$2$UpdatedField();
			}
		},
		asFormatContainer: function FormatItemModel$AsFormatContainer() {
			ss.Debug.assert(this.get_isFormatContainer(), 'Item is not a FormatContainer');
			return ss.safeCast(this, $tab_FormatContainerModel);
		},
		asFormatControl: function FormatItemModel$AsFormatControl() {
			ss.Debug.assert(this.get_isFormatControl(), 'Item is not a FormatControl');
			return ss.safeCast(this, $tab_FormatControlModel);
		},
		update: function FormatItemModel$Update(newItemPresModel, context) {
			this.simpleSwapToUpdate(newItemPresModel, this.$2$UpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_FormatContainerModel, $asm, {
		get_typeOfFormatContainer: function FormatContainerModel$get_TypeOfFormatContainer() {
			return this.pm.typeOfFormatContainer;
		},
		get_items: function FormatContainerModel$get_Items() {
			return this.$children;
		},
		get_name: function FormatContainerModel$get_Name() {
			if (this.get_isFormatSection()) {
				return this.pm.name;
			}
			else if (this.get_isFormatPane()) {
				return this.pm.name;
			}
			else {
				return null;
			}
		},
		get_pickerType: function FormatContainerModel$get_PickerType() {
			if (this.get_isCompositeContainer()) {
				return this.pm.pickerType;
			}
			else if (this.get_isTabGroup()) {
				return this.pm.pickerType;
			}
			else {
				return 'none';
			}
		},
		get_previewProperties: function FormatContainerModel$get_PreviewProperties() {
			return this.$3$PreviewPropertiesField;
		},
		set_previewProperties: function FormatContainerModel$set_PreviewProperties(value) {
			this.$3$PreviewPropertiesField = value;
		},
		get_isCollapsedByDefault: function FormatContainerModel$get_IsCollapsedByDefault() {
			if (this.get_isCollapsibleSection()) {
				return this.pm.collapsed;
			}
			else {
				return false;
			}
		},
		get_label: function FormatContainerModel$get_Label() {
			if (this.get_isUnitContainer()) {
				return this.pm.label;
			}
			else if (this.get_isTab()) {
				return this.pm.label;
			}
			else {
				return null;
			}
		},
		get_isChanged: function FormatContainerModel$get_IsChanged() {
			if (this.get_isUnitContainer()) {
				return this.pm.isChanged;
			}
			else {
				return false;
			}
		},
		get_clearCommand: function FormatContainerModel$get_ClearCommand() {
			if (this.get_isUnitContainer()) {
				return this.pm.clearFormatCommandModel;
			}
			else {
				return null;
			}
		},
		get_isVisible: function FormatContainerModel$get_IsVisible() {
			return this.$isVisible;
		},
		set_isVisible: function FormatContainerModel$set_IsVisible(value) {
			if (this.$isVisible !== value) {
				this.$isVisible = value;
				this.raiseUpdated();
			}
		},
		get_subsections: function FormatContainerModel$get_Subsections() {
			var newModels = [];
			var $t1 = this.asFormatContainer().get_items();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var itemModel = $t1[$t2];
				newModels.push(itemModel);
			}
			return newModels;
		},
		$buildPreviewProperties: function FormatContainerModel$BuildPreviewProperties(container) {
			this.set_previewProperties({});
			for (var $t1 = 0; $t1 < container.length; $t1++) {
				var item = container[$t1];
				if (!item.get_isFormatControl()) {
					continue;
				}
				var controlModel = item.asFormatControl();
				var widgetKey = controlModel.get_widgetKey();
				switch (widgetKey) {
					case 'fontSize':
					case 'lineSize': {
						this.get_previewProperties()[widgetKey] = controlModel.get_numericValue();
						break;
					}
					case 'fontFamily':
					case 'lineVisibility':
					case 'linePattern': {
						this.get_previewProperties()[widgetKey] = controlModel.get_textValue();
						break;
					}
					case 'colorSwatch': {
						this.get_previewProperties()[widgetKey] = controlModel.get_colorValue();
						break;
					}
					case 'bold':
					case 'italics':
					case 'underline': {
						this.get_previewProperties()[widgetKey] = controlModel.get_toggleValue();
						break;
					}
					default: {
						break;
					}
				}
			}
		},
		updatePreviewForTab: function FormatContainerModel$UpdatePreviewForTab(tabIndex) {
			if (tabIndex >= 0 && this.get_items().length >= tabIndex + 1 && this.get_items()[tabIndex].get_isTab()) {
				this.$buildPreviewProperties(this.get_items()[tabIndex].asFormatContainer().get_items());
			}
		},
		$containerItemPresModels: function FormatContainerModel$ContainerItemPresModels() {
			return this.pm.formatItemList.filter(ss.mkdel(this, function(item) {
				return !ss.keyExists(this.$blacklistedWidgetIds, item.widgetUniqueId);
			}));
		},
		update: function FormatContainerModel$Update(newItemPresModel, context) {
			this.simpleSwapToUpdate(newItemPresModel, ss.mkdel(this, function() {
				this.raiseUpdated();
			}), context);
			var containerItems = this.$containerItemPresModels();
			if (ss.isNullOrUndefined(this.$children)) {
				this.$children = [];
				for (var $t1 = 0; $t1 < containerItems.length; $t1++) {
					var item = containerItems[$t1];
					this.$children.push($tab_FormatItemModel.createModel(this, item, context));
				}
			}
			else if (ss.isValue(containerItems)) {
				for (var i = 0; i < containerItems.length; i++) {
					var item1 = containerItems[i];
					this.$children[i].update(item1, context);
				}
			}
			if (this.get_isTabGroup()) {
				this.updatePreviewForTab(0);
			}
			else {
				this.$buildPreviewProperties(this.get_items());
			}
		}
	}, $tab_FormatItemModel);
	ss.initClass($tab_FormatControlModel, $asm, {
		get_typeOfFormatControl: function FormatControlModel$get_TypeOfFormatControl() {
			return this.pm.typeOfFormatControl;
		},
		get_commandRedirectType: function FormatControlModel$get_CommandRedirectType() {
			return this.pm.commandRedirectType;
		},
		get_formatCommand: function FormatControlModel$get_FormatCommand() {
			return this.pm.formatCommandModel;
		},
		get_simpleCommand: function FormatControlModel$get_SimpleCommand() {
			return $tab_CommandSerializer.deserialize($tab_SimpleCommandsPresModelWrapper.create(this.get_formatCommand()).get_simpleCommand(), false);
		},
		get_widgetKey: function FormatControlModel$get_WidgetKey() {
			return this.pm.formatWidgetKey;
		},
		get_isEnabled: function FormatControlModel$get_IsEnabled() {
			return this.pm.isEnabled;
		},
		get_textValue: function FormatControlModel$get_TextValue() {
			return this.pm.valueString;
		},
		get_numericValue: function FormatControlModel$get_NumericValue() {
			return this.pm.valueInt;
		},
		get_colorValue: function FormatControlModel$get_ColorValue() {
			return this.pm.color;
		},
		get_canBeAuto: function FormatControlModel$get_CanBeAuto() {
			return this.pm.canBeAuto;
		},
		get_canBeNone: function FormatControlModel$get_CanBeNone() {
			return this.pm.canBeNone;
		},
		get_canMatchMarkColor: function FormatControlModel$get_CanMatchMarkColor() {
			return this.pm.canMatchMarkColor;
		},
		get_hasOpacity: function FormatControlModel$get_HasOpacity() {
			return this.pm.hasOpacity;
		},
		get_colorSwatchType: function FormatControlModel$get_ColorSwatchType() {
			return this.pm.formatColorSwatchType;
		},
		get_selectorValue: function FormatControlModel$get_SelectorValue() {
			return this.pm.valueString;
		},
		get_toggleValue: function FormatControlModel$get_ToggleValue() {
			return this.pm.bool;
		}
	}, $tab_FormatItemModel);
	ss.initClass($tab_FormatItemExtensions, $asm, {});
	ss.initClass($tab_FormattingConverters, $asm, {});
	ss.initClass($tab_FormattingUtil, $asm, {});
	ss.initClass($tab_GetAlertMeasuresFromSelectionCmd, $asm, {
		invoke: function GetAlertMeasuresFromSelectionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-alert-measures-from-selection' }, this.cmdParams));
		},
		validateInvokeParams: function GetAlertMeasuresFromSelectionCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetAlertMeasuresFromSelectionCmd$Response]));
	ss.initClass($tab_GetAlertMeasuresFromSelectionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertMeasures')) {
				throw new ss.Exception('missing param DocParams.DataAlertMeasures');
			}
		}
	});
	ss.initClass($tab_GetButtonConfigDialogCmd, $asm, {
		invoke: function GetButtonConfigDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-button-config-dialog' }, this.cmdParams));
		},
		validateInvokeParams: function GetButtonConfigDialogCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dashboardObjectHandle')) {
				throw new ss.Exception('missing param DocParams.DashboardObjectHandle');
			}
			if (!ss.keyExists(this.cmdParams, 'dashboardObjectStateHandle')) {
				throw new ss.Exception('missing param DocParams.DashboardObjectStateHandle');
			}
			if (!ss.keyExists(this.cmdParams, 'fontFamilies')) {
				throw new ss.Exception('missing param DocParams.FontFamilies');
			}
			if (!ss.keyExists(this.cmdParams, 'fontSizes')) {
				throw new ss.Exception('missing param DocParams.FontSizes');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetButtonConfigDialogCmd$Response]));
	ss.initClass($tab_GetButtonConfigDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_GetCompositeClassNameCmd, $asm, {
		invoke: function GetCompositeClassNameCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'get-composite-class-name' }, this.cmdParams));
		},
		validateInvokeParams: function GetCompositeClassNameCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dsClass')) {
				throw new ss.Exception('missing param DocParams.DSClass');
			}
			if (!ss.keyExists(this.cmdParams, 'fileExtension')) {
				throw new ss.Exception('missing param DocParams.FileExtension');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetCompositeClassNameCmd$Response]));
	ss.initClass($tab_GetCompositeClassNameCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'compositeClassName')) {
				throw new ss.Exception('missing param DocParams.CompositeClassName');
			}
		}
	});
	ss.initClass($tab_GetDashboardDragDropCmd, $asm, {
		invoke: function GetDashboardDragDropCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-dashboard-drag-drop' }, this.cmdParams));
		},
		validateInvokeParams: function GetDashboardDragDropCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDashboardDragDropCmd$Response]));
	ss.initClass($tab_GetDashboardDragDropCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'zoneDragDrop')) {
				throw new ss.Exception('missing param DocParams.DashboardDragDrop');
			}
		}
	});
	ss.initClass($tab_GetDashboardSizingCmd, $asm, {
		invoke: function GetDashboardSizingCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-dashboard-sizing' }, this.cmdParams));
		},
		validateInvokeParams: function GetDashboardSizingCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDashboardSizingCmd$Response]));
	ss.initClass($tab_GetDashboardSizingCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dashboardSizePresModel')) {
				throw new ss.Exception('missing param DocParams.DashboardSizePresModel');
			}
		}
	});
	ss.initClass($tab_GetDataAlertConditionInfoMapCmd, $asm, {
		invoke: function GetDataAlertConditionInfoMapCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-data-alert-condition-info-map' }, this.cmdParams));
		},
		validateInvokeParams: function GetDataAlertConditionInfoMapCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dataAlertSpecSerializedTextMap')) {
				throw new ss.Exception('missing param DocParams.DataAlertSpecSerializedTextMap');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDataAlertConditionInfoMapCmd$Response]));
	ss.initClass($tab_GetDataAlertConditionInfoMapCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertConditionInfoMap')) {
				throw new ss.Exception('missing param DocParams.DataAlertConditionInfoMap');
			}
		}
	});
	ss.initClass($tab_GetDataAlertInfoCmd, $asm, {
		invoke: function GetDataAlertInfoCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-data-alert-info' }, this.cmdParams));
		},
		validateInvokeParams: function GetDataAlertInfoCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dataAlertSpecSerializedText')) {
				throw new ss.Exception('missing param DocParams.DataAlertSpecSerializedText');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDataAlertInfoCmd$Response]));
	ss.initClass($tab_GetDataAlertInfoCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertMeasureText')) {
				throw new ss.Exception('missing param DocParams.DataAlertMeasureText');
			}
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertConditionText')) {
				throw new ss.Exception('missing param DocParams.DataAlertConditionText');
			}
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertThresholdText')) {
				throw new ss.Exception('missing param DocParams.DataAlertThresholdText');
			}
		}
	});
	ss.initClass($tab_GetDataSourceDataPresModelCmd, $asm, {
		invoke: function GetDataSourceDataPresModelCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-datasource-data-pres-model' }, this.cmdParams));
		},
		validateInvokeParams: function GetDataSourceDataPresModelCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'cacheOnly')) {
				throw new ss.Exception('missing param DocParams.CacheOnly');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDataSourceDataPresModelCmd$Response]));
	ss.initClass($tab_GetDataSourceDataPresModelCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dataSrcData')) {
				throw new ss.Exception('missing param DocParams.DataSourceData');
			}
		}
	});
	ss.initClass($tab_GetDropFieldAggregationOptionsCmd, $asm, {
		invoke: function GetDropFieldAggregationOptionsCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-drop-field-aggregation-options' }, this.cmdParams));
		},
		validateInvokeParams: function GetDropFieldAggregationOptionsCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fn')) {
				throw new ss.Exception('missing param DocParams.FieldName');
			}
			if (!ss.keyExists(this.cmdParams, 'shelfType')) {
				throw new ss.Exception('missing param DocParams.ShelfType');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDropFieldAggregationOptionsCmd$Response]));
	ss.initClass($tab_GetDropFieldAggregationOptionsCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'filterSelectMeasure')) {
				throw new ss.Exception('missing param DocParams.FilterSelectMeasure');
			}
		}
	});
	ss.initClass($tab_GetDSParamsFromPresModelCmd, $asm, {
		invoke: function GetDSParamsFromPresModelCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-dsparams-from-pres-model' }, this.cmdParams));
		},
		validateInvokeParams: function GetDSParamsFromPresModelCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'widgetConnectionParams')) {
				throw new ss.Exception('missing param DocParams.ConnectionWidgetParams');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetDSParamsFromPresModelCmd$Response]));
	ss.initClass($tab_GetDSParamsFromPresModelCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'strings')) {
				throw new ss.Exception('missing param DocParams.Strings');
			}
		}
	});
	ss.initClass($tab_GetFileConnectionFileListCmd, $asm, {
		invoke: function GetFileConnectionFileListCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-file-connection-file-list' }, this.cmdParams));
		},
		validateInvokeParams: function GetFileConnectionFileListCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetFileConnectionFileListCmd$Response]));
	ss.initClass($tab_GetFileConnectionFileListCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'fileNames')) {
				throw new ss.Exception('missing param DocParams.FileNames');
			}
		}
	});
	ss.initClass($tab_GetHasUnusedFilesCmd, $asm, {
		invoke: function GetHasUnusedFilesCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-has-unused-files' }, this.cmdParams));
		},
		validateInvokeParams: function GetHasUnusedFilesCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetHasUnusedFilesCmd$Response]));
	ss.initClass($tab_GetHasUnusedFilesCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'bool')) {
				throw new ss.Exception('missing param DocParams.Bool');
			}
		}
	});
	ss.initClass($tab_GetParameterControlMenuCmd, $asm, {
		invoke: function GetParameterControlMenuCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-parameter-control-menu' }, this.cmdParams));
		},
		validateInvokeParams: function GetParameterControlMenuCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'globalFieldName')) {
				throw new ss.Exception('missing param DocParams.GlobalFieldName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetParameterControlMenuCmd$Response]));
	ss.initClass($tab_GetParameterControlMenuCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'commands')) {
				throw new ss.Exception('missing param DocParams.Commands');
			}
		}
	});
	ss.initClass($tab_GetRuntimeDataModelCmd, $asm, {
		invoke: function GetRuntimeDataModelCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-runtime-data-model' }, this.cmdParams));
		},
		validateInvokeParams: function GetRuntimeDataModelCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'isRuntimeInitialDatastoreRequired')) {
				throw new ss.Exception('missing param DocParams.IsRuntimeInitialDatastoreRequired');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetRuntimeDataModelCmd$Response]));
	ss.initClass($tab_GetRuntimeDataModelCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'runtimeData')) {
				throw new ss.Exception('missing param DocParams.RuntimeData');
			}
		}
	});
	ss.initClass($tab_GetTabbedAuthenticationPresModelCmd, $asm, {
		invoke: function GetTabbedAuthenticationPresModelCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-tabbed-authentication-pres-model' }, this.cmdParams));
		},
		validateInvokeParams: function GetTabbedAuthenticationPresModelCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionFullNames')) {
				throw new ss.Exception('missing param DocParams.ConnectionFullNames');
			}
			if (!ss.keyExists(this.cmdParams, 'editingConnection')) {
				throw new ss.Exception('missing param DocParams.EditingConnection');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetTabbedAuthenticationPresModelCmd$Response]));
	ss.initClass($tab_GetTabbedAuthenticationPresModelCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'tabbedAuthentication')) {
				throw new ss.Exception('missing param DocParams.TabbedAuthentication');
			}
		}
	});
	ss.initClass($tab_GetThumbnailCmd, $asm, {
		invoke: function GetThumbnailCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-thumbnail' }, this.cmdParams));
		},
		validateInvokeParams: function GetThumbnailCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetThumbnailCmd$Response]));
	ss.initClass($tab_GetThumbnailCmd$Response, $asm, {
		hasThumbnailImage: function Response$HasThumbnailImage() {
			return ss.keyExists(this.$$cmdParams, 'image');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_GetURLSubstitutionKeywordsCmd, $asm, {
		invoke: function GetURLSubstitutionKeywordsCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-url-substitution-keywords' }, this.cmdParams));
		},
		validateInvokeParams: function GetURLSubstitutionKeywordsCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetURLSubstitutionKeywordsCmd$Response]));
	ss.initClass($tab_GetURLSubstitutionKeywordsCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'substitutionKeywordsList')) {
				throw new ss.Exception('missing param DocParams.SubstitutionKeywordList');
			}
		}
	});
	ss.initClass($tab_GetWebCategoricalColorDialogCmd, $asm, {
		invoke: function GetWebCategoricalColorDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-web-categorical-color-dialog' }, this.cmdParams));
		},
		validateInvokeParams: function GetWebCategoricalColorDialogCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fieldVector')) {
				throw new ss.Exception('missing param DocParams.FieldVector');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetWebCategoricalColorDialogCmd$Response]));
	ss.initClass($tab_GetWebCategoricalColorDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_GetWebQuantitativeColorDialogCmd, $asm, {
		invoke: function GetWebQuantitativeColorDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-web-quantitative-color-dialog' }, this.cmdParams));
		},
		validateInvokeParams: function GetWebQuantitativeColorDialogCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fieldVector')) {
				throw new ss.Exception('missing param DocParams.FieldVector');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_GetWebQuantitativeColorDialogCmd$Response]));
	ss.initClass($tab_GetWebQuantitativeColorDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_GroupFontExtractor, $asm, {
		canExtractFont: function GroupFontExtractor$CanExtractFont(model) {
			return model.type === 'draw-group' && !ss.isNullOrUndefined(model.drawItems);
		},
		extractFontFromPresModel: function GroupFontExtractor$ExtractFontFromPresModel(model) {
			if (!this.canExtractFont(model)) {
				return null;
			}
			var drawItemModels = model.drawItems;
			return this.$extractFromDrawItemPresModelArray(drawItemModels);
		},
		$extractFromDrawItemPresModelArray: function GroupFontExtractor$ExtractFromDrawItemPresModelArray(drawItemModels) {
			var uniqueFonts = {};
			for (var $t1 = 0; $t1 < drawItemModels.length; $t1++) {
				var drawItem = drawItemModels[$t1];
				for (var $t2 = 0; $t2 < $tab_GroupFontExtractor.$internalExtractors.length; $t2++) {
					var fontExtractor = $tab_GroupFontExtractor.$internalExtractors[$t2];
					if (fontExtractor.canExtractFont(drawItem)) {
						var currentFontProps = fontExtractor.extractFontFromPresModel(drawItem);
						if (ss.isValue(currentFontProps)) {
							for (var $t3 = 0; $t3 < currentFontProps.length; $t3++) {
								var fontProps = currentFontProps[$t3];
								uniqueFonts[fontProps.get_hash()] = fontProps;
							}
						}
						break;
					}
				}
			}
			return _.values(uniqueFonts);
		}
	}, null, [$tab_IDrawItemFontExtractor]);
	ss.initClass($tab_GroupModel, $asm, {
		get_instanceType: function GroupModel$get_InstanceType() {
			return 'group';
		},
		get_isCombinedField: function GroupModel$get_IsCombinedField() {
			return this.pm.isCombinedField || false;
		}
	}, $tab_FieldColumnModel);
	ss.initClass($tab_GroupModelFactory, $asm, {});
	ss.initClass($tab_HasUserSpecificActiveSheetCmd, $asm, {
		invoke: function HasUserSpecificActiveSheetCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'has-user-specific-active-sheet' }, this.cmdParams));
		},
		validateInvokeParams: function HasUserSpecificActiveSheetCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sheetName')) {
				throw new ss.Exception('missing param DocParams.SheetName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HasUserSpecificActiveSheetCmd$Response]));
	ss.initClass($tab_HasUserSpecificActiveSheetCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'isSheetUserSpecific')) {
				throw new ss.Exception('missing param DocParams.IsSheetUserSpecific');
			}
		}
	});
	ss.initClass($tab_HighlightItemsByPatternMatchCmd, $asm, {
		invoke: function HighlightItemsByPatternMatchCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'highlight-items-by-pattern-match' }, this.cmdParams));
		},
		validateInvokeParams: function HighlightItemsByPatternMatchCmd$ValidateInvokeParams() {
			if (ss.keyExists(this.cmdParams, 'qualifiedFieldCaption') === ss.keyExists(this.cmdParams, 'fn')) {
				throw new ss.Exception('must have one and only one of params DocParams.QualifiedFieldCaption and DocParams.FieldName');
			}
			if (!ss.keyExists(this.cmdParams, 'valueString')) {
				throw new ss.Exception('missing param DocParams.ValueStr');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HighlightItemsByPatternMatchCmd$Response]));
	ss.initClass($tab_HighlightItemsByPatternMatchCmd$Response, $asm, {
		hasMatchedItemSet: function Response$HasMatchedItemSet() {
			return ss.keyExists(this.$$cmdParams, 'dataHighlighterItemSet');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initInterface($tab_IHistory, $asm, { get_tailIndex: null, get_recoveryStates: null, add: null, trackUndo: null, trackRedo: null, adopt: null });
	ss.initClass($tab_History, $asm, {
		get_recoveryStates: function History$get_RecoveryStates() {
			if (ss.isValue(this.$baseWorkbookGuid)) {
				var recovery = [this.$baseWorkbookGuid];
				for (var $t1 = 0; $t1 < this.$past.length; $t1++) {
					var guid = this.$past[$t1];
					recovery.push(guid);
				}
				return recovery;
			}
			else {
				return this.$past;
			}
		},
		get_tailIndex: function History$get_TailIndex() {
			return this.$past.length - 1;
		},
		$revert: function History$Revert() {
			this.$past = [];
			this.$future = [];
		},
		add: function History$Add(recoveryId, serverHistoryPosition) {
			var localHistorySize = this.$past.length;
			if (serverHistoryPosition !== localHistorySize + 1) {
				if (localHistorySize === 0 && serverHistoryPosition > 0) {
					this.$past = new Array(serverHistoryPosition - 1);
				}
			}
			this.$past.push(recoveryId);
			this.$future = [];
			return localHistorySize;
		},
		trackUndo: function History$TrackUndo() {
			if (this.$past.length === 0) {
				throw new ss.ArgumentOutOfRangeException();
			}
			this.$future.push(this.$past.pop());
			return this.get_tailIndex();
		},
		trackRedo: function History$TrackRedo() {
			if (this.$future.length === 0) {
				throw new ss.ArgumentOutOfRangeException();
			}
			this.$past.push(this.$future.pop());
			return this.get_tailIndex();
		},
		adopt: function History$Adopt(initialTickets) {
			if (ss.isNullOrUndefined(initialTickets)) {
				return;
			}
			this.$revert();
			for (var $t1 = 0; $t1 < initialTickets.length; $t1++) {
				var guid = initialTickets[$t1];
				this.$past.push(guid);
			}
		}
	}, null, [$tab_IHistory]);
	ss.initClass($tab_HistoryManager, $asm, {});
	ss.initClass($tab_HitTestSceneCmd, $asm, {
		invoke: function HitTestSceneCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'hit-test-scene' }, this.cmdParams));
		},
		validateInvokeParams: function HitTestSceneCmd$ValidateInvokeParams() {
			if (ss.keyExists(this.cmdParams, 'regionRect') === ss.keyExists(this.cmdParams, 'pt1')) {
				throw new ss.Exception('must have one and only one of params DocParams.RegionRect and DocParams.Point1');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_HitTestSceneCmd$Response]));
	ss.initClass($tab_HitTestSceneCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'sceneElements')) {
				throw new ss.Exception('missing param DocParams.SceneElements');
			}
		}
	});
	ss.initEnum($tab_HTMLEscape, $asm, { escape: 0, noEscape: 1 });
	ss.initInterface($tab_IContinuousRangeModel, $asm, { add_sliderFractionUpdated: null, remove_sliderFractionUpdated: null, get_currentFraction: null, setCurrentFraction: null });
	ss.initInterface($tab_IDataSourceDataNotification, $asm, { returnDataSourceDataModel: null });
	ss.initInterface($tab_IExportImageHelper, $asm, { get_sheetScrollPositions: null });
	ss.initInterface($tab_IExportPdfHelper, $asm, { triggerExportPdfUI: null });
	ss.initInterface($tab_IFormattingConverterObject, $asm, { get_getFontFamily: null, setCSS: null, hasStyleProperty: null });
	ss.initClass($tab_ImageTileTracker, $asm, {});
	ss.initClass($tab_ImageZoneModel, $asm, {
		add_newImageZone: function ImageZoneModel$add_NewImageZone(value) {
			this.$2$NewImageZoneField = ss.delegateCombine(this.$2$NewImageZoneField, value);
		},
		remove_newImageZone: function ImageZoneModel$remove_NewImageZone(value) {
			this.$2$NewImageZoneField = ss.delegateRemove(this.$2$NewImageZoneField, value);
		},
		get_zoneModel: function ImageZoneModel$get_ZoneModel() {
			return this.$zoneModel;
		},
		update: function ImageZoneModel$Update(imageZonePresModel, context) {
			this.simpleSwapToUpdate(imageZonePresModel, this.$2$NewImageZoneField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_IntersectionFontFamilyProviderBuilder, $asm, {
		addFontList: function IntersectionFontFamilyProviderBuilder$AddFontList(fonts) {
			if (ss.isNullOrUndefined(this.$families)) {
				this.$families = ss.arrayClone(fonts);
				return;
			}
			var intersection = _.intersection(this.$families, fonts);
			this.$families = intersection;
		},
		toFontFamilyProvider: function IntersectionFontFamilyProviderBuilder$ToFontFamilyProvider() {
			if (ss.isNullOrUndefined(this.$families)) {
				return new $tab_SimpleFontListProvider.$ctor2([]);
			}
			return new $tab_SimpleFontListProvider.$ctor2(Array.prototype.slice.call(this.$families));
		}
	});
	ss.initClass($tab_InvalidationInfo, $asm, {});
	ss.initClass($tab_IsWebZoneUrlValidCmd, $asm, {
		invoke: function IsWebZoneUrlValidCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'is-web-zone-url-valid' }, this.cmdParams));
		},
		validateInvokeParams: function IsWebZoneUrlValidCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'urlString')) {
				throw new ss.Exception('missing param DocParams.URLString');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_IsWebZoneUrlValidCmd$Response]));
	ss.initClass($tab_IsWebZoneUrlValidCmd$Response, $asm, {
		hasValidationMessage: function Response$HasValidationMessage() {
			return ss.keyExists(this.$$cmdParams, 'validationMessage');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'isValid')) {
				throw new ss.Exception('missing param DocParams.IsValid');
			}
		}
	});
	ss.initInterface($tab_IWaitForCommands, $asm, { handleCommandStarted: null, handleCommandCompleted: null, handleCommandError: null });
	ss.initClass($tab_JQueryFormattingConverterObject, $asm, {
		get_getFontFamily: function JQueryFormattingConverterObject$get_GetFontFamily() {
			return this.$obj.css('font-family');
		},
		setCSS: function JQueryFormattingConverterObject$SetCSS(newCss) {
			this.$obj.css(newCss);
		},
		hasStyleProperty: function JQueryFormattingConverterObject$HasStyleProperty(javascriptPropertyName) {
			return !ss.isNullOrEmptyString(this.$obj.prop('style')[javascriptPropertyName]);
		}
	}, null, [$tab_IFormattingConverterObject]);
	ss.initClass($tab_JsModuleConfigurationBuilder, $asm, {
		andMarkAsRawJavaScriptModule: function JsModuleConfigurationBuilder$AndMarkAsRawJavaScriptModule() {
			this.moduleBeingConfigured.isRawJavaScriptModule = true;
			return this;
		},
		andMarkAsAlreadyLoadedInGlobalNamespace: function JsModuleConfigurationBuilder$AndMarkAsAlreadyLoadedInGlobalNamespace() {
			this.moduleBeingConfigured.loadingMethod = 'alreadyLoaded';
			return this;
		},
		andShowLoadingIndicator: function JsModuleConfigurationBuilder$AndShowLoadingIndicator() {
			this.moduleBeingConfigured.loadingMethod = 'synchronous';
			return this;
		},
		andLoadOnDemandIf: function JsModuleConfigurationBuilder$AndLoadOnDemandIf(condition) {
			this.moduleBeingConfigured.loadingMethod = (condition ? 'asynchronous' : 'alreadyLoaded');
			return this;
		},
		andExportResultAs: function JsModuleConfigurationBuilder$AndExportResultAs(globalName) {
			if (ss.isNullOrEmptyString(globalName)) {
				throw new ss.ArgumentNullException('globalName');
			}
			this.moduleBeingConfigured.shouldExportResult = true;
			this.moduleBeingConfigured.exportResultName = globalName;
			return this;
		},
		andWaitUntilModuleReady: function JsModuleConfigurationBuilder$AndWaitUntilModuleReady(waitUntilModuleReadyFunc) {
			if (ss.staticEquals(waitUntilModuleReadyFunc, null)) {
				throw new ss.ArgumentNullException('waitUntilModuleReadyFunc');
			}
			this.moduleBeingConfigured.waitUntilModuleReadyFunc = waitUntilModuleReadyFunc;
			return this;
		}
	});
	ss.initClass($tab_JsModuleInfo, $asm, {
		get_dependencies: function JsModuleInfo$get_Dependencies() {
			return this.$dependencies;
		},
		get_stylesheetDependencies: function JsModuleInfo$get_StylesheetDependencies() {
			return this.$stylesheetDependencies;
		},
		get_hasDependencies: function JsModuleInfo$get_HasDependencies() {
			return this.$dependencies.length > 0;
		},
		get_hasDependenciesOnStylesheets: function JsModuleInfo$get_HasDependenciesOnStylesheets() {
			return this.$stylesheetDependencies.length > 0;
		},
		addDependency: function JsModuleInfo$AddDependency(dependency) {
			tab.Param.verifyValue(dependency, 'dependency');
			this.$dependencies.push(dependency);
		},
		addDependencyOnCssFile: function JsModuleInfo$AddDependencyOnCssFile(cssFile) {
			tab.Param.verifyString(cssFile, 'cssFile');
			this.$stylesheetDependencies.push(cssFile);
		}
	});
	ss.initClass($tab_LaunchAlternativeFederationEngineDialogCmd, $asm, {
		invoke: function LaunchAlternativeFederationEngineDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'launch-alternative-federation-engine-dialog' }, this.cmdParams));
		},
		validateInvokeParams: function LaunchAlternativeFederationEngineDialogCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'learnMoreUri')) {
				throw new ss.Exception('missing param DocParams.LearnMoreUri');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_LaunchAlternativeFederationEngineDialogCmd$Response]));
	ss.initClass($tab_LaunchAlternativeFederationEngineDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_LaunchCustomSqlDialogCmd, $asm, {
		invoke: function LaunchCustomSqlDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'launch-custom-sql-dialog' }, this.cmdParams));
		},
		validateInvokeParams: function LaunchCustomSqlDialogCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_LaunchCustomSqlDialogCmd$Response]));
	ss.initClass($tab_LaunchCustomSqlDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_LaunchInitialSqlDialogCmd, $asm, {
		invoke: function LaunchInitialSqlDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'launch-initial-sql-dialog' }, this.cmdParams));
		},
		validateInvokeParams: function LaunchInitialSqlDialogCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
			if (!ss.keyExists(this.cmdParams, 'urlText')) {
				throw new ss.Exception('missing param DocParams.URLText');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_LaunchInitialSqlDialogCmd$Response]));
	ss.initClass($tab_LaunchInitialSqlDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_LaunchPermissionsPromptCmd, $asm, {
		invoke: function LaunchPermissionsPromptCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'launch-permissions-prompt' }, this.cmdParams));
		},
		validateInvokeParams: function LaunchPermissionsPromptCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_LaunchPermissionsPromptCmd$Response]));
	ss.initClass($tab_LaunchPermissionsPromptCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_LayerEncodingModel, $asm, {
		add_newLayerEncoding: function LayerEncodingModel$add_NewLayerEncoding(value) {
			this.$2$NewLayerEncodingField = ss.delegateCombine(this.$2$NewLayerEncodingField, value);
		},
		remove_newLayerEncoding: function LayerEncodingModel$remove_NewLayerEncoding(value) {
			this.$2$NewLayerEncodingField = ss.delegateRemove(this.$2$NewLayerEncodingField, value);
		},
		get_id: function LayerEncodingModel$get_Id() {
			return this.pm.paneSpec;
		},
		get_name: function LayerEncodingModel$get_Name() {
			return this.pm.name;
		},
		get_isTableCalc: function LayerEncodingModel$get_IsTableCalc() {
			return this.pm.isTableCalc;
		},
		get_paneDescriptorKeys: function LayerEncodingModel$get_PaneDescriptorKeys() {
			return this.pm.paneDescriptorKeys;
		},
		get_encodings: function LayerEncodingModel$get_Encodings() {
			return _.filter(this.pm.encodingUiItems, function(pm) {
				return pm.isVisible && pm.isEnabled;
			});
		},
		get_textEncodingDropdown: function LayerEncodingModel$get_TextEncodingDropdown() {
			return this.getDropdownPresModel('text-encoding');
		},
		get_colorEncodingDropdown: function LayerEncodingModel$get_ColorEncodingDropdown() {
			return this.getDropdownPresModel('color-encoding');
		},
		get_sortEncodingOptions: function LayerEncodingModel$get_SortEncodingOptions() {
			return this.getDropdownPresModel('sort-encoding');
		},
		get_currentPrimitiveType: function LayerEncodingModel$get_CurrentPrimitiveType() {
			var selected = _.find(this.get_primitiveTypes(), function(pt) {
				return pt.isSelected;
			});
			return selected;
		},
		get_primitiveTypes: function LayerEncodingModel$get_PrimitiveTypes() {
			return _.filter(this.pm.primitiveTypeUiItems, function(pm) {
				return pm.isVisible && pm.isEnabled;
			});
		},
		get_heatmapSettingsPresModel: function LayerEncodingModel$get_HeatmapSettingsPresModel() {
			return this.pm.heatmapSettings;
		},
		get_markSizeModel: function LayerEncodingModel$get_MarkSizeModel() {
			return this.$markSizeModel;
		},
		update: function LayerEncodingModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$2$NewLayerEncodingField, context);
			if (ss.isNullOrUndefined(this.$markSizeModel)) {
				this.$markSizeModel = new $tab_MarkSizeModel(this);
			}
			this.$markSizeModel.update(this.getDropdownPresModel('size-encoding'), context);
		},
		equals$1: function LayerEncodingModel$Equals(pm) {
			return this.get_id() === pm.paneSpec;
		},
		getDropdownPresModel: function LayerEncodingModel$GetDropdownPresModel(encoding) {
			var encodings = _.filter(this.pm.encodingUiItems, function(pm) {
				return pm.isVisible && pm.isEnabled && pm.encodingType === encoding;
			});
			if (ss.isNullOrUndefined(encodings) || encodings.length !== 1) {
				return null;
			}
			return encodings[0].marksCardDropdownItem;
		}
	}, $tab_Model);
	ss.initClass($tab_LayoutSession, $asm, {
		formatDashboardTempfileReference: function LayoutSession$FormatDashboardTempfileReference(tempfileid, keepfile, attachment) {
			return this.formatLayoutMethod(tsConfig.layoutid, 'tempfile') + '/?key=' + tempfileid + (keepfile ? '&keepfile=yes' : '') + (attachment ? '&attachment=yes' : '');
		},
		saveSharedView: function LayoutSession$SaveSharedView(button, primaryContentUrl, doShareAction) {
			var onSuccess = function(data, textStatus, xhr) {
				data['button'] = button;
				if (ss.isValue(data['guid'])) {
					$tab_XhrUtil.guid = data['guid'];
				}
			};
			var onError = ss.mkdel(this, function(xhr1, textStatus1, error) {
				$tab_XhrUtil.guid = null;
				if (xhr1.status === 410 || xhr1.status === 403) {
					this.defaultSessionErrorHandler.handleSessionExpiration(false);
				}
				else if (xhr1.status === 401) {
					this.handleAuthenticationFailure();
				}
				else {
					var data1 = new Object();
					data1['button'] = button;
					doShareAction(data1);
				}
			});
			var handler = this.createHandler(null, onSuccess, onError, 'none');
			var dat = {};
			dat['sheet_id'] = $tab_XhrUtil.get_currentTabName();
			dat['parent_id'] = $tab_XhrUtil.parentID;
			dat['primary_content_url'] = primaryContentUrl;
			dat['share_button'] = button;
			var args = this.basicPostOpts(this.formatSessionMethod('save_shared_view'), dat);
			args.async = false;
			args.timeout = 2000;
			this.request(args, handler);
		},
		saveAndOpenMetricsView: function LayoutSession$SaveAndOpenMetricsView() {
			window.open(this.formatSessionMethod('save_metrics_view'), 'metrics', 'scrollbars,resizable');
		},
		metricsViewDownloadUrl: function LayoutSession$MetricsViewDownloadUrl() {
			return this.formatSessionMethod('download_metrics_view');
		},
		getAutocompleteInfo: function LayoutSession$GetAutocompleteInfo(currentStr, updateFunc, field) {
			var onSuccess = function(resp, textStatus, xhr) {
				updateFunc(resp['new_value']);
			};
			var args = this.basicGetOpts(this.formatLayoutMethod(tsConfig.layoutid, 'getautocomplete'));
			var param = ss.mkdict(['fieldname', field, 'input_string', currentStr]);
			args.data = param;
			args.success = onSuccess;
			this.request(args, null);
		},
		performPostLoadOperations: function LayoutSession$PerformPostLoadOperations(sheetId, responseCallback) {
			var onSuccess = function(resp, textStatus, xhr) {
				if (ss.isValue(responseCallback)) {
					responseCallback(resp);
				}
			};
			var onError = ss.mkdel(this, function(request, textStatus1, error) {
				this.$handleError(error, request, true, null);
			});
			var handler = this.createHandler(null, onSuccess, onError, 'none');
			var param = ss.mkdict(['sheet_id', sheetId]);
			var args = { data: param, async: true, type: 'GET', headers: ss.mkdict(['Accept', 'text/javascript']), dataType: 'json', url: this.formatLayoutMethod(tsConfig.layoutid, 'performPostLoadOperations') };
			this.request(args, handler);
		}
	}, $tab_BaseSession, [$tab_IVizqlServerRequestHandler]);
	ss.initClass($tab_LayoutTreeItem, $asm, {
		get_children: function LayoutTreeItem$get_Children() {
			return this.$children;
		},
		get_itemKey: function LayoutTreeItem$get_ItemKey() {
			return this.$dataPresModel.name + this.$dataPresModel.zoneId;
		},
		get_isFloating: function LayoutTreeItem$get_IsFloating() {
			return this.$dataPresModel.isFloating;
		},
		get_zoneType: function LayoutTreeItem$get_ZoneType() {
			return this.$dataPresModel.zoneType;
		},
		get_isHorizontal: function LayoutTreeItem$get_IsHorizontal() {
			return this.$dataPresModel.isHorizontal;
		},
		get_name: function LayoutTreeItem$get_Name() {
			return this.$dataPresModel.name;
		},
		get_zoneID: function LayoutTreeItem$get_ZoneID() {
			return this.$dataPresModel.zoneId;
		},
		appendChildren: function LayoutTreeItem$AppendChildren(item) {
			this.$children.push(item);
		}
	});
	ss.initClass($tab_LayoutTreeModel, $asm, {
		add_layoutTreeUpdated: function LayoutTreeModel$add_LayoutTreeUpdated(value) {
			this.$2$LayoutTreeUpdatedField = ss.delegateCombine(this.$2$LayoutTreeUpdatedField, value);
		},
		remove_layoutTreeUpdated: function LayoutTreeModel$remove_LayoutTreeUpdated(value) {
			this.$2$LayoutTreeUpdatedField = ss.delegateRemove(this.$2$LayoutTreeUpdatedField, value);
		},
		update: function LayoutTreeModel$Update(dashboardZoneHierarchyPresModel, context) {
			if (!_.isEqual(this.pm, dashboardZoneHierarchyPresModel)) {
				this.$resetLayoutTree();
				this.$buildLayoutTree(dashboardZoneHierarchyPresModel);
				this.$cleanUpExpandedStateDictionary();
				this.$cleanUpIsEditingStateDictionary();
				this.simpleSwapToUpdate(dashboardZoneHierarchyPresModel, this.$2$LayoutTreeUpdatedField, context);
			}
		},
		saveExpandedState: function LayoutTreeModel$SaveExpandedState(zoneId, isExpanded) {
			this.$expandedStateDictionary[zoneId] = isExpanded;
		},
		saveIsEditingState: function LayoutTreeModel$SaveIsEditingState(zoneId, isEditing) {
			this.isEditingStateDictionary[zoneId] = isEditing;
		},
		expandTreeToCurrent: function LayoutTreeModel$ExpandTreeToCurrent(currentNodeZoneId) {
			if (ss.isNullOrUndefined(this.$layoutTreeItemDictionary[currentNodeZoneId])) {
				return;
			}
			var parent = this.$layoutTreeItemDictionary[currentNodeZoneId].parent;
			while (ss.isValue(parent)) {
				var parentZoneId = parent.get_zoneID();
				this.$expandedStateDictionary[parentZoneId] = true;
				parent = this.$layoutTreeItemDictionary[parentZoneId].parent;
			}
		},
		isItemExpanded: function LayoutTreeModel$IsItemExpanded(zoneId) {
			return ss.keyExists(this.$expandedStateDictionary, zoneId) && this.$expandedStateDictionary[zoneId];
		},
		getItemFromIndex: function LayoutTreeModel$GetItemFromIndex(index) {
			return this.$layoutTreeItemDictionary[index];
		},
		$buildLayoutTree: function LayoutTreeModel$BuildLayoutTree(dashboardZoneHierarchyPresModel) {
			var zoneCommonList = dashboardZoneHierarchyPresModel.zoneCommonListItems;
			this.$layoutTreeItemDictionary = $tab_LayoutTreeModel.$createLayoutTreeItemLookUpTable(zoneCommonList);
			if (ss.isValue(zoneCommonList)) {
				for (var $t1 = 0; $t1 < zoneCommonList.length; $t1++) {
					var zoneCommon = zoneCommonList[$t1];
					var parentZoneId = zoneCommon.parentZoneId;
					var item = this.$layoutTreeItemDictionary[zoneCommon.zoneId];
					var isRootItem = parentZoneId === 0;
					if (isRootItem) {
						this.rootNodes.push(item);
					}
					else {
						var parentItem = this.$layoutTreeItemDictionary[parentZoneId];
						if (!ss.isNullOrUndefined(parentItem)) {
							parentItem.appendChildren(item);
							item.parent = parentItem;
						}
					}
				}
			}
		},
		$cleanUpExpandedStateDictionary: function LayoutTreeModel$CleanUpExpandedStateDictionary() {
			if (ss.getKeyCount(this.$layoutTreeItemDictionary) === 0) {
				this.$expandedStateDictionary = {};
			}
			else {
				var $t1 = new ss.ObjectEnumerator(this.$expandedStateDictionary);
				try {
					while ($t1.moveNext()) {
						var entry = $t1.current();
						if (!ss.keyExists(this.$layoutTreeItemDictionary, entry.key)) {
							delete this.$expandedStateDictionary[entry.key];
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
		},
		$cleanUpIsEditingStateDictionary: function LayoutTreeModel$CleanUpIsEditingStateDictionary() {
			if (ss.getKeyCount(this.$layoutTreeItemDictionary) === 0) {
				this.isEditingStateDictionary = {};
			}
			else {
				var $t1 = new ss.ObjectEnumerator(this.isEditingStateDictionary);
				try {
					while ($t1.moveNext()) {
						var entry = $t1.current();
						if (!ss.keyExists(this.$layoutTreeItemDictionary, entry.key)) {
							delete this.isEditingStateDictionary[entry.key];
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
		},
		$resetLayoutTree: function LayoutTreeModel$ResetLayoutTree() {
			this.rootNodes = [];
		}
	}, $tab_Model);
	ss.initClass($tab_LegacyCategoricalQuickFilterData, $asm, {
		get_filterField: function LegacyCategoricalQuickFilterData$get_FilterField() {
			return this.$fieldName;
		},
		get_targetSheets: function LegacyCategoricalQuickFilterData$get_TargetSheets() {
			return this.$targetSheets;
		},
		set_targetSheets: function LegacyCategoricalQuickFilterData$set_TargetSheets(value) {
			this.$targetSheets = value;
		},
		get_includeAll: function LegacyCategoricalQuickFilterData$get_IncludeAll() {
			return this.$includeAll;
		},
		set_includeAll: function LegacyCategoricalQuickFilterData$set_IncludeAll(value) {
			this.$includeAll = value;
			this.clearValues();
		},
		get_isExclude: function LegacyCategoricalQuickFilterData$get_IsExclude() {
			return this.$isExclude;
		},
		addValue: function LegacyCategoricalQuickFilterData$AddValue(value) {
			if (ss.contains(this.$values, value)) {
				return false;
			}
			this.$values.push(value);
			return true;
		},
		clearValues: function LegacyCategoricalQuickFilterData$ClearValues() {
			ss.clear(this.$values);
		},
		getFilterValues: function LegacyCategoricalQuickFilterData$GetFilterValues() {
			return Array.prototype.slice.call(this.$values);
		},
		includesValue: function LegacyCategoricalQuickFilterData$IncludesValue(value) {
			if (this.get_includeAll()) {
				return true;
			}
			return this.$isExclude !== ss.contains(this.$values, value);
		},
		removeValue: function LegacyCategoricalQuickFilterData$RemoveValue(value) {
			if (ss.contains(this.$values, value)) {
				return false;
			}
			ss.remove(this.$values, value);
			return true;
		}
	});
	ss.initClass($tab_LegacyFilterModel, $asm, {
		add_filterUpdated: function LegacyFilterModel$add_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateCombine(this.$2$FilterUpdatedField, value);
		},
		remove_filterUpdated: function LegacyFilterModel$remove_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateRemove(this.$2$FilterUpdatedField, value);
		},
		get_filterPresModel: function LegacyFilterModel$get_FilterPresModel() {
			return this.pm;
		},
		get_filterType: function LegacyFilterModel$get_FilterType() {
			switch (this.get_filterPresModel().type) {
				case 'Q': {
					return 'Quantitative';
				}
				case 'H': {
					return 'Hierarchical';
				}
				case 'C': {
					return 'Categorical';
				}
				case 'RD': {
					if (this.get_filterPresModel().showRelDatePick) {
						return 'RelativeDatePick';
					}
					else {
						return 'RelativeDate';
					}
				}
				default: {
					return 'FilterDefault';
				}
			}
		},
		get_globalFieldName: function LegacyFilterModel$get_GlobalFieldName() {
			var pm = this.pm;
			var name = new String();
			name = '[';
			for (var ii = 0; ii < pm.name.length; ++ii) {
				if (ss.endsWithString(name, ']')) {
					name += '.';
					name += '[';
				}
				name += pm.name[ii];
				name += ']';
			}
			return name;
		},
		update: function LegacyFilterModel$Update(newFilterPresModel, context) {
			if (!this.isNewPresModelSameAsOld(newFilterPresModel)) {
				this.pm = newFilterPresModel;
				this.raiseEvent(this.$2$FilterUpdatedField, context);
			}
			else if (ss.isValue(newFilterPresModel) && newFilterPresModel.isTiled) {
				this.raiseEvent(this.$2$FilterUpdatedField, context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_LegacyCategoricalQuickFilterModel, $asm, {
		get_filterType: function LegacyCategoricalQuickFilterModel$get_FilterType() {
			return 'Categorical';
		},
		get_mode: function LegacyCategoricalQuickFilterModel$get_Mode() {
			switch (this.get_filterPresModel().mode) {
				case 'checklist': {
					return 'check-list';
				}
				case 'radiolist': {
					return 'radio-list';
				}
				case 'dropdown': {
					return 'dropdown';
				}
				case 'checkdropdown': {
					return 'check-dropdown';
				}
				case 'slider': {
					return 'slider';
				}
				case 'pattern': {
					return 'pattern';
				}
				case 'typeinlist': {
					return 'type-in-list';
				}
				default: {
					return 'check-list';
				}
			}
		},
		get_pattern: function LegacyCategoricalQuickFilterModel$get_Pattern() {
			return this.get_filterPresModel().pattern;
		},
		get_isAllButtonVisible: function LegacyCategoricalQuickFilterModel$get_IsAllButtonVisible() {
			return this.$isAllButtonVisible;
		},
		set_isAllButtonVisible: function LegacyCategoricalQuickFilterModel$set_IsAllButtonVisible(value) {
			this.$isAllButtonVisible = value;
		},
		get_isAllMode: function LegacyCategoricalQuickFilterModel$get_IsAllMode() {
			return this.get_filterPresModel().all;
		},
		get_allItemsAreChecked: function LegacyCategoricalQuickFilterModel$get_AllItemsAreChecked() {
			return this.get_filterPresModel().allChecked;
		},
		get_noItemsAreChecked: function LegacyCategoricalQuickFilterModel$get_NoItemsAreChecked() {
			return this.get_filterPresModel().allNotChecked;
		},
		get_exclude: function LegacyCategoricalQuickFilterModel$get_Exclude() {
			return this.get_filterPresModel().exclude;
		},
		get_isTiled: function LegacyCategoricalQuickFilterModel$get_IsTiled() {
			return this.get_filterPresModel().isTiled;
		},
		get_isSearchable: function LegacyCategoricalQuickFilterModel$get_IsSearchable() {
			return this.get_filterPresModel().is_searchable;
		},
		get_summary: function LegacyCategoricalQuickFilterModel$get_Summary() {
			return this.get_filterPresModel().summary;
		},
		get_underlyingDataSourceIsCube: function LegacyCategoricalQuickFilterModel$get_UnderlyingDataSourceIsCube() {
			return this.get_filterPresModel().catIsHier;
		},
		get_condition: function LegacyCategoricalQuickFilterModel$get_Condition() {
			return this.get_filterPresModel().condition;
		},
		get_limit: function LegacyCategoricalQuickFilterModel$get_Limit() {
			return this.get_filterPresModel().limit;
		},
		get_rangeType: function LegacyCategoricalQuickFilterModel$get_RangeType() {
			return this.get_filterPresModel().rangeType;
		},
		get_catFilterTable: function LegacyCategoricalQuickFilterModel$get_CatFilterTable() {
			return this.get_filterPresModel().table;
		},
		get_domainActualSize: function LegacyCategoricalQuickFilterModel$get_DomainActualSize() {
			return this.get_catFilterTable().actual_size;
		},
		get_tuples: function LegacyCategoricalQuickFilterModel$get_Tuples() {
			return this.get_catFilterTable().tuples;
		},
		get_domainType: function LegacyCategoricalQuickFilterModel$get_DomainType() {
			return this.get_filterPresModel().domainType;
		}
	}, $tab_LegacyFilterModel);
	ss.initClass($tab_LegacyHierarchicalQuickFilterModel, $asm, {
		get_filterType: function LegacyHierarchicalQuickFilterModel$get_FilterType() {
			return 'Hierarchical';
		},
		get_hierarchyTables: function LegacyHierarchicalQuickFilterModel$get_HierarchyTables() {
			return this.get_filterPresModel().table;
		},
		get_levels: function LegacyHierarchicalQuickFilterModel$get_Levels() {
			return this.get_filterPresModel().levels;
		},
		get_isSearchable: function LegacyHierarchicalQuickFilterModel$get_IsSearchable() {
			return this.get_filterPresModel().is_searchable;
		}
	}, $tab_LegacyFilterModel);
	ss.initClass($tab_LegacyLegendModel, $asm, {
		add_newLegacyLegend: function LegacyLegendModel$add_NewLegacyLegend(value) {
			this.$2$NewLegacyLegendField = ss.delegateCombine(this.$2$NewLegacyLegendField, value);
		},
		remove_newLegacyLegend: function LegacyLegendModel$remove_NewLegacyLegend(value) {
			this.$2$NewLegacyLegendField = ss.delegateRemove(this.$2$NewLegacyLegendField, value);
		},
		update: function LegacyLegendModel$Update(newPresModel, context) {
			$tab_FontNotificationUtil.notifyFontsFromServerRenderedLegendPresModel(newPresModel);
			this.simpleSwapToUpdate(newPresModel, this.$2$NewLegacyLegendField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_LegacyQuantitativeQuickFilterModel, $asm, {
		get_filterType: function LegacyQuantitativeQuickFilterModel$get_FilterType() {
			return 'Quantitative';
		},
		get_range: function LegacyQuantitativeQuickFilterModel$get_Range() {
			return this.get_filterPresModel().range;
		},
		get_data: function LegacyQuantitativeQuickFilterModel$get_Data() {
			return this.get_filterPresModel().data;
		},
		get_dateFormat: function LegacyQuantitativeQuickFilterModel$get_DateFormat() {
			return this.get_filterPresModel().date_format;
		},
		get_editingFormat: function LegacyQuantitativeQuickFilterModel$get_EditingFormat() {
			return this.get_filterPresModel().editing_format;
		},
		get_format: function LegacyQuantitativeQuickFilterModel$get_Format() {
			return this.get_filterPresModel().format;
		},
		get_calendarControlStartOfWeek: function LegacyQuantitativeQuickFilterModel$get_CalendarControlStartOfWeek() {
			return this.get_filterPresModel().first_day_of_week;
		},
		get_dataSourceStartOfWeek: function LegacyQuantitativeQuickFilterModel$get_DataSourceStartOfWeek() {
			return this.get_filterPresModel().start_of_week;
		},
		get_quantitativeFilterTable: function LegacyQuantitativeQuickFilterModel$get_QuantitativeFilterTable() {
			return this.get_filterPresModel().table;
		},
		get_domainType: function LegacyQuantitativeQuickFilterModel$get_DomainType() {
			return this.get_filterPresModel().domainType;
		}
	}, $tab_LegacyFilterModel);
	ss.initClass($tab_LegacyQuickFilterDisplayModel, $asm, {
		add_quickFilterDisplayUpdated: function LegacyQuickFilterDisplayModel$add_QuickFilterDisplayUpdated(value) {
			this.$2$QuickFilterDisplayUpdatedField = ss.delegateCombine(this.$2$QuickFilterDisplayUpdatedField, value);
		},
		remove_quickFilterDisplayUpdated: function LegacyQuickFilterDisplayModel$remove_QuickFilterDisplayUpdated(value) {
			this.$2$QuickFilterDisplayUpdatedField = ss.delegateRemove(this.$2$QuickFilterDisplayUpdatedField, value);
		},
		get_quickFilterTitle: function LegacyQuickFilterDisplayModel$get_QuickFilterTitle() {
			return this.get_quickFilterDisplayPresModel().quickFilterTitle;
		},
		get_quickFilterCommands: function LegacyQuickFilterDisplayModel$get_QuickFilterCommands() {
			return this.get_quickFilterDisplayPresModel().quickFilterCommands;
		},
		get_quickFilterDomainCommands: function LegacyQuickFilterDisplayModel$get_QuickFilterDomainCommands() {
			return this.get_quickFilterDisplayPresModel().quickFilterDomainCommands;
		},
		get_quickFilterModeMatrix: function LegacyQuickFilterDisplayModel$get_QuickFilterModeMatrix() {
			var newFilter = tab.FeatureParamsLookup.getBool(4);
			if (newFilter) {
				return this.$buildTempQuickFilterModeMatrix();
			}
			else {
				return null;
			}
		},
		get_quickFilterDisplayPresModel: function LegacyQuickFilterDisplayModel$get_QuickFilterDisplayPresModel() {
			return this.pm;
		},
		get_fieldName: function LegacyQuickFilterDisplayModel$get_FieldName() {
			return this.get_quickFilterDisplayPresModel().quickFilter.fn;
		},
		get_zoneModel: function LegacyQuickFilterDisplayModel$get_ZoneModel() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone();
		},
		get_contentStyle: function LegacyQuickFilterDisplayModel$get_ContentStyle() {
			return this.get_zoneModel().get_zoneCommonModel().get_contentStyle();
		},
		get_blendedZoneContentColor: function LegacyQuickFilterDisplayModel$get_BlendedZoneContentColor() {
			return this.get_zoneModel().get_blendedZoneContentColor();
		},
		get_attributes: function LegacyQuickFilterDisplayModel$get_Attributes() {
			return this.$frame.attributes;
		},
		get_width: function LegacyQuickFilterDisplayModel$get_Width() {
			return this.get_zoneModel().get_width();
		},
		update: function LegacyQuickFilterDisplayModel$Update(newQuickFilterDisplayPresModel, newFrame, context) {
			var frameUpdated = !_.isEqual(this.$frame, newFrame);
			this.$frame = newFrame;
			if (this.isNewPresModelSameAsOld(newQuickFilterDisplayPresModel)) {
				if (frameUpdated) {
					this.raiseEvent$1(Object).call(this, this.$2$QuickFilterDisplayUpdatedField, newQuickFilterDisplayPresModel, context);
				}
				return;
			}
			if (ss.isValue(newQuickFilterDisplayPresModel)) {
				$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(newQuickFilterDisplayPresModel.textStyle);
			}
			if (ss.isValue(newQuickFilterDisplayPresModel) && ss.isValue(newQuickFilterDisplayPresModel.quickFilterCommands)) {
				this.$quickFilterCommandsModel = new $tab_CommandsModel(this);
			}
			this.$quickFilterCommandsModel.update(newQuickFilterDisplayPresModel.quickFilterCommands, context);
			this.simpleSwapToUpdate$1(Object).call(this, newQuickFilterDisplayPresModel, this.$2$QuickFilterDisplayUpdatedField, newQuickFilterDisplayPresModel, context);
		},
		$buildTempQuickFilterModeMatrix: function LegacyQuickFilterDisplayModel$BuildTempQuickFilterModeMatrix() {
			var modes = [];
			var aggTypes = ['year', 'qtr', 'month', 'day', 'hour', 'minute', 'second', 'week', 'weekday', 'month-year', 'mdy', 'none', 'trunc-year', 'trunc-qtr', 'trunc-month', 'trunc-week', 'trunc-day', 'trunc-hour', 'trunc-minute', 'trunc-second'];
			var catModes = ['check-list', 'radio-list', 'dropdown', 'slider', 'pattern', 'type-in-list', 'check-dropdown'];
			var quantModes = ['min-max', 'min-only', 'max-only', 'rel-date', 'rel-pick'];
			for (var $t1 = 0; $t1 < aggTypes.length; $t1++) {
				var aggType = aggTypes[$t1];
				for (var $t2 = 0; $t2 < catModes.length; $t2++) {
					var catMode = catModes[$t2];
					var mode = {};
					mode.aggregation = aggType;
					mode.categoricalMode = catMode;
					modes.push(mode);
				}
				for (var $t3 = 0; $t3 < quantModes.length; $t3++) {
					var quantMode = quantModes[$t3];
					var mode1 = {};
					mode1.aggregation = aggType;
					mode1.quantitativeMode = quantMode;
					modes.push(mode1);
				}
			}
			return modes;
		}
	}, $tab_Model);
	ss.initClass($tab_LegacyRelativeDateQuickFilterModel, $asm, {
		get_filterType: function LegacyRelativeDateQuickFilterModel$get_FilterType() {
			return (this.get_isRelativeDatePick() ? 'RelativeDatePick' : 'RelativeDate');
		},
		get_defaultFormat: function LegacyRelativeDateQuickFilterModel$get_DefaultFormat() {
			return this.get_filterPresModel().default_format;
		},
		get_fiscalYearStart: function LegacyRelativeDateQuickFilterModel$get_FiscalYearStart() {
			return this.get_filterPresModel().fy;
		},
		get_noTime: function LegacyRelativeDateQuickFilterModel$get_NoTime() {
			return this.get_filterPresModel().noTime;
		},
		get_isRelativeDatePick: function LegacyRelativeDateQuickFilterModel$get_IsRelativeDatePick() {
			return this.get_filterPresModel().showRelDatePick;
		},
		get_text: function LegacyRelativeDateQuickFilterModel$get_Text() {
			return this.get_filterPresModel().text;
		},
		get_relativeDateTable: function LegacyRelativeDateQuickFilterModel$get_RelativeDateTable() {
			return this.get_filterPresModel().table;
		},
		get_periodType: function LegacyRelativeDateQuickFilterModel$get_PeriodType() {
			return this.get_relativeDateTable().periodType;
		},
		get_rangeType: function LegacyRelativeDateQuickFilterModel$get_RangeType() {
			return this.get_relativeDateTable().rangeType;
		},
		get_rangeN: function LegacyRelativeDateQuickFilterModel$get_RangeN() {
			return this.get_relativeDateTable().rangeN;
		},
		get_anchor: function LegacyRelativeDateQuickFilterModel$get_Anchor() {
			return this.get_relativeDateTable().anchor;
		}
	}, $tab_LegacyFilterModel);
	ss.initClass($tab_LevelModel, $asm, {
		get_levelNumber: function LevelModel$get_LevelNumber() {
			return this.pm.levelNumber;
		},
		get_canHaveChildren: function LevelModel$get_CanHaveChildren() {
			return true;
		},
		get_instanceType: function LevelModel$get_InstanceType() {
			return 'level';
		},
		get_linkedAttributes: function LevelModel$get_LinkedAttributes() {
			return this.$4$LinkedAttributesField;
		},
		set_linkedAttributes: function LevelModel$set_LinkedAttributes(value) {
			this.$4$LinkedAttributesField = value;
		},
		update$1: function LevelModel$Update(pm, newLinkedAttributes) {
			this.swapAndCopyPresModel(pm);
			this.set_linkedAttributes(newLinkedAttributes);
		}
	}, $tab_FieldColumnModel);
	ss.initClass($tab_LevelModelFactory, $asm, {});
	ss.initClass($tab_LinearRangeTransform, $asm, {
		fractionToValue: function LinearRangeTransform$FractionToValue(fract) {
			return this.$min + fract * (this.$max - this.$min);
		},
		valueToFraction: function LinearRangeTransform$ValueToFraction(value) {
			return ((this.$min === this.$max) ? 0 : ((value - this.$min) / (this.$max - this.$min)));
		}
	}, $tab_RangeTransform);
	ss.initClass($tab_LocalUbertipInfo, $asm, {
		get_interactedTupleId: function LocalUbertipInfo$get_InteractedTupleId() {
			return this.$interactedTupleId;
		},
		get_affectedTupleIds: function LocalUbertipInfo$get_AffectedTupleIds() {
			return this.$affectedTupleIds;
		},
		get_paneDescriptorKey: function LocalUbertipInfo$get_PaneDescriptorKey() {
			return this.$paneDescriptorKey;
		},
		get_needRemoteUbertip: function LocalUbertipInfo$get_NeedRemoteUbertip() {
			return this.$needRemoteUbertip;
		}
	});
	ss.initClass($tab_MapboxMapSourceModel, $asm, {
		add_styleRefreshRequired: function MapboxMapSourceModel$add_StyleRefreshRequired(value) {
			this.$2$StyleRefreshRequiredField = ss.delegateCombine(this.$2$StyleRefreshRequiredField, value);
		},
		remove_styleRefreshRequired: function MapboxMapSourceModel$remove_StyleRefreshRequired(value) {
			this.$2$StyleRefreshRequiredField = ss.delegateRemove(this.$2$StyleRefreshRequiredField, value);
		},
		get_hasPresModel: function MapboxMapSourceModel$get_HasPresModel() {
			return ss.isValue(this.pm);
		},
		get_mapboxMapSourcePresModel: function MapboxMapSourceModel$get_MapboxMapSourcePresModel() {
			return this.pm;
		},
		get_accessToken: function MapboxMapSourceModel$get_AccessToken() {
			return this.get_mapboxMapSourcePresModel().mapboxAccessToken;
		},
		get_baseUrl: function MapboxMapSourceModel$get_BaseUrl() {
			return this.get_mapboxMapSourcePresModel().mapboxBaseUrl;
		},
		get_styleJsonUrl: function MapboxMapSourceModel$get_StyleJsonUrl() {
			return this.get_mapboxMapSourcePresModel().mapboxStyleJsonUrl;
		},
		get_mapCodeFilterKeyword: function MapboxMapSourceModel$get_MapCodeFilterKeyword() {
			return this.get_mapboxMapSourcePresModel().mapCodeFilterKeyword;
		},
		get_mapCode: function MapboxMapSourceModel$get_MapCode() {
			return this.get_mapboxMapSourcePresModel().mapCode;
		},
		get_languageCodePropertyKeyword: function MapboxMapSourceModel$get_LanguageCodePropertyKeyword() {
			return this.get_mapboxMapSourcePresModel().mapLanguageCodePropertyKeyword;
		},
		get_languageCode: function MapboxMapSourceModel$get_LanguageCode() {
			return this.get_mapboxMapSourcePresModel().mapLanguageCode;
		},
		get_enabledMapLayerIds: function MapboxMapSourceModel$get_EnabledMapLayerIds() {
			var enabledMapLayerIds = this.get_mapboxMapSourcePresModel().enabledMapLayerIds;
			var set = new Set();
			if (ss.isValue(enabledMapLayerIds)) {
				for (var $t1 = 0; $t1 < enabledMapLayerIds.length; $t1++) {
					var id = enabledMapLayerIds[$t1];
					set.add(id);
				}
			}
			return set;
		},
		get_dataRequestUrl: function MapboxMapSourceModel$get_DataRequestUrl() {
			return this.get_mapboxMapSourcePresModel().mapDataRequestUrl;
		},
		get_dataColorRamp: function MapboxMapSourceModel$get_DataColorRamp() {
			return this.get_mapboxMapSourcePresModel().mapDataColorRamp;
		},
		get_dataInsertAbove: function MapboxMapSourceModel$get_DataInsertAbove() {
			return this.get_mapboxMapSourcePresModel().mapDataInsertAbove;
		},
		get_dataOpacity: function MapboxMapSourceModel$get_DataOpacity() {
			return this.get_mapboxMapSourcePresModel().mapDataOpacity;
		},
		get_dataSourceLayer: function MapboxMapSourceModel$get_DataSourceLayer() {
			return this.get_mapboxMapSourcePresModel().mapDataSourceLayer;
		},
		update: function MapboxMapSourceModel$Update(newPresModel, context) {
			if (this.isNewPresModelSameAsOld(newPresModel)) {
				return;
			}
			this.swapAndCopyPresModel(newPresModel);
			if (ss.isValue(newPresModel)) {
				this.raiseEvent(this.$2$StyleRefreshRequiredField, context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_MapClientCommands, $asm, {});
	ss.initClass($tab_MapOptionsInfoModel, $asm, {
		add_updatedMapOptionsInfo: function MapOptionsInfoModel$add_UpdatedMapOptionsInfo(value) {
			this.$2$UpdatedMapOptionsInfoField = ss.delegateCombine(this.$2$UpdatedMapOptionsInfoField, value);
		},
		remove_updatedMapOptionsInfo: function MapOptionsInfoModel$remove_UpdatedMapOptionsInfo(value) {
			this.$2$UpdatedMapOptionsInfoField = ss.delegateRemove(this.$2$UpdatedMapOptionsInfoField, value);
		},
		add_stopNotifying: function MapOptionsInfoModel$add_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateCombine(this.$2$StopNotifyingField, value);
		},
		remove_stopNotifying: function MapOptionsInfoModel$remove_StopNotifying(value) {
			this.$2$StopNotifyingField = ss.delegateRemove(this.$2$StopNotifyingField, value);
		},
		get_lightweightMapOptionsPresModel: function MapOptionsInfoModel$get_LightweightMapOptionsPresModel() {
			return this.pm;
		},
		get_shouldShowGeographicSearch: function MapOptionsInfoModel$get_ShouldShowGeographicSearch() {
			return this.get_lightweightMapOptionsPresModel().showGeographicSearch;
		},
		get_shouldShowFloatingZoomToolbar: function MapOptionsInfoModel$get_ShouldShowFloatingZoomToolbar() {
			return this.get_lightweightMapOptionsPresModel().showFloatingZoomToolbar;
		},
		get_shouldAllowPanZoom: function MapOptionsInfoModel$get_ShouldAllowPanZoom() {
			return this.get_lightweightMapOptionsPresModel().allowPanZoom;
		},
		get_canToggleGeographicSearch: function MapOptionsInfoModel$get_CanToggleGeographicSearch() {
			return this.get_lightweightMapOptionsPresModel().canToggleGeographicSearch;
		},
		get_shouldShowMapScale: function MapOptionsInfoModel$get_ShouldShowMapScale() {
			return this.get_lightweightMapOptionsPresModel().showMapScale;
		},
		get_canToggleMapScale: function MapOptionsInfoModel$get_CanToggleMapScale() {
			return this.get_lightweightMapOptionsPresModel().canToggleMapScale;
		},
		get_canSetMapUnit: function MapOptionsInfoModel$get_CanSetMapUnit() {
			return this.get_lightweightMapOptionsPresModel().canSetMapUnit;
		},
		get_hasPresModel: function MapOptionsInfoModel$get_HasPresModel() {
			return ss.isValue(this.get_lightweightMapOptionsPresModel());
		},
		get_dialogTitle: function MapOptionsInfoModel$get_DialogTitle() {
			return tab.Strings.MapOptionsDialogTitle;
		},
		get_notificationId: function MapOptionsInfoModel$get_NotificationId() {
			return 'doc:map-options-dialog-event';
		},
		get_vizID: function MapOptionsInfoModel$get_VizID() {
			return this.get_lightweightMapOptionsPresModel().visualIdPresModel;
		},
		get_mapUnitSelection: function MapOptionsInfoModel$get_MapUnitSelection() {
			return this.get_lightweightMapOptionsPresModel().defaultMapUnitEnum;
		},
		get_canToggleAutomaticDrill: function MapOptionsInfoModel$get_CanToggleAutomaticDrill() {
			return this.get_lightweightMapOptionsPresModel().canToggleAutomaticDrill;
		},
		get_shouldShowAutomaticDrill: function MapOptionsInfoModel$get_ShouldShowAutomaticDrill() {
			return this.get_lightweightMapOptionsPresModel().enableAutomaticDrill;
		},
		onNotify: function MapOptionsInfoModel$OnNotify(pm, context) {
			this.simpleSwapToUpdate(pm, this.$2$UpdatedMapOptionsInfoField, context);
		},
		detachNotifications: function MapOptionsInfoModel$DetachNotifications() {
			this.pm = null;
			if (!ss.staticEquals(this.$2$StopNotifyingField, null)) {
				this.$2$StopNotifyingField();
			}
		},
		update: function MapOptionsInfoModel$Update(newPresModel, context) {
			this.swapAndCopyPresModel(newPresModel);
			this.raiseEvent(this.$2$UpdatedMapOptionsInfoField, context);
		}
	}, $tab_Model, [$tab_IHandleNotifications, $tab_IDetachableNotificationHandler]);
	ss.initClass($tab_MapScaleInfoModel, $asm, {
		add_updatedMapScaleInfo: function MapScaleInfoModel$add_UpdatedMapScaleInfo(value) {
			this.$2$UpdatedMapScaleInfoField = ss.delegateCombine(this.$2$UpdatedMapScaleInfoField, value);
		},
		remove_updatedMapScaleInfo: function MapScaleInfoModel$remove_UpdatedMapScaleInfo(value) {
			this.$2$UpdatedMapScaleInfoField = ss.delegateRemove(this.$2$UpdatedMapScaleInfoField, value);
		},
		get_mapScaleInfoPresModel: function MapScaleInfoModel$get_MapScaleInfoPresModel() {
			return this.pm;
		},
		get_shouldShowMapScale: function MapScaleInfoModel$get_ShouldShowMapScale() {
			return this.get_mapScaleInfoPresModel().shouldShowMapScale;
		},
		get_mapScaleMarginOfError: function MapScaleInfoModel$get_MapScaleMarginOfError() {
			return this.get_mapScaleInfoPresModel().mapScaleMarginOfError;
		},
		get_mapScaleWidth: function MapScaleInfoModel$get_MapScaleWidth() {
			return this.get_mapScaleInfoPresModel().mapScaleWidth;
		},
		get_mapScaleReadoutString: function MapScaleInfoModel$get_MapScaleReadoutString() {
			return this.get_mapScaleInfoPresModel().mapScaleReadoutString;
		},
		get_mapScaleReadoutNumber: function MapScaleInfoModel$get_MapScaleReadoutNumber() {
			return this.get_mapScaleInfoPresModel().mapScaleReadoutNumber;
		},
		get_mapScaleReadoutUnit: function MapScaleInfoModel$get_MapScaleReadoutUnit() {
			return this.get_mapScaleInfoPresModel().mapScaleReadoutUnit;
		},
		get_mapScaleFontSizePixels: function MapScaleInfoModel$get_MapScaleFontSizePixels() {
			return this.get_mapScaleInfoPresModel().mapScaleFontSizePixels;
		},
		get_mapScaleColor: function MapScaleInfoModel$get_MapScaleColor() {
			return this.get_mapScaleInfoPresModel().mapScaleColor;
		},
		get_mapScaleTooltipString: function MapScaleInfoModel$get_MapScaleTooltipString() {
			return this.get_mapScaleInfoPresModel().mapScaleTooltipString;
		},
		get_mapScaleBorderColor: function MapScaleInfoModel$get_MapScaleBorderColor() {
			return this.get_mapScaleInfoPresModel().mapScaleBorderColor;
		},
		get_hasPresModel: function MapScaleInfoModel$get_HasPresModel() {
			return ss.isValue(this.get_mapScaleInfoPresModel());
		},
		update: function MapScaleInfoModel$Update(newPresModel, context) {
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
				this.raiseEvent(this.$2$UpdatedMapScaleInfoField, context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_MapServerModel, $asm, {
		add_newMapServerInfo: function MapServerModel$add_NewMapServerInfo(value) {
			this.$2$NewMapServerInfoField = ss.delegateCombine(this.$2$NewMapServerInfoField, value);
		},
		remove_newMapServerInfo: function MapServerModel$remove_NewMapServerInfo(value) {
			this.$2$NewMapServerInfoField = ss.delegateRemove(this.$2$NewMapServerInfoField, value);
		},
		add_tileSourceChanged: function MapServerModel$add_TileSourceChanged(value) {
			this.$2$TileSourceChangedField = ss.delegateCombine(this.$2$TileSourceChangedField, value);
		},
		remove_tileSourceChanged: function MapServerModel$remove_TileSourceChanged(value) {
			this.$2$TileSourceChangedField = ss.delegateRemove(this.$2$TileSourceChangedField, value);
		},
		add_useFastMapsChanged: function MapServerModel$add_UseFastMapsChanged(value) {
			this.$2$UseFastMapsChangedField = ss.delegateCombine(this.$2$UseFastMapsChangedField, value);
		},
		remove_useFastMapsChanged: function MapServerModel$remove_UseFastMapsChanged(value) {
			this.$2$UseFastMapsChangedField = ss.delegateRemove(this.$2$UseFastMapsChangedField, value);
		},
		get_useFastMaps: function MapServerModel$get_UseFastMaps() {
			return this.get_hasPresModel() && this.get_$mapServerPresModel().clientRequestsMapTiles;
		},
		get_hasPresModel: function MapServerModel$get_HasPresModel() {
			return ss.isValue(this.pm);
		},
		get_isAttributionVisible: function MapServerModel$get_IsAttributionVisible() {
			return this.get_$mapServerPresModel().showAttribution;
		},
		get_minZoom: function MapServerModel$get_MinZoom() {
			return this.get_$mapServerPresModel().mapMinZoom;
		},
		get_maxZoom: function MapServerModel$get_MaxZoom() {
			return this.get_$mapServerPresModel().mapMaxZoom;
		},
		get_requestZoom: function MapServerModel$get_RequestZoom() {
			if (tab.FeatureFlags.isEnabled('RuntimeComputeMapCenterInVTL') && this.get_allowLocalPanAndZoom()) {
				return this.$requestZoom;
			}
			return this.get_$mapServerPresModel().mapRequestZoom;
		},
		set_requestZoom: function MapServerModel$set_RequestZoom(value) {
			this.$requestZoom = value;
		},
		get_displayScale: function MapServerModel$get_DisplayScale() {
			if (tab.FeatureFlags.isEnabled('RuntimeComputeMapCenterInVTL') && this.get_allowLocalPanAndZoom()) {
				return this.$displayScale;
			}
			return this.get_$mapServerPresModel().mapDisplayScale;
		},
		set_displayScale: function MapServerModel$set_DisplayScale(value) {
			this.$displayScale = value;
		},
		get_zoom: function MapServerModel$get_Zoom() {
			var zoomStretchInLogSpace = Math.log(this.get_displayScale()) / Math.LN2;
			var zoom = this.get_requestZoom() + zoomStretchInLogSpace;
			if (this.get_useFastMaps() && this.get_rasterMapSourceModel().get_hasPresModel()) {
				zoom -= tab.MapUtil.getLeafletZoomOffsetForTileSize(this.get_rasterMapSourceModel().get_mapTileSize());
			}
			return zoom;
		},
		get_centerLatitude: function MapServerModel$get_CenterLatitude() {
			if (tab.FeatureFlags.isEnabled('RuntimeComputeMapCenterInVTL') && this.get_allowLocalPanAndZoom()) {
				return this.$centerLatitude;
			}
			return this.get_$mapServerPresModel().mapCenterLatitude;
		},
		set_centerLatitude: function MapServerModel$set_CenterLatitude(value) {
			this.$centerLatitude = value;
		},
		get_centerLongitude: function MapServerModel$get_CenterLongitude() {
			if (tab.FeatureFlags.isEnabled('RuntimeComputeMapCenterInVTL') && this.get_allowLocalPanAndZoom()) {
				return this.$centerLongitude;
			}
			return this.get_$mapServerPresModel().mapCenterLongitude;
		},
		set_centerLongitude: function MapServerModel$set_CenterLongitude(value) {
			this.$centerLongitude = value;
		},
		get_numWorldRepeats: function MapServerModel$get_NumWorldRepeats() {
			return this.get_$mapServerPresModel().mapWorldRepeats;
		},
		get_tileUrl: function MapServerModel$get_TileUrl() {
			var ms = this.get_$mapServerPresModel();
			var toRet;
			if (tab.MiscUtil.isNullOrEmpty$3(ms.mapTileServer.toString()) && !tab.MiscUtil.isNullOrEmpty$3(ms.mapFullTileUrl.toString())) {
				toRet = ms.mapFullTileUrl;
			}
			else {
				if (ss.startsWithString(ms.mapTileServer.toString(), 'http://') || ss.startsWithString(ms.mapTileServer.toString(), 'https://')) {
					toRet = '';
				}
				else {
					var protocol = tab.WindowHelper.getLocation(window.self).protocol;
					toRet = protocol + '//';
				}
				toRet += ms.mapTileServer;
				if (!ss.endsWithString(toRet, String.fromCharCode(47)) && !ss.startsWithString(ms.mapTileUrl.toString(), String.fromCharCode(47))) {
					toRet += '/';
				}
				toRet += ms.mapTileUrl;
			}
			toRet = ss.replaceAllString(toRet, '{K}', ms.mapServerKey);
			toRet = ss.replaceAllString(toRet, '{L}', ms.mapLayerRequest);
			var useHighDPITiles = tab.DoubleUtil.isGreaterThanOrApproximatelyEqual(BrowserSupport.BrowserSupport.DevicePixelRatio(), 2);
			toRet = ss.replaceAllString(toRet, '{D}', (useHighDPITiles ? $tab_MapServerModel.$highDpiTileIndicator : ''));
			toRet = ss.replaceAllString(toRet, '{X}', '{x}');
			toRet = ss.replaceAllString(toRet, '{Y}', '{y}');
			toRet = ss.replaceAllString(toRet, '{Z}', '{z}');
			toRet = ss.replaceAllString(toRet, '{P}', '{p}');
			return toRet;
		},
		get_hasValidTileLayer: function MapServerModel$get_HasValidTileLayer() {
			return this.get_$mapServerPresModel().mapHasValidLayer;
		},
		get_attributionUrl: function MapServerModel$get_AttributionUrl() {
			return this.get_$mapServerPresModel().mapAttributionUrl;
		},
		get_attributionText: function MapServerModel$get_AttributionText() {
			return this.get_$mapServerPresModel().mapAttributionText;
		},
		get_attributionUrl2: function MapServerModel$get_AttributionUrl2() {
			return this.get_$mapServerPresModel().mapAttributionUrl2;
		},
		get_attributionText2: function MapServerModel$get_AttributionText2() {
			return this.get_$mapServerPresModel().mapAttributionText2;
		},
		get_attributionTextColor: function MapServerModel$get_AttributionTextColor() {
			return this.get_$mapServerPresModel().mapAttributionTextColor;
		},
		get_attributionTextSize: function MapServerModel$get_AttributionTextSize() {
			return this.get_$mapServerPresModel().mapAttributionTextSize;
		},
		get_attributionBGColor: function MapServerModel$get_AttributionBGColor() {
			return this.$convertColorOrUseDefault(this.get_$mapServerPresModel().mapAttributionFill);
		},
		get_mapBGFillColor: function MapServerModel$get_MapBGFillColor() {
			return this.$convertColorOrUseDefault(this.get_$mapServerPresModel().mapPaneBackgroundFill);
		},
		get_mapHolderBackgroundColor: function MapServerModel$get_MapHolderBackgroundColor() {
			return this.$convertColorOrUseDefault(this.get_$mapServerPresModel().mapHolderBackgroundColor);
		},
		get_hasWashout: function MapServerModel$get_HasWashout() {
			return this.get_$mapServerPresModel().mapWashout > 0;
		},
		get_washoutColor: function MapServerModel$get_WashoutColor() {
			var alpha = Math.max(0, Math.min(1, this.get_$mapServerPresModel().mapWashout));
			return new $tab_ColorModel(255, 255, 255, alpha);
		},
		get_mapScaleInfoModel: function MapServerModel$get_MapScaleInfoModel() {
			return this.$mapScaleInfoModel;
		},
		get_radialSelectionDistanceInfoModel: function MapServerModel$get_RadialSelectionDistanceInfoModel() {
			return this.$radialSelectionDistanceInfoModel;
		},
		get_mapboxMapSourceModel: function MapServerModel$get_MapboxMapSourceModel() {
			return this.$mapboxMapSourceModel;
		},
		get_rasterMapSourceModel: function MapServerModel$get_RasterMapSourceModel() {
			return this.$rasterMapSourceModel;
		},
		get_allowLocalPanAndZoom: function MapServerModel$get_AllowLocalPanAndZoom() {
			return this.$2$AllowLocalPanAndZoomField;
		},
		set_allowLocalPanAndZoom: function MapServerModel$set_AllowLocalPanAndZoom(value) {
			this.$2$AllowLocalPanAndZoomField = value;
		},
		get_sheetName: function MapServerModel$get_SheetName() {
			var visualModel = ss.safeCast(this.parent, $tab_VisualModel);
			return (ss.isValue(visualModel) ? visualModel.get_worksheetName().toString() : '');
		},
		get_$mapServerPresModel: function MapServerModel$get_MapServerPresModel() {
			return this.pm;
		},
		update: function MapServerModel$Update(mapServerPresModel, context) {
			var isSwapOfValidPresModels = ss.isValue(this.get_$mapServerPresModel()) && ss.isValue(mapServerPresModel);
			if (isSwapOfValidPresModels) {
				var tileServerChanged = !ss.referenceEquals(this.get_$mapServerPresModel().mapTileServer, mapServerPresModel.mapTileServer);
				var mapLayerRequestChanged = !ss.referenceEquals(this.get_$mapServerPresModel().mapLayerRequest, mapServerPresModel.mapLayerRequest);
				if (tileServerChanged || mapLayerRequestChanged) {
					this.raiseEvent(this.$2$TileSourceChangedField, context);
				}
				var useFastMapsChanged = this.get_$mapServerPresModel().clientRequestsMapTiles !== mapServerPresModel.clientRequestsMapTiles;
				if (useFastMapsChanged) {
					this.raiseEvent$2(Boolean, Boolean).call(this, this.$2$UseFastMapsChangedField, this.get_$mapServerPresModel().clientRequestsMapTiles, mapServerPresModel.clientRequestsMapTiles, context);
				}
			}
			if (ss.isValue(mapServerPresModel)) {
				this.$radialSelectionDistanceInfoModel.update(mapServerPresModel.radialSelectionDistanceInfo);
				this.$mapScaleInfoModel.update(mapServerPresModel.mapScaleInfo, context);
				this.$mapboxMapSourceModel.update(mapServerPresModel.mapboxMapSource, context);
				this.$rasterMapSourceModel.update(mapServerPresModel.rasterMapSource);
			}
			this.simpleSwapToUpdate(mapServerPresModel, this.$2$NewMapServerInfoField, context);
		},
		$convertColorOrUseDefault: function MapServerModel$ConvertColorOrUseDefault(colorFromPM) {
			return $tab_ColorModel.fromColorCode(colorFromPM || $tab_MapServerModel.$defaultBackgroundFillColor).toString();
		}
	}, $tab_Model);
	ss.initClass($tab_SpacingDefinition, $asm, {
		get_defaultValue: function SpacingDefinition$get_DefaultValue() {
			return ss.coalesce(this.defaultSpace, 0);
		},
		set_defaultValue: function SpacingDefinition$set_DefaultValue(value) {
			this.defaultSpace = value;
		},
		get_leftValue: function SpacingDefinition$get_LeftValue() {
			var $t1 = this.left;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_defaultValue();
			}
			return $t1;
		},
		set_leftValue: function SpacingDefinition$set_LeftValue(value) {
			this.left = value;
		},
		get_topValue: function SpacingDefinition$get_TopValue() {
			var $t1 = this.top;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_defaultValue();
			}
			return $t1;
		},
		set_topValue: function SpacingDefinition$set_TopValue(value) {
			this.top = value;
		},
		get_rightValue: function SpacingDefinition$get_RightValue() {
			var $t1 = this.right;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_defaultValue();
			}
			return $t1;
		},
		set_rightValue: function SpacingDefinition$set_RightValue(value) {
			this.right = value;
		},
		get_bottomValue: function SpacingDefinition$get_BottomValue() {
			var $t1 = this.bottom;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_defaultValue();
			}
			return $t1;
		},
		set_bottomValue: function SpacingDefinition$set_BottomValue(value) {
			this.bottom = value;
		},
		get_allSidesTheSame: function SpacingDefinition$get_AllSidesTheSame() {
			var $t1 = this.$allSidesTheSameLocal;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = ss.isNullOrUndefined(this.bottom) && ss.isNullOrUndefined(this.top) && ss.isNullOrUndefined(this.left) && ss.isNullOrUndefined(this.right);
			}
			return $t1;
		},
		set_allSidesTheSame: function SpacingDefinition$set_AllSidesTheSame(value) {
			this.$allSidesTheSameLocal = value;
			if (value) {
				this.top = null;
				this.bottom = null;
				this.left = null;
				this.right = null;
			}
		},
		mergeWithExisitingStyle: null
	});
	ss.initClass($tab_MarginDefinition, $asm, {
		mergeWithExisitingStyle: function MarginDefinition$MergeWithExisitingStyle(exisitingStyle) {
			var newStyle = $.extend({}, exisitingStyle);
			if (ss.isValue(this.defaultSpace)) {
				newStyle.margin = ss.unbox(this.defaultSpace);
			}
			else {
				delete newStyle.margin;
			}
			if (ss.isValue(this.top)) {
				newStyle.marginTop = ss.unbox(this.top);
			}
			else {
				delete newStyle.marginTop;
			}
			if (ss.isValue(this.bottom)) {
				newStyle.marginBottom = ss.unbox(this.bottom);
			}
			else {
				delete newStyle.marginBottom;
			}
			if (ss.isValue(this.left)) {
				newStyle.marginLeft = ss.unbox(this.left);
			}
			else {
				delete newStyle.marginLeft;
			}
			if (ss.isValue(this.right)) {
				newStyle.marginRight = ss.unbox(this.right);
			}
			else {
				delete newStyle.marginRight;
			}
			return newStyle;
		}
	}, $tab_SpacingDefinition);
	$tab_MarginDefinition.$ctor1.prototype = $tab_MarginDefinition.prototype;
	ss.initClass($tab_MarksCardModel, $asm, {
		add_newMarksCard: function MarksCardModel$add_NewMarksCard(value) {
			this.$2$NewMarksCardField = ss.delegateCombine(this.$2$NewMarksCardField, value);
		},
		remove_newMarksCard: function MarksCardModel$remove_NewMarksCard(value) {
			this.$2$NewMarksCardField = ss.delegateRemove(this.$2$NewMarksCardField, value);
		},
		get_layers: function MarksCardModel$get_Layers() {
			return this.$layers;
		},
		get_activePaneSpecId: function MarksCardModel$get_ActivePaneSpecId() {
			return this.$activePaneSpecId;
		},
		set_activePaneSpecId: function MarksCardModel$set_ActivePaneSpecId(value) {
			this.$activePaneSpecId = value;
		},
		update: function MarksCardModel$Update(newPresModel, context) {
			if (this.isNewPresModelSameAsOld(newPresModel)) {
				return;
			}
			var newLayers = [];
			if (ss.isValue(newPresModel) && ss.isValue(newPresModel.marksCardTab)) {
				this.$updateHelper(newPresModel.marksCardTab, newLayers, context);
			}
			if (ss.isValue(newPresModel) && ss.isValue(newPresModel.marksCardTabs)) {
				for (var $t1 = 0; $t1 < newPresModel.marksCardTabs.length; $t1++) {
					var layerPM = newPresModel.marksCardTabs[$t1];
					this.$updateHelper(layerPM, newLayers, context);
				}
			}
			this.$layers = newLayers;
			this.swapAndCopyPresModel(newPresModel);
			this.raiseEvent(this.$2$NewMarksCardField, context);
		},
		$updateHelper: function MarksCardModel$UpdateHelper(layer, newLayers, context) {
			var m = _.find(this.$layers, function(model) {
				return model.equals$1(layer);
			});
			if (ss.isNullOrUndefined(m)) {
				m = new $tab_LayerEncodingModel(this, layer.paneSpec);
			}
			m.update(layer, context);
			newLayers.push(m);
		}
	}, $tab_Model);
	ss.initClass($tab_MarkSizeModel, $asm, {
		add_newMarkSize: function MarkSizeModel$add_NewMarkSize(value) {
			this.$2$NewMarkSizeField = ss.delegateCombine(this.$2$NewMarkSizeField, value);
		},
		remove_newMarkSize: function MarkSizeModel$remove_NewMarkSize(value) {
			this.$2$NewMarkSizeField = ss.delegateRemove(this.$2$NewMarkSizeField, value);
		},
		get_minMarkSize: function MarkSizeModel$get_MinMarkSize() {
			return this.pm.minMarkSize;
		},
		get_maxMarkSize: function MarkSizeModel$get_MaxMarkSize() {
			return this.pm.maxMarkSize;
		},
		get_currentMarkSize: function MarkSizeModel$get_CurrentMarkSize() {
			return this.pm.markSize;
		},
		get_currentSliderFraction: function MarkSizeModel$get_CurrentSliderFraction() {
			return tab.DoubleUtil.roundTwoDecimalPlaces(this.$transform.valueToFraction(this.get_currentMarkSize()));
		},
		get_transform: function MarkSizeModel$get_Transform() {
			return this.$transform;
		},
		get_parentModel: function MarkSizeModel$get_ParentModel() {
			return this.$parentModel;
		},
		update: function MarkSizeModel$Update(pmodel, context) {
			if (ss.isValue(pmodel)) {
				this.$updateTransformFor(pmodel);
			}
			this.simpleSwapToUpdate(pmodel, this.$2$NewMarkSizeField, context);
		},
		$updateTransformFor: function MarkSizeModel$UpdateTransformFor(presModel) {
			switch (presModel.inflectionPoints.length) {
				case 0: {
					this.$transform = new $tab_LinearRangeTransform(presModel.minMarkSize, presModel.maxMarkSize);
					break;
				}
				case 1: {
					var point = presModel.inflectionPoints[0];
					this.$transform = new $tab_AcceleratingRangeTransform(presModel.minMarkSize, presModel.maxMarkSize, point.inflectionFraction, point.inflectionValue, point.inflectionFraction, point.inflectionValue);
					break;
				}
				case 2:
				default: {
					var point1 = presModel.inflectionPoints[0];
					var point2 = presModel.inflectionPoints[1];
					this.$transform = new $tab_AcceleratingRangeTransform(presModel.minMarkSize, presModel.maxMarkSize, point1.inflectionFraction, point1.inflectionValue, point2.inflectionFraction, point2.inflectionValue);
					break;
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_ModelUtils, $asm, {});
	ss.initClass($tab_ModuleManager, $asm, {});
	ss.initClass($tab_ModuleTracker, $asm, {
		loadRequested: function ModuleTracker$LoadRequested() {
			this.$pendingModuleCount++;
		},
		moduleLoaded: function ModuleTracker$ModuleLoaded() {
			ss.Debug.assert(this.$pendingModuleCount > 0, 'Currently not tracking any module');
			this.$pendingModuleCount = Math.max(this.$pendingModuleCount - 1, 0);
			if (this.$areAllModulesLoaded()) {
				this.$invokeCallbacks();
			}
		},
		registerModulesLoadedCallback: function ModuleTracker$RegisterModulesLoadedCallback(toInvokeWhenAllModulesLoaded) {
			if (this.$areAllModulesLoaded()) {
				toInvokeWhenAllModulesLoaded();
				return;
			}
			this.$loadCompleteCallbacks.push(toInvokeWhenAllModulesLoaded);
		},
		$areAllModulesLoaded: function ModuleTracker$AreAllModulesLoaded() {
			return this.$pendingModuleCount === 0;
		},
		$invokeCallbacks: function ModuleTracker$InvokeCallbacks() {
			for (var $t1 = 0; $t1 < this.$loadCompleteCallbacks.length; $t1++) {
				var action = this.$loadCompleteCallbacks[$t1];
				_.defer(action);
			}
			this.$loadCompleteCallbacks.length = 0;
		}
	});
	ss.initClass($tab_MovePointAnnotationCmd, $asm, {
		invoke: function MovePointAnnotationCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'move-point-annotation' }, this.cmdParams));
		},
		validateInvokeParams: function MovePointAnnotationCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'uid')) {
				throw new ss.Exception('missing param DocParams.UID');
			}
			if (!ss.keyExists(this.cmdParams, 'pt1')) {
				throw new ss.Exception('missing param DocParams.Point1');
			}
			if (!ss.keyExists(this.cmdParams, 'endPoint')) {
				throw new ss.Exception('missing param DocParams.EndPt');
			}
			if (!ss.keyExists(this.cmdParams, 'pageNumber')) {
				throw new ss.Exception('missing param DocParams.PageNumber');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_MovePointAnnotationCmd$Response]));
	ss.initClass($tab_MovePointAnnotationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_MovePointAnnotationTargetCmd, $asm, {
		invoke: function MovePointAnnotationTargetCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'move-point-annotation-target' }, this.cmdParams));
		},
		validateInvokeParams: function MovePointAnnotationTargetCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'uid')) {
				throw new ss.Exception('missing param DocParams.UID');
			}
			if (!ss.keyExists(this.cmdParams, 'pt1')) {
				throw new ss.Exception('missing param DocParams.Point1');
			}
			if (!ss.keyExists(this.cmdParams, 'endPoint')) {
				throw new ss.Exception('missing param DocParams.EndPt');
			}
			if (!ss.keyExists(this.cmdParams, 'pageNumber')) {
				throw new ss.Exception('missing param DocParams.PageNumber');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_MovePointAnnotationTargetCmd$Response]));
	ss.initClass($tab_MovePointAnnotationTargetCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_MultipleFieldsModel, $asm, {
		get_instanceType: function MultipleFieldsModel$get_InstanceType() {
			return 'multiple';
		}
	}, $tab_FieldModel);
	ss.initClass($tab_NoopModelEventsHandler, $asm, {
		processEvent: function NoopModelEventsHandler$ProcessEvent(a) {
		}
	}, null, [$tab_IModelEventHandler]);
	ss.initClass($tab_NotificationHandlerLauncher, $asm, {
		get_notificationId: function NotificationHandlerLauncher$get_NotificationId() {
			return this.$1$NotificationIdField;
		},
		set_notificationId: function NotificationHandlerLauncher$set_NotificationId(value) {
			this.$1$NotificationIdField = value;
		},
		onNotify: function NotificationHandlerLauncher$OnNotify(pm, context) {
			var deferred = $.Deferred();
			var promise = deferred.promise();
			promise.done(ss.mkdel(this, function() {
				if (ss.isValue(this.$handler)) {
					$tab_Model.nonWorldUpdate(ss.mkdel(this, function(ctx) {
						this.$handler.onNotify(pm, ctx);
					}));
				}
			}));
			if (ss.isValue(this.$handler)) {
				deferred.resolve();
			}
			else {
				this.$createHandlerCallback().done(ss.mkdel(this, function(h) {
					if (ss.isValue(h)) {
						this.$handler = h;
						this.$handler.add_stopNotifying(ss.mkdel(this, this.$onHandlerStopNotifying));
					}
					deferred.resolve();
				}));
			}
		},
		$onHandlerStopNotifying: function NotificationHandlerLauncher$OnHandlerStopNotifying() {
			this.$handler = null;
		}
	}, null, [$tab_IHandleNotifications]);
	ss.initClass($tab_NullHistory, $asm, {
		get_recoveryStates: function NullHistory$get_RecoveryStates() {
			return $tab_NullHistory.$empty;
		},
		get_tailIndex: function NullHistory$get_TailIndex() {
			return 0;
		},
		add: function NullHistory$Add(recoveryId, serverHistoryPosition) {
			return this.get_tailIndex();
		},
		adopt: function NullHistory$Adopt(initialTickets) {
		},
		trackRedo: function NullHistory$TrackRedo() {
			return 0;
		},
		trackUndo: function NullHistory$TrackUndo() {
			return 0;
		}
	}, null, [$tab_IHistory]);
	ss.initClass($tab_ObjectClientCommands, $asm, {});
	ss.initClass($tab_OnlineAnalyticsClient, $asm, {
		$report: function OnlineAnalyticsClient$Report(type, properties) {
			this.$initialize().done([ss.mkdel(this, function() {
				properties['SiteId'] = this.$siteId;
				properties['SiteLuid'] = this.$siteLuid;
				properties['SiteUrlName'] = this.$siteUrlName;
				properties['UserId'] = this.$userId;
				properties['Language'] = tsConfig.language;
				properties['Locale'] = tsConfig.locale;
				properties['SessionId'] = tsConfig.sessionIdHash;
				properties['ProjectId'] = tsConfig.current_project_id;
				properties['WorkbookId'] = tsConfig.current_workbook_id;
				properties['Public'] = tsConfig.isPublic;
				properties['SaaS'] = tsConfig.is_saas;
				this.$telemetryForwarder.buildTelemetryAndSend(type, $tab_OnlineAnalyticsClient.serviceName, properties);
			})]);
			var handler = $tab_OnlineAnalyticsClient.$1$OnLogEventField;
			if (!ss.staticEquals(handler, null)) {
				handler(type, properties);
			}
		},
		$loadTelemetryForwarderLibrary: function OnlineAnalyticsClient$LoadTelemetryForwarderLibrary() {
			return $tab_ModuleManager.load$1($tab_OnlineAnalyticsClient.telemetryForwarderLibrary, []);
		},
		$getServerInfo: function OnlineAnalyticsClient$GetServerInfo() {
			return $tab_WorkgroupServerCommands.get_getSessionInfo().done(ss.mkdel(this, function(info) {
				this.$serverInfo = info;
			})).fail(ss.mkdel(this, function(error) {
				this.$logger.error('Error fetching server info.', [error]);
			}));
		},
		$initialize: function OnlineAnalyticsClient$Initialize() {
			return this.$initializePromise || (this.$initializePromise = $.when(this.$getServerInfo(), this.$loadTelemetryForwarderLibrary()).done([ss.mkdel(this, function() {
				var success = ss.isValue(this.$serverInfo);
				if (success) {
					var site = this.$serverInfo.site;
					var user = this.$serverInfo.user;
					success = ss.isValue(site) && ss.isValue(user);
					if (success) {
						this.$siteId = site.id;
						this.$siteLuid = site.luid;
						this.$siteUrlName = site.urlName;
						this.$userId = user.id;
					}
				}
				if (!success) {
					this.$logger.error(ss.formatString("Unexpected response from '{0}' command when fetching online analytics server info.", 'GetSessionInfo'), []);
				}
				this.$telemetryForwarder = new TypescriptTelemetryForwarder.TelemetryForwarder();
			})]));
		}
	});
	ss.initClass($tab_OnlineAnalyticsMetricsLogger, $asm, {
		logEvent: function OnlineAnalyticsMetricsLogger$LogEvent(evt) {
			if (!$tab_OnlineAnalyticsMetricsLogger.isLoggerSupported()) {
				return;
			}
			var mep = evt.parameters;
			var description = tabBootstrap.MetricsController.getFriendlyEventDescription(mep.d);
			var endTime = ss.Int32.trunc(mep.t);
			var metricData = ['Description', description, 'EndTime', endTime, 'MetricsSessionId', mep.sid, 'IsMobile', !!mep.m, 'UserAgent', BrowserSupport.BrowserSupport.GetUserAgent()];
			var elapsed = ss.Int32.trunc(mep.e);
			if (ss.isValue(elapsed)) {
				metricData.push('ElapsedTime');
				metricData.push(elapsed);
			}
			if (ss.isValue(mep.ei)) {
				metricData.push('ExtraInfo');
				metricData.push(mep.ei);
			}
			$tab_PluginTelemetry.get_instance().reportEvent('WebClientMetrics', metricData);
		}
	});
	ss.initClass($tab_OpenAutomatedInsightsModalCmd, $asm, {
		invoke: function OpenAutomatedInsightsModalCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'open-automated-insights-modal' }, this.cmdParams));
		},
		validateInvokeParams: function OpenAutomatedInsightsModalCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_OpenAutomatedInsightsModalCmd$Response]));
	ss.initClass($tab_OpenAutomatedInsightsModalCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_OrderClause, $asm, {});
	ss.initClass($tab_OSInfo, $asm, {
		get_description: function OSInfo$get_Description() {
			return this.$1$DescriptionField;
		},
		set_description: function OSInfo$set_Description(value) {
			this.$1$DescriptionField = value;
		},
		get_architecture: function OSInfo$get_Architecture() {
			return this.$1$ArchitectureField;
		},
		set_architecture: function OSInfo$set_Architecture(value) {
			this.$1$ArchitectureField = value;
		},
		get_family: function OSInfo$get_Family() {
			return this.$1$FamilyField;
		},
		set_family: function OSInfo$set_Family(value) {
			this.$1$FamilyField = value;
		},
		get_version: function OSInfo$get_Version() {
			return this.$1$VersionField;
		},
		set_version: function OSInfo$set_Version(value) {
			this.$1$VersionField = value;
		}
	});
	ss.initClass($tab_PaddingDefinition, $asm, {
		mergeWithExisitingStyle: function PaddingDefinition$MergeWithExisitingStyle(exisitingStyle) {
			var newStyle = $.extend({}, exisitingStyle);
			if (ss.isValue(this.defaultSpace)) {
				newStyle.padding = ss.unbox(this.defaultSpace);
			}
			else {
				delete newStyle.padding;
			}
			if (ss.isValue(this.top)) {
				newStyle.paddingTop = ss.unbox(this.top);
			}
			else {
				delete newStyle.paddingTop;
			}
			if (ss.isValue(this.bottom)) {
				newStyle.paddingBottom = ss.unbox(this.bottom);
			}
			else {
				delete newStyle.paddingBottom;
			}
			if (ss.isValue(this.left)) {
				newStyle.paddingLeft = ss.unbox(this.left);
			}
			else {
				delete newStyle.paddingLeft;
			}
			if (ss.isValue(this.right)) {
				newStyle.paddingRight = ss.unbox(this.right);
			}
			else {
				delete newStyle.paddingRight;
			}
			return newStyle;
		}
	}, $tab_SpacingDefinition);
	$tab_PaddingDefinition.$ctor1.prototype = $tab_PaddingDefinition.prototype;
	ss.initClass($tab_PageModel, $asm, {
		add_newPage: function PageModel$add_NewPage(value) {
			this.$2$NewPageField = ss.delegateCombine(this.$2$NewPageField, value);
		},
		remove_newPage: function PageModel$remove_NewPage(value) {
			this.$2$NewPageField = ss.delegateRemove(this.$2$NewPageField, value);
		},
		get_title: function PageModel$get_Title() {
			return tableau.format.stripFormattedText(this.pm.title);
		},
		get_zoneModel: function PageModel$get_ZoneModel() {
			return this.$zoneModel;
		},
		update: function PageModel$Update(pagePresModel, fireEvent, context) {
			if (this.isNewPresModelSameAsOld(pagePresModel)) {
				return;
			}
			$tab_FontNotificationUtil.notifyFontsFromPagePresModel(pagePresModel);
			if (fireEvent) {
				this.simpleSwapToUpdate$1(Object).call(this, pagePresModel, this.$2$NewPageField, pagePresModel, context);
			}
			else {
				this.swapAndCopyPresModel(pagePresModel);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_PageServerCommands, $asm, {});
	ss.initClass($tab_PaneIdModel, $asm, {
		get_rowIndex: function PaneIdModel$get_RowIndex() {
			return this.$presModel['rowIndex'];
		},
		get_columnIndex: function PaneIdModel$get_ColumnIndex() {
			return this.$presModel['columnIndex'];
		},
		get_pageIndex: function PaneIdModel$get_PageIndex() {
			return (ss.keyExists(this.$presModel, 'pageIndex') ? this.$presModel['pageIndex'] : 0);
		},
		get_presModel: function PaneIdModel$get_PresModel() {
			return this.$presModel;
		},
		update: function PaneIdModel$Update(paneId) {
			if (ss.isValue(paneId)) {
				this.$presModel = paneId;
				ss.Debug.assert(ss.keyExists(this.$presModel, 'columnIndex'), 'required key ColumnIndex is missing');
				ss.Debug.assert(ss.keyExists(this.$presModel, 'rowIndex'), 'required key RowIndex is missing');
			}
			else {
				this.$presModel = {};
				this.$presModel['columnIndex'] = 0;
				this.$presModel['rowIndex'] = 0;
			}
		}
	});
	$tab_PaneIdModel.$ctor1.prototype = $tab_PaneIdModel.prototype;
	ss.initEnum($tab_PanZoomCommandResult, $asm, { success: 'success', failure: 'failure' }, true);
	ss.initClass($tab_PanZoomCommands, $asm, {});
	ss.initClass($tab_ParameterClientCommands, $asm, {});
	ss.initClass($tab_ParameterCtrlModel, $asm, {
		add_newParameterCtrl: function ParameterCtrlModel$add_NewParameterCtrl(value) {
			this.$2$NewParameterCtrlField = ss.delegateCombine(this.$2$NewParameterCtrlField, value);
		},
		remove_newParameterCtrl: function ParameterCtrlModel$remove_NewParameterCtrl(value) {
			this.$2$NewParameterCtrlField = ss.delegateRemove(this.$2$NewParameterCtrlField, value);
		},
		get_parameterCtrlPresModel: function ParameterCtrlModel$get_ParameterCtrlPresModel() {
			return this.pm;
		},
		get_parameterCtrlJsonPresModel: function ParameterCtrlModel$get_ParameterCtrlJsonPresModel() {
			return this.get_parameterCtrlPresModel().legacyPresModel;
		},
		get_zone: function ParameterCtrlModel$get_Zone() {
			return this.get_zoneModel().pm;
		},
		get_zoneModel: function ParameterCtrlModel$get_ZoneModel() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone();
		},
		get_parameterName: function ParameterCtrlModel$get_ParameterName() {
			return this.get_parameterCtrlPresModel().parameterName;
		},
		get_attributes: function ParameterCtrlModel$get_Attributes() {
			return this.$frame.attributes;
		},
		update: function ParameterCtrlModel$Update(newPresModel, newFrame, context) {
			if (ss.isValue(newPresModel)) {
				$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(newPresModel.textStyle);
			}
			this.$frame = newFrame;
			this.simpleSwapToUpdate$1(Object).call(this, newPresModel, this.$2$NewParameterCtrlField, newPresModel, context);
		},
		updateFrame: function ParameterCtrlModel$UpdateFrame(newFrame, context) {
			if (!ss.referenceEquals(this.$frame, newFrame)) {
				this.$frame = newFrame;
				this.raiseEvent$1(Object).call(this, this.$2$NewParameterCtrlField, this.get_parameterCtrlPresModel(), context);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_ParameterServerCommands, $asm, {});
	ss.initClass($tab_PercentTotalTableCalcModel, $asm, {
		add_modelUpdated: function PercentTotalTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function PercentTotalTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$percentTotalPresModel: function PercentTotalTableCalcModel$get_PercentTotalPresModel() {
			return this.pm;
		},
		get_allPages: function PercentTotalTableCalcModel$get_AllPages() {
			return this.get_$percentTotalPresModel().includeAllPages;
		},
		get_allPagesState: function PercentTotalTableCalcModel$get_AllPagesState() {
			return this.get_$percentTotalPresModel().allPagesState;
		},
		update: function PercentTotalTableCalcModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_PerformTabbedAuthenticationCmd, $asm, {
		validateInvokeParams: function PerformTabbedAuthenticationCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'exceptionAttrs')) {
				throw new ss.Exception('missing param DocParams.ExceptionAttrs');
			}
			if (!ss.keyExists(this.cmdParams, 'dbPassword')) {
				throw new ss.Exception('missing param DocParams.DBPassword');
			}
			if (!ss.keyExists(this.cmdParams, 'savePasswordAllowed')) {
				throw new ss.Exception('missing param DocParams.SavePasswordAllowed');
			}
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_PerformTabbedAuthenticationCmd$Response]));
	ss.initClass($tab_PerformTabbedAuthenticationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_PerformTabbedAuthenticationCommand, $asm, {
		do$1: function PerformTabbedAuthenticationCommand$Do() {
			throw new ss.NotImplementedException();
		},
		do$2: function PerformTabbedAuthenticationCommand$Do(returnsDeferred) {
			var deferred = $.Deferred();
			var exceptionAttrs = this.cmdParams['exceptionAttrs'];
			var password = this.cmdParams['dbPassword'].toString();
			var reuse = ss.unbox(ss.cast(this.cmdParams['savePasswordAllowed'], Boolean));
			$tab_AuthenticationCommands.performAuthentication(exceptionAttrs, password, reuse).done([function() {
				deferred.resolve();
			}]).fail([function() {
				deferred.reject();
			}]);
			return deferred.promise();
		},
		invoke: function PerformTabbedAuthenticationCommand$Invoke() {
			var deferred = $.Deferred();
			this.do$2(true).done([function() {
				deferred.resolve();
			}]).fail([function() {
				deferred.reject();
			}]);
			return deferred.promise();
		}
	}, $tab_PerformTabbedAuthenticationCmd);
	ss.initClass($tab_PermissionManager, $asm, {});
	ss.initClass($tab_PillModel, $asm, {
		get_encodingType: function PillModel$get_EncodingType() {
			if (ss.isNullOrUndefined(this.pm) || ss.isNullOrUndefined(this.pm.encodingType)) {
				return 'invalid-encoding';
			}
			return this.pm.encodingType;
		},
		get_alternateEncodings: function PillModel$get_AlternateEncodings() {
			if (ss.isNullOrUndefined(this.pm) || ss.isNullOrUndefined(this.pm.encodingUiItems)) {
				return [];
			}
			return _.filter(this.pm.encodingUiItems, function(pm) {
				return pm.isVisible && pm.isEnabled;
			});
		},
		get_filterType: function PillModel$get_FilterType() {
			if (ss.isNullOrUndefined(this.pm) || ss.isNullOrUndefined(this.pm.filterIconType)) {
				return 'no-filter';
			}
			return this.pm.filterIconType;
		},
		get_hasDrill: function PillModel$get_HasDrill() {
			return this.pm.hasDrill || false;
		},
		get_shouldDrill: function PillModel$get_ShouldDrill() {
			return this.get_hasDrill() && (this.pm.shouldDrill || false);
		},
		get_column: function PillModel$get_Column() {
			return this.$column;
		},
		get_tooltip: function PillModel$get_Tooltip() {
			return tableau.format.stripFormattedText(this.pm.tooltip);
		},
		get_sideIconToolip: function PillModel$get_SideIconToolip() {
			return tableau.format.stripFormattedText(this.pm.iconTooltip);
		},
		get_displayName: function PillModel$get_DisplayName() {
			return this.pm.displayText;
		},
		get_isContextFilter: function PillModel$get_IsContextFilter() {
			return this.pm.isContextFilter;
		},
		get_contextMenuCommands: function PillModel$get_ContextMenuCommands() {
			return this.pm.commands;
		},
		get_isMultipleFields: function PillModel$get_IsMultipleFields() {
			return this.pm.encodingType !== 'invalid-encoding' && ss.isInstanceOfType(this.$column, $tab_MultipleFieldsModel);
		},
		update: function PillModel$Update(item, newColumn) {
			if (this.isNewPresModelSameAsOld(item)) {
				return;
			}
			this.$column = newColumn;
			this.swapAndCopyPresModel(item);
		}
	}, $tab_Model);
	ss.initClass($tab_PingSessionCmd, $asm, {
		invoke: function PingSessionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'ping-session' }, this.cmdParams));
		},
		validateInvokeParams: function PingSessionCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_PingSessionCmd$Response]));
	ss.initClass($tab_PingSessionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_PlatformInfo, $asm, {
		get_description: function PlatformInfo$get_Description() {
			return this.$1$DescriptionField;
		},
		set_description: function PlatformInfo$set_Description(value) {
			this.$1$DescriptionField = value;
		},
		get_layout: function PlatformInfo$get_Layout() {
			return this.$1$LayoutField;
		},
		set_layout: function PlatformInfo$set_Layout(value) {
			this.$1$LayoutField = value;
		},
		get_manufacturer: function PlatformInfo$get_Manufacturer() {
			return this.$1$ManufacturerField;
		},
		set_manufacturer: function PlatformInfo$set_Manufacturer(value) {
			this.$1$ManufacturerField = value;
		},
		get_name: function PlatformInfo$get_Name() {
			return this.$1$NameField;
		},
		set_name: function PlatformInfo$set_Name(value) {
			this.$1$NameField = value;
		},
		get_prerelease: function PlatformInfo$get_Prerelease() {
			return this.$1$PrereleaseField;
		},
		set_prerelease: function PlatformInfo$set_Prerelease(value) {
			this.$1$PrereleaseField = value;
		},
		get_product: function PlatformInfo$get_Product() {
			return this.$1$ProductField;
		},
		set_product: function PlatformInfo$set_Product(value) {
			this.$1$ProductField = value;
		},
		get_userAgent: function PlatformInfo$get_UserAgent() {
			return this.$1$UserAgentField;
		},
		set_userAgent: function PlatformInfo$set_UserAgent(value) {
			this.$1$UserAgentField = value;
		},
		get_version: function PlatformInfo$get_Version() {
			return this.$1$VersionField;
		},
		set_version: function PlatformInfo$set_Version(value) {
			this.$1$VersionField = value;
		},
		get_OS: function PlatformInfo$get_OS() {
			return this.$1$OSField;
		},
		set_OS: function PlatformInfo$set_OS(value) {
			this.$1$OSField = value;
		}
	});
	ss.initClass($tab_PluginContractModules, $asm, {});
	ss.initClass($tab_PluginDialogNotificationHandler, $asm, {
		add_stopNotifying: function PluginDialogNotificationHandler$add_StopNotifying(value) {
			this.$1$StopNotifyingField = ss.delegateCombine(this.$1$StopNotifyingField, value);
		},
		remove_stopNotifying: function PluginDialogNotificationHandler$remove_StopNotifying(value) {
			this.$1$StopNotifyingField = ss.delegateRemove(this.$1$StopNotifyingField, value);
		},
		get_notificationId: function PluginDialogNotificationHandler$get_NotificationId() {
			return this.$1$NotificationIdField;
		},
		set_notificationId: function PluginDialogNotificationHandler$set_NotificationId(value) {
			this.$1$NotificationIdField = value;
		},
		onNotify: function PluginDialogNotificationHandler$OnNotify(pm, context) {
			if (ss.isValue(this.$plugin)) {
				return;
			}
			this.$plugin = ss.createInstance(this.$pluginType);
			this.$root = document.createElement('div');
			this.$root.setAttribute('data-tb-test-id', 'PluginDialogHostNode');
			this.$dialogParent.appendChild(this.$root);
			this.$plugin.showDialog(pm, this.$root, ss.mkdel(this, this.$onPluginDone));
			$tab_ApplicationModel.get_holder().addEventBinding(function(newModel) {
			}, ss.mkdel(this, function(oldModel) {
				this.$forceClose();
			}));
			this.$updateCustomZIndex();
		},
		$onPluginDone: function PluginDialogNotificationHandler$OnPluginDone() {
			this.$plugin = null;
			if (ss.isValue(this.$root)) {
				this.$dialogParent.removeChild(this.$root);
				this.$root = null;
			}
		},
		$forceClose: function PluginDialogNotificationHandler$ForceClose() {
			if (ss.isValue(this.$plugin)) {
				this.$plugin.forceCloseDialog();
			}
		},
		$updateCustomZIndex: function PluginDialogNotificationHandler$UpdateCustomZIndex() {
			if (ss.isNullOrUndefined(this.$zIndexOverride) || ss.isNullOrUndefined(this.$zIndexOverride.contentClassName) || !ss.referenceEquals(this.$dialogParent, document.body)) {
				return;
			}
			var dialogContent = $(this.$dialogParent).find('.' + this.$zIndexOverride.contentClassName);
			if (dialogContent.length === 0) {
				return;
			}
			var stackingContextRoot = dialogContent.parentsUntil('body').last();
			var stackingContextRootGlassElement = stackingContextRoot.prev();
			stackingContextRoot.css('z-index', this.$zIndexOverride.customZIndex);
			stackingContextRootGlassElement.css('z-index', this.$zIndexOverride.customZIndex);
		},
		dispose: function PluginDialogNotificationHandler$Dispose() {
			if (!ss.staticEquals(this.$1$StopNotifyingField, null)) {
				this.$1$StopNotifyingField();
			}
			this.$onPluginDone();
		}
	}, null, [$tab_IHandleNotifications, $tab_IDetachableNotificationHandler, ss.IDisposable]);
	ss.initClass($tab_PluginTelemetry, $asm, {
		reportEvent: function PluginTelemetry$ReportEvent(eventType, eventPropertyNameValuePairs) {
			$tab_OnlineAnalyticsClient.logEventDeprecated(eventType, eventPropertyNameValuePairs);
		}
	});
	ss.initClass($tab_PresentationModel, $asm, {});
	ss.initClass($tab_PresModelPath, $asm, {
		get_pathList: function PresModelPath$get_PathList() {
			return this.$path;
		},
		get_pathAsString: function PresModelPath$get_PathAsString() {
			if (ss.isNullOrUndefined(this.$pathAsString)) {
				this.$pathAsString = _.map(this.$path, function(item) {
					return item.name;
				}).join(':');
			}
			return this.$pathAsString;
		},
		add: function PresModelPath$Add(s) {
			this.$path.push(s);
			this.$pathAsString = null;
		},
		reverse: function PresModelPath$Reverse() {
			this.$path.reverse();
			this.$pathAsString = null;
		}
	});
	ss.initClass($tab_PresModelPathItem, $asm, {});
	ss.initEnum($tab_PresModelPathItemType, $asm, { simple: 0, array: 1 });
	ss.initClass($tab_ProgressiveLoader, $asm, {
		add_progressiveLoad: function ProgressiveLoader$add_ProgressiveLoad(value) {
			this.$1$ProgressiveLoadField = ss.delegateCombine(this.$1$ProgressiveLoadField, value);
		},
		remove_progressiveLoad: function ProgressiveLoader$remove_ProgressiveLoad(value) {
			this.$1$ProgressiveLoadField = ss.delegateRemove(this.$1$ProgressiveLoadField, value);
		},
		add_progressiveLoadComplete: function ProgressiveLoader$add_ProgressiveLoadComplete(value) {
			this.$1$ProgressiveLoadCompleteField = ss.delegateCombine(this.$1$ProgressiveLoadCompleteField, value);
		},
		remove_progressiveLoadComplete: function ProgressiveLoader$remove_ProgressiveLoadComplete(value) {
			this.$1$ProgressiveLoadCompleteField = ss.delegateRemove(this.$1$ProgressiveLoadCompleteField, value);
		},
		get_hasZonesToLoad: function ProgressiveLoader$get_HasZonesToLoad() {
			if (ss.isValue(this.$offscreenVizZones) && ss.getKeyCount(this.$offscreenVizZones) > 0) {
				return true;
			}
			if (ss.isNullOrUndefined(this.$deferredZonesByPriority)) {
				return false;
			}
			for (var $t1 = 0; $t1 < $tab_ProgressiveLoader.$zoneCreationOrder.length; $t1++) {
				var priority = $tab_ProgressiveLoader.$zoneCreationOrder[$t1];
				if (ss.isNullOrUndefined(this.$deferredZonesByPriority[priority])) {
					continue;
				}
				return true;
			}
			return false;
		},
		extractZoneContent: function ProgressiveLoader$ExtractZoneContent(appModel) {
			if (!$tab_ProgressiveLoader.$validateZonesPath(appModel)) {
				return appModel;
			}
			var localZonesRoot = this.$extractAndCloneZonesRoot(appModel);
			if (ss.isNullOrUndefined(localZonesRoot)) {
				return appModel;
			}
			this.$updateZoneTypeMap(localZonesRoot);
			localZonesRoot.zones = this.$extractDeferredZones(localZonesRoot.zones);
			return appModel;
		},
		updateZonesWithVizData: function ProgressiveLoader$UpdateZonesWithVizData(vizDatas, context) {
			if (ss.isNullOrUndefined(this.$vizZones) || ss.getKeyCount(this.$vizZones) === 0) {
				return;
			}
			$tab_VizDataUtils.addVizDataToZones(vizDatas.presModelMap, this.$vizZones);
			var $t1 = _.keys(this.$vizZones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zoneID = $t1[$t2];
				var zm = this.$zoneModels[zoneID] || this.$createZoneModel(this.$vizZones[zoneID]);
				if (ss.isValue(zm) && ss.isValue(zm.get_visualModel())) {
					var vm = zm.get_visualModel();
					vm.update(vm.pm, context);
				}
			}
		},
		processModelUpdate: function ProgressiveLoader$ProcessModelUpdate(appModel, context, local) {
			if (!$tab_ProgressiveLoader.$validateZonesPath(appModel) || !this.get_hasZonesToLoad()) {
				return appModel;
			}
			var localZonesRoot = this.$extractAndCloneZonesRoot(appModel);
			if (ss.isNullOrUndefined(localZonesRoot)) {
				return appModel;
			}
			this.$updateZoneTypeMap(localZonesRoot);
			var oldVal = $tab_Model.removeUndefinedBoolsOnSwapCopy;
			if (local) {
				$tab_Model.removeUndefinedBoolsOnSwapCopy = false;
			}
			try {
				var zonesModel = localZonesRoot.zones;
				var $t1 = _.keys(zonesModel);
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var zoneKey = $t1[$t2];
					var zonePM = zonesModel[zoneKey];
					if (ss.isNullOrUndefined(zonePM)) {
						continue;
					}
					var zoneType = this.$getZoneType(zonePM);
					if (!ss.contains($tab_ProgressiveLoader.zonesThatDeferContentCreation, zoneType)) {
						continue;
					}
					var found = false;
					var zoneID = zonePM.zoneId;
					var prioritiesToCheck = [$tab_ProgressiveLoader.$zonePriorityMap[zoneType], $tab_ProgressiveLoader.$offscreenPriority];
					for (var $t3 = 0; $t3 < prioritiesToCheck.length; $t3++) {
						var priority = prioritiesToCheck[$t3];
						var deferredZones = this.$deferredZonesByPriority[priority];
						if (ss.isValue(deferredZones)) {
							var zoneCount = deferredZones.length;
							for (var i = 0; i < zoneCount; i++) {
								var deferredZone = deferredZones[i];
								if (ss.isValue(deferredZone) && deferredZone.zoneId === zoneID) {
									found = true;
									deferredZones[i] = this.$cloneAndUpdateZonePM(deferredZone, zonePM, context);
									break;
								}
							}
						}
						if (found) {
							break;
						}
					}
					if (!found && zoneType === 'viz') {
						var $t4 = _.keys(this.$offscreenVizZones);
						for (var $t5 = 0; $t5 < $t4.length; $t5++) {
							var sheetName = $t4[$t5];
							var offscreenZonePM = this.$offscreenVizZones[sheetName];
							if (zoneID === offscreenZonePM.zoneId) {
								found = true;
								this.$offscreenVizZones[sheetName] = this.$cloneAndUpdateZonePM(offscreenZonePM, zonePM, context);
								break;
							}
						}
					}
					if (found) {
						zonePM = $tab_ProgressiveLoader.removeZoneContent(zonePM);
					}
				}
			}
			finally {
				$tab_Model.removeUndefinedBoolsOnSwapCopy = oldVal;
			}
			return appModel;
		},
		start: function ProgressiveLoader$Start() {
			if (!this.get_hasZonesToLoad()) {
				this.$fireLoadCompleteEvent();
				this.$reset();
				return;
			}
			this.$webClientMetric = tabBootstrap.MetricsController.createContext('ProgressiveLoad', 2, null);
			this.$scheduleCallback();
			this.$reprioritizeNonVisibleZones();
			this.$sortDeferredZones();
		},
		abort: function ProgressiveLoader$Abort() {
			this.stopTimers();
			this.$reset();
		},
		setViewport: function ProgressiveLoader$SetViewport(viewport) {
			var dimensions = viewport.get_dimensions();
			if (dimensions.w === 1 && dimensions.h === 1) {
				return;
			}
			this.$viewportRect = { x: dimensions.l, y: dimensions.t, w: dimensions.w, h: dimensions.h };
			this.$reprioritizeNonVisibleZones();
		},
		getPendingVisuals: function ProgressiveLoader$GetPendingVisuals() {
			var pendingVisuals = {};
			var $t1 = _.keys(this.$vizZones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zoneID = $t1[$t2];
				var sheetName = this.$vizZones[zoneID].worksheet;
				var vm = this.getPendingVisual(sheetName);
				if (ss.isValue(vm)) {
					pendingVisuals[sheetName] = vm;
				}
			}
			return pendingVisuals;
		},
		getPendingVisual: function ProgressiveLoader$GetPendingVisual(sheetName) {
			var zonePM = null;
			var $t1 = _.keys(this.$vizZones);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				if (ss.referenceEquals(this.$vizZones[key].worksheet, sheetName)) {
					zonePM = this.$vizZones[key];
					break;
				}
			}
			if (ss.isNullOrUndefined(zonePM)) {
				return null;
			}
			var zm = this.$zoneModels[zonePM.zoneId] || this.$createZoneModel(zonePM);
			return zm.get_visualModel();
		},
		getPendingZoneContentModel: function ProgressiveLoader$GetPendingZoneContentModel(zoneId) {
			if (ss.isNullOrUndefined(this.$pendingZoneContentModels)) {
				return null;
			}
			return this.$pendingZoneContentModels[zoneId];
		},
		stopTimers: function ProgressiveLoader$StopTimers() {
			if (ss.isValue(this.$timer)) {
				window.clearTimeout(ss.unbox(this.$timer));
				this.$timer = null;
			}
		},
		$reset: function ProgressiveLoader$Reset() {
			this.$deferredZonesByPriority = null;
			this.$offscreenVizZones = null;
			this.$vizZones = null;
			this.$zoneModels = null;
			this.$pendingZoneContentModels = null;
			this.$updateRoot = null;
			this.$timer = null;
			this.$viewportRect = null;
			ss.clearKeys(this.$zoneTypeMap);
		},
		$getNextZoneBatch: function ProgressiveLoader$GetNextZoneBatch() {
			var zoneBatch = {};
			for (var $t1 = 0; $t1 < $tab_ProgressiveLoader.$zoneCreationOrder.length; $t1++) {
				var priority = $tab_ProgressiveLoader.$zoneCreationOrder[$t1];
				if (priority === $tab_ProgressiveLoader.$offscreenPriority && ss.isValue(this.$offscreenVizZones) && ss.getKeyCount(this.$offscreenVizZones) > 0) {
					this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority] = this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority] || [];
					var $t2 = _.keys(this.$offscreenVizZones);
					for (var $t3 = 0; $t3 < $t2.length; $t3++) {
						var sheetName = $t2[$t3];
						this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority].push(this.$offscreenVizZones[sheetName]);
					}
					this.$offscreenVizZones = null;
				}
				var zones = this.$deferredZonesByPriority[priority];
				if (ss.isNullOrUndefined(zones)) {
					continue;
				}
				var numZones = zones.length;
				var batchInfo = $tab_ProgressiveLoader.$priorityBatchSize[priority];
				var batchSize = 0;
				if (batchInfo.item1 === -1) {
					batchSize = numZones;
				}
				else {
					var floatBatchSize = batchInfo.item2 * numZones;
					if (batchInfo.item1 < floatBatchSize) {
						var zonesRemaining = 0;
						for (var $t4 = 0; $t4 < zones.length; $t4++) {
							var zone = zones[$t4];
							if (ss.isValue(zone)) {
								++zonesRemaining;
							}
						}
						batchSize = Math.floor(floatBatchSize);
						if (zonesRemaining % batchSize > 0) {
							batchSize = batchSize + 1;
						}
					}
					else {
						batchSize = batchInfo.item1;
					}
				}
				var zonesAdded = 0;
				var i = 0;
				while (zonesAdded < batchSize && i < numZones) {
					var zone1 = zones[i];
					zones[i] = null;
					i++;
					if (ss.isNullOrUndefined(zone1)) {
						continue;
					}
					if ($tab_ProgressiveLoader.$isDependentZoneType(this.$getZoneType(zone1))) {
						var sheetName1 = zone1.worksheet;
						if (ss.isValue(this.$offscreenVizZones) && ss.keyExists(this.$offscreenVizZones, sheetName1)) {
							var vizZone = this.$offscreenVizZones[sheetName1];
							delete this.$offscreenVizZones[sheetName1];
							delete this.$vizZones[vizZone.zoneId];
							zoneBatch[vizZone.zoneId.toString()] = vizZone;
						}
					}
					delete this.$vizZones[zone1.zoneId];
					var zoneModel = this.$zoneModels[zone1.zoneId];
					if (ss.isValue(zoneModel)) {
						delete this.$zoneModels[zone1.zoneId];
						this.$pendingZoneContentModels = this.$pendingZoneContentModels || {};
						this.$pendingZoneContentModels[zone1.zoneId] = zoneModel.get_model();
					}
					zoneBatch[zone1.zoneId.toString()] = zone1;
					++zonesAdded;
				}
				if (i === numZones) {
					this.$deferredZonesByPriority[priority] = null;
				}
				break;
			}
			return zoneBatch;
		},
		$isZoneVisible: function ProgressiveLoader$IsZoneVisible(zonePM) {
			if (ss.isNullOrUndefined(this.$viewportRect)) {
				var self = new tab.WindowHelper(window.self);
				var viewportWidth = self.get_innerWidth();
				var viewportHeight = self.get_innerHeight();
				var viewportLeft = self.get_pageXOffset();
				var viewportTop = self.get_pageYOffset();
				this.$viewportRect = { x: viewportLeft, y: viewportTop, w: viewportWidth, h: viewportHeight };
			}
			var zoneRect = { x: zonePM.zoneCommon.x, y: zonePM.zoneCommon.y, w: zonePM.zoneCommon.w, h: zonePM.zoneCommon.h };
			return tab.RectXYUtil.intersectsWith(zoneRect, this.$viewportRect);
		},
		$buildProgressiveUpdate: function ProgressiveLoader$BuildProgressiveUpdate() {
			ss.Debug.assert(ss.isValue(this.$updateRoot), 'No ApplicationPresModel root to be used with Progressive Update');
			var zoneBatch = this.$getNextZoneBatch();
			if (ss.isNullOrUndefined(zoneBatch) || ss.getKeyCount(zoneBatch) === 0) {
				return null;
			}
			var appUpdate = tab.MiscUtil.cloneObject(this.$updateRoot);
			$tab_ProgressiveLoader.getZoneRoot(appUpdate).zones = zoneBatch;
			return appUpdate;
		},
		$scheduleCallback: function ProgressiveLoader$ScheduleCallback() {
			var delay = ss.coalesce(tab.FeatureParamsLookup.getInt(39), 0);
			this.$timer = window.setTimeout(ss.mkdel(this, this.$progressiveLoadCallback), delay);
		},
		$progressiveLoadCallback: function ProgressiveLoader$ProgressiveLoadCallback() {
			ss.Debug.assert(this.get_hasZonesToLoad(), 'Progressive load callback called with no zones to load');
			var progressiveAppModel = this.$buildProgressiveUpdate();
			var zonesLeft = this.get_hasZonesToLoad();
			if (zonesLeft) {
				this.$scheduleCallback();
			}
			this.$fireProgressiveLoadEvent(progressiveAppModel, !zonesLeft);
			if (!zonesLeft) {
				this.$fireLoadCompleteEvent();
				this.$reset();
			}
		},
		$fireProgressiveLoadEvent: function ProgressiveLoader$FireProgressiveLoadEvent(progressiveAppModel, final1) {
			if (!ss.staticEquals(this.$1$ProgressiveLoadField, null)) {
				this.$1$ProgressiveLoadField(progressiveAppModel, final1);
			}
		},
		$fireLoadCompleteEvent: function ProgressiveLoader$FireLoadCompleteEvent() {
			if (ss.isValue(this.$webClientMetric)) {
				this.$webClientMetric.dispose();
				this.$webClientMetric = null;
			}
			if (!ss.staticEquals(this.$1$ProgressiveLoadCompleteField, null)) {
				this.$1$ProgressiveLoadCompleteField();
			}
		},
		$extractAndCloneZonesRoot: function ProgressiveLoader$ExtractAndCloneZonesRoot(appModel) {
			if (ss.isNullOrUndefined(appModel)) {
				return null;
			}
			var zoneRoot = $tab_ProgressiveLoader.getZoneRoot(appModel);
			if (ss.isNullOrUndefined(zoneRoot) && ss.isNullOrUndefined(this.$updateRoot)) {
				return null;
			}
			this.$cloneZonesRoot(appModel);
			return zoneRoot;
		},
		$extractDeferredZones: function ProgressiveLoader$ExtractDeferredZones(zonePresModels) {
			if (ss.isNullOrUndefined(zonePresModels)) {
				return null;
			}
			$tab_ProgressiveLoader.$initStaticLookups();
			this.$vizZones = {};
			this.$deferredZonesByPriority = {};
			this.$zoneModels = {};
			var $t1 = _.keys(zonePresModels);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				var zone = zonePresModels[key];
				if (!ss.contains($tab_ProgressiveLoader.zonesThatDeferContentCreation, this.$getZoneType(zone))) {
					continue;
				}
				var clone = $tab_ProgressiveLoader.cloneZone(zone);
				zone = $tab_ProgressiveLoader.removeZoneContent(zone);
				var cloneType = this.$getZoneType(clone);
				if (cloneType === 'viz') {
					this.$vizZones[key] = clone;
				}
				var priority = 5;
				if (ss.keyExists($tab_ProgressiveLoader.$zonePriorityMap, cloneType)) {
					priority = $tab_ProgressiveLoader.$zonePriorityMap[cloneType];
				}
				this.$deferredZonesByPriority[priority] = this.$deferredZonesByPriority[priority] || [];
				this.$deferredZonesByPriority[priority].push(clone);
			}
			return zonePresModels;
		},
		$reprioritizeNonVisibleZones: function ProgressiveLoader$ReprioritizeNonVisibleZones() {
			if (ss.isNullOrUndefined(this.$deferredZonesByPriority) || this.$checkedForNonVisibleZones) {
				return;
			}
			this.$offscreenVizZones = this.$offscreenVizZones || {};
			for (var $t1 = 0; $t1 < $tab_ProgressiveLoader.$zoneCreationOrder.length; $t1++) {
				var priority = $tab_ProgressiveLoader.$zoneCreationOrder[$t1];
				if (priority === $tab_ProgressiveLoader.$offscreenPriority) {
					continue;
				}
				var zones = this.$deferredZonesByPriority[priority];
				if (ss.isNullOrUndefined(zones) || zones.length === 0) {
					continue;
				}
				var visibleZoneCount = 0;
				var visibleZones = new Array(zones.length);
				for (var $t2 = 0; $t2 < zones.length; $t2++) {
					var zone = zones[$t2];
					if (this.$isZoneVisible(zone)) {
						visibleZones[visibleZoneCount] = zone;
						visibleZoneCount++;
					}
					else if (this.$getZoneType(zone) === 'viz') {
						this.$offscreenVizZones[zone.worksheet] = zone;
					}
					else {
						this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority] = this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority] || [];
						this.$deferredZonesByPriority[$tab_ProgressiveLoader.$offscreenPriority].push(zone);
					}
				}
				if (visibleZoneCount > 0) {
					visibleZones.length = visibleZoneCount;
					this.$deferredZonesByPriority[priority] = visibleZones;
				}
				else {
					this.$deferredZonesByPriority[priority] = null;
				}
			}
			this.$checkedForNonVisibleZones = true;
		},
		$sortZoneArray: function ProgressiveLoader$SortZoneArray(zones) {
			if (ss.isNullOrUndefined(zones) || zones.length === 0) {
				return null;
			}
			var zoneCount = zones.length;
			var priorityList = {};
			var zonePriorities = new Array(zoneCount);
			for (var i = 0; i < zoneCount; i++) {
				var zone = zones[i];
				var zonePriority = zone.zoneCommon.y * 5000 + zone.zoneCommon.x;
				while (ss.isValue(priorityList[zonePriority])) {
					zonePriority += 1;
				}
				priorityList[zonePriority] = zone;
				zonePriorities[i] = zonePriority;
			}
			zonePriorities = zonePriorities.sort(function(id1, id2) {
				return ((id1 > id2) ? 1 : -1);
			});
			for (var i1 = 0; i1 < zoneCount; i1++) {
				var key = zonePriorities[i1];
				var zone1 = priorityList[key];
				zones[i1] = zone1;
			}
			return zones;
		},
		$sortDeferredZones: function ProgressiveLoader$SortDeferredZones() {
			if (ss.isNullOrUndefined(this.$deferredZonesByPriority)) {
				return;
			}
			for (var $t1 = 0; $t1 < $tab_ProgressiveLoader.$zoneCreationOrder.length; $t1++) {
				var priority = $tab_ProgressiveLoader.$zoneCreationOrder[$t1];
				if (priority === $tab_ProgressiveLoader.$offscreenPriority) {
					continue;
				}
				var zones = this.$deferredZonesByPriority[priority];
				this.$deferredZonesByPriority[priority] = this.$sortZoneArray(zones);
			}
		},
		$createZoneModel: function ProgressiveLoader$CreateZoneModel(zonePM) {
			ss.Debug.assert(!ss.keyExists(this.$zoneModels, zonePM.zoneId), 'Creating ZoneModel that already exists');
			var dashModel = $tab_ModelUtils.findContentDashboard(null);
			var zm = new $tab_ZoneModel(dashModel.zonesModel, dashModel, zonePM.zoneId);
			zm.update(zonePM, $tab_NoopModelEventsHandler.get_noopContext());
			this.$zoneModels[zonePM.zoneId] = zm;
			return zm;
		},
		$cloneAndUpdateZonePM: function ProgressiveLoader$CloneAndUpdateZonePM(existingZoneData, newZoneData, context) {
			var zm = this.$zoneModels[existingZoneData.zoneId] || this.$createZoneModel(existingZoneData);
			var clone = $tab_ProgressiveLoader.cloneZone(newZoneData);
			zm.update(clone, context);
			return clone;
		},
		$updateZoneTypeMap: function ProgressiveLoader$UpdateZoneTypeMap(dashboardPresModel) {
			$.extend(this.$zoneTypeMap, $tab_ProgressiveLoader.$buildZoneTypeMap(dashboardPresModel));
		},
		$getZoneType: function ProgressiveLoader$GetZoneType(zonePresModel) {
			if (ss.isNullOrUndefined(zonePresModel)) {
				return 'invalid';
			}
			if (ss.isValue(zonePresModel.zoneCommon)) {
				return zonePresModel.zoneCommon.zoneType;
			}
			return ss.coalesce(this.$zoneTypeMap[zonePresModel.zoneId], 'invalid');
		},
		$cloneZonesRoot: function ProgressiveLoader$CloneZonesRoot(appModel) {
			if (ss.isNullOrUndefined(appModel)) {
				return;
			}
			var existingPMPtr = this.$updateRoot;
			var newPMPtr = appModel;
			var newRootPtr = null;
			this.$updateRoot = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
			newRootPtr = this.$updateRoot;
			newPMPtr = newPMPtr.workbookPresModel;
			existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.workbookPresModel);
			newRootPtr.workbookPresModel = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
			if (ss.isNullOrUndefined(newPMPtr)) {
				return;
			}
			newRootPtr = newRootPtr.workbookPresModel;
			newPMPtr = newPMPtr.dashboardPresModel;
			existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.dashboardPresModel);
			newRootPtr.dashboardPresModel = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
			if (ss.isNullOrUndefined(newPMPtr)) {
				return;
			}
			if (appModel.workbookPresModel.dashboardPresModel.isStory) {
				newRootPtr = newRootPtr.dashboardPresModel;
				newPMPtr = newPMPtr.zones;
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.zones);
				var flipboardZonePM = null;
				var flipboardZoneKey = '';
				if (ss.isValue(newPMPtr)) {
					var zones = newPMPtr;
					var $t1 = _.keys(zones);
					for (var $t2 = 0; $t2 < $t1.length; $t2++) {
						var key = $t1[$t2];
						if (this.$getZoneType(zones[key]) !== 'flipboard') {
							continue;
						}
						flipboardZonePM = zones[key];
						flipboardZoneKey = key;
						break;
					}
				}
				if (ss.isNullOrUndefined(flipboardZonePM)) {
					newRootPtr.zones = existingPMPtr;
					return;
				}
				newRootPtr.zones = {};
				newRootPtr.zones[flipboardZoneKey] = $tab_PresentationModel.cloneObjWithScalarsOnly(flipboardZonePM);
				newRootPtr = newRootPtr.zones[flipboardZoneKey];
				newPMPtr = newPMPtr[flipboardZoneKey].presModelHolder;
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr[flipboardZoneKey].presModelHolder);
				newRootPtr.presModelHolder = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
				if (ss.isNullOrUndefined(newPMPtr)) {
					return;
				}
				newRootPtr = newRootPtr.presModelHolder;
				newPMPtr = newPMPtr['flipboard'];
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr['flipboard']);
				newRootPtr['flipboard'] = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
				if (ss.isNullOrUndefined(newPMPtr)) {
					return;
				}
				var storyPointId = newPMPtr.activeStoryPointId;
				newRootPtr = newRootPtr['flipboard'];
				newPMPtr = newPMPtr.storyPoints;
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.storyPoints);
				newRootPtr.storyPoints = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
				if (ss.isNullOrUndefined(newPMPtr)) {
					return;
				}
				newRootPtr = newRootPtr.storyPoints;
				newPMPtr = newPMPtr[storyPointId.toString()];
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr[storyPointId.toString()]);
				newRootPtr[storyPointId.toString()] = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
				if (ss.isNullOrUndefined(newPMPtr)) {
					return;
				}
				newRootPtr = newRootPtr[storyPointId.toString()];
				newPMPtr = newPMPtr.dashboardPresModel;
				existingPMPtr = (ss.isNullOrUndefined(existingPMPtr) ? null : existingPMPtr.dashboardPresModel);
				newRootPtr.dashboardPresModel = $tab_ProgressiveLoader.$cloneOrReturnDefault(newPMPtr, existingPMPtr);
			}
		}
	});
	ss.initClass($tab_QuantitativeColorLegendModel, $asm, {
		add_legendChanged: function QuantitativeColorLegendModel$add_LegendChanged(value) {
			this.$2$LegendChangedField = ss.delegateCombine(this.$2$LegendChangedField, value);
		},
		remove_legendChanged: function QuantitativeColorLegendModel$remove_LegendChanged(value) {
			this.$2$LegendChangedField = ss.delegateRemove(this.$2$LegendChangedField, value);
		},
		get_quantColorLegendPresModel: function QuantitativeColorLegendModel$get_QuantColorLegendPresModel() {
			return this.pm;
		},
		update: function QuantitativeColorLegendModel$Update(quantLegendPresModel, context) {
			if (this.isNewPresModelSameAsOld(quantLegendPresModel)) {
				return;
			}
			$tab_FontNotificationUtil.notifyFontsFromQuantitativeColorLegendPresModel(quantLegendPresModel);
			this.swapAndCopyPresModel(quantLegendPresModel);
			this.raiseEvent(this.$2$LegendChangedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_QuantitativeFilterData, $asm, {
		get_filterField: function QuantitativeFilterData$get_FilterField() {
			return this.$fieldName;
		},
		get_currentMaxVal: function QuantitativeFilterData$get_CurrentMaxVal() {
			return this.$currentMaxVal;
		},
		get_currentMinVal: function QuantitativeFilterData$get_CurrentMinVal() {
			return this.$currentMinVal;
		},
		get_targetSheets: function QuantitativeFilterData$get_TargetSheets() {
			return this.$targetSheets;
		},
		get_previousMaxVal: function QuantitativeFilterData$get_PreviousMaxVal() {
			return this.$previousMaxVal;
		},
		get_previousMinVal: function QuantitativeFilterData$get_PreviousMinVal() {
			return this.$previousMinVal;
		},
		valueInRange: function QuantitativeFilterData$ValueInRange(val) {
			var valInRange = true;
			if (ss.isValue(this.$currentMinVal)) {
				valInRange = valInRange && tab.DoubleUtil.isGreaterThanOrApproximatelyEqual(val, ss.unbox(this.$currentMinVal));
			}
			if (ss.isValue(this.$currentMaxVal)) {
				valInRange = valInRange && tab.DoubleUtil.isLessThanOrApproximatelyEqual(val, ss.unbox(this.$currentMaxVal));
			}
			return valInRange;
		}
	});
	ss.initClass($tab_QuickFilterDateFormatUtil, $asm, {});
	ss.initClass($tab_QuickFilterDisplayModel, $asm, {
		add_filterUpdated: function QuickFilterDisplayModel$add_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateCombine(this.$2$FilterUpdatedField, value);
		},
		remove_filterUpdated: function QuickFilterDisplayModel$remove_FilterUpdated(value) {
			this.$2$FilterUpdatedField = ss.delegateRemove(this.$2$FilterUpdatedField, value);
		},
		get_quickFilterModel: function QuickFilterDisplayModel$get_QuickFilterModel() {
			return this.$2$QuickFilterModelField;
		},
		set_quickFilterModel: function QuickFilterDisplayModel$set_QuickFilterModel(value) {
			this.$2$QuickFilterModelField = value;
		},
		get_quickFilterType: function QuickFilterDisplayModel$get_QuickFilterType() {
			return this.$2$QuickFilterTypeField;
		},
		set_quickFilterType: function QuickFilterDisplayModel$set_QuickFilterType(value) {
			this.$2$QuickFilterTypeField = value;
		},
		get_quickFilterCommands: function QuickFilterDisplayModel$get_QuickFilterCommands() {
			return this.get_$quickFilterDisplayPresModel().quickFilterCommands;
		},
		get_zoneHasTitle: function QuickFilterDisplayModel$get_ZoneHasTitle() {
			return ss.cast(this.parent, $tab_ZoneContentWrapperModel).get_zone().get_hasTitle();
		},
		get_titleCaption: function QuickFilterDisplayModel$get_TitleCaption() {
			return this.get_$quickFilterDisplayPresModel().quickFilterTitle.caption;
		},
		get_titleHtml: function QuickFilterDisplayModel$get_TitleHtml() {
			return this.get_$quickFilterDisplayPresModel().quickFilterTitle.html;
		},
		get_titleHeight: function QuickFilterDisplayModel$get_TitleHeight() {
			return this.get_$quickFilterDisplayPresModel().quickFilterTitle.h;
		},
		get_itemsHeight: function QuickFilterDisplayModel$get_ItemsHeight() {
			return this.get_$quickFilterDisplayPresModel().lineHeight;
		},
		get_itemsFontName: function QuickFilterDisplayModel$get_ItemsFontName() {
			return this.get_$quickFilterDisplayPresModel().textStyle.fontName.toString();
		},
		get_itemsFontSize: function QuickFilterDisplayModel$get_ItemsFontSize() {
			return this.get_$quickFilterDisplayPresModel().textStyle.fontSize + 'pt';
		},
		get_itemsTextColor: function QuickFilterDisplayModel$get_ItemsTextColor() {
			return this.get_$quickFilterDisplayPresModel().textStyle.color;
		},
		get_itemsFontWeight: function QuickFilterDisplayModel$get_ItemsFontWeight() {
			return this.get_$quickFilterDisplayPresModel().textStyle.fontWeight;
		},
		get_itemsFontStyle: function QuickFilterDisplayModel$get_ItemsFontStyle() {
			return this.get_$quickFilterDisplayPresModel().textStyle.fontStyle;
		},
		get_itemsTextDecoration: function QuickFilterDisplayModel$get_ItemsTextDecoration() {
			return this.get_$quickFilterDisplayPresModel().textStyle.textDecoration;
		},
		get_zoneBackgroundColor: function QuickFilterDisplayModel$get_ZoneBackgroundColor() {
			var zoneContentWrapperModel = ss.cast(this.parent, $tab_ZoneContentWrapperModel);
			return zoneContentWrapperModel.get_zone().pm.zoneCommon.styledBox.fillColor;
		},
		get_visualId: function QuickFilterDisplayModel$get_VisualId() {
			var zoneContentWrapperModel = ss.cast(this.parent, $tab_ZoneContentWrapperModel);
			return $tab_ModelUtils.getVisualId(zoneContentWrapperModel.get_zone().pm.sheet);
		},
		get_fieldName: function QuickFilterDisplayModel$get_FieldName() {
			return this.get_$quickFilterDisplayPresModel().quickFilter.fn;
		},
		get_$quickFilterDisplayPresModel: function QuickFilterDisplayModel$get_QuickFilterDisplayPresModel() {
			return this.pm;
		},
		update: function QuickFilterDisplayModel$Update(newPresModel, context) {
			ss.Debug.assert($tab_QuickFilterDisplayModel.supportsQuickFilterType(newPresModel), 'Catch uses of QuickFilterDisplayModel with not-yet-supported quick-filter types.');
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				if (ss.isValue(newPresModel)) {
					$tab_FontNotificationUtil.notifyFontsFromTextStylePresModel(newPresModel.textStyle);
				}
				this.swapAndCopyPresModel(newPresModel);
				if (newPresModel.quickFilter.quickFilterType !== this.get_quickFilterType()) {
					this.set_quickFilterModel(this.$quickFilterModelFromPresModel(newPresModel.quickFilter));
					this.set_quickFilterType(newPresModel.quickFilter.quickFilterType);
				}
				if (ss.isValue(this.get_quickFilterModel())) {
					this.get_quickFilterModel().update(newPresModel.quickFilter, context);
				}
				this.raiseEvent(this.$2$FilterUpdatedField, context);
			}
		},
		$quickFilterModelFromPresModel: function QuickFilterDisplayModel$QuickFilterModelFromPresModel(presModel) {
			switch (presModel.quickFilterType) {
				case 'categorical': {
					return new $tab_CategoricalQuickFilterModel(this);
				}
				default: {
					return null;
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_QuickSortCmd, $asm, {
		invoke: function QuickSortCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'quick-sort' }, this.cmdParams));
		},
		validateInvokeParams: function QuickSortCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_QuickSortCmd$Response]));
	ss.initClass($tab_QuickSortCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_RadialSelectionDistanceInfoModel, $asm, {
		get_radialSelectionDistanceInfoPresModel: function RadialSelectionDistanceInfoModel$get_RadialSelectionDistanceInfoPresModel() {
			return this.pm;
		},
		get_earthRadius: function RadialSelectionDistanceInfoModel$get_EarthRadius() {
			return this.get_radialSelectionDistanceInfoPresModel().earthRadius;
		},
		get_fontSizePixels: function RadialSelectionDistanceInfoModel$get_FontSizePixels() {
			return this.get_radialSelectionDistanceInfoPresModel().fontSize;
		},
		get_largeUnitDisplay: function RadialSelectionDistanceInfoModel$get_LargeUnitDisplay() {
			return this.get_radialSelectionDistanceInfoPresModel().largeUnitDisplay;
		},
		get_latLongRect: function RadialSelectionDistanceInfoModel$get_LatLongRect() {
			return this.get_radialSelectionDistanceInfoPresModel().mapLatLongRect;
		},
		get_mapHeight: function RadialSelectionDistanceInfoModel$get_MapHeight() {
			return this.get_radialSelectionDistanceInfoPresModel().h;
		},
		get_mapWidth: function RadialSelectionDistanceInfoModel$get_MapWidth() {
			return this.get_radialSelectionDistanceInfoPresModel().w;
		},
		get_readoutOffsetPixels: function RadialSelectionDistanceInfoModel$get_ReadoutOffsetPixels() {
			return this.get_radialSelectionDistanceInfoPresModel().readoutOffset;
		},
		get_shouldShowDistance: function RadialSelectionDistanceInfoModel$get_ShouldShowDistance() {
			return this.get_radialSelectionDistanceInfoPresModel().shouldShowDistance;
		},
		get_sigFigs: function RadialSelectionDistanceInfoModel$get_SigFigs() {
			return this.get_radialSelectionDistanceInfoPresModel().sigFigs;
		},
		get_smallToLargeUnitDivisor: function RadialSelectionDistanceInfoModel$get_SmallToLargeUnitDivisor() {
			return this.get_radialSelectionDistanceInfoPresModel().unitDivisor;
		},
		get_smallUnitDisplay: function RadialSelectionDistanceInfoModel$get_SmallUnitDisplay() {
			return this.get_radialSelectionDistanceInfoPresModel().smallUnitDisplay;
		},
		get_unitTransition: function RadialSelectionDistanceInfoModel$get_UnitTransition() {
			return this.get_radialSelectionDistanceInfoPresModel().unitTransition;
		},
		get_decimalMark: function RadialSelectionDistanceInfoModel$get_DecimalMark() {
			return this.get_radialSelectionDistanceInfoPresModel().decimalMark;
		},
		get_fontColor: function RadialSelectionDistanceInfoModel$get_FontColor() {
			return this.get_radialSelectionDistanceInfoPresModel().distanceFontColor;
		},
		update: function RadialSelectionDistanceInfoModel$Update(newPresModel) {
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_RaiseConnectionsSucceededNotificationCmd, $asm, {
		validateInvokeParams: function RaiseConnectionsSucceededNotificationCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_RaiseConnectionsSucceededNotificationCmd$Response]));
	ss.initClass($tab_RaiseConnectionsSucceededNotificationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_RaiseConnectionsSucceededNotificationCommand, $asm, {
		do$1: function RaiseConnectionsSucceededNotificationCommand$Do() {
			$tab_ApplicationModel.get_instance().raiseNotification('doc:tabbed-auth-dialog-connected-event', null, null);
		}
	}, $tab_RaiseConnectionsSucceededNotificationCmd);
	ss.initClass($tab_RaiseDialogClosedNotificationCmd, $asm, {
		validateInvokeParams: function RaiseDialogClosedNotificationCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_RaiseDialogClosedNotificationCmd$Response]));
	ss.initClass($tab_RaiseDialogClosedNotificationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_RaiseDialogClosedNotificationCommand, $asm, {
		do$1: function RaiseDialogClosedNotificationCommand$Do() {
			$tab_ApplicationModel.get_instance().raiseNotification('doc:tabbed-auth-dialog-closed-event', null, null);
		}
	}, $tab_RaiseDialogClosedNotificationCmd);
	ss.initClass($tab_RankTableCalcModel, $asm, {
		add_modelUpdated: function RankTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function RankTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$rankPresModel: function RankTableCalcModel$get_RankPresModel() {
			return this.pm;
		},
		get_rankTypeValues: function RankTableCalcModel$get_RankTypeValues() {
			return this.get_$rankPresModel().rankTypeValues;
		},
		get_rankTypeCaptions: function RankTableCalcModel$get_RankTypeCaptions() {
			return this.get_$rankPresModel().rankTypeCaptions;
		},
		get_rankTypeIndex: function RankTableCalcModel$get_RankTypeIndex() {
			return this.get_$rankPresModel().rankTypeIndex;
		},
		get_rankType: function RankTableCalcModel$get_RankType() {
			return this.get_rankTypeValues()[this.get_rankTypeIndex()];
		},
		get_rankTypeState: function RankTableCalcModel$get_RankTypeState() {
			return this.get_$rankPresModel().rankTypeState;
		},
		get_sortDirectionValues: function RankTableCalcModel$get_SortDirectionValues() {
			return this.get_$rankPresModel().sortDirectionValues;
		},
		get_sortDirectionCaptions: function RankTableCalcModel$get_SortDirectionCaptions() {
			return this.get_$rankPresModel().sortDirectionCaptions;
		},
		get_sortDirectionIndex: function RankTableCalcModel$get_SortDirectionIndex() {
			return this.get_$rankPresModel().sortDirectionIndex;
		},
		get_sortDirection: function RankTableCalcModel$get_SortDirection() {
			return this.get_sortDirectionValues()[this.get_sortDirectionIndex()];
		},
		update: function RankTableCalcModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_RasterMapSourceModel, $asm, {
		get_hasPresModel: function RasterMapSourceModel$get_HasPresModel() {
			return ss.isValue(this.pm);
		},
		get_rasterMapSourcePresModel: function RasterMapSourceModel$get_RasterMapSourcePresModel() {
			return this.pm;
		},
		get_minShrink: function RasterMapSourceModel$get_MinShrink() {
			return this.get_rasterMapSourcePresModel().mapMinShrink;
		},
		get_maxStretch: function RasterMapSourceModel$get_MaxStretch() {
			return this.get_rasterMapSourcePresModel().mapMaxStretch;
		},
		get_intermediateTileLevels: function RasterMapSourceModel$get_IntermediateTileLevels() {
			return this.get_rasterMapSourcePresModel().mapIntermediateLevels;
		},
		get_mapTileSize: function RasterMapSourceModel$get_MapTileSize() {
			return this.get_rasterMapSourcePresModel().mapTileSize;
		},
		update: function RasterMapSourceModel$Update(newPresModel) {
			if (!this.isNewPresModelSameAsOld(newPresModel)) {
				this.swapAndCopyPresModel(newPresModel);
			}
		}
	}, $tab_Model);
	ss.initClass($tab_ReferenceLineElement, $asm, {
		get_lineWidth: function ReferenceLineElement$get_LineWidth() {
			return this.$1$LineWidthField;
		},
		set_lineWidth: function ReferenceLineElement$set_LineWidth(value) {
			this.$1$LineWidthField = value;
		},
		get_lineColor: function ReferenceLineElement$get_LineColor() {
			return this.$1$LineColorField;
		},
		set_lineColor: function ReferenceLineElement$set_LineColor(value) {
			this.$1$LineColorField = value;
		},
		get_linePattern: function ReferenceLineElement$get_LinePattern() {
			return this.$1$LinePatternField;
		},
		set_linePattern: function ReferenceLineElement$set_LinePattern(value) {
			this.$1$LinePatternField = value;
		},
		get_lineJoin: function ReferenceLineElement$get_LineJoin() {
			return this.$1$LineJoinField;
		},
		set_lineJoin: function ReferenceLineElement$set_LineJoin(value) {
			this.$1$LineJoinField = value;
		},
		get_lineCap: function ReferenceLineElement$get_LineCap() {
			return this.$1$LineCapField;
		},
		set_lineCap: function ReferenceLineElement$set_LineCap(value) {
			this.$1$LineCapField = value;
		},
		get_id: function ReferenceLineElement$get_ID() {
			return this.$1$IDField;
		},
		set_id: function ReferenceLineElement$set_ID(value) {
			this.$1$IDField = value;
		},
		get_hasFillAbove: function ReferenceLineElement$get_HasFillAbove() {
			return this.$fill.get_$hasFillAbove();
		},
		get_hasFillBelow: function ReferenceLineElement$get_HasFillBelow() {
			return this.$fill.get_$hasFillBelow();
		},
		get_fillColorCount: function ReferenceLineElement$get_FillColorCount() {
			return this.$fill.get_$fillColorCount();
		},
		get_hasLine: function ReferenceLineElement$get_HasLine() {
			return ss.isValue(this.$line);
		},
		get_hasLabel: function ReferenceLineElement$get_HasLabel() {
			return ss.isValue(this.$label);
		},
		get_hasFill: function ReferenceLineElement$get_HasFill() {
			return ss.isValue(this.$fill);
		},
		get_scope: function ReferenceLineElement$get_Scope() {
			return this.$1$ScopeField;
		},
		set_scope: function ReferenceLineElement$set_Scope(value) {
			this.$1$ScopeField = value;
		},
		get_labelBackgroundColor: function ReferenceLineElement$get_LabelBackgroundColor() {
			return this.$label.$getBackgroundColor();
		},
		get_instantRefLineIsEnabled: function ReferenceLineElement$get_InstantRefLineIsEnabled() {
			return this.$1$InstantRefLineIsEnabledField;
		},
		set_instantRefLineIsEnabled: function ReferenceLineElement$set_InstantRefLineIsEnabled(value) {
			this.$1$InstantRefLineIsEnabledField = value;
		},
		setPaneSection: function ReferenceLineElement$SetPaneSection(paneIndex, sectionStart, i) {
			paneIndex = this.$updatePaneIndex(paneIndex);
			this.$paneToSectionMap[paneIndex] = { item1: sectionStart, item2: i };
		},
		getRange: function ReferenceLineElement$GetRange(paneIndex) {
			paneIndex = this.$updatePaneIndex(paneIndex);
			if (!ss.keyExists(this.$paneToSectionMap, paneIndex)) {
				return { item1: 0, item2: 0 };
			}
			return this.$paneToSectionMap[paneIndex];
		},
		getLinePixelPosition: function ReferenceLineElement$GetLinePixelPosition(domainTransformX, domainTransformY, index) {
			return this.$line.$getLinePosition(domainTransformX, domainTransformY, index);
		},
		getEndPoints: function ReferenceLineElement$GetEndPoints(bound, screenPoint) {
			return this.$line.$getEndPoints(bound, screenPoint);
		},
		getHitTestBound: function ReferenceLineElement$GetHitTestBound(screenPoint, refLineBound, extension) {
			return this.$line.$getHitTestBound(screenPoint, refLineBound, this.get_lineWidth(), extension);
		},
		getCellClipInfo: function ReferenceLineElement$GetCellClipInfo(index) {
			var clipCase = 0;
			var cellX = 0;
			var cellY = 0;
			if (this.get_scope() === 0) {
				if (this.$isXAxis) {
					clipCase = 2;
					cellY = this.$cellIndex[index];
				}
				else {
					clipCase = 1;
					cellX = this.$cellIndex[index];
				}
			}
			return { item1: clipCase, item2: cellX, item3: cellY };
		},
		getTextRunOffset: function ReferenceLineElement$GetTextRunOffset(labelIndex) {
			return this.$label.$getTextRunOffset(labelIndex);
		},
		getTextRunCount: function ReferenceLineElement$GetTextRunCount(labelIndex) {
			return this.$label.$getTextRunCount(labelIndex);
		},
		getLabelWidth: function ReferenceLineElement$GetLabelWidth(labelIndex) {
			return this.$label.$getWidth(labelIndex);
		},
		getLabelHeight: function ReferenceLineElement$GetLabelHeight(labelIndex) {
			return this.$label.$getHeight(labelIndex);
		},
		isTextAlignEnd: function ReferenceLineElement$IsTextAlignEnd(labelIndex) {
			return this.$label.$isTextAlignEnd(labelIndex);
		},
		getTextStyle: function ReferenceLineElement$GetTextStyle(labelIndex) {
			return this.$label.$getTextStyle(labelIndex);
		},
		computeLabelBoxPosition: function ReferenceLineElement$ComputeLabelBoxPosition(refLineBound, screenPoint, labelIndex) {
			return this.$label.$computeLabelBoxPosition(refLineBound, screenPoint, labelIndex, this.get_lineWidth(), this.$isXAxis);
		},
		getTextRun: function ReferenceLineElement$GetTextRun(runIndex) {
			return this.$label.$getTextRun(runIndex);
		},
		getTextRunPosition: function ReferenceLineElement$GetTextRunPosition(runIndex) {
			return this.$label.$getTextRunPosition(runIndex);
		},
		getFillColor: function ReferenceLineElement$GetFillColor(level) {
			return this.$fill.$getFillColor(level);
		},
		getFillRect: function ReferenceLineElement$GetFillRect(refLineBound, screenPoint, level) {
			return this.$fill.$getFillRect(this.$isXAxis, refLineBound, screenPoint, level);
		},
		$updatePaneIndex: function ReferenceLineElement$UpdatePaneIndex(paneIndex) {
			if (this.get_scope() === 2) {
				return 0;
			}
			return paneIndex;
		}
	});
	$tab_ReferenceLineElement.$ctor2.prototype = $tab_ReferenceLineElement.$ctor1.prototype = $tab_ReferenceLineElement.prototype;
	ss.initClass($tab_ReferenceLinesModel, $asm, {
		getRefLines: function ReferenceLinesModel$GetRefLines(pdKey) {
			return this.$regularRefLines.$getRefLines(pdKey);
		},
		getInstantRefLines: function ReferenceLinesModel$GetInstantRefLines(pdKey) {
			return this.$instantRefLines.$getRefLines(pdKey);
		},
		getRefLineById: function ReferenceLinesModel$GetRefLineById(id) {
			return this.$regularRefLines.$getRefLineById(id);
		},
		getInstantRefLineById: function ReferenceLinesModel$GetInstantRefLineById(id) {
			return this.$instantRefLines.$getRefLineById(id);
		},
		getRefBands: function ReferenceLinesModel$GetRefBands(pdKey) {
			return this.$regularRefLines.$getRefBands(pdKey);
		},
		getInstantRefBands: function ReferenceLinesModel$GetInstantRefBands(pdKey) {
			return this.$instantRefLines.$getRefBands(pdKey);
		},
		$addRefLineElement: function ReferenceLinesModel$AddRefLineElement(refLineProducerOutput, refLines, refBands) {
			if (!ss.isValue(refLineProducerOutput.Details) || !ss.isValue(refLineProducerOutput.LayoutElements)) {
				return;
			}
			var layoutElements = refLineProducerOutput.LayoutElements;
			if (layoutElements.SpecId.length === 0) {
				return;
			}
			var perPDRefLineData = new $tab_$ReferenceLinesModel$PerPaneDescriptorRefLineData(refLineProducerOutput);
			var refLineElements = null;
			var oldSpecId = perPDRefLineData.$specIds[0];
			var oldPaneIndex = perPDRefLineData.$paneIndexs[0];
			var oldZOrder = perPDRefLineData.$zorders[0];
			var sectionStart = 0;
			var inputIndex = 0;
			for (var i = 0; i < perPDRefLineData.$specIds.length; ++i) {
				var specId = perPDRefLineData.$specIds[i];
				inputIndex = _.indexOf(perPDRefLineData.$specIdsInput, specId);
				if (inputIndex === -1) {
					break;
				}
				var axis = perPDRefLineData.$axisOrientations[i];
				if (axis !== 1 && axis !== 2) {
					continue;
				}
				var isXAxis = axis === 1;
				var scope = perPDRefLineData.$calculationScopes[i];
				if (i === 0 || specId !== oldSpecId) {
					if (ss.isValue(refLineElements)) {
						refLineElements.$updatePaneSections(oldPaneIndex, sectionStart, i);
						refLineElements.$addElement(oldZOrder, refLines, refBands);
					}
					refLineElements = new $tab_$ReferenceLinesModel$ReferenceLineElements(perPDRefLineData, inputIndex, i, isXAxis, specId);
					oldSpecId = specId;
					oldZOrder = perPDRefLineData.$zorders[inputIndex];
					oldPaneIndex = perPDRefLineData.$paneIndexs[i];
					sectionStart = i;
				}
				else if (scope !== 2 && oldPaneIndex !== perPDRefLineData.$paneIndexs[i]) {
					ss.Debug.assert(ss.isValue(refLineElements), 'refLineElements should be initialized');
					refLineElements.$updatePaneSections(oldPaneIndex, sectionStart, i);
					oldPaneIndex = perPDRefLineData.$paneIndexs[i];
					sectionStart = i;
				}
			}
			refLineElements.$updatePaneSections(oldPaneIndex, sectionStart, perPDRefLineData.$specIds.length);
			refLineElements.$addElement(oldZOrder, refLines, refBands);
			$tab_FontNotificationUtil.notifyFontsFromTextStyleTable(perPDRefLineData.$xTextStyles);
			$tab_FontNotificationUtil.notifyFontsFromTextStyleTable(perPDRefLineData.$yTextStyles);
		},
		$extractRefLineElements: function ReferenceLinesModel$ExtractRefLineElements(refLines) {
			if (ss.isNullOrUndefined(refLines)) {
				return new $tab_$ReferenceLinesModel$ReferenceLineElementLookup();
			}
			var pdToRefLinesWithZorder = {};
			var pdToRefBandsWithZorder = {};
			var $t1 = ss.getEnumerator(Object.keys(refLines));
			try {
				while ($t1.moveNext()) {
					var pd = $t1.current();
					if (!ss.keyExists(pdToRefLinesWithZorder, pd)) {
						pdToRefLinesWithZorder[pd] = [];
					}
					if (!ss.keyExists(pdToRefBandsWithZorder, pd)) {
						pdToRefBandsWithZorder[pd] = [];
					}
					this.$addRefLineElement(refLines[pd], pdToRefLinesWithZorder[pd], pdToRefBandsWithZorder[pd]);
				}
			}
			finally {
				$t1.dispose();
			}
			var $t2 = new $tab_$ReferenceLinesModel$ReferenceLineElementLookup();
			$t2.$refLineIdMap = $tab_ReferenceLinesModel.$createRefLineIdMap(pdToRefLinesWithZorder);
			$t2.$pdToRefLines = $tab_ReferenceLinesModel.$sortByZOrder(pdToRefLinesWithZorder);
			$t2.$pdToRefBands = $tab_ReferenceLinesModel.$sortByZOrder(pdToRefBandsWithZorder);
			return $t2;
		}
	}, $tab_Model);
	ss.initClass($tab_RelationalTableModel, $asm, {
		get_columns: function RelationalTableModel$get_Columns() {
			return this.$3$ColumnsField;
		},
		set_columns: function RelationalTableModel$set_Columns(value) {
			this.$3$ColumnsField = value;
		},
		get_instanceType: function RelationalTableModel$get_InstanceType() {
			return 'relationalTable';
		},
		get_canHaveChildren: function RelationalTableModel$get_CanHaveChildren() {
			return true;
		},
		get_isUnsortedContainer: function RelationalTableModel$get_IsUnsortedContainer() {
			return true;
		},
		update: function RelationalTableModel$Update(pm, newColumns) {
			this.swapAndCopyPresModel(pm);
			this.set_columns(newColumns);
		}
	}, $tab_FieldModel);
	ss.initClass($tab_RelationalTableModelFactory, $asm, {});
	ss.initClass($tab_RemoteClientCommand, $asm, {}, $tab_ClientCommand);
	ss.initClass($tab_RemoveAnnotationCmd, $asm, {
		invoke: function RemoveAnnotationCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'remove-annotation' }, this.cmdParams));
		},
		validateInvokeParams: function RemoveAnnotationCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_RemoveAnnotationCmd$Response]));
	ss.initClass($tab_RemoveAnnotationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ReplaceFileConnectionFromFileUploadCmd, $asm, {
		invoke: function ReplaceFileConnectionFromFileUploadCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'replace-file-connection-from-file-upload' }, this.cmdParams));
		},
		validateInvokeParams: function ReplaceFileConnectionFromFileUploadCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
			if (!ss.keyExists(this.cmdParams, 'dsClass')) {
				throw new ss.Exception('missing param DocParams.DSClass');
			}
			if (!ss.keyExists(this.cmdParams, 'fileNames')) {
				throw new ss.Exception('missing param DocParams.FileNames');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ReplaceFileConnectionFromFileUploadCmd$Response]));
	ss.initClass($tab_ReplaceFileConnectionFromFileUploadCmd$Response, $asm, {
		hasDataSourceError: function Response$HasDataSourceError() {
			return ss.keyExists(this.$$cmdParams, 'dataSourceCreationError');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_RepoPathObject, $asm, {
		get_workbookId: function RepoPathObject$get_WorkbookId() {
			return this.$workbookId;
		},
		get_sheetId: function RepoPathObject$get_SheetId() {
			return this.$sheetId;
		},
		get_customizedView: function RepoPathObject$get_CustomizedView() {
			return this.$customizedView;
		},
		get_originalViewURL: function RepoPathObject$get_OriginalViewURL() {
			return ss.formatString('{0}/{1}', this.get_workbookId(), this.get_sheetId());
		}
	});
	ss.initClass($tab_ReportMapboxParamsFailureCmd, $asm, {
		invoke: function ReportMapboxParamsFailureCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'report-mapbox-params-failure' }, this.cmdParams));
		},
		validateInvokeParams: function ReportMapboxParamsFailureCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ReportMapboxParamsFailureCmd$Response]));
	ss.initClass($tab_ReportMapboxParamsFailureCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ResetFieldCaptionCmd, $asm, {
		invoke: function ResetFieldCaptionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'reset-field-caption' }, this.cmdParams));
		},
		validateInvokeParams: function ResetFieldCaptionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fn')) {
				throw new ss.Exception('missing param DocParams.FieldName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResetFieldCaptionCmd$Response]));
	ss.initClass($tab_ResetFieldCaptionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'namesOfFields')) {
				throw new ss.Exception('missing param DocParams.NamesOfFields');
			}
		}
	});
	ss.initClass($tab_ResetFieldsCaptionCheckCmd, $asm, {
		validateInvokeParams: function ResetFieldsCaptionCheckCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fieldVector')) {
				throw new ss.Exception('missing param DocParams.FieldVector');
			}
			if (!ss.keyExists(this.cmdParams, 'uniqueFieldVector')) {
				throw new ss.Exception('missing param DocParams.UniqueFieldVector');
			}
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_ResetFieldsCaptionCheckCmd$Response]));
	ss.initClass($tab_ResetFieldsCaptionCheckCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ResizeAxisRegionCmd, $asm, {
		invoke: function ResizeAxisRegionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'resize-axis-region' }, this.cmdParams));
		},
		validateInvokeParams: function ResizeAxisRegionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sizeDelta')) {
				throw new ss.Exception('missing param DocParams.SizeDifference');
			}
			if (!ss.keyExists(this.cmdParams, 'isXAxis')) {
				throw new ss.Exception('missing param DocParams.IsXAxis');
			}
			if (!ss.keyExists(this.cmdParams, 'isFolded')) {
				throw new ss.Exception('missing param DocParams.IsFolded');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeAxisRegionCmd$Response]));
	ss.initClass($tab_ResizeAxisRegionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ResizeCellWebCmd, $asm, {
		invoke: function ResizeCellWebCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'resize-cell-web' }, this.cmdParams));
		},
		validateInvokeParams: function ResizeCellWebCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'baseCoord')) {
				throw new ss.Exception('missing param DocParams.BaseCoord');
			}
			if (!ss.keyExists(this.cmdParams, 'size')) {
				throw new ss.Exception('missing param DocParams.Size');
			}
			if (!ss.keyExists(this.cmdParams, 'isXAxis')) {
				throw new ss.Exception('missing param DocParams.IsXAxis');
			}
			if (!ss.keyExists(this.cmdParams, 'isFolded')) {
				throw new ss.Exception('missing param DocParams.IsFolded');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeCellWebCmd$Response]));
	ss.initClass($tab_ResizeCellWebCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ResizeEntityModel, $asm, {
		get_count: function ResizeEntityModel$get_Count() {
			return this.pm.count;
		},
		get_fieldName: function ResizeEntityModel$get_FieldName() {
			return this.pm.fn;
		},
		get_height: function ResizeEntityModel$get_Height() {
			return this.pm.h;
		},
		get_width: function ResizeEntityModel$get_Width() {
			return this.pm.w;
		},
		update: function ResizeEntityModel$Update(resizeEntity) {
			this.swapAndCopyPresModel(resizeEntity);
		}
	}, $tab_Model);
	ss.initClass($tab_ResizeHeaderRegionCmd, $asm, {
		invoke: function ResizeHeaderRegionCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'resize-header-region' }, this.cmdParams));
		},
		validateInvokeParams: function ResizeHeaderRegionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'sizeDelta')) {
				throw new ss.Exception('missing param DocParams.SizeDifference');
			}
			if (!ss.keyExists(this.cmdParams, 'isXAxis')) {
				throw new ss.Exception('missing param DocParams.IsXAxis');
			}
			if (!ss.keyExists(this.cmdParams, 'regionPoint')) {
				throw new ss.Exception('missing param DocParams.RegionPoint');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeHeaderRegionCmd$Response]));
	ss.initClass($tab_ResizeHeaderRegionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ResizeHeaderWebCmd, $asm, {
		invoke: function ResizeHeaderWebCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'resize-header-web' }, this.cmdParams));
		},
		validateInvokeParams: function ResizeHeaderWebCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'size')) {
				throw new ss.Exception('missing param DocParams.Size');
			}
			if (!ss.keyExists(this.cmdParams, 'isXAxis')) {
				throw new ss.Exception('missing param DocParams.IsXAxis');
			}
			if (!ss.keyExists(this.cmdParams, 'fn')) {
				throw new ss.Exception('missing param DocParams.FieldName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizeHeaderWebCmd$Response]));
	ss.initClass($tab_ResizeHeaderWebCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ResizeInfoModel, $asm, {
		add_resizeInfoUpdated: function ResizeInfoModel$add_ResizeInfoUpdated(value) {
			this.$2$ResizeInfoUpdatedField = ss.delegateCombine(this.$2$ResizeInfoUpdatedField, value);
		},
		remove_resizeInfoUpdated: function ResizeInfoModel$remove_ResizeInfoUpdated(value) {
			this.$2$ResizeInfoUpdatedField = ss.delegateRemove(this.$2$ResizeInfoUpdatedField, value);
		},
		get_totalCols: function ResizeInfoModel$get_TotalCols() {
			return (ss.isValue(this.pm) ? this.pm.colCount : 0);
		},
		get_totalRows: function ResizeInfoModel$get_TotalRows() {
			return (ss.isValue(this.pm) ? this.pm.rowCount : 0);
		},
		get_sheetHeight: function ResizeInfoModel$get_SheetHeight() {
			return this.pm.h;
		},
		get_sheetWidth: function ResizeInfoModel$get_SheetWidth() {
			return this.pm.w;
		},
		get_columnHeaders: function ResizeInfoModel$get_ColumnHeaders() {
			return this.$2$ColumnHeadersField;
		},
		set_columnHeaders: function ResizeInfoModel$set_ColumnHeaders(value) {
			this.$2$ColumnHeadersField = value;
		},
		get_rowHeaders: function ResizeInfoModel$get_RowHeaders() {
			return this.$2$RowHeadersField;
		},
		set_rowHeaders: function ResizeInfoModel$set_RowHeaders(value) {
			this.$2$RowHeadersField = value;
		},
		get_areRowHeadersWidthAdjustable: function ResizeInfoModel$get_AreRowHeadersWidthAdjustable() {
			return ss.isValue(this.get_rowHeaders()) && this.get_rowHeaders().length !== 0 && this.get_rowHeaders()[this.get_rowHeaders().length - 1].get_width() !== 0;
		},
		get_areColHeadersHeightAdjustable: function ResizeInfoModel$get_AreColHeadersHeightAdjustable() {
			return ss.isValue(this.get_columnHeaders()) && this.get_columnHeaders().length !== 0 && this.get_columnHeaders()[this.get_columnHeaders().length - 1].get_height() !== 0;
		},
		get_areCellHeightsAdjustable: function ResizeInfoModel$get_AreCellHeightsAdjustable() {
			return this.get_areRowHeadersWidthAdjustable() && this.pm.cellHeightResizerEnabled;
		},
		get_areCellWidthsAdjustable: function ResizeInfoModel$get_AreCellWidthsAdjustable() {
			return this.get_areColHeadersHeightAdjustable() && this.pm.cellWidthResizerEnabled;
		},
		get_totalColumnHeadersHeight: function ResizeInfoModel$get_TotalColumnHeadersHeight() {
			var totalHeight = 0;
			var $t1 = this.get_columnHeaders();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var col = $t1[$t2];
				totalHeight += col.get_height();
			}
			return totalHeight;
		},
		update: function ResizeInfoModel$Update(presModel, context) {
			if (ss.isNullOrUndefined(this.cellSize)) {
				this.cellSize = new $tab_ResizeEntityModel(this);
			}
			if (ss.isValue(presModel.resizeEntity)) {
				this.cellSize.update(presModel.resizeEntity);
			}
			if (ss.isValue(presModel.rowResizers)) {
				this.set_rowHeaders([]);
				for (var $t1 = 0; $t1 < presModel.rowResizers.length; $t1++) {
					var rowPM = presModel.rowResizers[$t1];
					var rowModel = new $tab_ResizeEntityModel(this);
					rowModel.update(rowPM);
					this.get_rowHeaders().push(rowModel);
				}
			}
			if (ss.isValue(presModel.colResizers)) {
				this.set_columnHeaders([]);
				for (var $t2 = 0; $t2 < presModel.colResizers.length; $t2++) {
					var colPM = presModel.colResizers[$t2];
					var colModel = new $tab_ResizeEntityModel(this);
					colModel.update(colPM);
					this.get_columnHeaders().push(colModel);
				}
			}
			this.simpleSwapToUpdate(presModel, this.$2$ResizeInfoUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ResizePointAnnotationCmd, $asm, {
		invoke: function ResizePointAnnotationCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'resize-point-annotation' }, this.cmdParams));
		},
		validateInvokeParams: function ResizePointAnnotationCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'uid')) {
				throw new ss.Exception('missing param DocParams.UID');
			}
			if (!ss.keyExists(this.cmdParams, 'w')) {
				throw new ss.Exception('missing param DocParams.Width');
			}
			if (!ss.keyExists(this.cmdParams, 'isRightDrag')) {
				throw new ss.Exception('missing param DocParams.IsRightDrag');
			}
			if (!ss.keyExists(this.cmdParams, 'pageNumber')) {
				throw new ss.Exception('missing param DocParams.PageNumber');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ResizePointAnnotationCmd$Response]));
	ss.initClass($tab_ResizePointAnnotationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ResizerViewModelParams, $asm, {});
	ss.initEnum($tab_ResponseStatusCode, $asm, { noResponse: 0, unauthorized: 401, badRequest: 400, forbidden: 403, notFound: 404, timeout: 408, gone: 410, payloadTooLarge: 413, tooManyRequests: 429, internalServerError: 500, badGateway: 502, serviceUnavailable: 503 });
	ss.initClass($tab_RichTextClientCommands, $asm, {});
	ss.initClass($tab_RichTextEditorConfigurationFactory, $asm, {});
	ss.initClass($tab_RightAreaDrawerCommands, $asm, {});
	ss.initClass($tab_RightAreaDrawerModel, $asm, {
		add_updated: function RightAreaDrawerModel$add_Updated(value) {
			this.$2$UpdatedField = ss.delegateCombine(this.$2$UpdatedField, value);
		},
		remove_updated: function RightAreaDrawerModel$remove_Updated(value) {
			this.$2$UpdatedField = ss.delegateRemove(this.$2$UpdatedField, value);
		},
		get_isOpen: function RightAreaDrawerModel$get_IsOpen() {
			return this.$isOpen;
		},
		set_isOpen: function RightAreaDrawerModel$set_IsOpen(value) {
			if (this.$isOpen !== value) {
				this.$isOpen = value;
				this.$raiseUpdated();
			}
		},
		get_typeOfContentBeingLoaded: function RightAreaDrawerModel$get_TypeOfContentBeingLoaded() {
			return this.$typeOfContentBeingLoaded;
		},
		set_typeOfContentBeingLoaded: function RightAreaDrawerModel$set_TypeOfContentBeingLoaded(value) {
			this.$typeOfContentBeingLoaded = value;
		},
		$raiseUpdated: function RightAreaDrawerModel$RaiseUpdated() {
			if (!ss.staticEquals(this.$2$UpdatedField, null)) {
				this.$2$UpdatedField();
			}
		}
	}, $tab_Model);
	ss.initEnum($tab_RightAreaDrawerModel$LoadingContentType, $asm, { none: 0, commenting: 1, DDA: 2, lineage: 3 });
	ss.initClass($tab_RuntimeDataResponseParser, $asm, {
		get_dataStore: function RuntimeDataResponseParser$get_DataStore() {
			return this.$1$DataStoreField;
		},
		set_dataStore: function RuntimeDataResponseParser$set_DataStore(value) {
			this.$1$DataStoreField = value;
		},
		get_vtl: function RuntimeDataResponseParser$get_Vtl() {
			return this.$1$VtlField;
		},
		set_vtl: function RuntimeDataResponseParser$set_Vtl(value) {
			this.$1$VtlField = value;
		},
		get_dataStoreUpdater: function RuntimeDataResponseParser$get_DataStoreUpdater() {
			return this.$1$DataStoreUpdaterField;
		},
		set_dataStoreUpdater: function RuntimeDataResponseParser$set_DataStoreUpdater(value) {
			this.$1$DataStoreUpdaterField = value;
		}
	});
	$tab_RuntimeDataResponseParser.$ctor1.prototype = $tab_RuntimeDataResponseParser.prototype;
	ss.initClass($tab_RuntimeLoader, $asm, {});
	ss.initClass($tab_RuntimeStatusView, $asm, {
		get_isRuntimeSupported: function RuntimeStatusView$get_IsRuntimeSupported() {
			return this.$isRuntimeSupported;
		},
		set_isRuntimeSupported: function RuntimeStatusView$set_IsRuntimeSupported(value) {
			this.$isRuntimeSupported = value;
			this.$updateView();
		},
		get_isRuntimeReady: function RuntimeStatusView$get_IsRuntimeReady() {
			return this.$isRuntimeReady;
		},
		set_isRuntimeReady: function RuntimeStatusView$set_IsRuntimeReady(value) {
			this.$isRuntimeReady = value;
			this.$updateView();
		},
		addDebugViewToElement: function RuntimeStatusView$AddDebugViewToElement(target) {
			if (ss.isNullOrUndefined(this.$view)) {
				this.$view = $('<div></div>');
				this.$view.appendTo(target);
			}
			this.$render();
		},
		$render: function RuntimeStatusView$Render() {
			if (this.get_isRuntimeSupported()) {
				var statusClass = '';
				if (!this.$isRuntimeReady) {
					statusClass = ' pending-runtime';
				}
				this.$view.html("<div class='tab-RuntimeDebugStatus" + statusClass + "'>RE</div>");
			}
			else {
				this.$view.html("<div class='tab-RuntimeDebugStatus no-runtime'>NR</div>");
			}
		},
		$updateView: function RuntimeStatusView$UpdateView() {
			if (!ss.isNullOrUndefined(this.$view)) {
				this.$render();
			}
		}
	});
	ss.initClass($tab_RuntimeTelemetry, $asm, {});
	ss.initEnum($tab_RuntimeTelemetry$RuntimeTelemetryEventType, $asm, { runtimeLoaded: 0 });
	ss.initClass($tab_SaveServerCommands, $asm, {});
	ss.initClass($tab_SceneDataUtil, $asm, {});
	ss.initClass($tab_SceneElementModel, $asm, {
		get_sceneElementPM: function SceneElementModel$get_SceneElementPM() {
			return this.$2$SceneElementPMField;
		},
		set_sceneElementPM: function SceneElementModel$set_SceneElementPM(value) {
			this.$2$SceneElementPMField = value;
		},
		get_paneId: function SceneElementModel$get_PaneId() {
			return this.$2$PaneIdField;
		},
		set_paneId: function SceneElementModel$set_PaneId(value) {
			this.$2$PaneIdField = value;
		},
		get_index: function SceneElementModel$get_Index() {
			return this.get_sceneElementPM().uindex;
		},
		get_paneIndex: function SceneElementModel$get_PaneIndex() {
			return this.get_sceneElementPM().paneIndex;
		},
		get_tupleId: function SceneElementModel$get_TupleId() {
			return this.get_sceneElementPM().tupleId;
		},
		get_bounds: function SceneElementModel$get_Bounds() {
			return this.$2$BoundsField;
		},
		set_bounds: function SceneElementModel$set_Bounds(value) {
			this.$2$BoundsField = value;
		},
		get_visualPart: function SceneElementModel$get_VisualPart() {
			return this.get_sceneElementPM().visualPart;
		},
		get_detail: function SceneElementModel$get_Detail() {
			return this.get_sceneElementPM().sceneModelDetailEnum;
		},
		get_hitType: function SceneElementModel$get_HitType() {
			return this.get_sceneElementPM().sceneModelHitType;
		},
		get_detailId: function SceneElementModel$get_DetailId() {
			return this.get_sceneElementPM().detailId;
		},
		get_cellId: function SceneElementModel$get_CellId() {
			return this.get_sceneElementPM().cellId;
		},
		get_worldOffset: function SceneElementModel$get_WorldOffset() {
			return this.get_sceneElementPM().worldOffset;
		},
		get_markState: function SceneElementModel$get_MarkState() {
			return this.get_sceneElementPM().markState;
		},
		get_hitDistance: function SceneElementModel$get_HitDistance() {
			return this.get_sceneElementPM().distance;
		},
		get_overlayHit: function SceneElementModel$get_OverlayHit() {
			return this.get_sceneElementPM().useForOverlayHitTest;
		}
	}, $tab_Model);
	ss.initClass($tab_SceneModel, $asm, {
		add_newSceneModel: function SceneModel$add_NewSceneModel(value) {
			this.$2$NewSceneModelField = ss.delegateCombine(this.$2$NewSceneModelField, value);
		},
		remove_newSceneModel: function SceneModel$remove_NewSceneModel(value) {
			this.$2$NewSceneModelField = ss.delegateRemove(this.$2$NewSceneModelField, value);
		},
		get_markAnimationControllerHandle: function SceneModel$get_MarkAnimationControllerHandle() {
			return this.$markAnimationControllerHandle;
		},
		get_parentVisualModel: function SceneModel$get_ParentVisualModel() {
			return this.parent;
		},
		get_visualListModels: function SceneModel$get_VisualListModels() {
			return this.$visualListModels;
		},
		get_refLineVisualLists: function SceneModel$get_RefLineVisualLists() {
			return this.$refLineVisualLists;
		},
		get_trendLineVisualLists: function SceneModel$get_TrendLineVisualLists() {
			return this.$trendLineVisualLists;
		},
		get_referenceLines: function SceneModel$get_ReferenceLines() {
			return this.$2$ReferenceLinesField;
		},
		set_referenceLines: function SceneModel$set_ReferenceLines(value) {
			this.$2$ReferenceLinesField = value;
		},
		get_drawFirstParts: function SceneModel$get_DrawFirstParts() {
			return this.$drawFirstParts;
		},
		get_drawLastParts: function SceneModel$get_DrawLastParts() {
			return this.$drawLastParts;
		},
		get_paneDescriptorCount: function SceneModel$get_PaneDescriptorCount() {
			return ss.getKeyCount(this.get_sceneRuntimeData().get_finalDataStore().PDMarks);
		},
		get_sceneRuntimeData: function SceneModel$get_SceneRuntimeData() {
			if (ss.isNullOrUndefined(this.$runtimeDataStore)) {
				if (_.isNull(this.pm) || _.isNull(this.pm.runtimeRenderInputDatastore)) {
					this.$runtimeDataStore = new tab.RuntimeData('');
				}
				else {
					this.$runtimeDataStore = new tab.RuntimeData(this.pm.runtimeRenderInputDatastore);
				}
			}
			return this.$runtimeDataStore;
		},
		set_sceneRuntimeData: function SceneModel$set_SceneRuntimeData(value) {
			this.$runtimeDataStore = value;
		},
		invokeNewSceneModel: function SceneModel$InvokeNewSceneModel() {
			this.$2$NewSceneModelField();
		},
		update: function SceneModel$Update(scenePresModel, context) {
			if (ss.isValue(scenePresModel.markShapeList)) {
				$tab_ApplicationModel.get_instance().get_shapeManager().updateCustomImageMap(scenePresModel.markShapeList);
			}
			this.$updateRuntimeDataStore(scenePresModel);
			this.$killInvalidVisualParts();
			this.$updateVisualParts(this.$drawFirstParts, this.get_sceneRuntimeData().get_drawFirsts(), true, context);
			this.$updateVisualParts(this.$drawLastParts, this.get_sceneRuntimeData().get_drawLasts(), false, context);
			this.$extractFonts();
			var clearUserPanes = ss.isNullOrUndefined(scenePresModel.userPaneInfo);
			scenePresModel.currentPage = scenePresModel.currentPage || 0;
			this.swapAndCopyPresModel(scenePresModel);
			if (clearUserPanes) {
				this.pm.userPaneInfo = null;
			}
			this.$cacheNewRefAndTrendLines();
			this.$updateReferenceLinesModel();
			this.raiseEvent(this.$2$NewSceneModelField, context);
		},
		getMutableCopyOfPresModel: function SceneModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		$cacheNewRefAndTrendLines: function SceneModel$CacheNewRefAndTrendLines() {
			var panes = this.get_sceneRuntimeData().get_panes();
			ss.clear(this.$refLineVisualLists);
			ss.clear(this.$trendLineVisualLists);
			if (ss.isValue(panes)) {
				for (var $t1 = 0; $t1 < panes.length; $t1++) {
					var ppm = panes[$t1];
					if (ss.isValue(ppm.drawPane)) {
						for (var $t2 = 0; $t2 < ppm.drawPane.length; $t2++) {
							var vlpm = ppm.drawPane[$t2];
							if (ss.isValue(vlpm)) {
								if (vlpm.visualPart === 'ref-lines') {
									this.$refLineVisualLists.push(vlpm);
								}
								else if (vlpm.visualPart === 'trend-lines') {
									this.$trendLineVisualLists.push(vlpm);
								}
							}
						}
					}
				}
			}
		},
		$killInvalidVisualParts: function SceneModel$KillInvalidVisualParts() {
			if (tab.MiscUtil.isNullOrEmpty$2(this.get_sceneRuntimeData())) {
				ss.clearKeys(this.get_visualListModels());
				return;
			}
			var $t1 = new ss.ObjectEnumerator(this.get_visualListModels());
			try {
				while ($t1.moveNext()) {
					var pair = $t1.current();
					var currentPart = { $: pair.key };
					var visualPartExist = _.find(this.get_sceneRuntimeData().get_drawFirsts(), ss.mkdel({ currentPart: currentPart }, function(vlpm) {
						return this.currentPart.$ === vlpm.visualPart;
					}));
					if (ss.isNullOrUndefined(visualPartExist)) {
						visualPartExist = _.find(this.get_sceneRuntimeData().get_drawLasts(), ss.mkdel({ currentPart: currentPart }, function(vlpm1) {
							return this.currentPart.$ === vlpm1.visualPart;
						}));
					}
					if (ss.isNullOrUndefined(visualPartExist)) {
						delete this.get_visualListModels()[currentPart.$];
					}
				}
			}
			finally {
				$t1.dispose();
			}
		},
		$updateRuntimeDataStore: function SceneModel$UpdateRuntimeDataStore(scenePresModel) {
			if (ss.isValue(scenePresModel.runtimeFinalDatastoreLocal) && ss.isValue(this.$runtimeDataStore)) {
				var incrementalHandle = new tab.DatastoreHandle(scenePresModel.runtimeFinalDatastoreLocal, null);
				tab.RuntimeWebModule.proxy.marshallDatastore(incrementalHandle).done(ss.mkdel(this, function(marshalled) {
					this.$runtimeDataStore.update(marshalled);
				}));
			}
			else if (ss.isValue(scenePresModel.runtimeRenderInputDatastore)) {
				if (!tab.FeatureFlags.isEnabled('MarkAnimation')) {
					this.$runtimeDataStore = new tab.RuntimeData(scenePresModel.runtimeRenderInputDatastore);
				}
				else {
					this.$updateRuntimeDataStoreForAnimation(scenePresModel);
				}
			}
			else {
				this.$runtimeDataStore = null;
			}
		},
		$updateRuntimeDataStoreForAnimation: function SceneModel$UpdateRuntimeDataStoreForAnimation(scenePresModel) {
			if (this.$markAnimationControllerHandle <= 0) {
				this.$markAnimationControllerHandle = $tab_AnimationUtil.$createMarkAnimationController();
				if (this.$markAnimationControllerHandle > 0) {
					$tab_AnimationUtil.trackSceneModel(this);
				}
				else {
					this.$cachedFirstRuntimeAnimationDataStore = scenePresModel.runtimeAnimationDatastore;
				}
			}
			if (this.$markAnimationControllerHandle > 0) {
				if ($tab_AnimationUtil.$hasAnimationFrame(this.$markAnimationControllerHandle)) {
					$tab_AnimationUtil.$getAnimationFrame(this.$markAnimationControllerHandle).done(ss.mkdel(this, function(marshalled) {
						var inputStore = marshalled;
						this.$runtimeDataStore.update(inputStore);
					}));
				}
				else {
					if (!tab.MiscUtil.isNullOrEmpty$3(this.$cachedFirstRuntimeAnimationDataStore)) {
						$tab_AnimationUtil.$doAnimation(this.$markAnimationControllerHandle, this.$cachedFirstRuntimeAnimationDataStore);
						this.$cachedFirstRuntimeAnimationDataStore = '';
					}
					$tab_AnimationUtil.$doAnimation(this.$markAnimationControllerHandle, scenePresModel.runtimeAnimationDatastore);
					this.$runtimeDataStore = new tab.RuntimeData(scenePresModel.runtimeRenderInputDatastore);
				}
			}
			else {
				this.$runtimeDataStore = new tab.RuntimeData(scenePresModel.runtimeRenderInputDatastore);
			}
		},
		$updateVisualParts: function SceneModel$UpdateVisualParts(visualParts, visualListPresModels, skipDuplicatePart, context) {
			ss.clear(visualParts);
			for (var $t1 = 0; $t1 < visualListPresModels.length; $t1++) {
				var vlistPM = visualListPresModels[$t1];
				$tab_FontNotificationUtil.notifyFontsFromVisualListPresModel(vlistPM);
				var part = vlistPM.visualPart;
				if (!ss.keyExists(this.$visualListModels, part)) {
					this.$visualListModels[part] = new $tab_VisualListModel(this);
				}
				if (skipDuplicatePart && ss.contains(visualParts, part)) {
					continue;
				}
				visualParts.push(part);
				this.$visualListModels[part].update(vlistPM, context);
			}
		},
		$extractFonts: function SceneModel$ExtractFonts() {
			var panes = this.get_sceneRuntimeData().get_panes();
			if (ss.isValue(panes)) {
				for (var $t1 = 0; $t1 < panes.length; $t1++) {
					var pane = panes[$t1];
					for (var $t2 = 0; $t2 < pane.drawPane.length; $t2++) {
						var vlistPM = pane.drawPane[$t2];
						$tab_FontNotificationUtil.notifyFontsFromVisualListPresModel(vlistPM);
					}
				}
			}
			if (ss.isValue(this.get_sceneRuntimeData()) && ss.isValue(this.get_sceneRuntimeData().get_finalDataStore().PDMarks)) {
				var $t3 = new ss.ObjectEnumerator(this.get_sceneRuntimeData().get_finalDataStore().PDMarks);
				try {
					while ($t3.moveNext()) {
						var pdMark = $t3.current();
						$tab_FontNotificationUtil.notifyFontsFromMarkLayoutOutput(pdMark.value);
					}
				}
				finally {
					$t3.dispose();
				}
			}
		},
		$updateReferenceLinesModel: function SceneModel$UpdateReferenceLinesModel() {
			this.set_referenceLines(null);
			if (ss.isValue(this.get_sceneRuntimeData().get_finalDataStore().RefLines)) {
				this.set_referenceLines(new $tab_ReferenceLinesModel(this, this.get_sceneRuntimeData().get_finalDataStore()));
			}
		}
	}, $tab_Model);
	ss.initClass($tab_SceneUtils, $asm, {});
	ss.initClass($tab_Schedule, $asm, {
		get_schedulePresModel: function Schedule$get_SchedulePresModel() {
			return this.$schedulePresModel;
		},
		set_schedulePresModel: function Schedule$set_SchedulePresModel(value) {
			this.$schedulePresModel = value;
		},
		get_scheduleFrequencyDescription: function Schedule$get_ScheduleFrequencyDescription() {
			return this.$scheduleFrequencyDescription;
		},
		set_scheduleFrequencyDescription: function Schedule$set_ScheduleFrequencyDescription(value) {
			this.$scheduleFrequencyDescription = value;
		},
		generateFrequencyDescription: function Schedule$GenerateFrequencyDescription() {
			var now = new Date();
			var clientTimeZoneOffset = 0 - now.getTimezoneOffset();
			var diffMinutes = 0;
			var newStartTime = this.$schedulePresModel.scheduleDetails.startTime;
			var dayOffset = 0;
			var description = '';
			if (tsConfig.display_schedules_in_client_timezone) {
				diffMinutes = clientTimeZoneOffset - this.$schedulePresModel.serverTimezoneOffset;
				newStartTime = $tab_Schedule.$offsetStartTime(this.$schedulePresModel.scheduleDetails.startTime, diffMinutes);
				dayOffset = $tab_Schedule.$computeDayOffset(this.$schedulePresModel.scheduleDetails.startTime, diffMinutes);
			}
			switch (this.$schedulePresModel.scheduleType) {
				case 'Hourly': {
					description = this.$formatHourly(newStartTime, diffMinutes);
					break;
				}
				case 'Daily': {
					description = this.$formatDaily(newStartTime);
					break;
				}
				case 'Weekly': {
					description = this.$formatWeekly(newStartTime, dayOffset);
					break;
				}
				case 'Monthly': {
					description = this.$formatMonthly(newStartTime, dayOffset);
					break;
				}
				default: {
					throw new ss.Exception('Unknown schedule type: ' + this.$schedulePresModel.scheduleType);
				}
			}
			if (!this.$schedulePresModel.parallel) {
				description = tab.Strings.SerialScheduleDescription(description, tab.Strings.SerialScheduleDescriptionSuffix);
			}
			return description;
		},
		$translateDayHourlySchedule: function Schedule$TranslateDayHourlySchedule(recurrenceMinutes, minutesAfterHour, startTime) {
			var frequency = ss.Int32.div(recurrenceMinutes, 60);
			if (minutesAfterHour === 0) {
				if (recurrenceMinutes < 60) {
					return tab.Strings.ScheduleEveryXMinutesDescription(recurrenceMinutes);
				}
				else if (frequency === 1) {
					return tab.Strings.ScheduleEveryOneHourDescription;
				}
				else {
					return tab.Strings.ScheduleEveryXHoursStartingAtYDescription(ss.Int32.div(recurrenceMinutes, 60), $tab_Schedule.$formatTime(startTime));
				}
			}
			else if (minutesAfterHour === 15) {
				if (recurrenceMinutes < 60) {
					if (recurrenceMinutes === 30) {
						return tab.Strings.ScheduleEvery30MinutesDescription;
					}
					else {
						return tab.Strings.ScheduleEveryXMinutesDescription(recurrenceMinutes);
					}
				}
				else {
					if (frequency === 1) {
						return tab.Strings.ScheduleEveryOneHourAtXMinutesPastDescription(minutesAfterHour);
					}
					return tab.Strings.ScheduleEveryXHoursStartingAtYDescription(frequency, $tab_Schedule.$formatTime(startTime));
				}
			}
			else if (minutesAfterHour === 30) {
				if (recurrenceMinutes < 60) {
					return tab.Strings.ScheduleEveryXMinutesDescription(recurrenceMinutes);
				}
				else {
					if (frequency === 1) {
						return tab.Strings.ScheduleEveryOneHourAtXMinutesPastDescription(minutesAfterHour);
					}
					return tab.Strings.ScheduleEveryXHoursStartingAtYDescription(frequency, $tab_Schedule.$formatTime(startTime));
				}
			}
			else if (minutesAfterHour === 45) {
				if (recurrenceMinutes < 60) {
					if (recurrenceMinutes === 30) {
						return tab.Strings.ScheduleEvery30MinutesDescription;
					}
					else {
						return tab.Strings.ScheduleEveryXMinutesDescription(recurrenceMinutes);
					}
				}
				else {
					if (frequency === 1) {
						return tab.Strings.ScheduleEveryOneHourAtXMinutesPastDescription(minutesAfterHour);
					}
					return tab.Strings.ScheduleEveryXHoursStartingAtYDescription(frequency, $tab_Schedule.$formatTime(startTime));
				}
			}
			else {
				throw new ss.Exception('Unsupported schedule minutes after the hour: ' + minutesAfterHour);
			}
		},
		$formatHourly: function Schedule$FormatHourly(startTime, diffMinutes) {
			var newEnd = (this.$schedulePresModel.scheduleDetails.endTime + diffMinutes) % $tab_Schedule.$minutesPerDay;
			if (startTime === newEnd) {
				return this.$translateDayHourlySchedule(this.$schedulePresModel.scheduleDetails.recurrenceMinutes, startTime % 60, startTime);
			}
			var frequency;
			if (this.$schedulePresModel.scheduleDetails.recurrenceMinutes < 60) {
				frequency = tab.Strings.Minutes(this.$schedulePresModel.scheduleDetails.recurrenceMinutes);
			}
			else if (this.$schedulePresModel.scheduleDetails.recurrenceMinutes > 60) {
				frequency = tab.Strings.Hours(ss.Int32.div(this.$schedulePresModel.scheduleDetails.recurrenceMinutes, 60));
			}
			else {
				frequency = tab.Strings.Hour;
			}
			return tab.Strings.ScheduleHourlyDescription(frequency, $tab_Schedule.$formatTime(startTime), $tab_Schedule.$formatTime(newEnd));
		},
		$formatDaily: function Schedule$FormatDaily(startTime) {
			return tab.Strings.ScheduleDailyDescription($tab_Schedule.$formatTime(startTime));
		},
		$formatWeekly: function Schedule$FormatWeekly(startTime, dayOffset) {
			var recurrenceDaysOfWeek = this.$schedulePresModel.scheduleDetails.recurrenceDaysOfWeek;
			if (dayOffset !== 0) {
				recurrenceDaysOfWeek = this.$shiftDayOfWeek(this.$schedulePresModel.scheduleDetails.recurrenceDaysOfWeek, dayOffset);
			}
			var days = this.$formatDays(recurrenceDaysOfWeek);
			return tab.Strings.ScheduleWeeklyDescription($tab_Schedule.$formatTime(startTime), days);
		},
		$shiftDayOfWeek: function Schedule$ShiftDayOfWeek(recurrenceDaysOfWeek, dayOffset) {
			var releventDaysOfWeek = [];
			for (var i = 0; i < recurrenceDaysOfWeek.length; i++) {
				var dayIndex = ss.indexOf($tab_Schedule.$dayNames, recurrenceDaysOfWeek[i]);
				var shiftedDayIndex = (dayIndex + dayOffset + $tab_Schedule.$dayNames.length) % $tab_Schedule.$dayNames.length;
				releventDaysOfWeek.push($tab_Schedule.$dayNames[shiftedDayIndex]);
			}
			return releventDaysOfWeek;
		},
		$formatDays: function Schedule$FormatDays(recurrenceDaysOfWeek) {
			switch (recurrenceDaysOfWeek.length) {
				case 1: {
					return $tab_Schedule.$dayMap[recurrenceDaysOfWeek[0]];
				}
				case 2: {
					return tab.Strings.ListLengthTwo($tab_Schedule.$dayMap[recurrenceDaysOfWeek[0]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[1]]);
				}
				case 3: {
					return tab.Strings.ListLengthThree($tab_Schedule.$dayMap[recurrenceDaysOfWeek[0]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[1]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[2]]);
				}
				case 4: {
					return tab.Strings.ListLengthFour($tab_Schedule.$dayMap[recurrenceDaysOfWeek[0]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[1]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[2]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[3]]);
				}
				case 5: {
					return tab.Strings.ListLengthFive($tab_Schedule.$dayMap[recurrenceDaysOfWeek[0]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[1]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[2]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[3]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[4]]);
				}
				case 6: {
					return tab.Strings.ListLengthSix($tab_Schedule.$dayMap[recurrenceDaysOfWeek[0]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[1]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[2]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[3]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[4]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[5]]);
				}
				case 7: {
					return tab.Strings.ListLengthSeven($tab_Schedule.$dayMap[recurrenceDaysOfWeek[0]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[1]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[2]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[3]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[4]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[5]], $tab_Schedule.$dayMap[recurrenceDaysOfWeek[6]]);
				}
				default: {
					throw new ss.Exception('Unknown list length: ' + recurrenceDaysOfWeek.length);
				}
			}
		},
		$formatMonthly: function Schedule$FormatMonthly(startTime, dayOffset) {
			var recurrenceDayOfMonth = this.$schedulePresModel.scheduleDetails.recurrenceDayOfMonth;
			if (dayOffset !== 0) {
				recurrenceDayOfMonth = this.$shiftDayOfMonth(this.$schedulePresModel.scheduleDetails.recurrenceDayOfMonth, dayOffset);
			}
			if (ss.referenceEquals(recurrenceDayOfMonth, $tab_Schedule.$scheduleLastDayOfMonth)) {
				return tab.Strings.ScheduleMonthlyDescriptionLast($tab_Schedule.$formatTime(startTime));
			}
			else if (ss.referenceEquals(recurrenceDayOfMonth, $tab_Schedule.$scheduleSecondToLastDayOfMonth)) {
				return tab.Strings.ScheduleMonthlyDescriptionSecondToLast($tab_Schedule.$formatTime(startTime));
			}
			var lastChar = recurrenceDayOfMonth.charCodeAt(recurrenceDayOfMonth.length - 1);
			var translatedRecurrenceDayOfMonth = '';
			if (lastChar === 49) {
				translatedRecurrenceDayOfMonth = tab.Strings.FirstEnding(recurrenceDayOfMonth);
			}
			else if (lastChar === 50 && recurrenceDayOfMonth !== '12') {
				translatedRecurrenceDayOfMonth = tab.Strings.SecondEnding(recurrenceDayOfMonth);
			}
			else if (lastChar === 51 && recurrenceDayOfMonth !== '13') {
				translatedRecurrenceDayOfMonth = tab.Strings.ThirdEnding(recurrenceDayOfMonth);
			}
			else {
				translatedRecurrenceDayOfMonth = tab.Strings.NumberEnding(recurrenceDayOfMonth);
			}
			return tab.Strings.ScheduleMonthlyDescription(translatedRecurrenceDayOfMonth, $tab_Schedule.$formatTime(startTime));
		},
		$shiftDayOfMonth: function Schedule$ShiftDayOfMonth(recurrenceDayOfMonth, dayOffset) {
			var d = new Date();
			var daysInMonth = (new Date(d.getFullYear(), d.getMonth() + 1, 0)).getDate();
			if (ss.referenceEquals(recurrenceDayOfMonth, $tab_Schedule.$scheduleLastDayOfMonth)) {
				if (dayOffset > 0) {
					return '1';
				}
				else if (dayOffset < 0) {
					return $tab_Schedule.$scheduleSecondToLastDayOfMonth;
				}
				else {
					return $tab_Schedule.$scheduleLastDayOfMonth;
				}
			}
			if (recurrenceDayOfMonth === '1' && dayOffset < 0) {
				return $tab_Schedule.$scheduleLastDayOfMonth;
			}
			var index = parseInt(recurrenceDayOfMonth);
			var shiftedIndex = (index + dayOffset + daysInMonth) % daysInMonth;
			return shiftedIndex.toString();
		}
	});
	ss.initClass($tab_SchemaClientCommands, $asm, {});
	ss.initClass($tab_SchemaCommandLocalOptions, $asm, {});
	ss.initClass($tab_SchemaUtils, $asm, {});
	ss.initClass($tab_SelectByTupleValueCmd, $asm, {
		invoke: function SelectByTupleValueCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'select-by-tuple-value' }, this.cmdParams));
		},
		validateInvokeParams: function SelectByTupleValueCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fn')) {
				throw new ss.Exception('missing param DocParams.FieldName');
			}
			if (!ss.keyExists(this.cmdParams, 'tupleId')) {
				throw new ss.Exception('missing param DocParams.TupleID');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SelectByTupleValueCmd$Response]));
	ss.initClass($tab_SelectByTupleValueCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SelectDataServerDataSourceForProxyCmd, $asm, {
		invoke: function SelectDataServerDataSourceForProxyCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'select-dataserver-data-source-for-proxy' }, this.cmdParams));
		},
		validateInvokeParams: function SelectDataServerDataSourceForProxyCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'datasourceDatabaseName')) {
				throw new ss.Exception('missing param DocParams.DatabaseName');
			}
			if (!ss.keyExists(this.cmdParams, 'repositoryUrl')) {
				throw new ss.Exception('missing param DocParams.RepositoryUrl');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SelectDataServerDataSourceForProxyCmd$Response]));
	ss.initClass($tab_SelectDataServerDataSourceForProxyCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SelectExtensionAndAddToDashboardCmd, $asm, {
		invoke: function SelectExtensionAndAddToDashboardCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'select-extension-and-add-to-dashboard' }, this.cmdParams));
		},
		validateInvokeParams: function SelectExtensionAndAddToDashboardCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SelectExtensionAndAddToDashboardCmd$Response]));
	ss.initClass($tab_SelectExtensionAndAddToDashboardCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SelectionClientCommands, $asm, {});
	ss.initClass($tab_SelectionModel, $asm, {
		add_newSelection: function SelectionModel$add_NewSelection(value) {
			this.$2$NewSelectionField = ss.delegateCombine(this.$2$NewSelectionField, value);
		},
		remove_newSelection: function SelectionModel$remove_NewSelection(value) {
			this.$2$NewSelectionField = ss.delegateRemove(this.$2$NewSelectionField, value);
		},
		get_selectionPresModel: function SelectionModel$get_SelectionPresModel() {
			if (ss.isValue(this.$overriddenTupleIds)) {
				var temp = {};
				temp.selectionType = 'tuples';
				temp.objectIds = this.$overriddenTupleIds;
				return temp;
			}
			return this.get_$origSelectionPresModel();
		},
		get_selectionType: function SelectionModel$get_SelectionType() {
			return this.get_$origSelectionPresModel().selectionType;
		},
		get_nodes: function SelectionModel$get_Nodes() {
			return this.get_$origSelectionPresModel().selectedNodes;
		},
		get_ids: function SelectionModel$get_Ids() {
			if (ss.isValue(this.$overriddenTupleIds)) {
				return this.$overriddenTupleIds;
			}
			return this.get_$origSelectionPresModel().objectIds;
		},
		get_hashKey: function SelectionModel$get_HashKey() {
			var toRet = this.get_selectionType().toString();
			if (this.get_selectionType() === 'legend-items') {
				toRet += '-' + this.get_selectionPresModel().legendSelectionInfo.legendType + ':' + this.get_selectionPresModel().legendSelectionInfo.legendColumns.join(';');
			}
			return toRet;
		},
		get_$origSelectionPresModel: function SelectionModel$get_OrigSelectionPresModel() {
			return this.pm;
		},
		getMutableCopyOfPresModel: function SelectionModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		isObjectSelected: function SelectionModel$IsObjectSelected(objectId) {
			if (ss.isNullOrUndefined(this.get_$origSelectionPresModel())) {
				tab.Log.get(this).warn("SelectionPresModel doesn't exist.", []);
				return false;
			}
			if (ss.isNullOrUndefined(this.get_ids())) {
				return false;
			}
			return ss.contains(this.get_ids(), objectId);
		},
		isLegendItemSelected: function SelectionModel$IsLegendItemSelected(item) {
			if (this.get_selectionType() !== 'legend-items') {
				return false;
			}
			if (ss.isNullOrUndefined(this.$selectedLegendItemsLookup)) {
				this.$selectedLegendItemsLookup = {};
				if (ss.isValue(this.get_ids())) {
					var $t1 = this.get_ids();
					for (var $t2 = 0; $t2 < $t1.length; $t2++) {
						var objectId = $t1[$t2];
						this.$selectedLegendItemsLookup[objectId] = true;
					}
				}
			}
			return ss.keyExists(this.$selectedLegendItemsLookup, item.objectId);
		},
		isAnyLegendItemSelected: function SelectionModel$IsAnyLegendItemSelected() {
			if (this.get_selectionType() !== 'legend-items') {
				return false;
			}
			if (ss.isValue(this.get_ids())) {
				return this.get_ids().length > 0;
			}
			return false;
		},
		isNodeSelected: function SelectionModel$IsNodeSelected(drawGroup) {
			if (this.isEmpty || ss.isNullOrUndefined(drawGroup.node)) {
				return false;
			}
			return ss.isValue(this.$getNodeSelectionByPath(drawGroup.node));
		},
		findNodeSelection: function SelectionModel$FindNodeSelection(drawGroup) {
			return this.$getNodeSelectionByPath(drawGroup.node);
		},
		isNodeAncestorSelected: function SelectionModel$IsNodeAncestorSelected(drawGroup) {
			if (ss.isNullOrUndefined(drawGroup.node) || ss.isNullOrUndefined(drawGroup.node.columnIndices)) {
				return false;
			}
			var node = drawGroup.node;
			var columnIndices = node.columnIndices;
			var aliasIndices = node.aliasIndices;
			for (var i = 0; i < node.columnIndices.length; i++) {
				var ancestorCols = ss.arrayExtract(columnIndices, i);
				var ancestorVals = ss.arrayExtract(aliasIndices, i);
				if (ss.isValue(this.$getNodeSelectionByPath$1(ancestorCols, ancestorVals, node.axisOrientation, null, node.duplicateIndex, node.pageIndex))) {
					return true;
				}
			}
			return false;
		},
		setOverriddenTupleIds: function SelectionModel$SetOverriddenTupleIds(tupleIds, context) {
			if (this.get_$origSelectionPresModel().selectionType !== 'tuples') {
				return;
			}
			if (_.isEqual(this.$overriddenTupleIds, tupleIds) || tab.MiscUtil.isNullOrEmpty$2(this.$overriddenTupleIds) && tab.MiscUtil.isNullOrEmpty$2(tupleIds)) {
				return;
			}
			this.$overriddenTupleIds = tupleIds;
			this.$refreshEmpty();
			this.raiseEvent(this.$2$NewSelectionField, context);
		},
		update: function SelectionModel$Update(selectionPresModel, context) {
			if (this.isNewPresModelSameAsOld(selectionPresModel) && ss.isNullOrUndefined(this.$overriddenTupleIds)) {
				return;
			}
			this.$selectedNodesLookup = null;
			this.$selectedLegendItemsLookup = null;
			this.$overriddenTupleIds = null;
			this.swapAndCopyPresModel(selectionPresModel);
			this.$refreshEmpty();
			this.raiseEvent(this.$2$NewSelectionField, context);
		},
		isNewPresModelSameAsOld: function SelectionModel$IsNewPresModelSameAsOld(newPM) {
			if (ss.isNullOrUndefined(this.pm) !== ss.isNullOrUndefined(newPM)) {
				return false;
			}
			var newSelPM = newPM;
			if (newSelPM.selectionType !== this.get_selectionPresModel().selectionType) {
				return false;
			}
			if (ss.isValue(newSelPM.objectIds) && !_.isEqual(newSelPM.objectIds, this.get_selectionPresModel().objectIds)) {
				return false;
			}
			if (ss.isValue(newSelPM.selectedNodes) && !_.isEqual(newSelPM.selectedNodes, this.get_selectionPresModel().selectedNodes)) {
				return false;
			}
			if (ss.isValue(newSelPM.legendSelectionInfo) && !_.isEqual(newSelPM.legendSelectionInfo, this.get_selectionPresModel().legendSelectionInfo)) {
				return false;
			}
			return true;
		},
		$getNodeSelectionByPath: function SelectionModel$GetNodeSelectionByPath(node) {
			return this.$getNodeSelectionByPath$1(node.columnIndices, node.aliasIndices, node.axisOrientation, node.fn, node.duplicateIndex, node.pageIndex);
		},
		$getNodeSelectionByPath$1: function SelectionModel$GetNodeSelectionByPath(colIndices, valueIndices, orientation, axisName, duplicateId, pageIndex) {
			if (ss.isNullOrUndefined(colIndices) && ss.isNullOrUndefined(valueIndices) && ss.isNullOrUndefined(axisName) && ss.isNullOrUndefined(orientation)) {
				return null;
			}
			if (ss.isNullOrUndefined(this.$selectedNodesLookup)) {
				this.$selectedNodesLookup = {};
				var pm = this.get_$origSelectionPresModel();
				if (ss.isValue(pm.selectedNodes)) {
					for (var $t1 = 0; $t1 < pm.selectedNodes.length; $t1++) {
						var nodePm = pm.selectedNodes[$t1];
						this.$selectedNodesLookup[$tab_SelectionModel.$makeSelectionKey(nodePm.columnIndices, nodePm.aliasIndices, nodePm.axisOrientation, nodePm.fn, nodePm.duplicateIndex, nodePm.pageIndex)] = nodePm;
					}
				}
			}
			if (ss.getKeyCount(this.$selectedNodesLookup) === 0) {
				return null;
			}
			return this.$selectedNodesLookup[$tab_SelectionModel.$makeSelectionKey(colIndices, valueIndices, orientation, axisName, duplicateId, pageIndex)];
		},
		createSelectionToken: function SelectionModel$CreateSelectionToken() {
			return this.get_selectionPresModel();
		},
		$refreshEmpty: function SelectionModel$RefreshEmpty() {
			this.isEmpty = tab.MiscUtil.isNullOrEmpty$2(this.get_ids()) && tab.MiscUtil.isNullOrEmpty$2(this.get_$origSelectionPresModel().selectedNodes);
		}
	}, $tab_Model);
	ss.initClass($tab_SelectionsDifference, $asm, {
		get_invalidateViz: function SelectionsDifference$get_InvalidateViz() {
			return this.$1$InvalidateVizField;
		},
		set_invalidateViz: function SelectionsDifference$set_InvalidateViz(value) {
			this.$1$InvalidateVizField = value;
		},
		get_reason: function SelectionsDifference$get_Reason() {
			return this.$1$ReasonField;
		},
		set_reason: function SelectionsDifference$set_Reason(value) {
			this.$1$ReasonField = value;
		},
		get_objectIds: function SelectionsDifference$get_ObjectIds() {
			return this.$1$ObjectIdsField;
		},
		set_objectIds: function SelectionsDifference$set_ObjectIds(value) {
			this.$1$ObjectIdsField = value;
		}
	});
	ss.initEnum($tab_SelectionsDiffReason, $asm, { none: 0, noPreviousToCompare: 1, differentTuples: 2, differentTrendOrRefLines: 3 });
	ss.initClass($tab_SelectionsModel, $asm, {
		add_newSelections: function SelectionsModel$add_NewSelections(value) {
			this.$2$NewSelectionsField = ss.delegateCombine(this.$2$NewSelectionsField, value);
		},
		remove_newSelections: function SelectionsModel$remove_NewSelections(value) {
			this.$2$NewSelectionsField = ss.delegateRemove(this.$2$NewSelectionsField, value);
		},
		get_isEmpty: function SelectionsModel$get_IsEmpty() {
			for (var $t1 = 0; $t1 < this.selectionModels.length; $t1++) {
				var selectionModel = this.selectionModels[$t1];
				if (!selectionModel.isEmpty) {
					return false;
				}
			}
			return true;
		},
		get_hasPaneTableObjectSelection: function SelectionsModel$get_HasPaneTableObjectSelection() {
			for (var $t1 = 0; $t1 < this.selectionModels.length; $t1++) {
				var selectionModel = this.selectionModels[$t1];
				if (!selectionModel.isEmpty && selectionModel.get_selectionType() !== 'legend-items' && selectionModel.get_selectionType() !== 'nodes') {
					return true;
				}
			}
			return false;
		},
		get_allLegendSelections: function SelectionsModel$get_AllLegendSelections() {
			return _.filter(this.selectionModels, function(model) {
				return model.get_selectionType() === 'legend-items';
			});
		},
		get_brushVizForNodeSelection: function SelectionsModel$get_BrushVizForNodeSelection() {
			if (this.nodeSelection.isEmpty) {
				return false;
			}
			var $t1 = this.nodeSelection.get_nodes();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var node = $t1[$t2];
				if ($tab_SelectionUtils.isCategoricalAndTupleAssociatedHeader(node)) {
					return true;
				}
			}
			return false;
		},
		getLegendSelection: function SelectionsModel$GetLegendSelection(key, legendColumns) {
			var found = _.find(this.selectionModels, function(model) {
				return model.get_selectionType() === 'legend-items' && ss.isValue(model.get_selectionPresModel()) && model.get_selectionPresModel().legendSelectionInfo.legendType === key && _.isEqual(model.get_selectionPresModel().legendSelectionInfo.legendColumns, legendColumns);
			});
			if (ss.isNullOrUndefined(found)) {
				tab.Log.get(this).debug('Adding a new legend selection: %s', [key]);
				found = this.$addSelectionModel('legend-items', $tab_NoopModelEventsHandler.get_noopContext());
				found.get_selectionPresModel().legendSelectionInfo.legendType = key;
				found.get_selectionPresModel().legendSelectionInfo.legendColumns = legendColumns;
			}
			return found;
		},
		update: function SelectionsModel$Update(presModels, context) {
			var compactPresModels = _.compact(presModels);
			var resultingSelections = [];
			var updated = [];
			for (var $t1 = 0; $t1 < compactPresModels.length; $t1++) {
				var selectionPresModel = compactPresModels[$t1];
				var model;
				if (selectionPresModel.selectionType === 'legend-items') {
					model = this.getLegendSelection(selectionPresModel.legendSelectionInfo.legendType, selectionPresModel.legendSelectionInfo.legendColumns);
				}
				else {
					model = this.$getSelection(selectionPresModel.selectionType);
				}
				if (ss.isNullOrUndefined(model)) {
					model = new $tab_SelectionModel(this, this.selectionModels.length);
					this.selectionModels.push(model);
				}
				var position = parseInt(model.presModelKey.name);
				resultingSelections[position] = selectionPresModel;
				model.update(selectionPresModel, context);
				updated.push(model.get_hashKey());
			}
			for (var $t2 = 0; $t2 < this.selectionModels.length; $t2++) {
				var selectionModel = this.selectionModels[$t2];
				if (ss.contains(updated, selectionModel.get_hashKey())) {
					continue;
				}
				var pm = $tab_SelectionsModel.$createEmptySelectionPm(selectionModel.get_selectionType());
				if (pm.selectionType === 'legend-items') {
					pm.legendSelectionInfo = selectionModel.get_selectionPresModel().legendSelectionInfo;
				}
				selectionModel.update(pm, context);
				var position1 = parseInt(selectionModel.presModelKey.name);
				resultingSelections[position1] = selectionModel.get_selectionPresModel();
			}
			ss.Debug.assert(resultingSelections.length >= presModels.length, 'the pres model array we create should never be shorter than the pres model array passed in');
			for (var ii = 0; ii < resultingSelections.length; ++ii) {
				presModels[ii] = resultingSelections[ii];
			}
			var $t3 = new $tab_SelectionsPresModel();
			$t3.selections = presModels;
			var selPresModel = $t3;
			if (this.isNewPresModelSameAsOld(selPresModel)) {
				return;
			}
			this.swapAndCopyPresModel(selPresModel);
			this.raiseEvent(this.$2$NewSelectionsField, context);
		},
		$getSelection: function SelectionsModel$GetSelection(type) {
			return _.find(this.selectionModels, function(model) {
				return model.get_selectionType() === type;
			});
		},
		$addSelectionModel: function SelectionsModel$AddSelectionModel(type, context) {
			tab.Log.get(this).debug('Creating a new selection model: %s', [type]);
			var model = new $tab_SelectionModel(this, this.selectionModels.length);
			this.selectionModels.push(model);
			var pm = $tab_SelectionsModel.$createEmptySelectionPm(type);
			model.update(pm, context);
			return model;
		},
		createSelectionsToken: function SelectionsModel$CreateSelectionsToken() {
			return this.pm;
		},
		computeSelectionsDiff: function SelectionsModel$ComputeSelectionsDiff(selectionsToken, impliedSelectionToken, currentImpliedSelectionModel) {
			if (ss.isNullOrUndefined(selectionsToken)) {
				return new $tab_SelectionsDifference(true, 1, null);
			}
			var difference = $tab_SelectionsDifference.noDifference();
			var $t1 = ss.cast(selectionsToken, $tab_SelectionsPresModel).selections;
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var oldSelectionPresModel = $t1[$t2];
				switch (oldSelectionPresModel.selectionType) {
					case 'ref-lines':
					case 'trend-lines': {
						var oldIds = oldSelectionPresModel.objectIds || [];
						var delta = $tab_SelectionsModel.$computeTupleArrayDifference(oldIds, this.$getSelection(oldSelectionPresModel.selectionType).get_ids());
						if (delta.length > 0) {
							return new $tab_SelectionsDifference(true, 3, null);
						}
						break;
					}
					case 'tuples': {
						var oldSelTuples = oldSelectionPresModel.objectIds;
						var newSelTuples = this.tupleSelection.get_ids();
						var oldImpliedTuples = (ss.isValue(impliedSelectionToken) ? impliedSelectionToken.objectIds : []);
						var newImpliedTuples = (ss.isValue(currentImpliedSelectionModel) ? currentImpliedSelectionModel.get_ids() : []);
						var invalidateEntireViz = oldSelTuples.length + oldImpliedTuples.length !== 0 !== (newSelTuples.length + newImpliedTuples.length !== 0);
						if (invalidateEntireViz) {
							return new $tab_SelectionsDifference(true, 2, null);
						}
						var selDelta = $tab_SelectionsModel.$computeTupleArrayDifference(oldSelTuples, newSelTuples);
						var impliedDelta = $tab_SelectionsModel.$computeTupleArrayDifference(oldImpliedTuples, newImpliedTuples);
						var combindDelta = [];
						ss.arrayAddRange(combindDelta, selDelta);
						ss.arrayAddRange(combindDelta, impliedDelta);
						difference = new $tab_SelectionsDifference(false, 2, Array.prototype.slice.call(combindDelta));
						break;
					}
					default: {
						break;
					}
				}
			}
			return difference;
		},
		hasTupleSelection: function SelectionsModel$HasTupleSelection() {
			if (ss.isNullOrUndefined(this.pm)) {
				return false;
			}
			var presModels = ss.cast(this.pm, $tab_SelectionsPresModel).selections;
			return _.any(presModels, function(pm) {
				return pm.selectionType === 'tuples' && pm.objectIds.length > 0;
			});
		}
	}, $tab_Model);
	ss.initClass($tab_SelectionsPresModel, $asm, {});
	ss.initClass($tab_SelectionUtils, $asm, {});
	ss.initClass($tab_SelfServiceSchedule, $asm, {});
	ss.initClass($tab_ServerCommands, $asm, {});
	ss.initClass($tab_ServerFonts, $asm, {});
	ss.initClass($tab_SessionAjaxCallManager, $asm, {
		get_completedDelegate: function SessionAjaxCallManager$get_CompletedDelegate() {
			return ss.mkdel(this, this.onComplete);
		},
		get_successDelegate: function SessionAjaxCallManager$get_SuccessDelegate() {
			return ss.mkdel(this, this.onSuccess);
		},
		get_errorDelegate: function SessionAjaxCallManager$get_ErrorDelegate() {
			return ss.mkdel(this, this.onError);
		},
		onComplete: function SessionAjaxCallManager$OnComplete(xhr, textStatus) {
			try {
				if (ss.isValue(this.$onComplete)) {
					this.$onComplete(xhr, textStatus);
				}
			}
			finally {
				this.$postProcess();
			}
		},
		onSuccess: function SessionAjaxCallManager$OnSuccess(data, textStatus, xhr) {
			try {
				var detectedError = ss.isInstanceOfType(data, Error);
				if (detectedError) {
					this.$session.$handleError(data, xhr, false, null);
				}
				else if (xhr.status === 202) {
					var args = xhr['args'];
					var handler = new $tab_SessionAjaxHandler(this.$session, args);
					handler.requestStatus();
					detectedError = true;
				}
				if (!detectedError) {
					if (ss.isValue(this.$onSuccess)) {
						this.$onSuccess(data, textStatus, xhr);
					}
				}
			}
			finally {
				this.$postProcess();
			}
		},
		onError: function SessionAjaxCallManager$OnError(xhr, textStatus, errorThrown) {
			try {
				if (ss.isValue(this.$onError)) {
					this.$onError(xhr, textStatus, errorThrown);
				}
				else {
					this.$session.$handleError(errorThrown, xhr, false, null);
				}
			}
			finally {
				this.$postProcess();
			}
		},
		$postProcess: function SessionAjaxCallManager$PostProcess() {
			if (this.$didWait) {
				this.$didWait = false;
				this.$session.decrementWait();
			}
		}
	});
	ss.initClass($tab_SessionAjaxHandler, $asm, {
		requestStatus: function SessionAjaxHandler$RequestStatus() {
			var onSuccess = ss.mkdel(this, function(data, textStatus, xhr) {
				this.$onSuccess(textStatus, xhr);
			});
			var onError = ss.mkdel(this, function(xhr1, textStatus1, errorThrown) {
				this.$onError(xhr1, textStatus1);
			});
			var handler = new $tab_SessionAjaxCallManager(this.$session, null, onSuccess, onError, false, false);
			var args = {};
			args.type = 'GET';
			args.url = this.$url;
			args.cache = false;
			$tab_XhrUtil.helper(args, handler);
		},
		$onSuccess: function SessionAjaxHandler$OnSuccess(textStatus, xhr) {
			if (xhr.status === 204) {
				this.$ready = true;
			}
			this.$queueNextRequest(textStatus, xhr);
		},
		$onError: function SessionAjaxHandler$OnError(xhr, textStatus) {
			if (ss.isNullOrUndefined(this.$originalArgs.complete)) {
				this.$originalArgs.complete(xhr, textStatus);
			}
		},
		$queueNextRequest: function SessionAjaxHandler$QueueNextRequest(textStatus, xhr) {
			++this.$requests;
			if (this.$requests % 10 === 0 && this.$interval < 4000) {
				this.$interval *= 2;
			}
			if (!this.$ready) {
				window.setTimeout(ss.mkdel(this, function() {
					this.requestStatus();
				}), this.$interval);
			}
			else {
				var skipResendOriginal = this.$originalArgs['skipResendOriginal'];
				if (ss.isValue(skipResendOriginal) && skipResendOriginal) {
					if (ss.isValue(this.$originalArgs.complete)) {
						this.$originalArgs.complete(xhr, textStatus);
					}
				}
				else {
					window.setTimeout(ss.mkdel(this, function() {
						this.$resendOriginal();
					}), 0);
				}
			}
		},
		$resendOriginal: function SessionAjaxHandler$ResendOriginal() {
			if (!this.$originalArgs.async) {
				delete this.$originalArgs['async'];
			}
			$tab_XhrUtil.helper(this.$originalArgs, null);
		}
	});
	ss.initClass($tab_SessionCommands, $asm, {});
	ss.initClass($tab_SessionHeartbeat, $asm, {});
	ss.initClass($tab_SessionRecoveryErrorHandler, $asm, {
		handleCommandFailure: function SessionRecoveryErrorHandler$HandleCommandFailure(error, xhr, command, noExceptionDialog) {
			if (tabBootstrap.ViewerBootstrap.get_instance().get_sessionBeingCleared()) {
				return false;
			}
			var uri = $tab_VizUriModel.createForCurrentWindowLocation(null);
			if (!this.$isRecoverySupportedForVizType(uri)) {
				return false;
			}
			if (!this.$canHandleRequestStatus(xhr.status)) {
				return false;
			}
			if (this.$previousRecoveryFailed) {
				return false;
			}
			if (this.$isRecoveryAlreadyAttempted(tsConfig.sessionid)) {
				return true;
			}
			this.$bootstrapRecoveredSession(uri);
			return true;
		},
		$isRecoverySupportedForVizType: function SessionRecoveryErrorHandler$IsRecoverySupportedForVizType(uri) {
			if (uri.get_isCustomizedView()) {
				return false;
			}
			return uri.get_isAuthoringUri() || uri.get_isViewingUri();
		},
		$isRecoveryAlreadyAttempted: function SessionRecoveryErrorHandler$IsRecoveryAlreadyAttempted(sessionId) {
			return ss.isValue(this.$sessionInRecovery) && ss.equalsT(this.$sessionInRecovery, sessionId);
		},
		$canHandleRequestStatus: function SessionRecoveryErrorHandler$CanHandleRequestStatus(statusCode) {
			return statusCode === 410 || statusCode === 404 || statusCode === 502 || statusCode === 503;
		},
		$bootstrapRecoveredSession: function SessionRecoveryErrorHandler$BootstrapRecoveredSession(uriModel) {
			uriModel.set_ignoreStickySession(true);
			$tab_DefaultSessionErrorHandler.$setIgnore(this.$urlRoot);
			this.$sessionInRecovery = tsConfig.sessionid;
			$tab_SessionServerCommands.switchToViz$1(uriModel, ss.mkdel(this, function(viewRequest, status) {
				this.$previousRecoveryFailed = this.$isRecoveryAlreadyAttempted(tsConfig.sessionid);
				this.$sessionInRecovery = null;
				uriModel.set_ignoreStickySession(false);
			}), ss.mkdel(this, function(session) {
				var lengthLimit = 20;
				var sessionStates = session.getHistoryTail(lengthLimit);
				$tab_SessionRecoveryErrorHandler.raiseSessionRecoveryAttemptEvent(sessionStates);
				tabBootstrap.ViewerBootstrap.get_instance().bootstrapRecoverSession(this.$sessionInRecovery, sessionStates);
			}));
		}
	}, null, [$tab_ISessionErrorHandler]);
	ss.initClass($tab_SessionServerCommands, $asm, {});
	ss.initClass($tab_SetDashboardCurrentLayoutCmd, $asm, {
		invoke: function SetDashboardCurrentLayoutCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-dashboard-current-layout' }, this.cmdParams));
		},
		validateInvokeParams: function SetDashboardCurrentLayoutCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dashboardDeviceLayout')) {
				throw new ss.Exception('missing param DocParams.DashboardDeviceLayout');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDashboardCurrentLayoutCmd$Response]));
	ss.initClass($tab_SetDashboardCurrentLayoutCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SetDashboardSizingWithValidationCmd, $asm, {
		invoke: function SetDashboardSizingWithValidationCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-dashboard-sizing-with-validation' }, this.cmdParams));
		},
		validateInvokeParams: function SetDashboardSizingWithValidationCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dashboardSizingMode')) {
				throw new ss.Exception('missing param DocParams.DashboardSizingMode');
			}
			if (!ss.keyExists(this.cmdParams, 'minWidth')) {
				throw new ss.Exception('missing param DocParams.MinWidth');
			}
			if (!ss.keyExists(this.cmdParams, 'minHeight')) {
				throw new ss.Exception('missing param DocParams.MinHeight');
			}
			if (!ss.keyExists(this.cmdParams, 'maxWidth')) {
				throw new ss.Exception('missing param DocParams.MaxWidth');
			}
			if (!ss.keyExists(this.cmdParams, 'maxHeight')) {
				throw new ss.Exception('missing param DocParams.MaxHeight');
			}
			if (!ss.keyExists(this.cmdParams, 'dashboardSizingDimension')) {
				throw new ss.Exception('missing param DocParams.DashboardSizingDimension');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetDashboardSizingWithValidationCmd$Response]));
	ss.initClass($tab_SetDashboardSizingWithValidationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dashboardSizeWithValidationPresModel')) {
				throw new ss.Exception('missing param DocParams.DashboardSizeWithValidationPresModel');
			}
		}
	});
	ss.initClass($tab_SetVariablesPromptRespondedCmd, $asm, {
		invoke: function SetVariablesPromptRespondedCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-variables-prompt-responded' }, this.cmdParams));
		},
		validateInvokeParams: function SetVariablesPromptRespondedCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SetVariablesPromptRespondedCmd$Response]));
	ss.initClass($tab_SetVariablesPromptRespondedCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ShapeManager, $asm, {
		add_shapeLoaded: function ShapeManager$add_ShapeLoaded(value) {
			this.$1$ShapeLoadedField = ss.delegateCombine(this.$1$ShapeLoadedField, value);
		},
		remove_shapeLoaded: function ShapeManager$remove_ShapeLoaded(value) {
			this.$1$ShapeLoadedField = ss.delegateRemove(this.$1$ShapeLoadedField, value);
		},
		get_imageKeys: function ShapeManager$get_ImageKeys() {
			return _.keys(this.$idToImageMap);
		},
		getImageElement: function ShapeManager$GetImageElement(shapeId) {
			if (ss.keyExists(this.$idToImageMap, shapeId)) {
				return this.$idToImageMap[shapeId].imageElement;
			}
			return null;
		},
		getCachedCanvas: function ShapeManager$GetCachedCanvas(cacheKey) {
			return this.$idToCanvasCache[cacheKey];
		},
		generateCachedCanvas: function ShapeManager$GenerateCachedCanvas(cacheKey, cacheableCanvasGenerator) {
			var canvas = null;
			if (ss.isValue(cacheableCanvasGenerator)) {
				canvas = cacheableCanvasGenerator();
				if (ss.isValue(canvas)) {
					this.$idToCanvasCache[cacheKey] = canvas;
				}
			}
			return canvas;
		},
		getCachedStampCanvas: function ShapeManager$GetCachedStampCanvas(cacheKey) {
			return this.$shapeStampCache[cacheKey];
		},
		generateCachedStampCanvas: function ShapeManager$GenerateCachedStampCanvas(cacheKey, cacheableCanvasGenerator) {
			if (ss.getKeyCount(this.$shapeStampCache) >= $tab_ShapeManager.get_canvasCacheCapacity()) {
				return null;
			}
			if (!ss.isValue(cacheableCanvasGenerator)) {
				return null;
			}
			var canvas = cacheableCanvasGenerator();
			if (!ss.isValue(canvas)) {
				return null;
			}
			this.$shapeStampCache[cacheKey] = canvas;
			return canvas;
		},
		updateCustomImageMap: function ShapeManager$UpdateCustomImageMap(customShapes) {
			for (var $t1 = 0; $t1 < customShapes.length; $t1++) {
				var mark = customShapes[$t1];
				if (ss.isValue(mark)) {
					this.$updateCustomImageMapForMark_OrSomething(mark);
				}
			}
		},
		$updateCustomImageMapForMark_OrSomething: function ShapeManager$UpdateCustomImageMapForMark_OrSomething(mark) {
			var shapeId = mark.shapeId;
			var imageKey = shapeId.toString();
			var existingImage = null;
			var existingImageSize = 0;
			var doesMapContainImage = false;
			if (ss.keyExists(this.$idToImageMap, imageKey)) {
				doesMapContainImage = true;
				existingImage = this.$idToImageMap[imageKey].imageElement;
				existingImageSize = this.$idToImageMap[imageKey].imageSize;
			}
			var imageData = mark.image;
			var newImageSize = imageData.length;
			if (doesMapContainImage && (!ss.isValue(existingImage) || newImageSize <= existingImageSize)) {
				return;
			}
			var $t1 = document.createElement('img');
			var imgElt = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'IMG'));
			imgElt.src = $tab_ShapeManager.$imageFormatString + imageData;
			this.$idToImageMap[imageKey] = { imageElement: imgElt, imageSize: newImageSize };
			var imageFinishedLoad = null;
			imageFinishedLoad = ss.thisFix(ss.mkdel(this, function() {
				if (doesMapContainImage) {
					ss.clearKeys(this.$idToCanvasCache);
				}
				this.$notifyShapeLoaded(shapeId);
				imgElt.removeEventListener('load', imageFinishedLoad, false);
			}));
			imgElt.addEventListener('load', imageFinishedLoad, false);
		},
		hasShape: function ShapeManager$HasShape(shapeId) {
			return ss.keyExists(this.$idToImageMap, shapeId.toString()) && this.$idToImageMap[shapeId.toString()].imageElement.complete;
		},
		$notifyShapeLoaded: function ShapeManager$NotifyShapeLoaded(shapeId) {
			if (!ss.staticEquals(this.$1$ShapeLoadedField, null)) {
				this.$1$ShapeLoadedField(shapeId);
			}
		},
		clearShapeStampCache: function ShapeManager$ClearShapeStampCache() {
			ss.clearKeys(this.$shapeStampCache);
		}
	});
	ss.initClass($tab_ShapeModel, $asm, {
		get_palette: function ShapeModel$get_Palette() {
			return this.$shapePalette;
		},
		get_shapeType: function ShapeModel$get_ShapeType() {
			return this.$shapeType;
		},
		equals$1: function ShapeModel$Equals(selectedShape) {
			return ss.isValue(selectedShape) && ss.referenceEquals(this.$shapePalette, selectedShape.$shapePalette) && this.$shapeType === selectedShape.$shapeType;
		},
		toString: function ShapeModel$ToString() {
			if (ss.isNullOrUndefined(this.$shapePalette)) {
				return this.get_shapeType().toString();
			}
			return ':' + this.get_palette() + '/' + this.get_shapeType();
		}
	});
	ss.initClass($tab_SheetClientCommandPromises, $asm, {});
	ss.initClass($tab_SheetClientCommands, $asm, {});
	ss.initClass($tab_SheetListItemModel, $asm, {
		get_isDashboard: function SheetListItemModel$get_IsDashboard() {
			return this.pm.isDashboard;
		},
		get_isIncluded: function SheetListItemModel$get_IsIncluded() {
			return this.pm.isIncluded;
		},
		get_name: function SheetListItemModel$get_Name() {
			return this.pm.name;
		},
		update: function SheetListItemModel$Update(sheetListItemPresModel) {
			this.swapAndCopyPresModel(sheetListItemPresModel);
		}
	}, $tab_Model);
	ss.initClass($tab_SheetListModel, $asm, {
		add_sheetListUpdated: function SheetListModel$add_SheetListUpdated(value) {
			this.$2$SheetListUpdatedField = ss.delegateCombine(this.$2$SheetListUpdatedField, value);
		},
		remove_sheetListUpdated: function SheetListModel$remove_SheetListUpdated(value) {
			this.$2$SheetListUpdatedField = ss.delegateRemove(this.$2$SheetListUpdatedField, value);
		},
		get_sheets: function SheetListModel$get_Sheets() {
			return this.$sheetModels;
		},
		update: function SheetListModel$Update(sheetListPresModel, context) {
			if (ss.isValue(sheetListPresModel.sheetListItems)) {
				this.$sheetModels = [];
				for (var i = 0; i < sheetListPresModel.sheetListItems.length; i++) {
					var sheetModel = new $tab_SheetListItemModel(this.$sheetListItemArrayModel, i);
					sheetModel.update(sheetListPresModel.sheetListItems[i]);
					this.$sheetModels.push(sheetModel);
				}
			}
			this.simpleSwapToUpdate(sheetListPresModel, this.$2$SheetListUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_SheetSession, $asm, {
		get_visualId: function SheetSession$get_VisualId() {
			return $tab_ModelUtils.getVisualId(this.sheetId);
		},
		requestHSMChildren: function SheetSession$RequestHSMChildren(field, member, onComplete, onError) {
			if (!tsConfig.allow_filter) {
				return;
			}
			var onSuccess = function(resp, textStatus, xhr) {
				onComplete(ss.cast(resp, Array));
			};
			var handler = this.createHandler(null, onSuccess, null, 'none');
			var file = new Object();
			file['name'] = 'file';
			file['filename'] = 'file';
			file['contentType'] = 'text/javascript';
			file['content'] = JSON.stringify(member);
			var dict = ss.mkdict(['_method', 'PUT']);
			var payload = $tab_XhrUtil.getMultipartData(file, dict);
			var args = { type: 'POST', url: this.formatFilterReference(this.sheetId, field, 'show_children'), dataType: 'json', contentType: 'multipart/form-data; boundary=' + payload.header, data: payload.body };
			this.request(args, handler);
		},
		getFilterItems: function SheetSession$GetFilterItems(field, domain, itemRange, onComplete, onError) {
			if (!tsConfig.allow_filter) {
				return;
			}
			var onSuccess = function(resp, textStatus, xhr) {
				onComplete(resp);
			};
			var handler = this.createHandler(null, onSuccess, null, 'none');
			var dat = {};
			dat['fromIndex'] = itemRange.get_from();
			dat['toIndex'] = itemRange.get_to();
			dat['domain'] = domain;
			var args = this.basicGetOpts(this.formatFilterReference(this.sheetId, field, 'getfilteritems'));
			args.data = dat;
			this.request(args, handler);
		},
		searchFilter: function SheetSession$SearchFilter(field, query, maxRows, shouldGetIndex, domain, successHandler, errorHandler) {
			if (!tsConfig.allow_filter) {
				return null;
			}
			var onSuccess = function(resp, textStatus, xhr) {
				var data = resp;
				successHandler(data);
			};
			var onError = function(xhr1, textStatus1, errorThrown) {
				errorHandler(errorThrown);
			};
			var handler = this.createHandler(null, onSuccess, onError, 'none');
			var urlSlug = (shouldGetIndex ? 'searchwithindex' : 'search');
			var args = this.basicGetOpts(this.formatFilterReference(this.sheetId, field, urlSlug));
			var param = ss.mkdict(['query', query, 'maxRows', maxRows, 'domain', domain]);
			args.data = param;
			return this.request(args, handler);
		}
	}, $tab_BaseSession, [$tab_IVizqlServerRequestHandler]);
	ss.initClass($tab_ShelfItemsArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_ShelfListArrayModel, $asm, {}, $tab_Model);
	ss.initClass($tab_ShelfModel, $asm, {
		add_shelfChanged: function ShelfModel$add_ShelfChanged(value) {
			this.$2$ShelfChangedField = ss.delegateCombine(this.$2$ShelfChangedField, value);
		},
		remove_shelfChanged: function ShelfModel$remove_ShelfChanged(value) {
			this.$2$ShelfChangedField = ss.delegateRemove(this.$2$ShelfChangedField, value);
		},
		get_paneId: function ShelfModel$get_PaneId() {
			return (ss.isValue(this.get_$shelf().paneSpec) ? this.get_$shelf().paneSpec : 0);
		},
		get_shelfType: function ShelfModel$get_ShelfType() {
			return this.get_$shelf().shelfType;
		},
		get_pills: function ShelfModel$get_Pills() {
			return this.$pills;
		},
		get_tooltip: function ShelfModel$get_Tooltip() {
			return tableau.format.stripFormattedText(this.get_$shelf().tooltip);
		},
		get_isVisible: function ShelfModel$get_IsVisible() {
			return this.get_$shelf().showShelf;
		},
		get_$shelf: function ShelfModel$get_Shelf() {
			return this.pm;
		},
		findPill: function ShelfModel$FindPill(shelfItemID) {
			return _.find(this.get_pills(), function(model) {
				return model.pm.shelfItemId === shelfItemID;
			});
		},
		getMutableCopyOfPresModel: function ShelfModel$GetMutableCopyOfPresModel() {
			return this.getMutableCopyOfPresModelInternal(true);
		},
		update: function ShelfModel$Update(shelf, schema, context) {
			if (this.isNewPresModelSameAsOld(shelf)) {
				return;
			}
			if (shelf.shelfItems === null) {
				this.$pills = [];
			}
			else if (ss.isValue(shelf.shelfItems)) {
				var newPills = [];
				var arrayModel = new $tab_ShelfItemsArrayModel(this);
				for (var i = 0; i < shelf.shelfItems.length; i++) {
					var shelfItem = shelf.shelfItems[i];
					var fieldName = shelfItem.fn;
					var col;
					if (ss.isNullOrEmptyString(fieldName) && shelf.shelfType === 'encoding-shelf') {
						col = new $tab_MultipleFieldsModel();
					}
					else {
						col = schema.findField(fieldName);
					}
					if (ss.isNullOrUndefined(col)) {
						tab.Logger.getLogger($tab_ShelvesModel, null).warn('Unable to locate field, invalidating pill: %s', [fieldName]);
						shelfItem.isInvalid = true;
					}
					if (shelfItem.isInvalid) {
						var fakeColumn = new $tab_FieldColumnModel(new $tab_FieldsModel('', schema.findDataSourceFromGlobalFieldName(fieldName)));
						var fakePresModel = { type: 'column', fn: fieldName, description: fieldName, fieldIconIdx: 0 };
						fakeColumn.update(fakePresModel);
						col = fakeColumn;
					}
					var p = new $tab_PillModel(arrayModel, i);
					p.update(shelfItem, col);
					newPills.push(p);
				}
				this.$pills = newPills;
			}
			this.swapAndCopyPresModel(shelf);
			this.raiseEvent$1($tab_ShelfModel).call(this, this.$2$ShelfChangedField, this, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ShelvesModel, $asm, {
		add_newShelves: function ShelvesModel$add_NewShelves(value) {
			this.$2$NewShelvesField = ss.delegateCombine(this.$2$NewShelvesField, value);
		},
		remove_newShelves: function ShelvesModel$remove_NewShelves(value) {
			this.$2$NewShelvesField = ss.delegateRemove(this.$2$NewShelvesField, value);
		},
		get_shelves: function ShelvesModel$get_Shelves() {
			return this.$shelfModels;
		},
		findShelf: function ShelvesModel$FindShelf(shelfType) {
			return this.$findShelfInList(this.$shelfModels, shelfType);
		},
		update: function ShelvesModel$Update(pm, schema, defaultPaneSpecId, context) {
			if (this.isNewPresModelSameAsOld(pm)) {
				return;
			}
			this.swapAndCopyPresModel(pm);
			this.$buildShelfModels(pm, schema, defaultPaneSpecId, context);
			this.raiseEvent(this.$2$NewShelvesField, context);
		},
		$buildShelfModels: function ShelvesModel$BuildShelfModels(pm, schema, defaultPaneSpecId, context) {
			if (ss.isValue(pm)) {
				var shelvesToKill = ss.arrayClone(this.$shelfModels);
				for (var i = 0; i < pm.shelfList.length; i++) {
					var shelf = { $: pm.shelfList[i] };
					if (ss.isNullOrUndefined(shelf.$.paneSpec) && ss.isValue(defaultPaneSpecId)) {
						shelf.$.paneSpec = ss.unbox(defaultPaneSpecId);
					}
					var sm = _.find(this.$shelfModels, ss.mkdel({ shelf: shelf }, function(model) {
						return model.get_shelfType() === this.shelf.$.shelfType && model.get_paneId() === (this.shelf.$.paneSpec || 0);
					}));
					if (ss.isValue(sm)) {
						tab.Log.get(this).debug('Updating shelf: type=%s, paneId=%s', [shelf.$.shelfType, shelf.$.paneSpec]);
						ss.remove(shelvesToKill, sm);
						sm.update(shelf.$, schema, context);
					}
					else {
						tab.Log.get(this).debug('Creating shelf: type=%s, paneId=%s', [shelf.$.shelfType, shelf.$.paneSpec]);
						this.$shelfModels.push($tab_ShelvesModel.createShelfModel(this, shelf.$, schema, i, context));
					}
				}
				for (var $t1 = 0; $t1 < shelvesToKill.length; $t1++) {
					var toKill = shelvesToKill[$t1];
					tab.Log.get(this).debug('Removing shelf: type=%s, paneId=%s', [toKill.get_shelfType(), toKill.get_paneId()]);
					ss.remove(this.$shelfModels, toKill);
				}
			}
		},
		$findShelfInList: function ShelvesModel$FindShelfInList(newModels, shelfType) {
			return _.find(newModels, function(model) {
				return model.get_shelfType() === shelfType;
			});
		}
	}, $tab_Model);
	ss.initClass($tab_ShowDashboardTitleCmd, $asm, {
		invoke: function ShowDashboardTitleCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'show-dashboard-title' }, this.cmdParams));
		},
		validateInvokeParams: function ShowDashboardTitleCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowDashboardTitleCmd$Response]));
	ss.initClass($tab_ShowDashboardTitleCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ShowEditAxisDialogCmd, $asm, {
		invoke: function ShowEditAxisDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'show-edit-axis-dialog' }, this.cmdParams));
		},
		validateInvokeParams: function ShowEditAxisDialogCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'fn')) {
				throw new ss.Exception('missing param DocParams.FieldName');
			}
			if (!ss.keyExists(this.cmdParams, 'axisOrientation')) {
				throw new ss.Exception('missing param DocParams.AxisOrientation');
			}
			if (!ss.keyExists(this.cmdParams, 'duplicateIndex')) {
				throw new ss.Exception('missing param DocParams.DuplicateIndex');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowEditAxisDialogCmd$Response]));
	ss.initClass($tab_ShowEditAxisDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ShowImageObjectConfigDialogCmd, $asm, {
		invoke: function ShowImageObjectConfigDialogCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'show-image-object-config-dialog' }, this.cmdParams));
		},
		validateInvokeParams: function ShowImageObjectConfigDialogCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ShowImageObjectConfigDialogCmd$Response]));
	ss.initClass($tab_ShowImageObjectConfigDialogCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SimpleCommandsPresModelWrapper, $asm, {
		get_simpleCommand: function SimpleCommandsPresModelWrapper$get_SimpleCommand() {
			return this.$model['simpleCommand'.toString()];
		},
		set_simpleCommand: function SimpleCommandsPresModelWrapper$set_SimpleCommand(value) {
			this.$model['simpleCommand'.toString()] = value;
		}
	});
	ss.initClass($tab_SimpleFontListProvider, $asm, {
		get_fontFamilies: function SimpleFontListProvider$get_FontFamilies() {
			return Array.prototype.slice.call(this.$fontFamilies);
		},
		toSimpleFontList: function SimpleFontListProvider$ToSimpleFontList() {
			return $tab_SimpleFontListProvider.$toSimpleFontListInternal(this.$fontFamilies);
		},
		$constructFontFamiliesFromFlatList: function SimpleFontListProvider$ConstructFontFamiliesFromFlatList(fonts) {
			this.$fontFamilies = [];
			if (ss.isNullOrUndefined(fonts)) {
				return;
			}
			var $t1 = ss.getEnumerator(fonts);
			try {
				while ($t1.moveNext()) {
					var font = $t1.current();
					this.$fontFamilies.push(new $tab_FontFamily.$ctor1(font, [font]));
				}
			}
			finally {
				$t1.dispose();
			}
		}
	});
	$tab_SimpleFontListProvider.$ctor1.prototype = $tab_SimpleFontListProvider.$ctor2.prototype = $tab_SimpleFontListProvider.prototype;
	ss.initClass($tab_SizeItemModel, $asm, {
		add_sizeInfoUpdated: function SizeItemModel$add_SizeInfoUpdated(value) {
			this.$2$SizeInfoUpdatedField = ss.delegateCombine(this.$2$SizeInfoUpdatedField, value);
		},
		remove_sizeInfoUpdated: function SizeItemModel$remove_SizeInfoUpdated(value) {
			this.$2$SizeInfoUpdatedField = ss.delegateRemove(this.$2$SizeInfoUpdatedField, value);
		},
		get_name: function SizeItemModel$get_Name() {
			return this.pm.name;
		},
		get_width: function SizeItemModel$get_Width() {
			return this.pm.w;
		},
		get_height: function SizeItemModel$get_Height() {
			return this.pm.h;
		},
		update: function SizeItemModel$Update(sizeItemPresModel, context) {
			this.simpleSwapToUpdate(sizeItemPresModel, this.$2$SizeInfoUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_SizePresModelUtils, $asm, {});
	ss.initClass($tab_SortFromIndicatorCmd, $asm, {
		invoke: function SortFromIndicatorCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'sort-from-indicator' }, this.cmdParams));
		},
		validateInvokeParams: function SortFromIndicatorCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'vizLocation')) {
				throw new ss.Exception('missing param DocParams.VizLocation');
			}
			if (!ss.keyExists(this.cmdParams, 'scrollOffset')) {
				throw new ss.Exception('missing param DocParams.ScrollOffset');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_SortFromIndicatorCmd$Response]));
	ss.initClass($tab_SortFromIndicatorCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_SortIndicatorsModel, $asm, {
		add_newSortIndicators: function SortIndicatorsModel$add_NewSortIndicators(value) {
			this.$2$NewSortIndicatorsField = ss.delegateCombine(this.$2$NewSortIndicatorsField, value);
		},
		remove_newSortIndicators: function SortIndicatorsModel$remove_NewSortIndicators(value) {
			this.$2$NewSortIndicatorsField = ss.delegateRemove(this.$2$NewSortIndicatorsField, value);
		},
		get_sortIndicatorsPresModel: function SortIndicatorsModel$get_SortIndicatorsPresModel() {
			return this.pm;
		},
		update: function SortIndicatorsModel$Update(sortIndicatorsPresModel, context) {
			this.simpleSwapToUpdate$1(Object).call(this, sortIndicatorsPresModel, this.$2$NewSortIndicatorsField, sortIndicatorsPresModel, context);
		}
	}, $tab_Model);
	ss.initClass($tab_SortingTelemetry, $asm, {});
	ss.initClass($tab_SortServerCommands, $asm, {});
	ss.initClass($tab_StartNewDataAlertCmd, $asm, {
		invoke: function StartNewDataAlertCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'start-new-data-alert' }, this.cmdParams));
		},
		validateInvokeParams: function StartNewDataAlertCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_StartNewDataAlertCmd$Response]));
	ss.initClass($tab_StartNewDataAlertCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertMeasures')) {
				throw new ss.Exception('missing param DocParams.DataAlertMeasures');
			}
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertMeasure')) {
				throw new ss.Exception('missing param DocParams.DataAlertMeasure');
			}
			if (!ss.keyExists(this.$$cmdParams, 'fieldName')) {
				throw new ss.Exception('missing param DocParams.FieldNameString');
			}
			if (!ss.keyExists(this.$$cmdParams, 'dataAlertConstantCondition')) {
				throw new ss.Exception('missing param DocParams.DataAlertConstantCondition');
			}
			if (!ss.keyExists(this.$$cmdParams, 'referenceLineId')) {
				throw new ss.Exception('missing param DocParams.ReferenceLineSpecificationId');
			}
			if (!ss.keyExists(this.$$cmdParams, 'isDataAlertConditionMet')) {
				throw new ss.Exception('missing param DocParams.IsDataAlertConditionMet');
			}
			if (!ss.keyExists(this.$$cmdParams, 'isViewSaveNeeded')) {
				throw new ss.Exception('missing param DocParams.IsViewSaveNeeded');
			}
		}
	});
	ss.initClass($tab_StartupUtils, $asm, {});
	ss.initClass($tab_StoryPointModel, $asm, {
		add_dashboardDisposal: function StoryPointModel$add_DashboardDisposal(value) {
			this.$2$DashboardDisposalField = ss.delegateCombine(this.$2$DashboardDisposalField, value);
		},
		remove_dashboardDisposal: function StoryPointModel$remove_DashboardDisposal(value) {
			this.$2$DashboardDisposalField = ss.delegateRemove(this.$2$DashboardDisposalField, value);
		},
		add_newStoryPoint: function StoryPointModel$add_NewStoryPoint(value) {
			this.$2$NewStoryPointField = ss.delegateCombine(this.$2$NewStoryPointField, value);
		},
		remove_newStoryPoint: function StoryPointModel$remove_NewStoryPoint(value) {
			this.$2$NewStoryPointField = ss.delegateRemove(this.$2$NewStoryPointField, value);
		},
		get_dashboardModel: function StoryPointModel$get_DashboardModel() {
			return this.$dashboardModel;
		},
		get_isBackingSheetDashboard: function StoryPointModel$get_IsBackingSheetDashboard() {
			return this.get_$storyPointPresModel().isBackingSheetDashboard;
		},
		get_$storyPointPresModel: function StoryPointModel$get_StoryPointPresModel() {
			return this.pm;
		},
		get_storyPointId: function StoryPointModel$get_StoryPointId() {
			return this.get_$storyPointPresModel().storyPointId;
		},
		get_currentSheet: function StoryPointModel$get_CurrentSheet() {
			return this.get_$storyPointPresModel().currentSheet;
		},
		update: function StoryPointModel$Update(storyPointPresModel, context) {
			if (!ss.isValue(storyPointPresModel)) {
				return;
			}
			if (ss.isValue(this.get_$storyPointPresModel()) && (ss.isNullOrEmptyString(this.get_currentSheet()) || this.get_storyPointId() !== storyPointPresModel.storyPointId || this.$pointWasRemoved(storyPointPresModel))) {
				$tab_ApplicationModel.get_instance().get_shapeManager().clearShapeStampCache();
				this.presModelKey = new $tab_PresModelPathItem(storyPointPresModel.storyPointId.toString(), 0);
				if (ss.isValue(this.$dashboardModel)) {
					this.raiseEvent(this.$2$DashboardDisposalField, context);
					this.$dashboardModel = null;
				}
				this.$dashboardModel = new $tab_DashboardModel(this);
				this.$updateDashboard(storyPointPresModel.dashboardPresModel, context);
				this.raiseEvent(this.$2$NewStoryPointField, context);
			}
			else {
				this.$updateDashboard(storyPointPresModel.dashboardPresModel, context);
			}
			this.swapPresModel(storyPointPresModel);
		},
		$updateDashboard: function StoryPointModel$UpdateDashboard(dashboardPresModel, context) {
			if (ss.isValue(dashboardPresModel)) {
				this.get_dashboardModel().update(dashboardPresModel, context);
			}
		},
		$pointWasRemoved: function StoryPointModel$PointWasRemoved(storyPointPresModel) {
			return ss.isNullOrEmptyString(storyPointPresModel.currentSheet.toString()) && !ss.isNullOrEmptyString(this.get_currentSheet());
		}
	}, $tab_Model);
	ss.initClass($tab_StoryPointsModel, $asm, {
		get_currentStoryPoint: function StoryPointsModel$get_CurrentStoryPoint() {
			return this.$pointModel;
		},
		update: function StoryPointsModel$Update(storyPoint, context) {
			if (!ss.isValue(this.$pointModel)) {
				this.$pointModel = new $tab_StoryPointModel(this, storyPoint.storyPointId);
			}
			this.$pointModel.update(storyPoint, context);
		}
	}, $tab_Model);
	ss.initClass($tab_StoryPointsPresModelCache, $asm, {
		hasStoryPoint: function StoryPointsPresModelCache$HasStoryPoint(storyPointID) {
			return this.$storyPointCache.has(storyPointID.toString());
		},
		getStoryPoint: function StoryPointsPresModelCache$GetStoryPoint(storyPointID) {
			var record = this.$storyPointCache.get(storyPointID.toString());
			return record.get_$storyPoint();
		},
		addStoryPoint: function StoryPointsPresModelCache$AddStoryPoint(storyPointID, storyPM) {
			this.$storyPointCache.add(storyPointID.toString(), new $tab_$StoryCacheRecord(storyPM));
		},
		$cacheStoryPointPresModelIfApplicable: function StoryPointsPresModelCache$CacheStoryPointPresModelIfApplicable(args) {
			var command = args.get_worldUpdateCommand();
			var appModel = args.get_applicationPresModel();
			var sheetChanged = args.get_sheetChanged();
			ss.Debug.assert(ss.isValue(command) && ss.isValue(appModel), "Can't process, input is empty");
			if (this.$shouldClearCacheDispose(appModel, sheetChanged)) {
				this.$clearCache();
			}
			if (!$tab_StoryPointsPresModelCache.$shouldCachePresModel(appModel)) {
				return;
			}
			if (!_.contains($tab_StoryPointsPresModelCache.$commandsToCache.value(), command.commandName)) {
				return;
			}
			var storyPoint = $tab_StoryPointsPresModelCache.$extractStoryPoint(appModel);
			if (ss.isNullOrUndefined(storyPoint)) {
				return;
			}
			var currentStoryPointId = storyPoint.storyPointId.toString();
			this.$storyPointCache.add(currentStoryPointId, new $tab_$StoryCacheRecord(storyPoint));
		},
		$shouldClearCacheDispose: function StoryPointsPresModelCache$ShouldClearCacheDispose(appModel, sheetChanged) {
			if ($tab_StoryPointsPresModelCache.$isEmptyModel(appModel)) {
				return false;
			}
			if (!appModel.workbookPresModel.dashboardPresModel.isStory || sheetChanged) {
				return true;
			}
			return false;
		},
		$clearCache: function StoryPointsPresModelCache$ClearCache() {
			this.$storyPointCache.clear();
			$tab_StoryPointsPresModelCache.$bootstrapRecord = null;
		},
		dispose: function StoryPointsPresModelCache$Dispose() {
			this.$clearCache();
			$tab_WorldUpdateInterceptor.get().remove_onCommandResponse(ss.mkdel(this, this.$cacheStoryPointPresModelIfApplicable));
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_StoryState, $asm, {
		get_isStory: function StoryState$get_IsStory() {
			return this.$1$IsStoryField;
		},
		set_isStory: function StoryState$set_IsStory(value) {
			this.$1$IsStoryField = value;
		},
		get_storyPointId: function StoryState$get_StoryPointId() {
			return this.$1$StoryPointIdField;
		},
		set_storyPointId: function StoryState$set_StoryPointId(value) {
			this.$1$StoryPointIdField = value;
		},
		get_sheetName: function StoryState$get_SheetName() {
			return this.$1$SheetNameField;
		},
		set_sheetName: function StoryState$set_SheetName(value) {
			this.$1$SheetNameField = value;
		}
	});
	ss.initClass($tab_StructuredMeasureModel, $asm, {
		get_instanceType: function StructuredMeasureModel$get_InstanceType() {
			return 'structuredMeasure';
		},
		get_canHaveChildren: function StructuredMeasureModel$get_CanHaveChildren() {
			return true;
		},
		get_measures: function StructuredMeasureModel$get_Measures() {
			return this.$4$MeasuresField;
		},
		set_measures: function StructuredMeasureModel$set_Measures(value) {
			this.$4$MeasuresField = value;
		},
		update$1: function StructuredMeasureModel$Update(pm, newMeasures) {
			this.swapAndCopyPresModel(pm);
			this.set_measures(newMeasures);
		}
	}, $tab_FieldColumnModel);
	ss.initClass($tab_StructuredMeasureModelFactory, $asm, {});
	ss.initClass($tab_StyledBoxModel, $asm, {
		add_styleUpdated: function StyledBoxModel$add_StyleUpdated(value) {
			this.$2$StyleUpdatedField = ss.delegateCombine(this.$2$StyleUpdatedField, value);
		},
		remove_styleUpdated: function StyledBoxModel$remove_StyleUpdated(value) {
			this.$2$StyleUpdatedField = ss.delegateRemove(this.$2$StyleUpdatedField, value);
		},
		get_styledBoxPresModel: function StyledBoxModel$get_StyledBoxPresModel() {
			return ss.coalesce(this.pm, new Object());
		},
		get_hasFill: function StyledBoxModel$get_HasFill() {
			return ss.coalesce(this.get_styledBoxPresModel().hasFill, false);
		},
		get_fillColor: function StyledBoxModel$get_FillColor() {
			return ss.coalesce(this.get_styledBoxPresModel().fillColor, 'rgba(0, 0, 0, 0)');
		},
		get_margin: function StyledBoxModel$get_Margin() {
			return this.$margins.get_defaultValue();
		},
		get_marginTop: function StyledBoxModel$get_MarginTop() {
			return this.$margins.get_topValue();
		},
		get_marginLeft: function StyledBoxModel$get_MarginLeft() {
			return this.$margins.get_leftValue();
		},
		get_marginBottom: function StyledBoxModel$get_MarginBottom() {
			return this.$margins.get_bottomValue();
		},
		get_marginRight: function StyledBoxModel$get_MarginRight() {
			return this.$margins.get_rightValue();
		},
		get_marginDefinition: function StyledBoxModel$get_MarginDefinition() {
			return new $tab_MarginDefinition.$ctor1(this.get_styledBoxPresModel());
		},
		get_padding: function StyledBoxModel$get_Padding() {
			return this.$padding.get_defaultValue();
		},
		get_paddingTop: function StyledBoxModel$get_PaddingTop() {
			return this.$padding.get_topValue();
		},
		get_paddingLeft: function StyledBoxModel$get_PaddingLeft() {
			return this.$padding.get_leftValue();
		},
		get_paddingBottom: function StyledBoxModel$get_PaddingBottom() {
			return this.$padding.get_bottomValue();
		},
		get_paddingRight: function StyledBoxModel$get_PaddingRight() {
			return this.$padding.get_rightValue();
		},
		get_paddingDefinition: function StyledBoxModel$get_PaddingDefinition() {
			return new $tab_PaddingDefinition.$ctor1(this.get_styledBoxPresModel());
		},
		get_borderStyle: function StyledBoxModel$get_BorderStyle() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyle, 'bs-none');
		},
		get_borderStyleTop: function StyledBoxModel$get_BorderStyleTop() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyleTop, this.get_borderStyle());
		},
		get_borderStyleLeft: function StyledBoxModel$get_BorderStyleLeft() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyleLeft, this.get_borderStyle());
		},
		get_borderStyleBottom: function StyledBoxModel$get_BorderStyleBottom() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyleBottom, this.get_borderStyle());
		},
		get_borderStyleRight: function StyledBoxModel$get_BorderStyleRight() {
			return ss.coalesce(this.get_styledBoxPresModel().borderStyleRight, this.get_borderStyle());
		},
		get_borderColor: function StyledBoxModel$get_BorderColor() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColor, 'rgba(0, 0, 0, 0)');
		},
		get_borderColorTop: function StyledBoxModel$get_BorderColorTop() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColorTop, this.get_borderColor());
		},
		get_borderColorLeft: function StyledBoxModel$get_BorderColorLeft() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColorLeft, this.get_borderColor());
		},
		get_borderColorBottom: function StyledBoxModel$get_BorderColorBottom() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColorBottom, this.get_borderColor());
		},
		get_borderColorRight: function StyledBoxModel$get_BorderColorRight() {
			return ss.coalesce(this.get_styledBoxPresModel().borderColorRight, this.get_borderColor());
		},
		get_borderWidth: function StyledBoxModel$get_BorderWidth() {
			return ss.coalesce(this.get_styledBoxPresModel().uw, 0);
		},
		get_borderWidthTop: function StyledBoxModel$get_BorderWidthTop() {
			return ss.coalesce(this.get_styledBoxPresModel().uwt, this.get_borderWidth());
		},
		get_borderWidthLeft: function StyledBoxModel$get_BorderWidthLeft() {
			return ss.coalesce(this.get_styledBoxPresModel().uwl, this.get_borderWidth());
		},
		get_borderWidthBottom: function StyledBoxModel$get_BorderWidthBottom() {
			return ss.coalesce(this.get_styledBoxPresModel().uwb, this.get_borderWidth());
		},
		get_borderWidthRight: function StyledBoxModel$get_BorderWidthRight() {
			return ss.coalesce(this.get_styledBoxPresModel().uwr, this.get_borderWidth());
		},
		get_border: function StyledBoxModel$get_Border() {
			return new $tab_BorderDefinition(this.get_borderWidth(), this.get_borderStyle(), this.get_borderColor(), 0);
		},
		get_borderTop: function StyledBoxModel$get_BorderTop() {
			return new $tab_BorderDefinition(this.get_borderWidthTop(), this.get_borderStyleTop(), this.get_borderColorTop(), 1);
		},
		get_borderLeft: function StyledBoxModel$get_BorderLeft() {
			return new $tab_BorderDefinition(this.get_borderWidthLeft(), this.get_borderStyleLeft(), this.get_borderColorLeft(), 2);
		},
		get_borderBottom: function StyledBoxModel$get_BorderBottom() {
			return new $tab_BorderDefinition(this.get_borderWidthBottom(), this.get_borderStyleBottom(), this.get_borderColorBottom(), 4);
		},
		get_borderRight: function StyledBoxModel$get_BorderRight() {
			return new $tab_BorderDefinition(this.get_borderWidthRight(), this.get_borderStyleRight(), this.get_borderColorRight(), 3);
		},
		update: function StyledBoxModel$Update(newModel, context) {
			if (this.isNewPresModelSameAsOld(newModel)) {
				return;
			}
			this.pm = newModel;
			this.$padding = new $tab_PaddingDefinition.$ctor1(this.get_styledBoxPresModel());
			this.$margins = new $tab_MarginDefinition.$ctor1(this.get_styledBoxPresModel());
			this.raiseEvent(this.$2$StyleUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_TabAnimLoader, $asm, {});
	ss.initClass($tab_TabbedAuthenticationDialogCommands, $asm, {});
	ss.initClass($tab_TableCalcIdentifierModel, $asm, {
		get_nestingLevel: function TableCalcIdentifierModel$get_NestingLevel() {
			return this.$nestingLevel;
		},
		get_fieldName: function TableCalcIdentifierModel$get_FieldName() {
			return this.$fieldName;
		},
		update: function TableCalcIdentifierModel$Update(presModel) {
			if (ss.isNullOrUndefined(presModel)) {
				this.$nestingLevel = 'primary';
				this.$fieldName = '';
				return;
			}
			this.$nestingLevel = presModel.calcNestingLevel;
			this.$fieldName = presModel.fn;
		}
	});
	ss.initClass($tab_TableCalcModel, $asm, {
		add_modelUpdated: function TableCalcModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function TableCalcModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		get_$tableCalcPresModel: function TableCalcModel$get_TableCalcPresModel() {
			return this.pm;
		},
		get_hasTableCalc: function TableCalcModel$get_HasTableCalc() {
			return ss.isValue(this.pm);
		},
		get_tableCalcTypeWidgetState: function TableCalcModel$get_TableCalcTypeWidgetState() {
			return this.get_$tableCalcPresModel().tableCalcTypeState;
		},
		get_tableCalcType: function TableCalcModel$get_TableCalcType() {
			return (this.get_hasTableCalc() ? this.get_tableCalcTypeValues()[this.get_tableCalcTypeIndex()] : 'none');
		},
		get_tableCalcTypeIndex: function TableCalcModel$get_TableCalcTypeIndex() {
			return this.get_$tableCalcPresModel().tableCalcTypeIndex;
		},
		get_tableCalcTypeCaptions: function TableCalcModel$get_TableCalcTypeCaptions() {
			return this.get_$tableCalcPresModel().tableCalcTypeCaptions;
		},
		get_tableCalcTypeValues: function TableCalcModel$get_TableCalcTypeValues() {
			return this.get_$tableCalcPresModel().tableCalcTypeValues;
		},
		get_typeSpecificTableCalcModel: function TableCalcModel$get_TypeSpecificTableCalcModel() {
			return this.$typeSpecificTableCalcModel;
		},
		get_tableCalcOrderingModel: function TableCalcModel$get_TableCalcOrderingModel() {
			return this.$tableCalcOrderingModel;
		},
		get_tableCalcIdentifier: function TableCalcModel$get_TableCalcIdentifier() {
			return this.$2$TableCalcIdentifierField;
		},
		set_tableCalcIdentifier: function TableCalcModel$set_TableCalcIdentifier(value) {
			this.$2$TableCalcIdentifierField = value;
		},
		update: function TableCalcModel$Update(deltaPresModel, context) {
			var deltaTableCalcPresModel = deltaPresModel;
			if (this.isNewPresModelSameAsOld(deltaTableCalcPresModel)) {
				return;
			}
			this.swapAndCopyPresModel(deltaTableCalcPresModel);
			if (this.get_hasTableCalc()) {
				this.get_tableCalcIdentifier().update(deltaTableCalcPresModel.tableCalcIdentifier);
				this.$tableCalcOrderingModel.update(deltaTableCalcPresModel.tableCalcOrderingPresModel, context);
				this.$createTypeSpecificTableCalcModel(context);
			}
			else {
				this.get_tableCalcIdentifier().update(null);
				this.$tableCalcOrderingModel.update(null, context);
			}
			this.raiseEvent(this.$2$ModelUpdatedField, context);
		},
		$createTypeSpecificTableCalcModel: function TableCalcModel$CreateTypeSpecificTableCalcModel(context) {
			var modelType = null;
			var holderFieldName = null;
			switch (this.get_tableCalcType()) {
				case 'diff':
				case 'pct-diff':
				case 'pct-value': {
					modelType = $tab_DifferenceTableCalcModel;
					holderFieldName = 'differenceTableCalcPresModel'.toString();
					break;
				}
				case 'pct-total': {
					modelType = $tab_PercentTotalTableCalcModel;
					holderFieldName = 'percentTotalTableCalcPresModel'.toString();
					break;
				}
				case 'rank':
				case 'pct-rank': {
					modelType = $tab_RankTableCalcModel;
					holderFieldName = 'rankTableCalcPresModel'.toString();
					break;
				}
				case 'cumulative': {
					modelType = $tab_CumulativeTableCalcModel;
					holderFieldName = 'cumulativeTableCalcPresModel'.toString();
					break;
				}
				case 'window': {
					modelType = $tab_WindowTableCalcModel;
					holderFieldName = 'windowTableCalcPresModel'.toString();
					break;
				}
				case 'custom': {
					modelType = $tab_CustomTableCalcModel;
					holderFieldName = 'customTableCalcPresModel'.toString();
					break;
				}
				default: {
					tab.Logger.lazyGetLogger($tab_TableCalcModel).warn('%s is not a supported table calc type', [this.get_tableCalcType()]);
					break;
				}
			}
			if (ss.isNullOrUndefined(modelType)) {
				this.$typeSpecificTableCalcModel = null;
				return;
			}
			if (ss.isNullOrUndefined(this.$typeSpecificTableCalcModel) || !ss.referenceEquals(ss.getInstanceType(this.$typeSpecificTableCalcModel), modelType)) {
				this.$typeSpecificTableCalcModel = new modelType(this);
			}
			this.$typeSpecificTableCalcModel.update($tab_TableCalcModel.$getTypeSpecificTableCalcPresModel(this.get_$tableCalcPresModel(), holderFieldName), context);
		}
	}, $tab_Model);
	ss.initClass($tab_TableCalcOrderingModel, $asm, {
		add_modelUpdated: function TableCalcOrderingModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function TableCalcOrderingModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		get_orderingTypeValues: function TableCalcOrderingModel$get_OrderingTypeValues() {
			return this.get_ordering().orderingTypeValues;
		},
		get_orderingTypeIndex: function TableCalcOrderingModel$get_OrderingTypeIndex() {
			return this.get_ordering().orderingTypeIndex;
		},
		get_orderingTypeCaptions: function TableCalcOrderingModel$get_OrderingTypeCaptions() {
			return this.get_ordering().orderingTypeCaptions;
		},
		get_addressingIndexes: function TableCalcOrderingModel$get_AddressingIndexes() {
			return this.get_ordering().addressingIndices;
		},
		get_addressingInvalidIndexes: function TableCalcOrderingModel$get_AddressingInvalidIndexes() {
			return this.get_ordering().addressingInvalidIndices;
		},
		get_addressingCaptions: function TableCalcOrderingModel$get_AddressingCaptions() {
			return this.get_ordering().addressingCaptions;
		},
		get_addressingValues: function TableCalcOrderingModel$get_AddressingValues() {
			return this.get_ordering().addressingValues;
		},
		get_addressingState: function TableCalcOrderingModel$get_AddressingState() {
			return this.get_ordering().addressingState;
		},
		get_atTheLevelState: function TableCalcOrderingModel$get_AtTheLevelState() {
			return this.get_ordering().atTheLevelState;
		},
		get_atTheLevelCaptions: function TableCalcOrderingModel$get_AtTheLevelCaptions() {
			return this.get_ordering().atTheLevelCaptions;
		},
		get_atTheLevelValues: function TableCalcOrderingModel$get_AtTheLevelValues() {
			return this.get_ordering().atTheLevelValues;
		},
		get_atTheLevelIndex: function TableCalcOrderingModel$get_AtTheLevelIndex() {
			return this.get_ordering().atTheLevelIndex;
		},
		get_isAtTheLevelFieldInvalid: function TableCalcOrderingModel$get_IsAtTheLevelFieldInvalid() {
			return this.get_ordering().atTheLevelFieldIsInvalid;
		},
		get_atTheLevelInvalidFieldCaption: function TableCalcOrderingModel$get_AtTheLevelInvalidFieldCaption() {
			return this.get_ordering().atTheLevelInvalidFieldCaption;
		},
		get_atTheLevelSpecialCaption: function TableCalcOrderingModel$get_AtTheLevelSpecialCaption() {
			return this.get_ordering().atTheLevelSpecialCaption;
		},
		get_atTheLevelSpecialValue: function TableCalcOrderingModel$get_AtTheLevelSpecialValue() {
			return '';
		},
		get_atTheLevelValue: function TableCalcOrderingModel$get_AtTheLevelValue() {
			return ((this.get_atTheLevelIndex() === -1) ? this.get_atTheLevelSpecialValue() : this.get_atTheLevelValues()[this.get_atTheLevelIndex()]);
		},
		get_restartEveryState: function TableCalcOrderingModel$get_RestartEveryState() {
			return this.get_ordering().restartEveryState;
		},
		get_restartEveryCaptions: function TableCalcOrderingModel$get_RestartEveryCaptions() {
			return this.get_ordering().restartEveryCaptions;
		},
		get_restartEveryIndex: function TableCalcOrderingModel$get_RestartEveryIndex() {
			return this.get_ordering().restartEveryIndex;
		},
		get_isRestartEveryFieldInvalid: function TableCalcOrderingModel$get_IsRestartEveryFieldInvalid() {
			return this.get_ordering().restartEveryFieldIsInvalid;
		},
		get_restartEveryValues: function TableCalcOrderingModel$get_RestartEveryValues() {
			return this.get_ordering().restartEveryValues;
		},
		get_restartEverySpecialCaption: function TableCalcOrderingModel$get_RestartEverySpecialCaption() {
			return this.get_ordering().restartEverySpecialCaption;
		},
		get_restartEverySpecialValue: function TableCalcOrderingModel$get_RestartEverySpecialValue() {
			return '';
		},
		get_restartEveryValue: function TableCalcOrderingModel$get_RestartEveryValue() {
			return ((this.get_restartEveryIndex() === -1) ? this.get_restartEverySpecialValue() : this.get_restartEveryValues()[this.get_restartEveryIndex()]);
		},
		get_sortState: function TableCalcOrderingModel$get_SortState() {
			return this.get_ordering().sortState;
		},
		get_sortAggState: function TableCalcOrderingModel$get_SortAggState() {
			return this.get_ordering().sortAggState;
		},
		get_sortModeIsAuto: function TableCalcOrderingModel$get_SortModeIsAuto() {
			return this.get_ordering().sortModeIsAuto;
		},
		get_sortModeCaption: function TableCalcOrderingModel$get_SortModeCaption() {
			return this.get_ordering().sortModeCaption;
		},
		get_sortField: function TableCalcOrderingModel$get_SortField() {
			if (this.get_ordering().sortModeIsAuto) {
				return null;
			}
			ss.Debug.assert(this.get_ordering().sortFieldIndex >= 0 && this.get_ordering().sortFieldIndex < this.get_ordering().sortFieldValues.length, 'SortFieldIndex not a valid index into SortFieldValues');
			return this.get_ordering().sortFieldValues[this.get_ordering().sortFieldIndex];
		},
		get_isSortFieldInvalid: function TableCalcOrderingModel$get_IsSortFieldInvalid() {
			return this.get_ordering().sortFieldIsInvalid;
		},
		get_sortFieldCaptions: function TableCalcOrderingModel$get_SortFieldCaptions() {
			return this.get_ordering().sortFieldCaptions;
		},
		get_sortFieldIndex: function TableCalcOrderingModel$get_SortFieldIndex() {
			return this.get_ordering().sortFieldIndex;
		},
		get_sortFieldValues: function TableCalcOrderingModel$get_SortFieldValues() {
			return this.get_ordering().sortFieldValues;
		},
		get_sortAgg: function TableCalcOrderingModel$get_SortAgg() {
			if (this.get_ordering().sortModeIsAuto) {
				return null;
			}
			ss.Debug.assert(this.get_ordering().sortFieldIndex >= 0 && this.get_ordering().sortFieldIndex < this.get_ordering().sortFieldValues.length, 'SortAggIndex not a valid index into SortAggValues');
			return this.get_ordering().sortAggValues[this.get_ordering().sortAggIndvValues];
		},
		get_sortAggCaptions: function TableCalcOrderingModel$get_SortAggCaptions() {
			return this.get_ordering().sortAggCaptions;
		},
		get_sortAggIndex: function TableCalcOrderingModel$get_SortAggIndex() {
			return this.get_ordering().sortAggIndvValues;
		},
		get_sortAggValues: function TableCalcOrderingModel$get_SortAggValues() {
			return this.get_ordering().sortAggValues;
		},
		get_sortDirectionValues: function TableCalcOrderingModel$get_SortDirectionValues() {
			return this.get_ordering().sortDirectionValues;
		},
		get_sortDirectionIndex: function TableCalcOrderingModel$get_SortDirectionIndex() {
			return this.get_ordering().sortDirectionIndex;
		},
		get_sortDirectionCaptions: function TableCalcOrderingModel$get_SortDirectionCaptions() {
			return this.get_ordering().sortDirectionCaptions;
		},
		get_ordering: function TableCalcOrderingModel$get_Ordering() {
			return (ss.isValue(this.pm) ? this.pm : null);
		},
		get_hasOrdering: function TableCalcOrderingModel$get_HasOrdering() {
			return ss.isValue(this.get_ordering());
		},
		get_tableCalcIdentifier: function TableCalcOrderingModel$get_TableCalcIdentifier() {
			return (ss.isNullOrUndefined(this.parent) ? new $tab_TableCalcIdentifierModel(null) : this.parent.get_tableCalcIdentifier());
		},
		update: function TableCalcOrderingModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$2$ModelUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_TableCalcReferenceModel, $asm, {
		add_modelUpdated: function TableCalcReferenceModel$add_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
		},
		remove_modelUpdated: function TableCalcReferenceModel$remove_ModelUpdated(value) {
			this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
		},
		get_relativeValues: function TableCalcReferenceModel$get_RelativeValues() {
			return this.pm.relativeValues;
		},
		get_relativeCaptions: function TableCalcReferenceModel$get_RelativeCaptions() {
			return this.pm.relativeCaptions;
		},
		get_fixedValues: function TableCalcReferenceModel$get_FixedValues() {
			return this.pm.fixedValues;
		},
		get_fixedCaptions: function TableCalcReferenceModel$get_FixedCaptions() {
			return this.pm.fixedCaptions;
		},
		get_paramValues: function TableCalcReferenceModel$get_ParamValues() {
			return this.pm.paramValues;
		},
		get_paramCaptions: function TableCalcReferenceModel$get_ParamCaptions() {
			return this.pm.paramCaptions;
		},
		get_referenceOptionsSets: function TableCalcReferenceModel$get_ReferenceOptionsSets() {
			return this.pm.referenceOptionsSets;
		},
		get_selectionIndex: function TableCalcReferenceModel$get_SelectionIndex() {
			return this.pm.referenceIndex;
		},
		get_referenceWidgetState: function TableCalcReferenceModel$get_ReferenceWidgetState() {
			return this.pm.referenceOptionsState;
		},
		get_tableCalcIdentifier: function TableCalcReferenceModel$get_TableCalcIdentifier() {
			var typeSpecificParentModel = this.parent;
			return (ss.isNullOrUndefined(typeSpecificParentModel) ? new $tab_TableCalcIdentifierModel(null) : typeSpecificParentModel.get_tableCalcIdentifier());
		},
		update: function TableCalcReferenceModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$2$ModelUpdatedField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_TabResources, $asm, {});
	ss.initClass($tab_TelemetryUtils, $asm, {});
	ss.initClass($tab_TextRegionModel, $asm, {
		add_newText: function TextRegionModel$add_NewText(value) {
			this.$2$NewTextField = ss.delegateCombine(this.$2$NewTextField, value);
		},
		remove_newText: function TextRegionModel$remove_NewText(value) {
			this.$2$NewTextField = ss.delegateRemove(this.$2$NewTextField, value);
		},
		get_hAlign: function TextRegionModel$get_HAlign() {
			return this.pm.halign;
		},
		get_html: function TextRegionModel$get_Html() {
			return this.pm.html;
		},
		get_orientation: function TextRegionModel$get_Orientation() {
			return this.pm.orientation;
		},
		get_styledBox: function TextRegionModel$get_StyledBox() {
			return this.pm.styledBox;
		},
		get_vAlign: function TextRegionModel$get_VAlign() {
			return this.pm.valign;
		},
		get_sheetName: function TextRegionModel$get_SheetName() {
			return this.pm.worksheet;
		},
		update: function TextRegionModel$Update(textRegionPresModel, context) {
			$tab_FontNotificationUtil.notifyFontsFromTextRegionPresModel(textRegionPresModel);
			this.simpleSwapToUpdate(textRegionPresModel, this.$2$NewTextField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_ToggleINDJoinSemanticsCmd, $asm, {
		invoke: function ToggleINDJoinSemanticsCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'toggle-ind-join-semantics' }, this.cmdParams));
		},
		validateInvokeParams: function ToggleINDJoinSemanticsCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ToggleINDJoinSemanticsCmd$Response]));
	ss.initClass($tab_ToggleINDJoinSemanticsCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ToggleINDJoinSemanticsWrapperCmd, $asm, {
		validateInvokeParams: function ToggleINDJoinSemanticsWrapperCmd$ValidateInvokeParams() {
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_ToggleINDJoinSemanticsWrapperCmd$Response]));
	ss.initClass($tab_ToggleINDJoinSemanticsWrapperCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ToolbarModel, $asm, {
		add_newToolbar: function ToolbarModel$add_NewToolbar(value) {
			this.$2$NewToolbarField = ss.delegateCombine(this.$2$NewToolbarField, value);
		},
		remove_newToolbar: function ToolbarModel$remove_NewToolbar(value) {
			this.$2$NewToolbarField = ss.delegateRemove(this.$2$NewToolbarField, value);
		},
		get_vizCommandItems: function ToolbarModel$get_VizCommandItems() {
			var commands = null;
			if (ss.isValue(this.pm)) {
				var commandsWrapper = $tab_CommandsPresModelWrapper.create(this.pm.vizCommands);
				commands = commandsWrapper.get_commandItems();
			}
			return commands;
		},
		get_nonVizCommandItems: function ToolbarModel$get_NonVizCommandItems() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			var commandsWrapper = $tab_CommandsPresModelWrapper.create(this.pm.nonVizCommands);
			return commandsWrapper.get_commandItems();
		},
		get_legacyMenuItems: function ToolbarModel$get_LegacyMenuItems() {
			return (ss.isNullOrUndefined(this.pm) ? null : this.pm.legacyMenus);
		},
		update: function ToolbarModel$Update(toolbarPresModel, context) {
			if (ss.isValue(toolbarPresModel)) {
				this.simpleSwapToUpdate(toolbarPresModel, this.$2$NewToolbarField, context);
			}
		},
		isLegacyMenuItemEnabled: function ToolbarModel$IsLegacyMenuItemEnabled(name) {
			if (ss.isNullOrUndefined(this.get_legacyMenuItems())) {
				return false;
			}
			var legacyMenuItem = _.find(this.get_legacyMenuItems(), function(item) {
				return item.legacyMenuName === name;
			});
			return ss.isValue(legacyMenuItem) && _.every(legacyMenuItem.legacyMenuStates, function(state) {
				return state !== 'grayed';
			});
		}
	}, $tab_Model);
	ss.initClass($tab_ToolbarServerCommands, $asm, {});
	ss.initClass($tab_TrackingCommandDispatcher, $asm, {
		dispatch: function(TParam, TResponse) {
			return function TrackingCommandDispatcher$Dispatch(cmd) {
				if (!ss.staticEquals(this.$deferredAction, null)) {
					return $.Deferred().reject();
				}
				this.$addCommand(TParam, TResponse).call(this, cmd);
				var deferred = $.Deferred();
				var $t1 = $tab_DefaultCommandDispatcher.get_instance();
				$t1.dispatch(TParam, TResponse).call($t1, cmd).done(function(response) {
					deferred.resolve(response);
				}).fail(function() {
					deferred.reject();
				}).always(ss.mkdel(this, function() {
					this.$removeCommand(TParam, TResponse).call(this, cmd);
				}));
				return deferred;
			};
		},
		deferUntilCommandsComplete: function TrackingCommandDispatcher$DeferUntilCommandsComplete(action) {
			this.$deferredAction = action;
			if (this.$commandList.length === 0) {
				this.$deferredAction();
			}
		},
		$addCommand: function(TParam, TResponse) {
			return function TrackingCommandDispatcher$AddCommand(cmd) {
				this.$commandList.push(cmd);
			};
		},
		$removeCommand: function(TParam, TResponse) {
			return function TrackingCommandDispatcher$RemoveCommand(cmd) {
				ss.remove(this.$commandList, cmd);
				if (this.$commandList.length === 0 && !ss.staticEquals(this.$deferredAction, null)) {
					this.$deferredAction();
				}
			};
		}
	}, null, [$tab_ICommandDispatcher]);
	ss.initClass($tab_Transaction, $asm, {
		get_$transactedItems: function Transaction$get_TransactedItems() {
			return this.$origItems;
		},
		get_transactedChange: function Transaction$get_TransactedChange() {
			return $tab_Transaction.$buildTransactedChange(this.$transactedItems);
		},
		makeMutablePresModel: function Transaction$MakeMutablePresModel(model, noRollback) {
			ss.Debug.assert(!noRollback || ss.isInstanceOfType(model, $tab_FlipboardModel), 'only FlipboardModel should skip rollback');
			var modelPath = model.getPresModelPath();
			for (var $t1 = 0; $t1 < this.$transactedItems.length; $t1++) {
				var item = this.$transactedItems[$t1];
				if (_.isEqual(item.get_$path(), modelPath)) {
					return item.get_$model();
				}
			}
			var newPM = model.getMutableCopyOfPresModel();
			this.$transactedItems.push(new $tab_$TransactionItem(modelPath, newPM));
			if (!noRollback) {
				this.$origItems.push(new $tab_$TransactionItem(modelPath, model.pm));
			}
			return newPM;
		}
	});
	ss.initClass($tab_Transactor, $asm, {
		beginTransaction: function Transactor$BeginTransaction(context) {
			if (ss.isValue(this.$transaction)) {
				throw new ss.Exception('Internal error: nested transaction');
			}
			this.$transaction = new $tab_Transaction(context);
			return this.$transaction;
		},
		rollbackTransaction: function Transactor$RollbackTransaction() {
			this.$transaction = null;
		},
		endTransaction: function Transactor$EndTransaction() {
			ss.Debug.assert(ss.isValue(this.$transaction), 'Calling EndTransction() without transaction in progress');
			var $t1 = ss.getEnumerator(this.$transaction.get_$transactedItems());
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					if (!ss.keyExists(this.$transactedItems, item.get_$path().get_pathAsString())) {
						this.$transactedItems[item.get_$path().get_pathAsString()] = item;
					}
				}
			}
			finally {
				$t1.dispose();
			}
			var change = this.$transaction.get_transactedChange();
			this.$transaction = null;
			return change;
		},
		resetTransactedState: function Transactor$ResetTransactedState() {
			ss.clearKeys(this.$transactedItems);
		},
		rollbackTransactions: function Transactor$RollbackTransactions(context) {
			if (ss.getKeyCount(this.$transactedItems) > 0) {
				$tab_ApplicationModel.get_instance().update($tab_Transaction.$buildTransactedChangeWithoutNotifications(_.values(this.$transactedItems)), context);
			}
		},
		containsTransaction: function Transactor$ContainsTransaction(itemKey) {
			return ss.keyExists(this.$transactedItems, itemKey);
		}
	});
	ss.initClass($tab_TypeInCalculationModel, $asm, {
		get_notificationId: function TypeInCalculationModel$get_NotificationId() {
			return 'doc:type-in-pill-event';
		},
		get_isAdhoc: function TypeInCalculationModel$get_IsAdhoc() {
			return true;
		},
		onNotify: function TypeInCalculationModel$OnNotify(pm, context) {
			this.update(pm, context);
		}
	}, $tab_CalculationModel, [$tab_IHandleNotifications]);
	ss.initClass($tab_UbertipButtonMenuModel, $asm, {
		get_itemCount: function UbertipButtonMenuModel$get_ItemCount() {
			ss.Debug.assert(ss.isValue(this.get_$wrappedCommands().get_commandItems()), '.');
			return this.get_$wrappedCommands().get_commandItems().length;
		},
		get_hasItems: function UbertipButtonMenuModel$get_HasItems() {
			return this.get_itemCount() > 0;
		},
		get_defaultItem: function UbertipButtonMenuModel$get_DefaultItem() {
			return this.get_$wrappedCommands().get_defaultItem();
		},
		get_$wrappedCommands: function UbertipButtonMenuModel$get_WrappedCommands() {
			return $tab_CommandsPresModelWrapper.create(this.get_wrappedCommandItemPresModel().get_commands());
		}
	}, $tab_CommandItemBasedUbertipButtonModel, [$tab_ICommandModel]);
	ss.initClass($tab_UberTipClientCommands, $asm, {});
	ss.initClass($tab_UbertipSerializer, $asm, {});
	ss.initClass($tab_UnionFontFamilyProviderBuilder, $asm, {
		addFontList: function UnionFontFamilyProviderBuilder$AddFontList(fonts) {
			for (var $t1 = 0; $t1 < fonts.length; $t1++) {
				var family = fonts[$t1];
				var $t2 = family.get_fonts();
				for (var $t3 = 0; $t3 < $t2.length; $t3++) {
					var font = $t2[$t3];
					this.$faceToFamilyMapping[font] = family.get_fontGroup();
				}
			}
		},
		toFontFamilyProvider: function UnionFontFamilyProviderBuilder$ToFontFamilyProvider() {
			if (ss.isNullOrUndefined(this.$faceToFamilyMapping)) {
				return new $tab_SimpleFontListProvider.$ctor2([]);
			}
			var fontFamilyList = [];
			var familyToConstructableFamilyMapping = {};
			var $t1 = ss.getEnumerator(Object.keys(this.$faceToFamilyMapping));
			try {
				while ($t1.moveNext()) {
					var font = $t1.current();
					var family = this.$faceToFamilyMapping[font];
					var fontFamily = familyToConstructableFamilyMapping[family.toLowerCase()];
					if (ss.isNullOrUndefined(fontFamily)) {
						fontFamily = new $tab_ConstructableFontFamily(family);
						fontFamilyList.push(fontFamily);
						familyToConstructableFamilyMapping[family.toLowerCase()] = fontFamily;
					}
					fontFamily.addFont(font);
				}
			}
			finally {
				$t1.dispose();
			}
			fontFamilyList = _.sortBy(fontFamilyList, function(f) {
				return f.get_fontGroup().toLowerCase();
			});
			return new $tab_SimpleFontListProvider.$ctor2(fontFamilyList);
		}
	});
	ss.initClass($tab_UpdateAreaAnnotationCmd, $asm, {
		invoke: function UpdateAreaAnnotationCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'update-area-annotation' }, this.cmdParams));
		},
		validateInvokeParams: function UpdateAreaAnnotationCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'uid')) {
				throw new ss.Exception('missing param DocParams.UID');
			}
			if (!ss.keyExists(this.cmdParams, 'regionRect')) {
				throw new ss.Exception('missing param DocParams.RegionRect');
			}
			if (!ss.keyExists(this.cmdParams, 'pageNumber')) {
				throw new ss.Exception('missing param DocParams.PageNumber');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_UpdateAreaAnnotationCmd$Response]));
	ss.initClass($tab_UpdateAreaAnnotationCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_UpdateDataAlertCmd, $asm, {
		invoke: function UpdateDataAlertCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'update-data-alert' }, this.cmdParams));
		},
		validateInvokeParams: function UpdateDataAlertCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'dataAlertConditionOp')) {
				throw new ss.Exception('missing param DocParams.DataAlertConditionOperationType');
			}
			if (!ss.keyExists(this.cmdParams, 'dataAlertThresholdText')) {
				throw new ss.Exception('missing param DocParams.DataAlertThresholdText');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_UpdateDataAlertCmd$Response]));
	ss.initClass($tab_UpdateDataAlertCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
			if (!ss.keyExists(this.$$cmdParams, 'isDataAlertConditionMet')) {
				throw new ss.Exception('missing param DocParams.IsDataAlertConditionMet');
			}
		}
	});
	ss.initClass($tab_UriPathStripper, $asm, {});
	ss.initEnum($tab_UrlStringReplacementOutcome, $asm, { success: 'success', urlConstructionFail: 'urlConstructionFail', notEnoughInfoYet: 'notEnoughInfoYet' }, true);
	ss.initClass($tab_UserFactory, $asm, {});
	ss.initClass($tab_ValidateDataValueCmd, $asm, {
		invoke: function ValidateDataValueCmd$Invoke() {
			return this.invoke$1($tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'validate-data-value' }, this.cmdParams));
		},
		validateInvokeParams: function ValidateDataValueCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'rawDataValueString')) {
				throw new ss.Exception('missing param DocParams.RawDataValueString');
			}
			if (!ss.keyExists(this.cmdParams, 'dataType')) {
				throw new ss.Exception('missing param DocParams.DataType');
			}
		}
	}, ss.makeGenericType($tab_BaseCmd$2, [Object, $tab_ValidateDataValueCmd$Response]));
	ss.initClass($tab_ValidateDataValueCmd$Response, $asm, {
		hasCaptionedValue: function Response$HasCaptionedValue() {
			return ss.keyExists(this.$$cmdParams, 'captionedDataValue');
		},
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_ViewGeometryModel, $asm, {
		update: function ViewGeometryModel$Update(newPresModel) {
			this.pm = newPresModel;
		}
	}, $tab_Model);
	ss.initClass($tab_ViewSelectedDataServerCommands, $asm, {});
	ss.initClass($tab_ViewSession, $asm, {
		get_viewId: function ViewSession$get_ViewId() {
			return this.viewid;
		},
		set_viewId: function ViewSession$set_ViewId(value) {
			if (ss.referenceEquals(this.viewid, value)) {
				return;
			}
			this.viewid = value;
			tab.Log.get(this).debug('Update viewId=%s', [this.viewid]);
		},
		$formatRegionImageURL: function ViewSession$FormatRegionImageURL(sregion) {
			return this.formatViewMethod(this.viewid, 'region') + '?r=' + sregion;
		},
		formatRegionTileURL: function ViewSession$FormatRegionTileURL(tileCacheUrl, r, requestId) {
			if ($tab_ViewSession.canUseTileCacheUrl(tileCacheUrl)) {
				return this.formatTileURL(tileCacheUrl, r, 0, 0, '', requestId);
			}
			return this.$formatRegionImageURL(r) + '&' + requestId;
		},
		$formatLegendRegionImageURL: function ViewSession$FormatLegendRegionImageURL(sregion, fn) {
			var queryStr = '';
			if (!tab.MiscUtil.isNullOrEmpty$3(fn)) {
				queryStr = '&fn=' + encodeURIComponent(fn);
			}
			return this.formatViewMethod(this.viewid, 'region') + '?r=' + sregion + queryStr;
		},
		formatLegendRegionTileURL: function ViewSession$FormatLegendRegionTileURL(tileCacheUrl, r, fn, fnid, requestId) {
			fnid = (ss.isNullOrUndefined(fnid) ? '' : fnid);
			if ($tab_ViewSession.canUseTileCacheUrl(tileCacheUrl)) {
				return this.formatTileURL(tileCacheUrl, r + fnid, 0, 0, fn, requestId);
			}
			return this.$formatLegendRegionImageURL(r, fn) + '&' + requestId;
		},
		formatTileURL: function ViewSession$FormatTileURL(tileCacheUrl, r, tileX, tileY, fn, requestId) {
			if ($tab_ViewSession.canUseTileCacheUrl(tileCacheUrl)) {
				var url = tileCacheUrl;
				var queryStr;
				if (!tab.MiscUtil.isNullOrEmpty$3(fn)) {
					queryStr = '?fn=' + encodeURIComponent(fn) + '&' + requestId;
				}
				else {
					queryStr = '?=' + requestId;
				}
				return ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(ss.replaceAllString(url, '%SESSIONID%', tsConfig.sessionid), '[r]', r), '[x]', tileX.toString()), '[y]', tileY.toString()) + queryStr;
			}
			var viewMethod = this.formatViewMethod(this.viewid, 'tile');
			return viewMethod + '?r=' + r + '&x=' + tileX + '&y=' + tileY + '&' + requestId;
		},
		formatUnderlyingDataURL: function ViewSession$FormatUnderlyingDataURL(selectAtPoint, sourceSheet) {
			var sb = new ss.StringBuilder(this.formatViewMethod(this.viewid, 'viewData'));
			sb.append('?maxrows=200');
			if (ss.isValue(selectAtPoint)) {
				sb.append('&select_x=').append(selectAtPoint.x);
				sb.append('&select_y=').append(selectAtPoint.y);
			}
			if (ss.isValue(sourceSheet)) {
				sb.append('&viz=').append(encodeURIComponent(JSON.stringify(sourceSheet)));
			}
			return sb.toString();
		},
		formatExportCrossTabURL: function ViewSession$FormatExportCrossTabURL(charset) {
			if (ss.isNullOrUndefined(charset)) {
				charset = 'utf8';
			}
			return this.formatViewMethod(this.viewid, 'exportcrosstab') + '?charset=' + charset;
		},
		executeAction: function ViewSession$ExecuteAction(action, successCallback, onFailure) {
			if (action.get_commandType() === 9) {
				this.executeCommand(action);
			}
			else {
				var c = $tab_CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'run-action' }, action.command.commandParams);
				$tab_ServerCommands.executeServerCommand(c, 'immediately', successCallback, onFailure);
			}
		},
		executeCommand: function ViewSession$ExecuteCommand(command) {
			tab.Log.get(this).debug('Execute command: %o', [command]);
			if (ss.isNullOrUndefined(command)) {
				return;
			}
			switch (command.get_commandType()) {
				case 9: {
					var urlAction = {};
					urlAction.url = command.command.commandParams.url;
					urlAction.target = command.command.commandParams.target;
					$tab_ActionUtils.launchActionUrls([urlAction], this.get_commonDialogProvider());
					break;
				}
				case 7: {
					var p = null;
					var sourceSheetVisualID = null;
					if (ss.isValue(command.command) && ss.isValue(command.command.commandParams)) {
						if (ss.keyExists(command.command.commandParams, 'selectAtPoint')) {
							var ppm = JSON.parse(command.command.commandParams['selectAtPoint']);
							p = tab.PointUtil.fromPresModel(ppm);
						}
						if (ss.keyExists(command.command.commandParams, 'visualId')) {
							sourceSheetVisualID = command.command.commandParams['visualId'];
						}
					}
					window.open(this.formatUnderlyingDataURL(p, sourceSheetVisualID), this.getWindow('vud'), 'scrollbars,resizable');
					break;
				}
				case 1:
				case 2:
				case 4:
				case 5:
				case 6:
				case 11:
				case 12:
				case 10:
				case 13: {
					tab.Log.get(this).debug('Command should probably be called directly or handled by UberTipClientCommands.ExecuteUbertipCommand : %o', [command]);
					break;
				}
				default: {
					tab.Log.get(this).debug('Unknown command type: %o', [command]);
					break;
				}
			}
		}
	}, $tab_SheetSession, [$tab_IVizqlServerRequestHandler]);
	ss.initClass($tab_VisualColumnHelpers, $asm, {});
	ss.initClass($tab_VisualListModel, $asm, {
		add_newVisualList: function VisualListModel$add_NewVisualList(value) {
			this.$2$NewVisualListField = ss.delegateCombine(this.$2$NewVisualListField, value);
		},
		remove_newVisualList: function VisualListModel$remove_NewVisualList(value) {
			this.$2$NewVisualListField = ss.delegateRemove(this.$2$NewVisualListField, value);
		},
		get_visualListPresModel: function VisualListModel$get_VisualListPresModel() {
			return this.pm;
		},
		get_groupItemNodes: function VisualListModel$get_GroupItemNodes() {
			if (ss.isNullOrUndefined(this.$drawGroups)) {
				this.$drawGroups = [];
				var $t1 = this.get_visualListPresModel().drawItems;
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var drawItem = $t1[$t2];
					if (drawItem.type === 'draw-group') {
						this.$drawGroups.push(drawItem);
					}
				}
			}
			return this.$drawGroups;
		},
		update: function VisualListModel$Update(visualListPresModel, context) {
			$tab_FontNotificationUtil.notifyFontsFromVisualListPresModel(visualListPresModel);
			if (this.isNewPresModelSameAsOld(visualListPresModel)) {
				return;
			}
			this.$drawGroups = null;
			this.swapAndCopyPresModel(visualListPresModel);
			this.raiseEvent(this.$2$NewVisualListField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_VisualModel, $asm, {
		add_newVisual: function VisualModel$add_NewVisual(value) {
			this.$2$NewVisualField = ss.delegateCombine(this.$2$NewVisualField, value);
		},
		remove_newVisual: function VisualModel$remove_NewVisual(value) {
			this.$2$NewVisualField = ss.delegateRemove(this.$2$NewVisualField, value);
		},
		add_newHiddenTuples: function VisualModel$add_NewHiddenTuples(value) {
			this.$2$NewHiddenTuplesField = ss.delegateCombine(this.$2$NewHiddenTuplesField, value);
		},
		remove_newHiddenTuples: function VisualModel$remove_NewHiddenTuples(value) {
			this.$2$NewHiddenTuplesField = ss.delegateRemove(this.$2$NewHiddenTuplesField, value);
		},
		add_newFilteredTuples: function VisualModel$add_NewFilteredTuples(value) {
			this.$2$NewFilteredTuplesField = ss.delegateCombine(this.$2$NewFilteredTuplesField, value);
		},
		remove_newFilteredTuples: function VisualModel$remove_NewFilteredTuples(value) {
			this.$2$NewFilteredTuplesField = ss.delegateRemove(this.$2$NewFilteredTuplesField, value);
		},
		add_urlInfoCacheChange: function VisualModel$add_UrlInfoCacheChange(value) {
			this.$2$UrlInfoCacheChangeField = ss.delegateCombine(this.$2$UrlInfoCacheChangeField, value);
		},
		remove_urlInfoCacheChange: function VisualModel$remove_UrlInfoCacheChange(value) {
			this.$2$UrlInfoCacheChangeField = ss.delegateRemove(this.$2$UrlInfoCacheChangeField, value);
		},
		add_visualValidStateChanged: function VisualModel$add_VisualValidStateChanged(value) {
			this.$2$VisualValidStateChangedField = ss.delegateCombine(this.$2$VisualValidStateChangedField, value);
		},
		remove_visualValidStateChanged: function VisualModel$remove_VisualValidStateChanged(value) {
			this.$2$VisualValidStateChangedField = ss.delegateRemove(this.$2$VisualValidStateChangedField, value);
		},
		add_brushingFromActionChanged: function VisualModel$add_BrushingFromActionChanged(value) {
			this.$2$BrushingFromActionChangedField = ss.delegateCombine(this.$2$BrushingFromActionChangedField, value);
		},
		remove_brushingFromActionChanged: function VisualModel$remove_BrushingFromActionChanged(value) {
			this.$2$BrushingFromActionChangedField = ss.delegateRemove(this.$2$BrushingFromActionChangedField, value);
		},
		add_colorDictionaryChanged: function VisualModel$add_ColorDictionaryChanged(value) {
			this.$2$ColorDictionaryChangedField = ss.delegateCombine(this.$2$ColorDictionaryChangedField, value);
		},
		remove_colorDictionaryChanged: function VisualModel$remove_ColorDictionaryChanged(value) {
			this.$2$ColorDictionaryChangedField = ss.delegateRemove(this.$2$ColorDictionaryChangedField, value);
		},
		add_vizNavigationSettingChanged: function VisualModel$add_VizNavigationSettingChanged(value) {
			this.$2$VizNavigationSettingChangedField = ss.delegateCombine(this.$2$VizNavigationSettingChangedField, value);
		},
		remove_vizNavigationSettingChanged: function VisualModel$remove_VizNavigationSettingChanged(value) {
			this.$2$VizNavigationSettingChangedField = ss.delegateRemove(this.$2$VizNavigationSettingChangedField, value);
		},
		add_emptyHighlightFogAllChanged: function VisualModel$add_EmptyHighlightFogAllChanged(value) {
			this.$2$EmptyHighlightFogAllChangedField = ss.delegateCombine(this.$2$EmptyHighlightFogAllChangedField, value);
		},
		remove_emptyHighlightFogAllChanged: function VisualModel$remove_EmptyHighlightFogAllChanged(value) {
			this.$2$EmptyHighlightFogAllChangedField = ss.delegateRemove(this.$2$EmptyHighlightFogAllChangedField, value);
		},
		add_annotationHitBoxesChanged: function VisualModel$add_AnnotationHitBoxesChanged(value) {
			this.$2$AnnotationHitBoxesChangedField = ss.delegateCombine(this.$2$AnnotationHitBoxesChangedField, value);
		},
		remove_annotationHitBoxesChanged: function VisualModel$remove_AnnotationHitBoxesChanged(value) {
			this.$2$AnnotationHitBoxesChangedField = ss.delegateRemove(this.$2$AnnotationHitBoxesChangedField, value);
		},
		get_totalMarks: function VisualModel$get_TotalMarks() {
			return (tab.FeatureFlags.isEnabled('WebAddStatusBar') ? this.pm.totalMarks : 0);
		},
		get_shouldShowStats: function VisualModel$get_ShouldShowStats() {
			return (tab.FeatureFlags.isEnabled('WebAddStatusBar') ? this.pm.shouldShowStats : false);
		},
		get_selectedMarks: function VisualModel$get_SelectedMarks() {
			return (tab.FeatureFlags.isEnabled('WebAddStatusBar') ? this.pm.selectedMarks : 0);
		},
		get_numberOfRows: function VisualModel$get_NumberOfRows() {
			return (tab.FeatureFlags.isEnabled('WebAddStatusBar') ? this.pm.numberOfRows : 0);
		},
		get_numberOfColumns: function VisualModel$get_NumberOfColumns() {
			return (tab.FeatureFlags.isEnabled('WebAddStatusBar') ? this.pm.numberOfColumns : 0);
		},
		get_lastComputedCalculation: function VisualModel$get_LastComputedCalculation() {
			return (tab.FeatureFlags.isEnabled('WebAddStatusBar') ? this.pm.lastComputedCalculation : null);
		},
		get_worksheetName: function VisualModel$get_WorksheetName() {
			return this.get_visualId().worksheet;
		},
		get_visualId: function VisualModel$get_VisualId() {
			return this.pm.visualIdPresModel;
		},
		get_containerGeometry: function VisualModel$get_ContainerGeometry() {
			return this.get_zone().get_zoneCommonModel().get_zoneContentRectXY();
		},
		get_tooltipMode: function VisualModel$get_TooltipMode() {
			return this.pm.tooltipMode;
		},
		get_scenePresModel: function VisualModel$get_ScenePresModel() {
			return this.pm.scene;
		},
		get_shelves: function VisualModel$get_Shelves() {
			return this.$shelvesModel;
		},
		get_analyticsModel: function VisualModel$get_AnalyticsModel() {
			return this.$analyticsModel;
		},
		get_marksCardModel: function VisualModel$get_MarksCardModel() {
			return this.$marksCardModel;
		},
		get_selectionsModel: function VisualModel$get_SelectionsModel() {
			return this.$selectionsModel;
		},
		get_impliedSelectionModel: function VisualModel$get_ImpliedSelectionModel() {
			return this.$impliedSelectionModel;
		},
		get_brushingsModel: function VisualModel$get_BrushingsModel() {
			return this.$brushingsModel;
		},
		get_showMeModel: function VisualModel$get_ShowMeModel() {
			return this.$showMeModel;
		},
		get_sceneModel: function VisualModel$get_SceneModel() {
			return this.$sceneModel;
		},
		get_mapServerModel: function VisualModel$get_MapServerModel() {
			return this.$mapServerModel;
		},
		get_tileCacheUrl: function VisualModel$get_TileCacheUrl() {
			return this.$cacheUrl;
		},
		get_filters: function VisualModel$get_Filters() {
			return _.values(this.$filterModels);
		},
		get_filterModels: function VisualModel$get_FilterModels() {
			return this.$filterModels;
		},
		get_geometryModel: function VisualModel$get_GeometryModel() {
			return this.$geometryModel;
		},
		get_sortIndicatorsModel: function VisualModel$get_SortIndicatorsModel() {
			return this.$sortIndicatorsModel;
		},
		get_axisRegionModel: function VisualModel$get_AxisRegionModel() {
			return this.$axisRegionModels;
		},
		get_vizDataModel: function VisualModel$get_VizDataModel() {
			return this.$vizDataModel;
		},
		get_titleModel: function VisualModel$get_TitleModel() {
			return this.$titleModel;
		},
		get_captionModel: function VisualModel$get_CaptionModel() {
			return this.$captionModel;
		},
		get_hiddenTuples: function VisualModel$get_HiddenTuples() {
			return this.$allHiddenTuples;
		},
		get_filteredTuples: function VisualModel$get_FilteredTuples() {
			return this.$allFilteredTuples;
		},
		get_isMap: function VisualModel$get_IsMap() {
			return this.pm.isMap;
		},
		get_hasBackgroundImage: function VisualModel$get_HasBackgroundImage() {
			return this.pm.hasBackgroundImage;
		},
		get_floatingToolbarVisibility: function VisualModel$get_FloatingToolbarVisibility() {
			return this.pm.floatingToolbarVisibility;
		},
		get_geoSearchVisibility: function VisualModel$get_GeoSearchVisibility() {
			return this.pm.geographicSearchVisibility;
		},
		get_vizNavigationSetting: function VisualModel$get_VizNavigationSetting() {
			return this.pm.vizNavigationSetting;
		},
		get_defaultMapTool: function VisualModel$get_DefaultMapTool() {
			return this.pm.defaultMapToolEnum;
		},
		get_hasModifiedAxes: function VisualModel$get_HasModifiedAxes() {
			return this.pm.hasModifiedAxes;
		},
		get_backgroundColor: function VisualModel$get_BackgroundColor() {
			return $tab_ColorModel.fromColorCode(this.pm.bgColor);
		},
		get_paneBGColor: function VisualModel$get_PaneBGColor() {
			return this.pm.paneColor;
		},
		get_headerBGColor: function VisualModel$get_HeaderBGColor() {
			return this.pm.headerColor;
		},
		get_shouldUpdate: function VisualModel$get_ShouldUpdate() {
			return $tab_ApplicationModel.get_instance().get_autoUpdate();
		},
		get_invalidSheets: function VisualModel$get_InvalidSheets() {
			var dashboardModel = $tab_ModelUtils.findContentDashboard(null);
			return dashboardModel.get_invalidSheets();
		},
		get_isVisualValidAndUpToDate: function VisualModel$get_IsVisualValidAndUpToDate() {
			return this.$visualIsValidAndUpToDate;
		},
		get_isVisualValid: function VisualModel$get_IsVisualValid() {
			return this.pm.valid;
		},
		get_isBrushedFromAction: function VisualModel$get_IsBrushedFromAction() {
			return this.$brushedFromAction;
		},
		get_emptyHighlightFogAll: function VisualModel$get_EmptyHighlightFogAll() {
			return this.$emptyHighlightFogAll;
		},
		get_zone: function VisualModel$get_Zone() {
			var wrapper = ss.safeCast(this.parent, $tab_ZoneContentWrapperModel);
			return wrapper.get_zone();
		},
		get_runtimeData: function VisualModel$get_RuntimeData() {
			return this.$runtimeData;
		},
		get_runtimeReady: function VisualModel$get_RuntimeReady() {
			return this.$runtimeHandles.state() === 'resolved';
		},
		get_runtimeHandles: function VisualModel$get_RuntimeHandles() {
			return this.$runtimeHandles;
		},
		get_runtimeStatusView: function VisualModel$get_RuntimeStatusView() {
			return this.$runtimeStatusView;
		},
		invokeNewVisual: function VisualModel$InvokeNewVisual() {
			this.$2$NewVisualField();
		},
		setIsVisualValidAndUpToDate: function VisualModel$SetIsVisualValidAndUpToDate(value, context) {
			if (this.pm.valid && value !== this.$visualIsValidAndUpToDate) {
				$tab_VisualModel.get_$log().debug('Visual model VisualIsValid set to %o', [value]);
				this.$visualIsValidAndUpToDate = value;
				this.raiseEvent(this.$2$VisualValidStateChangedField, context);
			}
		},
		setIsBrushedFromAction: function VisualModel$SetIsBrushedFromAction(value, context) {
			if (this.$brushedFromAction !== value) {
				this.$brushedFromAction = value;
				this.raiseEvent(this.$2$BrushingFromActionChangedField, context);
			}
		},
		setEmptyHighlightFogAll: function VisualModel$SetEmptyHighlightFogAll(value, context) {
			if (this.$emptyHighlightFogAll !== value) {
				this.$emptyHighlightFogAll = value;
				this.raiseEvent(this.$2$EmptyHighlightFogAllChangedField, context);
			}
		},
		getAnnotationList: function VisualModel$GetAnnotationList() {
			if (ss.isValue(this.pm.annotationList)) {
				return this.pm.annotationList;
			}
			return [];
		},
		vizDataContainsDuplicateCaption: function VisualModel$VizDataContainsDuplicateCaption(caption) {
			if (ss.isNullOrUndefined(this.get_vizDataModel())) {
				return false;
			}
			return _.filter(this.get_vizDataModel().get_fieldCaptions(), function(s) {
				return ss.referenceEquals(s, caption);
			}).length > 1;
		},
		setFilteredTuples: function VisualModel$SetFilteredTuples(fieldName, tuplesToFilter) {
			this.$filteredTuples.set(fieldName, tuplesToFilter);
			var newFilteredTuples = new Map();
			this.$filteredTuples.forEach(function(tuples) {
				for (var $t1 = 0; $t1 < tuples.length; $t1++) {
					var tupleID = tuples[$t1];
					newFilteredTuples.set(tupleID.toString(), tupleID);
				}
			});
			var change = this.$allFilteredTuples.size !== newFilteredTuples.size;
			if (!change) {
				tab.MapUtility.forEachWithInterrupt$1(String, ss.Int32).call(null, this.$allFilteredTuples, function(vals, key) {
					if (!newFilteredTuples.has(key)) {
						change = true;
						throw new tab.LoopBreakException();
					}
				});
			}
			if (change) {
				this.$allFilteredTuples = newFilteredTuples;
				if (ss.isValue(this.$2$NewFilteredTuplesField)) {
					this.$2$NewFilteredTuplesField();
				}
			}
		},
		setHiddenTuples: function VisualModel$SetHiddenTuples(fieldName, tuplesToHide) {
			this.$hiddenTuples.set(fieldName, tuplesToHide);
			var newHiddenTuples = new Map();
			this.$hiddenTuples.forEach(function(tuples) {
				for (var $t1 = 0; $t1 < tuples.length; $t1++) {
					var tupleID = tuples[$t1];
					newHiddenTuples.set(tupleID.toString(), tupleID);
				}
			});
			var change = this.$allHiddenTuples.size !== newHiddenTuples.size;
			if (!change) {
				tab.MapUtility.forEachWithInterrupt$1(String, ss.Int32).call(null, this.$allHiddenTuples, function(tuples1, key) {
					if (!newHiddenTuples.has(key)) {
						change = true;
						throw new tab.LoopBreakException();
					}
				});
			}
			if (change) {
				this.$allHiddenTuples = newHiddenTuples;
				if (ss.isValue(this.$2$NewHiddenTuplesField)) {
					this.$2$NewHiddenTuplesField();
				}
			}
		},
		getMutableCopyOfPresModel: function VisualModel$GetMutableCopyOfPresModel() {
			var scene = this.pm.scene;
			var labels = this.pm.markLabels;
			var vizData = this.pm.vizData;
			delete this.pm['scene'.toString()];
			delete this.pm['vizData'.toString()];
			delete this.pm['markLabels'.toString()];
			var copy = $tab_Model.prototype.getMutableCopyOfPresModel.call(this);
			this.pm.scene = scene;
			this.pm.vizData = vizData;
			this.pm.markLabels = labels;
			return copy;
		},
		reValidate: function VisualModel$ReValidate(context) {
			if (this.get_isVisualValidAndUpToDate() !== this.pm.valid) {
				this.$visualIsValidAndUpToDate = this.pm.valid;
				this.raiseEvent(this.$2$VisualValidStateChangedField, context);
			}
		},
		$updateAxisRegionModels: function VisualModel$UpdateAxisRegionModels(visualPresModel) {
			if (ss.isNullOrUndefined(this.$axisRegionModels)) {
				this.$axisRegionModels = [];
			}
			if (ss.isValue(visualPresModel.$.axisRegions)) {
				this.$axisRegionModels = visualPresModel.$.axisRegions;
			}
		},
		update: function VisualModel$Update(visualPresModel, context) {
			visualPresModel = { $: visualPresModel };
			if (ss.isNullOrUndefined(this.$shelvesModel)) {
				this.$shelvesModel = new $tab_ShelvesModel(this);
			}
			if (ss.isValue(visualPresModel.$.shelves)) {
				var paneSpecId = this.$findShelfPaneSpecId(visualPresModel.$);
				this.$shelvesModel.update(visualPresModel.$.shelves, $tab_ApplicationModel.get_instance().get_workbook().get_dataSchema(), paneSpecId, context);
			}
			if (ss.isValue(visualPresModel.$.analyticsPane)) {
				if (ss.isNullOrUndefined(this.$analyticsModel)) {
					this.$analyticsModel = new $tab_AnalyticsPaneModel(this);
				}
				this.$analyticsModel.update(visualPresModel.$.analyticsPane, context);
			}
			if (ss.isValue(visualPresModel.$.vizData)) {
				if (ss.isNullOrUndefined(this.$vizDataModel)) {
					this.$vizDataModel = new $tab_VizDataModel(this);
				}
				this.$vizDataModel.update(visualPresModel.$.vizData, context);
			}
			this.$updateSceneModel(visualPresModel.$, context);
			if (ss.isValue(visualPresModel.$.colorDictionary) && ss.isValue(this.pm)) {
				if (!_.isEqual(this.pm.colorDictionary, visualPresModel.$.colorDictionary)) {
					this.raiseEvent(this.$2$ColorDictionaryChangedField, context);
				}
			}
			if (ss.isValue(visualPresModel.$.vizNavigationSetting) && ss.isValue(this.pm)) {
				if (!_.isEqual(this.pm.vizNavigationSetting, visualPresModel.$.vizNavigationSetting)) {
					this.raiseEvent(this.$2$VizNavigationSettingChangedField, context);
				}
			}
			if (ss.isValue(visualPresModel.$.annotationList)) {
				this.raiseEvent(this.$2$AnnotationHitBoxesChangedField, context);
			}
			if (ss.isNullOrUndefined(this.$marksCardModel)) {
				this.$marksCardModel = new $tab_MarksCardModel(this);
			}
			if (ss.isValue(visualPresModel.$.marksCardPresModel)) {
				this.$marksCardModel.update(visualPresModel.$.marksCardPresModel, context);
			}
			if (ss.isValue(visualPresModel.$.selectionList) && visualPresModel.$.selectionList.length > 0) {
				this.$selectionsModel.update(visualPresModel.$.selectionList, context);
			}
			if (ss.isValue(visualPresModel.$.brushingSelectionList)) {
				this.$brushingsModel.update(visualPresModel.$.brushingSelectionList, context);
			}
			this.$handleImpliedSelection(this.$selectionsModel.nodeSelection.get_nodes(), context);
			if (!ss.isValue(this.$showMeModel)) {
				this.$showMeModel = new $tab_CommandsModel(this);
			}
			if (ss.isValue(visualPresModel.$.showMeCommands)) {
				this.$showMeModel.update(visualPresModel.$.showMeCommands, context);
			}
			this.$updateMapServerModel(visualPresModel.$, context);
			var newFilterJson = visualPresModel.$.filtersJson || '';
			var filterPresModels = (ss.isNullOrEmptyString(newFilterJson) ? null : JSON.parse(newFilterJson));
			if (this.$needToUpdateFilters(filterPresModels, newFilterJson)) {
				this.$filtersJSON = newFilterJson;
				if (ss.isValue(filterPresModels)) {
					var updatedFilterModels = {};
					for (var $t1 = 0; $t1 < filterPresModels.length; $t1++) {
						var filterPresModel = filterPresModels[$t1];
						var formattedName = tableau.format.formatQualifiedName(filterPresModel.name);
						var curFilterModel = this.$filterModels[formattedName];
						if (ss.isNullOrUndefined(curFilterModel)) {
							curFilterModel = $tab_ModelUtils.createFilterModel(this, filterPresModel);
						}
						curFilterModel.update(filterPresModel, context);
						updatedFilterModels[formattedName] = curFilterModel;
					}
					this.$filterModels = updatedFilterModels;
				}
			}
			var newCacheUrl = null;
			if (!ss.isNullOrEmptyString(visualPresModel.$.cacheUrlInfoJson)) {
				var cacheInfo = JSON.parse(visualPresModel.$.cacheUrlInfoJson);
				newCacheUrl = cacheInfo['url'].toString();
			}
			if (!ss.referenceEquals(this.get_tileCacheUrl(), newCacheUrl)) {
				this.$cacheUrl = newCacheUrl;
				this.$fireCacheUrlInfoChanged(context);
			}
			var newGeometry = visualPresModel.$.geometryJson || '';
			if (!ss.isValue(this.$geometryModel)) {
				this.$geometryModel = new $tab_ViewGeometryModel(this);
			}
			var geometryPresModel = (ss.isNullOrEmptyString(newGeometry) ? null : JSON.parse(newGeometry));
			this.$geometryModel.update(geometryPresModel);
			if (ss.isNullOrUndefined(this.$titleModel)) {
				this.$titleModel = new $tab_TextRegionModel(this, 'visualTitle'.toString());
			}
			if (ss.isValue(visualPresModel.$.visualTitle)) {
				this.$titleModel.update(visualPresModel.$.visualTitle, context);
			}
			if (!ss.isValue(this.$captionModel)) {
				this.$captionModel = new $tab_TextRegionModel(this, 'visualCaption'.toString());
			}
			if (ss.isValue(visualPresModel.$.visualCaption)) {
				this.$captionModel.update(visualPresModel.$.visualCaption, context);
			}
			if (!ss.isValue(this.$sortIndicatorsModel)) {
				this.$sortIndicatorsModel = new $tab_SortIndicatorsModel(this);
			}
			if (ss.isValue(visualPresModel.$.sortIndicators)) {
				this.$sortIndicatorsModel.update(visualPresModel.$.sortIndicators, context);
			}
			this.$updateAxisRegionModels(visualPresModel);
			this.setEmptyHighlightFogAll(visualPresModel.$.emptyHighlightFogAll, context);
			if (ss.isNullOrUndefined(this.resizeInfoModel)) {
				this.resizeInfoModel = new $tab_ResizeInfoModel(this);
			}
			if (ss.isValue(visualPresModel.$.resizeInfo)) {
				this.resizeInfoModel.update(visualPresModel.$.resizeInfo, context);
			}
			if (!ss.referenceEquals(visualPresModel.$, this.pm)) {
				this.swapAndCopyPresModel(visualPresModel.$);
				this.reValidate(context);
				$tab_VisualModel.get_$log().debug('Visual model has been updated for %o', [this]);
				this.$raiseNewVisual(context);
			}
		},
		$raiseNewVisual: function VisualModel$RaiseNewVisual(context) {
			this.raiseEvent(this.$2$NewVisualField, context);
		},
		$fireCacheUrlInfoChanged: function VisualModel$FireCacheUrlInfoChanged(context) {
			if (ss.isValue(this.get_tileCacheUrl())) {
				this.raiseEvent(this.$2$UrlInfoCacheChangeField, context);
			}
		},
		$needToUpdateFilters: function VisualModel$NeedToUpdateFilters(filterPresModels, newFilterJson) {
			if (ss.isNullOrUndefined(this.$filtersJSON)) {
				return true;
			}
			if (ss.isValue(filterPresModels)) {
				var tiledFilter = _.find(filterPresModels, function(filter) {
					return filter.isTiled;
				});
				if (ss.isValue(tiledFilter)) {
					return true;
				}
			}
			return !ss.referenceEquals(this.$filtersJSON, newFilterJson);
		},
		hasFilterFieldData: function VisualModel$HasFilterFieldData(fieldName) {
			return ss.isValue(this.get_vizDataModel()) && ss.indexOf(this.get_vizDataModel().get_filterFields(), fieldName) !== -1;
		},
		getEffectiveSelectedTuples: function VisualModel$GetEffectiveSelectedTuples(directTupleSelection) {
			var toRet;
			var tupleFromNodeSelection = this.$impliedSelectionModel.get_ids();
			if (tab.MiscUtil.isNullOrEmpty$2(tupleFromNodeSelection)) {
				toRet = directTupleSelection;
			}
			else if (tab.MiscUtil.isNullOrEmpty$2(directTupleSelection)) {
				toRet = tupleFromNodeSelection;
			}
			else {
				var combinedTuples = [];
				ss.arrayAddRange(combinedTuples, directTupleSelection);
				ss.arrayAddRange(combinedTuples, tupleFromNodeSelection);
				toRet = Array.prototype.slice.call(combinedTuples);
			}
			return toRet;
		},
		$handleImpliedSelection: function VisualModel$HandleImpliedSelection(selectedNodes, context) {
			var tupleIds = $tab_BrushingComputer.getTuplesAssociatedWithSelectedNodes(this, selectedNodes);
			this.$impliedSelectionModel.setOverriddenTupleIds(tupleIds, context);
		},
		$clearImpliedSelection: function VisualModel$ClearImpliedSelection(context) {
			this.$impliedSelectionModel.setOverriddenTupleIds([], context);
		},
		$findShelfPaneSpecId: function VisualModel$FindShelfPaneSpecId(visualPresModel) {
			if (ss.isValue(visualPresModel) && ss.isValue(visualPresModel.marksCardPresModel) && ss.isValue(visualPresModel.marksCardPresModel.paneSpec)) {
				return visualPresModel.marksCardPresModel.paneSpec;
			}
			return $tab_ModelUtils.findActivePaneSpecId();
		},
		shouldDoLocalCommand: function VisualModel$ShouldDoLocalCommand() {
			return $tab_ApplicationModel.get_instance().shouldDoLocalCommand() && $tab_ApplicationModel.get_instance().get_isLocalRenderMode() && (!this.get_mapServerModel().get_hasPresModel() || this.get_mapServerModel().get_useFastMaps()) && ss.isValue(this.get_runtimeData()) && ss.isValue(this.get_runtimeData().get_finalDataStore().SupportedIncrementalUpdates) && ss.isValue(this.get_runtimeData().get_finalDataStore().SupportedIncrementalUpdates.SupportedClientUpdates);
		},
		requestRuntimeDataAndUpdateVM: function VisualModel$RequestRuntimeDataAndUpdateVM() {
			if (!this.shouldDoLocalCommand()) {
				return;
			}
			this.$runtimeStatusView.set_isRuntimeSupported(true);
			$tab_ApplicationModel.get_instance().setupRuntime();
			if (ss.isNullOrUndefined($tab_ApplicationModel.get_instance().get_runtimeInitialized())) {
				return;
			}
			var currentHandles = this.$getCurrentHandles();
			var newHandles = $.Deferred();
			this.$runtimeHandles = newHandles.promise();
			var mc = tabBootstrap.MetricsController.createContext('RTLOAD'.toString(), 32, null);
			var success = ss.mkdel(this, function(response) {
				$tab_ApplicationModel.get_instance().get_runtimeInitialized().done([ss.mkdel(this, function() {
					this.$loadRuntimeData(new $tab_RuntimeDataResponseParser(response), currentHandles).done(ss.mkdel(this, function(handles) {
						this.$runtimeStatusView.set_isRuntimeReady(true);
						newHandles.resolve(handles);
						mc.dispose();
						$tab_RuntimeTelemetry.logVizUsage(0, mc.elapsedMS());
					}));
				})]);
			});
			var cmd = new $tab_GetRuntimeDataModelCmd();
			cmd.cmdParams['visualIdPresModel'] = this.get_visualId();
			cmd.cmdParams['isRuntimeInitialDatastoreRequired'] = ss.isNullOrUndefined(currentHandles);
			cmd.invoke().then(success, null);
		},
		updateRuntimeHandles: function VisualModel$UpdateRuntimeHandles(t, commandId, func) {
			var updated = $.Deferred();
			if (!this.$commandIsSupported(commandId)) {
				return updated.reject();
			}
			var failCallback = function() {
				updated.reject();
			};
			this.get_runtimeHandles().done(ss.mkdel(this, function(handles) {
				func(handles).done(ss.mkdel(this, function(datastoreHandle) {
					this.$updateRuntimeHandles(new tab.RuntimeHandles(handles.get_VM(), handles.get_initialStore(), datastoreHandle));
					if (ss.isValue(t)) {
						var scenePm = t.makeMutablePresModel(this.get_sceneModel(), false);
						scenePm.runtimeFinalDatastoreLocal = datastoreHandle.handleValue;
						updated.resolve();
					}
				})).fail(failCallback);
			})).fail(failCallback);
			return updated.promise();
		},
		$commandIsSupported: function VisualModel$CommandIsSupported(commandId) {
			if (ss.isValue(this.get_runtimeData()) && ss.isValue(this.get_runtimeData().get_finalDataStore().SupportedIncrementalUpdates)) {
				var clientUpdatableCommands = this.get_runtimeData().get_finalDataStore().SupportedIncrementalUpdates.SupportedClientUpdates;
				if (ss.isValue(clientUpdatableCommands)) {
					return _.indexOf(clientUpdatableCommands, commandId) > -1;
				}
			}
			return false;
		},
		$updateRuntimeHandles: function VisualModel$UpdateRuntimeHandles(handles) {
			var newHandles = $.Deferred();
			newHandles.resolve(handles);
			this.$runtimeHandles = newHandles.promise();
		},
		$invalidateCurrentHandles: function VisualModel$InvalidateCurrentHandles() {
			this.$runtimeHandles = $.Deferred().promise();
		},
		$getCurrentHandles: function VisualModel$GetCurrentHandles() {
			var currentHandles = null;
			if (this.get_runtimeReady()) {
				this.get_runtimeHandles().done(function(handles) {
					currentHandles = handles;
				});
			}
			return currentHandles;
		},
		$loadRuntimeData: function VisualModel$LoadRuntimeData(data, currentHandles) {
			var newHandles = $.Deferred();
			if (ss.isValue(data.get_dataStore())) {
				try {
					tab.RuntimeWebModule.proxy.loadBinaryDatastoreHex(data.get_dataStore()).done(function(initialStore) {
						tab.RuntimeWebModule.proxy.buildVMHex(data.get_vtl(), initialStore).done(function(vm) {
							tab.RuntimeWebModule.proxy.executeVM(vm).done(function(finalStore) {
								if (ss.isValue(data.get_dataStoreUpdater())) {
									tab.RuntimeWebModule.proxy.loadAndApplyDataStoreUpdaterHex(data.get_dataStoreUpdater(), vm).done(function(updatedFinalStore) {
										newHandles.resolve(new tab.RuntimeHandles(vm, initialStore, updatedFinalStore));
									});
								}
								else {
									newHandles.resolve(new tab.RuntimeHandles(vm, initialStore, finalStore));
								}
							});
						});
					});
				}
				catch ($t1) {
					var e = ss.Exception.wrap($t1);
					tab.RuntimeUtil.emscriptenAborted();
					tab.ErrorTrace.report(e);
				}
			}
			else if (ss.isValue(currentHandles)) {
				tab.RuntimeWebModule.proxy.loadAndApplyDataStoreUpdaterHex(data.get_dataStoreUpdater(), currentHandles.get_VM()).done(function(finalStore1) {
					newHandles.resolve(new tab.RuntimeHandles(currentHandles.get_VM(), currentHandles.get_initialStore(), finalStore1));
				});
			}
			return newHandles.promise();
		},
		$updateSceneModel: function VisualModel$UpdateSceneModel(visualPresModel, context) {
			if (ss.isNullOrUndefined(this.$sceneModel)) {
				this.$sceneModel = new $tab_SceneModel(this);
			}
			if (ss.isValue(visualPresModel.scene)) {
				if (ss.isValue(this.$hiddenTuples)) {
					var hadTuples = this.$allHiddenTuples.size > 0;
					this.$hiddenTuples = new Map();
					this.$allHiddenTuples = new Map();
					if (hadTuples) {
						this.raiseEvent(this.$2$NewHiddenTuplesField, context);
					}
				}
				if (ss.isValue(this.$filteredTuples)) {
					var hadTuples1 = this.$allFilteredTuples.size > 0;
					this.$filteredTuples = new Map();
					this.$allFilteredTuples = new Map();
					if (hadTuples1) {
						this.raiseEvent(this.$2$NewFilteredTuplesField, context);
					}
				}
				this.$sceneModel.update(visualPresModel.scene, context);
				var scenePresModel = this.$sceneModel.pm;
				if (ss.isValue(scenePresModel.runtimeRenderInputDatastore) || ss.isValue(scenePresModel.runtimeFinalDatastoreLocal)) {
					this.$runtimeData = this.$sceneModel.get_sceneRuntimeData();
				}
				if (!ss.isValue(scenePresModel.runtimeFinalDatastoreLocal)) {
					this.$updateRuntimeData(visualPresModel);
				}
			}
		},
		$updateMapServerModel: function VisualModel$UpdateMapServerModel(visualPresModel, context) {
			if (ss.isNullOrUndefined(this.$mapServerModel)) {
				this.$mapServerModel = new $tab_MapServerModel(this);
				this.$mapServerModel.set_allowLocalPanAndZoom(this.shouldDoLocalCommand());
				this.$mapServerModel.add_useFastMapsChanged(ss.mkdel(this, function(oldValue, newValue) {
					if (oldValue === false && newValue === true) {
						this.$invalidateCurrentHandles();
						this.requestRuntimeDataAndUpdateVM();
					}
				}));
			}
			if (!visualPresModel.isMap) {
				this.$mapServerModel.update(null, context);
				return;
			}
			if (tab.FeatureFlags.isEnabled('RuntimeComputeMapCenterInVTL') && ss.isValue(this.$runtimeData) && this.shouldDoLocalCommand()) {
				var viewpoint = this.get_runtimeData().get_finalDataStore().Viewpoint;
				this.$mapServerModel.set_centerLatitude(viewpoint.PerPaneExtents.MapCenterLatitude[0]);
				this.$mapServerModel.set_centerLongitude(viewpoint.PerPaneExtents.MapCenterLongitude[0]);
				this.$mapServerModel.set_requestZoom(viewpoint.MapLayersModelUpdate.ActualZoomLevel);
				this.get_mapServerModel().set_displayScale(viewpoint.MapLayersModelUpdate.DisplayScale);
				return;
			}
			if (ss.isValue(visualPresModel.mapServer)) {
				this.$mapServerModel.update(visualPresModel.mapServer, context);
				this.get_mapServerModel().set_allowLocalPanAndZoom(this.shouldDoLocalCommand());
				return;
			}
		},
		$updateRuntimeData: function VisualModel$UpdateRuntimeData(visualPresModel) {
			if (!ss.isValue(visualPresModel.runtimeData)) {
				return;
			}
			if (ss.isNullOrUndefined($tab_ApplicationModel.get_instance().get_runtimeInitialized())) {
				return;
			}
			var currentHandles = this.$getCurrentHandles();
			var newHandles = $.Deferred();
			this.$runtimeHandles = newHandles.promise();
			var mc = tabBootstrap.MetricsController.createContext('RTLOAD'.toString(), 32, null);
			var data = new $tab_RuntimeDataResponseParser.$ctor1(visualPresModel.runtimeData);
			$tab_ApplicationModel.get_instance().get_runtimeInitialized().done([ss.mkdel(this, function() {
				this.$loadRuntimeData(data, currentHandles).done(ss.mkdel(this, function(handles) {
					this.$runtimeStatusView.set_isRuntimeReady(true);
					newHandles.resolve(handles);
					mc.dispose();
					$tab_RuntimeTelemetry.logVizUsage(0, mc.elapsedMS());
				}));
			})]);
		},
		$sendDisplayListTelemetry: function VisualModel$SendDisplayListTelemetry() {
			if (ss.isNullOrUndefined(this.$sceneModel) || ss.isNullOrUndefined(this.$sceneModel.get_visualListModels()) || !tab.FeatureFlags.isEnabled('RuntimeDisplayListSizeTelemetry')) {
				return;
			}
			var TelemetryName = 'DisplayListSizes';
			var friendlyNameLookup = ss.mkdict(['misc', 'Misc', 'annotations', 'Annotations', 'axis-rules', 'AxisRules', 'top-axis', 'TopAxis', 'bottom-axis', 'BottomAxis', 'left-axis', 'LeftAxis', 'right-axis', 'RightAxis', 'background', 'Background', 'borders', 'Borders', 'caption', 'Caption', 'cell-borders', 'CellBorders', 'decoration', 'Decoration', 'drop-lines', 'DropLines', 'x-labels', 'XLabels', 'y-labels', 'YLabels', 'legends', 'Legends', 'marks', 'Marks', 'mark-labels', 'MarkLabels', 'mark-trails', 'MarkTrails', 'ref-bands', 'RefBands', 'ref-lines', 'RefLines', 'pane-borders', 'PaneBorders', 'scroll-bars', 'ScrollBars', 'title', 'Title', 'trend-lines', 'TrendLines', 'upper-map-layers', 'UpperMapLayers']);
			var vals = {};
			vals['VizId'] = this.get_zone().get_zoneId();
			var $t1 = new ss.ObjectEnumerator(this.$sceneModel.get_visualListModels());
			try {
				while ($t1.moveNext()) {
					var pair = $t1.current();
					var displayListSize = JSON.stringify(pair.value.get_visualListPresModel()).length;
					vals[friendlyNameLookup[pair.key]] = displayListSize;
				}
			}
			finally {
				$t1.dispose();
			}
			$tab_OnlineAnalyticsClient.logEvent(TelemetryName, vals);
		}
	}, $tab_Model);
	ss.initClass($tab_VizClientCommands, $asm, {});
	ss.initClass($tab_VizDataField, $asm, {
		get_hasDataValues: function VizDataField$get_HasDataValues() {
			return this.$hasDataValues;
		},
		get_hasAliases: function VizDataField$get_HasAliases() {
			return this.$hasAliases;
		},
		get_dataType: function VizDataField$get_DataType() {
			return this.$columnPresModel.dataType;
		},
		get_fieldName: function VizDataField$get_FieldName() {
			return this.$columnPresModel.fn;
		},
		get_fieldCaption: function VizDataField$get_FieldCaption() {
			return this.$columnPresModel.fieldCaption;
		},
		get_baseColumnName: function VizDataField$get_BaseColumnName() {
			return this.$columnPresModel.baseColumnName;
		},
		get_role: function VizDataField$get_Role() {
			return this.$columnPresModel.fieldRole;
		},
		get_aggType: function VizDataField$get_AggType() {
			return this.$columnPresModel.aggregation;
		},
		get_specialValuesOverride: function VizDataField$get_SpecialValuesOverride() {
			return this.$columnPresModel.specialValueText;
		},
		get_filterContext: function VizDataField$get_FilterContext() {
			return this.$columnPresModel.filterContext;
		},
		get_vizColumnDoNotUse: function VizDataField$get_VizColumnDoNotUse() {
			return this.$columnPresModel;
		},
		get_$paneIndices: function VizDataField$get_PaneIndices() {
			return this.$columnPresModel.paneIndices;
		},
		get_$perPaneColumnIndices: function VizDataField$get_PerPaneColumnIndices() {
			return this.$columnPresModel.columnIndices;
		},
		get_$log: function VizDataField$get_Log() {
			return tab.Logger.lazyGetLogger($tab_VizDataField);
		},
		isTupleIdValid: function VizDataField$IsTupleIdValid(tupleId) {
			for (var ii = 0; ii < this.$columnPresModel.paneIndices.length; ++ii) {
				var paneIndex = this.$columnPresModel.paneIndices[ii];
				var tupleIndex = this.$getTupleIndexForPane(tupleId, paneIndex);
				if (ss.isValue(tupleIndex)) {
					return true;
				}
			}
			return false;
		},
		tupleIdsThatPass: function VizDataField$TupleIdsThatPass(f) {
			var toReturn = [];
			for (var $t1 = 0; $t1 < this.$columnPresModel.paneIndices.length; $t1++) {
				var paneIndex = this.$columnPresModel.paneIndices[$t1];
				var tupleIdColumnWithinPane = this.$paneColumnsPresModel[paneIndex].vizPaneColumns[0];
				for (var $t2 = 0; $t2 < tupleIdColumnWithinPane.tupleIds.length; $t2++) {
					var tupleId = tupleIdColumnWithinPane.tupleIds[$t2];
					if (f(tupleId)) {
						toReturn.push(tupleId);
					}
				}
			}
			return toReturn;
		},
		$computeTupleIdDictionaryForPane: function VizDataField$ComputeTupleIdDictionaryForPane(paneIndex) {
			var tupleIdColumnWithinPane = this.$getColumnWithinPane(paneIndex, 0);
			var tupleIdDictionary = {};
			var index = 0;
			for (var $t1 = 0; $t1 < tupleIdColumnWithinPane.tupleIds.length; $t1++) {
				var tid = tupleIdColumnWithinPane.tupleIds[$t1];
				tupleIdDictionary[tid] = index++;
			}
			this.$tupleIdLookupForPane[paneIndex] = tupleIdDictionary;
		},
		$getTupleIndexForPane: function VizDataField$GetTupleIndexForPane(tupleId, paneIndex) {
			if (!ss.keyExists(this.$tupleIdLookupForPane, paneIndex)) {
				this.$computeTupleIdDictionaryForPane(paneIndex);
			}
			return this.$tupleIdLookupForPane[paneIndex][tupleId];
		},
		getAliasIndex: function VizDataField$GetAliasIndex(tupleId) {
			var aliasIndex = null;
			if (!this.get_hasAliases()) {
				return aliasIndex;
			}
			for (var ii = 0; ii < this.$columnPresModel.paneIndices.length; ++ii) {
				var paneIndex = this.$columnPresModel.paneIndices[ii];
				var tupleIndex = this.$getTupleIndexForPane(tupleId, paneIndex);
				if (ss.isValue(tupleIndex)) {
					var columnWithinPaneIndex = this.$columnPresModel.columnIndices[ii];
					var columnWithinPane = this.$getColumnWithinPane(paneIndex, columnWithinPaneIndex);
					aliasIndex = columnWithinPane.aliasIndices[tupleIndex];
					break;
				}
			}
			return aliasIndex;
		},
		getDataValueIndex: function VizDataField$GetDataValueIndex(tupleId) {
			var dataValueIndex = null;
			if (this.get_hasDataValues()) {
				for (var ii = 0; ii < this.$columnPresModel.paneIndices.length; ++ii) {
					var paneIndex = this.$columnPresModel.paneIndices[ii];
					var tupleIndex = this.$getTupleIndexForPane(tupleId, paneIndex);
					if (ss.isValue(tupleIndex)) {
						var columnWithinPaneIndex = this.$columnPresModel.columnIndices[ii];
						var columnWithinPane = this.$getColumnWithinPane(paneIndex, columnWithinPaneIndex);
						dataValueIndex = columnWithinPane.valueIndices[tupleIndex];
						break;
					}
				}
			}
			return dataValueIndex;
		},
		getPaneDescriptorKey: function VizDataField$GetPaneDescriptorKey(tupleId) {
			var key = null;
			for (var ii = 0; ii < this.$columnPresModel.paneIndices.length; ++ii) {
				var paneIndex = this.get_$paneIndices()[ii];
				var tupleIndex = this.$getTupleIndexForPane(tupleId, paneIndex);
				if (ss.isValue(tupleIndex)) {
					var paneColumn = this.$getPaneColumn(paneIndex);
					key = paneColumn.paneDescriptor.paneDescrKey;
					break;
				}
			}
			return key;
		},
		$getPaneColumn: function VizDataField$GetPaneColumn(paneColIndex) {
			var result = null;
			if (this.$paneColumnsPresModel.length > paneColIndex) {
				result = this.$paneColumnsPresModel[paneColIndex];
			}
			else {
				this.get_$log().warn('GetPaneColumn: paneIndex is out of bound.', []);
			}
			return result;
		},
		$getColumnWithinPane: function VizDataField$GetColumnWithinPane(paneColIndex, columnWithinPaneIndex) {
			var result = null;
			var paneColumn = this.$getPaneColumn(paneColIndex);
			if (ss.isValue(paneColumn)) {
				if (paneColumn.vizPaneColumns.length > columnWithinPaneIndex) {
					result = paneColumn.vizPaneColumns[columnWithinPaneIndex];
				}
				else {
					this.get_$log().warn('GetColumnWithinPane: columnWithinPaneIndex is out of bound.', []);
				}
			}
			return result;
		},
		$computeHasDataValues: function VizDataField$ComputeHasDataValues() {
			var hasDataValues = false;
			for (var i = 0; i < this.get_$paneIndices().length; i++) {
				var paneIndex = this.get_$paneIndices()[i];
				var columnWithinPaneIndex = this.get_$perPaneColumnIndices()[i];
				var columnWithinPane = this.$getColumnWithinPane(paneIndex, columnWithinPaneIndex);
				if (ss.isValue(columnWithinPane)) {
					hasDataValues = hasDataValues || ss.isValue(columnWithinPane.valueIndices) && columnWithinPane.valueIndices.length > 0;
				}
			}
			return hasDataValues;
		},
		$computeHasAliases: function VizDataField$ComputeHasAliases() {
			var hasAliases = false;
			for (var i = 0; i < this.get_$paneIndices().length; i++) {
				var paneIndex = this.get_$paneIndices()[i];
				var columnWithinPaneIndex = this.get_$perPaneColumnIndices()[i];
				var columnWithinPane = this.$getColumnWithinPane(paneIndex, columnWithinPaneIndex);
				if (ss.isValue(columnWithinPane)) {
					hasAliases = hasAliases || ss.isValue(columnWithinPane.aliasIndices) && columnWithinPane.aliasIndices.length > 0;
				}
			}
			return hasAliases;
		},
		$validatePresModels: function VizDataField$ValidatePresModels() {
			ss.Debug.assert(this.get_$paneIndices().length === this.get_$perPaneColumnIndices().length, '[VizDataField Validation Error] Different number of pane indices and column (within pane) indices.');
		}
	});
	ss.initClass($tab_VizDataLookup, $asm, {});
	ss.initClass($tab_VizDataModel, $asm, {
		add_newVizData: function VizDataModel$add_NewVizData(value) {
			this.$2$NewVizDataField = ss.delegateCombine(this.$2$NewVizDataField, value);
		},
		remove_newVizData: function VizDataModel$remove_NewVizData(value) {
			this.$2$NewVizDataField = ss.delegateRemove(this.$2$NewVizDataField, value);
		},
		get_hasTupleIdColumn: function VizDataModel$get_HasTupleIdColumn() {
			return ss.isValue(this.$tupleIdColumn);
		},
		get_highlightCaptions: function VizDataModel$get_HighlightCaptions() {
			return this.get_$vizDataPresModel().highlightCaptions;
		},
		get_filterFields: function VizDataModel$get_FilterFields() {
			return this.get_$vizDataPresModel().filterFields;
		},
		get_fieldCaptions: function VizDataModel$get_FieldCaptions() {
			return this.$fieldCaptions;
		},
		get_ubertipData: function VizDataModel$get_UbertipData() {
			return this.get_$vizDataPresModel().ubertipData;
		},
		get_$vizDataPresModel: function VizDataModel$get_VizDataPresModel() {
			return this.pm;
		},
		get_$paneColumnsDataPresModel: function VizDataModel$get_PaneColumnsDataPresModel() {
			return this.get_$vizDataPresModel().paneColumnsData;
		},
		get_$paneColumnsPresModel: function VizDataModel$get_PaneColumnsPresModel() {
			return this.get_$paneColumnsDataPresModel().paneColumnsList;
		},
		getVizDataFieldByIndex: function VizDataModel$GetVizDataFieldByIndex(index) {
			if (index >= 0 && index < this.$columns.length) {
				return this.$columns[index];
			}
			return null;
		},
		getColumnIndex: function VizDataModel$GetColumnIndex(captionOrFieldName) {
			if (ss.isNullOrUndefined(this.get_$paneColumnsDataPresModel())) {
				return -1;
			}
			var cols = this.get_$paneColumnsDataPresModel().vizDataColumns;
			for (var index = 0; index < cols.length; ++index) {
				if ($tab_VizDataUtils.isFieldCaptionOfColumn(cols[index], captionOrFieldName)) {
					return index;
				}
			}
			for (var index1 = 0; index1 < cols.length; ++index1) {
				if ($tab_VizDataUtils.isFieldNameOfColumn(cols[index1], captionOrFieldName)) {
					return index1;
				}
			}
			return -1;
		},
		getVizDataField: function VizDataModel$GetVizDataField(captionOrFieldName) {
			return this.getVizDataFieldByIndex(this.getColumnIndex(captionOrFieldName));
		},
		hasDimensionColumnNotMeasureNames: function VizDataModel$HasDimensionColumnNotMeasureNames() {
			if (ss.isValue(this.get_$paneColumnsDataPresModel())) {
				var $t1 = this.get_$paneColumnsDataPresModel().vizDataColumns;
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var column = $t1[$t2];
					if (column.fieldRole === 'dimension' && !ss.referenceEquals(column.localBaseColumnName, $tab_VizDataModel.measureNamesColumnName)) {
						return true;
					}
				}
			}
			return false;
		},
		hasTupleId: function VizDataModel$HasTupleId(tupleId) {
			var hasTupleId = false;
			if (this.get_hasTupleIdColumn()) {
				this.forEachVizDataField(function(dataField, index) {
					if (dataField.isTupleIdValid(tupleId)) {
						hasTupleId = true;
						return false;
					}
					return true;
				});
			}
			return hasTupleId;
		},
		forEachTupleId: function VizDataModel$ForEachTupleId(tupleIdFunction) {
			for (var ii = 0; ii < this.get_$paneColumnsPresModel().length; ++ii) {
				var tupleIdColumnWithinPane = this.get_$paneColumnsPresModel()[ii].vizPaneColumns[0];
				for (var $t1 = 0; $t1 < tupleIdColumnWithinPane.tupleIds.length; $t1++) {
					var tupleId = tupleIdColumnWithinPane.tupleIds[$t1];
					var breakNow = !tupleIdFunction(tupleId);
					if (breakNow) {
						break;
					}
				}
			}
		},
		forEachVizDataField: function VizDataModel$ForEachVizDataField(vizDataFieldFunction) {
			var columnCount = this.$columns.length;
			for (var ii = 0; ii < columnCount; ++ii) {
				var column = this.$columns[ii];
				if (ss.isNullOrUndefined(column)) {
					continue;
				}
				var breakNow = !vizDataFieldFunction(column, ii);
				if (breakNow) {
					break;
				}
			}
		},
		update: function VizDataModel$Update(vizDataPresModel, context) {
			var presModelChanged = this.simpleSwapToUpdate(vizDataPresModel, this.$2$NewVizDataField, context);
			if (!presModelChanged) {
				return;
			}
			if (ss.isValue(vizDataPresModel.ubertipData)) {
				$tab_FontNotificationUtil.notifyFontsFromUberTipDataPresModel(vizDataPresModel.ubertipData);
			}
			if (ss.isValue(this.get_$paneColumnsDataPresModel())) {
				this.$tupleIdColumn = null;
				ss.clear(this.$columns);
				this.$fieldCaptions = [];
				var $t1 = this.get_$paneColumnsDataPresModel().vizDataColumns;
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var column = $t1[$t2];
					if (ss.referenceEquals(column.fn, $tab_VizDataModel.tupleIdColumnName)) {
						this.$tupleIdColumn = column;
						this.$columns.push(null);
						continue;
					}
					this.$fieldCaptions.push(column.fieldCaption);
					var vizDataField = new $tab_VizDataField(column, this.get_$paneColumnsDataPresModel().paneColumnsList);
					this.$columns.push(vizDataField);
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_VizDataUtils, $asm, {});
	ss.initClass($tab_VizPortalServer, $asm, {});
	ss.initClass($tab_VizqlSessionRequest, $asm, {});
	ss.initClass($tab_VizRegionRectWrapper, $asm, {
		get_r: function VizRegionRectWrapper$get_R() {
			return this.$vizRegionRect['r'.toString()];
		},
		set_r: function VizRegionRectWrapper$set_R(value) {
			this.$vizRegionRect['r'.toString()] = value;
		},
		get_fns: function VizRegionRectWrapper$get_Fns() {
			return this.$vizRegionRect['fieldVector'.toString()];
		},
		set_fns: function VizRegionRectWrapper$set_Fns(value) {
			this.$vizRegionRect['fieldVector'.toString()] = value;
		},
		get_x: function VizRegionRectWrapper$get_X() {
			return this.$vizRegionRect['x'.toString()];
		},
		set_x: function VizRegionRectWrapper$set_X(value) {
			this.$vizRegionRect['x'.toString()] = value;
		},
		get_y: function VizRegionRectWrapper$get_Y() {
			return this.$vizRegionRect['y'.toString()];
		},
		set_y: function VizRegionRectWrapper$set_Y(value) {
			this.$vizRegionRect['y'.toString()] = value;
		},
		get_w: function VizRegionRectWrapper$get_W() {
			return this.$vizRegionRect['w'.toString()];
		},
		set_w: function VizRegionRectWrapper$set_W(value) {
			this.$vizRegionRect['w'.toString()] = value;
		},
		get_h: function VizRegionRectWrapper$get_H() {
			return this.$vizRegionRect['h'.toString()];
		},
		set_h: function VizRegionRectWrapper$set_H(value) {
			this.$vizRegionRect['h'.toString()] = value;
		}
	});
	ss.initClass($tab_VizUriModel, $asm, {
		get_isViewingUri: function VizUriModel$get_IsViewingUri() {
			return this.$vizUriType === 1;
		},
		get_isAuthoringUri: function VizUriModel$get_IsAuthoringUri() {
			return this.$vizUriType === 2;
		},
		get_isAuthorNewWorkbookUri: function VizUriModel$get_IsAuthorNewWorkbookUri() {
			return this.$vizUriType === 3 || this.$vizUriType === 7;
		},
		get_isInvalid: function VizUriModel$get_IsInvalid() {
			return this.$vizUriType === 0;
		},
		get_isAdminUri: function VizUriModel$get_IsAdminUri() {
			return this.$vizUriType === 4;
		},
		get_isSharedViewUri: function VizUriModel$get_IsSharedViewUri() {
			return this.$vizUriType === 5;
		},
		get_isRevisionHistoryUri: function VizUriModel$get_IsRevisionHistoryUri() {
			return this.$vizUriType === 6;
		},
		get_isNlpLandingPageUri: function VizUriModel$get_IsNlpLandingPageUri() {
			return this.$vizUriType === 9;
		},
		get_isNlpExplorationPageUri: function VizUriModel$get_IsNlpExplorationPageUri() {
			return this.$vizUriType === 8;
		},
		get_isCustomizedView: function VizUriModel$get_IsCustomizedView() {
			return !tab.MiscUtil.isNullOrEmpty$3(this.$customizedView);
		},
		get_absoluteUri: function VizUriModel$get_AbsoluteUri() {
			return this.$getAbsoluteUri();
		},
		get_uri: function VizUriModel$get_Uri() {
			return this.$getRelativeUri();
		},
		get_path: function VizUriModel$get_Path() {
			return this.$getPath();
		},
		get_queryParams: function VizUriModel$get_QueryParams() {
			return this.$queryParams;
		},
		get_retry: function VizUriModel$get_Retry() {
			return this.$getBooleanQueryParam($tab_VizUriModel.$retryParam);
		},
		set_retry: function VizUriModel$set_Retry(value) {
			this.$setBooleanQueryParam($tab_VizUriModel.$retryParam, value);
		},
		get_originalView: function VizUriModel$get_OriginalView() {
			return this.$getBooleanQueryParam($tab_VizUriModel.$originalViewParam);
		},
		set_originalView: function VizUriModel$set_OriginalView(value) {
			this.$setBooleanQueryParam($tab_VizUriModel.$originalViewParam, value);
			if (value) {
				this.$customizedView = '';
			}
		},
		get_ignoreStickySession: function VizUriModel$get_IgnoreStickySession() {
			return this.$getBooleanQueryParam($tab_VizUriModel.$ignoreStickySessionParam);
		},
		set_ignoreStickySession: function VizUriModel$set_IgnoreStickySession(value) {
			this.$setBooleanQueryParam($tab_VizUriModel.$ignoreStickySessionParam, value);
		},
		get_showSaveAs: function VizUriModel$get_ShowSaveAs() {
			return this.$getBooleanQueryParam($tab_VizUriModel.$showSaveAsParam);
		},
		set_showSaveAs: function VizUriModel$set_ShowSaveAs(value) {
			this.$setBooleanQueryParam($tab_VizUriModel.$showSaveAsParam, value);
		},
		get_showComments: function VizUriModel$get_ShowComments() {
			return this.$getBooleanQueryParam($tab_VizUriModel.$showCommentsParam);
		},
		set_showComments: function VizUriModel$set_ShowComments(value) {
			this.$setBooleanQueryParam($tab_VizUriModel.$showCommentsParam, value);
			if (value) {
				this.set_showDataAlertId(null);
				this.set_showDataAlerts(false);
			}
		},
		get_showDataAlertId: function VizUriModel$get_ShowDataAlertId() {
			return (ss.keyExists(this.$queryParams, $tab_VizUriModel.$showDataAlertIdParam) ? this.$queryParams[$tab_VizUriModel.$showDataAlertIdParam][0] : null);
		},
		set_showDataAlertId: function VizUriModel$set_ShowDataAlertId(value) {
			if (ss.isNullOrEmptyString(value)) {
				delete this.$queryParams[$tab_VizUriModel.$showDataAlertIdParam];
			}
			else {
				this.$queryParams[$tab_VizUriModel.$showDataAlertIdParam] = [value];
				this.set_showDataAlerts(false);
				this.set_showComments(false);
			}
		},
		get_showDataAlerts: function VizUriModel$get_ShowDataAlerts() {
			return this.$getBooleanQueryParam($tab_VizUriModel.$showDataAlertsParam);
		},
		set_showDataAlerts: function VizUriModel$set_ShowDataAlerts(value) {
			this.$setBooleanQueryParam($tab_VizUriModel.$showDataAlertsParam, value);
			if (value) {
				this.set_showDataAlertId(null);
				this.set_showComments(false);
			}
		},
		get_editDataAlertId: function VizUriModel$get_EditDataAlertId() {
			return (ss.keyExists(this.$queryParams, $tab_VizUriModel.$editDataAlertIdParam) ? this.$queryParams[$tab_VizUriModel.$editDataAlertIdParam][0] : null);
		},
		set_editDataAlertId: function VizUriModel$set_EditDataAlertId(value) {
			if (ss.isNullOrEmptyString(value)) {
				delete this.$queryParams[$tab_VizUriModel.$editDataAlertIdParam];
			}
			else {
				this.$queryParams[$tab_VizUriModel.$editDataAlertIdParam] = [value];
			}
		},
		get_showDataAlertsPanel: function VizUriModel$get_ShowDataAlertsPanel() {
			return this.get_showDataAlerts() || !ss.isNullOrEmptyString(this.get_showDataAlertId());
		},
		get_deviceLayout: function VizUriModel$get_DeviceLayout() {
			return (ss.keyExists(this.$queryParams, $tab_VizUriModel.$deviceParam) ? this.$queryParams[$tab_VizUriModel.$deviceParam][0] : null);
		},
		set_deviceLayout: function VizUriModel$set_DeviceLayout(value) {
			if (ss.isValue(value)) {
				this.$queryParams[$tab_VizUriModel.$deviceParam] = [];
				this.$queryParams[$tab_VizUriModel.$deviceParam].push(ss.unbox(value).toString());
			}
			else {
				delete this.$queryParams[$tab_VizUriModel.$deviceParam];
			}
		},
		$getBooleanQueryParam: function VizUriModel$GetBooleanQueryParam(key) {
			return ss.keyExists(this.$queryParams, key) && tab.MiscUtil.toBoolean(this.$queryParams[key][0], false);
		},
		$setBooleanQueryParam: function VizUriModel$SetBooleanQueryParam(key, val) {
			if (val) {
				this.$queryParams[key] = [];
				this.$queryParams[key].push('yes');
			}
			else {
				delete this.$queryParams[key];
			}
		},
		removeQueryParam: function VizUriModel$RemoveQueryParam(queryParam) {
			delete this.$queryParams[queryParam];
			return this;
		},
		removeAllQueryParams: function VizUriModel$RemoveAllQueryParams() {
			ss.clearKeys(this.$queryParams);
			return this;
		},
		clone: function VizUriModel$Clone() {
			var $t1 = new $tab_VizUriModel(null);
			$t1.$datasourceUrl = this.$datasourceUrl;
			$t1.$vizUriType = this.$vizUriType;
			$t1.$workbookId = this.$workbookId;
			$t1.$sheetId = this.$sheetId;
			$t1.$authoringSheetName = this.$authoringSheetName;
			$t1.$queryParams = this.$queryParams;
			$t1.$customizedView = this.$customizedView;
			$t1.$hash = this.$hash;
			$t1.$origin = this.$origin;
			$t1.explicitNotGuest = this.explicitNotGuest;
			var clone = $t1;
			return clone;
		},
		trimQueryParamsForAuthoringModeWhenLaunchedFromToolbar: function VizUriModel$TrimQueryParamsForAuthoringModeWhenLaunchedFromToolbar() {
			var filteredParams = {};
			var $t1 = ss.getEnumerator(Object.keys(this.$queryParams));
			try {
				while ($t1.moveNext()) {
					var param = $t1.current();
					var urlDecodedParam = decodeURIComponent(param);
					if (ss.startsWithString(urlDecodedParam, ':ff_') || ss.contains($tab_VizUriModel.$authoringPersistentParams, urlDecodedParam)) {
						filteredParams[param] = this.$queryParams[param];
					}
				}
			}
			finally {
				$t1.dispose();
			}
			this.$queryParams = filteredParams;
			return this;
		},
		fullPageLoad: function VizUriModel$FullPageLoad(window1) {
			window1 = window1 || tabBootstrap.Utility.get_locationWindow();
			this.setWindowLocation(null);
			window.setTimeout(function() {
				tab.WindowHelper.reload(window1, false);
			}, 300);
		},
		replaceState: function VizUriModel$ReplaceState(window) {
			if (tab.MiscUtil.isNullOrEmpty$2(window)) {
				window = tabBootstrap.Utility.get_locationWindow();
			}
			tab.HistoryUtil.replaceState(window, new Object(), '', this.get_uri());
		},
		setWindowLocation: function VizUriModel$SetWindowLocation(window) {
			if (tab.MiscUtil.isNullOrEmpty$2(window)) {
				window = tabBootstrap.Utility.get_locationWindow();
			}
			tab.WindowHelper.setLocationHref(window, this.get_uri());
		},
		setTopWindowLocation: function VizUriModel$SetTopWindowLocation() {
			this.setWindowLocation(window.top);
		},
		matchesCurrentWindowLocationUri: function VizUriModel$MatchesCurrentWindowLocationUri(window) {
			return ss.referenceEquals(this.get_uri(), $tab_VizUriModel.createForCurrentWindowLocation(window).get_uri());
		},
		matchesCurrentWindowLocationAbsoluteUri: function VizUriModel$MatchesCurrentWindowLocationAbsoluteUri() {
			return ss.referenceEquals(this.get_absoluteUri(), $tab_VizUriModel.createForCurrentWindowLocation(null).get_absoluteUri());
		},
		matchesCurrentWindowLocationPath: function VizUriModel$MatchesCurrentWindowLocationPath(window) {
			return ss.referenceEquals(this.get_path(), $tab_VizUriModel.createForCurrentWindowLocation(window).get_path());
		},
		removeHash: function VizUriModel$RemoveHash() {
			this.$hash = '';
		},
		$getAbsoluteUri: function VizUriModel$GetAbsoluteUri() {
			var relativeUri = this.$getRelativeUri();
			var absoluteUri = this.$origin;
			if (!ss.startsWithString(relativeUri, '/')) {
				absoluteUri += '/';
			}
			absoluteUri += relativeUri;
			return absoluteUri;
		},
		$getRelativeUri: function VizUriModel$GetRelativeUri() {
			var uri = new ss.StringBuilder();
			uri.append(this.$getPath());
			var queryParamsString = tab.MiscUtil.replaceUriQueryParameters('', this.$queryParams);
			if (!tab.MiscUtil.isNullOrEmpty$3(queryParamsString)) {
				uri.append(queryParamsString);
			}
			uri.append(this.$getHash());
			return uri.toString();
		},
		$getPath: function VizUriModel$GetPath() {
			var pathElements = [];
			if (!tab.MiscUtil.isNullOrEmpty$3(tsConfig.site_root) && !this.get_isAdminUri()) {
				pathElements.push(tsConfig.site_root);
			}
			else {
				pathElements.push('');
			}
			pathElements.push(this.$getUriModuleStringFromUroModuleName(this.$vizUriType));
			if (this.$vizUriType === 2) {
				pathElements.push(this.$workbookId);
				pathElements.push(this.$sheetId);
				if (!tab.MiscUtil.isNullOrEmpty$3(this.$authoringSheetName)) {
					pathElements.push(encodeURIComponent(this.$authoringSheetName));
				}
			}
			else if (this.$vizUriType === 1) {
				pathElements.push(this.$workbookId);
				pathElements.push(this.$sheetId);
				if (!tab.MiscUtil.isNullOrEmpty$3(this.$customizedView)) {
					pathElements.push(this.$customizedView);
				}
			}
			else if (this.$vizUriType === 4) {
				pathElements.push(this.$workbookId);
				pathElements.push(this.$sheetId);
			}
			else if (this.$vizUriType === 3 || this.$vizUriType === 7) {
				pathElements.push(this.$workbookId);
			}
			else if (this.$vizUriType === 5) {
				pathElements.push(tsConfig.guid);
			}
			else if (this.$vizUriType === 6) {
				pathElements.push(this.$workbookId);
				if (!tab.MiscUtil.isNullOrEmpty$3(this.$sheetId)) {
					pathElements.push(this.$sheetId);
				}
				pathElements.push('history');
				pathElements.push(this.$revisionNumber);
			}
			else if (this.get_isNlpLandingPageUri() || this.get_isNlpExplorationPageUri()) {
				pathElements.push(this.$datasourceUrl);
			}
			return pathElements.join('/');
		},
		$getHash: function VizUriModel$GetHash() {
			if (this.explicitNotGuest) {
				return '#guest=n';
			}
			return this.$hash;
		},
		$fillVizUriModel: function VizUriModel$FillVizUriModel(location) {
			var uriTypeStrings = _.keys($tab_VizUriModel.$uriTypeStringToUriType);
			var module = $tab_UriPathStripper.getModuleFromPath(location.pathname, uriTypeStrings);
			this.$vizUriType = this.$getUriModuleNameFromUrlModuleString(module);
			var meat = $tab_UriPathStripper.getMeatFromPath(location.pathname, uriTypeStrings);
			if (this.$vizUriType === 1) {
				this.$fillViewingVizUriModel(meat);
			}
			else if (this.$vizUriType === 2) {
				this.$fillAuthoringVizUriModel(meat);
			}
			else if (this.$vizUriType === 3 || this.$vizUriType === 7) {
				this.$fillAuthorNewWorkbookModel(meat);
			}
			else if (this.$vizUriType === 4) {
				this.$fillAdminVizUriModel(meat);
			}
			else if (this.$vizUriType === 6) {
				this.$fillRevisionHistoryUriModel(meat);
			}
			else if (this.get_isNlpLandingPageUri() || this.get_isNlpExplorationPageUri()) {
				this.$fillNlpPageUriModel(meat);
			}
			this.$queryParams = $tab_VizUriModel.$getRelevantQueryParameters(location);
			this.$hash = location.hash;
			this.$origin = BrowserSupport.BrowserSupport.GetOrigin(location);
		},
		$fillViewingVizUriModel: function VizUriModel$FillViewingVizUriModel(meat) {
			var pieces = meat.split('/');
			this.$workbookId = pieces[0];
			this.$sheetId = pieces[1];
			if (pieces.length > 2) {
				if (pieces.length === 3) {
					this.$customizedView = pieces[2];
				}
				this.$customizedView = pieces[2] + '/' + pieces[3];
			}
		},
		$fillAuthoringVizUriModel: function VizUriModel$FillAuthoringVizUriModel(meat) {
			var pieces = meat.split('/');
			this.$workbookId = pieces[0];
			this.$sheetId = pieces[1];
			if (pieces.length > 2) {
				this.$authoringSheetName = decodeURIComponent(pieces[2]);
			}
		},
		$fillAdminVizUriModel: function VizUriModel$FillAdminVizUriModel(meat) {
			var pieces = meat.split('/');
			this.$workbookId = pieces[0];
			this.$sheetId = pieces[1];
		},
		$fillAuthorNewWorkbookModel: function VizUriModel$FillAuthorNewWorkbookModel(meat) {
			this.$workbookId = meat;
		},
		$fillRevisionHistoryUriModel: function VizUriModel$FillRevisionHistoryUriModel(meat) {
			var pieces = meat.split('/');
			this.$workbookId = pieces[0];
			if (pieces.length > 3) {
				this.$sheetId = decodeURIComponent(pieces[1]);
				this.$revisionNumber = decodeURIComponent(pieces[3]);
			}
			else {
				this.$revisionNumber = decodeURIComponent(pieces[2]);
			}
		},
		$fillNlpPageUriModel: function VizUriModel$FillNlpPageUriModel(meat) {
			this.$datasourceUrl = meat;
		},
		$getUriModuleStringFromUroModuleName: function VizUriModel$GetUriModuleStringFromUroModuleName(uriModule) {
			return $tab_VizUriModel.$uriTypeToUriTypeString[uriModule];
		},
		$getUriModuleNameFromUrlModuleString: function VizUriModel$GetUriModuleNameFromUrlModuleString(uriModuleString) {
			return $tab_VizUriModel.$uriTypeStringToUriType[uriModuleString];
		},
		updateForViewingSheet: function VizUriModel$UpdateForViewingSheet(repoUrl) {
			if (!this.get_isViewingUri() && !this.get_isAuthoringUri() && !this.get_isAdminUri() && !this.get_isSharedViewUri() && !this.get_isRevisionHistoryUri()) {
				throw new ss.Exception('Cannot call UpdateForViewingNewTab() from a VizUriModel that does not have VizUriType Viewing');
			}
			var repoPathObject = new $tab_RepoPathObject(repoUrl);
			this.$workbookId = repoPathObject.get_workbookId();
			this.$sheetId = repoPathObject.get_sheetId();
			this.$authoringSheetName = '';
			return this;
		},
		updateForCustomizedView: function VizUriModel$UpdateForCustomizedView(cv) {
			if (!this.get_isViewingUri()) {
				throw new ss.Exception('Cannot call UpdateForCustomizedView() from a VizUriModel that does not have VizUriType Viewing');
			}
			var $t1 = cv.startViewId;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.$sheetId;
			}
			this.$sheetId = $t1;
			this.$customizedView = ss.formatString('{0}/{1}', $tab_VizUriModel.encodeUserName(cv.owner.username), cv.urlId);
			this.$authoringSheetName = '';
			this.set_originalView(false);
			return this;
		}
	});
	ss.initEnum($tab_VizUriType, $asm, { invalid: 0, viewing: 1, authoring: 2, authorNewWorkbookFromDataSource: 3, admin: 4, sharedView: 5, revisionHistory: 6, authorNewWorkbook: 7, nlpExplorationPage: 8, nlpLandingPage: 9 });
	ss.initEnum($tab_WaitFeedbackType, $asm, { immediateGlassAndSpinner: 0, immediateGlassDelayedSpinner: 1, delayedGlassAndSpinner: 2 });
	ss.initClass($tab_WaitHandler, $asm, {
		$handleMouseDown: function WaitHandler$HandleMouseDown(e) {
			e.stopImmediatePropagation();
			if (ss.referenceEquals(e.currentTarget, this.$glassPaneNode[0])) {
				this.$previousMouseDownTimestamp = e.timeStamp;
			}
		},
		$handleMouseUp: function WaitHandler$HandleMouseUp(e) {
			if (ss.referenceEquals(e.currentTarget, this.$glassPaneNode[0]) && e.timeStamp - this.$previousMouseDownTimestamp > 500) {
				console.warn('Element #loadingGlassPanereceived a mouseup event without receiving a mousedown event within ' + $tab_WaitHandler.$phantomMouseUpTimeWindowMs + 'ms prior. ' + 'This usually happens when a `UIBlocking.Immediate` command is dispatched by a `blur` event in the middle of a mouse click. ' + 'This can result in click events not firing as expected. See http://l/NwDZCa for troubleshooting options.');
			}
		},
		$onKey: function WaitHandler$OnKey(e) {
			if (this.$isVisible && this.$refcnt > 0) {
				e.stopImmediatePropagation();
			}
		},
		isBusy: function WaitHandler$IsBusy() {
			return this.$refcnt > 0;
		},
		addref: function WaitHandler$Addref(immediatelyBlock, showFeedback) {
			this.$refcnt += 1;
			tab.Log.get(this).debug('Increment WaitHandler refcnt to ' + this.$refcnt, []);
			if (this.$refcnt === 1 && !this.$isVisible && !this.$isLocked) {
				var feedbackType = (immediatelyBlock ? 1 : 2);
				this.$show(feedbackType, showFeedback);
			}
		},
		addrefAndShowFullWaitHandlerNow: function WaitHandler$AddrefAndShowFullWaitHandlerNow() {
			this.$refcnt += 1;
			tab.Log.get(this).debug('(SlamOn) Increment WaitHandler refcnt to ' + this.$refcnt, []);
			this.$show(0, true);
		},
		showAndLock: function WaitHandler$ShowAndLock() {
			if (!this.$isVisible) {
				this.$show(0, true);
			}
			this.$lock();
		},
		$lock: function WaitHandler$Lock() {
			this.$isLocked = true;
		},
		unlock: function WaitHandler$Unlock() {
			this.$isLocked = false;
		},
		release: function WaitHandler$Release() {
			this.$refcnt -= 1;
			tab.Log.get(this).debug('Decrement WaitHandler refcnt to ' + this.$refcnt.toString(), []);
			if (this.$refcnt < 0) {
				this.$refcnt = 0;
				tab.Log.get(this).debug('  => refcnt set to 0', []);
			}
			this.nudge();
		},
		nudge: function WaitHandler$Nudge() {
			if (this.$refcnt > 0 || this.$isLocked) {
				tab.Log.get(this).debug('Nudge - no change as > 0', []);
				return;
			}
			tab.Log.get(this).debug('Hiding WaitHandler via Nudge', []);
			this.$hide();
		},
		reset: function WaitHandler$Reset() {
			this.$clearTimers();
			this.$spinnerNode.hide().css('opacity', '0');
			if (this.$glassPaneNode.length === 0) {
				return;
			}
			var onEnd = ss.mkdel(this, function(node) {
				node.css('cursor', 'default').hide();
				tab.Log.get(this).debug((new Date()).getTime().toString() + ' - Fade out finished', []);
				var fake = $('.facadedom');
				if (fake.length > 0) {
					tab.Logger.getLoggerWithName($tab_DashboardModel.facadeDomId).debug((new Date()).getTime().toString() + ' Destroying facade', []);
					fake.remove();
					tab.Logger.getLoggerWithName($tab_DashboardModel.facadeDomId).debug((new Date()).getTime().toString() + ' Facade destroyed', []);
				}
			});
			$tab_WaitHandler.loadingElementFadeOut(this.$glassPaneNode, $tab_WaitHandler.$fadeOutDuration, onEnd);
		},
		onNextHide: function WaitHandler$OnNextHide(f) {
			this.$specialHideFunc = f;
		},
		$clearTimers: function WaitHandler$ClearTimers() {
			tab.Log.get(this).debug('Clear Timers', []);
			this.$glassInitialShowTimer = tab.MiscUtil.clearTimeout(this.$glassInitialShowTimer);
			this.$glassSecondaryShowTimer = tab.MiscUtil.clearTimeout(this.$glassSecondaryShowTimer);
			this.$spinnerShowTimer = tab.MiscUtil.clearTimeout(this.$spinnerShowTimer);
		},
		$hide: function WaitHandler$Hide() {
			if (ss.isValue(this.$specialHideFunc)) {
				tab.Log.get(this).debug('Calling special WaitHandler hide function', []);
				this.$specialHideFunc();
				this.$specialHideFunc = null;
				this.$clearTimers();
			}
			else {
				this.reset();
			}
			this.$isVisible = false;
		},
		$show: function WaitHandler$Show(waitFeedbackType, showFeedback) {
			tab.Log.get(this).debug((new Date()).getTime() + ' - Show WaitHandler', []);
			this.$clearTimers();
			this.$playOrDelayAnimation(waitFeedbackType, showFeedback);
			this.$isVisible = true;
		},
		$playOrDelayAnimation: function WaitHandler$PlayOrDelayAnimation(feedback, showFeedback) {
			switch (feedback) {
				case 0: {
					this.$playGlassShowAnimation($tab_WaitHandler.glassDefaultOpacity);
					if (showFeedback) {
						this.$delaySecondaryGlassShowAnimation();
						this.$playSpinnerShowAnimation();
					}
					break;
				}
				case 1: {
					this.$playGlassShowAnimation($tab_WaitHandler.glassDefaultOpacity);
					if (showFeedback) {
						this.$delaySecondaryGlassShowAnimation();
						this.$delaySpinnerShowAnimation();
					}
					break;
				}
				case 2: {
					this.$delayInitialGlassShowAnimation();
					if (showFeedback) {
						this.$delaySecondaryGlassShowAnimation();
						this.$delaySpinnerShowAnimation();
					}
					break;
				}
			}
		},
		$delayInitialGlassShowAnimation: function WaitHandler$DelayInitialGlassShowAnimation() {
			this.$glassInitialShowTimer = window.setTimeout(ss.mkdel(this, function() {
				this.$playGlassShowAnimation($tab_WaitHandler.glassDefaultOpacity);
			}), $tab_WaitHandler.glassShowDelay);
		},
		$delaySecondaryGlassShowAnimation: function WaitHandler$DelaySecondaryGlassShowAnimation() {
			this.$glassSecondaryShowTimer = window.setTimeout(ss.mkdel(this, function() {
				this.$playGlassShowAnimation($tab_WaitHandler.glassDelayedOpacity);
			}), this.glassOpacityChangeDelay);
		},
		$playGlassShowAnimation: function WaitHandler$PlayGlassShowAnimation(opacity) {
			if (this.$glassPaneNode.css('display') !== 'none' && ss.referenceEquals(this.$glassPaneNode.css('opacity'), opacity.toString())) {
				return;
			}
			this.$glassPaneNode.css('cursor', 'wait');
			$tab_WaitHandler.$loadingElementFadeIn(this.$glassPaneNode, $tab_WaitHandler.$glassFadeInDuration, opacity);
		},
		$delaySpinnerShowAnimation: function WaitHandler$DelaySpinnerShowAnimation() {
			this.$spinnerShowTimer = window.setTimeout(ss.mkdel(this, this.$playSpinnerShowAnimation), this.spinnerShowDelay);
		},
		$playSpinnerShowAnimation: function WaitHandler$PlaySpinnerShowAnimation() {
			$tab_WaitHandler.$loadingElementFadeIn(this.$spinnerNode, $tab_WaitHandler.$spinnerFadeInDuration, 1);
		}
	});
	ss.initClass($tab_WebCommandItemWrapper, $asm, {
		get_isChecked: function WebCommandItemWrapper$get_IsChecked() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isChecked() : $tab_CommandItemWrapper.prototype.get_isChecked.call(this));
		},
		get_isDefault: function WebCommandItemWrapper$get_IsDefault() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isDefault() : $tab_CommandItemWrapper.prototype.get_isDefault.call(this));
		},
		get_enabled: function WebCommandItemWrapper$get_Enabled() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isEnabled() : $tab_CommandItemWrapper.prototype.get_enabled.call(this));
		},
		get_isRadioOn: function WebCommandItemWrapper$get_IsRadioOn() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isRadioOn() : $tab_CommandItemWrapper.prototype.get_isRadioOn.call(this));
		},
		get_isVisible: function WebCommandItemWrapper$get_IsVisible() {
			return (ss.isValue(this.$webCommand) ? this.$webCommand.get_isVisible() : $tab_CommandItemWrapper.prototype.get_isVisible.call(this));
		}
	}, $tab_CommandItemWrapper, [ss.IDisposable, tab.IShortcutAction]);
	ss.initClass($tab_WebCommandRegistry, $asm, {
		registerCommandLocalOptions: function WebCommandRegistry$RegisterCommandLocalOptions(commandId, options) {
			var serializedCommandId = $tab_CommandUtils.serialize(commandId);
			if (!this.hasCommandLocalOptions(commandId)) {
				this.$commandLocalBehavior[serializedCommandId] = options;
			}
			else {
				tab.Log.get$1($tab_WebCommandRegistry).error(ss.formatString("Attempted to register local options for command '{0}' when that command already had local options registered", serializedCommandId), []);
			}
		},
		hasCommandLocalOptions: function WebCommandRegistry$HasCommandLocalOptions(commandId) {
			return ss.keyExists(this.$commandLocalBehavior, $tab_CommandUtils.serialize(commandId));
		},
		getCommandLocalOptions: function WebCommandRegistry$GetCommandLocalOptions(commandId) {
			var serializedCommandId = $tab_CommandUtils.serialize(commandId);
			if (!this.hasCommandLocalOptions(commandId)) {
				tab.Log.get$1($tab_WebCommandRegistry).error(ss.formatString("Attempted to get local options for command '{0}', but none have been registered", serializedCommandId), []);
			}
			return this.$commandLocalBehavior[serializedCommandId];
		},
		registerCommand: function WebCommandRegistry$RegisterCommand(commandId, classType) {
			this.$webCmdSingletonDictionary[$tab_CommandUtils.serialize(commandId)] = classType;
		},
		hasCommand: function WebCommandRegistry$HasCommand(commandName) {
			return ss.keyExists(this.$webCmdSingletonDictionary, $tab_CommandUtils.serialize(commandName));
		},
		createCommand: function WebCommandRegistry$CreateCommand(commandId) {
			if (this.hasCommand(commandId)) {
				var commandType = this.$webCmdSingletonDictionary[$tab_CommandUtils.serialize(commandId)];
				return ss.createInstance(commandType);
			}
			throw new ss.Exception('creating unregistered web command');
		},
		createCommandWithParams: function WebCommandRegistry$CreateCommandWithParams(commandId, newCmdParams) {
			if (this.hasCommand(commandId)) {
				var commandType = this.$webCmdSingletonDictionary[$tab_CommandUtils.serialize(commandId)];
				var newCmd = ss.createInstance(commandType);
				newCmd.transfer(newCmdParams);
				return newCmd;
			}
			throw new ss.Exception('creating unregistered web command');
		}
	});
	ss.initClass($tab_WebEditConnectionCmd, $asm, {
		validateInvokeParams: function WebEditConnectionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_WebEditConnectionCmd$Response]));
	ss.initClass($tab_WebEditConnectionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_WebFilteredFontListProvider, $asm, {
		get_fontFamilies: function WebFilteredFontListProvider$get_FontFamilies() {
			return Array.prototype.slice.call(this.$fontFamilies);
		},
		$constructListFromWebSupportedFonts: function WebFilteredFontListProvider$ConstructListFromWebSupportedFonts(provider) {
			var $t1 = provider.get_fontFamilies();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var family = $t1[$t2];
				var fonts = [];
				var $t3 = family.get_fonts();
				for (var $t4 = 0; $t4 < $t3.length; $t4++) {
					var fontName = $t3[$t4];
					if ($tab_WebFilteredFontListProvider.get_supportedFonts()[fontName]) {
						fonts.push(fontName);
					}
				}
				if (fonts.length > 0) {
					this.$fontFamilies.push(new $tab_FontFamily.$ctor1(family.get_fontGroup(), Array.prototype.slice.call(fonts)));
				}
			}
		},
		toSimpleFontList: function WebFilteredFontListProvider$ToSimpleFontList() {
			return $tab_SimpleFontListProvider.$toSimpleFontListInternal(this.$fontFamilies);
		}
	});
	ss.initClass($tab_WebRenameConnectionCmd, $asm, {
		validateInvokeParams: function WebRenameConnectionCmd$ValidateInvokeParams() {
			if (!ss.keyExists(this.cmdParams, 'connectionName')) {
				throw new ss.Exception('missing param DocParams.ConnectionName');
			}
			if (!ss.keyExists(this.cmdParams, 'connectionCaption')) {
				throw new ss.Exception('missing param DocParams.ConnectionCaption');
			}
		}
	}, ss.makeGenericType($tab_WebBaseCmd$2, [Object, $tab_WebRenameConnectionCmd$Response]));
	ss.initClass($tab_WebRenameConnectionCmd$Response, $asm, {
		$validateResponseParams: function Response$ValidateResponseParams() {
		}
	});
	ss.initClass($tab_WebZoneModel, $asm, {
		add_newWebZone: function WebZoneModel$add_NewWebZone(value) {
			this.$2$NewWebZoneField = ss.delegateCombine(this.$2$NewWebZoneField, value);
		},
		remove_newWebZone: function WebZoneModel$remove_NewWebZone(value) {
			this.$2$NewWebZoneField = ss.delegateRemove(this.$2$NewWebZoneField, value);
		},
		get_zoneModel: function WebZoneModel$get_ZoneModel() {
			return this.$zoneModel;
		},
		get_url: function WebZoneModel$get_Url() {
			return this.$zoneModel.pm.url;
		},
		update: function WebZoneModel$Update(webZonePresModel, context) {
			this.simpleSwapToUpdate(webZonePresModel, this.$2$NewWebZoneField, context);
		}
	}, $tab_Model);
	ss.initClass($tab_WidgetPlugins, $asm, {});
	ss.initClass($tab_WindowTableCalcModel, $asm, {
		add_modelUpdated: function WindowTableCalcModel$add_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateCombine(this.$3$ModelUpdatedField, value);
		},
		remove_modelUpdated: function WindowTableCalcModel$remove_ModelUpdated(value) {
			this.$3$ModelUpdatedField = ss.delegateRemove(this.$3$ModelUpdatedField, value);
		},
		get_$windowPresModel: function WindowTableCalcModel$get_WindowPresModel() {
			return this.pm;
		},
		get_$aggregationIndex: function WindowTableCalcModel$get_AggregationIndex() {
			return this.get_$windowPresModel().aggregationIndex;
		},
		get_aggregationValues: function WindowTableCalcModel$get_AggregationValues() {
			return this.get_$windowPresModel().aggregationValues;
		},
		get_aggregationCaptions: function WindowTableCalcModel$get_AggregationCaptions() {
			return this.get_$windowPresModel().aggregationCaptions;
		},
		get_aggregation: function WindowTableCalcModel$get_Aggregation() {
			ss.Debug.assert(this.get_$aggregationIndex() >= 0 && this.get_$aggregationIndex() < this.get_aggregationValues().length, 'invalid index');
			return this.get_aggregationValues()[this.get_$aggregationIndex()];
		},
		get_hasAggregation: function WindowTableCalcModel$get_HasAggregation() {
			return ss.isValue(this.get_aggregationValues()) && this.get_aggregationValues().length > 0;
		},
		get_numberOfPrevValues: function WindowTableCalcModel$get_NumberOfPrevValues() {
			return this.get_$windowPresModel().numberOfPrevValues;
		},
		get_numberOfNextValues: function WindowTableCalcModel$get_NumberOfNextValues() {
			return this.get_$windowPresModel().numberOfNextValues;
		},
		get_minPrevOrNextValues: function WindowTableCalcModel$get_MinPrevOrNextValues() {
			return this.get_$windowPresModel().minPrevOrNextValues;
		},
		get_maxPrevOrNextValues: function WindowTableCalcModel$get_MaxPrevOrNextValues() {
			return this.get_$windowPresModel().maxPrevOrNextValues;
		},
		get_summaryCaption: function WindowTableCalcModel$get_SummaryCaption() {
			return this.get_$windowPresModel().summaryCaption;
		},
		get_includeCurrentValue: function WindowTableCalcModel$get_IncludeCurrentValue() {
			return this.get_$windowPresModel().includeCurrent;
		},
		get_nullIfIncomplete: function WindowTableCalcModel$get_NullIfIncomplete() {
			return this.get_$windowPresModel().nullIfIncomplete;
		},
		update: function WindowTableCalcModel$Update(newPresModel, context) {
			this.simpleSwapToUpdate(newPresModel, this.$3$ModelUpdatedField, context);
		}
	}, $tab_TypeSpecificTableCalcModel);
	ss.initClass($tab_WorkbookModel, $asm, {
		add_dashboardUpdated: function WorkbookModel$add_DashboardUpdated(value) {
			this.$2$DashboardUpdatedField = ss.delegateCombine(this.$2$DashboardUpdatedField, value);
		},
		remove_dashboardUpdated: function WorkbookModel$remove_DashboardUpdated(value) {
			this.$2$DashboardUpdatedField = ss.delegateRemove(this.$2$DashboardUpdatedField, value);
		},
		add_dashboardDeleted: function WorkbookModel$add_DashboardDeleted(value) {
			this.$2$DashboardDeletedField = ss.delegateCombine(this.$2$DashboardDeletedField, value);
		},
		remove_dashboardDeleted: function WorkbookModel$remove_DashboardDeleted(value) {
			this.$2$DashboardDeletedField = ss.delegateRemove(this.$2$DashboardDeletedField, value);
		},
		add_sheetsChanged: function WorkbookModel$add_SheetsChanged(value) {
			this.$2$SheetsChangedField = ss.delegateCombine(this.$2$SheetsChangedField, value);
		},
		remove_sheetsChanged: function WorkbookModel$remove_SheetsChanged(value) {
			this.$2$SheetsChangedField = ss.delegateRemove(this.$2$SheetsChangedField, value);
		},
		add_uiModeChanged: function WorkbookModel$add_UIModeChanged(value) {
			this.$2$UIModeChangedField = ss.delegateCombine(this.$2$UIModeChangedField, value);
		},
		remove_uiModeChanged: function WorkbookModel$remove_UIModeChanged(value) {
			this.$2$UIModeChangedField = ss.delegateRemove(this.$2$UIModeChangedField, value);
		},
		add_newDataConnectionPrompt: function WorkbookModel$add_NewDataConnectionPrompt(value) {
			this.$2$NewDataConnectionPromptField = ss.delegateCombine(this.$2$NewDataConnectionPromptField, value);
		},
		remove_newDataConnectionPrompt: function WorkbookModel$remove_NewDataConnectionPrompt(value) {
			this.$2$NewDataConnectionPromptField = ss.delegateRemove(this.$2$NewDataConnectionPromptField, value);
		},
		add_dataConnectionPromptDismissed: function WorkbookModel$add_DataConnectionPromptDismissed(value) {
			this.$2$DataConnectionPromptDismissedField = ss.delegateCombine(this.$2$DataConnectionPromptDismissedField, value);
		},
		remove_dataConnectionPromptDismissed: function WorkbookModel$remove_DataConnectionPromptDismissed(value) {
			this.$2$DataConnectionPromptDismissedField = ss.delegateRemove(this.$2$DataConnectionPromptDismissedField, value);
		},
		add_newDataSchemaModel: function WorkbookModel$add_NewDataSchemaModel(value) {
			this.$2$NewDataSchemaModelField = ss.delegateCombine(this.$2$NewDataSchemaModelField, value);
		},
		remove_newDataSchemaModel: function WorkbookModel$remove_NewDataSchemaModel(value) {
			this.$2$NewDataSchemaModelField = ss.delegateRemove(this.$2$NewDataSchemaModelField, value);
		},
		add_sheetTypeChanged: function WorkbookModel$add_SheetTypeChanged(value) {
			this.$2$SheetTypeChangedField = ss.delegateCombine(this.$2$SheetTypeChangedField, value);
		},
		remove_sheetTypeChanged: function WorkbookModel$remove_SheetTypeChanged(value) {
			this.$2$SheetTypeChangedField = ss.delegateRemove(this.$2$SheetTypeChangedField, value);
		},
		get_sheetType: function WorkbookModel$get_SheetType() {
			return ss.coalesce($tab_WorkbookModel.$sheetTypeFromPresModel(this.pm), 'worksheet');
		},
		get_dataSchema: function WorkbookModel$get_DataSchema() {
			return this.$2$DataSchemaField;
		},
		set_dataSchema: function WorkbookModel$set_DataSchema(value) {
			this.$2$DataSchemaField = value;
		},
		get_commands: function WorkbookModel$get_Commands() {
			return this.$commands;
		},
		get_uiMode: function WorkbookModel$get_UIMode() {
			return (ss.isNullOrUndefined(this.pm) ? 'document' : this.pm.uiMode);
		},
		get_$dashboard: function WorkbookModel$get_Dashboard() {
			return this.$2$DashboardField;
		},
		set_$dashboard: function WorkbookModel$set_Dashboard(value) {
			this.$2$DashboardField = value;
		},
		get_isCurrentSheetStoryboard: function WorkbookModel$get_IsCurrentSheetStoryboard() {
			return ss.isValue(this.get_$dashboard()) && ss.isValue(this.get_$dashboard().pm) && this.get_$dashboard().pm.isStory;
		},
		get_isCurrentSheetDashboard: function WorkbookModel$get_IsCurrentSheetDashboard() {
			return ss.isValue(this.get_$dashboard()) && this.get_$dashboard().get_isDashboard();
		},
		get_currentSheetStoryPointId: function WorkbookModel$get_CurrentSheetStoryPointId() {
			if (this.get_isCurrentSheetStoryboard()) {
				var flipboard = this.get_storyboard().get_flipboard();
				if (ss.isValue(flipboard)) {
					return flipboard.get_currentStoryPointId();
				}
			}
			return 0;
		},
		get_storyboard: function WorkbookModel$get_Storyboard() {
			var contentDashboard = this.findContentDashboard();
			if (ss.isValue(contentDashboard) && ss.referenceEquals(contentDashboard.get_sheetName(), this.get_$dashboard().get_sheetName())) {
				return null;
			}
			return this.get_$dashboard();
		},
		get_hasPublishedSheets: function WorkbookModel$get_HasPublishedSheets() {
			return this.get_sheetsInfo().some(function(s) {
				return s.isPublished;
			});
		},
		get_sheetsInfo: function WorkbookModel$get_SheetsInfo() {
			return this.$2$SheetsInfoField;
		},
		set_sheetsInfo: function WorkbookModel$set_SheetsInfo(value) {
			this.$2$SheetsInfoField = value;
		},
		get_isWorkbookIncomplete: function WorkbookModel$get_IsWorkbookIncomplete() {
			return this.get_removedDataSourceCount() > 0 || this.get_removedSheetCount() > 0;
		},
		get_isWorkbookModifiedAuthoring: function WorkbookModel$get_IsWorkbookModifiedAuthoring() {
			return ss.isValue(this.pm) && this.pm.workbookModified;
		},
		get_isCurrentDashboardModified: function WorkbookModel$get_IsCurrentDashboardModified() {
			return ss.isValue(this.get_$dashboard()) && ss.isValue(this.get_$dashboard().pm) && ss.isValue(this.get_$dashboard().pm.modifiedSheets) && this.get_$dashboard().pm.modifiedSheets.length > 0;
		},
		get_removedDataSourceCount: function WorkbookModel$get_RemovedDataSourceCount() {
			return this.pm.removedDatasourceCount || 0;
		},
		get_removedSheetCount: function WorkbookModel$get_RemovedSheetCount() {
			return this.pm.removedSheetCount || 0;
		},
		get_outerDashboardRepositoryUrl: function WorkbookModel$get_OuterDashboardRepositoryUrl() {
			return ((ss.isValue(this.get_$dashboard()) && ss.isValue(this.get_$dashboard().pm) && ss.isValue(this.get_$dashboard().pm.sheetLayoutInfo)) ? this.get_$dashboard().pm.sheetLayoutInfo.repositoryUrl : null);
		},
		get_outerDashboardSize: function WorkbookModel$get_OuterDashboardSize() {
			if (ss.isNullOrUndefined(this.get_$dashboard())) {
				return null;
			}
			var portSize = this.get_$dashboard().get_dashboardSize();
			return { w: portSize.w, h: portSize.h };
		},
		get_connectionPromptModel: function WorkbookModel$get_ConnectionPromptModel() {
			return this.$2$ConnectionPromptModelField;
		},
		set_connectionPromptModel: function WorkbookModel$set_ConnectionPromptModel(value) {
			this.$2$ConnectionPromptModelField = value;
		},
		get_oAuthCredentialIds: function WorkbookModel$get_OAuthCredentialIds() {
			return this.$2$OAuthCredentialIdsField;
		},
		set_oAuthCredentialIds: function WorkbookModel$set_OAuthCredentialIds(value) {
			this.$2$OAuthCredentialIdsField = value;
		},
		get_formatPaneModel: function WorkbookModel$get_FormatPaneModel() {
			return this.$2$FormatPaneModelField;
		},
		set_formatPaneModel: function WorkbookModel$set_FormatPaneModel(value) {
			this.$2$FormatPaneModelField = value;
		},
		get_isDataTabUIMode: function WorkbookModel$get_IsDataTabUIMode() {
			return this.get_uiMode() === 'data-tab';
		},
		handleWorldReset: function WorkbookModel$HandleWorldReset() {
			this.set_$dashboard(null);
			this.set_dataSchema(null);
		},
		withOuterDashboard: function WorkbookModel$WithOuterDashboard(callback) {
			if (ss.isValue(this.get_$dashboard())) {
				callback(this.get_$dashboard());
				return;
			}
			var handleDashboardUpdated = null;
			handleDashboardUpdated = ss.mkdel(this, function(model) {
				callback(model);
				this.remove_dashboardUpdated(handleDashboardUpdated);
			});
			this.add_dashboardUpdated(handleDashboardUpdated);
		},
		withDashboard: function WorkbookModel$WithDashboard(callback) {
			var dash = this.findContentDashboard();
			if (ss.isValue(dash)) {
				callback(dash);
				return;
			}
			var handleNewDashboard = null;
			handleNewDashboard = ss.mkdel(this, function(model) {
				callback(model.get_contentDashboard());
				this.remove_dashboardUpdated(handleNewDashboard);
			});
			this.add_dashboardUpdated(handleNewDashboard);
		},
		$isSheetTypeChanged: function WorkbookModel$IsSheetTypeChanged(workbookPresModel) {
			return $tab_WorkbookModel.$hasSheetLayoutInfo(workbookPresModel) && ss.isValue($tab_WorkbookModel.$sheetTypeFromPresModel(this.pm)) && this.get_sheetType() !== workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetType;
		},
		addDashboardUpdatedHandler: function WorkbookModel$AddDashboardUpdatedHandler(handler) {
			this.add_dashboardUpdated(handler);
			if (ss.isValue(this.get_$dashboard())) {
				handler(this.get_$dashboard());
			}
		},
		removeDashboardHandler: function WorkbookModel$RemoveDashboardHandler(handler) {
			this.remove_dashboardUpdated(handler);
		},
		findContentDashboard: function WorkbookModel$FindContentDashboard() {
			return (ss.isNullOrUndefined(this.get_$dashboard()) ? null : this.get_$dashboard().get_contentDashboard());
		},
		$isSheetNameChanged: function WorkbookModel$IsSheetNameChanged(workbookPresModel) {
			return ss.isValue(workbookPresModel.dashboardPresModel) && ss.isValue(workbookPresModel.dashboardPresModel.sheetLayoutInfo) && !ss.referenceEquals(workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetName, tsConfig.current_sheet_name);
		},
		get_hasPrompt: function WorkbookModel$get_HasPrompt() {
			return ss.isValue(this.get_connectionPromptModel()) && !ss.isNullOrEmptyString(this.get_connectionPromptModel().get_connectionName());
		},
		$updateDataSchema: function WorkbookModel$UpdateDataSchema(context, workbookPresModel) {
			if (!ss.isValue(this.get_dataSchema())) {
				this.set_dataSchema(new $tab_DataSchemaModel(this));
				this.raiseEvent$1($tab_DataSchemaModel).call(this, this.$2$NewDataSchemaModelField, this.get_dataSchema(), context);
			}
			if (ss.isValue(workbookPresModel.schemaViewer)) {
				this.get_dataSchema().update(workbookPresModel.schemaViewer, context);
			}
		},
		$updateDataConnectionPrompt: function WorkbookModel$UpdateDataConnectionPrompt(workbookPresModel, context) {
			this.set_connectionPromptModel(new $tab_DataConnectionPromptModel(this));
			this.get_connectionPromptModel().update(workbookPresModel.variablePromptDialog);
			if (!ss.isNullOrEmptyString(this.get_connectionPromptModel().get_connectionName())) {
				this.raiseEvent$1($tab_DataConnectionPromptModel).call(this, this.$2$NewDataConnectionPromptField, this.get_connectionPromptModel(), context);
			}
			else {
				this.raiseEvent(this.$2$DataConnectionPromptDismissedField, context);
			}
		},
		$updateDashboard: function WorkbookModel$UpdateDashboard(workbookPresModel, context) {
			if (typeof(workbookPresModel.dashboardPresModel) === 'undefined') {
				tab.Log.get(this).debug('Dashboard unchanged', []);
			}
			else if (workbookPresModel.dashboardPresModel === null) {
				tab.Log.get(this).debug('Dashboard deleted', []);
				var m = this.get_$dashboard();
				this.set_$dashboard(null);
				this.raiseEvent$1($tab_DashboardModel).call(this, this.$2$DashboardDeletedField, m, context);
			}
			else {
				if (!ss.isValue(this.get_$dashboard())) {
					tab.Log.get(this).debug('New dashboard', []);
					this.set_$dashboard(new $tab_DashboardModel(this));
					this.raiseEvent$1($tab_DashboardModel).call(this, this.$2$DashboardUpdatedField, this.get_$dashboard(), context);
				}
				this.get_$dashboard().update(workbookPresModel.dashboardPresModel, context);
			}
		},
		update: function WorkbookModel$Update(workbookPresModel, context) {
			if (ss.isValue(workbookPresModel.variablePromptDialog)) {
				this.$updateDataConnectionPrompt(workbookPresModel, context);
			}
			tab.Log.get(this).debug('Update: modified=%s', [workbookPresModel.workbookModified]);
			if (ss.isValue(workbookPresModel.workbookModified) && (ss.isNullOrUndefined(this.pm) || this.get_isWorkbookModifiedAuthoring() !== workbookPresModel.workbookModified)) {
				this.raiseEvent(function() {
					$tab_WorkbookModel.fireWorkbookModifiedChanged(workbookPresModel.workbookModified);
				}, context);
			}
			if (this.$isSheetTypeChanged(workbookPresModel)) {
				this.raiseEvent$1(Object).call(this, this.$2$SheetTypeChangedField, workbookPresModel.dashboardPresModel.sheetLayoutInfo.sheetType, context);
			}
			var sheetsChanged = false;
			if (this.$isSheetNameChanged(workbookPresModel)) {
				tab.Log.get(this).debug('Dashboard (tab) changed', []);
				this.handleWorldReset();
				sheetsChanged = true;
			}
			this.$updateDataSchema(context, workbookPresModel);
			this.$updateDashboard(workbookPresModel, context);
			if (ss.isValue(workbookPresModel.commands)) {
				this.$commands.update(workbookPresModel.commands, context);
			}
			if (ss.isValue(workbookPresModel.sheetsInfo) && !_.isEqual(workbookPresModel.sheetsInfo, this.get_sheetsInfo())) {
				this.set_sheetsInfo(ss.cast(workbookPresModel.sheetsInfo, Array));
				sheetsChanged = true;
			}
			if (sheetsChanged) {
				this.raiseEvent$1($tab_WorkbookModel).call(this, this.$2$SheetsChangedField, this, context);
			}
			workbookPresModel.uiMode = workbookPresModel.uiMode || 'document';
			if (ss.isNullOrUndefined(this.pm) || this.pm.uiMode !== workbookPresModel.uiMode) {
				this.raiseEvent(this.$2$UIModeChangedField, context);
			}
			if (ss.isValue(workbookPresModel.formatPane)) {
				this.get_formatPaneModel().update(workbookPresModel.formatPane, context);
			}
			this.swapAndCopyPresModel(workbookPresModel);
		}
	}, $tab_Model);
	ss.initClass($tab_WorkbookTemplateCreationRefreshExtractJob, $asm, {
		get_jobInProgress: function WorkbookTemplateCreationRefreshExtractJob$get_JobInProgress() {
			return this.$1$JobInProgressField;
		},
		set_jobInProgress: function WorkbookTemplateCreationRefreshExtractJob$set_JobInProgress(value) {
			this.$1$JobInProgressField = value;
		},
		get_jobId: function WorkbookTemplateCreationRefreshExtractJob$get_JobId() {
			return this.$1$JobIdField;
		},
		set_jobId: function WorkbookTemplateCreationRefreshExtractJob$set_JobId(value) {
			this.$1$JobIdField = value;
		}
	});
	ss.initEnum($tab_WorkbookTemplatesEnabledState, $asm, { enabled: 'enabled', invalidpermissions: 'invalidpermissions', servicedown: 'servicedown', featureflagoff: 'featureflagoff' }, true);
	ss.initClass($tab_WorkgroupDataAlert, $asm, {
		get_id: function WorkgroupDataAlert$get_Id() {
			return this.$presModel.id;
		},
		get_title: function WorkgroupDataAlert$get_Title() {
			return this.$presModel.title;
		},
		get_deviceType: function WorkgroupDataAlert$get_DeviceType() {
			return this.$presModel.deviceType;
		},
		get_owner: function WorkgroupDataAlert$get_Owner() {
			return this.$owner;
		},
		get_recipientsCount: function WorkgroupDataAlert$get_RecipientsCount() {
			return this.$presModel.recipientsCount;
		},
		get_notificationIntervalInMinutes: function WorkgroupDataAlert$get_NotificationIntervalInMinutes() {
			return this.$presModel.notificationIntervalInMinutes;
		},
		get_lastChecked: function WorkgroupDataAlert$get_LastChecked() {
			return this.$presModel.lastChecked;
		},
		get_lastSentForCurrentUser: function WorkgroupDataAlert$get_LastSentForCurrentUser() {
			return this.$presModel.lastSentForCurrentUser;
		},
		get_isCurrentUserSubscribed: function WorkgroupDataAlert$get_IsCurrentUserSubscribed() {
			return this.$presModel.isCurrentUserSubscribed;
		},
		get_viewType: function WorkgroupDataAlert$get_ViewType() {
			return this.$presModel.context.type;
		},
		get_viewName: function WorkgroupDataAlert$get_ViewName() {
			return this.$presModel.context.name;
		},
		get_customizedViewId: function WorkgroupDataAlert$get_CustomizedViewId() {
			return ((this.get_viewType() === 'view') ? null : this.$presModel.context.id);
		},
		get_targetUrlId: function WorkgroupDataAlert$get_TargetUrlId() {
			return this.$presModel.context.targetUrlId;
		},
		get_dataSpecification: function WorkgroupDataAlert$get_DataSpecification() {
			return this.$presModel.dataSpecification;
		},
		get_isSuspended: function WorkgroupDataAlert$get_IsSuspended() {
			return tab.FeatureFlags.isEnabled('SuspendDataAlerts') && this.$presModel.suspendState !== 'NotSuspended';
		},
		get_failureCount: function WorkgroupDataAlert$get_FailureCount() {
			return this.$presModel.failureCount;
		},
		get_isPublic: function WorkgroupDataAlert$get_IsPublic() {
			return this.$presModel.isPublic;
		}
	});
	ss.initClass($tab_WorkgroupDataSource, $asm, {
		get_certificationDetails: function WorkgroupDataSource$get_CertificationDetails() {
			return this.$presModel.certificationDetails;
		},
		get_name: function WorkgroupDataSource$get_Name() {
			return this.$presModel.name;
		},
		get_description: function WorkgroupDataSource$get_Description() {
			return this.$presModel.description;
		},
		get_id: function WorkgroupDataSource$get_Id() {
			return this.$presModel.id;
		},
		get_datasourceId: function WorkgroupDataSource$get_DatasourceId() {
			return this.$presModel.datasourceId;
		},
		get_connectionTypeDisplayName: function WorkgroupDataSource$get_ConnectionTypeDisplayName() {
			return this.$presModel.connectionTypeDisplayName;
		},
		get_repositoryUrl: function WorkgroupDataSource$get_RepositoryUrl() {
			return this.$presModel.repositoryUrl;
		},
		get_connectedWorkbooksCount: function WorkgroupDataSource$get_ConnectedWorkbooksCount() {
			return this.$presModel.connectedWorkbooksCount;
		},
		get_dataConnectionsCount: function WorkgroupDataSource$get_DataConnectionsCount() {
			return this.$presModel.dataConnectionsCount;
		},
		get_ownerId: function WorkgroupDataSource$get_OwnerId() {
			return this.$presModel.ownerId;
		},
		get_owner: function WorkgroupDataSource$get_Owner() {
			return this.$owner;
		},
		get_projectId: function WorkgroupDataSource$get_ProjectId() {
			return this.$presModel.projectId;
		},
		get_project: function WorkgroupDataSource$get_Project() {
			return this.$project;
		},
		get_usageInfo: function WorkgroupDataSource$get_UsageInfo() {
			return this.$presModel.usageInfo;
		},
		get_connectionDetails: function WorkgroupDataSource$get_ConnectionDetails() {
			return this.$presModel.connectionDetails;
		},
		get_lastRefreshedAt: function WorkgroupDataSource$get_LastRefreshedAt() {
			return this.$presModel.lastRefreshedAt;
		},
		get_lastRefreshedDescription: function WorkgroupDataSource$get_LastRefreshedDescription() {
			if (tab.MiscUtil.isNullOrEmpty$3(this.$presModel.lastRefreshedAt)) {
				return tab.Strings.ServerDataSourceLive;
			}
			var date = tableau.format.formatToJSCompliantFormat(this.$presModel.lastRefreshedAt, tableau.format.isO8601DateTimeFormat, 2, tableau.format.baseTimestamp);
			var format = {};
			format.format = $tab_ApplicationModel.get_instance().get_localeDateFormat();
			format.locale = tsConfig.locale;
			format.timeFormat = $tab_ApplicationModel.get_instance().get_localeTimeFormat();
			format.locale_formatting_strings = tableau.format.defaultLocaleStrings;
			return tableau.format.formatJsDateTime(new Date(date), format, 2, 't');
		},
		get_connectsToDescription: function WorkgroupDataSource$get_ConnectsToDescription() {
			if (ss.isNullOrUndefined(this.get_connectionDetails())) {
				return '';
			}
			var firstConnectionName;
			if (this.get_connectionDetails().type === 'database' || this.get_connectionDetails().type === 'webdata-direct') {
				firstConnectionName = this.get_connectionDetails().serverName;
			}
			else if (this.get_connectionDetails().type === 'file') {
				firstConnectionName = $tab_WorkgroupDataSource.$filePathToBasename(this.get_connectionDetails().fileName);
			}
			else {
				firstConnectionName = this.get_connectionDetails().name;
			}
			if (this.get_dataConnectionsCount() > 1) {
				return tab.Strings.ServerDataSourceConnectsToSeveral(firstConnectionName, this.get_dataConnectionsCount() - 1);
			}
			else {
				return firstConnectionName;
			}
		}
	});
	ss.initClass($tab_WorkgroupServerCommands, $asm, {});
	ss.initEnum($tab_WorkgroupServerErrorCode, $asm, { pending: -1, none: 0, unlicensedUserError: 90, userInvalidEmailAddress: 10011, ddaDatasourceError: 210006, ddaNoViewPermissionsError: 210007, ddaNoDownloadPermissionsError: 210008 });
	ss.initClass($tab_WorkgroupServerOauthSettings, $asm, {
		isGenericAuthSupported: function WorkgroupServerOauthSettings$IsGenericAuthSupported(type) {
			var selectedOauthSetting = _.find(this.$oauthSettingsPresmodels, function(oauthSetting) {
				return ss.referenceEquals(oauthSetting.type, type);
			});
			return ss.isValue(selectedOauthSetting) && selectedOauthSetting.supportsGenericAuth;
		},
		getDisplayName: function WorkgroupServerOauthSettings$GetDisplayName(type, language) {
			var selectedOauthSetting = _.find(this.$oauthSettingsPresmodels, function(oauthSetting) {
				return ss.referenceEquals(oauthSetting.type, type);
			});
			if (ss.isValue(selectedOauthSetting)) {
				var languageKey = (ss.keyExists(selectedOauthSetting.displayNames, language) ? language : tab.LocaleStrings.unitedStates);
				return selectedOauthSetting.displayNames[languageKey];
			}
			else {
				return type;
			}
		}
	});
	ss.initClass($tab_WorkgroupServerRequest, $asm, {});
	ss.initClass($tab_WorkgroupWorkbookTemplates, $asm, {
		get_templates: function WorkgroupWorkbookTemplates$get_Templates() {
			return this.$templatePresmodels;
		}
	});
	ss.initClass($tab_WorksheetServerCommands, $asm, {});
	ss.initClass($tab_WorldCheckpointHolder, $asm, {
		checkpointAppPresModel: function WorldCheckpointHolder$CheckpointAppPresModel() {
			this.$worldCheckpoint = $tab_ApplicationModel.get_instance().pm;
			this.currentWorldDiffersFromCheckpoint = false;
		},
		revertLocalChanges: function WorldCheckpointHolder$RevertLocalChanges() {
			if (this.currentWorldDiffersFromCheckpoint) {
				$tab_Model.nonWorldUpdate(ss.mkdel(this, function(ctx) {
					ctx.dialogProvider = this.$commonDialogProvider;
					$tab_ApplicationModel.get_instance().update(this.$worldCheckpoint, ctx);
				}));
				this.currentWorldDiffersFromCheckpoint = false;
			}
		},
		markCurrentWorldAsDirty: function WorldCheckpointHolder$MarkCurrentWorldAsDirty() {
			this.currentWorldDiffersFromCheckpoint = true;
		},
		worldCheckpoint: function WorldCheckpointHolder$WorldCheckpoint() {
			var clone = tab.MiscUtil.cloneObject(this.$worldCheckpoint);
			return clone;
		}
	});
	ss.initClass($tab_WorldUpdateInterceptor, $asm, {
		add_onBootstrapResponse: function WorldUpdateInterceptor$add_OnBootstrapResponse(value) {
			this.$1$OnBootstrapResponseField = ss.delegateCombine(this.$1$OnBootstrapResponseField, value);
		},
		remove_onBootstrapResponse: function WorldUpdateInterceptor$remove_OnBootstrapResponse(value) {
			this.$1$OnBootstrapResponseField = ss.delegateRemove(this.$1$OnBootstrapResponseField, value);
		},
		add_onCommandResponse: function WorldUpdateInterceptor$add_OnCommandResponse(value) {
			this.$1$OnCommandResponseField = ss.delegateCombine(this.$1$OnCommandResponseField, value);
		},
		remove_onCommandResponse: function WorldUpdateInterceptor$remove_OnCommandResponse(value) {
			this.$1$OnCommandResponseField = ss.delegateRemove(this.$1$OnCommandResponseField, value);
		},
		add_onProgressiveLoadComplete: function WorldUpdateInterceptor$add_OnProgressiveLoadComplete(value) {
			this.$1$OnProgressiveLoadCompleteField = ss.delegateCombine(this.$1$OnProgressiveLoadCompleteField, value);
		},
		remove_onProgressiveLoadComplete: function WorldUpdateInterceptor$remove_OnProgressiveLoadComplete(value) {
			this.$1$OnProgressiveLoadCompleteField = ss.delegateRemove(this.$1$OnProgressiveLoadCompleteField, value);
		},
		add_onDashboardLoadComplete: function WorldUpdateInterceptor$add_OnDashboardLoadComplete(value) {
			this.$1$OnDashboardLoadCompleteField = ss.delegateCombine(this.$1$OnDashboardLoadCompleteField, value);
		},
		remove_onDashboardLoadComplete: function WorldUpdateInterceptor$remove_OnDashboardLoadComplete(value) {
			this.$1$OnDashboardLoadCompleteField = ss.delegateRemove(this.$1$OnDashboardLoadCompleteField, value);
		},
		raiseOnProgressiveLoadComplete: function WorldUpdateInterceptor$RaiseOnProgressiveLoadComplete() {
			if (!ss.staticEquals(this.$1$OnProgressiveLoadCompleteField, null)) {
				this.$1$OnProgressiveLoadCompleteField();
			}
		},
		raiseOnBootstrapResponse: function WorldUpdateInterceptor$RaiseOnBootstrapResponse(appPresModel) {
			var handler = this.$1$OnBootstrapResponseField;
			if (!ss.staticEquals(handler, null)) {
				handler(appPresModel);
			}
		},
		raiseOnCommandResponse: function WorldUpdateInterceptor$RaiseOnCommandResponse(args) {
			var handler = this.$1$OnCommandResponseField;
			if (!ss.staticEquals(handler, null)) {
				handler(args);
			}
		},
		raiseOnDashboardLoadComplete: function WorldUpdateInterceptor$RaiseOnDashboardLoadComplete() {
			if (!ss.staticEquals(this.$1$OnDashboardLoadCompleteField, null)) {
				this.$1$OnDashboardLoadCompleteField();
			}
		}
	});
	ss.initClass($tab_WorldUpdateServerCommands, $asm, {});
	ss.initClass($tab_XhrUtil, $asm, {
		request: function XhrUtil$Request(args) {
			var SupportsAcceptedHeaderName = 'X-Tsi-Supports-Accepted';
			args.headers = args.headers || {};
			if (ss.keyExists(args.headers, SupportsAcceptedHeaderName) && ss.unbox(ss.cast(args.headers[SupportsAcceptedHeaderName], Boolean)) === false) {
				delete args.headers[SupportsAcceptedHeaderName];
			}
			else {
				args.headers[SupportsAcceptedHeaderName] = true;
			}
			if (ss.isValue($tab_XhrUtil.$currentTabName) && $tab_XhrUtil.$currentTabName.length > 0) {
				args.headers['X-Tsi-Active-Tab'] = encodeURIComponent($tab_XhrUtil.$currentTabName);
			}
			if (ss.isValue(args.complete)) {
				var oldCompleted = args.complete;
				args.complete = function(xhr, textStatus) {
					xhr['args'] = args;
					oldCompleted(xhr, textStatus);
				};
			}
			if (ss.isValue(args.success)) {
				var oldSuccess = args.success;
				args.success = function(data, textStatus1, xhr1) {
					xhr1['args'] = args;
					oldSuccess(data, textStatus1, xhr1);
				};
			}
			if (ss.isValue(args.error)) {
				var oldError = args.error;
				args.error = function(xhr2, textStatus2, error) {
					xhr2['args'] = args;
					oldError(xhr2, textStatus2, error);
				};
			}
			if (ss.isValue(args.beforeSend)) {
				var oldBeforeSend = args.beforeSend;
				args.beforeSend = function(xhr3) {
					xhr3['args'] = args;
					oldBeforeSend(xhr3);
				};
			}
			var opt = args;
			return $.ajax(opt);
		}
	});
	ss.initClass($tab_ZoneCommonModel, $asm, {
		add_resizeZone: function ZoneCommonModel$add_ResizeZone(value) {
			this.$2$ResizeZoneField = ss.delegateCombine(this.$2$ResizeZoneField, value);
		},
		remove_resizeZone: function ZoneCommonModel$remove_ResizeZone(value) {
			this.$2$ResizeZoneField = ss.delegateRemove(this.$2$ResizeZoneField, value);
		},
		add_changeZoneTitleVisibility: function ZoneCommonModel$add_ChangeZoneTitleVisibility(value) {
			this.$2$ChangeZoneTitleVisibilityField = ss.delegateCombine(this.$2$ChangeZoneTitleVisibilityField, value);
		},
		remove_changeZoneTitleVisibility: function ZoneCommonModel$remove_ChangeZoneTitleVisibility(value) {
			this.$2$ChangeZoneTitleVisibilityField = ss.delegateRemove(this.$2$ChangeZoneTitleVisibilityField, value);
		},
		add_changeZoneFloatingState: function ZoneCommonModel$add_ChangeZoneFloatingState(value) {
			this.$2$ChangeZoneFloatingStateField = ss.delegateCombine(this.$2$ChangeZoneFloatingStateField, value);
		},
		remove_changeZoneFloatingState: function ZoneCommonModel$remove_ChangeZoneFloatingState(value) {
			this.$2$ChangeZoneFloatingStateField = ss.delegateRemove(this.$2$ChangeZoneFloatingStateField, value);
		},
		get_zoneDescription: function ZoneCommonModel$get_ZoneDescription() {
			return this.get_zoneCommonPresModel().name;
		},
		get_zoneCommonPresModel: function ZoneCommonModel$get_ZoneCommonPresModel() {
			return ss.coalesce(this.pm, new Object());
		},
		get_zoneId: function ZoneCommonModel$get_ZoneId() {
			return this.get_zoneCommonPresModel().zoneId;
		},
		get_parentZoneId: function ZoneCommonModel$get_ParentZoneId() {
			return this.get_zoneCommonPresModel().parentZoneId;
		},
		get_zoneType: function ZoneCommonModel$get_ZoneType() {
			return ss.coalesce(this.get_zoneCommonPresModel().zoneType, 'invalid');
		},
		get_objectType: function ZoneCommonModel$get_ObjectType() {
			return ss.coalesce(this.get_zoneCommonPresModel().dashboardObjectType, 'invalid');
		},
		get_zoneLayoutType: function ZoneCommonModel$get_ZoneLayoutType() {
			return ss.coalesce(this.get_zoneCommonPresModel().zoneLayoutType, 'trivial');
		},
		get_contentX: function ZoneCommonModel$get_ContentX() {
			return this.get_zoneCommonPresModel().contentX;
		},
		get_contentY: function ZoneCommonModel$get_ContentY() {
			return this.get_zoneCommonPresModel().contentY;
		},
		get_contentHeight: function ZoneCommonModel$get_ContentHeight() {
			return this.get_zoneCommonPresModel().contentH - 2 * this.get_contentBorderWidth();
		},
		get_contentWidth: function ZoneCommonModel$get_ContentWidth() {
			return this.get_zoneCommonPresModel().contentW - 2 * this.get_contentBorderWidth();
		},
		get_height: function ZoneCommonModel$get_Height() {
			return this.get_zoneCommonPresModel().h;
		},
		get_width: function ZoneCommonModel$get_Width() {
			return this.get_zoneCommonPresModel().w;
		},
		get_x: function ZoneCommonModel$get_X() {
			var $t1 = this.$localX;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_zoneCommonPresModel().x;
			}
			return $t1;
		},
		get_y: function ZoneCommonModel$get_Y() {
			var $t1 = this.$localY;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.get_zoneCommonPresModel().y;
			}
			return $t1;
		},
		get_zoneContentRectXY: function ZoneCommonModel$get_ZoneContentRectXY() {
			return { x: this.get_contentX(), y: this.get_contentY(), w: this.get_contentWidth(), h: this.get_contentHeight() };
		},
		get_isFloating: function ZoneCommonModel$get_IsFloating() {
			return this.get_zoneCommonPresModel().isFloating;
		},
		get_isZoneInGroup: function ZoneCommonModel$get_IsZoneInGroup() {
			return this.get_zoneCommonPresModel().isZoneInGroup;
		},
		get_hasTitle: function ZoneCommonModel$get_HasTitle() {
			return this.get_zoneCommonPresModel().hasTitle;
		},
		get_canHaveTitle: function ZoneCommonModel$get_CanHaveTitle() {
			return this.get_zoneCommonPresModel().canHaveTitle;
		},
		get_canFloat: function ZoneCommonModel$get_CanFloat() {
			return this.get_zoneCommonPresModel().canFloat;
		},
		get_isHorizontal: function ZoneCommonModel$get_IsHorizontal() {
			return this.get_zoneCommonPresModel().isHorizontal;
		},
		get_hasBorder: function ZoneCommonModel$get_HasBorder() {
			return $tab_ModelUtils.hasBorder(this.get_zoneStyle());
		},
		get_contentBorderWidth: function ZoneCommonModel$get_ContentBorderWidth() {
			if ($tab_ModelUtils.hasBorder(this.get_contentStyle())) {
				return this.get_contentStyle().get_borderWidth();
			}
			return 0;
		},
		get_zoneStyle: function ZoneCommonModel$get_ZoneStyle() {
			return this.$zoneStyleModel;
		},
		get_contentStyle: function ZoneCommonModel$get_ContentStyle() {
			return this.$contentStyleModel;
		},
		update: function ZoneCommonModel$Update(zoneCommonPresModel, context) {
			this.resetLocalPosition(context);
			if (ss.isValue(zoneCommonPresModel)) {
				zoneCommonPresModel.parentZoneId = zoneCommonPresModel.parentZoneId || 0;
				zoneCommonPresModel.isFloating = zoneCommonPresModel.isFloating || false;
				zoneCommonPresModel.isZoneInGroup = zoneCommonPresModel.isZoneInGroup || false;
				zoneCommonPresModel.isHorizontal = zoneCommonPresModel.isHorizontal || false;
				zoneCommonPresModel.canHaveTitle = ss.coalesce(zoneCommonPresModel.canHaveTitle, true);
				zoneCommonPresModel.canFloat = ss.coalesce(zoneCommonPresModel.canFloat, true);
				zoneCommonPresModel.contentW = zoneCommonPresModel.contentW || zoneCommonPresModel.w;
				zoneCommonPresModel.contentH = zoneCommonPresModel.contentH || zoneCommonPresModel.h;
				zoneCommonPresModel.contentX = zoneCommonPresModel.contentX || zoneCommonPresModel.x;
				zoneCommonPresModel.contentY = zoneCommonPresModel.contentY || zoneCommonPresModel.y;
				if (!this.isNewZoneSizeSameAsOld(zoneCommonPresModel)) {
					this.raiseEvent(this.$2$ResizeZoneField, context);
				}
				if (ss.isValue(zoneCommonPresModel.styledBox)) {
					this.$zoneStyleModel.update(zoneCommonPresModel.styledBox, context);
				}
				if (ss.isValue(zoneCommonPresModel.globalStyledBox)) {
					this.$contentStyleModel.update(zoneCommonPresModel.globalStyledBox, context);
				}
			}
			if (ss.isValue(this.get_zoneCommonPresModel()) && this.get_zoneCommonPresModel().hasTitle !== zoneCommonPresModel.hasTitle) {
				this.raiseEvent(this.$2$ChangeZoneTitleVisibilityField, context);
			}
			if (ss.isValue(this.get_zoneCommonPresModel()) && (this.get_zoneCommonPresModel().isFloating !== zoneCommonPresModel.isFloating || this.get_zoneCommonPresModel().canFloat !== zoneCommonPresModel.canFloat)) {
				this.raiseEvent(this.$2$ChangeZoneFloatingStateField, context);
			}
			this.swapAndCopyPresModel(zoneCommonPresModel);
		},
		updateSingleZoneLocalPosition: function ZoneCommonModel$UpdateSingleZoneLocalPosition(x, y) {
			if (ss.referenceEquals(this.$localX, x) && ss.referenceEquals(this.$localY, y)) {
				return;
			}
			this.$localX = x;
			this.$localY = y;
			$tab_Model.nonWorldUpdate(ss.mkdel(this, function(ctx) {
				this.raiseEvent(this.$2$ResizeZoneField, ctx);
			}));
		},
		resetLocalPosition: function ZoneCommonModel$ResetLocalPosition(context) {
			if (ss.isValue(this.$localY) || ss.isValue(this.$localX)) {
				this.$localY = null;
				this.$localX = null;
				this.raiseEvent(this.$2$ResizeZoneField, context);
			}
		},
		isNewZoneSizeSameAsOld: function ZoneCommonModel$IsNewZoneSizeSameAsOld(newPM) {
			if (!ss.isValue(newPM)) {
				return true;
			}
			if (ss.isValue(this.pm)) {
				return ss.coalesce(newPM.contentH, newPM.h) === this.get_contentHeight() && ss.coalesce(newPM.contentW, newPM.w) === this.get_contentWidth() && ss.coalesce(newPM.contentX, newPM.x) === this.get_contentX() && ss.coalesce(newPM.contentY, newPM.y) === this.get_contentY() && newPM.h === this.get_height() && newPM.w === this.get_width() && newPM.x === this.get_x() && newPM.y === this.get_y();
			}
			return false;
		}
	}, $tab_Model);
	ss.initClass($tab_ZoneContentWrapperModel, $asm, {
		get_zone: function ZoneContentWrapperModel$get_Zone() {
			return ss.safeCast(this.parent, $tab_ZoneModel);
		}
	}, $tab_Model);
	ss.initClass($tab_ZoneModel, $asm, {
		add_newZoneContent: function ZoneModel$add_NewZoneContent(value) {
			this.$2$NewZoneContentField = ss.delegateCombine(this.$2$NewZoneContentField, value);
		},
		remove_newZoneContent: function ZoneModel$remove_NewZoneContent(value) {
			this.$2$NewZoneContentField = ss.delegateRemove(this.$2$NewZoneContentField, value);
		},
		add_updateZIndex: function ZoneModel$add_UpdateZIndex(value) {
			this.$2$UpdateZIndexField = ss.delegateCombine(this.$2$UpdateZIndexField, value);
		},
		remove_updateZIndex: function ZoneModel$remove_UpdateZIndex(value) {
			this.$2$UpdateZIndexField = ss.delegateRemove(this.$2$UpdateZIndexField, value);
		},
		add_removeZoneContent: function ZoneModel$add_RemoveZoneContent(value) {
			this.$2$RemoveZoneContentField = ss.delegateCombine(this.$2$RemoveZoneContentField, value);
		},
		remove_removeZoneContent: function ZoneModel$remove_RemoveZoneContent(value) {
			this.$2$RemoveZoneContentField = ss.delegateRemove(this.$2$RemoveZoneContentField, value);
		},
		add_updateZone: function ZoneModel$add_UpdateZone(value) {
			this.$2$UpdateZoneField = ss.delegateCombine(this.$2$UpdateZoneField, value);
		},
		remove_updateZone: function ZoneModel$remove_UpdateZone(value) {
			this.$2$UpdateZoneField = ss.delegateRemove(this.$2$UpdateZoneField, value);
		},
		add_childrenAdded: function ZoneModel$add_ChildrenAdded(value) {
			this.$2$ChildrenAddedField = ss.delegateCombine(this.$2$ChildrenAddedField, value);
		},
		remove_childrenAdded: function ZoneModel$remove_ChildrenAdded(value) {
			this.$2$ChildrenAddedField = ss.delegateRemove(this.$2$ChildrenAddedField, value);
		},
		get_model: function ZoneModel$get_Model() {
			return this.$zoneContentModel;
		},
		get_dashboardModel: function ZoneModel$get_DashboardModel() {
			return this.$dashboardModel;
		},
		get_zoneCommonModel: function ZoneModel$get_ZoneCommonModel() {
			return this.$zoneCommonModel;
		},
		get_visualModel: function ZoneModel$get_VisualModel() {
			if (this.$zoneCommonModel.get_zoneType() === 'viz') {
				return ss.cast(this.$zoneContentModel, $tab_VisualModel);
			}
			return null;
		},
		get_worksheetName: function ZoneModel$get_WorksheetName() {
			if (ss.isNullOrUndefined(this.pm)) {
				return null;
			}
			else {
				return this.pm.worksheet;
			}
		},
		get_zoneDescription: function ZoneModel$get_ZoneDescription() {
			return this.get_zoneCommonModel().get_zoneDescription();
		},
		get_zoneId: function ZoneModel$get_ZoneId() {
			return this.pm.zoneId;
		},
		get_parentZoneId: function ZoneModel$get_ParentZoneId() {
			return this.get_zoneCommonModel().get_parentZoneId();
		},
		get_zoneType: function ZoneModel$get_ZoneType() {
			return this.get_zoneCommonModel().get_zoneType();
		},
		get_objectType: function ZoneModel$get_ObjectType() {
			return this.get_zoneCommonModel().get_objectType();
		},
		get_isStorySpecific: function ZoneModel$get_IsStorySpecific() {
			return !ss.isNullOrUndefined(this.pm.storyPointId) && !ss.isNullOrUndefined(this.pm.flipboardZoneId) && this.pm.storyPointId !== $tab_ZoneModel.$uninitializedStoryPointID && this.pm.flipboardZoneId !== $tab_ZoneModel.$uninitializedFlipboardZoneID;
		},
		get_contentHeight: function ZoneModel$get_ContentHeight() {
			return this.get_zoneCommonModel().get_contentHeight();
		},
		get_contentWidth: function ZoneModel$get_ContentWidth() {
			return this.get_zoneCommonModel().get_contentWidth();
		},
		get_contentX: function ZoneModel$get_ContentX() {
			return this.get_zoneCommonModel().get_contentX();
		},
		get_contentY: function ZoneModel$get_ContentY() {
			return this.get_zoneCommonModel().get_contentY();
		},
		get_zoneContentBounds: function ZoneModel$get_ZoneContentBounds() {
			return { l: 0, t: 0, w: this.get_contentWidth(), h: this.get_contentHeight() };
		},
		get_height: function ZoneModel$get_Height() {
			return this.get_zoneCommonModel().get_height();
		},
		get_width: function ZoneModel$get_Width() {
			return this.get_zoneCommonModel().get_width();
		},
		get_x: function ZoneModel$get_X() {
			return this.get_zoneCommonModel().get_x();
		},
		get_y: function ZoneModel$get_Y() {
			return this.get_zoneCommonModel().get_y();
		},
		get_isFloating: function ZoneModel$get_IsFloating() {
			return this.get_zoneCommonModel().get_isFloating();
		},
		get_isZoneInGroup: function ZoneModel$get_IsZoneInGroup() {
			return this.get_zoneCommonModel().get_isZoneInGroup();
		},
		get_hasTitle: function ZoneModel$get_HasTitle() {
			return this.get_zoneCommonModel().get_hasTitle();
		},
		get_canHaveTitle: function ZoneModel$get_CanHaveTitle() {
			return this.get_zoneCommonModel().get_canHaveTitle();
		},
		get_canFloat: function ZoneModel$get_CanFloat() {
			return this.get_zoneCommonModel().get_canFloat();
		},
		get_isHorizontal: function ZoneModel$get_IsHorizontal() {
			return this.get_zoneCommonModel().get_isHorizontal();
		},
		get_hasBorder: function ZoneModel$get_HasBorder() {
			return this.get_zoneCommonModel().get_hasBorder();
		},
		get_styledBoxModel: function ZoneModel$get_StyledBoxModel() {
			return this.get_zoneCommonModel().get_zoneStyle();
		},
		get_contentType: function ZoneModel$get_ContentType() {
			return $tab_ZoneModel.$typeOfContent(this.pm);
		},
		get_titleHeight: function ZoneModel$get_TitleHeight() {
			return this.pm.titleHeight;
		},
		get_titleWidth: function ZoneModel$get_TitleWidth() {
			return this.pm.titleWidth;
		},
		get_hasSpace: function ZoneModel$get_HasSpace() {
			return this.pm.hasSpace;
		},
		get_isSelectionDisabled: function ZoneModel$get_IsSelectionDisabled() {
			return this.pm.isSelectionDisabled;
		},
		get_isVisible: function ZoneModel$get_IsVisible() {
			return this.pm.isVisible;
		},
		get_contextMenuCommands: function ZoneModel$get_ContextMenuCommands() {
			if (this.$zoneCommonModel.get_zoneType() === 'filter') {
				var filterModel = ss.cast(this.get_model(), $tab_LegacyQuickFilterDisplayModel);
				return filterModel.get_quickFilterCommands();
			}
			return {};
		},
		get_chromeCommands: function ZoneModel$get_ChromeCommands() {
			return this.$chromeCommands;
		},
		get_drawnZoneColor: function ZoneModel$get_DrawnZoneColor() {
			if (ss.isValue(this.pm.bgColor)) {
				this.$convertedBGColor = this.$convertedBGColor || $tab_ColorModel.convertColorForCanvas(this.pm.bgColor);
				return this.$convertedBGColor;
			}
			return null;
		},
		get_blendedZoneContentColor: function ZoneModel$get_BlendedZoneContentColor() {
			return this.pm.blendedZoneContentColor;
		},
		get_relativeZoneZIndex: function ZoneModel$get_RelativeZoneZIndex() {
			var $t1 = this.$localZoneIndex;
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.pm.zoneZOrder + 1;
			}
			return $t1;
		},
		get_associatedSheet: function ZoneModel$get_AssociatedSheet() {
			return this.pm.sheet;
		},
		get_isDependentOnViz: function ZoneModel$get_IsDependentOnViz() {
			switch (this.$zoneCommonModel.get_zoneType()) {
				case 'viz':
				case 'color':
				case 'shape':
				case 'size':
				case 'map': {
					return true;
				}
			}
			return false;
		},
		get_hasContent: function ZoneModel$get_HasContent() {
			if (ss.isNullOrUndefined(this.pm)) {
				return false;
			}
			return ss.isNullOrUndefined(this.pm.presModelHolder) || Object.keys(this.pm.presModelHolder).length > 0;
		},
		raiseRemoveZoneContent: function ZoneModel$RaiseRemoveZoneContent(context) {
			this.raiseEvent(this.$2$RemoveZoneContentField, context);
		},
		raiseChildrenAdded: function ZoneModel$RaiseChildrenAdded(context) {
			this.raiseEvent(this.$2$ChildrenAddedField, context);
		},
		update: function ZoneModel$Update(zonePresModel, context) {
			this.$resetLocalZoneChanges(context);
			if (ss.isValue(zonePresModel)) {
				{
					zonePresModel.sheet = zonePresModel.sheet || '';
					zonePresModel.titleWidth = zonePresModel.titleWidth || 0;
					zonePresModel.titleHeight = zonePresModel.titleHeight || 0;
					zonePresModel.isSelectionDisabled = zonePresModel.isSelectionDisabled || false;
					zonePresModel.hasSpace = zonePresModel.hasSpace || false;
				}
				var didZoneSizeChange = !this.get_zoneCommonModel().isNewZoneSizeSameAsOld(zonePresModel.zoneCommon);
				if (ss.isValue(zonePresModel.zoneCommon)) {
					this.$zoneCommonModel.update(zonePresModel.zoneCommon, context);
					this.checkForUsableZoneSize(zonePresModel);
				}
				if (ss.isNullOrUndefined(this.pm) || !ss.referenceEquals(this.pm.bgColor, zonePresModel.bgColor)) {
					this.$convertedBGColor = null;
				}
				if (ss.isValue(zonePresModel.zoneChromeCommands)) {
					this.$chromeCommands.update(zonePresModel.zoneChromeCommands, context);
				}
				if (ss.isValue(zonePresModel.presModelHolder)) {
					this.$createOrUpdateContentAndWrapperFromPresModel(zonePresModel, context, didZoneSizeChange);
				}
				else {
					this.$applyFrameUpdatesToContent(zonePresModel, context);
				}
				if (ss.isValue(zonePresModel.zoneTitle)) {
					$tab_FontNotificationUtil.notifyFontsFromTextRegionPresModel(zonePresModel.zoneTitle);
				}
			}
			this.swapAndCopyPresModel(zonePresModel);
			this.raiseEvent(this.$2$UpdateZoneField, context);
		},
		$applyFrameUpdatesToContent: function ZoneModel$ApplyFrameUpdatesToContent(zonePresModel, context) {
			if (ss.isValue(this.pm) && ss.isValue(this.$zoneContentModel) && !ss.referenceEquals(zonePresModel.frameJson, this.pm.frameJson)) {
				var frame = $tab_ZoneModel.$parseJson(zonePresModel.frameJson);
				var zoneCommon = zonePresModel.zoneCommon;
				var zoneIsFilter = ss.isValue(zoneCommon) && zoneCommon.zoneType === 'filter' || ss.isValue(frame.attributes) && ss.keyExists(frame.attributes, 'type') && ss.referenceEquals(frame.attributes['type'].toString(), 'filter'.toString());
				if (this.$containsLegacyQuickFilter && zoneIsFilter) {
					var quickfilterDisplayModel = ss.cast(this.$zoneContentModel, $tab_LegacyQuickFilterDisplayModel);
					quickfilterDisplayModel.update(quickfilterDisplayModel.get_quickFilterDisplayPresModel(), frame, context);
				}
				if (ss.referenceEquals($tab_ZoneModel.$typeOfContent(this.pm), $tab_ZoneModel.$paramCtrlField)) {
					var paramCtrlModel = ss.cast(this.$zoneContentModel, $tab_ParameterCtrlModel);
					paramCtrlModel.updateFrame(frame, context);
				}
			}
		},
		$createOrUpdateContentAndWrapperFromPresModel: function ZoneModel$CreateOrUpdateContentAndWrapperFromPresModel(zonePresModel, context, didZoneSizeChange) {
			if (!ss.isValue(this.$contentWrapperModel)) {
				this.$contentWrapperModel = new $tab_ZoneContentWrapperModel(this);
			}
			var contentType = $tab_ZoneModel.$typeOfContent(zonePresModel);
			if (ss.isValue(this.pm) && !ss.referenceEquals(this.get_contentType(), contentType)) {
				this.$zoneContentModel = null;
			}
			var hadCachedContent = false;
			if (ss.isNullOrUndefined(this.$zoneContentModel) && this.get_zoneCommonModel().get_zoneType() !== 'filter') {
				var contentModel = $tab_ModelUtils.getPendingZoneContentModel(this.$zoneCommonModel.get_zoneId());
				if (ss.isValue(contentModel)) {
					hadCachedContent = true;
					this.$zoneContentModel = contentModel;
					this.$zoneContentModel.reparent(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
			}
			if (!hadCachedContent) {
				this.$createOrUpdateContentModel(contentType, zonePresModel, didZoneSizeChange, context);
			}
		},
		updateLocalPropertiesForZonePreview: function ZoneModel$UpdateLocalPropertiesForZonePreview(xOffset, yOffset) {
			this.$zoneCommonModel.updateSingleZoneLocalPosition(this.get_x() + xOffset, this.get_y() + yOffset);
			this.$updateLocalZoneIdex();
			var children = this.$dashboardModel.zonesModel.getChildren(this.get_zoneId());
			if (children.length > 0) {
				for (var $t1 = 0; $t1 < children.length; $t1++) {
					var zone = children[$t1];
					zone.updateLocalPropertiesForZonePreview(xOffset, yOffset);
				}
			}
		},
		$updateLocalZoneIdex: function ZoneModel$UpdateLocalZoneIdex() {
			if (ss.isNullOrUndefined(this.$localZoneIndex)) {
				this.$localZoneIndex = this.pm.zoneZOrder + 988;
				$tab_Model.nonWorldUpdate(ss.mkdel(this, function(ctx) {
					this.raiseEvent(this.$2$UpdateZIndexField, ctx);
				}));
			}
		},
		$resetLocalZoneChanges: function ZoneModel$ResetLocalZoneChanges(context) {
			this.$zoneCommonModel.resetLocalPosition(context);
			this.$resetLocalZIndex(context);
		},
		resetZoneAndChildrenLocalChanges: function ZoneModel$ResetZoneAndChildrenLocalChanges(context) {
			this.$resetLocalZoneChanges(context);
			var children = this.$dashboardModel.zonesModel.getChildren(this.get_zoneId());
			if (children.length > 0) {
				for (var $t1 = 0; $t1 < children.length; $t1++) {
					var zone = children[$t1];
					zone.resetZoneAndChildrenLocalChanges(context);
				}
			}
		},
		$resetLocalZIndex: function ZoneModel$ResetLocalZIndex(context) {
			if (ss.isValue(this.$localZoneIndex)) {
				this.$localZoneIndex = null;
				this.raiseEvent(this.$2$UpdateZIndexField, context);
			}
		},
		$createOrUpdateContentModel: function ZoneModel$CreateOrUpdateContentModel(contentType, zonePresModel, didZoneSizeChange, context) {
			if (ss.referenceEquals(contentType, $tab_ZoneModel.$visualField)) {
				var visual = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$visualField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_VisualModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var visualModel = ss.cast(this.$zoneContentModel, $tab_VisualModel);
				visualModel.update(visual, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$titleField)) {
				var title = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$titleField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_TextRegionModel(this.$contentWrapperModel, $tab_ZoneModel.$titleField);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var textRegionModel = ss.cast(this.$zoneContentModel, $tab_TextRegionModel);
				textRegionModel.update(title, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$textField)) {
				var text = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$textField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_TextRegionModel(this.$contentWrapperModel, $tab_ZoneModel.$textField);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var textRegionModel1 = ss.cast(this.$zoneContentModel, $tab_TextRegionModel);
				textRegionModel1.update(text, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$quickFilterField)) {
				var quickFilterDisplay = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$quickFilterField);
				var containedLegacyQuickFilter = this.$containsLegacyQuickFilter;
				this.$containsLegacyQuickFilter = true;
				if (ss.isNullOrUndefined(this.$zoneContentModel) || !containedLegacyQuickFilter) {
					this.$zoneContentModel = new $tab_LegacyQuickFilterDisplayModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var frame = $tab_ZoneModel.$parseJson(zonePresModel.frameJson);
				var quickFilterDisplayModel = ss.cast(this.$zoneContentModel, $tab_LegacyQuickFilterDisplayModel);
				quickFilterDisplayModel.update(quickFilterDisplay, frame, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$qColorLegendField)) {
				if (tab.FeatureFlags.isEnabled('WebDropServerRenderedLegends') || $tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
					var quantColorLegendPM = $tab_ZoneModel.getContent(zonePresModel, contentType);
					if (ss.isNullOrUndefined(this.$zoneContentModel)) {
						this.$zoneContentModel = new $tab_QuantitativeColorLegendModel(this.$contentWrapperModel, contentType);
						this.raiseNewZoneContent(this.$zoneContentModel, context);
					}
					var quantLegendModel = ss.cast(this.$zoneContentModel, $tab_QuantitativeColorLegendModel);
					quantLegendModel.update(quantColorLegendPM, context);
				}
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$colorLegendField) || ss.referenceEquals(contentType, $tab_ZoneModel.$sizeLegendField) || ss.referenceEquals(contentType, $tab_ZoneModel.$shapeLegendField) || ss.referenceEquals(contentType, $tab_ZoneModel.$mapLegendField)) {
				if (tab.FeatureFlags.isEnabled('WebDropServerRenderedLegends') || $tab_ApplicationModel.get_instance().get_isLocalRenderMode()) {
					var catLegendPM = $tab_ZoneModel.getContent(zonePresModel, contentType);
					if (ss.isNullOrUndefined(this.$zoneContentModel)) {
						var zt = this.$zoneCommonModel.get_zoneType();
						this.$zoneContentModel = new $tab_CategoricalLegendModel(this.$contentWrapperModel, contentType, $tab_ZoneModel.$getLegendTypeFromZoneType(zt));
						this.raiseNewZoneContent(this.$zoneContentModel, context);
					}
					var catLegendModel = ss.cast(this.$zoneContentModel, $tab_CategoricalLegendModel);
					catLegendModel.update(catLegendPM, context);
				}
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$paramCtrlField)) {
				var paramCtrl = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$paramCtrlField);
				var paramCtrlJson = $tab_ZoneModel.$parseJson(paramCtrl.parameterCtrlJson);
				paramCtrl.legacyPresModel = paramCtrlJson;
				var containedLegacyParameter = this.$containsLegacyParameter;
				this.$containsLegacyParameter = true;
				if (ss.isNullOrUndefined(this.$zoneContentModel) || !containedLegacyParameter) {
					this.$zoneContentModel = new $tab_ParameterCtrlModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var frame1 = $tab_ZoneModel.$parseJson(zonePresModel.frameJson);
				var paramCtrlModel = ss.cast(this.$zoneContentModel, $tab_ParameterCtrlModel);
				paramCtrlModel.update(paramCtrl, frame1, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$pageField)) {
				var page = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$pageField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_PageModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var fireEvent = !didZoneSizeChange || ss.isNullOrUndefined(this.pm);
				var pageModel = ss.cast(this.$zoneContentModel, $tab_PageModel);
				pageModel.update(page, fireEvent, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$flipboardNavField)) {
				var nav = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$flipboardNavField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_FlipboardNavigatorModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var navModel = ss.cast(this.$zoneContentModel, $tab_FlipboardNavigatorModel);
				navModel.update(nav, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$flipboardField)) {
				var flip = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$flipboardField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_FlipboardModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var navModel1 = ss.cast(this.$zoneContentModel, $tab_FlipboardModel);
				navModel1.update(flip, context);
			}
			else if (!tab.FeatureFlags.isEnabled('WebDropServerRenderedLegends') && ss.referenceEquals(contentType, $tab_ZoneModel.$serverRenderedLegendField)) {
				var legacyLegendPM = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$serverRenderedLegendField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_LegacyLegendModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var legacyLegendModel = ss.cast(this.$zoneContentModel, $tab_LegacyLegendModel);
				legacyLegendModel.update(legacyLegendPM, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$webZoneField)) {
				var webZone = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$webZoneField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_WebZoneModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var webZoneModel = ss.cast(this.$zoneContentModel, $tab_WebZoneModel);
				webZoneModel.update(webZone, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$serverButtonZoneField)) {
				var buttonZone = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$serverButtonZoneField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_ButtonZoneModel(this.$contentWrapperModel, $tab_ZoneModel.$serverButtonZoneField);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var buttonZoneModel = ss.cast(this.$zoneContentModel, $tab_ButtonZoneModel);
				buttonZoneModel.update(buttonZone, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$extensionZoneField)) {
				var extensionZone = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$extensionZoneField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_ExtensionZoneModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var extensionZoneModel = ss.cast(this.$zoneContentModel, $tab_ExtensionZoneModel);
				extensionZoneModel.update(extensionZone, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$imageZoneField)) {
				var imageZone = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$imageZoneField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_ImageZoneModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var imageZoneModel = ss.cast(this.$zoneContentModel, $tab_ImageZoneModel);
				imageZoneModel.update(imageZone, context);
			}
			else if (ss.referenceEquals(contentType, $tab_ZoneModel.$dataHighlighterField)) {
				var dataHighlighterPresModel = $tab_ZoneModel.getContent(zonePresModel, $tab_ZoneModel.$dataHighlighterField);
				if (ss.isNullOrUndefined(this.$zoneContentModel)) {
					this.$zoneContentModel = new $tab_DataHighlighterModel(this.$contentWrapperModel);
					this.raiseNewZoneContent(this.$zoneContentModel, context);
				}
				var dataHighlighterModel = ss.cast(this.$zoneContentModel, $tab_DataHighlighterModel);
				dataHighlighterModel.update(dataHighlighterPresModel, context);
			}
		},
		contentBorderWidth: function ZoneModel$ContentBorderWidth() {
			return this.$zoneCommonModel.get_contentBorderWidth();
		},
		raiseNewZoneContent: function ZoneModel$RaiseNewZoneContent(newZoneModel, context) {
			this.raiseEvent$1($tab_Model).call(this, this.$2$NewZoneContentField, newZoneModel, context);
		},
		checkForUsableZoneSize: function ZoneModel$CheckForUsableZoneSize(zonePresModel) {
			if (ss.isValue(zonePresModel) && ss.isValue(zonePresModel.zoneCommon)) {
				var common = zonePresModel.zoneCommon;
				if (common.w === 0 && common.h === 0) {
					var UnusableSizeEvent = 'DashboardAuthoring_UnusableSizeZone';
					var Type = 'ZoneType';
					var Width = 'Width';
					var Height = 'Height';
					var IsFoating = 'IsFoating';
					var IsVisible = 'IsVisible';
					$tab_OnlineAnalyticsClient.logEvent(UnusableSizeEvent, ss.mkdict([Type, common.zoneType.toString(), Width, common.w, Height, common.h, IsFoating, common.isFloating, IsVisible, zonePresModel.isVisible]));
				}
			}
		}
	}, $tab_Model);
	ss.initClass($tab_ZonesModel, $asm, {
		add_newZone: function ZonesModel$add_NewZone(value) {
			this.$2$NewZoneField = ss.delegateCombine(this.$2$NewZoneField, value);
		},
		remove_newZone: function ZonesModel$remove_NewZone(value) {
			this.$2$NewZoneField = ss.delegateRemove(this.$2$NewZoneField, value);
		},
		add_removedZone: function ZonesModel$add_RemovedZone(value) {
			this.$2$RemovedZoneField = ss.delegateCombine(this.$2$RemovedZoneField, value);
		},
		remove_removedZone: function ZonesModel$remove_RemovedZone(value) {
			this.$2$RemovedZoneField = ss.delegateRemove(this.$2$RemovedZoneField, value);
		},
		get_zoneModels: function ZonesModel$get_ZoneModels() {
			if (ss.isNullOrUndefined(this.$cachedZoneModelArray)) {
				this.$cachedZoneModelArray = _.values(this.$zoneModels);
			}
			return this.$cachedZoneModelArray;
		},
		get_zonePresModels: function ZonesModel$get_ZonePresModels() {
			return this.pm;
		},
		set_zonePresModels: function ZonesModel$set_ZonePresModels(value) {
			this.pm = value;
		},
		getZone: function ZonesModel$GetZone(zoneId) {
			return this.$zoneModels[$tab_ZonesModel.$zoneKey(zoneId)];
		},
		hasZone: function ZonesModel$HasZone(zoneId) {
			return ss.keyExists(this.$zoneModels, $tab_ZonesModel.$zoneKey(zoneId));
		},
		getChildren: function ZonesModel$GetChildren(zoneId) {
			var key = $tab_ZonesModel.$zoneKey(zoneId);
			if (!ss.keyExists(this.$zoneChildren, key)) {
				this.$zoneChildren[key] = _.filter(this.get_zoneModels(), function(z) {
					return z.get_parentZoneId() === zoneId;
				});
			}
			return this.$zoneChildren[$tab_ZonesModel.$zoneKey(zoneId)].slice(0);
		},
		update: function ZonesModel$Update(presModels, context) {
			this.$logZones('Zones before update: ');
			this.$removeInvalidZones(presModels, context);
			this.$zoneChildren = {};
			var hasChildrenAdded = {};
			var $t1 = _.keys(presModels);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				var zoneUpdate = presModels[key];
				if (ss.isNullOrUndefined(zoneUpdate)) {
					continue;
				}
				var zoneId = zoneUpdate.zoneId;
				try {
					var zoneKey = $tab_ZonesModel.$zoneKey(zoneId);
					if (!ss.isValue(this.$zoneModels[zoneKey])) {
						this.$createNewZoneModel(zoneUpdate, zoneKey, hasChildrenAdded, context);
					}
					else {
						this.$updateExistingZoneModel(zoneUpdate, zoneKey, hasChildrenAdded, context);
					}
					tab.Log.get(this).debug('Update zone: %s', [zoneId]);
					this.$zoneModels[zoneKey].update(zoneUpdate, context);
				}
				catch ($t3) {
					var e = ss.Exception.wrap($t3);
					tab.ErrorTrace.report(e);
					tab.Log.get(this).error('Error creating zone: %s, %o, %s', [zoneId, zoneUpdate, e.toString()]);
				}
			}
			this.swapAndCopyPresModel(presModels);
			if (tsConfig.is_authoring) {
				var $t4 = _.keys(hasChildrenAdded);
				for (var $t5 = 0; $t5 < $t4.length; $t5++) {
					var zoneId1 = $t4[$t5];
					var zone = this.getZone(zoneId1);
					if (ss.isValue(zone)) {
						zone.raiseChildrenAdded(context);
					}
				}
			}
			this.$logZones('Zones after update: ');
		},
		$createNewZoneModel: function ZonesModel$CreateNewZoneModel(zoneUpdate, zoneKey, hasChildrenAdded, context) {
			tab.Log.get(this).debug('Creating zone: %s, %o', [zoneUpdate.zoneId, zoneUpdate]);
			var newZoneModel = new $tab_ZoneModel(this, ss.cast(this.parent, $tab_DashboardModel), zoneUpdate.zoneId);
			this.$zoneModels[zoneKey] = newZoneModel;
			this.raiseEvent$1($tab_ZoneModel).call(this, this.$2$NewZoneField, this.$zoneModels[zoneKey], context);
			this.$cachedZoneModelArray = null;
			if (ss.isValue(zoneUpdate.zoneCommon)) {
				hasChildrenAdded[zoneUpdate.zoneCommon.parentZoneId] = true;
			}
		},
		$updateExistingZoneModel: function ZonesModel$UpdateExistingZoneModel(zoneUpdate, zoneKey, hasChildrenAdded, context) {
			if (ss.isValue(zoneUpdate.zoneCommon) && this.$zoneModels[zoneKey].get_parentZoneId() !== zoneUpdate.zoneCommon.parentZoneId) {
				hasChildrenAdded[zoneUpdate.zoneCommon.parentZoneId] = true;
			}
			if (ss.isValue(zoneUpdate.presModelHolder) && (this.$contentTypeChanged(zoneKey, zoneUpdate) || this.$worksheetNameChanged(zoneKey, zoneUpdate))) {
				this.$zoneModels[zoneKey].raiseRemoveZoneContent(context);
				this.raiseEvent$1($tab_ZoneModel).call(this, this.$2$NewZoneField, this.$zoneModels[zoneKey], context);
			}
		},
		$contentTypeChanged: function ZonesModel$ContentTypeChanged(zoneKey, zoneUpdate) {
			return ss.isValue(this.$zoneModels[zoneKey].get_contentType()) && !ss.referenceEquals(this.$zoneModels[zoneKey].get_contentType(), $tab_ZoneModel.$typeOfContent(zoneUpdate));
		},
		$worksheetNameChanged: function ZonesModel$WorksheetNameChanged(zoneKey, zoneUpdate) {
			return ss.isValue(this.$zoneModels[zoneKey].get_worksheetName()) && !ss.referenceEquals(this.$zoneModels[zoneKey].get_worksheetName(), zoneUpdate.sheet);
		},
		$getZoneIdFromZoneKey: function ZonesModel$GetZoneIdFromZoneKey(zoneKey) {
			return ss.replaceAllString(zoneKey, 'z_', '');
		},
		$removeInvalidZones: function ZonesModel$RemoveInvalidZones(newZones, context) {
			var $t1 = _.keys(this.$zoneModels);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zoneKey = $t1[$t2];
				var oldModel = this.$zoneModels[zoneKey];
				var newZonePresModel = newZones[this.$getZoneIdFromZoneKey(zoneKey)];
				if (newZonePresModel === null) {
					delete newZones[zoneKey];
					delete this.get_zonePresModels()[zoneKey];
					this.removeZone(oldModel, context);
					continue;
				}
				if (ss.isValue(newZonePresModel) && ss.isValue(newZonePresModel.zoneCommon) && oldModel.get_zoneCommonModel().get_zoneType() !== newZonePresModel.zoneCommon.zoneType) {
					this.removeZone(oldModel, context);
				}
			}
		},
		removeZone: function ZonesModel$RemoveZone(zoneToBeRemoved, context) {
			tab.Log.get(this).debug('Removing zone: %o', [zoneToBeRemoved]);
			zoneToBeRemoved.raiseRemoveZoneContent(context);
			this.raiseEvent$1($tab_ZoneModel).call(this, this.$2$RemovedZoneField, zoneToBeRemoved, context);
			delete this.$zoneModels[$tab_ZonesModel.$zoneKey(zoneToBeRemoved.get_zoneId())];
			this.$cachedZoneModelArray = null;
		},
		$logZones: function ZonesModel$LogZones(frontLabel) {
			var zoneListBuilder = new ss.StringBuilder();
			zoneListBuilder.appendLine(frontLabel);
			var $t1 = new ss.ObjectEnumerator(this.get_zonePresModels());
			try {
				while ($t1.moveNext()) {
					var zoneEntry = $t1.current();
					if (ss.isValue(zoneEntry.value) && ss.isValue(zoneEntry.value.zoneCommon)) {
						zoneListBuilder.append('[ ');
						zoneListBuilder.append(zoneEntry.value.zoneId);
						zoneListBuilder.append(' ');
						zoneListBuilder.append(zoneEntry.value.zoneCommon.zoneType);
						zoneListBuilder.append(' ] ');
						zoneListBuilder.appendLine();
					}
				}
			}
			finally {
				$t1.dispose();
			}
			tab.Log.get(this).debug(zoneListBuilder.toString(), []);
		}
	}, $tab_Model);
	(function() {
		$tab_CommandSerializer.$commandCacheSize = 15;
		$tab_CommandSerializer.$typesByName = {};
		$tab_CommandSerializer.$deserializedCommandCache = {};
		$tab_CommandSerializer.$deserializedCommandCacheKeys = [];
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'keep-only-or-exclude' }.cmd] = 2;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'quick-sort' }.cmd] = 4;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'sort-nested' }.cmd] = 5;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'clear-sorts' }.cmd] = 6;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'run-action' }.cmd] = 8;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'load-url' }.cmd] = 9;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'merge-or-split' }.cmd] = 10;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'ranged-by-value-merge' }.cmd] = 10;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'ranged-by-index-merge' }.cmd] = 10;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'legend-group-or-ungroup' }.cmd] = 13;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'label-drill' }.cmd] = 12;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'level-drill' }.cmd] = 12;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'level-drill-up-down' }.cmd] = 12;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'remove-reference-line' }.cmd] = 15;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'show-reference-line-constant-value-editor' }.cmd] = 21;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'trend-lines' }.cmd] = 17;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'show-trend-line-editor' }.cmd] = 16;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'show-col-totals' }.cmd] = 18;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'show-row-totals' }.cmd] = 18;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'remove-subtotals' }.cmd] = 18;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'set-totals-type' }.cmd] = 19;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'set-reference-line-formula' }.cmd] = 20;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'show-reference-line-editor' }.cmd] = 22;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'select-by-tuple-value' }.cmd] = 23;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'open-automated-insights-modal' }.cmd] = 24;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'open-automated-insights-modal-ubertip' }.cmd] = 25;
		$tab_CommandSerializer.$typesByName[{ ns: 'tabdoc', cmd: 'view-selected-data' }.cmd] = 7;
	})();
	(function() {
		$tab_$CommandThrottler.$defaultPendingCommandDelay = 35;
		$tab_$CommandThrottler.$defaultPendingCommandThreshold = 1;
	})();
	(function() {
		$tab_ColorModel.defaultAlpha = 1;
		$tab_ColorModel.white = new $tab_ColorModel(255, 255, 255, $tab_ColorModel.defaultAlpha);
		$tab_ColorModel.black = new $tab_ColorModel(0, 0, 0, $tab_ColorModel.defaultAlpha);
		$tab_ColorModel.alphaMultiplier = 1.5;
		$tab_ColorModel.luminanceThresholdForFakingLineColor = 0.800000011920929;
		$tab_ColorModel.luminanceThresholdForLightColor = 0.314999997615814;
		$tab_ColorModel.$closeToOne = 0.999989986419678;
		$tab_ColorModel.$pow2point2 = [0, 5.07705190066E-06, 2.33280046661E-05, 5.69217657122E-05, 0.000107187362341, 0.000175123977503, 0.000261543754548, 0.000367136269816, 0.000492503787191, 0.000638182842167, 0.000804658499513, 0.000992374304074, 0.00120173952244, 0.00143313458967, 0.00168691531679, 0.0019634162134, 0.00226295316071, 0.00258582559623, 0.00293231832394, 0.003302703032, 0.0036972395789, 0.00411617709328, 0.00455975492253, 0.00502820345686, 0.00552174485024, 0.00604059365485, 0.00658495738258, 0.00715503700457, 0.00775102739766, 0.00837311774515, 0.00902149189801, 0.00969632870166, 0.0103978022926, 0.0111260823684, 0.0118813344348, 0.0126637200316, 0.0134733969401, 0.0143105193749, 0.0151752381596, 0.0160677008909, 0.0169880520893, 0.01793643334, 0.0189129834237, 0.0199178384388, 0.0209511319148, 0.0220129949193, 0.0231035561579, 0.0242229420675, 0.0253712769047, 0.0265486828285, 0.0277552799781, 0.0289911865471, 0.0302565188524, 0.0315513914002, 0.0328759169484, 0.0342302065651, 0.0356143696849, 0.037028514162, 0.0384727463202, 0.0399471710015, 0.0414518916115, 0.0429870101627, 0.0445526273164, 0.0461488424224, 0.0477757535562, 0.0494334575559, 0.0511220500565, 0.0528416255229, 0.0545922772818, 0.056374097552, 0.0581871774737, 0.0600316071363, 0.0619074756055, 0.0638148709487, 0.0657538802603, 0.0677245896854, 0.0697270844426, 0.0717614488462, 0.0738277663278, 0.0759261194563, 0.0780565899581, 0.0802192587362, 0.0824142058885, 0.0846415107254, 0.0869012517877, 0.0891935068622, 0.0915183529989, 0.0938758665256, 0.0962661230633, 0.0986891975411, 0.10114516421, 0.103634096655, 0.106156067813, 0.108711149979, 0.111299414825, 0.113920933406, 0.116575776179, 0.119264013005, 0.12198571317, 0.124740945387, 0.127529777813, 0.130352278056, 0.133208513184, 0.136098549737, 0.139022453735, 0.141980290686, 0.144972125597, 0.147998022983, 0.151058046871, 0.154152260812, 0.15728072789, 0.160443510725, 0.163640671485, 0.166872271891, 0.170138373223, 0.173439036332, 0.176774321641, 0.180144289154, 0.183548998465, 0.186988508759, 0.190462878822, 0.193972167048, 0.19751643144, 0.201095729621, 0.204710118837, 0.208359655961, 0.212044397502, 0.215764399609, 0.219519718075, 0.223310408341, 0.227136525505, 0.230998124323, 0.234895259216, 0.238827984272, 0.242796353254, 0.246800419602, 0.250840236436, 0.254915856566, 0.25902733249, 0.263174716398, 0.267358060184, 0.271577415438, 0.275832833461, 0.280124365261, 0.28445206156, 0.288815972797, 0.293216149132, 0.297652640449, 0.302125496359, 0.306634766203, 0.311180499058, 0.315762743736, 0.320381548792, 0.325036962521, 0.329729032968, 0.334457807924, 0.339223334935, 0.344025661302, 0.348864834083, 0.353740900097, 0.358653905926, 0.363603897921, 0.368590922197, 0.373615024646, 0.37867625093, 0.383774646488, 0.388910256539, 0.394083126083, 0.399293299903, 0.404540822568, 0.409825738436, 0.415148091656, 0.420507926168, 0.425905285707, 0.431340213807, 0.4368127538, 0.442322948819, 0.4478708418, 0.453456475486, 0.459079892424, 0.464741134974, 0.470440245304, 0.476177265397, 0.481952237051, 0.487765201878, 0.493616201311, 0.499505276603, 0.505432468828, 0.511397818885, 0.517401367497, 0.523443155214, 0.529523222417, 0.535641609315, 0.54179835595, 0.547993502197, 0.554227087766, 0.560499152204, 0.566809734897, 0.573158875068, 0.579546611783, 0.58597298395, 0.592438030321, 0.598941789493, 0.605484299911, 0.612065599866, 0.618685727499, 0.625344720802, 0.632042617621, 0.638779455651, 0.645555272445, 0.652370105411, 0.659223991813, 0.666116968776, 0.673049073281, 0.680020342172, 0.687030812155, 0.694080519797, 0.701169501531, 0.708297793656, 0.715465432335, 0.7226724536, 0.729918893352, 0.737204787361, 0.744530171267, 0.751895080583, 0.759299550695, 0.766743616862, 0.774227314218, 0.781750677774, 0.789313742416, 0.796916542908, 0.804559113895, 0.812241489898, 0.819963705324, 0.827725794455, 0.835527791461, 0.843369730392, 0.851251645185, 0.859173569659, 0.867135537521, 0.875137582365, 0.883179737673, 0.891262036813, 0.899384513047, 0.907547199522, 0.915750129279, 0.923993335252, 0.932276850265, 0.940600707036, 0.948964938178, 0.9573695762, 0.965814653503, 0.974300202389, 0.982826255054, 0.991392843593, 1];
		$tab_ColorModel.$hexFormat = new RegExp('#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})', 'i');
		$tab_ColorModel.$rgbFormat = new RegExp('rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)', 'i');
		$tab_ColorModel.$rgbaFormat = new RegExp('rgba\\((\\d+), ?(\\d+), ?(\\d+), ?(\\d+|0\\.\\d+|1\\.0)\\)', 'i');
		$tab_ColorModel.whiteHoverColor = new $tab_ColorModel(255, 255, 255, 0.449999988079071);
		$tab_ColorModel.blackHoverColor = new $tab_ColorModel(0, 0, 0, 0.449999988079071);
		$tab_ColorModel.$hoverDarkThreshold = 77;
		$tab_ColorModel.$conversionCache = null;
		$tab_ColorModel.$parsedColorStrCache = new tab.FifoCache(100);
	})();
	(function() {
		$tab_FontProperties.defaultWeight = 'normal';
		$tab_FontProperties.defaultStyle = 'normal';
		$tab_FontProperties.hashSeparator = '-<%>-';
		$tab_FontProperties.matchQuotes = new RegExp('[\'"]', 'g');
	})();
	(function() {
		$tab_DrawItemFontExtractor.boldWeight = 'bold';
		$tab_DrawItemFontExtractor.normalWeight = 'normal';
	})();
	(function() {
		$tab_GroupFontExtractor.$internalExtractors = [new $tab_GroupFontExtractor(), new $tab_DrawItemFontExtractor()];
	})();
	(function() {
		$tab_FontNotificationUtil.fontPropertyName = 'font';
		$tab_FontNotificationUtil.$1$FontPropertiesIdentifiedField = null;
		$tab_FontNotificationUtil.$1$AllFontsFoundField = null;
	})();
	(function() {
		$tab_CommandRedirectRegistry.$registry = null;
	})();
	(function() {
		$tab_NullHistory.$empty = [];
	})();
	(function() {
		var $t1 = {};
		$t1[{ ns: 'tabsrv', cmd: 'refresh-data-server' }.cmd] = false;
		$t1[{ ns: 'tabdoc', cmd: 'get-datasource-data-pres-model' }.cmd] = false;
		$t1[{ ns: 'tabdoc', cmd: 'get-show-data-pres-model' }.cmd] = false;
		$t1[{ ns: 'tabdoc', cmd: 'categorical-filter' }.cmd] = false;
		$t1[{ ns: 'tabdoc', cmd: 'categorical-filter-by-index' }.cmd] = false;
		$t1[{ ns: 'tabdoc', cmd: 'connection-count-entity' }.cmd] = false;
		$t1[{ ns: 'tabdoc', cmd: 'connection-fetch-entity' }.cmd] = false;
		$t1[{ ns: 'tabsrv', cmd: 'power-point-export-server' }.cmd] = false;
		$tab_CommandCancellationWhiteList.$cancellableCommands = $t1;
	})();
	(function() {
		$tab_XhrUtil.guid = '';
		$tab_XhrUtil.parentID = '';
		$tab_XhrUtil.$currentTabName = '';
	})();
	(function() {
		$tab_Schedule.$scheduleLastDayOfMonth = 'Last';
		$tab_Schedule.$scheduleSecondToLastDayOfMonth = 'SecondToLast';
		$tab_Schedule.$minutesPerDay = 1440;
		$tab_Schedule.$dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
		$tab_Schedule.$dayMap = ss.mkdict(['Sun', tab.Strings.Sunday, 'Mon', tab.Strings.Monday, 'Tue', tab.Strings.Tuesday, 'Wed', tab.Strings.Wednesday, 'Thu', tab.Strings.Thursday, 'Fri', tab.Strings.Friday, 'Sat', tab.Strings.Saturday]);
	})();
	(function() {
		$tab_CommandExecutionResult.successResult = new $tab_CommandExecutionResult(true, null);
	})();
	(function() {
		$tab_HistoryManager.$statePrefix = '_vql_state_';
		$tab_HistoryManager.$historyStates = new Map();
		$tab_HistoryManager.$stateIdCounter = 0;
		$tab_HistoryManager.$historyStateCursor = 0;
		tab.WindowHelper.addListener(window.self, 'popstate', $tab_HistoryManager.$handlePopStateEvent);
	})();
	(function() {
		$tab_VizUriModel.$retryParam = ':retry';
		$tab_VizUriModel.$originalViewParam = ':original_view';
		$tab_VizUriModel.$showSaveAsParam = ':showSaveAs';
		$tab_VizUriModel.$jsDebugParam = ':jsdebug';
		$tab_VizUriModel.$renderParam = ':render';
		$tab_VizUriModel.$appParam = ':app';
		$tab_VizUriModel.$ignoreStickySessionParam = ':ignore_sticky_session';
		$tab_VizUriModel.$showCommentsParam = ':showComments';
		$tab_VizUriModel.$editDataAlertIdParam = ':editDataAlertId';
		$tab_VizUriModel.$showDataAlertIdParam = ':showDataAlertId';
		$tab_VizUriModel.$showDataAlertsParam = ':showDataAlerts';
		$tab_VizUriModel.$deviceParam = ':device';
		$tab_VizUriModel.$authoringPersistentParams = [$tab_VizUriModel.$appParam, $tab_VizUriModel.$jsDebugParam, $tab_VizUriModel.$renderParam];
		$tab_VizUriModel.$uriTypeStringToUriType = ss.mkdict(['askData', 8, 'authoring', 2, 'authoringNewWorkbook', 3, 'newWorkbook', 7, 'shared', 5, 'startAskData', 9, 'views', 1, 'vizql/showadminview', 4, 'workbooks', 6]);
		$tab_VizUriModel.$ignoredParams = [':bootstrapWhenNotified'];
		$tab_VizUriModel.$uriTypeToUriTypeString = {};
		$tab_VizUriModel.$usernameValidChars = {};
		var addCodes = function(from, to) {
			for (var i = from; i <= to; i++) {
				var s = String.fromCharCode(i);
				$tab_VizUriModel.$usernameValidChars[s] = s;
			}
		};
		addCodes(97, 122);
		addCodes(65, 90);
		addCodes(48, 57);
		addCodes(95, 95);
		addCodes(45, 46);
	})();
	(function() {
		$tab_WorldUpdateInterceptor.$instance = new ss.Lazy(function() {
			return new $tab_WorldUpdateInterceptor();
		});
	})();
	(function() {
		$tab_ImageTileTracker.$instance = null;
	})();
	(function() {
		$tab_AckbarEventsHelper.instance = null;
	})();
	(function() {
		$tab_NoopModelEventsHandler.$context = new ss.Lazy(function() {
			return { eventHandler: new $tab_NoopModelEventsHandler() };
		});
	})();
	(function() {
		$tab_BorderDefinition.$borderLookup = $tab_BorderDefinition.$createBorderStyleLookup();
	})();
	(function() {
		$tab_ShapeManager.$imageFormatString = 'data:image/png;base64,';
		$tab_ShapeManager.selectionBorderSize = 1;
	})();
	(function() {
		$tab_ZoneModel.zoneMargin = 4;
		$tab_ZoneModel.rootZoneID = 0;
		$tab_ZoneModel.$uninitializedStoryPointID = 0;
		$tab_ZoneModel.$uninitializedFlipboardZoneID = 0;
		$tab_ZoneModel.$visualField = 'visual'.toString();
		$tab_ZoneModel.$titleField = 'dashboardTitle'.toString();
		$tab_ZoneModel.$textField = 'dashboardText'.toString();
		$tab_ZoneModel.$qColorLegendField = 'quantitativeColorLegend'.toString();
		$tab_ZoneModel.$colorLegendField = 'colorLegend'.toString();
		$tab_ZoneModel.$sizeLegendField = 'categoricalSizeLegend'.toString();
		$tab_ZoneModel.$shapeLegendField = 'categoricalShapeLegend'.toString();
		$tab_ZoneModel.$mapLegendField = 'categoricalMapLegend'.toString();
		$tab_ZoneModel.$paramCtrlField = 'parameterControl'.toString();
		$tab_ZoneModel.$pageField = 'pageModel'.toString();
		$tab_ZoneModel.$serverRenderedLegendField = 'serverRenderedLegend'.toString();
		$tab_ZoneModel.$imageZoneField = 'imageZone'.toString();
		$tab_ZoneModel.$webZoneField = 'webZone'.toString();
		$tab_ZoneModel.$serverButtonZoneField = 'serverButtonZone'.toString();
		$tab_ZoneModel.$extensionZoneField = 'addInZone'.toString();
		$tab_ZoneModel.$quickFilterField = 'quickFilterDisplay'.toString();
		$tab_ZoneModel.$dataHighlighterField = 'dataHighlighter'.toString();
		$tab_ZoneModel.$flipboardNavField = 'flipboardNav'.toString();
		$tab_ZoneModel.$flipboardField = 'flipboard'.toString();
	})();
	(function() {
		$tab_ProgressiveLoader.$offscreenPriority = 6;
		$tab_ProgressiveLoader.zonesThatDeferContentCreation = ['viz', 'size', 'shape', 'color', 'map', 'filter', 'paramctrl', 'current-page', 'bitmap', 'web', 'dashboard-object', 'highlighter'];
		$tab_ProgressiveLoader.$zoneCreationOrder = [1, 2, 3, 4, 5, 6];
		$tab_ProgressiveLoader.$zonePriorityMap = null;
		$tab_ProgressiveLoader.$priorityBatchSize = null;
	})();
	(function() {
		$tab_FailureHandler.charBufferForIndividualErrorOverhead = 20;
		$tab_FailureHandler.charBufferForReportOverhead = 160;
		$tab_FailureHandler.$reportIntervalInMS = 5000;
		$tab_FailureHandler.$sourceLineLengthLimit = 120;
		$tab_FailureHandler.$truncatedStackNotice = '...truncated';
		$tab_FailureHandler.$intervalID = 0;
		if (typeof(tsConfig) === 'undefined') {
			return;
		}
		var enabled = tsConfig.clientErrorReportingLevel;
		if (!ss.isNullOrEmptyString(enabled)) {
			tab.ErrorTrace.install();
			$tab_FailureHandler.$intervalID = window.setInterval($tab_FailureHandler.$reportFailures, $tab_FailureHandler.$reportIntervalInMS);
		}
	})();
	(function() {
		$tab_CommandController.unknownOutcomeLoggingMessage = 'Unknown recovery outcome: ';
		$tab_CommandController.$loggerName = 'CommandController';
		$tab_CommandController.$defaultMinimumThrottleTime = 135;
		$tab_CommandController.$handledBootstrapException = false;
		$tab_CommandController.$parentCompletedSent = false;
		$tab_CommandController._instance = null;
		$tab_CommandController.$1$SwitchedVizField = null;
		$tab_CommandController.$1$SheetNameChangedField = null;
		$tab_CommandController.fireDeferredUrlActions = false;
	})();
	(function() {
		$tab_ApplicationModel.$holder = new (ss.makeGenericType($tab_ModelHolder$1, [$tab_ApplicationModel]))();
	})();
	(function() {
		$tab_WaitHandler.waitGlassId = 'loadingGlassPane';
		$tab_WaitHandler.waitSpinnerId = 'loadingSpinner';
		$tab_WaitHandler.$phantomMouseUpTimeWindowMs = 500;
		$tab_WaitHandler.$fadeOutDuration = 300;
		$tab_WaitHandler.$glassFadeInDuration = 500;
		$tab_WaitHandler.$spinnerFadeInDuration = 250;
		$tab_WaitHandler.glassShowDelay = 400;
		$tab_WaitHandler.glassDefaultOpacity = 0;
		$tab_WaitHandler.glassDelayedOpacity = 0.419999986886978;
	})();
	(function() {
		$tab_BaseSession.linkTarget = null;
		$tab_BaseSession.autoUpdate = true;
		$tab_BaseSession.$currentState = null;
		$tab_BaseSession.$preEncodingSpecialChars = null;
		$tab_BaseSession.$waitHandler = null;
		$tab_BaseSession.$commandCanceledStatus = 204;
		$tab_BaseSession.$1$StateChangedField = null;
		$tab_BaseSession.$1$SessionRecoveryAttemptField = null;
		$tab_BaseSession.$preEncodingSpecialChars = ss.mkdict(['%2F', new RegExp('\\/', 'g'), '%3F', new RegExp('\\?', 'g')]);
	})();
	(function() {
		$tab_ModuleManager.$jsPrefix = 'vql';
		$tab_ModuleManager.$jsLoadTimeoutSeconds = 0;
		$tab_ModuleManager.$modules = {};
		$tab_ModuleManager.$moduleInfos = {};
		$tab_ModuleManager.$moduleMapping = {};
		$tab_ModuleManager.$loadedCssFiles = new Set();
		$tab_ModuleManager.$configured = false;
		$tab_ModuleManager.$moduleTrackerInstance = new $tab_ModuleTracker();
	})();
	(function() {
		$tab_OnlineAnalyticsClient.telemetryForwarderLibrary = 'typescript-telemetry-forwarder';
		$tab_OnlineAnalyticsClient.telemetryForwarderLibraryMinifiedLibrary = 'typescript-telemetry-forwarder.min';
		$tab_OnlineAnalyticsClient.serviceName = 'VizClient';
		$tab_OnlineAnalyticsClient.$propertyNameExpression = new RegExp('^[A-Z][a-z]*[0-9]*(?:[A-Z][a-z]*[0-9]*)*$');
		$tab_OnlineAnalyticsClient.$invalidPropertyNames = ['guid', 'host_name', 'host_timestamp', 'pod', 'properties', 'service_name', 'type', 'SiteId', 'SiteLuid', 'SiteUrlName', 'UserId', 'Language', 'Locale', 'SessionId', 'ProjectId', 'WorkbookId', 'SaaS', 'Public', 'HostName', 'HostTimestamp', 'ServiceName', 'Time'];
		$tab_OnlineAnalyticsClient.$instance = null;
		$tab_OnlineAnalyticsClient.$1$OnLogEventField = null;
	})();
	(function() {
		$tab_ServerCommands.$commandInterceptors = {};
	})();
	(function() {
		$tab_WebCommandRegistry.$singletonInstance = new $tab_WebCommandRegistry();
	})();
	(function() {
		$tab_DataConnectionCommands.$cachedServerConnectionTypes = null;
		var $t2 = $tab_WebCommandRegistry.get_instance();
		var $t3 = { ns: 'tabdoc', cmd: { ns: 'tabdoc', cmd: 'check-connection' }.cmd };
		var $t1 = new $tab_CommandLocalOptions();
		$t1.suppressConnectionDialog = true;
		$t2.registerCommandLocalOptions($t3, $t1);
	})();
	(function() {
		$tab_ConnectionClass.excel = 'excel';
		$tab_ConnectionClass.text = 'csv';
		$tab_ConnectionClass.server = 'sqlproxy';
		$tab_ConnectionClass.$fileConnectionClasses = [];
		$tab_ConnectionClass.$supportedTableauServerClassesCached = null;
		$tab_ConnectionClass.$supportedConnectionClassesToTypes = {};
		$tab_ConnectionClass.$wasServerConnectionTypesCalled = null;
		$tab_ConnectionClass.$fileConnectionClasses.push($tab_ConnectionClass.excel);
		$tab_ConnectionClass.$fileConnectionClasses.push('excel-direct');
		$tab_ConnectionClass.$fileConnectionClasses.push($tab_ConnectionClass.text);
		$tab_ConnectionClass.$fileConnectionClasses.push('textscan');
	})();
	(function() {
		$tab_DataConnectionUtils.exceptionAttributesClass = 'class';
		$tab_DataConnectionUtils.exceptionAttributesFilename = 'filename';
		$tab_DataConnectionUtils.exceptionAttributesDirectory = 'directory';
	})();
	(function() {
		$tab_DeferredConnectionsCommandHandler.$badPasswordError = 'badpassword';
		$tab_DeferredConnectionsCommandHandler.$badOauthPasswordError = 'badoauthcredentials';
		$tab_DeferredConnectionsCommandHandler.$noAssociatedCustomOAuthKeyError = 'NoAssociatedCustomOAuthKey';
	})();
	(function() {
		$tab_ModelUtils.visualPartToRegionMap = null;
		$tab_ModelUtils.regionToVisualPartMap = null;
		$tab_ModelUtils.visualPartToRegionMap = {};
		$tab_ModelUtils.visualPartToRegionMap['left-axis'] = 'leftaxis';
		$tab_ModelUtils.visualPartToRegionMap['right-axis'] = 'rightaxis';
		$tab_ModelUtils.visualPartToRegionMap['top-axis'] = 'topaxis';
		$tab_ModelUtils.visualPartToRegionMap['bottom-axis'] = 'bottomaxis';
		$tab_ModelUtils.visualPartToRegionMap['y-labels'] = 'yheader';
		$tab_ModelUtils.visualPartToRegionMap['x-labels'] = 'xheader';
		$tab_ModelUtils.regionToVisualPartMap = {};
		$tab_ModelUtils.regionToVisualPartMap['leftaxis'] = 'left-axis';
		$tab_ModelUtils.regionToVisualPartMap['rightaxis'] = 'right-axis';
		$tab_ModelUtils.regionToVisualPartMap['topaxis'] = 'top-axis';
		$tab_ModelUtils.regionToVisualPartMap['bottomaxis'] = 'bottom-axis';
		$tab_ModelUtils.regionToVisualPartMap['yheader'] = 'y-labels';
		$tab_ModelUtils.regionToVisualPartMap['xheader'] = 'x-labels';
	})();
	(function() {
		$tab_FormatContainerModel.$fontFormatWidgetUniqueId = 'font';
	})();
	(function() {
		$tab_VizDataUtils.vizInTooltipSpanTag = 'span[data-tableau="VizInTooltip"]';
		$tab_VizDataUtils.unknownFieldMarker = '~~~???~~~';
		$tab_VizDataUtils.noLocalSummary = '...';
		$tab_VizDataUtils.invalidTupleId = 0;
		$tab_VizDataUtils.urlStringNull = '~~null~';
		$tab_VizDataUtils.urlStringSkipped = '~~skipped~';
		$tab_VizDataUtils.urlStringRagged = '~~ragged~';
		$tab_VizDataUtils.lastWidthAndHeightForVizInTooltips = [];
		$tab_VizDataUtils.widestVizInTooltip = 0;
		$tab_VizDataUtils.$newLineRegEx = new RegExp('(\\r|\\n)', 'g');
	})();
	(function() {
		$tab_ActionUtils.$schemeWhitelist = ['http:', 'https:', 'mailto:', 'news:', 'gopher:', 'tsc:', 'tsl:', 'sms:', 'tel:'];
		$tab_ActionUtils.$isCustomWhitelistParsed = false;
		$tab_ActionUtils.$hasShownBlockedAction = false;
		$tab_ActionUtils.$previousInteractedTupleInfo = {};
	})();
	(function() {
		$tab_SelectionClientCommands.$selectActionToOptionsMapping = null;
		$tab_SelectionClientCommands.$selectActionToOptionsMapping = {};
		$tab_SelectionClientCommands.$selectActionToOptionsMapping['simple'] = 'select-options-simple';
		$tab_SelectionClientCommands.$selectActionToOptionsMapping['toggle'] = 'select-options-toggle';
		$tab_SelectionClientCommands.$selectActionToOptionsMapping['range'] = 'select-options-range';
		$tab_SelectionClientCommands.$selectActionToOptionsMapping['menu'] = 'select-options-menu';
	})();
	(function() {
		$tab_BrushingComputer.$dateTimeHighlightCommandParamValue = 'date-time';
		$tab_BrushingComputer.$allFieldsHighlightCommandParamValue = 'all';
	})();
	(function() {
		$tab_SheetSession.$2$SheetDataChangedField = null;
	})();
	(function() {
		$tab_StoryPointsPresModelCache.$maxCacheEntries = (tsConfig.is_mobile ? 4 : 8);
		$tab_StoryPointsPresModelCache.$commandsToCache = null;
		$tab_StoryPointsPresModelCache.$bootstrapRecord = null;
		if (!tsConfig.is_authoring || tab.FeatureFlags.isEnabled('StoryPointCache')) {
			$tab_WorldUpdateInterceptor.get().add_onBootstrapResponse($tab_StoryPointsPresModelCache.$cacheBootstrapResponseIfApplicable);
		}
	})();
	(function() {
		$tab_ZoneCommonModel.rootZoneID = 0;
	})();
	(function() {
		$tab_MapServerModel.$highDpiTileIndicator = '@2x';
		$tab_MapServerModel.$defaultBackgroundFillColor = 'rgb(255,255,255)';
	})();
	(function() {
		$tab_AnimationUtil.$isUpdating = false;
		$tab_AnimationUtil.$trackedSceneModels = {};
	})();
	(function() {
		$tab_AnimationClock.$isActive = false;
		$tab_AnimationClock.$requestID = -1;
	})();
	(function() {
		$tab_RuntimeTelemetry.usageTable = 'RuntimeClientEvents';
		$tab_RuntimeTelemetry.usageColumnName = 'EventName';
		$tab_RuntimeTelemetry.metricsTimeColumnName = 'ElapsedTime';
		var $t1 = {};
		$t1[0] = 'LOADED';
		$tab_RuntimeTelemetry.$runtimeEventMapping = $t1;
	})();
	(function() {
		$tab_CommandControllerStoryTelemetry.$wordCountExpression = new RegExp('\\S+', 'g');
	})();
	(function() {
		$tab_PlatformInfo.platformLibrary = 'platform';
		$tab_PlatformInfo.platformMinifiedLibrary = 'platform.min';
		$tab_PlatformInfo.$platformLibraryPromise = null;
		$tab_PlatformInfo.$platformInfoPromise = null;
		$tab_PlatformInfo.$errorLogger = tab.Logger.getLogger($tab_PlatformInfo, 4);
	})();
	(function() {
		$tab_CommandControllerTelemetry.$bootstrapEvents = [];
		$tab_CommandControllerTelemetry.$platformEvents = [];
	})();
	(function() {
		$tab_StartupUtils.$isClientFullyLoaded = false;
		$tab_StartupUtils.$modelsInitialized = false;
		$tab_StartupUtils.$1$ModelsInitializedField = null;
		$tab_StartupUtils.$1$ClientFullyLoadedField = null;
	})();
	(function() {
		$tab_SessionServerCommands.$forwardToDestTimeoutId = 0;
	})();
	(function() {
		$tab_SessionRecoveryErrorHandler.$1$SessionRecoveryAttemptField = null;
	})();
	(function() {
		$tab_DefaultSessionErrorHandler.$limitExceeded = false;
	})();
	(function() {
		$tab_WorkgroupDataSource.$basenameRegexp = new RegExp('[/\\\\]([^/\\\\]*)$');
	})();
	(function() {
		$tab_SessionHeartbeat.$vizportalPingFrequency = 300000;
		$tab_SessionHeartbeat.$lastVizportalPing = tab.DateUtil.get_nowAsTime();
		$tab_SessionHeartbeat.$vizqlPingFrequency = 300000;
		$tab_SessionHeartbeat.$lastVizqlPing = tab.DateUtil.get_nowAsTime();
	})();
	(function() {
		$tab_DefaultCommandDispatcher.$instance = null;
	})();
	(function() {
		$tab_CancelTelemetry.$cancellationCommandEventType = 'Cancel_Command';
		$tab_CancelTelemetry.$cancelCommandName = 'CommandName';
		$tab_CancelTelemetry.$cancelCommandNameUnknown = 'UNKNOWN';
		$tab_CancelTelemetry.$cancelElapsedTimeToCancelMS = 'ElapsedTimeToCancelMS';
		$tab_CancelTelemetry.$cancelElapsedTimeToProcessCancelResponseMS = 'ElapsedTimeToProcessCancelResponseMS';
		$tab_CancelTelemetry.$cancelStatus = 'CancelStatus';
		$tab_CancelTelemetry.$cancelStatusSuccess = 'Success';
		$tab_CancelTelemetry.$cancelStatusNothingToCancel = 'NothingToCancel';
		$tab_CancelTelemetry.$cancelStatusFailure = 'Failure';
	})();
	(function() {
		$tab_VizDataModel.tupleIdColumnName = '[system:visual].[tuple_id]';
		$tab_VizDataModel.measureNamesColumnName = '[:Measure Names]';
	})();
	(function() {
		$tab_FlipboardModel.presModelCache = null;
	})();
	(function() {
		$tab_DashboardModel.facadeDomId = 'facadedom';
		$tab_DashboardModel.defaultGridSize = 20;
		$tab_DashboardModel.$2$ModifiedSheetsChangedField = null;
	})();
	(function() {
		$tab_FieldModel.nameOfMeasuresColumn = ':Measure Names';
		$tab_FieldModel.nameOfMeasureValuesColumn = 'Multiple Values';
	})();
	(function() {
		$tab_WorkbookModel.$2$WorkbookModifiedChangedField = null;
	})();
	(function() {
		$tab_Model.removeUndefinedBoolsOnSwapCopy = true;
	})();
	(function() {
		$tab_CompoundTableCalcModel.primaryTableCalcIndex = 0;
		$tab_CompoundTableCalcModel.secondaryTableCalcIndex = 1;
		var $t1 = $tab_ApplicationModel.get_instance();
		$t1.addModel($tab_CompoundTableCalcModel).call($t1);
	})();
	(function() {
		tab.KeyboardShortcutTelemetry.add_telemetryEvent($tab_OnlineAnalyticsClient.logEvent);
	})();
	(function() {
		$tab_SimpleFontListProvider.fontFaces = ['Arial', 'Courier New', 'Tableau Bold', 'Tableau Book', 'Tableau Light', 'Tableau Medium', 'Tableau Regular', 'Tableau Semibold', 'Times New Roman'];
	})();
	(function() {
		$tab_FormattingConverters.cssFontStyle = 'font-style';
		$tab_FormattingConverters.cssFontWeight = 'font-weight';
		$tab_FormattingConverters.cssFontStretch = 'font-stretch';
		$tab_FormattingConverters.cssFontFamily = 'font-family';
		$tab_FormattingConverters.javascriptFontStyle = 'fontStyle';
		$tab_FormattingConverters.javascriptFontWeight = 'fontWeight';
		$tab_FormattingConverters.javascriptFontStretch = 'fontStretch';
		$tab_FormattingConverters.$weightConversionArray = [{ item1: 'thin', item2: '100' }, { item1: 'extra-light', item2: '200' }, { item1: 'extra light', item2: '200' }, { item1: 'light', item2: '300' }, { item1: 'normal', item2: '400' }, { item1: 'regular', item2: '400' }, { item1: 'book', item2: '400' }, { item1: 'medium', item2: '500' }, { item1: 'demi-bold', item2: '600' }, { item1: 'demibold', item2: '600' }, { item1: 'semi-bold', item2: '600' }, { item1: 'semibold', item2: '600' }, { item1: 'demi', item2: '600' }, { item1: 'bold', item2: '700' }, { item1: 'heavy', item2: '800' }, { item1: 'black', item2: '900' }];
		$tab_FormattingConverters.$stretchConversionArray = [{ item1: 'compressed', item2: 'extra-condensed' }, { item1: 'narrow', item2: 'condensed' }, { item1: 'condensed', item2: 'condensed' }];
		$tab_FormattingConverters.$styleConversionArray = [{ item1: 'italic', item2: 'italic' }];
		$tab_FormattingConverters.$formatStyleDict = {};
	})();
	(function() {
		$tab_WebFilteredFontListProvider.fakeFontName = 'TableauTestFont';
		$tab_WebFilteredFontListProvider.fakeFontTestText = 'A';
		$tab_WebFilteredFontListProvider.fakeFontDivClass = 'TestFontContainer';
		$tab_WebFilteredFontListProvider.$supportedFonts = {};
		$tab_WebFilteredFontListProvider.$testDiv = $(document.body);
		$tab_WebFilteredFontListProvider.$baseFontWidth = 0;
		$tab_WebFilteredFontListProvider.$baseFontHeight = 0;
		$tab_StartupUtils.callAfterModelsInitialized(function() {
			$('<div />').addClass($tab_WebFilteredFontListProvider.fakeFontDivClass).css({ 'font-family': $tab_WebFilteredFontListProvider.fakeFontName, visibility: 'hidden', 'z-index': '-1', position: 'absolute', top: '0', right: '0' }).text($tab_WebFilteredFontListProvider.fakeFontTestText).appendTo($tab_WebFilteredFontListProvider.$testDiv);
		});
	})();
	(function() {
		$tab_FormattingUtil.fontListStorageKey = 'auth-font-list';
		$tab_FormattingUtil.fontSizes = [8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];
	})();
	(function() {
		$tab_ServerFonts.tableauLight = 'Tableau Light';
		$tab_ServerFonts.tableauBook = 'Tableau Book';
		$tab_ServerFonts.tableauRegular = 'Tableau Regular';
		$tab_ServerFonts.tableauMedium = 'Tableau Medium';
		$tab_ServerFonts.tableauSemibold = 'Tableau Semibold';
		$tab_ServerFonts.tableauBold = 'Tableau Bold';
		$tab_ServerFonts.bentonSansLight = 'Benton Sans Light';
		$tab_ServerFonts.bentonSansBook = 'Benton Sans Book';
		$tab_ServerFonts.bentonSansBookItalic = 'Benton Sans Book Italic';
		$tab_ServerFonts.bentonSansMedium = 'Benton Sans Medium';
		$tab_ServerFonts.bentonSansSemiDemi = 'Benton Sans SemiDemi';
		$tab_ServerFonts.bentonSansSemiDemiItalic = 'Benton Sans SemiDemi Italic';
		$tab_ServerFonts.bentonSans = 'Benton Sans';
		$tab_ServerFonts.bentonSansLowDpi = 'Benton Sans Low-DPI';
		$tab_ServerFonts.tableauFontWoffPaths = ss.mkdict([$tab_ServerFonts.tableauLight, tableau.util.assetUrl('/fonts/Tableau-Light.woff', false), $tab_ServerFonts.tableauBook, tableau.util.assetUrl('/fonts/Tableau-Book.woff', false), $tab_ServerFonts.tableauRegular, tableau.util.assetUrl('/fonts/Tableau-Regular.woff', false), $tab_ServerFonts.tableauMedium, tableau.util.assetUrl('/fonts/Tableau-Medium.woff', false), $tab_ServerFonts.tableauSemibold, tableau.util.assetUrl('/fonts/Tableau-Semibold.woff', false), $tab_ServerFonts.tableauBold, tableau.util.assetUrl('/fonts/Tableau-Bold.woff', false)]);
		$tab_ServerFonts.bentonSansWoffPaths = ss.mkdict([$tab_ServerFonts.bentonSansLight, tableau.util.assetUrl('/fonts/BentonSans-Light.woff', false), $tab_ServerFonts.bentonSansBook, tableau.util.assetUrl('/fonts/BentonSans-Book.woff', false), $tab_ServerFonts.bentonSansBookItalic, tableau.util.assetUrl('/fonts/BentonSans-Book_Italic.woff', false), $tab_ServerFonts.bentonSansMedium, tableau.util.assetUrl('/fonts/BentonSans-Medium.woff', false), $tab_ServerFonts.bentonSansSemiDemi, tableau.util.assetUrl('/fonts/BentonSans-SemiDemi.woff', false), $tab_ServerFonts.bentonSansSemiDemiItalic, tableau.util.assetUrl('/fonts/BentonSans-SemiDemi_Italic.woff', false)]);
		var $t1 = new $tab_DownloadableFontProperties();
		$t1.set_fontFamily($tab_ServerFonts.tableauLight);
		$t1.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauLight];
		var $t2 = new $tab_DownloadableFontProperties();
		$t2.set_fontFamily($tab_ServerFonts.tableauLight);
		$t2.set_weight('bold');
		$t2.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauMedium];
		var $t3 = new $tab_DownloadableFontProperties();
		$t3.set_fontFamily($tab_ServerFonts.tableauBook);
		$t3.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauBook];
		var $t4 = new $tab_DownloadableFontProperties();
		$t4.set_fontFamily($tab_ServerFonts.tableauBook);
		$t4.set_weight('bold');
		$t4.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauMedium];
		var $t5 = new $tab_DownloadableFontProperties();
		$t5.set_fontFamily($tab_ServerFonts.tableauRegular);
		$t5.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauRegular];
		var $t6 = new $tab_DownloadableFontProperties();
		$t6.set_fontFamily($tab_ServerFonts.tableauRegular);
		$t6.set_weight('bold');
		$t6.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauSemibold];
		var $t7 = new $tab_DownloadableFontProperties();
		$t7.set_fontFamily($tab_ServerFonts.tableauMedium);
		$t7.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauMedium];
		var $t8 = new $tab_DownloadableFontProperties();
		$t8.set_fontFamily($tab_ServerFonts.tableauMedium);
		$t8.set_weight('bold');
		$t8.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauBold];
		var $t9 = new $tab_DownloadableFontProperties();
		$t9.set_fontFamily($tab_ServerFonts.tableauSemibold);
		$t9.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauSemibold];
		var $t10 = new $tab_DownloadableFontProperties();
		$t10.set_fontFamily($tab_ServerFonts.tableauSemibold);
		$t10.set_weight('bold');
		$t10.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauBold];
		var $t11 = new $tab_DownloadableFontProperties();
		$t11.set_fontFamily($tab_ServerFonts.tableauBold);
		$t11.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauBold];
		var $t12 = new $tab_DownloadableFontProperties();
		$t12.set_fontFamily($tab_ServerFonts.tableauBold);
		$t12.set_weight('bold');
		$t12.woffLocation = $tab_ServerFonts.tableauFontWoffPaths[$tab_ServerFonts.tableauBold];
		$tab_ServerFonts.tableauFontNames = [$t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12];
		var $t1 = new $tab_DownloadableFontProperties();
		$t1.set_fontFamily($tab_ServerFonts.bentonSans);
		$t1.woffLocation = $tab_ServerFonts.bentonSansWoffPaths[$tab_ServerFonts.bentonSansBook];
		$tab_ServerFonts.bentonSansFontNames = [$t1];
		var $t1 = new $tab_DownloadableFontProperties();
		$t1.set_fontFamily($tab_ServerFonts.bentonSansLowDpi);
		$t1.woffLocation = $tab_ServerFonts.bentonSansWoffPaths[$tab_ServerFonts.bentonSansSemiDemi];
		$tab_ServerFonts.bentonSansLowDpiFontNames = [$t1];
		$tab_ServerFonts.effectiveBentonSans = (BrowserSupport.BrowserSupport.IsHighDpi() ? $tab_ServerFonts.bentonSansFontNames : $tab_ServerFonts.bentonSansLowDpiFontNames);
	})();
	(function() {
		$tab_RichTextEditorConfigurationFactory.$editorConfigPM = null;
		$tab_RichTextEditorConfigurationFactory.defaultContentSecurityPolicy = "default-src 'none'; script-src 'self'; connect-src 'self'; img-src * data:; style-src 'self' 'unsafe-inline'; font-src 'self' {0};";
	})();
	(function() {
		$tab_AxisAuthoringTelemetry.$axisAuthoringInteraction = 'AxisAuthoringInteractions';
		$tab_AxisAuthoringTelemetry.$renderingMode = 'RenderingMode';
		$tab_AxisAuthoringTelemetry.$axisInteractionType = 'AxisInteraction';
		$tab_AxisAuthoringTelemetry.$axisCaretIcon = 'CaretIcon';
		$tab_AxisAuthoringTelemetry.$doubleTap = 'DoubleTap';
		$tab_AxisAuthoringTelemetry.$rightClick = 'RightClick';
		$tab_AxisAuthoringTelemetry.$contextMenuShown = 'ContextMenuShown';
		$tab_AxisAuthoringTelemetry.$browserRendered = 'Browser';
		$tab_AxisAuthoringTelemetry.$serverRendered = 'Server';
	})();
	(function() {
		var $t1 = $tab_ApplicationModel.get_instance();
		$t1.addModel($tab_CalculationDialogModel).call($t1);
	})();
	(function() {
		$tab_TabResources.$resourceMap = {};
		$tab_TabResources.$resourceMap['TQRC_DRILL_DOWN'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Down.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_DOWN_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Down@2x.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_DOWN_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Down_Active.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_DOWN_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Down_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_UP'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Up.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_UP_2x'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Up@2x.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_UP_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Up_Active.png';
		$tab_TabResources.$resourceMap['TQRC_DRILL_UP_ACTIVE_2x'] = 'tableau-1.3/res/vizTooltips/Tooltip_Action_Up_Action@2x.png';
		$tab_TabResources.$resourceMap['TQRC_EXCLUDE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Exclude.png';
		$tab_TabResources.$resourceMap['TQRC_EXCLUDE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Exclude@2x.png';
		$tab_TabResources.$resourceMap['TQRC_EXCLUDE_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Exclude_Active.png';
		$tab_TabResources.$resourceMap['TQRC_EXCLUDE_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Exclude_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_KEEP_ONLY'] = 'tableau-1.3/res/vizTooltips/Tooltip_KeepOnly.png';
		$tab_TabResources.$resourceMap['TQRC_KEEP_ONLY_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_KeepOnly@2x.png';
		$tab_TabResources.$resourceMap['TQRC_KEEP_ONLY_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_KeepOnly_Active.png';
		$tab_TabResources.$resourceMap['TQRC_KEEP_ONLY_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_KeepOnly_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_OPEN_AUTOMATED_INSIGHTS_MODAL'] = 'tableau-1.3/res/vizTooltips/Tooltip_AutomatedInsights.png';
		$tab_TabResources.$resourceMap['TQRC_OPEN_AUTOMATED_INSIGHTS_MODAL_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_AutomatedInsights_Active.png';
		$tab_TabResources.$resourceMap['TQRC_MERGE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Group.png';
		$tab_TabResources.$resourceMap['TQRC_MERGE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Group@2x.png';
		$tab_TabResources.$resourceMap['TQRC_MERGE_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Group_Active.png';
		$tab_TabResources.$resourceMap['TQRC_MERGE_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Group_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_VIEWDATA'] = 'tableau-1.3/res/vizTooltips/Tooltip_ViewData.png';
		$tab_TabResources.$resourceMap['TQRC_VIEWDATA_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_ViewData_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_ASCENDING'] = 'tableau-1.3/res/vizTooltips/Tooltip_SortAscending.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_ASCENDING_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Sort_Ascending@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_ASCENDING_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_SortAscending_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_ASCENDING_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Sort_Ascending_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_DESCENDING'] = 'tableau-1.3/res/vizTooltips/Tooltip_SortDescending.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_DESCENDING_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Sort_Descending@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_DESCENDING_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_SortDescending_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SORT_DESCENDING_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Sort_Descending_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SPLIT'] = 'tableau-1.3/res/vizTooltips/Tooltip_Split.png';
		$tab_TabResources.$resourceMap['TQRC_SPLIT_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Split@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SPLIT_ACTIVE'] = 'tableau-1.3/res/vizTooltips/Tooltip_Split_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SPLIT_ACTIVE_2X'] = 'tableau-1.3/res/vizTooltips/Tooltip_Split_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BIN'] = 'tableau-1.3/res/showme/ShowMe_NumericBin.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BIN_2X'] = 'tableau-1.3/res/showme/ShowMe_NumericBin@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SUGGESTED'] = 'tableau-1.3/res/showme/ShowMe_Check.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SUGGESTED_2X'] = 'tableau-1.3/res/showme/ShowMe_Check@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CLOSE'] = 'tableau-1.3/res/showme/ShowMe_Close.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CLOSE_2X'] = 'tableau-1.3/res/showme/ShowMe_Close@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CLOSE_PRESS'] = 'tableau-1.3/res/showme/ShowMe_Close_Active.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CLOSE_PRESS_2X'] = 'tableau-1.3/res/showme/ShowMe_Close_Active@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_DATE'] = 'tableau-1.3/res/showme/ShowMe_Date.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_DATE_2X'] = 'tableau-1.3/res/showme/ShowMe_Date@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GEO'] = 'tableau-1.3/res/showme/ShowMe_Geo.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GEO_2X'] = 'tableau-1.3/res/showme/ShowMe_Geo@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_AREAMEAS'] = 'tableau-1.3/res/showme/ShowMe_AreaContinuous.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_AREADIM'] = 'tableau-1.3/res/showme/ShowMe_AreaDiscrete.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_FILLEDMAPS'] = 'tableau-1.3/res/showme/ShowMe_AreaMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BOXPLOT'] = 'tableau-1.3/res/showme/ShowMe_BoxAndWhisker.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BUBBLE'] = 'tableau-1.3/res/showme/ShowMe_Bubble.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BULLET'] = 'tableau-1.3/res/showme/ShowMe_Bullet.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CIRCLE'] = 'tableau-1.3/res/showme/ShowMe_Circles.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARLINE'] = 'tableau-1.3/res/showme/ShowMe_DualCombination.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_DUALLINE'] = 'tableau-1.3/res/showme/ShowMe_DualLine.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GANTT'] = 'tableau-1.3/res/showme/ShowMe_Gantt.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_HEATMAP'] = 'tableau-1.3/res/showme/ShowMe_HeatMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SPOTTABLE'] = 'tableau-1.3/res/showme/ShowMe_HighlightTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_HISTOGRAM'] = 'tableau-1.3/res/showme/ShowMe_Histogram.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARHORIZONTAL'] = 'tableau-1.3/res/showme/ShowMe_HorizontalBars.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_LINEMEAS'] = 'tableau-1.3/res/showme/ShowMe_LinesContinuous.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_LINEDIM'] = 'tableau-1.3/res/showme/ShowMe_LinesDiscrete.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_PIES'] = 'tableau-1.3/res/showme/ShowMe_Pie.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SCATSING'] = 'tableau-1.3/res/showme/ShowMe_Scatter.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARSIDEBY'] = 'tableau-1.3/res/showme/ShowMe_SideBySideBars.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CIRCLESIDEBYSIDE'] = 'tableau-1.3/res/showme/ShowMe_SideBySideCircles.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARSTACKED'] = 'tableau-1.3/res/showme/ShowMe_StackedBars.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_MAPS'] = 'tableau-1.3/res/showme/ShowMe_SymbolMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TEXTTABLE'] = 'tableau-1.3/res/showme/ShowMe_TextTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TREEMAP'] = 'tableau-1.3/res/showme/ShowMe_TreeMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_AREAMEAS_2X'] = 'tableau-1.3/res/showme/ShowMe_AreaContinuous@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_AREADIM_2X'] = 'tableau-1.3/res/showme/ShowMe_AreaDiscrete@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_FILLEDMAPS_2X'] = 'tableau-1.3/res/showme/ShowMe_AreaMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BOXPLOT_2X'] = 'tableau-1.3/res/showme/ShowMe_BoxAndWhisker@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BUBBLE_2X'] = 'tableau-1.3/res/showme/ShowMe_Bubble@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BULLET_2X'] = 'tableau-1.3/res/showme/ShowMe_Bullet@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CIRCLE_2X'] = 'tableau-1.3/res/showme/ShowMe_Circles@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARLINE_2X'] = 'tableau-1.3/res/showme/ShowMe_DualCombination@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_DUALLINE_2X'] = 'tableau-1.3/res/showme/ShowMe_DualLine@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_GANTT_2X'] = 'tableau-1.3/res/showme/ShowMe_Gantt@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_HEATMAP_2X'] = 'tableau-1.3/res/showme/ShowMe_HeatMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SPOTTABLE_2X'] = 'tableau-1.3/res/showme/ShowMe_HighlightTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_HISTOGRAM_2X'] = 'tableau-1.3/res/showme/ShowMe_Histogram@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARHORIZONTAL_2X'] = 'tableau-1.3/res/showme/ShowMe_HorizontalBars@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_LINEDIM_2X'] = 'tableau-1.3/res/showme/ShowMe_LinesDiscrete@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_LINEMEAS_2X'] = 'tableau-1.3/res/showme/ShowMe_LinesContinuous@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_PIES_2X'] = 'tableau-1.3/res/showme/ShowMe_Pie@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_SCATSING_2X'] = 'tableau-1.3/res/showme/ShowMe_Scatter@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARSIDEBY_2X'] = 'tableau-1.3/res/showme/ShowMe_SideBySideBars@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_CIRCLESIDEBYSIDE_2X'] = 'tableau-1.3/res/showme/ShowMe_SideBySideCircles@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_BARSTACKED_2X'] = 'tableau-1.3/res/showme/ShowMe_StackedBars@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_MAPS_2X'] = 'tableau-1.3/res/showme/ShowMe_SymbolMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TEXTTABLE_2X'] = 'tableau-1.3/res/showme/ShowMe_TextTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_TREEMAP_2X'] = 'tableau-1.3/res/showme/ShowMe_TreeMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARSTACKED'] = 'tableau-1.3/res/showme/enabled/BarStacked.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARSIDEBY'] = 'tableau-1.3/res/showme/enabled/BarSideBySide.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARHORIZONTAL'] = 'tableau-1.3/res/showme/enabled/BarHorizontal.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARLINE'] = 'tableau-1.3/res/showme/enabled/BarLine.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_CIRCLE'] = 'tableau-1.3/res/showme/enabled/Circle.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_CIRCLESIDEBYSIDE'] = 'tableau-1.3/res/showme/enabled/CircleSideBySide.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_GANTT'] = 'tableau-1.3/res/showme/enabled/Gantt.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_HEATMAP'] = 'tableau-1.3/res/showme/enabled/HeatMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_HISTOGRAM'] = 'tableau-1.3/res/showme/enabled/Histogram.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_LINEDIM'] = 'tableau-1.3/res/showme/enabled/LineDimension.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_LINEMEAS'] = 'tableau-1.3/res/showme/enabled/LineMeasure.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_AREAMEAS'] = 'tableau-1.3/res/showme/enabled/FilledLineContinuous.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_AREADIM'] = 'tableau-1.3/res/showme/enabled/FilledLineDiscrete.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_SCATSING'] = 'tableau-1.3/res/showme/enabled/ScatterSingle.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_TEXTTABLE'] = 'tableau-1.3/res/showme/enabled/TextTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_SPOTTABLE'] = 'tableau-1.3/res/showme/enabled/SpotTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_MAPS'] = 'tableau-1.3/res/showme/enabled/Maps.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_FILLEDMAPS'] = 'tableau-1.3/res/showme/enabled/FilledMaps.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_PIES'] = 'tableau-1.3/res/showme/enabled/Pies.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_DUALLINE'] = 'tableau-1.3/res/showme/enabled/DualAxis.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BULLET'] = 'tableau-1.3/res/showme/enabled/Bullet.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_TREEMAP'] = 'tableau-1.3/res/showme/enabled/Treemap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BUBBLE'] = 'tableau-1.3/res/showme/enabled/Bubble.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BOXPLOT'] = 'tableau-1.3/res/showme/enabled/Boxplot.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARSTACKED_2X'] = 'tableau-1.3/res/showme/enabled/BarStacked@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARSIDEBY_2X'] = 'tableau-1.3/res/showme/enabled/BarSideBySide@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARHORIZONTAL_2X'] = 'tableau-1.3/res/showme/enabled/BarHorizontal@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BARLINE_2X'] = 'tableau-1.3/res/showme/enabled/BarLine@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_CIRCLE_2X'] = 'tableau-1.3/res/showme/enabled/Circle@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_CIRCLESIDEBYSIDE_2X'] = 'tableau-1.3/res/showme/enabled/CircleSideBySide@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_GANTT_2X'] = 'tableau-1.3/res/showme/enabled/Gantt@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_HEATMAP_2X'] = 'tableau-1.3/res/showme/enabled/HeatMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_HISTOGRAM_2X'] = 'tableau-1.3/res/showme/enabled/Histogram@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_LINEDIM_2X'] = 'tableau-1.3/res/showme/enabled/LineDimension@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_LINEMEAS_2X'] = 'tableau-1.3/res/showme/enabled/LineMeasure@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_AREAMEAS_2X'] = 'tableau-1.3/res/showme/enabled/FilledLineContinuous@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_AREADIM_2X'] = 'tableau-1.3/res/showme/enabled/FilledLineDiscrete@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_SCATSING_2X'] = 'tableau-1.3/res/showme/enabled/ScatterSingle@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_TEXTTABLE_2X'] = 'tableau-1.3/res/showme/enabled/TextTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_SPOTTABLE_2X'] = 'tableau-1.3/res/showme/enabled/SpotTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_MAPS_2X'] = 'tableau-1.3/res/showme/enabled/Maps@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_FILLEDMAPS_2X'] = 'tableau-1.3/res/showme/enabled/FilledMaps@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_PIES_2X'] = 'tableau-1.3/res/showme/enabled/Pies@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_DUALLINE_2X'] = 'tableau-1.3/res/showme/enabled/DualAxis@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BULLET_2X'] = 'tableau-1.3/res/showme/enabled/Bullet@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_TREEMAP_2X'] = 'tableau-1.3/res/showme/enabled/Treemap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BUBBLE_2X'] = 'tableau-1.3/res/showme/enabled/Bubble@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_1_BOXPLOT_2X'] = 'tableau-1.3/res/showme/enabled/Boxplot@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARSTACKED'] = 'tableau-1.3/res/showme/disabled/BarStacked.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARSIDEBY'] = 'tableau-1.3/res/showme/disabled/BarSideBySide.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARHORIZONTAL'] = 'tableau-1.3/res/showme/disabled/BarHorizontal.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARLINE'] = 'tableau-1.3/res/showme/disabled/BarLine.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_CIRCLE'] = 'tableau-1.3/res/showme/disabled/Circle.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_CIRCLESIDEBYSIDE'] = 'tableau-1.3/res/showme/disabled/CircleSideBySide.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_GANTT'] = 'tableau-1.3/res/showme/disabled/Gantt.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_HEATMAP'] = 'tableau-1.3/res/showme/disabled/HeatMap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_HISTOGRAM'] = 'tableau-1.3/res/showme/disabled/Histogram.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_LINEDIM'] = 'tableau-1.3/res/showme/disabled/LineDimension.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_LINEMEAS'] = 'tableau-1.3/res/showme/disabled/LineMeasure.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_AREAMEAS'] = 'tableau-1.3/res/showme/disabled/FilledLineContinuous.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_AREADIM'] = 'tableau-1.3/res/showme/disabled/FilledLineDiscrete.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_SCATSING'] = 'tableau-1.3/res/showme/disabled/ScatterSingle.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_TEXTTABLE'] = 'tableau-1.3/res/showme/disabled/TextTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_SPOTTABLE'] = 'tableau-1.3/res/showme/disabled/SpotTable.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_MAPS'] = 'tableau-1.3/res/showme/disabled/Maps.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_FILLEDMAPS'] = 'tableau-1.3/res/showme/disabled/FilledMaps.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_PIES'] = 'tableau-1.3/res/showme/disabled/Pies.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_DUALLINE'] = 'tableau-1.3/res/showme/disabled/DualAxis.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BULLET'] = 'tableau-1.3/res/showme/disabled/Bullet.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_TREEMAP'] = 'tableau-1.3/res/showme/disabled/Treemap.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BUBBLE'] = 'tableau-1.3/res/showme/disabled/Bubble.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BOXPLOT'] = 'tableau-1.3/res/showme/disabled/Boxplot.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARSTACKED_2X'] = 'tableau-1.3/res/showme/disabled/BarStacked@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARSIDEBY_2X'] = 'tableau-1.3/res/showme/disabled/BarSideBySide@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARHORIZONTAL_2X'] = 'tableau-1.3/res/showme/disabled/BarHorizontal@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BARLINE_2X'] = 'tableau-1.3/res/showme/disabled/BarLine@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_CIRCLE_2X'] = 'tableau-1.3/res/showme/disabled/Circle@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_CIRCLESIDEBYSIDE_2X'] = 'tableau-1.3/res/showme/disabled/CircleSideBySide@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_GANTT_2X'] = 'tableau-1.3/res/showme/disabled/Gantt@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_HEATMAP_2X'] = 'tableau-1.3/res/showme/disabled/HeatMap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_HISTOGRAM_2X'] = 'tableau-1.3/res/showme/disabled/Histogram@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_LINEDIM_2X'] = 'tableau-1.3/res/showme/disabled/LineDimension@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_LINEMEAS_2X'] = 'tableau-1.3/res/showme/disabled/LineMeasure@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_AREAMEAS_2X'] = 'tableau-1.3/res/showme/disabled/FilledLineContinuous@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_AREADIM_2X'] = 'tableau-1.3/res/showme/disabled/FilledLineDiscrete@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_SCATSING_2X'] = 'tableau-1.3/res/showme/disabled/ScatterSingle@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_TEXTTABLE_2X'] = 'tableau-1.3/res/showme/disabled/TextTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_SPOTTABLE_2X'] = 'tableau-1.3/res/showme/disabled/SpotTable@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_MAPS_2X'] = 'tableau-1.3/res/showme/disabled/Maps@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_FILLEDMAPS_2X'] = 'tableau-1.3/res/showme/disabled/FilledMaps@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_PIES_2X'] = 'tableau-1.3/res/showme/disabled/Pies@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_DUALLINE_2X'] = 'tableau-1.3/res/showme/disabled/DualAxis@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BULLET_2X'] = 'tableau-1.3/res/showme/disabled/Bullet@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_TREEMAP_2X'] = 'tableau-1.3/res/showme/disabled/Treemap@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BUBBLE_2X'] = 'tableau-1.3/res/showme/disabled/Bubble@2x.png';
		$tab_TabResources.$resourceMap['TQRC_SHOWME_0_BOXPLOT_2X'] = 'tableau-1.3/res/showme/disabled/Boxplot@2x.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_TABLE'] = 'tableau-1.3/res/analyticspane/drop/table.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_PANE'] = 'tableau-1.3/res/analyticspane/drop/pane.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_CELL'] = 'tableau-1.3/res/analyticspane/drop/cell.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_LINEAR'] = 'tableau-1.3/res/analyticspane/drop/trend-linear.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_POLY'] = 'tableau-1.3/res/analyticspane/drop/trend-polynomial.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_POWER'] = 'tableau-1.3/res/analyticspane/drop/trend-power.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_LOG'] = 'tableau-1.3/res/analyticspane/drop/trend-logarithmic.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_EXP'] = 'tableau-1.3/res/analyticspane/drop/trend-exponential.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_SUBTOTAL'] = 'tableau-1.3/res/analyticspane/drop/sub-total.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_COLUMN'] = 'tableau-1.3/res/analyticspane/drop/column-total.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_ROW'] = 'tableau-1.3/res/analyticspane/drop/row-total.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_FORECAST'] = 'tableau-1.3/res/analyticspane/drop/forecast.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_CLUSTER'] = 'tableau-1.3/res/analyticspane/drop/cluster.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DROP_OUTLIER'] = 'tableau-1.3/res/analyticspane/drop/outliers.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_REFLINE'] = 'tableau-1.3/res/analyticspane/refline.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_REFBAND'] = 'tableau-1.3/res/analyticspane/refband.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_DISTBAND'] = 'tableau-1.3/res/analyticspane/distband.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_BOXPLOT'] = 'tableau-1.3/res/analyticspane/boxplot.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_TOTAL'] = 'tableau-1.3/res/analyticspane/total.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_TRENDLINE'] = 'tableau-1.3/res/analyticspane/trendline.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_95ANDMEDIAN'] = 'tableau-1.3/res/analyticspane/95andmedian.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_FORECAST'] = 'tableau-1.3/res/analyticspane/forecast.png';
		$tab_TabResources.$resourceMap['TQRC_ANALYTICSPANE_CLUSTER'] = 'tableau-1.3/res/analyticspane/cluster.png';
	})();
	(function() {
		$tab_CommandPermission.$permissionGranted = 'granted';
	})();
	(function() {
		$tab_CustomizedViewRequests.$methodGetCustomizedView = 'get_customized_view';
		$tab_CustomizedViewRequests.$methodGetCustomizedViews = 'get_customized_views';
		$tab_CustomizedViewRequests.$methodSetDefaultCustomizedView = 'set_default_customized_view';
		$tab_CustomizedViewRequests.$methodDestroyCustomizedView = 'destroy_customized_view';
		$tab_CustomizedViewRequests.$methodSaveCustomizedView = 'save_customized_view';
		$tab_CustomizedViewRequests.$methodUpdateCustomizedView = 'update_customized_view';
	})();
	(function() {
		$tab_PluginPresentationLayer.$instance = null;
	})();
	(function() {
		$tab_DashboardButtonClientCommands.$getButtonConfigDialogCommandName = 'get-button-config-dialog';
	})();
	(function() {
		$tab_WebCommandRegistry.get_instance().registerCommand({ ns: 'tabdoc', cmd: 'dashboard-show-grid-web-wrapper' }, $tab_DashboardShowGridWebWrapperCommand);
	})();
	(function() {
		$tab_DataAlertNotificationInterval.everyTime = 0;
		$tab_DataAlertNotificationInterval.hourly = 60;
		$tab_DataAlertNotificationInterval.daily = 1440;
		$tab_DataAlertNotificationInterval.weekly = 10080;
		$tab_DataAlertNotificationInterval.onlyOnce = 2147483647;
	})();
	(function() {
		$tab_ApplicationModel.get_holder().addEventBinding(function(newModel) {
			newModel.addModel($tab_DataAlertDialogModel).call(newModel);
		}, function(oldModel) {
			oldModel.removeModel($tab_DataAlertDialogModel).call(oldModel);
		});
	})();
	(function() {
		$tab_DeferLayoutImpl.$instance = null;
	})();
	(function() {
		$tab_PluginContractModules.dialogApiContract = null;
		$tab_PluginContractModules.hybridWidgetsContract = null;
		$tab_PluginContractModules.menuApiContract = null;
		$tab_PluginContractModules.stylingComponentsContract = null;
		$tab_PluginContractModules.dialogApiContract = $tab_ModuleManager.registerRawJsModule('@tableau/dialog-api-contract', 'dialog-api-contract-web.min', 'dialog-api-contract-web').andLoadOnDemandIf(true).moduleBeingConfigured;
		$tab_PluginContractModules.menuApiContract = $tab_ModuleManager.registerRawJsModule('@tableau/menu-api-contract', 'menu-api-contract-web.min', 'menu-api-contract-web').andLoadOnDemandIf(true).moduleBeingConfigured;
		$tab_PluginContractModules.hybridWidgetsContract = $tab_ModuleManager.registerRawJsModule('@tableau/hybrid-widgets-contract', 'hybrid-widgets-web.min', 'hybrid-widgets-web').andLoadOnDemandIf(true).moduleBeingConfigured;
		$tab_PluginContractModules.stylingComponentsContract = $tab_ModuleManager.registerRawJsModule('@tableau/styling-components-contract', 'styling-components-contract-web.min', 'styling-components-contract-web').andLoadOnDemandIf(true).moduleBeingConfigured;
	})();
	(function() {
		$tab_DialogPlugins.buttonConfigDialogModuleName = '@tableau/button-config-dialog';
		$tab_DialogPlugins.buttonConfigDialogFileBaseName = 'button-config-dialog';
		$tab_DialogPlugins.chooseExtensionDialogModuleName = '@tableau/choose-extension-dialog';
		$tab_DialogPlugins.extensionInfoDialogModuleName = '@tableau/extension-info-dialog';
		$tab_DialogPlugins.chooseExtensionFileBaseName = 'choose-extension-dialog';
		$tab_DialogPlugins.extensionInfoFileBaseName = 'extension-info-dialog';
		$tab_DialogPlugins.$contractModules = null;
		$tab_DialogPlugins.$dependencyModules = {};
		$tab_DialogPlugins.$contractModules = $tab_DialogPlugins.$initializeContractModules();
		if (tab.FeatureFlags.isEnabled('ActionsDialogMttwSP1')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/dashboard-actions-dialog', 'dashboard-actions-dialog', 'doc:update-action-list-dialog-event', null);
			$tab_DialogPlugins.addHybridDialog('@tableau/dashboard-actions-dialog', 'dashboard-actions-dialog', 'doc:update-filter-action-dialog-event', null);
		}
		if (tab.FeatureFlags.isEnabled('AIExplainThisMark_AuthoringMode') || tab.FeatureFlags.isEnabled('AIExplainThisMark_ViewingMode')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/automated-insights-modal', 'automated-insights-modal', 'doc:open-automated-insights-modal-event', null);
		}
		$tab_DialogPlugins.addHybridDialog('@tableau/edit-axis-dialog', 'edit-axis-dialog', 'doc:update-edit-axis-dialog-event', null);
		if (tab.FeatureFlags.isEnabled('WebParameters')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/parameters-dialog', 'parameters-dialog', 'doc:parameter-edit-dialog-event', null);
		}
		$tab_DialogPlugins.addHybridDialog('@tableau/sort-dialog', 'sort-dialog', 'doc:show-sort-dialog-event', null).addDependency($tab_DialogPlugins.$getDependencyModule('@tableau/widgets-datagrid', 'widgets-datagrid'));
		$tab_DialogPlugins.addHybridDialog('@tableau/hybrid-ui-showcase', 'hybrid-ui-showcase', 'doc:launch-hybrid-uishowcase-event', null).addDependency($tab_DialogPlugins.$getDependencyModule('@tableau/custom-color-picker-api-contract', 'custom-color-picker-api-contract-web'));
		$tab_DialogPlugins.addHybridDialog($tab_DialogPlugins.buttonConfigDialogModuleName, $tab_DialogPlugins.buttonConfigDialogFileBaseName, 'doc:update-button-config-dialog-event', null);
		if (tab.FeatureFlags.isEnabled('DashboardMttwImageObject')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/image-object-config-dialog', 'image-object-config-dialog', 'doc:update-image-object-config-dialog-event', null);
		}
		if (tab.FeatureFlags.isEnabled('Extensions')) {
			$tab_DialogPlugins.addHybridDialog($tab_DialogPlugins.chooseExtensionDialogModuleName, $tab_DialogPlugins.chooseExtensionFileBaseName, 'doc:choose-extension-dialog-event', null);
			$tab_DialogPlugins.addHybridDialog($tab_DialogPlugins.extensionInfoDialogModuleName, $tab_DialogPlugins.extensionInfoFileBaseName, 'doc:extension-info-dialog-event', null);
		}
		if (tab.FeatureFlags.isEnabled('ExtensionPermissionsPrompt')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/extensions-permissions-dialog', 'extensions-permissions-dialog', 'doc:permissions-dialog-event', null);
		}
		if (tsConfig.is_authoring) {
			$tab_DialogPlugins.addHybridDialog('@tableau/rich-text-editor-hybrid-dialog', 'rich-text-editor-hybrid-dialog', 'doc:rich-text-editor-dialog-event', null);
		}
		$tab_DialogPlugins.addHybridDialog('@tableau/zone-friendly-name-config-dialog', 'zone-friendly-name-config-dialog', 'doc:launch-zone-friendly-name-config-dialog-event', null);
		$tab_DialogPlugins.addHybridDialogIfFeatureEnabled('GotoSheetDialog', '@tableau/goto-sheet-dialog', 'goto-sheet-dialog', 'doc:launch-goto-sheet-dialog-event', null);
		var zIndexOverride = { customZIndex: tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex, contentClassName: 'detailedErrorDialog' };
		$tab_DialogPlugins.addHybridDialog('@tableau/detailed-error-dialog', 'detailed-error-dialog', 'doc:update-detailed-error-dialog-event', zIndexOverride);
		if (tab.FeatureFlags.isEnabled('DownloadAsVersionHiFi')) {
			$tab_DialogPlugins.addHybridDialog('@tableau/export-as-version-dialog', 'export-as-version-dialog', 'doc:launch-export-as-version-dialog-event', zIndexOverride);
		}
		$tab_DialogPlugins.addHybridDialogIfFeatureEnabled('ExportToPowerPointSP2OptionsDialog', '@tableau/export-powerpoint-options-dialog', 'export-powerpoint-options-dialog', 'doc:launch-export-power-point-options-dialog-event', null);
		$tab_DialogPlugins.$connectionPlugins();
	})();
	(function() {
		if (tab.FeatureFlags.isEnabled('ExportToPowerPointSP2OptionsDialog')) {
			$tab_ApplicationModel.get_instance().registerNotificationHandler('doc:file-download-notification-event', $tab_ExportServerCommands.$handlePowerPointFileDownload);
		}
	})();
	(function() {
		$tab_ToolbarServerCommands.$uriPattern = new RegExp('^https?://[^/]+(.*)$');
	})();
	(function() {
		$tab_WebCommandRegistry.get_instance().registerCommand({ ns: 'tabdoc', cmd: 'download-as-version' }, $tab_DownloadAsVersionCommand);
	})();
	(function() {
		$tab_NotificationHandlerLauncher.registerHandler('doc:permissions-update-event', $tab_ExtensionPermissionsProxy.$returnModel);
	})();
	(function() {
		$tab_FileUploadTelemetry.$singleton = null;
		$tab_FileUploadTelemetry.$fileUploadEventPrefix = 'Authoring_DataTab_FileUpload_';
	})();
	(function() {
		$tab_PluginTelemetry.$instance = null;
	})();
	(function() {
		$tab_PaneIdModel.currentPage = 4294967295;
	})();
	(function() {
		$tab_WebCommandRegistry.get_instance().registerCommand({ ns: 'tabdoc', cmd: 'perform-tabbed-authentication' }, $tab_PerformTabbedAuthenticationCommand);
	})();
	(function() {
		$tab_WebCommandRegistry.get_instance().registerCommand({ ns: 'tabdoc', cmd: 'raise-connections-succeeded-notification' }, $tab_RaiseConnectionsSucceededNotificationCommand);
	})();
	(function() {
		$tab_WebCommandRegistry.get_instance().registerCommand({ ns: 'tabdoc', cmd: 'raise-dialog-closed-notification' }, $tab_RaiseDialogClosedNotificationCommand);
	})();
	(function() {
		$tab_RichTextClientCommands.$richTextEditorCreationCommandName = 'rich-text-editor';
	})();
	(function() {
		$tab_SceneDataUtil.shapeMapping = null;
		$tab_SceneDataUtil.reverseShapeMapping = null;
		$tab_SceneDataUtil.$paneFlagMapping = null;
		$tab_SceneDataUtil.$markFlagMapping = null;
		$tab_SceneDataUtil.lineInterpolationMapping = null;
		$tab_SceneDataUtil.$paneFlagMapping = {};
		$tab_SceneDataUtil.$paneFlagMapping['enable-pan-x'] = 1;
		$tab_SceneDataUtil.$paneFlagMapping['enable-pan-y'] = 2;
		$tab_SceneDataUtil.$paneFlagMapping['enable-zoom-x'] = 4;
		$tab_SceneDataUtil.$paneFlagMapping['enable-zoom-y'] = 8;
		$tab_SceneDataUtil.$paneFlagMapping['enable-scale-x'] = 16;
		$tab_SceneDataUtil.$paneFlagMapping['enable-scale-y'] = 32;
		$tab_SceneDataUtil.$paneFlagMapping['clip-to-cell-x'] = 64;
		$tab_SceneDataUtil.$paneFlagMapping['clip-to-cell-y'] = 128;
		$tab_SceneDataUtil.$paneFlagMapping['clip-to-cell-for-selection'] = 256;
		$tab_SceneDataUtil.$paneFlagMapping['x-axis-on-top'] = 512;
		$tab_SceneDataUtil.$paneFlagMapping['y-axis-on-right'] = 1024;
		$tab_SceneDataUtil.$paneFlagMapping['has-cells-x'] = 2048;
		$tab_SceneDataUtil.$paneFlagMapping['has-cells-y'] = 4096;
		$tab_SceneDataUtil.$markFlagMapping = {};
		$tab_SceneDataUtil.$markFlagMapping['end'] = 1;
		$tab_SceneDataUtil.$markFlagMapping['endprimitive'] = 2;
		$tab_SceneDataUtil.$markFlagMapping['closedprimitive'] = 4;
		$tab_SceneDataUtil.$markFlagMapping['marked'] = 8;
		$tab_SceneDataUtil.$markFlagMapping['markediflabel'] = 16;
		$tab_SceneDataUtil.$markFlagMapping['debug'] = 128;
		$tab_SceneDataUtil.$markFlagMapping['user'] = 65536;
		$tab_SceneDataUtil.shapeMapping = ss.mkdict(['0', 'shapeIDCircle', '1', 'shapeIDSquare', '2', 'shapeIDPlus', '3', 'shapeIDTimes', '4', 'shapeIDAsterisk', '5', 'shapeIDDiamond', '6', 'shapeIDTriangle', '7', 'shapeIDDownTriangle', '8', 'shapeIDLeftTriangle', '9', 'shapeIDRightTriangle', '4194304', 'shapeIDFilledCircle', '4194305', 'shapeIDFilledSquare', '4194306', 'shapeIDFilledPlus', '4194307', 'shapeIDFilledTimes', '4194308', 'shapeIDFilledStar', '4194309', 'shapeIDFilledDiamond', '4194310', 'shapeIDFilledTriangle', '4194311', 'shapeIDFilledDownTriangle', '4194312', 'shapeIDFilledLeftTriangle', '4194313', 'shapeIDFilledRightTriangle', '-4194304', 'shapeIDUnscaledFilledCircle']);
		$tab_SceneDataUtil.reverseShapeMapping = {};
		var $t1 = _.keys($tab_SceneDataUtil.shapeMapping);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var key = $t1[$t2];
			$tab_SceneDataUtil.reverseShapeMapping[$tab_SceneDataUtil.shapeMapping[key]] = key;
		}
		$tab_SceneDataUtil.lineInterpolationMapping = ss.mkdict(['0', 'lim-linear', '1', 'lim-step', '2', 'lim-jump']);
	})();
	(function() {
		$tab_SceneUtils.blackColor = null;
		var blackColorStr = (new $tab_ColorModel(0, 0, 0, 1)).toRgba();
		$tab_SceneUtils.blackColor = {};
		$tab_SceneUtils.blackColor['colorOverrideNone'] = blackColorStr;
		$tab_SceneUtils.blackColor['colorOverrideFog'] = blackColorStr;
		$tab_SceneUtils.blackColor['colorOverrideOpaque'] = blackColorStr;
	})();
	(function() {
		$tab_SchemaCommandLocalOptions.$registerRenameDataSourceCommandOptions();
		$tab_SchemaCommandLocalOptions.$registerSetActiveDataSourceNameCommandOptions();
	})();
	(function() {
		$tab_SchemaUtils.maxDatasourceCaptionLength = 254;
	})();
	(function() {
		$tab_SortingTelemetry.$sortingUsageTable = 'SortingEvents';
		$tab_SortingTelemetry.$indicatorTypeColumnName = 'IndicatorType';
		$tab_SortingTelemetry.$regionOrientationColumnName = 'RegionOrientation';
		$tab_SortingTelemetry.$regionTypeColumnName = 'RegionType';
		$tab_SortingTelemetry.$sortTypeColumnName = 'SortType';
		$tab_SortingTelemetry.$sortDirectionColumnName = 'SortDirection';
		$tab_SortingTelemetry.$useNestedSortForComparativeSortColumnName = 'UseNestedSortForComparativeSort';
		$tab_SortingTelemetry.$sortingEntryPoint = 'EntryPoint';
		$tab_SortingTelemetry.$sortIndicatorEntryPoint = 'SortIndicator';
		$tab_SortingTelemetry.$sortIndicatorMenuEntryPoint = 'SortIndicatorMenu';
		$tab_SortingTelemetry.$toolbarEntryPoint = 'Toolbar';
		$tab_SortingTelemetry.$unknownValue = 'Unknown';
	})();
	(function() {
		var $t1 = $tab_ApplicationModel.get_instance();
		$t1.addModel($tab_TypeInCalculationModel).call($t1);
	})();
	(function() {
		$tab_UbertipSerializer.$selectionTemplate = ['<span style="white-space:pre"><div class="uberSelection"style="text-align:center;"><span>&nbsp;&nbsp;</span>', '<span style="font-weight:bold;">', '', '</span><span> ', '', '  </span><span>', '·', '  </span><span>', '', ' </span><span>', '', '</span><span>', ': ', '</span><span style="font-weight:bold;">', '', '</span><span>&nbsp;&nbsp;', '</span></div></span>'];
		$tab_UbertipSerializer.$selectionTemplateNoSummary = ['<div class="uberSelection"style="text-align:center;"><span></span>', '<span style="font-weight:bold;"> ', '', ' </span><span>', '', '</span><div> '];
	})();
	(function() {
		$tab_ApplicationModel.get_instance().registerNotificationHandler('doc:view-selected-data-event', $tab_ViewSelectedDataServerCommands.$handleViewData);
	})();
})();

// END Domain
