/*! BEGIN UI */

(function() {
	'dont use strict';
	var $asm = {};
	global.tab = global.tab || {};
	global.tableau = global.tableau || {};
	ss.initAssembly($asm, 'vqlui');
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.InternetExplorerHelp
	global.onhelp = function InternetExplorerHelp$OnHelp() {
		return false;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Util.Fonts.FontFace.FontFaceLoadStatus
	var $FontFace$FontFaceLoadStatus = function() {
	};
	$FontFace$FontFaceLoadStatus.__typeName = 'FontFace$FontFaceLoadStatus';
	global.FontFace$FontFaceLoadStatus = $FontFace$FontFaceLoadStatus;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Util.Fonts.FontFaceSet.FontFaceSetLoadStatus
	var $FontFaceSet$FontFaceSetLoadStatus = function() {
	};
	$FontFaceSet$FontFaceSetLoadStatus.__typeName = 'FontFaceSet$FontFaceSetLoadStatus';
	global.FontFaceSet$FontFaceSetLoadStatus = $FontFaceSet$FontFaceSetLoadStatus;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.TypeDefs.TsConfigExtensions
	var $TsConfigExtensions = function() {
	};
	$TsConfigExtensions.__typeName = 'TsConfigExtensions';
	$TsConfigExtensions.visibleSheetsAndRepositoryUrls = function TsConfigExtensions$VisibleSheetsAndRepositoryUrls() {
		ss.Debug.assert(tsConfig.visible_sheets.length === tsConfig.repository_urls.length, 'Expected VisibleSheets and RepositoryUrls to be the same length');
		var values = new Array(tsConfig.visible_sheets.length);
		for (var i = 0; i < tsConfig.visible_sheets.length; ++i) {
			values[i] = new $tab_VisibleSheetAndRepositoryUrl(tsConfig.visible_sheets[i], tsConfig.repository_urls[i]);
		}
		return values;
	};
	global.TsConfigExtensions = $TsConfigExtensions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.AdjustStaticImageSizeUtility
	var $tab_$AdjustStaticImageSizeUtility = function() {
	};
	$tab_$AdjustStaticImageSizeUtility.__typeName = 'tab.$AdjustStaticImageSizeUtility';
	$tab_$AdjustStaticImageSizeUtility.$adjustStaticImageSize = function AdjustStaticImageSizeUtility$AdjustStaticImageSize() {
		if (tsConfig.embedded) {
			var image = document.getElementById('staticImage');
			if (ss.isNullOrUndefined(image)) {
				return;
			}
			$tab_$AdjustStaticImageSizeUtility.$adjustForMinMaxDashboardSizes(image);
			$tab_$AdjustStaticImageSizeUtility.$adjustHeightForAutoSizedVizes(image);
			$tab_$AdjustStaticImageSizeUtility.$adjustWidthForAutoSizedVizes(image);
		}
	};
	$tab_$AdjustStaticImageSizeUtility.$adjustWidthForAutoSizedVizes = function AdjustStaticImageSizeUtility$AdjustWidthForAutoSizedVizes(image) {
		if (image.style.width !== 'auto') {
			return;
		}
		var scaledBackgroundWidth = $tab_$AdjustStaticImageSizeUtility.$getScaledDimension(image, 0);
		if (ss.isNullOrUndefined(scaledBackgroundWidth)) {
			return;
		}
		image.style.width = ss.unbox(scaledBackgroundWidth) + 'px';
	};
	$tab_$AdjustStaticImageSizeUtility.$adjustHeightForAutoSizedVizes = function AdjustStaticImageSizeUtility$AdjustHeightForAutoSizedVizes(image) {
		if (image.style.height !== 'auto') {
			return;
		}
		var scaledBackgroundHeight = $tab_$AdjustStaticImageSizeUtility.$getScaledDimension(image, 1);
		if (ss.isNullOrUndefined(scaledBackgroundHeight)) {
			return;
		}
		image.style.height = ss.unbox(scaledBackgroundHeight) + 'px';
	};
	$tab_$AdjustStaticImageSizeUtility.$adjustForMinMaxDashboardSizes = function AdjustStaticImageSizeUtility$AdjustForMinMaxDashboardSizes(image) {
		var imageParent = image.parentElement;
		var v = { h: imageParent.offsetHeight, w: imageParent.offsetWidth };
		var sizeConstraints = tabBootstrap.ViewerBootstrap.get_instance().get_sizeConstraints();
		if (sizeConstraints.maxWidth === 0 && sizeConstraints.maxHeight === 0) {
			return;
		}
		if (v.w < sizeConstraints.minWidth) {
			v.w = sizeConstraints.minWidth;
		}
		else if (sizeConstraints.maxWidth !== 0 && v.w > sizeConstraints.maxWidth) {
			v.w = sizeConstraints.maxWidth;
		}
		if (v.h < sizeConstraints.minHeight) {
			v.h = sizeConstraints.minHeight;
		}
		else if (sizeConstraints.maxHeight !== 0 && v.h > sizeConstraints.maxHeight) {
			v.h = sizeConstraints.maxHeight;
		}
		image.style.height = v.h - (tsConfig.showTabs ? 31 : 9) + 'px';
		image.style.width = v.w - 8 + 'px';
	};
	$tab_$AdjustStaticImageSizeUtility.$getScaledDimension = function AdjustStaticImageSizeUtility$GetScaledDimension(image, index) {
		if (ss.isNullOrUndefined(image.style.backgroundSize)) {
			return null;
		}
		var sizeStrings = image.style.backgroundSize.split(' ');
		if (sizeStrings.length <= 1) {
			return null;
		}
		return parseInt(sizeStrings[index], 10);
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApiParameterHandler
	var $tab_$ApiParameterHandler = function() {
	};
	$tab_$ApiParameterHandler.__typeName = 'tab.$ApiParameterHandler';
	$tab_$ApiParameterHandler.$processParameters = function ApiParameterHandler$ProcessParameters(pm) {
		var paramList = ss.cast(pm, Array);
		var parameters = [];
		if (ss.isValue(paramList)) {
			for (var $t1 = 0; $t1 < paramList.length; $t1++) {
				var p = paramList[$t1];
				var paramImpl = $tab_$ApiParameterHandler.$extractOneParameter(p);
				if (ss.isValue(paramImpl) && paramImpl.isValidPresModel) {
					parameters.push(paramImpl);
				}
			}
		}
		var $t2 = new Object();
		$t2.parameters = Array.prototype.slice.call(parameters);
		var retVal = $t2;
		return retVal;
	};
	$tab_$ApiParameterHandler.$processOneParameters = function ApiParameterHandler$ProcessOneParameters(pm) {
		var vm = pm;
		if (ss.isValue(vm.valid) && !vm.valid) {
			var $t1 = new Object();
			$t1.isValidPresModel = false;
			var parameterImpl = $t1;
			return parameterImpl;
		}
		else {
			var param = pm;
			if (ss.isValue(param)) {
				return $tab_$ApiParameterHandler.$extractOneParameter(param);
			}
		}
		return null;
	};
	$tab_$ApiParameterHandler.$convertDataTypeToApiParameterDataType = function ApiParameterHandler$ConvertDataTypeToApiParameterDataType(dataType) {
		switch (dataType) {
			case 'boolean': {
				return 'boolean';
			}
			case 'real': {
				return 'float';
			}
			case 'integer':
			case 'tuple': {
				return 'integer';
			}
			case 'date': {
				return 'date';
			}
			case 'datetime': {
				return 'datetime';
			}
			case 'cstring':
			default: {
				return 'string';
			}
		}
	};
	$tab_$ApiParameterHandler.$extractOneParameter = function ApiParameterHandler$ExtractOneParameter(p) {
		if (!ss.isValue(p.parameterName) || !ss.isValue(p.fieldCaption)) {
			return null;
		}
		var dataType = p.dataType;
		var allowableValues = [];
		for (var i = 0; i < p.valuesAliases.length; i++) {
			var aliasedValue = p.valuesAliases[i];
			var formattedValue = p.formattedValues[i];
			allowableValues.push($tab_$ApiParameterHandler.$makeAliasedDataValue(dataType, aliasedValue, formattedValue));
		}
		var $t1 = new Object();
		$t1.isValidPresModel = true;
		$t1.parameterName = p.parameterName;
		$t1.name = p.fieldCaption;
		$t1.currentValue = $tab_$ApiParameterHandler.$makeAliasedDataValue(dataType, p.valueAlias, p.formattedValue);
		$t1.dataType = $tab_$ApiParameterHandler.$convertDataTypeToApiParameterDataType(dataType);
		$t1.allowableValuesType = $tab_ApiCrossDomainEnumConverter.convertParameterDomainType(p.parameterDomainType);
		$t1.allowableValues = Array.prototype.slice.call(allowableValues);
		$t1.stepSize = $tab_$ApiParameterHandler.$processParamNumber(dataType, p.valueInc);
		$t1.minValue = $tab_$ApiParameterHandler.$makeDataValue(dataType, p.valueMin, p.formattedMin, null);
		$t1.maxValue = $tab_$ApiParameterHandler.$makeDataValue(dataType, p.valueMax, p.formattedMax, null);
		var parameterPm = $t1;
		if (dataType === 'date' || dataType === 'datetime') {
			parameterPm.dateStepPeriod = $tab_ApiCrossDomainEnumConverter.convertPeriodType(p.datePeriodType);
		}
		return parameterPm;
	};
	$tab_$ApiParameterHandler.$makeDataValue = function ApiParameterHandler$MakeDataValue(dataType, value, formattedValue, aliasedValue) {
		var $t1 = new Object();
		$t1.type = $tab_ApiCrossDomainEnumConverter.convertDataType(dataType);
		$t1.value = $tab__ApiSerializer.serializeDataValue(value, dataType);
		var dataValue = $t1;
		if (!tab.MiscUtil.isNullOrEmpty$3(aliasedValue)) {
			dataValue.aliasedValue = aliasedValue;
		}
		if (!tab.MiscUtil.isNullOrEmpty$3(formattedValue)) {
			dataValue.formattedValue = formattedValue;
		}
		return dataValue;
	};
	$tab_$ApiParameterHandler.$makeAliasedDataValue = function ApiParameterHandler$MakeAliasedDataValue(dataType, aliasedValue, formattedValue) {
		return $tab_$ApiParameterHandler.$makeDataValue(dataType, $tab_$ApiParameterHandler.$getAliasedValueValue(aliasedValue), formattedValue, $tab_$ApiParameterHandler.$getAliasedValueAlias(aliasedValue));
	};
	$tab_$ApiParameterHandler.$processParamNumber = function ApiParameterHandler$ProcessParamNumber(dataType, val) {
		if (ss.isValue(val)) {
			if (dataType === 'integer' || dataType === 'date' || dataType === 'datetime') {
				return parseInt(val);
			}
			if (dataType === 'real') {
				return parseFloat(val);
			}
		}
		return null;
	};
	$tab_$ApiParameterHandler.$getAliasedValueValue = function ApiParameterHandler$GetAliasedValueValue(a) {
		return ss.cast(a[0], String);
	};
	$tab_$ApiParameterHandler.$getAliasedValueAlias = function ApiParameterHandler$GetAliasedValueAlias(a) {
		if (a.length < 2) {
			return null;
		}
		if (ss.isNullOrUndefined(a[1]) || ss.cast(a[1], String).length === 0) {
			return null;
		}
		return ss.cast(a[1], String);
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApiServerResultBuilder
	var $tab_$ApiServerResultBuilder = function() {
	};
	$tab_$ApiServerResultBuilder.__typeName = 'tab.$ApiServerResultBuilder';
	$tab_$ApiServerResultBuilder.$buildResult = function ApiServerResultBuilder$BuildResult(result, pm) {
		var param = {};
		param['api.commandResult'] = result;
		param['api.commandData'] = pm;
		var json = JSON.stringify(param);
		return json;
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApplicationStartupUtil
	var $tab_$ApplicationStartupUtil = function() {
	};
	$tab_$ApplicationStartupUtil.__typeName = 'tab.$ApplicationStartupUtil';
	$tab_$ApplicationStartupUtil.$prepareApplicationStartup = function ApplicationStartupUtil$PrepareApplicationStartup() {
		if (tsConfig.isUnitTestRun) {
			return;
		}
		$tab_$AdjustStaticImageSizeUtility.$adjustStaticImageSize();
		$tab_$ApplicationStartupUtil.$scheduleApplicationStartup();
		$tab_$ApplicationStartupUtil.$scheduleApplicationStartupOnSwitchViews();
	};
	$tab_$ApplicationStartupUtil.$scheduleApplicationStartup = function ApplicationStartupUtil$ScheduleApplicationStartup() {
		$($tab_Application.startup);
	};
	$tab_$ApplicationStartupUtil.$scheduleApplicationStartupOnSwitchViews = function ApplicationStartupUtil$ScheduleApplicationStartupOnSwitchViews() {
		tab.CommandController.add_switchedViz(function() {
			$tab_Application.startup();
		});
	};
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApplicationViewModelsClickDetector
	var $tab_$ApplicationViewModelsClickDetector = function() {
		this.$startX = 0;
		this.$startY = 0;
		this.$lastStartEvent = null;
		this.$1$ClickedField = null;
	};
	$tab_$ApplicationViewModelsClickDetector.__typeName = 'tab.$ApplicationViewModelsClickDetector';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ExtraContextState
	var $tab_$ExtraContextState = function(linePattern, textAngle, shapeFill, textFill, shouldAntialias, shouldUnderlineText, transform) {
		this.$linePattern = null;
		this.$textAngle = 0;
		this.$shapeFillStyle = null;
		this.$textFillStyle = null;
		this.$shouldAntialias = false;
		this.$shouldUnderlineText = false;
		this.$transformation = null;
		this.$linePattern = linePattern;
		this.$textAngle = textAngle;
		this.$shapeFillStyle = shapeFill;
		this.$textFillStyle = textFill;
		this.$shouldAntialias = shouldAntialias;
		this.$shouldUnderlineText = shouldUnderlineText;
		this.$transformation = transform.clone();
	};
	$tab_$ExtraContextState.__typeName = 'tab.$ExtraContextState';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.RenderAndCheckFontLoader.DownloadableFontState
	var $tab_$RenderAndCheckFontLoader$DownloadableFontState = function(measurementDiv) {
		this.$fakeFontFamily = null;
		this.$measurementDiv = null;
		this.$fontsToRegister = null;
		this.$fontsAlreadyRegistered = null;
		this.$measurementDiv = measurementDiv;
		this.$fakeFontFamily = this.$measurementDiv.css('font-family').split(',')[0];
		ss.Debug.assert(ss.isValue(this.$measurementDiv), 'DownloadableFontState::DownloadableFontState measurementDiv is required; null implies font is already downloaded');
		this.$fontsToRegister = [];
		this.$fontsAlreadyRegistered = [];
	};
	$tab_$RenderAndCheckFontLoader$DownloadableFontState.__typeName = 'tab.$RenderAndCheckFontLoader$DownloadableFontState';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SrInfo
	var $tab_$SrInfo = function(commandName, linkContent) {
		this.$1$CommandNameField = null;
		this.$1$LinkContentField = null;
		this.set_$commandName(commandName);
		this.set_$linkContent(linkContent);
	};
	$tab_$SrInfo.__typeName = 'tab.$SrInfo';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TextRunLayoutInfo
	var $tab_$TextRunLayoutInfo = function(x, y, width, endAligned, orientation) {
		this.$x = 0;
		this.$y = 0;
		this.$width = 0;
		this.$isEndAligned = false;
		this.$orientation = null;
		this.$x = x;
		this.$y = y;
		this.$width = width;
		this.$isEndAligned = endAligned;
		this.$orientation = orientation;
	};
	$tab_$TextRunLayoutInfo.__typeName = 'tab.$TextRunLayoutInfo';
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApiSerializer
	var $tab__ApiSerializer = function() {
	};
	$tab__ApiSerializer.__typeName = 'tab._ApiSerializer';
	$tab__ApiSerializer.serializeClientInfo = function ApiSerializer$SerializeClientInfo(client, storytellingClient) {
		var dashboard = client.get_applicationPresModel().workbookPresModel.dashboardPresModel;
		var isAutoUpdate = client.get_toolbarCommands().$isAutoUpdate();
		var isDownloadAllowed = !ss.isNullOrEmptyString(dashboard.sheetLayoutInfo.downloadLink) || client.get_toolbarCommands().$isDownloadAllowed();
		var currentSheetName = tsConfig.current_sheet_name;
		var workbookName = tsConfig.workbookName;
		var dashboardZones = $tab_ApiPresModelsConverter.getApiDashboardZonePresModels(dashboard.zones);
		var publishedSheets = $tab__ApiSerializer.serializePublishedSheets(client.get_applicationPresModel().workbookPresModel.sheetsInfo);
		var story = $tab__ApiSerializer.serializeStory(storytellingClient);
		var clientInfo = $tab_ApiCrossDomainPresModelsFactory.newClientInfo(isAutoUpdate, isDownloadAllowed, workbookName, currentSheetName, ss.coalesce(tsConfig.clientNumber, ''), publishedSheets, dashboardZones, story);
		return clientInfo;
	};
	$tab__ApiSerializer.serializeSheetInfo = function ApiSerializer$SerializeSheetInfo(sheetInfo, repositoryUrl) {
		var sheetType;
		if (ss.isValue(sheetInfo.isStory) && sheetInfo.isStory) {
			sheetType = 'story';
		}
		else if (ss.isValue(sheetInfo.isDashboard) && sheetInfo.isDashboard) {
			sheetType = 'dashboard';
		}
		else {
			sheetType = 'worksheet';
		}
		var sheetPm = $tab_ApiCrossDomainPresModelsFactory.newSheetInfo(sheetInfo.sheet, sheetType, sheetInfo.minWidth, sheetInfo.minHeight, sheetInfo.maxWidth, sheetInfo.maxHeight, repositoryUrl);
		return sheetPm;
	};
	$tab__ApiSerializer.serializePublishedSheets = function ApiSerializer$SerializePublishedSheets(sheetsInfo) {
		var sheetInfoMap = {};
		for (var $t1 = 0; $t1 < sheetsInfo.length; $t1++) {
			var pm = sheetsInfo[$t1];
			sheetInfoMap[pm.sheet] = pm;
		}
		var baseSheets = [];
		var $t2 = $TsConfigExtensions.visibleSheetsAndRepositoryUrls();
		for (var $t3 = 0; $t3 < $t2.length; $t3++) {
			var sheetAndUrl = $t2[$t3];
			var sheetInfo = sheetInfoMap[sheetAndUrl.sheetName];
			if (ss.isValue(sheetInfo)) {
				var repositoryUrl = $tab__ApiSerializer.$buildAbsoluteRepositoryUrl(sheetAndUrl.repositoryUrl);
				var sheet = $tab__ApiSerializer.serializeSheetInfo(sheetInfo, repositoryUrl);
				baseSheets.push(sheet);
			}
		}
		return baseSheets;
	};
	$tab__ApiSerializer.serializeStory = function ApiSerializer$SerializeStory(client) {
		var navigatorVm = client.get_flipboardNavigatorViewModel();
		if (ss.isNullOrUndefined(navigatorVm)) {
			return null;
		}
		var activeStoryPointIndex = navigatorVm.get_currentPointIndex();
		var storyPoints = $tab__ApiSerializer.serializeStoryPoints(navigatorVm.get_captions(), client);
		var story = $tab_ApiCrossDomainPresModelsFactory.newStory(activeStoryPointIndex, storyPoints);
		return story;
	};
	$tab__ApiSerializer.serializeStoryPoints = function ApiSerializer$SerializeStoryPoints(captions, client) {
		var storyPoints = [];
		var $t1 = ss.getEnumerator(captions);
		try {
			while ($t1.moveNext()) {
				var captionVm = $t1.current();
				var storyPoint = $tab__ApiSerializer.serializeStoryPoint(captionVm, client);
				storyPoints.push(storyPoint);
			}
		}
		finally {
			$t1.dispose();
		}
		return storyPoints;
	};
	$tab__ApiSerializer.serializeStoryPoint = function ApiSerializer$SerializeStoryPoint(captionViewModel, client) {
		var containedSheetInfo = null;
		if (captionViewModel.get_isCurrentPoint() && client.get_hasContainedSheet()) {
			var containedSheetName = client.get_containedSheetName();
			var containedSheetType = client.get_containedSheetType();
			var containedSheetDashboardZones = $tab_ApiPresModelsConverter.getApiDashboardZonePresModels(client.get_containedDashboardZones());
			containedSheetInfo = $tab_ApiCrossDomainPresModelsFactory.newContainedSheetInfo(containedSheetName, containedSheetType, ss.unbox(client.get_containedSheetZoneId()), containedSheetDashboardZones);
		}
		var storyPoint = $tab_ApiCrossDomainPresModelsFactory.newStoryPoint(captionViewModel.get_caption(), captionViewModel.get_storyPointIndex(), captionViewModel.get_storyPointId(), captionViewModel.get_isCaptured(), containedSheetInfo);
		return storyPoint;
	};
	$tab__ApiSerializer.serializeDataValue = function ApiSerializer$SerializeDataValue(rawValue, dataType) {
		if (dataType === 'boolean') {
			if (_.isBoolean(rawValue)) {
				return rawValue;
			}
			return (ss.isValue(rawValue) ? (rawValue.toString().toLowerCase() === 'true') : false);
		}
		if (ss.isNullOrUndefined(rawValue)) {
			return null;
		}
		switch (dataType) {
			case 'boolean': {
				if (_.isBoolean(rawValue)) {
					return rawValue;
				}
				return (ss.isValue(rawValue) ? (rawValue.toString().toLowerCase() === 'true') : false);
			}
			case 'date':
			case 'datetime': {
				var d = null;
				if (_.isDate(rawValue)) {
					d = ss.cast(rawValue, ss.JsDate);
				}
				else if (_.isNumber(rawValue)) {
					if (isNaN(ss.unbox(ss.cast(rawValue, Number)))) {
						d = null;
					}
					else {
						d = new Date(tableau.types.JsDateFromOleDate(ss.unbox(ss.cast(rawValue, Number))));
					}
				}
				else {
					d = tab.DateUtil.parsePresModelDate(rawValue.toString());
				}
				if (ss.isNullOrUndefined(d) || isNaN(d)) {
					return null;
				}
				return d.getTime();
			}
			case 'integer': {
				if (_.isNumber(rawValue)) {
					return (isNaN(ss.unbox(ss.cast(rawValue, Number))) ? null : rawValue);
				}
				var parsedInt = parseInt(rawValue.toString(), 10);
				return (isNaN(parsedInt) ? null : parsedInt);
			}
			case 'real': {
				if (_.isNumber(rawValue)) {
					return (isNaN(ss.unbox(ss.cast(rawValue, Number))) ? null : rawValue);
				}
				var parsedFloat = parseFloat(rawValue.toString());
				return (isNaN(parsedFloat) ? null : parsedFloat);
			}
			default:
			case 'cstring':
			case 'tuple':
			case 'unknown': {
				return rawValue.toString();
			}
		}
	};
	$tab__ApiSerializer.serializeCustomView = function ApiSerializer$SerializeCustomView(customizedView, url) {
		return $tab_ApiCrossDomainPresModelsFactory.newCustomView(customizedView.id, customizedView.name, customizedView.urlId, url, customizedView.startViewId, customizedView.isPublic, $tab__ApiSerializer.serializeUser(customizedView.owner));
	};
	$tab__ApiSerializer.serializeUser = function ApiSerializer$SerializeUser(user) {
		return $tab_ApiCrossDomainPresModelsFactory.newUser(user.id, user.friendlyName, user.username);
	};
	$tab__ApiSerializer.convertToCustomizedView = function ApiSerializer$ConvertToCustomizedView(apiCv) {
		var $t1 = new Object();
		$t1.id = apiCv.id;
		$t1.isPublic = apiCv.isPublic;
		$t1.name = apiCv.name;
		$t1.owner = $tab__ApiSerializer.convertToUser(apiCv.owner);
		$t1.startViewId = apiCv.startViewId;
		$t1.urlId = apiCv.urlId;
		var cv = $t1;
		return cv;
	};
	$tab__ApiSerializer.convertToUser = function ApiSerializer$ConvertToUser(apiUser) {
		var user = { friendlyName: apiUser.friendlyName, id: apiUser.id, username: apiUser.username };
		return user;
	};
	$tab__ApiSerializer.$buildAbsoluteRepositoryUrl = function ApiSerializer$BuildAbsoluteRepositoryUrl(relativeUrl) {
		var uriModel = tab.VizUriModel.createForViewingSheetNoQueryParamsNoHash(relativeUrl);
		return uriModel.get_absoluteUri();
	};
	global.tab._ApiSerializer = $tab__ApiSerializer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ActionExecutedEventArgs
	var $tab_ActionExecutedEventArgs = function() {
		this.action = null;
		ss.EventArgs.call(this);
	};
	$tab_ActionExecutedEventArgs.__typeName = 'tab.ActionExecutedEventArgs';
	global.tab.ActionExecutedEventArgs = $tab_ActionExecutedEventArgs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.AddSubscribersComponent
	var $tab_AddSubscribersComponent = function(props, context) {
		React.Component.call(this, props, context);
		this.state = { users: props.users, groups: props.groups };
	};
	$tab_AddSubscribersComponent.__typeName = 'tab.AddSubscribersComponent';
	global.tab.AddSubscribersComponent = $tab_AddSubscribersComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.AddSubscribersComponentConstants
	var $tab_AddSubscribersComponentConstants = function() {
	};
	$tab_AddSubscribersComponentConstants.__typeName = 'tab.AddSubscribersComponentConstants';
	global.tab.AddSubscribersComponentConstants = $tab_AddSubscribersComponentConstants;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.AddSubscribersComponentProps
	var $tab_AddSubscribersComponentProps = function() {
	};
	$tab_AddSubscribersComponentProps.__typeName = 'tab.AddSubscribersComponentProps';
	$tab_AddSubscribersComponentProps.createInstance = function() {
		return $tab_AddSubscribersComponentProps.$ctor();
	};
	$tab_AddSubscribersComponentProps.$ctor = function() {
		var $this = {};
		$this.userPillsComponentProps = null;
		$this.users = null;
		$this.addUser = null;
		$this.removeUser = null;
		$this.groups = null;
		$this.addGroup = null;
		$this.removeGroup = null;
		$this.removeRecipientByIndex = null;
		$this.isUsers = false;
		$this.cancelSelection = null;
		$this.confirmSelection = null;
		$this.confirmUsersSelection = null;
		$this.confirmGroupsSelection = null;
		return $this;
	};
	$tab_AddSubscribersComponentProps.isInstanceOfType = function() {
		return true;
	};
	global.tab.AddSubscribersComponentProps = $tab_AddSubscribersComponentProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.AddSubscribersViewModel
	var $tab_AddSubscribersViewModel = function(users, groups, isUsers) {
		this.originalUsers = null;
		this.users = null;
		this.originalGroups = null;
		this.groups = null;
		this.isUsers = false;
		this.$2$PropsUpdatedField = null;
		this.$2$SelectionCanceledField = null;
		this.$2$SelectionConfirmedUserField = null;
		this.$2$SelectionConfirmedGroupField = null;
		this.$2$PropsField = null;
		spiff.BaseViewModel.call(this);
		this.originalUsers = users;
		this.originalGroups = groups;
		this.users = ss.arrayClone(users);
		this.groups = ss.arrayClone(groups);
		this.isUsers = isUsers;
		var $t1 = $tab_AddSubscribersComponentProps.$ctor();
		$t1.users = this.users;
		$t1.addUser = ss.mkdel(this, this.addUser);
		$t1.removeUser = ss.mkdel(this, this.removeUser);
		$t1.groups = this.groups;
		$t1.addGroup = ss.mkdel(this, this.addGroup);
		$t1.removeGroup = ss.mkdel(this, this.removeGroup);
		$t1.removeRecipientByIndex = ss.mkdel(this, this.removeRecipientByIndex);
		$t1.isUsers = this.isUsers;
		$t1.cancelSelection = ss.mkdel(this, this.cancelSelection);
		$t1.confirmSelection = ss.mkdel(this, this.confirmSelection);
		$t1.confirmUsersSelection = ss.mkdel(this, function(u) {
			this.$2$SelectionConfirmedUserField(u);
		});
		$t1.confirmGroupsSelection = ss.mkdel(this, function(g) {
			this.$2$SelectionConfirmedGroupField(g);
		});
		this.set_props($t1);
	};
	$tab_AddSubscribersViewModel.__typeName = 'tab.AddSubscribersViewModel';
	global.tab.AddSubscribersViewModel = $tab_AddSubscribersViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiCrossDomainEnumConverter
	var $tab_ApiCrossDomainEnumConverter = function() {
	};
	$tab_ApiCrossDomainEnumConverter.__typeName = 'tab.ApiCrossDomainEnumConverter';
	$tab_ApiCrossDomainEnumConverter.convertDataType = function ApiCrossDomainEnumConverter$ConvertDataType(dataType) {
		switch (dataType) {
			case 'boolean': {
				return 'bool';
			}
			case 'date':
			case 'datetime': {
				return 'date';
			}
			case 'integer':
			case 'real':
			case 'tuple': {
				return 'number';
			}
			case 'cstring': {
				return 'string';
			}
			case 'unknown':
			default: {
				return 'string';
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertUnderlyingDataType = function ApiCrossDomainEnumConverter$ConvertUnderlyingDataType(dataType) {
		switch (dataType) {
			case 'boolean': {
				return 'boolean';
			}
			case 'date': {
				return 'date';
			}
			case 'datetime': {
				return 'datetime';
			}
			case 'integer': {
				return 'integer';
			}
			case 'real':
			case 'tuple': {
				return 'float';
			}
			case 'cstring':
			case 'unknown':
			default: {
				return 'string';
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertFieldAggregation = function ApiCrossDomainEnumConverter$ConvertFieldAggregation(aggregation) {
		switch (aggregation) {
			case 'attr': {
				return 'ATTR';
			}
			case 'average': {
				return 'AVG';
			}
			case 'collect': {
				return 'COLLECT';
			}
			case 'count': {
				return 'COUNT';
			}
			case 'count-d': {
				return 'COUNTD';
			}
			case 'day': {
				return 'DAY';
			}
			case 'end': {
				return 'END';
			}
			case 'hour': {
				return 'HOUR';
			}
			case 'in-out': {
				return 'INOUT';
			}
			case 'kurtosis': {
				return 'KURTOSIS';
			}
			case 'max': {
				return 'MAX';
			}
			case 'mdy': {
				return 'MDY';
			}
			case 'median': {
				return 'MEDIAN';
			}
			case 'min': {
				return 'MIN';
			}
			case 'minute': {
				return 'MINUTE';
			}
			case 'month': {
				return 'MONTH';
			}
			case 'month-year': {
				return 'MONTHYEAR';
			}
			case 'none': {
				return 'NONE';
			}
			case 'percentile': {
				return 'PERCENTILE';
			}
			case 'qtr': {
				return 'QTR';
			}
			case 'quart1': {
				return 'QUART1';
			}
			case 'quart3': {
				return 'QUART3';
			}
			case 'second': {
				return 'SECOND';
			}
			case 'skewness': {
				return 'SKEWNESS';
			}
			case 'std-dev': {
				return 'STDEV';
			}
			case 'std-dev-p': {
				return 'STDEVP';
			}
			case 'sum': {
				return 'SUM';
			}
			case 'sum-xsqr': {
				return 'SUM_XSQR';
			}
			case 'trunc-day': {
				return 'TRUNC_DAY';
			}
			case 'trunc-hour': {
				return 'TRUNC_HOUR';
			}
			case 'trunc-month': {
				return 'TRUNC_MONTH';
			}
			case 'trunc-qtr': {
				return 'TRUNC_QTR';
			}
			case 'trunc-second': {
				return 'TRUNC_SECOND';
			}
			case 'trunc-week': {
				return 'TRUNC_WEEK';
			}
			case 'trunc-year': {
				return 'TRUNC_YEAR';
			}
			case 'user': {
				return 'USER';
			}
			case 'var': {
				return 'VAR';
			}
			case 'var-p': {
				return 'VARP';
			}
			case 'week': {
				return 'WEEK';
			}
			case 'weekday': {
				return 'WEEKDAY';
			}
			case 'year': {
				return 'YEAR';
			}
			default: {
				throw new ss.Exception('Unknown AggType: ' + aggregation);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertFieldRole = function ApiCrossDomainEnumConverter$ConvertFieldRole(role) {
		switch (role) {
			case 'dimension': {
				return 'dimension';
			}
			case 'measure': {
				return 'measure';
			}
			case 'unknown': {
				return 'unknown';
			}
			default: {
				throw new ss.Exception('Unknown FieldRole type: ' + role);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertParameterDomainType = function ApiCrossDomainEnumConverter$ConvertParameterDomainType(domainType) {
		switch (domainType) {
			case 'any': {
				return 'all';
			}
			case 'list': {
				return 'list';
			}
			case 'range': {
				return 'range';
			}
			default: {
				throw new ss.Exception('Unknown ParameterTypesDomainType: ' + domainType);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertPeriodType = function ApiCrossDomainEnumConverter$ConvertPeriodType(periodType) {
		switch (periodType) {
			case 'year': {
				return 'year';
			}
			case 'day': {
				return 'day';
			}
			case 'hour': {
				return 'hour';
			}
			case 'minute': {
				return 'minute';
			}
			case 'month': {
				return 'month';
			}
			case 'quarter': {
				return 'quarter';
			}
			case 'second': {
				return 'second';
			}
			case 'week': {
				return 'week';
			}
			default: {
				throw new ss.Exception('Unknown DatePeriodType: ' + periodType);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertRangeType = function ApiCrossDomainEnumConverter$ConvertRangeType(relativeDateRange) {
		switch (relativeDateRange) {
			case 'curr': {
				return 'curr';
			}
			case 'last': {
				return 'last';
			}
			case 'lastn': {
				return 'lastn';
			}
			case 'next': {
				return 'next';
			}
			case 'nextn': {
				return 'nextn';
			}
			case 'todate': {
				return 'todate';
			}
			case 'invalid':
			default: {
				throw new ss.Exception('Unknown or invalid Filters.RelativeDateRangeType: ' + relativeDateRange);
			}
		}
	};
	$tab_ApiCrossDomainEnumConverter.convertZoneType = function ApiCrossDomainEnumConverter$ConvertZoneType(zoneType) {
		switch (zoneType) {
			case 'color':
			case 'shape':
			case 'size': {
				return 'legend';
			}
			case 'map': {
				return 'legend';
			}
			case 'filter': {
				return 'quickFilter';
			}
			case 'viz': {
				return 'worksheet';
			}
			case 'paramctrl': {
				return 'parameterControl';
			}
			case 'empty': {
				return 'blank';
			}
			case 'title': {
				return 'title';
			}
			case 'text': {
				return 'text';
			}
			case 'bitmap': {
				return 'image';
			}
			case 'web': {
				return 'webPage';
			}
			case 'layout-basic':
			case 'layout-flow':
			case 'layout-free-form': {
				return null;
			}
			default: {
				return 'blank';
			}
		}
	};
	global.tab.ApiCrossDomainEnumConverter = $tab_ApiCrossDomainEnumConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiCrossDomainParamConverter
	var $tab_ApiCrossDomainParamConverter = function() {
	};
	$tab_ApiCrossDomainParamConverter.__typeName = 'tab.ApiCrossDomainParamConverter';
	$tab_ApiCrossDomainParamConverter.convertFilterUpdateType = function ApiCrossDomainParamConverter$ConvertFilterUpdateType(apiFilterUpdateType) {
		var inputType = apiFilterUpdateType.toString();
		if (inputType.toLowerCase() === 'replace') {
			return 'filter-replace'.toString();
		}
		else if (inputType.toLowerCase() === 'all') {
			return 'filter-all'.toString();
		}
		else if (inputType.toLowerCase() === 'add') {
			return 'filter-add'.toString();
		}
		else if (inputType.toLowerCase() === 'remove') {
			return 'filter-remove'.toString();
		}
		else {
			return 'filter-replace'.toString();
		}
	};
	global.tab.ApiCrossDomainParamConverter = $tab_ApiCrossDomainParamConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiCrossDomainPresModelsFactory
	var $tab_ApiCrossDomainPresModelsFactory = function() {
	};
	$tab_ApiCrossDomainPresModelsFactory.__typeName = 'tab.ApiCrossDomainPresModelsFactory';
	$tab_ApiCrossDomainPresModelsFactory.newClientInfo = function ApiCrossDomainPresModelsFactory$NewClientInfo(isAutoUpdate, isDownloadAllowed, workbookName, currentSheetName, instanceId, publishedSheets, dashboardZones, story) {
		var pm = new Object();
		pm.isAutoUpdate = isAutoUpdate;
		pm.isDownloadAllowed = isDownloadAllowed;
		pm.workbookName = workbookName;
		pm.instanceId = instanceId;
		pm.currentSheetName = currentSheetName;
		pm.publishedSheets = publishedSheets;
		pm.dashboardZones = dashboardZones;
		pm.story = story;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAutoUpdateState = function ApiCrossDomainPresModelsFactory$NewAutoUpdateState(isAutoUpdate) {
		var pm = new Object();
		pm.isAutoUpdate = isAutoUpdate;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCommandError = function ApiCrossDomainPresModelsFactory$NewCommandError(errorCode, additionalInformation) {
		var pm = new Object();
		pm.errorCode = errorCode;
		pm.additionalInformation = additionalInformation;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newSheetInfo = function ApiCrossDomainPresModelsFactory$NewSheetInfo(name, sheetType, minWidth, minHeight, maxWidth, maxHeight, repositoryUrl) {
		var sizeConstraints = new Object();
		sizeConstraints.maxHeight = maxHeight;
		sizeConstraints.maxWidth = maxWidth;
		sizeConstraints.minHeight = minHeight;
		sizeConstraints.minWidth = minWidth;
		var pm = new Object();
		pm.name = name;
		pm.sizeConstraints = sizeConstraints;
		pm.repositoryUrl = repositoryUrl;
		pm.sheetType = sheetType;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newContainedSheetInfo = function ApiCrossDomainPresModelsFactory$NewContainedSheetInfo(name, sheetType, zoneId, dashboardZones) {
		var pm = new Object();
		pm.name = name;
		pm.sheetType = sheetType;
		pm.zoneId = zoneId;
		pm.dashboardZones = dashboardZones;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newDashboardZone = function ApiCrossDomainPresModelsFactory$NewDashboardZone(name, zoneId, zoneType, height, width, x, y) {
		var pm = new Object();
		pm.name = name;
		pm.zoneId = zoneId;
		pm.zoneType = zoneType;
		pm.height = height;
		pm.width = width;
		pm.x = x;
		pm.y = y;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newStory = function ApiCrossDomainPresModelsFactory$NewStory(activeStoryPointIndex, storyPoints) {
		var pm = new Object();
		pm.activeStoryPointIndex = activeStoryPointIndex;
		pm.storyPoints = storyPoints;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newStoryPoint = function ApiCrossDomainPresModelsFactory$NewStoryPoint(caption, index, storyPointId, isUpdated, containedSheetInfo) {
		var pm = new Object();
		pm.caption = caption;
		pm.index = index;
		pm.storyPointId = storyPointId;
		pm.isUpdated = isUpdated;
		pm.containedSheetInfo = containedSheetInfo;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.$newFilter = function ApiCrossDomainPresModelsFactory$NewFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
		var pm = new Object();
		pm.fieldName = fieldName;
		pm.filterType = filterType;
		pm.caption = caption;
		pm.dataSourceName = dataSourceName;
		pm.fieldRole = fieldRole;
		pm.fieldAggregation = fieldAggregation;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCategoricalFilter = function ApiCrossDomainPresModelsFactory$NewCategoricalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, isExclude, appliedValues) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.isExclude = isExclude;
		pm.appliedValues = appliedValues;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newQuantitativeFilter = function ApiCrossDomainPresModelsFactory$NewQuantitativeFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, domainMinValue, domainMaxValue, minValue, maxValue, includeNullValues) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.domainMinValue = domainMinValue;
		pm.domainMaxValue = domainMaxValue;
		pm.minValue = minValue;
		pm.maxValue = maxValue;
		pm.includeNullValues = includeNullValues;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newHierarchicalFilter = function ApiCrossDomainPresModelsFactory$NewHierarchicalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, levels) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.levels = levels;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newRelativeDateFilter = function ApiCrossDomainPresModelsFactory$NewRelativeDateFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, periodType, rangeType, rangeN) {
		var pm = $tab_ApiCrossDomainPresModelsFactory.$newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
		pm.periodType = periodType;
		pm.rangeType = rangeType;
		pm.rangeN = rangeN;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newDataSourcesForWorksheet = function ApiCrossDomainPresModelsFactory$NewDataSourcesForWorksheet(worksheetName, dataSources) {
		var pm = new Object();
		pm.worksheetName = worksheetName;
		pm.dataSources = dataSources;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newDataSource = function ApiCrossDomainPresModelsFactory$NewDataSource(name, fields, isPrimary) {
		var pm = new Object();
		pm.name = name;
		pm.fields = fields;
		pm.isPrimary = isPrimary;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newField = function ApiCrossDomainPresModelsFactory$NewField(name, role, aggregation) {
		var pm = new Object();
		pm.name = name;
		pm.role = role;
		pm.aggregation = aggregation;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCustomViewsInfo = function ApiCrossDomainPresModelsFactory$NewCustomViewsInfo(customViewLoaded, defaultCustomViewId, currentView, customViews) {
		var pm = new Object();
		pm.customViewLoaded = customViewLoaded;
		pm.defaultCustomViewId = defaultCustomViewId;
		pm.currentView = currentView;
		pm.customViews = customViews;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newCustomView = function ApiCrossDomainPresModelsFactory$NewCustomView(id, name, urlId, url, startViewId, isPublic, owner) {
		var pm = new Object();
		pm.id = id;
		pm.name = name;
		pm.urlId = urlId;
		pm.url = url;
		pm.startViewId = startViewId;
		pm.isPublic = isPublic;
		pm.owner = owner;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newUser = function ApiCrossDomainPresModelsFactory$NewUser(id, friendlyName, username) {
		var pm = new Object();
		pm.id = id;
		pm.friendlyName = friendlyName;
		pm.username = username;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataTablePM = function ApiCrossDomainPresModelsFactory$NewUnderlyingDataTablePM(dataTable, headers, isSummary) {
		var pm = new Object();
		pm.dataTable = dataTable;
		pm.headers = headers;
		pm.isSummary = isSummary;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataColumnsPM = function ApiCrossDomainPresModelsFactory$NewUnderlyingDataColumnsPM(dataType, fieldName, isReferenced, index) {
		var pm = new Object();
		pm.dataType = dataType;
		pm.fieldName = fieldName;
		pm.isReferenced = isReferenced;
		pm.index = index;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newToolbarStatePM = function ApiCrossDomainPresModelsFactory$NewToolbarStatePM(canUndo, canRedo, canRevert, isPaused, canRefreshData, canShowCustomViews, canShowPerformance, canShowDataAlert, canShowSubscribe, canShowShare, canShowDownload) {
		var pm = new Object();
		pm.canUndo = canUndo;
		pm.canRedo = canRedo;
		pm.canRevert = canRevert;
		pm.isPaused = isPaused;
		pm.canRefreshData = canRefreshData;
		pm.canShowCustomViews = canShowCustomViews;
		pm.canShowPerformance = canShowPerformance;
		pm.canShowDataAlert = canShowDataAlert;
		pm.canShowSubscribe = canShowSubscribe;
		pm.canShowShare = canShowShare;
		pm.canShowDownload = canShowDownload;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInInstancePM = function ApiCrossDomainPresModelsFactory$NewAddInInstancePM(instancePm) {
		var pm = new Object();
		pm.locator = $tab_ApiCrossDomainPresModelsFactory.newAddInLocatorPM(instancePm.addInLocatorPresModel);
		pm.url = instancePm.addInRegistrationPresModel.url;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInLocatorPM = function ApiCrossDomainPresModelsFactory$NewAddInLocatorPM(locator) {
		var pm = new Object();
		pm.dashboardPath = $tab_ApiCrossDomainPresModelsFactory.newSheetPathPM(locator.sheetPath);
		pm.instanceId = locator.addInInstanceId;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newSheetPathPM = function ApiCrossDomainPresModelsFactory$NewSheetPathPM(sheetPathPm) {
		var pm = new Object();
		pm.flipboardZoneID = sheetPathPm.flipboardZoneId;
		pm.storyPointID = sheetPathPm.storyPointId;
		pm.storyboard = sheetPathPm.storyboard;
		pm.sheetName = sheetPathPm.sheetName;
		pm.isDashboard = sheetPathPm.isDashboard;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newVisualIdPM = function ApiCrossDomainPresModelsFactory$NewVisualIdPM(visualIdPm) {
		var pm = new Object();
		pm.worksheet = visualIdPm.worksheet;
		pm.dashboard = visualIdPm.dashboard;
		pm.storyboard = visualIdPm.storyboard;
		pm.flipboardZoneID = visualIdPm.flipboardZoneId;
		pm.storyPointID = visualIdPm.storyPointId;
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInBootstrapInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInBootstrapInfoPM(bootstrapPm) {
		var pm = new Object();
		pm.addinDashboardInfo = $tab_ApiCrossDomainPresModelsFactory.newAddInDashboardInfoPM(bootstrapPm.addInDashboardInfoPresModel);
		pm.addInSettingsInfo = $tab_ApiCrossDomainPresModelsFactory.newAddInSettingsInfoPM(bootstrapPm.addInSettingsInfo);
		pm.addInEnvironment = $tab_ApiCrossDomainPresModelsFactory.newAddInEnvironmentInfoPM(bootstrapPm.addInEnvironmentPresModel);
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInDashboardInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInDashboardInfoPM(dashboardInfoPm) {
		var pm = new Object();
		pm.name = dashboardInfoPm.dashboardPresModel.sheetPath.sheetName;
		pm.addInZoneId = dashboardInfoPm.zoneId;
		pm.zones = $tab_ApiPresModelsConverter.getApiDashboardZonePresModels(dashboardInfoPm.dashboardPresModel.zones);
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInSettingsInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInSettingsInfoPM(settingsInfoPm) {
		var pm = new Object();
		pm.settingsValues = settingsInfoPm.addInSettings || {};
		return pm;
	};
	$tab_ApiCrossDomainPresModelsFactory.newAddInEnvironmentInfoPM = function ApiCrossDomainPresModelsFactory$NewAddInEnvironmentInfoPM(environmentPresModel) {
		var pm = new Object();
		pm.addInContext = environmentPresModel.addInContext;
		pm.addInMode = environmentPresModel.addInMode;
		pm.addInLanguage = environmentPresModel.addInLanguage;
		pm.addInLocale = environmentPresModel.addInLocale;
		pm.tableauVersion = environmentPresModel.tableauVersion;
		pm.operatingSystem = environmentPresModel.operatingSystem;
		pm.apiVersion = environmentPresModel.apiVersion || '0.0.1';
		return pm;
	};
	global.tab.ApiCrossDomainPresModelsFactory = $tab_ApiCrossDomainPresModelsFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApiDataSourcesHandler
	var $tab_ApiDataSourcesHandler = function() {
	};
	$tab_ApiDataSourcesHandler.__typeName = 'tab.ApiDataSourcesHandler';
	$tab_ApiDataSourcesHandler.$processDataSourcesForWorksheet = function ApiDataSourcesHandler$ProcessDataSourcesForWorksheet(schemaPm, worksheetName, dataSourceName) {
		var primaryDataSourceName = schemaPm.worksheetDataSchemaMap[worksheetName].primaryDatasource;
		var parametersDataSourceName = schemaPm.parametersDatasource;
		var dataSources = [];
		var dataSourcePMs = schemaPm.dataSources;
		var $t1 = _.keys(dataSourcePMs);
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var name = $t1[$t2];
			if (ss.referenceEquals(name, parametersDataSourceName)) {
				continue;
			}
			var dataSourcePm = dataSourcePMs[name];
			if (!ss.isNullOrEmptyString(dataSourceName) && !ss.referenceEquals(dataSourcePm.datasource, dataSourceName)) {
				continue;
			}
			var fields = $tab_ApiDataSourcesHandler.processDataSourceFields(dataSourcePm.fieldList);
			var isPrimary = ss.referenceEquals(dataSourcePm.datasource, primaryDataSourceName);
			var dataSource = $tab_ApiCrossDomainPresModelsFactory.newDataSource(dataSourcePm.datasourceCaption, Array.prototype.slice.call(fields), isPrimary);
			dataSources.push(dataSource);
		}
		var result = $tab_ApiCrossDomainPresModelsFactory.newDataSourcesForWorksheet(worksheetName, Array.prototype.slice.call(dataSources));
		return result;
	};
	$tab_ApiDataSourcesHandler.processDataSourceFields = function ApiDataSourcesHandler$ProcessDataSourceFields(fieldPms) {
		var fields = [];
		for (var $t1 = 0; $t1 < fieldPms.length; $t1++) {
			var fieldColumnPm = fieldPms[$t1];
			if (ss.isValue(fieldColumnPm.baseColumnName)) {
				continue;
			}
			if (fieldColumnPm.type === 'field-folder') {
				continue;
			}
			if (fieldColumnPm.type === 'field') {
				continue;
			}
			var subDataSourcePm = fieldColumnPm;
			if (ss.isValue(subDataSourcePm.columnList)) {
				for (var $t2 = 0; $t2 < subDataSourcePm.columnList.length; $t2++) {
					var column = subDataSourcePm.columnList[$t2];
					var field = $tab_ApiCrossDomainPresModelsFactory.newField(column.name, $tab_ApiCrossDomainEnumConverter.convertFieldRole(column.fieldRole), $tab_ApiCrossDomainEnumConverter.convertFieldAggregation(column.aggregation));
					fields.push(field);
				}
			}
			else if (fieldColumnPm.type === 'dimension') {
				var field1 = $tab_ApiCrossDomainPresModelsFactory.newField(fieldColumnPm.name, 'dimension', 'NONE');
				fields.push(field1);
			}
			else {
				var field2 = $tab_ApiCrossDomainPresModelsFactory.newField(fieldColumnPm.name, $tab_ApiCrossDomainEnumConverter.convertFieldRole(fieldColumnPm.defaultFieldRole), $tab_ApiCrossDomainEnumConverter.convertFieldAggregation(fieldColumnPm.defaultAggregation));
				fields.push(field2);
			}
		}
		return fields;
	};
	global.tab.ApiDataSourcesHandler = $tab_ApiDataSourcesHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApiDeviceLayoutHandler
	var $tab_ApiDeviceLayoutHandler = function(viewModel, responder) {
		this.$viewModel = null;
		this.$responder = null;
		this.$viewModel = viewModel;
		this.$responder = responder;
		this.$viewModel.add_newLayouts(ss.mkdel(this, this.$handleNewLayouts));
		this.$handleNewLayouts();
	};
	$tab_ApiDeviceLayoutHandler.__typeName = 'tab.ApiDeviceLayoutHandler';
	global.tab.ApiDeviceLayoutHandler = $tab_ApiDeviceLayoutHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApiEventHandler
	var $tab_ApiEventHandler = function(client, storytellingClient, responder) {
		this.$dashboardDisposables = new tab.DisposableHolder();
		this.$apiResponder = null;
		this.$viewListeners = {};
		this.$client = null;
		this.$storytellingClient = null;
		this.$storytellingHandler = null;
		this.$customViewLoaded = false;
		this.$dashboardHandlerInstalled = false;
		this.$toolbarManager = null;
		this.$deviceLayoutHandler = null;
		this.$apiResponder = responder;
		this.updateClients(client, storytellingClient);
		tab.CommandController.get().add_tabChangeCompleted(ss.mkdel(this, this.handleNewLayout));
		tab.StartupUtils.add_clientFullyLoaded(ss.mkdel(this, this.onClientFullyLoaded));
		tab.CommandController.get().add_commandQueueComplete(ss.mkdel(this, this.onCommandComplete));
	};
	$tab_ApiEventHandler.__typeName = 'tab.ApiEventHandler';
	$tab_ApiEventHandler.$getFilterCaption = function ApiEventHandler$GetFilterCaption(primarySheet, filterFieldName) {
		var visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), primarySheet);
		if (ss.isValue(visualModel)) {
			var filterModel = _.find(visualModel.get_filters(), function(model) {
				return ss.referenceEquals(model.get_globalFieldName(), filterFieldName);
			});
			if (ss.isValue(filterModel)) {
				return filterModel.get_filterPresModel().fieldCaption;
			}
		}
		return null;
	};
	$tab_ApiEventHandler.$buildFieldName = function ApiEventHandler$BuildFieldName(name) {
		var sb = new ss.StringBuilder();
		for (var $t1 = 0; $t1 < name.length; $t1++) {
			var s = name[$t1];
			if (!(sb.length === 0)) {
				sb.append('.');
			}
			sb.append('[' + s + ']');
		}
		return sb.toString();
	};
	$tab_ApiEventHandler.$buildQuickFiltersTypeMap = function ApiEventHandler$BuildQuickFiltersTypeMap() {
		var tmpSet = new Set();
		var dashboardModel = tab.ModelUtils.findContentDashboard(null);
		var $t1 = dashboardModel.get_zoneModels();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var zone = $t1[$t2];
			if (zone.get_zoneType() === 'filter' && ss.referenceEquals(zone.get_worksheetName(), tsConfig.current_sheet_name)) {
				var fieldName = ss.cast(zone.get_model(), tab.LegacyQuickFilterDisplayModel).get_fieldName();
				tmpSet.add(fieldName);
			}
		}
		var quickFilterTypeMap = {};
		var visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), tsConfig.current_sheet_name);
		if (ss.isValue(visualModel)) {
			var filters = visualModel.get_filters();
			for (var $t3 = 0; $t3 < filters.length; $t3++) {
				var filter = filters[$t3];
				var fieldName1 = $tab_ApiEventHandler.$buildFieldName(filter.get_filterPresModel().name);
				if (tmpSet.has(fieldName1)) {
					var fieldCaption = filter.get_filterPresModel().fieldCaption;
					if (filter.get_filterPresModel().type !== 'H') {
						quickFilterTypeMap[fieldCaption] = filter.get_filterPresModel().type;
					}
					else {
						fieldCaption = '';
						var table = filter.get_filterPresModel().table[0].table;
						if (ss.isValue(table) && ss.isValue(table.schema) && ss.isValue(table.schema[0]) && ss.isValue(table.schema[0].name)) {
							var names = table.schema[0].name;
							for (var i = 1; i < names.length; i++) {
								fieldCaption += '[' + names[i] + ']';
								quickFilterTypeMap[fieldCaption] = filter.get_filterPresModel().type;
								fieldCaption += '.';
							}
						}
					}
				}
			}
		}
		return quickFilterTypeMap;
	};
	$tab_ApiEventHandler.$processHighlightMarksCommand = function ApiEventHandler$ProcessHighlightMarksCommand(pm) {
		return null;
	};
	$tab_ApiEventHandler.$processSelectMarksCommand = function ApiEventHandler$ProcessSelectMarksCommand(pm) {
		var errorData = pm;
		if (ss.isValue(errorData['invalidFields'])) {
			return $tab_ApiCrossDomainPresModelsFactory.newCommandError('invalidSelectionFieldName', errorData['invalidFields']);
		}
		else if (ss.isValue(errorData['invalidValues'])) {
			return $tab_ApiCrossDomainPresModelsFactory.newCommandError('invalidSelectionValue', errorData['invalidValues']);
		}
		else if (ss.isValue(errorData['invalidDates'])) {
			return $tab_ApiCrossDomainPresModelsFactory.newCommandError('invalidSelectionDate', errorData['invalidDates']);
		}
		return null;
	};
	global.tab.ApiEventHandler = $tab_ApiEventHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiFilterHandler
	var $tab_ApiFilterHandler = function() {
	};
	$tab_ApiFilterHandler.__typeName = 'tab.ApiFilterHandler';
	$tab_ApiFilterHandler.processFilters = function ApiFilterHandler$ProcessFilters(pm) {
		var filterList = ss.cast(JSON.parse(pm.toString()), Array);
		var filters = [];
		if (ss.isValue(filterList)) {
			for (var $t1 = 0; $t1 < filterList.length; $t1++) {
				var p = filterList[$t1];
				var filter = $tab_ApiFilterHandler.$extractOneFilter(p);
				if (ss.isValue(filter)) {
					filters.push(filter);
				}
			}
		}
		var retVal = new Object();
		retVal.filters = Array.prototype.slice.call(filters);
		return retVal;
	};
	$tab_ApiFilterHandler.processFilterCommandReturningFieldName = function ApiFilterHandler$ProcessFilterCommandReturningFieldName(serverPm) {
		var errorPm = $tab_ApiFilterHandler.$checkForCommandError(serverPm);
		if (ss.isValue(errorPm)) {
			return errorPm;
		}
		return serverPm;
	};
	$tab_ApiFilterHandler.processSingleFilter = function ApiFilterHandler$ProcessSingleFilter(serverPm) {
		var errorPm = $tab_ApiFilterHandler.$checkForCommandError(serverPm);
		if (ss.isValue(errorPm)) {
			return errorPm;
		}
		var filterList = JSON.parse(serverPm.toString());
		if (ss.isValue(filterList)) {
			return $tab_ApiFilterHandler.$extractOneFilter(filterList);
		}
		return null;
	};
	$tab_ApiFilterHandler.$checkForCommandError = function ApiFilterHandler$CheckForCommandError(serverPm) {
		var errorData = serverPm;
		if (ss.keyExists(errorData, 'parameterError')) {
			if (ss.isValue(errorData['invalidFieldCaption'])) {
				return $tab_ApiCrossDomainPresModelsFactory.newCommandError('invalidFilterFieldName', errorData['invalidFieldCaption']);
			}
			else if (ss.isValue(errorData['invalidValues'])) {
				return $tab_ApiCrossDomainPresModelsFactory.newCommandError('invalidFilterFieldValue', errorData['invalidValues']);
			}
			else if (ss.isValue(errorData['invalidAggFieldName'])) {
				return $tab_ApiCrossDomainPresModelsFactory.newCommandError('invalidAggregationFieldName', errorData['fieldCaption']);
			}
			else {
				return $tab_ApiCrossDomainPresModelsFactory.newCommandError('serverError', null);
			}
		}
		return null;
	};
	$tab_ApiFilterHandler.$convertFilterPresModelTypeToApiFilterType = function ApiFilterHandler$ConvertFilterPresModelTypeToApiFilterType(filterPresModelType) {
		switch (filterPresModelType) {
			case 'C': {
				return 'categorical';
			}
			case 'H': {
				return 'hierarchical';
			}
			case 'Q': {
				return 'quantitative';
			}
			case 'RD': {
				return 'relativedate';
			}
			default: {
				throw new ss.Exception('Unknown filter type: ' + filterPresModelType);
			}
		}
	};
	$tab_ApiFilterHandler.$extractOneFilter = function ApiFilterHandler$ExtractOneFilter(serverPm) {
		var filterType = $tab_ApiFilterHandler.$convertFilterPresModelTypeToApiFilterType(serverPm.type);
		switch (filterType) {
			case 'categorical': {
				return $tab_ApiFilterHandler.$processCategoricalFilter(serverPm);
			}
			case 'relativedate': {
				return $tab_ApiFilterHandler.$processRelativeDateFilter(serverPm);
			}
			case 'hierarchical': {
				return $tab_ApiFilterHandler.$processHierarchicalFilter(serverPm);
			}
			case 'quantitative': {
				return $tab_ApiFilterHandler.$processQuantitativeFilter(serverPm);
			}
			default: {
				throw new ss.Exception('Unknown FilterType: ' + filterType);
			}
		}
	};
	$tab_ApiFilterHandler.$processBaseFilter = function ApiFilterHandler$ProcessBaseFilter(serverPm, concreteFilterCreator) {
		var fieldName = serverPm.fieldName;
		var caption = serverPm.fieldCaption;
		var filterType = $tab_ApiFilterHandler.$convertFilterPresModelTypeToApiFilterType(serverPm.type);
		var dataSourceName = null;
		var fieldRole = null;
		var fieldAggregation = null;
		if (ss.isValue(serverPm.fieldDetailsJson) && ss.isValue(serverPm.fieldDatasource)) {
			dataSourceName = serverPm.fieldDatasource;
			var fieldJson = JSON.parse(serverPm.fieldDetailsJson);
			var fieldColumn = fieldJson['genFieldColumnPresModel'];
			fieldRole = $tab_ApiCrossDomainEnumConverter.convertFieldRole(fieldColumn.fieldRole);
			fieldAggregation = $tab_ApiCrossDomainEnumConverter.convertFieldAggregation(fieldColumn.aggregation);
		}
		return concreteFilterCreator(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
	};
	$tab_ApiFilterHandler.$processCategoricalFilter = function ApiFilterHandler$ProcessCategoricalFilter(serverPm) {
		var isExclude = serverPm.exclude || false;
		var appliedValues = null;
		if (ss.isValue(serverPm.table)) {
			var table = serverPm.table;
			if (ss.isValue(table.tuples)) {
				var allChecked = ss.coalesce(serverPm.all, false) || ss.coalesce(serverPm.allChecked, false);
				var tuples = table.tuples;
				var list = [];
				for (var $t1 = 0; $t1 < tuples.length; $t1++) {
					var tuple = tuples[$t1];
					if (allChecked || ss.isValue(tuple.s) && tuple.s) {
						var t = tuple.t[0];
						var displayName = tuple.d;
						list.push($tab_ApiFilterHandler.$createDataValueFromStruct(serverPm, t, displayName));
					}
				}
				appliedValues = Array.prototype.slice.call(list);
			}
		}
		var createCategoricalFilter = function(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
			return $tab_ApiCrossDomainPresModelsFactory.newCategoricalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, isExclude, appliedValues);
		};
		return $tab_ApiFilterHandler.$processBaseFilter(serverPm, createCategoricalFilter);
	};
	$tab_ApiFilterHandler.$processQuantitativeFilter = function ApiFilterHandler$ProcessQuantitativeFilter(serverPm) {
		var domainMinValue = null;
		var domainMaxValue = null;
		var minValue = null;
		var maxValue = null;
		var includeNullValues = false;
		if (ss.isValue(serverPm.range)) {
			var range = serverPm.range;
			if (ss.isValue(range.min) && ss.isValue(range.min.v)) {
				domainMinValue = $tab_ApiFilterHandler.$createDataValue(serverPm, range.min, null);
			}
			if (ss.isValue(range.max) && ss.isValue(range.max.v)) {
				domainMaxValue = $tab_ApiFilterHandler.$createDataValue(serverPm, range.max, null);
			}
		}
		if (ss.isValue(serverPm.table)) {
			var table = serverPm.table;
			if (ss.isValue(table.min) && ss.isValue(table.min.v)) {
				minValue = $tab_ApiFilterHandler.$createDataValue(serverPm, table.min, null);
			}
			if (ss.isValue(table.max) && ss.isValue(table.max.v)) {
				maxValue = $tab_ApiFilterHandler.$createDataValue(serverPm, table.max, null);
			}
			if (ss.isValue(table.included)) {
				var inclValue = table.included;
				includeNullValues = inclValue === 'include-all' || inclValue === 'include-null' || inclValue === 'include-range-or-null';
			}
		}
		var createQuantitativeFilter = function(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
			return $tab_ApiCrossDomainPresModelsFactory.newQuantitativeFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, domainMinValue, domainMaxValue, minValue, maxValue, includeNullValues);
		};
		return $tab_ApiFilterHandler.$processBaseFilter(serverPm, createQuantitativeFilter);
	};
	$tab_ApiFilterHandler.$processRelativeDateFilter = function ApiFilterHandler$ProcessRelativeDateFilter(serverPm) {
		var periodType = null;
		var rangeType = null;
		var rangeN = null;
		var table = serverPm.table;
		if (ss.isValue(table)) {
			if (ss.isValue(table.periodType)) {
				periodType = $tab_ApiCrossDomainEnumConverter.convertPeriodType(table.periodType);
			}
			if (ss.isValue(table.rangeType)) {
				rangeType = $tab_ApiCrossDomainEnumConverter.convertRangeType(table.rangeType);
			}
			if (ss.isValue(table.rangeN)) {
				rangeN = table.rangeN;
			}
		}
		var createRelativeDateFilter = function(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
			return $tab_ApiCrossDomainPresModelsFactory.newRelativeDateFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, periodType, rangeType, rangeN);
		};
		return $tab_ApiFilterHandler.$processBaseFilter(serverPm, createRelativeDateFilter);
	};
	$tab_ApiFilterHandler.$createDataValueFromStruct = function ApiFilterHandler$CreateDataValueFromStruct(f, s, displayName) {
		return $tab_ApiFilterHandler.$createDataValue(f, s, displayName);
	};
	$tab_ApiFilterHandler.$createDataValue = function ApiFilterHandler$CreateDataValue(filterPm, filterValue, displayName) {
		var dataValue = new Object();
		if (ss.isNullOrUndefined(filterValue)) {
			return dataValue;
		}
		var dataType = $tab_ApiFilterHandler.$convertDataValueTypeToDataType(filterValue.t);
		var values = [filterValue];
		if (ss.isValue(filterPm.range)) {
			values.push(filterPm.range.min, filterPm.range.max);
		}
		if (ss.isValue(filterPm.table)) {
			values.push(filterPm.table.min, filterPm.table.max);
		}
		var timeFormatMode = tab.QuickFilterDateFormatUtil.getDateTimeFormatMode(values, 'none', filterPm.date_format, null);
		dataValue.type = $tab_ApiCrossDomainEnumConverter.convertDataType(dataType);
		var format = ((dataType === 'date' || dataType === 'datetime') ? filterPm.date_format : filterPm.format);
		var tempDv = tab.LegacyFilterModel.buildDataValueFromFilterValue(filterValue);
		dataValue.formattedValue = tableau.format.formatDataValue(tempDv, filterPm.role, format, null, timeFormatMode);
		if (ss.isValue(displayName)) {
			dataValue.aliasedValue = displayName;
		}
		dataValue.value = $tab_ApiPresModelsConverter.serializeDataValue(filterValue.v, dataType);
		return dataValue;
	};
	$tab_ApiFilterHandler.$convertDataValueTypeToDataType = function ApiFilterHandler$ConvertDataValueTypeToDataType(t) {
		switch (t) {
			case 'b': {
				return ss.cast('boolean', String);
			}
			case 'd': {
				return 'date';
			}
			case 'i': {
				return 'integer';
			}
			case 'r': {
				return 'real';
			}
			case 's': {
				return 'cstring';
			}
			case 't': {
				return 'datetime';
			}
			case null: {
				return 'unknown';
			}
		}
		return 'unknown';
	};
	$tab_ApiFilterHandler.$processHierarchicalFilter = function ApiFilterHandler$ProcessHierarchicalFilter(serverPm) {
		var levels = 0;
		if (ss.isValue(serverPm.levels)) {
			levels = serverPm.levels.length;
		}
		var createHierarchicalFilter = function(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
			return $tab_ApiCrossDomainPresModelsFactory.newHierarchicalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, levels);
		};
		return $tab_ApiFilterHandler.$processBaseFilter(serverPm, createHierarchicalFilter);
	};
	global.tab.ApiFilterHandler = $tab_ApiFilterHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiPresModelsConverter
	var $tab_ApiPresModelsConverter = function() {
	};
	$tab_ApiPresModelsConverter.__typeName = 'tab.ApiPresModelsConverter';
	$tab_ApiPresModelsConverter.getApiAddInInstancePresModel = function ApiPresModelsConverter$GetApiAddInInstancePresModel(addInInstance) {
		return $tab_ApiCrossDomainPresModelsFactory.newAddInInstancePM(addInInstance);
	};
	$tab_ApiPresModelsConverter.getApiAddInBootstrapInfoPresModel = function ApiPresModelsConverter$GetApiAddInBootstrapInfoPresModel(addInBootstrapInfo) {
		return $tab_ApiCrossDomainPresModelsFactory.newAddInBootstrapInfoPM(addInBootstrapInfo);
	};
	$tab_ApiPresModelsConverter.getApiUnderlyingDataTablePresModel = function ApiPresModelsConverter$GetApiUnderlyingDataTablePresModel(underlyingDataTable, isSummary) {
		var dataDictionary = underlyingDataTable.dataDictionary;
		var columns = underlyingDataTable.underlyingDataTableColumns;
		var apiColumns = $tab_ApiPresModelsConverter.$buildHeaders(columns);
		var dataTable = $tab_ApiPresModelsConverter.$buildDataTable(dataDictionary, columns);
		var apiPM = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataTablePM(dataTable, apiColumns, isSummary);
		return apiPM;
	};
	$tab_ApiPresModelsConverter.getApiDashboardZonePresModels = function ApiPresModelsConverter$GetApiDashboardZonePresModels(zones) {
		var zonePms = [];
		if (ss.isNullOrUndefined(zones) || ss.getKeyCount(zones) === 0) {
			return zonePms;
		}
		var zoneKeys = Object.keys(zones);
		zoneKeys.sort(function(a, b) {
			return parseInt(a, 10) - parseInt(b, 10);
		});
		for (var $t1 = 0; $t1 < zoneKeys.length; $t1++) {
			var key = zoneKeys[$t1];
			var zone = zones[key];
			if (ss.isNullOrUndefined(zone)) {
				continue;
			}
			var zoneType = $tab_ApiCrossDomainEnumConverter.convertZoneType(zone.zoneCommon.zoneType);
			if (!ss.isValue(zoneType)) {
				continue;
			}
			var name = (ss.isValue(zone.worksheet) ? zone.worksheet : null);
			var x = zone.zoneCommon.x;
			var y = zone.zoneCommon.y;
			var width = zone.zoneCommon.w;
			var height = zone.zoneCommon.h;
			var zoneId = zone.zoneCommon.zoneId;
			var pm = $tab_ApiCrossDomainPresModelsFactory.newDashboardZone(name, zoneId, ss.unbox(zoneType), height, width, x, y);
			zonePms.push(pm);
		}
		return zonePms;
	};
	$tab_ApiPresModelsConverter.processSelectedMarks = function ApiPresModelsConverter$ProcessSelectedMarks(selectionDataPm) {
		var dataDictionaryPM = selectionDataPm.dataDictionary;
		var vizData = selectionDataPm.vizData;
		return $tab_ApiPresModelsConverter.$processActiveMarks(dataDictionaryPM, vizData);
	};
	$tab_ApiPresModelsConverter.processHighlightedMarks = function ApiPresModelsConverter$ProcessHighlightedMarks(highledMarksPm) {
		var dataDictionaryPM = highledMarksPm.dataDictionary;
		var vizData = highledMarksPm.vizData;
		return $tab_ApiPresModelsConverter.$processActiveMarks(dataDictionaryPM, vizData);
	};
	$tab_ApiPresModelsConverter.getAddInLocatorPresModel = function ApiPresModelsConverter$GetAddInLocatorPresModel(apiAddInLocator) {
		return $tab_NativePresModelsFactory.newAddInLocatorPresModel(apiAddInLocator);
	};
	$tab_ApiPresModelsConverter.$processActiveMarks = function ApiPresModelsConverter$ProcessActiveMarks(dataDictionaryPM, vizData) {
		var returnPm = new Object();
		var dataDictionary = new tab.DataDictionaryModel(null);
		dataDictionary.update(dataDictionaryPM);
		var vizDataModel = new tab.VizDataModel(null);
		vizDataModel.update(vizData, tab.NoopModelEventsHandler.get_noopContext());
		var marks = [];
		returnPm.marks = marks;
		if (ss.isNullOrUndefined(dataDictionary) || dataDictionary.get_isEmpty()) {
			return returnPm;
		}
		vizDataModel.forEachTupleId(function(tupleId) {
			var $t1 = new Object();
			$t1.tupleId = tupleId;
			var mark = $t1;
			var pairs = [];
			mark.pairs = pairs;
			marks.push(mark);
			vizDataModel.forEachVizDataField(function(dataField, colIdx) {
				var $t2 = new Object();
				$t2.fieldName = dataField.get_fieldCaption();
				$t2.formattedValue = tab.VizDataLookup.lookupAlias(tupleId, dataField, dataDictionary);
				$t2.valueDataType = $tab_ApiCrossDomainEnumConverter.convertDataType(dataField.get_dataType());
				var pair = $t2;
				var dataValue = null;
				if (!tab.VizDataLookup.isSpecial(tupleId, dataField, dataDictionary, null) && dataField.get_hasDataValues() && dataField.isTupleIdValid(tupleId)) {
					dataValue = tab.VizDataLookup.lookupRawDataValue(tupleId, dataField, dataDictionary);
				}
				var jsonValue = $tab_ApiPresModelsConverter.serializeDataValue(dataValue, dataField.get_dataType());
				pair.value = jsonValue;
				pairs.push(pair);
				return true;
			});
			return true;
		});
		return returnPm;
	};
	$tab_ApiPresModelsConverter.serializeDataValue = function ApiPresModelsConverter$SerializeDataValue(rawValue, dataType) {
		if (dataType === 'boolean') {
			if (_.isBoolean(rawValue)) {
				return rawValue;
			}
			return (ss.isValue(rawValue) ? (rawValue.toString().toLowerCase() === 'true') : false);
		}
		if (ss.isNullOrUndefined(rawValue)) {
			return null;
		}
		switch (dataType) {
			case 'boolean': {
				if (_.isBoolean(rawValue)) {
					return rawValue;
				}
				return (ss.isValue(rawValue) ? (rawValue.toString().toLowerCase() === 'true') : false);
			}
			case 'date':
			case 'datetime': {
				var d = null;
				if (_.isDate(rawValue)) {
					d = ss.cast(rawValue, ss.JsDate);
				}
				else if (_.isNumber(rawValue)) {
					if (isNaN(ss.unbox(ss.cast(rawValue, Number)))) {
						d = null;
					}
					else {
						d = new Date(tableau.types.JsDateFromOleDate(ss.unbox(ss.cast(rawValue, Number))));
					}
				}
				else {
					d = tab.DateUtil.parsePresModelDate(rawValue.toString());
				}
				if (ss.isNullOrUndefined(d) || isNaN(d)) {
					return null;
				}
				return d.getTime();
			}
			case 'integer': {
				if (_.isNumber(rawValue)) {
					return (isNaN(ss.unbox(ss.cast(rawValue, Number))) ? null : rawValue);
				}
				var parsedInt = parseInt(rawValue.toString(), 10);
				return (isNaN(parsedInt) ? null : parsedInt);
			}
			case 'real': {
				if (_.isNumber(rawValue)) {
					return (isNaN(ss.unbox(ss.cast(rawValue, Number))) ? null : rawValue);
				}
				var parsedFloat = parseFloat(rawValue.toString());
				return (isNaN(parsedFloat) ? null : parsedFloat);
			}
			default:
			case 'cstring':
			case 'tuple':
			case 'unknown': {
				return rawValue.toString();
			}
		}
	};
	$tab_ApiPresModelsConverter.$buildHeaders = function ApiPresModelsConverter$BuildHeaders(columns) {
		var apiColumns = [];
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			var dataType = $tab_ApiCrossDomainEnumConverter.convertUnderlyingDataType(column.dataType);
			var apiColumn = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataColumnsPM(dataType, column.fieldCaption, column.isReferenced, columnIndex);
			apiColumns.push(apiColumn);
		}
		return apiColumns;
	};
	$tab_ApiPresModelsConverter.$buildDataTable = function ApiPresModelsConverter$BuildDataTable(dataDictionary, columns) {
		var rowCount = columns[0].formatValIdxs.length;
		var dataTable = new Array(rowCount);
		for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
			dataTable[rowIndex] = new Array(columns.length);
		}
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			for (var rowIndex1 = 0; rowIndex1 < column.formatValIdxs.length; rowIndex1++) {
				var $t1 = new Object();
				$t1.formattedValue = $tab_ApiPresModelsConverter.$lookUpValueFromDictionary(dataDictionary, column.formatValIdxs[rowIndex1], 'cstring');
				$t1.value = $tab_ApiPresModelsConverter.$lookUpValueFromDictionary(dataDictionary, column.valueIndices[rowIndex1], column.dataType);
				var val = $t1;
				val.aliasedValue = val.formattedValue;
				dataTable[rowIndex1][columnIndex] = val;
			}
		}
		return dataTable;
	};
	$tab_ApiPresModelsConverter.$lookUpValueFromDictionary = function ApiPresModelsConverter$LookUpValueFromDictionary(dataDictionary, index, dataType) {
		var dataValue = null;
		var dt;
		if (index >= 0) {
			dt = dataType;
		}
		else {
			dt = 'cstring';
			index = -index - 1;
		}
		var rawValue = $tab_ApiPresModelsConverter.$getRawValue(dataDictionary, dt, index);
		if (ss.isValue(rawValue)) {
			dataValue = rawValue.toString();
		}
		return dataValue;
	};
	$tab_ApiPresModelsConverter.$getRawValue = function ApiPresModelsConverter$GetRawValue(dataDictionary, dt, index) {
		if (ss.isNullOrUndefined(dataDictionary) || ss.isNullOrUndefined(dataDictionary.dataSegments)) {
			return null;
		}
		var $t1 = ss.getEnumerator(Object.keys(dataDictionary.dataSegments));
		try {
			while ($t1.moveNext()) {
				var key = $t1.current();
				var dataSegment = dataDictionary.dataSegments[key];
				if (ss.isNullOrUndefined(dataSegment.dataColumns)) {
					continue;
				}
				for (var $t2 = 0; $t2 < dataSegment.dataColumns.length; $t2++) {
					var dataColumn = dataSegment.dataColumns[$t2];
					if (ss.isNullOrUndefined(dataColumn) || dataColumn.dataType !== dt) {
						continue;
					}
					if (index < dataColumn.dataValues.length) {
						return dataColumn.dataValues[index];
					}
					index -= dataColumn.dataValues.length;
					break;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		return null;
	};
	global.tab.ApiPresModelsConverter = $tab_ApiPresModelsConverter;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApiStorytellingHandler
	var $tab_ApiStorytellingHandler = function(client, responder) {
		this.$client = null;
		this.$responder = null;
		this.$disposables = new tab.DisposableHolder();
		this.$eventHandlerAttached = false;
		this.$disposed = false;
		tab.Param.verifyValue(client, 'client');
		tab.Param.verifyValue(responder, 'responder');
		this.$client = client;
		this.$responder = responder;
		var attachEvents = ss.mkdel(this, function() {
			var navVm = client.get_flipboardNavigatorViewModel();
			if (ss.isValue(navVm)) {
				navVm.add_remoteUpdateComplete(ss.mkdel(this, this.$handleRemoteUpdateComplete));
				this.$eventHandlerAttached = true;
				this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
					navVm.remove_remoteUpdateComplete(ss.mkdel(this, this.$handleRemoteUpdateComplete));
				})));
			}
			return ss.isValue(navVm);
		});
		if (!attachEvents()) {
			_.defer(ss.mkdel(this, function() {
				if (this.$disposed) {
					return;
				}
				attachEvents();
			}));
		}
	};
	$tab_ApiStorytellingHandler.__typeName = 'tab.ApiStorytellingHandler';
	$tab_ApiStorytellingHandler.$verifyCommand = function ApiStorytellingHandler$VerifyCommand(command, expectedNames) {
		var validNames = ($.isArray(expectedNames) ? expectedNames : [expectedNames]);
		var isValid = _.any(validNames, function(name) {
			return name === command.get_name();
		});
		if (!isValid) {
			throw new ss.Exception("Command '" + command.get_name() + "' is not valid for the handler.");
		}
	};
	global.tab.ApiStorytellingHandler = $tab_ApiStorytellingHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Api.ApiToolbarStateManager
	var $tab_ApiToolbarStateManager = function(responder, toolbarViewModel) {
		this.$disposables = new tab.DisposableHolder();
		this.$toolbar = null;
		this.$apiResponder = null;
		this.$1$ToolbarStateField = null;
		if (ss.isNullOrUndefined(responder)) {
			throw new ss.ArgumentNullException('responder');
		}
		if (ss.isNullOrUndefined(toolbarViewModel)) {
			throw new ss.ArgumentNullException('toolbarViewModel');
		}
		this.$toolbar = toolbarViewModel;
		this.$apiResponder = responder;
		this.$handleNewToolbar();
		this.$toolbar.add_newToolbar(ss.mkdel(this, this.$handleNewToolbar));
		this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$toolbar.remove_newToolbar(ss.mkdel(this, this.$handleNewToolbar));
		})));
	};
	$tab_ApiToolbarStateManager.__typeName = 'tab.ApiToolbarStateManager';
	$tab_ApiToolbarStateManager.$isEnabled = function ApiToolbarStateManager$IsEnabled(items, name) {
		var button = items[name];
		return ss.isValue(button) && button.get_enabled();
	};
	$tab_ApiToolbarStateManager.$isToggleEnabled = function ApiToolbarStateManager$IsToggleEnabled(items, name, subCommandItemName) {
		var button = items[name];
		if (ss.isNullOrUndefined(button)) {
			return false;
		}
		var cpm = new tab.CommandsPresModelWrapper.$ctor1(button.get_commands());
		var $t1 = cpm.get_commandItems();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var commandButton = $t1[$t2];
			var subCommandButton = new tab.CommandItemWrapper(commandButton);
			if (ss.equals(subCommandButton.get_name(), subCommandItemName)) {
				return subCommandButton.get_enabled();
			}
		}
		return false;
	};
	$tab_ApiToolbarStateManager.$addButtonsToDictionary = function ApiToolbarStateManager$AddButtonsToDictionary(buttons, items) {
		var $t1 = ss.getEnumerator(items);
		try {
			while ($t1.moveNext()) {
				var item = $t1.current();
				var button = new tab.CommandItemWrapper(item);
				buttons[button.get_iconRes()] = button;
			}
		}
		finally {
			$t1.dispose();
		}
	};
	global.tab.ApiToolbarStateManager = $tab_ApiToolbarStateManager;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.ApiUnderlyingDataHandler
	var $tab_ApiUnderlyingDataHandler = function() {
	};
	$tab_ApiUnderlyingDataHandler.__typeName = 'tab.ApiUnderlyingDataHandler';
	$tab_ApiUnderlyingDataHandler.processSummaryData = function ApiUnderlyingDataHandler$ProcessSummaryData(pm) {
		var underlyingDataTablePresModel = pm;
		var result = $tab_ApiUnderlyingDataHandler.processDataDictionary(underlyingDataTablePresModel, true);
		return result;
	};
	$tab_ApiUnderlyingDataHandler.processUnderlyingData = function ApiUnderlyingDataHandler$ProcessUnderlyingData(pm) {
		var underlyingDataTablePresModel = pm;
		var result = $tab_ApiUnderlyingDataHandler.processDataDictionary(underlyingDataTablePresModel, false);
		return result;
	};
	$tab_ApiUnderlyingDataHandler.prepareSummaryCommand = function ApiUnderlyingDataHandler$PrepareSummaryCommand(source, destination) {
		destination['maxRows'] = source['api.maxRows'];
		destination['ignoreAliases'] = source['api.ignoreAliases'];
		destination['ignoreSelection'] = source['api.ignoreSelection'];
	};
	$tab_ApiUnderlyingDataHandler.prepareUnderlyingCommand = function ApiUnderlyingDataHandler$PrepareUnderlyingCommand(source, destination) {
		$tab_ApiUnderlyingDataHandler.prepareSummaryCommand(source, destination);
		destination['includeAllColumns'] = source['api.includeAllColumns'];
	};
	$tab_ApiUnderlyingDataHandler.processDataDictionary = function ApiUnderlyingDataHandler$ProcessDataDictionary(pm, isSummary) {
		var dataDictionary = new tab.DataDictionaryModel(null);
		dataDictionary.update(pm.dataDictionary);
		var columns = pm.underlyingDataTableColumns;
		var apiColumns = $tab_ApiUnderlyingDataHandler.$buildHeaders(columns);
		var dataTable = $tab_ApiUnderlyingDataHandler.$buildDataTable(dataDictionary, columns);
		var apiPM = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataTablePM(dataTable, apiColumns, isSummary);
		return apiPM;
	};
	$tab_ApiUnderlyingDataHandler.$buildHeaders = function ApiUnderlyingDataHandler$BuildHeaders(columns) {
		if (ss.isNullOrUndefined(columns)) {
			return [];
		}
		var apiColumns = [];
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			var dataType = $tab_ApiCrossDomainEnumConverter.convertUnderlyingDataType(column.dataType);
			var apiColumn = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataColumnsPM(dataType, column.fieldCaption, column.isReferenced, columnIndex);
			apiColumns.push(apiColumn);
		}
		return apiColumns;
	};
	$tab_ApiUnderlyingDataHandler.$buildDataTable = function ApiUnderlyingDataHandler$BuildDataTable(dataDictionary, columns) {
		if (ss.isNullOrUndefined(columns) || columns.length === 0) {
			return [];
		}
		var rowCount = columns[0].formatValIdxs.length;
		var dataTable = new Array(rowCount);
		for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
			dataTable[rowIndex] = new Array(columns.length);
		}
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			for (var rowIndex1 = 0; rowIndex1 < column.formatValIdxs.length; rowIndex1++) {
				var val = new Object();
				val.formattedValue = $tab_ApiUnderlyingDataHandler.$lookUpValueFromDictionary(dataDictionary, column.formatValIdxs[rowIndex1], 'cstring');
				val.value = $tab_ApiUnderlyingDataHandler.$lookUpValueFromDictionary(dataDictionary, column.valueIndices[rowIndex1], column.dataType);
				val.aliasedValue = val.formattedValue;
				dataTable[rowIndex1][columnIndex] = val;
			}
		}
		return dataTable;
	};
	$tab_ApiUnderlyingDataHandler.$lookUpValueFromDictionary = function ApiUnderlyingDataHandler$LookUpValueFromDictionary(dataDictionary, index, dataType) {
		var dataValue = null;
		var dt;
		if (index >= 0) {
			dt = dataType;
		}
		else {
			dt = 'cstring';
			index = -index - 1;
		}
		var rawValue = dataDictionary.getRawValue(dt, index);
		if (ss.isValue(rawValue)) {
			dataValue = rawValue.toString();
		}
		return dataValue;
	};
	global.tab.ApiUnderlyingDataHandler = $tab_ApiUnderlyingDataHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApiUnderlyingDataHandler
	var $tab_ApiUnderlyingDataHandler = function() {
	};
	$tab_ApiUnderlyingDataHandler.__typeName = 'tab.ApiUnderlyingDataHandler';
	$tab_ApiUnderlyingDataHandler.processSummaryData = function ApiUnderlyingDataHandler$ProcessSummaryData(pm) {
		var underlyingDataTablePresModel = pm;
		var result = $tab_ApiUnderlyingDataHandler.$processDataDictionary(underlyingDataTablePresModel, true);
		return result;
	};
	$tab_ApiUnderlyingDataHandler.$processUnderlyingData = function ApiUnderlyingDataHandler$ProcessUnderlyingData(pm) {
		var underlyingDataTablePresModel = pm;
		var result = $tab_ApiUnderlyingDataHandler.$processDataDictionary(underlyingDataTablePresModel, false);
		return result;
	};
	$tab_ApiUnderlyingDataHandler.$prepareSummaryCommand = function ApiUnderlyingDataHandler$PrepareSummaryCommand(source, destination) {
		destination['maxRows'] = source['api.maxRows'];
		destination['ignoreAliases'] = source['api.ignoreAliases'];
		destination['ignoreSelection'] = source['api.ignoreSelection'];
	};
	$tab_ApiUnderlyingDataHandler.$prepareUnderlyingCommand = function ApiUnderlyingDataHandler$PrepareUnderlyingCommand(source, destination) {
		$tab_ApiUnderlyingDataHandler.$prepareSummaryCommand(source, destination);
		destination['includeAllColumns'] = source['api.includeAllColumns'];
	};
	$tab_ApiUnderlyingDataHandler.$processDataDictionary = function ApiUnderlyingDataHandler$ProcessDataDictionary(pm, isSummary) {
		var dataDictionary = new tab.DataDictionaryModel(null);
		dataDictionary.update(pm.dataDictionary);
		var columns = pm.underlyingDataTableColumns;
		var apiColumns = $tab_ApiUnderlyingDataHandler.$buildHeaders(columns);
		var dataTable = $tab_ApiUnderlyingDataHandler.$buildDataTable(dataDictionary, columns);
		var apiPM = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataTablePM(dataTable, apiColumns, isSummary);
		return apiPM;
	};
	$tab_ApiUnderlyingDataHandler.$buildHeaders = function ApiUnderlyingDataHandler$BuildHeaders(columns) {
		if (ss.isNullOrUndefined(columns)) {
			return [];
		}
		var apiColumns = [];
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			var dataType = $tab_ApiCrossDomainEnumConverter.convertUnderlyingDataType(column.dataType);
			var apiColumn = $tab_ApiCrossDomainPresModelsFactory.newUnderlyingDataColumnsPM(dataType, column.fieldCaption, column.isReferenced, columnIndex);
			apiColumns.push(apiColumn);
		}
		return apiColumns;
	};
	$tab_ApiUnderlyingDataHandler.$buildDataTable = function ApiUnderlyingDataHandler$BuildDataTable(dataDictionary, columns) {
		if (ss.isNullOrUndefined(columns) || columns.length === 0) {
			return [];
		}
		var rowCount = columns[0].formatValIdxs.length;
		var dataTable = new Array(rowCount);
		for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
			dataTable[rowIndex] = new Array(columns.length);
		}
		for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
			var column = columns[columnIndex];
			for (var rowIndex1 = 0; rowIndex1 < column.formatValIdxs.length; rowIndex1++) {
				var val = new Object();
				val.formattedValue = $tab_ApiUnderlyingDataHandler.$lookUpValueFromDictionary(dataDictionary, column.formatValIdxs[rowIndex1], 'cstring');
				val.value = $tab_ApiUnderlyingDataHandler.$lookUpValueFromDictionary(dataDictionary, column.valueIndices[rowIndex1], column.dataType);
				val.aliasedValue = val.formattedValue;
				dataTable[rowIndex1][columnIndex] = val;
			}
		}
		return dataTable;
	};
	$tab_ApiUnderlyingDataHandler.$lookUpValueFromDictionary = function ApiUnderlyingDataHandler$LookUpValueFromDictionary(dataDictionary, index, dataType) {
		var dataValue = null;
		var dt;
		if (index >= 0) {
			dt = dataType;
		}
		else {
			dt = 'cstring';
			index = -index - 1;
		}
		var rawValue = dataDictionary.getRawValue(dt, index);
		if (ss.isValue(rawValue)) {
			dataValue = rawValue.toString();
		}
		return dataValue;
	};
	global.tab.ApiUnderlyingDataHandler = $tab_ApiUnderlyingDataHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.AppBannerViewModel
	var $tab_AppBannerViewModel = function() {
		spiff.BaseViewModel.call(this);
	};
	$tab_AppBannerViewModel.__typeName = 'tab.AppBannerViewModel';
	global.tab.AppBannerViewModel = $tab_AppBannerViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Application
	var $tab_Application = function() {
		this.$storytellingClient = null;
		this.$drawerView = null;
		this.$modifierKeyState = null;
		this.$appModel = null;
		this.$workbookModel = null;
		this.$disposables = new tab.DisposableHolder();
		this.$1$ClientChangedField = null;
		this.$1$TabbedNavigationField = null;
		this.$1$RightAreaDrawerViewModelField = null;
		this.$1$ClientField = null;
		this.$1$ApiEventHandlerField = null;
		var startingCallback = null;
		startingCallback = ss.mkdel(this, function(sender, args) {
			$tab_Application.remove_starting(startingCallback);
			this.$setupServerFonts();
			this.$subscribeToApplication().$subscribeToWorkbook();
			var layoutSession = new tab.LayoutSession(null, $tab_Application.get_commonDialogProvider());
			var cc = tab.CommandController.create(layoutSession, $tab_Application.get_commonDialogProvider(), new $tab_CancelDialog(null, null, null, false));
			cc.setBrowserViewportFunc($tab_BrowserViewport.getViewport);
			cc.add_newLayoutId(ss.mkdel(this, this.$handleNewLayout));
			cc.add_tabChangeCompleted(ss.mkdel(this, this.$handleTabChangeComplete));
			$tab_Application.add_onTabSelect(ss.mkdel(this, this.$doTabSelect));
			cc.add_destroyView(ss.mkdel(this, this.$destroyClient));
			cc.add_intermediateUpdate(ss.mkdel(this, this.$updateApiClients));
			cc.add_switchingViz(ss.mkdel(this, this.$handleSwitchingViz));
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				cc.remove_newLayoutId(ss.mkdel(this, this.$handleNewLayout));
				cc.remove_tabChangeCompleted(ss.mkdel(this, this.$handleTabChangeComplete));
				$tab_Application.remove_onTabSelect(ss.mkdel(this, this.$doTabSelect));
				cc.remove_destroyView(ss.mkdel(this, this.$destroyClient));
				cc.remove_intermediateUpdate(ss.mkdel(this, this.$updateApiClients));
				cc.remove_switchingViz(ss.mkdel(this, this.$handleSwitchingViz));
			})));
			tab.StartupUtils.add_clientFullyLoaded(ss.mkdel(this, this.$handleClientFullyLoaded));
			var appVm = $tab_Application.$createApplicationViewModel(false, layoutSession);
			this.set_client(appVm);
			this.$storytellingClient = appVm;
			this.get_client().startup();
			this.$instantiateApiEventHandler(this.get_client(), this.$storytellingClient);
			if (BrowserSupport.BrowserSupport.IsIE()) {
				this.$addUnloadHandler();
			}
			this.$modifierKeyState = new $tab_ModifierKeyState();
			spiff.SpiffBrowserViewport.getSpiffBrowserViewportFunc = function(callback) {
				$tab_BrowserViewport.getViewport(function(viewport) {
					var spiffBrowserViewport = new spiff.SpiffBrowserViewport(viewport.get_dimensions(), function(pt) {
						return viewport.getVisibleRoom(pt, 0);
					});
					callback(spiffBrowserViewport);
				});
			};
		});
		$tab_Application.add_starting(startingCallback);
	};
	$tab_Application.__typeName = 'tab.Application';
	$tab_Application.add_starting = function Application$add_Starting(value) {
		$tab_Application.$1$StartingField = ss.delegateCombine($tab_Application.$1$StartingField, value);
	};
	$tab_Application.remove_starting = function Application$remove_Starting(value) {
		$tab_Application.$1$StartingField = ss.delegateRemove($tab_Application.$1$StartingField, value);
	};
	$tab_Application.add_started = function Application$add_Started(value) {
		$tab_Application.$1$StartedField = ss.delegateCombine($tab_Application.$1$StartedField, value);
	};
	$tab_Application.remove_started = function Application$remove_Started(value) {
		$tab_Application.$1$StartedField = ss.delegateRemove($tab_Application.$1$StartedField, value);
	};
	$tab_Application.add_onTabSelect = function Application$add_OnTabSelect(value) {
		$tab_Application.$1$OnTabSelectField = ss.delegateCombine($tab_Application.$1$OnTabSelectField, value);
	};
	$tab_Application.remove_onTabSelect = function Application$remove_OnTabSelect(value) {
		$tab_Application.$1$OnTabSelectField = ss.delegateRemove($tab_Application.$1$OnTabSelectField, value);
	};
	$tab_Application.get_instance = function Application$get_Instance() {
		if (ss.isNullOrUndefined($tab_Application.$instance)) {
			$tab_Application.$instance = new $tab_Application();
		}
		return $tab_Application.$instance;
	};
	$tab_Application.get_isHostedInApiContext = function Application$get_IsHostedInApiContext() {
		return !ss.isNullOrEmptyString(tsConfig.apiID) || tsConfig.is_mobile_app;
	};
	$tab_Application.get_commonDialogProvider = function Application$get_CommonDialogProvider() {
		return $tab_Application.$commonDialogProvider || ($tab_Application.$commonDialogProvider = new $tab_CommonDialogProviderImpl());
	};
	$tab_Application.get_commonBannerProvider = function Application$get_CommonBannerProvider() {
		return $tab_Application.$commonBannerProvider || ($tab_Application.$commonBannerProvider = new $tab_CommonBannerProviderImpl());
	};
	$tab_Application.startup = function Application$Startup() {
		tabBootstrap.MetricsController.logMetricsEvent('APPSTR'.toString(), 2);
		if (ss.isValue($tab_Application.$started) && $tab_Application.$started) {
			throw new ss.Exception('Application.Startup() can only be called once');
		}
		var app = $tab_Application.get_instance();
		tab.Log.get(app).info('Starting...', []);
		if (!ss.staticEquals($tab_Application.$1$StartingField, null)) {
			$tab_Application.$1$StartingField(app, ss.EventArgs.Empty);
		}
		tab.Log.get(app).info('Started', []);
		if (!ss.staticEquals($tab_Application.$1$StartedField, null)) {
			$tab_Application.$1$StartedField(app, ss.EventArgs.Empty);
		}
		EventUtils.DragDropManager.init();
		SharedWidgets.setConfig($tab_Application.$getSharedWidgetsConfig());
		$tab_Application.$started = true;
	};
	$tab_Application.$getSharedWidgetsConfig = function Application$GetSharedWidgetsConfig() {
		var config = { suppressClickBustingClassName: spiff.ClickBuster.suppressClickBustingClass };
		return config;
	};
	$tab_Application.$createApplicationViewModel = function Application$CreateApplicationViewModel(skipInit, session) {
		var t = ss.getType((tsConfig.is_mobile ? 'tab.ApplicationViewModelMobile' : 'tab.ApplicationViewModelWeb'));
		ss.Debug.assert(ss.isValue(t), 't != null');
		return ss.cast(new t(skipInit, session), $tab_ApplicationViewModel);
	};
	$tab_Application.handleAllFontsFound = function Application$HandleAllFontsFound() {
		$tab_ServerFontLoader.get_instance().downloadFonts();
		$tab_ServerFontLoader.get_instance().allFontsFound();
	};
	$tab_Application.$initializeServerFontLoader = function Application$InitializeServerFontLoader() {
		$tab_CompletionMonitor.get_instance().reset(1);
		$tab_CompletionMonitor.get_instance().addCompletedHandler(1, $tab_FontMetricsLogger.logUIStabilized);
		$tab_ServerFontLoader.get_instance().initialize(true);
		var bentonFont = tab.ServerFonts.effectiveBentonSans;
		var tableauFonts = tab.ServerFonts.tableauFontNames;
		$tab_ServerFontLoader.get_instance().registerServerLoadedFonts(bentonFont);
		$tab_ServerFontLoader.get_instance().registerServerLoadedFonts(tableauFonts);
		$tab_ServerFontLoader.get_instance().notifyDownloadableFont(bentonFont);
		if (tsConfig.is_authoring) {
			$tab_ServerFontLoader.get_instance().notifyDownloadableFont(tableauFonts);
		}
	};
	$tab_Application.fireOnTabSelect = function Application$FireOnTabSelect(msg) {
		if (!ss.staticEquals($tab_Application.$1$OnTabSelectField, null)) {
			$tab_Application.$1$OnTabSelectField(msg);
		}
	};
	global.tab.Application = $tab_Application;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApplicationSizeCalculator
	var $tab_ApplicationSizeCalculator = function() {
	};
	$tab_ApplicationSizeCalculator.__typeName = 'tab.ApplicationSizeCalculator';
	$tab_ApplicationSizeCalculator.calculateApplicationSize = function ApplicationSizeCalculator$CalculateApplicationSize() {
		var applicationSize = null;
		var isTopLevelFrameOnMobileBrowser = tsConfig.is_mobile_device && !tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage();
		if (!isTopLevelFrameOnMobileBrowser) {
			applicationSize = tab.DashboardSizeCalculator.asSizePresModel(tab.DashboardSizeCalculator.get_dashboardViewportSize());
		}
		else {
			var newBounds = $tab_ApplicationSizeCalculator.calculateClientBounds();
			applicationSize = { w: newBounds.w, h: newBounds.h };
		}
		return applicationSize;
	};
	$tab_ApplicationSizeCalculator.calculateClientBounds = function ApplicationSizeCalculator$CalculateClientBounds() {
		var contentBounds = tabBootstrap.ViewerBootstrap.get_instance().getWebClientDashboardContainerSize(tsConfig.current_sheet_type);
		var tabsHeight = tabBootstrap.VizLayoutConstants.get_tabsHeight();
		var newBounds = { l: 0, t: tabsHeight, w: contentBounds.w, h: contentBounds.h };
		if (!$tab_ToolbarViewModel.get_toolbarIsBottom() && !tsConfig.is_authoring) {
			newBounds.t += tabBootstrap.VizLayoutConstants.get_vizToolbarHeight();
		}
		return newBounds;
	};
	global.tab.ApplicationSizeCalculator = $tab_ApplicationSizeCalculator;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApplicationTemplate
	var $tab_ApplicationTemplate = function() {
		this.domNode = null;
		this.toolbarContainer = null;
		spiff.Template.call(this, $tab_ApplicationTemplate.$getRootTemplate());
		this.domNode = this.domRoot;
		this.toolbarContainer = $((tab.FeatureFlags.isEnabled('IframeSizedToWindow') ? $tab_ApplicationView.toolbarContainerSelector : '.tab-toolbar-container'));
	};
	$tab_ApplicationTemplate.__typeName = 'tab.ApplicationTemplate';
	$tab_ApplicationTemplate.$getRootTemplate = function ApplicationTemplate$GetRootTemplate() {
		return (tab.FeatureFlags.isEnabled('IframeSizedToWindow') ? $($tab_ApplicationTemplate.$applicationHtmlTemplate) : $($tab_ApplicationTemplate.$htmlTemplate));
	};
	global.tab.ApplicationTemplate = $tab_ApplicationTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApplicationView
	var $tab_ApplicationView = function(viewModel) {
		this.$workbookView = null;
		this.$toolbarView = null;
		this.$appBannerView = null;
		this.$glassPane = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_ApplicationViewModelReal]).call(this, viewModel, new $tab_ApplicationTemplate());
		spiff.FullscreenUtil.add_fullscreenStateChanged($tab_ApplicationView.$handleFullscreenChange);
		this.disposables.add(function() {
			spiff.FullscreenUtil.remove_fullscreenStateChanged($tab_ApplicationView.$handleFullscreenChange);
		});
	};
	$tab_ApplicationView.__typeName = 'tab.ApplicationView';
	$tab_ApplicationView.$handleFullscreenChange = function ApplicationView$HandleFullscreenChange() {
		if (tsConfig.isPublic) {
			if (spiff.FullscreenUtil.get_inFullscreenMode()) {
				$($tab_ApplicationView.vizContainerSelector).css({ width: '', height: '' });
			}
			else {
				var containerSize = tabBootstrap.ViewerBootstrap.get_instance().getVizClientContainerSize(tsConfig.current_sheet_type);
				$($tab_ApplicationView.vizContainerSelector).css({ width: containerSize.w + 'px', height: containerSize.h + 'px' });
			}
		}
		var sheetTabs = $tab_Application.get_instance().get_tabbedNavigation();
		if (tabBootstrap.VizLayoutConstants.get_shouldShowTabs() && ss.isValue(sheetTabs)) {
			sheetTabs.resizeShim();
		}
	};
	global.tab.ApplicationView = $tab_ApplicationView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApplicationViewModel
	var $tab_ApplicationViewModel = function(skipInit, layoutSession) {
		this.session = null;
		this._connections = [];
		this.skipInit = false;
		this.$layoutTimeout = null;
		this.$doneInitialLayout = false;
		this.$lastReferenceSize = null;
		this.$lastApplicationSize = null;
		this.$toolbarCommands = null;
		this.$applicationViewModelReal = null;
		this.$applicationView = null;
		this.$doneInitialUpdateLayout = false;
		this.$hasTriggeredResize = false;
		this.$timesResizedDuringBootstrap = 0;
		this.$toolbarWidth = null;
		spiff.Widget.call(this, $(null));
		this.session = layoutSession;
		this.skipInit = skipInit;
		var bootstrap = tabBootstrap.ViewerBootstrap.get_instance();
		if (ss.isNullOrUndefined(bootstrap)) {
			throw new ss.Exception('tabBootstrap.ViewerBootstrap is undefined');
		}
		if (bootstrap.get_hasBootstrapCompleted()) {
			tab.XhrUtil.set_currentTabName(tsConfig.current_sheet_name);
		}
		tab.XhrUtil.guid = tsConfig.guid;
		tab.XhrUtil.parentID = tsConfig.parentID;
		this.$toolbarCommands = new $tab_ViewingToolbarCommands(this);
		this.enableTextSelection();
	};
	$tab_ApplicationViewModel.__typeName = 'tab.ApplicationViewModel';
	$tab_ApplicationViewModel.add_applicationSizeChanged = function ApplicationViewModel$add_ApplicationSizeChanged(value) {
		$tab_ApplicationViewModel.$2$ApplicationSizeChangedField = ss.delegateCombine($tab_ApplicationViewModel.$2$ApplicationSizeChangedField, value);
	};
	$tab_ApplicationViewModel.remove_applicationSizeChanged = function ApplicationViewModel$remove_ApplicationSizeChanged(value) {
		$tab_ApplicationViewModel.$2$ApplicationSizeChangedField = ss.delegateRemove($tab_ApplicationViewModel.$2$ApplicationSizeChangedField, value);
	};
	$tab_ApplicationViewModel.selectCenteringContainer = function ApplicationViewModel$SelectCenteringContainer() {
		return $('#centeringContainer');
	};
	$tab_ApplicationViewModel.updatePortSize = function ApplicationViewModel$UpdatePortSize() {
		tab.ApplicationModel.get_instance().get_workbook().withOuterDashboard(function(d) {
			var portSizes = $tab_PortSizeCalculator.calculatePortSize();
			var portSizeForCurrentView;
			switch (tsConfig.current_sheet_type) {
				default:
				case 'worksheet': {
					portSizeForCurrentView = portSizes.worksheetPortSize;
					break;
				}
				case 'dashboard': {
					portSizeForCurrentView = portSizes.dashboardPortSize;
					break;
				}
				case 'story': {
					portSizeForCurrentView = portSizes.storyPortSize;
					break;
				}
			}
			if (!_.isEqual(d.get_dashboardSize(), portSizeForCurrentView)) {
				tab.SheetClientCommands.setPortSize(portSizes.worksheetPortSize, portSizes.dashboardPortSize, portSizes.storyPortSize);
			}
		});
	};
	$tab_ApplicationViewModel.calculateDashboardViewportBounds = function ApplicationViewModel$CalculateDashboardViewportBounds() {
		var dashboardViewportSize = tab.DashboardSizeCalculator.get_dashboardViewportSize();
		var dashboardViewportBounds = { l: 0, t: 0, w: dashboardViewportSize.w, h: dashboardViewportSize.h };
		if (!$tab_ToolbarViewModel.get_toolbarIsBottom() && !tsConfig.is_authoring) {
			dashboardViewportBounds.t += tabBootstrap.VizLayoutConstants.get_vizToolbarHeight();
		}
		if (tsConfig.is_authoring) {
			dashboardViewportBounds.t += tabBootstrap.VizLayoutConstants.get_authoringMenuBarHeight() + tabBootstrap.VizLayoutConstants.get_authoringToolbarHeight();
		}
		return dashboardViewportBounds;
	};
	global.tab.ApplicationViewModel = $tab_ApplicationViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ApplicationViewModelReal
	var $tab_ApplicationViewModelReal = function(applicationModel) {
		this.$applicationModel = null;
		this.$workbookViewModel = null;
		this.$appBannerViewModel = null;
		this.$devicePreviewViewModel = null;
		this.$toolbarViewModel = null;
		this.$deviceLayoutViewModel = null;
		this.$2$ApplicationUpdateField = null;
		spiff.BaseViewModel.call(this);
		this.$applicationModel = applicationModel;
		this.$applicationModel.add_newWorkbook(ss.mkdel(this, this.handleNewWorkbook));
		if (ss.isValue(this.$applicationModel.get_workbook())) {
			this.handleNewWorkbook(this.$applicationModel.get_workbook());
		}
		this.$applicationModel.add_applicationUpdate(ss.mkdel(this, this.handleApplicationUpdate));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$applicationModel.remove_applicationUpdate(ss.mkdel(this, this.handleApplicationUpdate));
		})));
		this.$appBannerViewModel = new $tab_AppBannerViewModel();
		this.$devicePreviewViewModel = new $tab_DevicePreviewViewModel();
		this.$deviceLayoutViewModel = new $tab_DeviceLayoutViewModel(this.$applicationModel.get_workbook());
		if (tsConfig.is_metrics_authoring) {
			ss.Debug.assert(tsConfig.is_authoring, 'Metrics authoring should always be a sub-mode of Authoring');
		}
		if (!tsConfig.is_authoring && !this.$applicationModel.get_isOffline() && !tab.NaturalLanguageUtil.isNlpView()) {
			var $t1 = new $tab_ToolbarViewModel(this.$applicationModel.get_toolbar(), this.$deviceLayoutViewModel);
			$t1.set_shouldShowCommenting(this.get_shouldShowCommenting());
			this.$toolbarViewModel = $t1;
			if (!tab.FeatureFlags.isEnabled('SkipPostLoadOperations')) {
				tab.StartupUtils.callOnceAfterInitialBootstrap(ss.mkdel(this, this.$performPostLoadOperations));
			}
			else {
				$tab_PublicInfoViewModel.set_viewCount(tsConfig.viewCount);
			}
		}
	};
	$tab_ApplicationViewModelReal.__typeName = 'tab.ApplicationViewModelReal';
	global.tab.ApplicationViewModelReal = $tab_ApplicationViewModelReal;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.AreYouSureButtons
	var $tab_AreYouSureButtons = function(viewTemplate) {
		this.$template = null;
		this.$2$ConfirmField = null;
		this.$2$CancelField = null;
		spiff.Widget.call(this, viewTemplate.domRoot);
		this.$template = viewTemplate;
		this.$setupContent();
	};
	$tab_AreYouSureButtons.__typeName = 'tab.AreYouSureButtons';
	$tab_AreYouSureButtons.create = function AreYouSureButtons$Create(actionCancel, actionConfirm) {
		var content = new $tab_AreYouSureButtons(new $tab_AreYouSureTemplate());
		if (ss.isValue(actionCancel)) {
			content.add_$cancel(actionCancel);
			content.disposables.add$1(new tab.CallOnDispose(function() {
				content.remove_$cancel(actionCancel);
			}));
		}
		if (ss.isValue(actionConfirm)) {
			content.add_$confirm(actionConfirm);
			content.disposables.add$1(new tab.CallOnDispose(function() {
				content.remove_$confirm(actionConfirm);
			}));
		}
		return content;
	};
	global.tab.AreYouSureButtons = $tab_AreYouSureButtons;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.AreYouSureTemplate
	var $tab_AreYouSureTemplate = function() {
		this.container = null;
		this.label = null;
		this.cancelButton = null;
		this.confirmButton = null;
		spiff.Template.call(this, $($tab_AreYouSureTemplate.$htmlTemplate));
		this.container = this.domRoot;
		this.label = this.getElementBySelector('.tab-areYouSure-label');
		this.cancelButton = this.getElementBySelector('.tab-areYouSure-no');
		this.confirmButton = this.getElementBySelector('.tab-areYouSure-yes');
	};
	$tab_AreYouSureTemplate.__typeName = 'tab.AreYouSureTemplate';
	global.tab.AreYouSureTemplate = $tab_AreYouSureTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.BadPasswordAuthPromptOverlayWidget
	var $tab_BadPasswordAuthPromptOverlayWidget = function(dataSourceConnectionAttemptErrorResponse, connectionAttemptInfo, onProceed) {
		this.$authPageUrl = null;
		this.$dataSourceConnectionAttemptInfo = null;
		this.$connectionAttemptInfo = null;
		$tab_BaseDataSourceConnectionErrorOverlayWidget.call(this, dataSourceConnectionAttemptErrorResponse, onProceed);
		ss.Debug.assert(!ss.isNullOrEmptyString(dataSourceConnectionAttemptErrorResponse.RedirectUrl), 'Redirect URL is mandatory to handle bad password errors');
		this.$authPageUrl = dataSourceConnectionAttemptErrorResponse.RedirectUrl;
		this.$dataSourceConnectionAttemptInfo = connectionAttemptInfo.dataSourceConnectionAttemptInfos[0];
		this.$connectionAttemptInfo = connectionAttemptInfo;
	};
	$tab_BadPasswordAuthPromptOverlayWidget.__typeName = 'tab.BadPasswordAuthPromptOverlayWidget';
	global.tab.BadPasswordAuthPromptOverlayWidget = $tab_BadPasswordAuthPromptOverlayWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.BaseDataSourceConnectionErrorOverlayWidget
	var $tab_BaseDataSourceConnectionErrorOverlayWidget = function(dataSourceConnectionAttemptErrorResponse, onProceed) {
		$tab_BaseDataSourceConnectionErrorWidget.call(this, dataSourceConnectionAttemptErrorResponse, onProceed, null);
	};
	$tab_BaseDataSourceConnectionErrorOverlayWidget.__typeName = 'tab.BaseDataSourceConnectionErrorOverlayWidget';
	global.tab.BaseDataSourceConnectionErrorOverlayWidget = $tab_BaseDataSourceConnectionErrorOverlayWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.BaseDataSourceConnectionErrorWidget
	var $tab_BaseDataSourceConnectionErrorWidget = function(dataSourceConnectionAttemptErrorResponse, onProceed, onCancel) {
		this.onProceed = null;
		this.onCancel = null;
		this.dataSourceConnectionAttemptErrorResponse = null;
		this.$1$SubmittedField = false;
		ss.Debug.assert(!ss.isNullOrUndefined(dataSourceConnectionAttemptErrorResponse), 'DataSourceErrorResponse was not provided');
		ss.Debug.assert(!ss.isNullOrUndefined(onProceed), 'Action onProceed was not provided');
		this.dataSourceConnectionAttemptErrorResponse = dataSourceConnectionAttemptErrorResponse;
		this.onProceed = onProceed;
		this.onCancel = onCancel;
		this.set_submitted(false);
	};
	$tab_BaseDataSourceConnectionErrorWidget.__typeName = 'tab.BaseDataSourceConnectionErrorWidget';
	global.tab.BaseDataSourceConnectionErrorWidget = $tab_BaseDataSourceConnectionErrorWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.BaseDisposableDialog
	var $tab_BaseDisposableDialog = function() {
		this.parentNode = null;
	};
	$tab_BaseDisposableDialog.__typeName = 'tab.BaseDisposableDialog';
	global.tab.BaseDisposableDialog = $tab_BaseDisposableDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.BaseToolbarButtonComponent
	var $tab_BaseToolbarButtonComponent$2 = function(TViewModel, TView) {
		var $type = function(creator, initialProps, context) {
			this.$creator = null;
			ss.makeGenericType(spiff.ReactSpiffAdapter$3, [TView, ss.makeGenericType($tab_ToolbarButtonProps$1, [TViewModel]), Object]).call(this, creator(initialProps.viewModel), initialProps, context);
			this.$creator = creator;
		};
		ss.registerGenericClassInstance($type, $tab_BaseToolbarButtonComponent$2, [TViewModel, TView], {
			handleWidgetPropertyChanged: function BaseToolbarButtonComponent$HandleWidgetPropertyChanged(sender, propertyChangedEventArgs) {
			},
			updateWidgetState: function BaseToolbarButtonComponent$UpdateWidgetState(newProps) {
				if (!ss.referenceEquals(this.props.viewModel, newProps.viewModel)) {
					this.set_widget(tab.MiscUtil.dispose$1(this.get_widget()));
					this.set_widget(this.$creator(newProps.viewModel));
					var domNode = $(ReactDOM.findDOMNode(this));
					if (ss.isValue(domNode)) {
						domNode.append(this.get_widget().element);
					}
				}
			}
		}, function() {
			return ss.makeGenericType(spiff.ReactSpiffAdapter$3, [TView, ss.makeGenericType($tab_ToolbarButtonProps$1, [TViewModel]), Object]);
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_BaseToolbarButtonComponent$2.__typeName = 'tab.BaseToolbarButtonComponent$2';
	ss.initGenericClass($tab_BaseToolbarButtonComponent$2, $asm, 2);
	global.tab.BaseToolbarButtonComponent$2 = $tab_BaseToolbarButtonComponent$2;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.BrowserViewport
	var $tab_BrowserViewport = function(dimensions) {
		this.$dimensions = null;
		this.$dimensions = dimensions;
	};
	$tab_BrowserViewport.__typeName = 'tab.BrowserViewport';
	$tab_BrowserViewport.get_$log = function BrowserViewport$get_Log() {
		return tab.Logger.lazyGetLogger($tab_BrowserViewport);
	};
	$tab_BrowserViewport.get_$defaultViewportRect = function BrowserViewport$get_DefaultViewportRect() {
		var visualViewport = window.self.visualViewport;
		if (ss.isValue(visualViewport)) {
			return { l: ss.Int32.trunc(visualViewport.pageLeft), t: ss.Int32.trunc(visualViewport.pageTop), w: ss.Int32.trunc(visualViewport.width), h: ss.Int32.trunc(visualViewport.height) };
		}
		else {
			var h = new tab.WindowHelper(window.self);
			return { l: h.get_pageXOffset(), t: h.get_pageYOffset(), w: h.get_innerWidth(), h: h.get_innerHeight() };
		}
	};
	$tab_BrowserViewport.getViewport = function BrowserViewport$GetViewport(callback) {
		tab.Param.verifyValue(callback, 'callback');
		if (spiff.FullscreenUtil.get_inFullscreenMode()) {
			$tab_BrowserViewport.get_$log().debug('GetViewport in full-screen mode', []);
			callback(new $tab_BrowserViewport($tab_BrowserViewport.get_$defaultViewportRect()));
		}
		else if ($tab_BrowserViewport.$isVisibleRectCommunicationEnabled) {
			$tab_BrowserViewport.get_$log().debug('GetViewport with callback', []);
			$tab_BrowserViewport.$layoutInfoCallbacks.push(callback);
			$tab_BrowserViewport.$requestVisibleRectInfo();
		}
		else {
			$tab_BrowserViewport.get_$log().debug('GetViewport with default, no message handler in parent', []);
			callback(new $tab_BrowserViewport($tab_BrowserViewport.get_$defaultViewportRect()));
		}
	};
	$tab_BrowserViewport.$addLegacyVizOffset = function BrowserViewport$AddLegacyVizOffset(p) {
		if (tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
			if (ss.isValue($tab_BrowserViewport.$vizOffset)) {
				p.y += $tab_BrowserViewport.$vizOffset.y;
				p.x += $tab_BrowserViewport.$vizOffset.x;
			}
		}
		else {
			try {
				var w = window.self;
				while (ss.isValue(w.frameElement)) {
					var pos = $(w.frameElement).offset();
					p.y += tab.DoubleUtil.roundToInt(pos.top);
					p.x += tab.DoubleUtil.roundToInt(pos.left);
					w = w.parent;
				}
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				$tab_BrowserViewport.get_$log().warn('Error getting viewport position, likely x-domain issue: %o', [e]);
			}
		}
	};
	$tab_BrowserViewport.$handleMessage = function BrowserViewport$HandleMessage(e) {
		if (typeof(ss.getType('ss')) === 'undefined') {
			return;
		}
		var odata = e.data;
		if (ss.isNullOrUndefined(odata) || typeof(odata) !== 'string') {
			return;
		}
		var data = ss.cast(odata, String);
		$tab_BrowserViewport.get_$log().debug('Message received: %s', [data]);
		var command = tab.NonApiCommand.parse(data);
		if (command.get_name() === 'layoutInfoResp') {
			var visibleRect = { l: parseInt(ss.getItem(command.get_parameters(), 0), 10), t: parseInt(ss.getItem(command.get_parameters(), 1), 10), w: parseInt(ss.getItem(command.get_parameters(), 2), 10), h: parseInt(ss.getItem(command.get_parameters(), 3), 10) };
			$tab_BrowserViewport.get_$log().debug('Received Visible Rect: l=%d,t=%d,w=%d,h=%d', [visibleRect.l, visibleRect.t, visibleRect.w, visibleRect.h]);
			$tab_BrowserViewport.$callbackWithRect(visibleRect);
		}
		else if (command.get_name() === 'tableau.enableVisibleRectCommunication') {
			$tab_BrowserViewport.get_$log().debug('Enabling Visible Rect Communication', []);
			$tab_BrowserViewport.$isVisibleRectCommunicationEnabled = true;
		}
		else if (command.get_name() === 'vizOffsetResp') {
			$tab_BrowserViewport.$vizOffset = { x: parseInt(ss.getItem(command.get_parameters(), 0), 10), y: parseInt(ss.getItem(command.get_parameters(), 1), 10) };
			$tab_BrowserViewport.$isVisibleRectCommunicationEnabled = true;
		}
	};
	$tab_BrowserViewport.$callbackWithRect = function BrowserViewport$CallbackWithRect(r) {
		var vp = new $tab_BrowserViewport(r);
		if ($tab_BrowserViewport.$layoutInfoCallbacks.length !== 0) {
			var callback = $tab_BrowserViewport.$layoutInfoCallbacks.shift();
			callback(vp);
		}
	};
	$tab_BrowserViewport.$requestVisibleRectInfo = function BrowserViewport$RequestVisibleRectInfo() {
		$tab_BrowserViewport.get_$log().debug('Requesting visible rect info', []);
		if (BrowserSupport.BrowserSupport.PostMessage()) {
			var command = new tab.NonApiCommand('layoutInfoReq', []);
			window.parent.postMessage(command.serialize(), '*');
		}
		else {
			$tab_BrowserViewport.$callbackWithRect($tab_BrowserViewport.get_$defaultViewportRect());
		}
	};
	$tab_BrowserViewport.$removeMessageHandler = function BrowserViewport$RemoveMessageHandler() {
		if ($tab_BrowserViewport.$isMessageHandlerAttached) {
			if ('removeEventListener' in window.self) {
				window.removeEventListener('message', $tab_BrowserViewport.$handleMessage, true);
			}
			else {
				window.self.detachEvent('onmessage', $tab_BrowserViewport.$handleMessage);
			}
			$tab_BrowserViewport.$isMessageHandlerAttached = false;
		}
		$tab_BrowserViewport.get_$log().debug('BrowserViewport MessageHandler removed.', []);
	};
	$tab_BrowserViewport.$addUnloadHandler = function BrowserViewport$AddUnloadHandler() {
		if ('addEventListener' in window.self) {
			window.addEventListener('unload', $tab_BrowserViewport.$onUnload, true);
		}
		else {
			window.self.attachEvent('onunload', $tab_BrowserViewport.$onUnload);
		}
	};
	$tab_BrowserViewport.$onUnload = function BrowserViewport$OnUnload(e) {
		$tab_BrowserViewport.$removeMessageHandler();
	};
	global.tab.BrowserViewport = $tab_BrowserViewport;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ButtonZoneComponent
	var $tab_ButtonZoneComponent = function(props) {
		React.Component.call(this, props);
		$tab_ServerFontLoader.get_instance().add_fontPreparationComplete(ss.mkdel(this, this.$fontPreparationComplete));
	};
	$tab_ButtonZoneComponent.__typeName = 'tab.ButtonZoneComponent';
	global.tab.ButtonZoneComponent = $tab_ButtonZoneComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ButtonZoneViewModel
	var $tab_ButtonZoneViewModel = function(buttonZoneModel, parentZoneViewModel) {
		this.$buttonZoneModel = null;
		this.$parentZoneViewModel = null;
		this.$hoverActive = false;
		ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]).call(this);
		this.$buttonZoneModel = buttonZoneModel;
		this.$parentZoneViewModel = parentZoneViewModel;
		this.$buttonZoneModel.add_contentUpdated(ss.mkdel(this, this.$handleContentUpdate));
		this.$parentZoneViewModel.add_resizeZone(ss.mkdel(this, this.$handleResizeZone));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$parentZoneViewModel.remove_resizeZone(ss.mkdel(this, this.$handleResizeZone));
			this.$buttonZoneModel.remove_contentUpdated(ss.mkdel(this, this.$handleContentUpdate));
		})));
	};
	$tab_ButtonZoneViewModel.__typeName = 'tab.ButtonZoneViewModel';
	global.tab.ButtonZoneViewModel = $tab_ButtonZoneViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CancelDialog
	var $tab_CancelDialog = function(cancelSuccessAction, cancelFailureAction, title, shouldReturnFocusById) {
		this.$dialogShowDelay = ss.coalesce(tab.FeatureParamsLookup.getInt(50), 2000);
		this.$showDialogTimeout = 0;
		this.$dialogShownTime = null;
		this.$cancelClickTime = null;
		this.$currentCommand = null;
		this.$2$CancelSuccessActionField = null;
		this.$2$CancelFailureActionField = null;
		this.$2$HandleRefField = null;
		this.$2$TitleField = null;
		$tab_BaseDisposableDialog.call(this);
		this.set_$cancelSuccessAction(cancelSuccessAction);
		this.set_$cancelFailureAction(cancelFailureAction);
		this.set_$title(title);
		if (shouldReturnFocusById) {
			this.set_$handleRef($tab_CancelDialog.returnFocusById);
		}
	};
	$tab_CancelDialog.__typeName = 'tab.CancelDialog';
	$tab_CancelDialog.returnFocusById = function CancelDialog$ReturnFocusById(componentRef) {
		if (ss.isValue(componentRef)) {
			$tab_CancelDialog.$focusId = document.activeElement.id;
		}
		else if (ss.isValue($tab_CancelDialog.$focusId)) {
			document.getElementById($tab_CancelDialog.$focusId).focus();
			$tab_CancelDialog.$focusId = null;
		}
	};
	global.tab.CancelDialog = $tab_CancelDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CancelDialogComponent
	var $tab_CancelDialogComponent = function(props) {
		spiff.PureRenderComponent.call(this, props);
		this.state = { isCanceling: false };
	};
	$tab_CancelDialogComponent.__typeName = 'tab.CancelDialogComponent';
	global.tab.CancelDialogComponent = $tab_CancelDialogComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CancelDialogTelemetry
	var $tab_CancelDialogTelemetry = function() {
	};
	$tab_CancelDialogTelemetry.__typeName = 'tab.CancelDialogTelemetry';
	$tab_CancelDialogTelemetry.$logCancelDialogNeverCanceledEvent = function CancelDialogTelemetry$LogCancelDialogNeverCanceledEvent(commandName, dialogShownTime, dialogCloseTime) {
		if (tab.OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('CommandCancellation')) {
			var elapsedTotalTimeShown = (ss.staticEquals(dialogShownTime, null) ? 0 : (dialogCloseTime - dialogShownTime));
			tab.OnlineAnalyticsClient.logEvent($tab_CancelDialogTelemetry.$cancelDialogEventType, ss.mkdict([$tab_CancelDialogTelemetry.$cancelDialogElapsedTotalTimeShownMS, elapsedTotalTimeShown, $tab_CancelDialogTelemetry.$cancelCommandName, commandName, $tab_CancelDialogTelemetry.$cancelStatus, $tab_CancelDialogTelemetry.$cancelStatusCompletedBeforeCancel]));
		}
	};
	$tab_CancelDialogTelemetry.$logCancelDialogFailureEvent = function CancelDialogTelemetry$LogCancelDialogFailureEvent(commandName, dialogShownTime, cancelClickTime, dialogCloseTime) {
		$tab_CancelDialogTelemetry.$logCancelDialogEvent(commandName, $tab_CancelDialogTelemetry.$cancelStatusFailure, dialogShownTime, cancelClickTime, dialogCloseTime);
	};
	$tab_CancelDialogTelemetry.$logCancelDialogSuccessEvent = function CancelDialogTelemetry$LogCancelDialogSuccessEvent(commandName, cancelStatus, dialogShownTime, cancelClickTime, dialogCloseTime) {
		$tab_CancelDialogTelemetry.$logCancelDialogEvent(commandName, tab.CancelTelemetry.convertCancellationStatusForLog(cancelStatus), dialogShownTime, cancelClickTime, dialogCloseTime);
	};
	$tab_CancelDialogTelemetry.$logCancelDialogEvent = function CancelDialogTelemetry$LogCancelDialogEvent(commandName, cancelStatus, dialogShownTime, cancelClickTime, dialogCloseTime) {
		if (tab.OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('CommandCancellation')) {
			var elapsedTimeBeforeCancel = cancelClickTime - dialogShownTime;
			var elapsedTotalTimeShown = dialogCloseTime - dialogShownTime;
			tab.OnlineAnalyticsClient.logEvent($tab_CancelDialogTelemetry.$cancelDialogEventType, ss.mkdict([$tab_CancelDialogTelemetry.$cancelDialogElapsedTimeBeforeCanceledMS, elapsedTimeBeforeCancel, $tab_CancelDialogTelemetry.$cancelDialogElapsedTotalTimeShownMS, elapsedTotalTimeShown, $tab_CancelDialogTelemetry.$cancelCommandName, commandName, $tab_CancelDialogTelemetry.$cancelStatus, cancelStatus]));
		}
	};
	global.tab.CancelDialogTelemetry = $tab_CancelDialogTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CanvasRenderer
	var $tab_CanvasRenderer = function(canvasElt, context) {
		this.$mainCanvas = null;
		this.$mainContext = null;
		this.$offscreenCanvas = null;
		this.$offscreenContext = null;
		this.$renderOffscreen = false;
		this.$offscreenBounds = null;
		this.$cachedVisibleRect = null;
		this.$prevTextInfo = null;
		this.$renderOffset = null;
		this.$mainCanvas = canvasElt;
		this.$mainContext = context;
		this.$renderOffscreen = false;
		this.$renderOffset = { x: 0, y: 0 };
	};
	$tab_CanvasRenderer.__typeName = 'tab.CanvasRenderer';
	$tab_CanvasRenderer.$modifyLineEndpoints = function CanvasRenderer$ModifyLineEndpoints(start, end, lineWidth) {
		if (Math.round(lineWidth) % 2 === 1) {
			var xDiff = end.x - start.x;
			var yDiff = end.y - start.y;
			if (xDiff !== 0 || yDiff !== 0) {
				var curDistance = xDiff * xDiff + yDiff * yDiff;
				curDistance = Math.sqrt(curDistance);
				var yShift = Math.abs(0.5 * (xDiff / curDistance));
				var xShift = Math.abs(0.5 * (yDiff / curDistance));
				start.x += xShift;
				start.y += yShift;
				end.x += xShift;
				end.y += yShift;
			}
		}
	};
	$tab_CanvasRenderer.getRenderContext = function CanvasRenderer$GetRenderContext(canvasElt, backgroundMode) {
		var context;
		if (backgroundMode === 'opaque' && tab.FeatureParamsLookup.getBool(42)) {
			var contextAttributes = ss.mkdict(['alpha', false]);
			context = canvasElt.getContext('2d', contextAttributes);
		}
		else {
			context = canvasElt.getContext('2d');
		}
		return new $tab_TabRenderContext2D(ss.cast(context, CanvasRenderingContext2D));
	};
	$tab_CanvasRenderer.addMultipolygonPath = function CanvasRenderer$AddMultipolygonPath(ctx, multipolygon) {
		var polygons = multipolygon.polygonList;
		var polyCount = polygons.length;
		for (var polyIdx = 0; polyIdx < polyCount; polyIdx++) {
			var lines = polygons[polyIdx].lineList;
			var lineCount = lines.length;
			for (var lineIdx = 0; lineIdx < lineCount; lineIdx++) {
				var coords = lines[lineIdx].pointsF;
				var coordCount = coords.length;
				if (coordCount < 2) {
					continue;
				}
				ctx.moveTo(coords[0], coords[1]);
				for (var j = 2; j < coordCount; j = j + 2) {
					ctx.lineTo(coords[j], coords[j + 1]);
				}
			}
		}
	};
	$tab_CanvasRenderer.addMultipointPath = function CanvasRenderer$AddMultipointPath(ctx, multipoint, circleRadius) {
		var coords = multipoint.pointsF;
		var coordCount = coords.length;
		for (var i = 0; i < coordCount; i = i + 2) {
			var x = coords[i];
			var y = coords[i + 1];
			ctx.moveTo(x + circleRadius, y);
			ctx.arc(x, y, circleRadius, 0, $tab_CanvasRenderer.twoPI, true);
		}
	};
	$tab_CanvasRenderer.addMultilinePath = function CanvasRenderer$AddMultilinePath(ctx, multiline) {
		var lines = multiline.lineList;
		var lineCount = lines.length;
		for (var lineIdx = 0; lineIdx < lineCount; lineIdx++) {
			var coords = lines[lineIdx].pointsF;
			var coordCount = coords.length;
			if (coordCount === 0 || coordCount % 2 === 1) {
				continue;
			}
			ctx.moveTo(coords[0], coords[1]);
			for (var j = 2; j < coords.length; j = j + 2) {
				ctx.lineTo(coords[j], coords[j + 1]);
			}
		}
	};
	$tab_CanvasRenderer.boundsCoordinateArray = function CanvasRenderer$BoundsCoordinateArray(coords, bounds) {
		var coordCount = coords.length;
		for (var i = 0; i < coordCount; i = i + 2) {
			var x = coords[i];
			var y = coords[i + 1];
			bounds.minX = Math.min(bounds.minX, x);
			bounds.minY = Math.min(bounds.minY, y);
			bounds.maxX = Math.max(bounds.maxX, x);
			bounds.maxY = Math.max(bounds.maxY, y);
		}
	};
	$tab_CanvasRenderer.boundsMultipolygon = function CanvasRenderer$BoundsMultipolygon(multipolygon, bounds) {
		for (var $t1 = 0; $t1 < multipolygon.polygonList.length; $t1++) {
			var poly = multipolygon.polygonList[$t1];
			for (var $t2 = 0; $t2 < poly.lineList.length; $t2++) {
				var line = poly.lineList[$t2];
				$tab_CanvasRenderer.boundsCoordinateArray(line.pointsF, bounds);
			}
		}
	};
	$tab_CanvasRenderer.boundsMultilineString = function CanvasRenderer$BoundsMultilineString(multiline, bounds) {
		for (var $t1 = 0; $t1 < multiline.lineList.length; $t1++) {
			var line = multiline.lineList[$t1];
			$tab_CanvasRenderer.boundsCoordinateArray(line.pointsF, bounds);
		}
	};
	$tab_CanvasRenderer.getBasisVectorsBetweenTwoPoints = function CanvasRenderer$GetBasisVectorsBetweenTwoPoints(startPt, endPt, length) {
		var deltaX = endPt.x - startPt.x;
		var deltaY = endPt.y - startPt.y;
		var dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
		var startToEndVec = { x: length * (deltaX / dist), y: length * (deltaY / dist) };
		var perpendicularVec = { x: -startToEndVec.y, y: startToEndVec.x };
		return { item1: startToEndVec, item2: perpendicularVec };
	};
	$tab_CanvasRenderer.fillPath = function CanvasRenderer$FillPath(context, points, close) {
		var numPoints = Math.floor(points.length / 2);
		if (numPoints < 2) {
			return;
		}
		context.beginPath();
		context.moveTo(points[0], points[1]);
		for (var index = 2; index < numPoints * 2; index += 2) {
			context.lineTo(points[index], points[index + 1]);
		}
		if (close) {
			context.closePath();
		}
		context.fill();
	};
	$tab_CanvasRenderer.strokePath = function CanvasRenderer$StrokePath(context, points, close, adjust) {
		var numPoints = Math.floor(points.length / 2);
		if (numPoints < 2) {
			return;
		}
		context.beginPath();
		var lineWidth = context.get_lineWidth();
		for (var index = 0; index < numPoints * 2 - 2; index += 2) {
			var start = { x: points[index], y: points[index + 1] };
			var end = { x: points[index + 2], y: points[index + 3] };
			if (numPoints <= 2 && adjust) {
				$tab_CanvasRenderer.$modifyLineEndpoints(start, end, lineWidth);
			}
			if (index === 0) {
				context.moveTo(start.x, start.y);
			}
			$tab_CanvasRenderer.$drawLineSegment(context, start, end);
		}
		if (close) {
			context.closePath();
			var lastIndex = numPoints * 2;
			var start1 = { x: points[lastIndex - 2], y: points[lastIndex - 1] };
			var end1 = { x: points[0], y: points[1] };
			if (numPoints <= 2 && adjust) {
				$tab_CanvasRenderer.$modifyLineEndpoints(start1, end1, lineWidth);
			}
			$tab_CanvasRenderer.$drawLineSegment(context, start1, end1);
		}
		context.stroke();
	};
	$tab_CanvasRenderer.toCanvasAngle = function CanvasRenderer$ToCanvasAngle(theta) {
		return theta * $tab_CanvasRenderer.twoPI - $tab_CanvasRenderer.halfPI;
	};
	$tab_CanvasRenderer.toCanvasLineCap = function CanvasRenderer$ToCanvasLineCap(tableauCap) {
		switch (tableauCap) {
			case 'flat': {
				return 'butt';
			}
			case 'square': {
				return 'square';
			}
			case 'round': {
				return 'round';
			}
			case 'triangle': {
				break;
			}
		}
		return 'butt';
	};
	$tab_CanvasRenderer.toCanvasLineJoin = function CanvasRenderer$ToCanvasLineJoin(tableauJoin) {
		switch (tableauJoin) {
			case 'bevel': {
				return 'bevel';
			}
			case 'miter': {
				return 'miter';
			}
			case 'round': {
				return 'round';
			}
		}
		return 'miter';
	};
	$tab_CanvasRenderer.renderRectangle = function CanvasRenderer$RenderRectangle(context, x, y, width, height, color, strokeWidth) {
		var w2 = width / 2;
		var h2 = height / 2;
		context.set_lineJoin('miter');
		context.set_lineWidth(strokeWidth);
		context.set_strokeStyle(color);
		context.strokeRect(x - w2, y - h2, width, height);
	};
	$tab_CanvasRenderer.renderCircle = function CanvasRenderer$RenderCircle(context, x, y, diameter, color, strokeWidth) {
		context.beginPath();
		context.arc(x, y, Math.max(diameter / 2, 0), 0, $tab_CanvasRenderer.twoPI, true);
		context.closePath();
		context.set_lineWidth(strokeWidth);
		context.set_strokeStyle(color);
		context.stroke();
	};
	$tab_CanvasRenderer.renderFilledCircle = function CanvasRenderer$RenderFilledCircle(context, x, y, diameter, color) {
		context.beginPath();
		context.arc(x, y, diameter / 2, 0, $tab_CanvasRenderer.twoPI, true);
		context.closePath();
		context.set_shapeFillStyle(color);
		context.fill();
	};
	$tab_CanvasRenderer.renderWedge = function CanvasRenderer$RenderWedge(context, x, y, radius, theta1, theta2, color, strokeWidth, anticlockwise, useMiterLineJoin) {
		var angle1 = $tab_CanvasRenderer.toCanvasAngle(theta1);
		var angle2 = $tab_CanvasRenderer.toCanvasAngle(theta2);
		if (Math.abs(angle2 - angle1) < $tab_CanvasRenderer.angleEpsilon) {
			return;
		}
		if (ss.isNullOrUndefined(anticlockwise)) {
			anticlockwise = false;
		}
		var fullPie = Math.abs(theta2 - theta1) >= 1;
		context.beginPath();
		if (!fullPie) {
			context.moveTo(x, y);
		}
		angle1 = $tab_CanvasRenderer.$limitPrecision(angle1);
		angle2 = $tab_CanvasRenderer.$limitPrecision(angle2);
		context.arc(x, y, radius, angle1, angle2, anticlockwise);
		context.closePath();
		context.set_lineJoin((useMiterLineJoin ? 'miter' : 'round'));
		context.set_lineWidth(strokeWidth);
		context.set_strokeStyle(color);
		context.stroke();
	};
	$tab_CanvasRenderer.createPlaceholderPath = function CanvasRenderer$CreatePlaceholderPath(ctx, x, y, diameter) {
		ctx.beginPath();
		ctx.arc(x, y, diameter / 2, 0, $tab_CanvasRenderer.twoPI, true);
		ctx.closePath();
	};
	$tab_CanvasRenderer.createMultipolygonPath = function CanvasRenderer$CreateMultipolygonPath(ctx, geometryPM) {
		ctx.beginPath();
		$tab_CanvasRenderer.addMultipolygonPath(ctx, geometryPM.multiPolygon);
		ctx.closePath();
	};
	$tab_CanvasRenderer.createMultipointPath = function CanvasRenderer$CreateMultipointPath(ctx, diameter, geometryPM) {
		ctx.beginPath();
		$tab_CanvasRenderer.addMultipointPath(ctx, geometryPM.multiPoint, diameter / 2);
		ctx.closePath();
	};
	$tab_CanvasRenderer.fillMultiLineStringPath = function CanvasRenderer$FillMultiLineStringPath(ctx, lineWidth, color) {
		ctx.set_lineCap('butt');
		ctx.set_lineJoin('round');
		ctx.set_strokeStyle(color);
		ctx.set_lineWidth(lineWidth);
		ctx.stroke();
	};
	$tab_CanvasRenderer.fillClearMultiLineStringPath = function CanvasRenderer$FillClearMultiLineStringPath(ctx, lineWidth, color) {
		var prevCompo = ctx.get_globalCompositeOperation();
		ctx.set_globalCompositeOperation('destination-out');
		ctx.set_lineCap('butt');
		ctx.set_lineJoin('round');
		ctx.set_strokeStyle(color);
		ctx.set_lineWidth(lineWidth);
		ctx.stroke();
		ctx.set_globalCompositeOperation(prevCompo);
	};
	$tab_CanvasRenderer.$drawLine = function CanvasRenderer$DrawLine(ctx, startpt, endpt) {
		ctx.beginPath();
		ctx.moveTo(startpt.x, startpt.y);
		ctx.lineTo(endpt.x, endpt.y);
		ctx.stroke();
	};
	$tab_CanvasRenderer.$capLineCalc = function CanvasRenderer$CapLineCalc(linePoints, width, capWidth) {
		var startPt = linePoints[0];
		var endPt = linePoints[1];
		var vectors = $tab_CanvasRenderer.getBasisVectorsBetweenTwoPoints(startPt, endPt, width);
		var normalizedVector = $tab_CanvasRenderer.$vectorNormalizer(vectors.item1);
		var startToEndVec = { x: normalizedVector.x * (capWidth / 2), y: normalizedVector.y * (capWidth / 2) };
		var normalVec = vectors.item2;
		var c1 = { x: startPt.x - startToEndVec.x + normalVec.x, y: startPt.y - startToEndVec.y + normalVec.y };
		var c2 = { x: startPt.x - startToEndVec.x - normalVec.x, y: startPt.y - startToEndVec.y - normalVec.y };
		var points = new Array(2);
		points[0] = c1;
		points[1] = c2;
		return points;
	};
	$tab_CanvasRenderer.fillMultiLineStringEndCaps = function CanvasRenderer$FillMultiLineStringEndCaps(ctx, multiline, lineWidth, capWidth, color) {
		ctx.set_strokeStyle(color);
		ctx.set_lineWidth(capWidth);
		var width = lineWidth / 2;
		var lines = multiline.lineList;
		var lineCount = lines.length;
		for (var i = 0; i < lineCount; i++) {
			var lineSegment = lines[i].pointsF;
			var count = lineSegment.length;
			if (count < 4 || count % 2 === 1) {
				continue;
			}
			var startPt = { x: lineSegment[0], y: lineSegment[1] };
			var endPt = { x: lineSegment[2], y: lineSegment[3] };
			var linePoints = new Array(2);
			linePoints[0] = startPt;
			linePoints[1] = endPt;
			var capPoints = $tab_CanvasRenderer.$capLineCalc(linePoints, width, capWidth);
			$tab_CanvasRenderer.$drawLine(ctx, capPoints[0], capPoints[1]);
			startPt.x = lineSegment[count - 2];
			startPt.y = lineSegment[count - 1];
			endPt.x = lineSegment[count - 4];
			endPt.y = lineSegment[count - 3];
			linePoints[0] = startPt;
			linePoints[1] = endPt;
			capPoints = $tab_CanvasRenderer.$capLineCalc(linePoints, width, capWidth);
			$tab_CanvasRenderer.$drawLine(ctx, capPoints[0], capPoints[1]);
		}
		ctx.beginPath();
		$tab_CanvasRenderer.addMultilinePath(ctx, multiline);
	};
	$tab_CanvasRenderer.$vectorNormalizer = function CanvasRenderer$VectorNormalizer(vector) {
		var length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);
		return { x: vector.x / length, y: vector.y / length };
	};
	$tab_CanvasRenderer.createMultiLinePath = function CanvasRenderer$CreateMultiLinePath(ctx, geometryPM) {
		ctx.beginPath();
		$tab_CanvasRenderer.addMultilinePath(ctx, geometryPM.multiLine);
	};
	$tab_CanvasRenderer.$drawLineSegment = function CanvasRenderer$DrawLineSegment(context, start, end) {
		if (BrowserSupport.BrowserSupport.CanvasLinePattern()) {
			context.lineTo(end.x, end.y);
		}
		else {
			switch (context.get_linePattern()) {
				case 'dashed': {
					$tab_CanvasRenderer.$drawDashedLineSegment(context, start, end, $tab_TabRenderContext2D.defaultLineDashDashed[0], $tab_TabRenderContext2D.defaultLineDashDashed[1]);
					break;
				}
				case 'dotted': {
					$tab_CanvasRenderer.$drawDashedLineSegment(context, start, end, $tab_TabRenderContext2D.defaultLineDashDotted[0], $tab_TabRenderContext2D.defaultLineDashDotted[1]);
					break;
				}
				case 'solid':
				default: {
					context.lineTo(end.x, end.y);
					break;
				}
			}
		}
	};
	$tab_CanvasRenderer.$drawDashedLineSegment = function CanvasRenderer$DrawDashedLineSegment(context, start, end, dashLength, gapLength) {
		var lineWidth = context.get_lineWidth();
		dashLength = lineWidth * dashLength;
		gapLength = lineWidth * gapLength;
		context.moveTo(start.x, start.y);
		var penUp = false;
		var lengthRemaining = dashLength;
		var prevX = start.x;
		var prevY = start.y;
		var xDiff = end.x - start.x;
		var yDiff = end.y - start.y;
		var curDistance = xDiff * xDiff + yDiff * yDiff;
		curDistance = Math.sqrt(curDistance);
		var vecX = xDiff / curDistance;
		var vecY = yDiff / curDistance;
		while (curDistance > 0) {
			var segmentLength = ((curDistance > lengthRemaining) ? lengthRemaining : curDistance);
			var curX = prevX + segmentLength * vecX;
			var curY = prevY + segmentLength * vecY;
			if (penUp) {
				context.moveTo(curX, curY);
			}
			else {
				context.lineTo(curX, curY);
			}
			curDistance -= segmentLength;
			lengthRemaining -= segmentLength;
			if (lengthRemaining === 0) {
				penUp = !penUp;
				lengthRemaining = (penUp ? gapLength : dashLength);
			}
			prevX = curX;
			prevY = curY;
		}
	};
	$tab_CanvasRenderer.$getEffectiveWidth = function CanvasRenderer$GetEffectiveWidth(canvas, defaultValue) {
		var effectiveWidth = tab.DomUtil.parseWidthFromStyle(canvas.style);
		effectiveWidth = (isNaN(effectiveWidth) ? defaultValue : effectiveWidth);
		return effectiveWidth;
	};
	$tab_CanvasRenderer.$getEffectiveHeight = function CanvasRenderer$GetEffectiveHeight(canvas, defaultValue) {
		var effectiveHeight = tab.DomUtil.parseHeightFromStyle(canvas.style);
		effectiveHeight = (isNaN(effectiveHeight) ? defaultValue : effectiveHeight);
		return effectiveHeight;
	};
	$tab_CanvasRenderer.$limitPrecision = function CanvasRenderer$LimitPrecision(value) {
		return ss.Int32.trunc(value * 100000) / 100000;
	};
	global.tab.CanvasRenderer = $tab_CanvasRenderer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CanvasUtil
	var $tab_CanvasUtil = function() {
	};
	$tab_CanvasUtil.__typeName = 'tab.CanvasUtil';
	$tab_CanvasUtil.sizeCanvasWithHighDPISupport = function CanvasUtil$SizeCanvasWithHighDPISupport(canvas, context, effectiveSize) {
		var pixelRatio = $tab_RenderUtil.calculatePixelRatio(true);
		$tab_CanvasUtil.setCanvasSizeAndDensify(canvas, pixelRatio, effectiveSize);
		if (!tab.DoubleUtil.isApproximatelyEqual(pixelRatio, 1)) {
			$tab_CanvasUtil.scaleCanvasDrawing(context, pixelRatio);
		}
	};
	$tab_CanvasUtil.setCanvasSizeAndDensify = function CanvasUtil$SetCanvasSizeAndDensify(canvasEl, pixelRatio, effectiveSize) {
		if (ss.isValue(canvasEl)) {
			var actualSize = { w: ss.Int32.trunc(effectiveSize.w * pixelRatio), h: ss.Int32.trunc(effectiveSize.h * pixelRatio) };
			$tab_CanvasUtil.densifyCanvasUsingSize(canvasEl, actualSize, effectiveSize);
		}
	};
	$tab_CanvasUtil.densifyCanvasUsingSize = function CanvasUtil$DensifyCanvasUsingSize(canvasEl, actual, effective) {
		if (ss.isValue(canvasEl) && ss.isValue(actual) && ss.isValue(effective)) {
			canvasEl.width = actual.w;
			canvasEl.height = actual.h;
			canvasEl.style.width = $tab_CanvasUtil.$addPx(effective.w);
			canvasEl.style.height = $tab_CanvasUtil.$addPx(effective.h);
		}
	};
	$tab_CanvasUtil.scaleCanvasDrawing = function CanvasUtil$ScaleCanvasDrawing(context, pixelRatio) {
		if (ss.isValue(context)) {
			context.pixelRatio = pixelRatio;
			context.scale(pixelRatio, pixelRatio);
		}
	};
	$tab_CanvasUtil.isOverCanvasSizeLimit = function CanvasUtil$IsOverCanvasSizeLimit(effectiveWidth, effectiveHeight, pixelRatio) {
		var scaledArea = Math.floor(pixelRatio * effectiveWidth * pixelRatio * effectiveHeight + 0.5);
		return scaledArea > tabBootstrap.RenderingConstantsAndHelpers.get_canvasPixelLimit();
	};
	$tab_CanvasUtil.canvasDensified = function CanvasUtil$CanvasDensified(canvas) {
		return !!canvas.style.height && !ss.referenceEquals(canvas.style.height, $tab_CanvasUtil.$addPx(canvas.height));
	};
	$tab_CanvasUtil.$addPx = function CanvasUtil$AddPx(val) {
		return val + 'px';
	};
	global.tab.CanvasUtil = $tab_CanvasUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CommandExecutedEventArgs
	var $tab_CommandExecutedEventArgs = function() {
		this.command = null;
		ss.EventArgs.call(this);
	};
	$tab_CommandExecutedEventArgs.__typeName = 'tab.CommandExecutedEventArgs';
	global.tab.CommandExecutedEventArgs = $tab_CommandExecutedEventArgs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CommandsTelemetryUtils
	var $tab_CommandsTelemetryUtils = function() {
	};
	$tab_CommandsTelemetryUtils.__typeName = 'tab.CommandsTelemetryUtils';
	$tab_CommandsTelemetryUtils.getMenuItemTelemetryInfoFromMenuAndCommands = function CommandsTelemetryUtils$GetMenuItemTelemetryInfoFromMenuAndCommands(options) {
		if (ss.isNullOrUndefined(options.get_commands())) {
			return null;
		}
		var flatCommandItemList = [];
		var fullNames = [];
		$tab_CommandsTelemetryUtils.$addCommandItemsAndFullNamesToFlatList(options.get_commands(), options.get_menuPrefix(), flatCommandItemList, fullNames, options.get_menuTextMayBeSensitive());
		var flatMenuItemList = $tab_WidgetUtil.getMenuItemsInFlatList(options.menuItems);
		ss.Debug.assert(flatCommandItemList.length > 0, 'Expected command items in flat list.');
		ss.Debug.assert(flatMenuItemList.length > 0, 'Expected menu items in flat list.');
		var matchingMenuItems = _.filter(flatMenuItemList, function(item) {
			return ss.referenceEquals(item.name, options.get_menuItem().name);
		});
		var matchingCommandItems = _.filter(flatCommandItemList, function(item1) {
			return ss.referenceEquals((new tab.CommandItemWrapper(item1)).get_name(), options.get_menuItem().name);
		});
		ss.Debug.assert(matchingMenuItems.length > 0, 'Expected matching menu items.');
		var menuItemIndex = _.indexOf(matchingMenuItems, options.get_menuItem());
		ss.Debug.assert(menuItemIndex !== -1, 'Expected menu item match list.');
		var commandItem = matchingCommandItems[menuItemIndex];
		if (ss.isValue(commandItem)) {
			ss.Debug.assert(matchingCommandItems.length === matchingMenuItems.length, 'Expected an equal number of matching command and menu items.');
			var commandItemWrapper = new tab.CommandItemWrapper(commandItem);
			var commandItemIndex = _.indexOf(flatCommandItemList, commandItem);
			ss.Debug.assert(commandItemIndex !== -1, 'Expected command item in flat list.');
			var fullName = fullNames[commandItemIndex];
			ss.Debug.assert(ss.startsWithString(fullName, options.get_menuPrefix()), 'Expected top-level menu-rooted qualified item name.');
			var itemName = commandItemWrapper.get_readId();
			var $t1 = new $tab_MenuItemTelemetryInfo();
			$t1.fullMenuItemName = fullName;
			$t1.set_menuItemPrefix(options.get_menuPrefix());
			$t1.flatCommandItemList = flatCommandItemList;
			$t1.set_commandIndexInFlattenedList(commandItemIndex);
			$t1.set_commandReadId(itemName);
			$t1.set_commandName(commandItemWrapper.get_commandName());
			return $t1;
		}
		return null;
	};
	$tab_CommandsTelemetryUtils.$addCommandItemsAndFullNamesToFlatList = function CommandsTelemetryUtils$AddCommandItemsAndFullNamesToFlatList(commands, prefix, commandsList, fullNamesList, readIdOnly) {
		var commandsWrapper = tab.CommandsPresModelWrapper.create(commands);
		commandsWrapper.get_commandItems().forEach(function(commandItem) {
			var wrapper = new tab.CommandItemWrapper(commandItem);
			var commandName = wrapper.get_readId();
			if (!readIdOnly && ss.isNullOrUndefined(commandName) && ss.isValue(wrapper.get_name())) {
				commandName = wrapper.get_name();
			}
			var newPrefix = $tab_CommandsTelemetryUtils.joinToPrefix(prefix, commandName, ':');
			commandsList.push(commandItem);
			fullNamesList.push(newPrefix);
			if (ss.isValue(wrapper.get_commands())) {
				$tab_CommandsTelemetryUtils.$addCommandItemsAndFullNamesToFlatList(wrapper.get_commands(), newPrefix, commandsList, fullNamesList, readIdOnly);
			}
		});
	};
	$tab_CommandsTelemetryUtils.joinToPrefix = function CommandsTelemetryUtils$JoinToPrefix(prefix, readId, delimiter) {
		var hasPrefix = !ss.isNullOrEmptyString(prefix);
		var hasReadId = !ss.isNullOrUndefined(readId) && !ss.isNullOrEmptyString(readId);
		var joined = new ss.StringBuilder('');
		if (hasPrefix) {
			joined.append(prefix);
		}
		if (hasPrefix && hasReadId) {
			joined.append(delimiter);
		}
		if (hasReadId) {
			joined.append(readId);
		}
		return joined.toString();
	};
	global.tab.CommandsTelemetryUtils = $tab_CommandsTelemetryUtils;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CommonBannerProviderImpl
	var $tab_CommonBannerProviderImpl = function() {
		this.$disposables = new tab.DisposableHolder();
	};
	$tab_CommonBannerProviderImpl.__typeName = 'tab.CommonBannerProviderImpl';
	global.tab.CommonBannerProviderImpl = $tab_CommonBannerProviderImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CommonDialogProviderImpl
	var $tab_CommonDialogProviderImpl = function() {
		this.$disposables = new tab.DisposableHolder();
	};
	$tab_CommonDialogProviderImpl.__typeName = 'tab.CommonDialogProviderImpl';
	$tab_CommonDialogProviderImpl.$createDialogParentNode = function CommonDialogProviderImpl$CreateDialogParentNode() {
		var parentNode = document.createElement('div');
		return parentNode;
	};
	global.tab.CommonDialogProviderImpl = $tab_CommonDialogProviderImpl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CommonDialogProviderTelemetry
	var $tab_CommonDialogProviderTelemetry = function() {
	};
	$tab_CommonDialogProviderTelemetry.__typeName = 'tab.CommonDialogProviderTelemetry';
	$tab_CommonDialogProviderTelemetry.$logErrorAlert = function CommonDialogProviderTelemetry$LogErrorAlert(title, content, links) {
		if (tab.OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('WebErrorsOnlineTelemetry')) {
			tab.OnlineAnalyticsClient.logEvent('Error.Alert', ss.mkdict(['Title', title, 'Content', content, 'Links', (_.isArray(links) ? JSON.stringify(links) : '')]));
		}
	};
	$tab_CommonDialogProviderTelemetry.$logDataSourceConnectionError = function CommonDialogProviderTelemetry$LogDataSourceConnectionError(context, errorResponse) {
		if (tab.OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('WebErrorsOnlineTelemetry')) {
			ss.Debug.assert(ss.isValue(errorResponse), 'Expected an error response.');
			var errorType = ss.coalesce(errorResponse.ErrorType, '');
			var message = ss.coalesce(errorResponse.ErrorMessage, '');
			var redirectUrl = ss.coalesce(errorResponse.RedirectUrl, '');
			tab.OnlineAnalyticsClient.logEvent('Error.DataSourceConnection', ss.mkdict(['Context', context, 'ErrorType', errorType, 'Message', message, 'RedirectUrl', redirectUrl]));
		}
	};
	global.tab.CommonDialogProviderTelemetry = $tab_CommonDialogProviderTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CompletionMonitor
	var $tab_CompletionMonitor = function() {
		this.$internalSemaphores = null;
		this.$actionCompleted = null;
		this.$internalSemaphores = {};
		this.$actionCompleted = {};
	};
	$tab_CompletionMonitor.__typeName = 'tab.CompletionMonitor';
	$tab_CompletionMonitor.get_instance = function CompletionMonitor$get_Instance() {
		if (ss.isNullOrUndefined($tab_CompletionMonitor.$monitoringInstance)) {
			$tab_CompletionMonitor.$monitoringInstance = new $tab_CompletionMonitor();
		}
		return $tab_CompletionMonitor.$monitoringInstance;
	};
	global.tab.CompletionMonitor = $tab_CompletionMonitor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CompletionMonitorType
	var $tab_CompletionMonitorType = function() {
	};
	$tab_CompletionMonitorType.__typeName = 'tab.CompletionMonitorType';
	global.tab.CompletionMonitorType = $tab_CompletionMonitorType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CompletionToken
	var $tab_CompletionToken = function(type, onDispose) {
		this.$disposeAction = null;
		this.completionMonitorType = 0;
		this.completionMonitorType = type;
		this.$disposeAction = onDispose;
	};
	$tab_CompletionToken.__typeName = 'tab.CompletionToken';
	global.tab.CompletionToken = $tab_CompletionToken;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ConnectionMissingFileDialog
	var $tab_ConnectionMissingFileDialog = function(filename, connectionName, connectionClass) {
		this.$filename = null;
		this.$connectionName = null;
		this.$connectionClass = null;
		this.$missingDirectory = false;
		this.$onYes = null;
		this.$2$HandledField = null;
		$tab_BaseDisposableDialog.call(this);
		this.$filename = filename;
		this.$connectionName = connectionName;
		this.$connectionClass = connectionClass;
		this.$onYes = ss.mkdel(this, this.$showReplaceFileDialog);
		this.$missingDirectory = false;
		if (connectionClass === 'textscan') {
			var missingFilename = tab.DataConnectionUtils.stripDirectoryFromPath(filename);
			if (!ss.referenceEquals(missingFilename, filename)) {
				this.$missingDirectory = true;
			}
		}
	};
	$tab_ConnectionMissingFileDialog.__typeName = 'tab.ConnectionMissingFileDialog';
	global.tab.ConnectionMissingFileDialog = $tab_ConnectionMissingFileDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CreateSubscriptionFormat
	var $tab_CreateSubscriptionFormat = function(attachImage, attachPdf) {
		this.attachImage = false;
		this.attachPdf = false;
		this.attachImage = attachImage;
		this.attachPdf = attachPdf;
	};
	$tab_CreateSubscriptionFormat.__typeName = 'tab.CreateSubscriptionFormat';
	global.tab.CreateSubscriptionFormat = $tab_CreateSubscriptionFormat;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CreateSubscriptionsCheckboxOptions
	var $tab_CreateSubscriptionsCheckboxOptions = function(subscribeSelf, sendOnlyWhenDataPresent) {
		this.subscribeSelf = false;
		this.sendOnlyWhenDataPresent = false;
		this.subscribeSelf = subscribeSelf;
		this.sendOnlyWhenDataPresent = sendOnlyWhenDataPresent;
	};
	$tab_CreateSubscriptionsCheckboxOptions.__typeName = 'tab.CreateSubscriptionsCheckboxOptions';
	global.tab.CreateSubscriptionsCheckboxOptions = $tab_CreateSubscriptionsCheckboxOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Util.Fonts.CssPropertiesFormattingConverterObject
	var $tab_CssPropertiesFormattingConverterObject = function(cssProperties) {
		this.$cssProperties = null;
		this.$cssProperties = cssProperties;
	};
	$tab_CssPropertiesFormattingConverterObject.__typeName = 'tab.CssPropertiesFormattingConverterObject';
	global.tab.CssPropertiesFormattingConverterObject = $tab_CssPropertiesFormattingConverterObject;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CustomViewsComponent
	var $tab_CustomViewsComponent = function(props, context) {
		ss.makeGenericType(spiff.ReactSpiffAdapter$3, [$tab_CustomViewsView, $tab_CustomViewsProps, Object]).call(this, tab.ObjectRegistry.newView($tab_CustomViewsView).call(null, [props.viewModel]), props, context);
	};
	$tab_CustomViewsComponent.__typeName = 'tab.CustomViewsComponent';
	global.tab.CustomViewsComponent = $tab_CustomViewsComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CustomViewsProps
	var $tab_CustomViewsProps = function() {
		this.viewModel = null;
	};
	$tab_CustomViewsProps.__typeName = 'tab.CustomViewsProps';
	global.tab.CustomViewsProps = $tab_CustomViewsProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CustomViewsTemplate
	var $tab_CustomViewsTemplate = function() {
		this.customViewsArea = null;
		this.manageModeControlArea = null;
		this.myViewsArea = null;
		this.myViewsTitle = null;
		this.myViewsListArea = null;
		this.otherViewsTitle = null;
		this.otherViewsListArea = null;
		this.myViewsListWrapper = null;
		this.otherViewsListWrapper = null;
		this.saveViewArea = null;
		spiff.Template.call(this, $($tab_CustomViewsTemplate.$htmlTemplate));
		this.customViewsArea = this.domRoot;
		this.manageModeControlArea = this.getElementBySelector('.tab-cv-manageModeControls');
		this.myViewsArea = this.getElementBySelector('.tab-cv-myViews');
		this.myViewsListArea = this.getElementBySelector('.tab-cv-myViews .tab-cv-viewsList');
		this.myViewsTitle = this.getElementBySelector('.tab-cv-myViews .tab-toolbarDialogTitle');
		this.otherViewsTitle = this.getElementBySelector('.tab-cv-otherViews .tab-toolbarDialogTitle');
		this.otherViewsListArea = this.getElementBySelector('.tab-cv-otherViews .tab-cv-viewsList');
		this.myViewsListWrapper = this.getElementBySelector('.tab-cv-myViews .tab-cv-listWrapper');
		this.otherViewsListWrapper = this.getElementBySelector('.tab-cv-otherViews .tab-cv-listWrapper');
		this.saveViewArea = this.getElementBySelector('.tab-customViews-saveView');
	};
	$tab_CustomViewsTemplate.__typeName = 'tab.CustomViewsTemplate';
	global.tab.CustomViewsTemplate = $tab_CustomViewsTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CustomViewsView
	var $tab_CustomViewsView = function(viewModel) {
		this.$viewNameInput = null;
		this.$saveButton = null;
		this.$publicCustomViewCheckbox = null;
		this.$defaultCustomViewCheckbox = null;
		this.$enterManageModeButton = null;
		this.$exitManageModeButton = null;
		this.$listItemElementMap = {};
		this.$originalViewListItemElement = null;
		this.$customizedViewBeingRenamed = null;
		this.$renameTextBox = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_CustomViewsViewModel]).call(this, viewModel, new $tab_CustomViewsTemplate());
		this.$buildCustomViewsContent();
		this.get_viewModel().add_customViewListChanged(ss.mkdel(this, this.$onViewListChanged));
		this.get_viewModel().updateCustomizedViews(null, null);
	};
	$tab_CustomViewsView.__typeName = 'tab.CustomViewsView';
	global.tab.CustomViewsView = $tab_CustomViewsView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.CustomViewsViewModel
	var $tab_CustomViewsViewModel = function() {
		this.$myCustomViews = [];
		this.$otherCustomViews = [];
		this.$mode = $tab_CustomViewsViewModel.modeSelect;
		this.$currentCustomView = null;
		this.$currentCustomViewName = null;
		this.$defaultCustomViewId = null;
		this.$destroyInProgress = false;
		this.$requireResetView = false;
		this.$2$ModeChangedField = null;
		this.$2$CustomViewListChangedField = null;
		this.$2$DefaultCustomViewChangedField = null;
		this.$2$CustomViewDestroyedField = null;
		this.$2$DirtyChangedField = null;
		this.$2$HideDialogRequestedField = null;
		spiff.BaseViewModel.call(this);
		if (tsConfig.allow_custom_views) {
			tab.StartupUtils.callOnceAfterInitialBootstrap(ss.mkdel(this, function() {
				this.$loadCustomizedViews(null, null);
			}));
			tab.DashboardModel.add_modifiedSheetsChanged(ss.mkdel(this, this.onDirtyChanged));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				tab.DashboardModel.remove_modifiedSheetsChanged(ss.mkdel(this, this.onDirtyChanged));
			})));
		}
	};
	$tab_CustomViewsViewModel.__typeName = 'tab.CustomViewsViewModel';
	$tab_CustomViewsViewModel.$compareCustomizedViews = function CustomViewsViewModel$CompareCustomizedViews(left, right) {
		return ss.compareStrings(left.name, right.name, true);
	};
	global.tab.CustomViewsViewModel = $tab_CustomViewsViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DashboardAuthoringButtonTelemetry
	var $tab_DashboardAuthoringButtonTelemetry = function() {
	};
	$tab_DashboardAuthoringButtonTelemetry.__typeName = 'tab.DashboardAuthoringButtonTelemetry';
	$tab_DashboardAuthoringButtonTelemetry.logNavigateButtonByClickEvent = function DashboardAuthoringButtonTelemetry$LogNavigateButtonByClickEvent(isAuthoring, isAltClick) {
		$tab_DashboardAuthoringButtonTelemetry.$executeTelemetry($tab_DashboardAuthoringButtonTelemetry.$buttonNavTelemetry, ss.mkdict(['AuthoringMode', (isAuthoring ? $tab_DashboardAuthoringButtonTelemetry.$authoringMode : $tab_DashboardAuthoringButtonTelemetry.$viewMode), 'ClickType', (isAltClick ? $tab_DashboardAuthoringButtonTelemetry.$altClick : $tab_DashboardAuthoringButtonTelemetry.$singleClick)]));
	};
	$tab_DashboardAuthoringButtonTelemetry.logNavigateButtonByKeyboardEvent = function DashboardAuthoringButtonTelemetry$LogNavigateButtonByKeyboardEvent(isAuthoring) {
		$tab_DashboardAuthoringButtonTelemetry.$executeTelemetry($tab_DashboardAuthoringButtonTelemetry.$buttonNavTelemetry, ss.mkdict(['AuthoringMode', (isAuthoring ? $tab_DashboardAuthoringButtonTelemetry.$authoringMode : $tab_DashboardAuthoringButtonTelemetry.$viewMode), 'ClickType', $tab_DashboardAuthoringButtonTelemetry.$enterSpaceKey]));
	};
	$tab_DashboardAuthoringButtonTelemetry.logButtonActionInvoked = function DashboardAuthoringButtonTelemetry$LogButtonActionInvoked(isAuthoring, clickType, buttonType, buttonBehavior) {
		$tab_DashboardAuthoringButtonTelemetry.$executeTelemetry($tab_DashboardAuthoringButtonTelemetry.$buttonActionTelemetry, ss.mkdict(['AuthoringMode', (isAuthoring ? $tab_DashboardAuthoringButtonTelemetry.$authoringMode : $tab_DashboardAuthoringButtonTelemetry.$viewMode), 'ClickType', clickType, 'ButtonType', buttonType, 'ButtonBehavior', buttonBehavior]));
	};
	$tab_DashboardAuthoringButtonTelemetry.logOpenButtonConfigDialogInvoked = function DashboardAuthoringButtonTelemetry$LogOpenButtonConfigDialogInvoked(clickType, buttonType, buttonBehavior) {
		$tab_DashboardAuthoringButtonTelemetry.$executeTelemetry($tab_DashboardAuthoringButtonTelemetry.$openButtonConfigDialogTelemetry, ss.mkdict(['ClickType', clickType, 'ButtonType', buttonType, 'ButtonBehavior', buttonBehavior]));
	};
	$tab_DashboardAuthoringButtonTelemetry.logOpenButtonPermissionsErrorDialogInvoked = function DashboardAuthoringButtonTelemetry$LogOpenButtonPermissionsErrorDialogInvoked(clickType, buttonType, buttonBehavior) {
		$tab_DashboardAuthoringButtonTelemetry.$executeTelemetry($tab_DashboardAuthoringButtonTelemetry.$openButtonPermissionsErrorDialogTelemetry, ss.mkdict(['ClickType', clickType, 'ButtonType', buttonType, 'ButtonBehavior', buttonBehavior]));
	};
	$tab_DashboardAuthoringButtonTelemetry.$executeTelemetry = function DashboardAuthoringButtonTelemetry$ExecuteTelemetry(type, nameValuePairs) {
		tab.OnlineAnalyticsClient.logEvent(type, nameValuePairs);
	};
	global.tab.DashboardAuthoringButtonTelemetry = $tab_DashboardAuthoringButtonTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DashboardAuthoringObjectsPaneTelemetry
	var $tab_DashboardAuthoringObjectsPaneTelemetry = function() {
	};
	$tab_DashboardAuthoringObjectsPaneTelemetry.__typeName = 'tab.DashboardAuthoringObjectsPaneTelemetry';
	$tab_DashboardAuthoringObjectsPaneTelemetry.logAddNewObjectToDashboardEvent = function DashboardAuthoringObjectsPaneTelemetry$LogAddNewObjectToDashboardEvent(isDragDrop, isTiled, zoneType) {
		tab.OnlineAnalyticsClient.logEvent($tab_DashboardAuthoringObjectsPaneTelemetry.$dashboardAuthoringAddNewObjectToDashboardEvent, ss.mkdict([$tab_DashboardAuthoringObjectsPaneTelemetry.$methodAddedColumnName, (isDragDrop ? 'dragDrop' : 'doubleClick'), $tab_DashboardAuthoringObjectsPaneTelemetry.$isTiledColumnName, isTiled, $tab_DashboardAuthoringObjectsPaneTelemetry.$addedObjectTypeColumnName, zoneType]));
	};
	global.tab.DashboardAuthoringObjectsPaneTelemetry = $tab_DashboardAuthoringObjectsPaneTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DashboardLoadCompleteEventProperties
	var $tab_DashboardLoadCompleteEventProperties = function() {
	};
	$tab_DashboardLoadCompleteEventProperties.__typeName = 'tab.DashboardLoadCompleteEventProperties';
	global.tab.DashboardLoadCompleteEventProperties = $tab_DashboardLoadCompleteEventProperties;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DashboardLoadCompleteTelemetry
	var $tab_DashboardLoadCompleteTelemetry = function() {
	};
	$tab_DashboardLoadCompleteTelemetry.__typeName = 'tab.DashboardLoadCompleteTelemetry';
	$tab_DashboardLoadCompleteTelemetry.get_$telemetryEnabled = function DashboardLoadCompleteTelemetry$get_TelemetryEnabled() {
		return tab.OnlineAnalyticsClient.get_telemetryEnabled() && tab.FeatureFlags.isEnabled('DashboardLoadCompleteTelemetry');
	};
	$tab_DashboardLoadCompleteTelemetry.track = function DashboardLoadCompleteTelemetry$Track(model) {
		if (ss.isValue(model) && $tab_DashboardLoadCompleteTelemetry.get_$telemetryEnabled()) {
			tab.ModuleManager.load(tab.IVizZoneModule).call(null, []).done(function(module) {
				var properties = {};
				$tab_DashboardLoadCompleteTelemetry.$appendDashboardProperties(model, properties);
				$tab_DashboardLoadCompleteTelemetry.$appendVizProperties(model, module, properties);
				tab.OnlineAnalyticsClient.logEvent($tab_DashboardLoadCompleteEventProperties.type, properties);
			});
		}
	};
	$tab_DashboardLoadCompleteTelemetry.$appendDashboardProperties = function DashboardLoadCompleteTelemetry$AppendDashboardProperties(model, props) {
		props[$tab_DashboardLoadCompleteEventProperties.isAutoGenerated] = $tab_DashboardLoadCompleteTelemetry.$isAutoGenerated(model);
		props[$tab_DashboardLoadCompleteEventProperties.currentDeviceLayout] = model.get_currentDeviceLayout();
		props[$tab_DashboardLoadCompleteEventProperties.detectedDeviceType] = tabBootstrap.ViewerBootstrap.get_instance().get_deviceDetector().get_deviceType();
		if (ss.isNullOrUndefined(model.get_dashboardSize())) {
			return;
		}
		props[$tab_DashboardLoadCompleteEventProperties.dashboardWidth] = model.get_dashboardSize().w;
		props[$tab_DashboardLoadCompleteEventProperties.dashboardHeight] = model.get_dashboardSize().h;
	};
	$tab_DashboardLoadCompleteTelemetry.$appendVizProperties = function DashboardLoadCompleteTelemetry$AppendVizProperties(model, module, props) {
		var visualModels = tab.ModelUtils.getVisualModelsFromDashboard(model);
		var bothScrollableVizCount = 0;
		var xScrollableVizCount = 0;
		var yScrollableVizCount = 0;
		var pannableMapCount = 0;
		var $t1 = new ss.ObjectEnumerator(visualModels);
		try {
			while ($t1.moveNext()) {
				var keyValuePair = $t1.current();
				var visualModel = keyValuePair.value;
				var scrollCapabilities = module.computeVizScrollCapabilities(visualModel);
				if (tab.ScrollCapabilitiesUtil.hasCapabilities(scrollCapabilities, 3)) {
					bothScrollableVizCount += 1;
				}
				else if (tab.ScrollCapabilitiesUtil.hasCapabilities(scrollCapabilities, 1)) {
					xScrollableVizCount += 1;
				}
				else if (tab.ScrollCapabilitiesUtil.hasCapabilities(scrollCapabilities, 2)) {
					yScrollableVizCount += 1;
				}
				if ($tab_DashboardLoadCompleteTelemetry.$isPannableMap(visualModel)) {
					pannableMapCount += 1;
				}
			}
		}
		finally {
			$t1.dispose();
		}
		props[$tab_DashboardLoadCompleteEventProperties.bothScrollableVizCount] = bothScrollableVizCount;
		props[$tab_DashboardLoadCompleteEventProperties.filterZonesCount] = $tab_DashboardLoadCompleteTelemetry.$countFilterZones(model);
		props[$tab_DashboardLoadCompleteEventProperties.floatingZonesCount] = $tab_DashboardLoadCompleteTelemetry.$countFloatingZones(model);
		props[$tab_DashboardLoadCompleteEventProperties.highlighterZonesCount] = $tab_DashboardLoadCompleteTelemetry.$countHighlighterZones(model);
		props[$tab_DashboardLoadCompleteEventProperties.imageZonesCount] = $tab_DashboardLoadCompleteTelemetry.$countImageZones(model);
		props[$tab_DashboardLoadCompleteEventProperties.legendZonesCount] = $tab_DashboardLoadCompleteTelemetry.$countLegendZones(model);
		props[$tab_DashboardLoadCompleteEventProperties.pannableMapCount] = pannableMapCount;
		props[$tab_DashboardLoadCompleteEventProperties.parameterZonesCount] = $tab_DashboardLoadCompleteTelemetry.$countParameterZones(model);
		props[$tab_DashboardLoadCompleteEventProperties.textZonesCount] = $tab_DashboardLoadCompleteTelemetry.$countTextZones(model);
		props[$tab_DashboardLoadCompleteEventProperties.xScrollableVizCount] = xScrollableVizCount;
		props[$tab_DashboardLoadCompleteEventProperties.yScrollableVizCount] = yScrollableVizCount;
		props[$tab_DashboardLoadCompleteEventProperties.vizCount] = ss.getKeyCount(visualModels);
		props[$tab_DashboardLoadCompleteEventProperties.viewId] = tsConfig.current_view_id;
		props[$tab_DashboardLoadCompleteEventProperties.sheetType] = tsConfig.current_sheet_type;
	};
	$tab_DashboardLoadCompleteTelemetry.$isPannableMap = function DashboardLoadCompleteTelemetry$IsPannableMap(model) {
		return model.get_isMap() && model.get_vizNavigationSetting() !== 'fixed';
	};
	$tab_DashboardLoadCompleteTelemetry.$countImageZones = function DashboardLoadCompleteTelemetry$CountImageZones(model) {
		return tab.ListExtensions.where(tab.ZoneModel).call(null, model.zonesModel.get_zoneModels(), function(z) {
			return z.get_zoneCommonModel().get_zoneType() === 'bitmap';
		}).length;
	};
	$tab_DashboardLoadCompleteTelemetry.$countLegendZones = function DashboardLoadCompleteTelemetry$CountLegendZones(model) {
		return tab.ListExtensions.where(tab.ZoneModel).call(null, model.zonesModel.get_zoneModels(), function(z) {
			return z.get_zoneCommonModel().get_zoneType() === 'color' || z.get_zoneCommonModel().get_zoneType() === 'map' || z.get_zoneCommonModel().get_zoneType() === 'shape' || z.get_zoneCommonModel().get_zoneType() === 'size';
		}).length;
	};
	$tab_DashboardLoadCompleteTelemetry.$countFilterZones = function DashboardLoadCompleteTelemetry$CountFilterZones(model) {
		return tab.ListExtensions.where(tab.ZoneModel).call(null, model.zonesModel.get_zoneModels(), function(z) {
			return z.get_zoneCommonModel().get_zoneType() === 'filter';
		}).length;
	};
	$tab_DashboardLoadCompleteTelemetry.$countFloatingZones = function DashboardLoadCompleteTelemetry$CountFloatingZones(model) {
		return tab.ListExtensions.where(tab.ZoneModel).call(null, model.zonesModel.get_zoneModels(), function(z) {
			return z.get_isFloating();
		}).length;
	};
	$tab_DashboardLoadCompleteTelemetry.$countHighlighterZones = function DashboardLoadCompleteTelemetry$CountHighlighterZones(model) {
		return tab.ListExtensions.where(tab.ZoneModel).call(null, model.zonesModel.get_zoneModels(), function(z) {
			return z.get_zoneCommonModel().get_zoneType() === 'highlighter';
		}).length;
	};
	$tab_DashboardLoadCompleteTelemetry.$countParameterZones = function DashboardLoadCompleteTelemetry$CountParameterZones(model) {
		return tab.ListExtensions.where(tab.ZoneModel).call(null, model.zonesModel.get_zoneModels(), function(z) {
			return z.get_zoneCommonModel().get_zoneType() === 'paramctrl';
		}).length;
	};
	$tab_DashboardLoadCompleteTelemetry.$countTextZones = function DashboardLoadCompleteTelemetry$CountTextZones(model) {
		return tab.ListExtensions.where(tab.ZoneModel).call(null, model.zonesModel.get_zoneModels(), function(z) {
			return z.get_zoneCommonModel().get_zoneType() === 'text';
		}).length;
	};
	$tab_DashboardLoadCompleteTelemetry.$isAutoGenerated = function DashboardLoadCompleteTelemetry$IsAutoGenerated(model) {
		return tsConfig.current_sheet_type !== 'story' && model.get_isDashboard() && model.get_currentDeviceLayout() !== 'default' && !ss.isNullOrUndefined(model.get_autoGeneratedDeviceLayouts()) && ss.contains(model.get_autoGeneratedDeviceLayouts(), model.get_currentDeviceLayout());
	};
	global.tab.DashboardLoadCompleteTelemetry = $tab_DashboardLoadCompleteTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DashboardTemplate
	var $tab_DashboardTemplate = function(rawHtml, hasGutter) {
		this.dashboardNode = null;
		spiff.Template.call(this, $(rawHtml));
		if (hasGutter) {
			this.dashboardNode = this.getElementBySelector('.tab-dashboard');
		}
		else {
			this.dashboardNode = this.domRoot;
		}
	};
	$tab_DashboardTemplate.__typeName = 'tab.DashboardTemplate';
	$tab_DashboardTemplate.newDashboardTemplate = function DashboardTemplate$NewDashboardTemplate(hasGutter) {
		var rawHtml = (hasGutter ? $tab_DashboardTemplate.$htmlTemplateGutter : $tab_DashboardTemplate.$htmlTemplateNoGutter);
		return new $tab_DashboardTemplate(rawHtml, hasGutter);
	};
	global.tab.DashboardTemplate = $tab_DashboardTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DashboardView
	var $tab_DashboardView = function(viewModel) {
		this.$viewModel$1 = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_DashboardViewModel]).call(this, viewModel, $tab_DashboardTemplate.newDashboardTemplate(viewModel.get_hasGutter()));
		this.$viewModel$1 = viewModel;
		this.$viewModel$1.add_formatsChanged(ss.mkdel(this, this.$handleFormatsChanged));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel$1.remove_formatsChanged(ss.mkdel(this, this.$handleFormatsChanged));
		})));
		this.$viewModel$1.add_newZone(ss.mkdel(this, this.$handleNewZone));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel$1.remove_newZone(ss.mkdel(this, this.$handleNewZone));
		})));
		this.$viewModel$1.add_vizRebuildStart(ss.mkdel(this, this.$putUpFakeDom));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel$1.remove_vizRebuildStart(ss.mkdel(this, this.$putUpFakeDom));
		})));
		this.$viewModel$1.add_sizeChanged(ss.mkdel(this, this.$handleSizeChanged));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$viewModel$1.remove_sizeChanged(ss.mkdel(this, this.$handleSizeChanged));
		})));
	};
	$tab_DashboardView.__typeName = 'tab.DashboardView';
	$tab_DashboardView.findDashboard = function DashboardView$FindDashboard() {
		return $('.tab-dashboard');
	};
	$tab_DashboardView.isDashboardNode = function DashboardView$IsDashboardNode(element) {
		return $(element).hasClass('tab-dashboard');
	};
	$tab_DashboardView.canMultiSelectZones = function DashboardView$CanMultiSelectZones(e) {
		return (e.shiftKey || e.ctrlKey) && e.get_IsLeftMouseEvent();
	};
	$tab_DashboardView.uniquefyClonedFilterRadioElements = function DashboardView$UniquefyClonedFilterRadioElements(cloneRoot) {
		var clonedFilterRadioElements = cloneRoot.find('input:radio');
		for (var ii = 0; ii < clonedFilterRadioElements.length; ++ii) {
			var clonedFilterRadioElement = clonedFilterRadioElements[ii];
			var radioElementName = ss.coalesce(clonedFilterRadioElement.getAttribute('name'), '');
			radioElementName += '_%%%CLONE%%%';
			clonedFilterRadioElement.setAttribute('name', radioElementName);
		}
	};
	global.tab.DashboardView = $tab_DashboardView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DashboardViewModel
	var $tab_DashboardViewModel = function(dashboardModel) {
		this.$zoneViewModels = {};
		this.$dashboardSizeOverride = null;
		this.viewControllersBySheet = {};
		this.$2$NewZoneField = null;
		this.$2$VizRebuildStartField = null;
		this.$2$SizeChangedField = null;
		this.$2$PortSizeChangedField = null;
		this.$2$FormatsChangedField = null;
		this.viewControllers = null;
		this.dashboardModel = null;
		this.gutter = null;
		spiff.BaseViewModel.call(this);
		this.gutter = tabBootstrap.VizLayoutConstants.get_authoringGutter();
		this.dashboardModel = dashboardModel;
		this.dashboardModel.zonesModel.add_newZone(ss.mkdel(this, this.$handleNewZone));
		this.dashboardModel.add_newDashboard(ss.mkdel(this, this.$handleNewDashboard));
		this.dashboardModel.add_activeZoneChanged(ss.mkdel(this, this.$handleActiveZoneChanged));
		this.dashboardModel.add_readyZoneChanged(ss.mkdel(this, this.$handleReadyZoneChanged));
		tab.SheetSession.add_sheetDataChanged(ss.mkdel(this, this.$refreshView));
		tab.BaseSession.add_stateChanged(ss.mkdel(this, this.$onStateChanged));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			tab.BaseSession.remove_stateChanged(ss.mkdel(this, this.$onStateChanged));
		})));
		this.disposables.add$1(new tab.CallOnDispose(tab.StyleUtil.clearDefaultStyleSheet));
		this.dashboardModel.add_renderModeChanged(ss.mkdel(this, this.$handleRenderModeChanged));
		this.dashboardModel.add_sizeChanged(ss.mkdel(this, this.$onSizeChanged));
		this.dashboardModel.add_formatsChanged(ss.mkdel(this, this.$onFormatsChanged));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.dashboardModel.remove_renderModeChanged(ss.mkdel(this, this.$handleRenderModeChanged));
			this.dashboardModel.remove_sizeChanged(ss.mkdel(this, this.$onSizeChanged));
			this.dashboardModel.remove_formatsChanged(ss.mkdel(this, this.$onFormatsChanged));
		})));
		this.viewControllers = [];
		this.$addNewZones();
	};
	$tab_DashboardViewModel.__typeName = 'tab.DashboardViewModel';
	$tab_DashboardViewModel.new$1 = function DashboardViewModel$New(dashboardModel) {
		return new $tab_DashboardViewModel(dashboardModel);
	};
	global.tab.DashboardViewModel = $tab_DashboardViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertCreateComponent
	var $tab_DataAlertCreateComponent = function(props, context) {
		React.Component.call(this, props, context);
	};
	$tab_DataAlertCreateComponent.__typeName = 'tab.DataAlertCreateComponent';
	global.tab.DataAlertCreateComponent = $tab_DataAlertCreateComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertCreatePersister
	var $tab_DataAlertCreatePersister = function() {
		$tab_DataAlertPersisterBase.call(this);
		this.successMessage = tab.Strings.DataAlertCreateSuccess;
		this.failureMessage = tab.Strings.DataAlertCreateFailure;
	};
	$tab_DataAlertCreatePersister.__typeName = 'tab.DataAlertCreatePersister';
	$tab_DataAlertCreatePersister.new$1 = function DataAlertCreatePersister$New() {
		return new $tab_DataAlertCreatePersister();
	};
	global.tab.DataAlertCreatePersister = $tab_DataAlertCreatePersister;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertCreatePreparer
	var $tab_DataAlertCreatePreparer = function(alertDialogPm) {
		this.$alertDialogPresModel = null;
		$tab_DataAlertPreparerBase.call(this);
		this.$alertDialogPresModel = alertDialogPm;
	};
	$tab_DataAlertCreatePreparer.__typeName = 'tab.DataAlertCreatePreparer';
	$tab_DataAlertCreatePreparer.new$1 = function DataAlertCreatePreparer$New(alertDialogPm) {
		return new $tab_DataAlertCreatePreparer(alertDialogPm);
	};
	global.tab.DataAlertCreatePreparer = $tab_DataAlertCreatePreparer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertCreateViewModel
	var $tab_DataAlertCreateViewModel = function(alertPreparer, alertPersister) {
		this.$dataAlert = null;
		this.$alertPreparer = null;
		this.$alertPersister = null;
		this.$updateReferenceLineDebouncer = null;
		this.$submitButtonPressed = false;
		this.$readyForInteraction = false;
		this.$email = '';
		this.$initialRecipients = null;
		this.users = null;
		this.$3$EmptySearchField = false;
		this.$3$NoResultsField = false;
		ss.makeGenericType(spiff.BaseComponentViewModel$1, [Object]).call(this);
		this.set_emptySearch(true);
		if (tsConfig.is_guest) {
			return;
		}
		this.$alertPreparer = alertPreparer;
		this.$alertPersister = alertPersister;
		this.$setupRecipientsList();
		this.$setupDataAlertPreparerEvents();
		this.refresh();
	};
	$tab_DataAlertCreateViewModel.__typeName = 'tab.DataAlertCreateViewModel';
	$tab_DataAlertCreateViewModel.new$1 = function DataAlertCreateViewModel$New(alertPreparer, alertPersister) {
		return new $tab_DataAlertCreateViewModel(alertPreparer, alertPersister);
	};
	global.tab.DataAlertCreateViewModel = $tab_DataAlertCreateViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertDialogViewModel
	var $tab_DataAlertDialogViewModel = function(model, editDataAlertId, isResuming) {
		this.$createViewModel = null;
		this.$errorViewModel = null;
		this.$alertPersister = null;
		this.$alertPreparer = null;
		this.$editDataAlertId = null;
		this.$isDataAlertResume = false;
		this.$model = null;
		this.$isShown = false;
		this.$3$HideDialogRequestedField = null;
		this.$3$DialogHiddenField = null;
		this.$3$AlertDeletedFromErrorDialogField = null;
		this.dialogPosition = null;
		this.$3$DialogHostViewModelField = null;
		this.$3$InlineEditField = false;
		ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]).call(this);
		this.$model = model;
		this.$editDataAlertId = editDataAlertId;
		this.$isDataAlertResume = tab.FeatureFlags.isEnabled('SuspendDataAlerts') && isResuming;
		model.add_showOrUpdateDialog(ss.mkdel(this, this.$showOrUpdateDialog));
		this.$setupView();
		this.$showOrUpdateDialog();
	};
	$tab_DataAlertDialogViewModel.__typeName = 'tab.DataAlertDialogViewModel';
	$tab_DataAlertDialogViewModel.get_instance = function DataAlertDialogViewModel$get_Instance() {
		return $tab_DataAlertDialogViewModel.$instance;
	};
	$tab_DataAlertDialogViewModel.new$1 = function DataAlertDialogViewModel$New(model, editDataAlertId, isResuming) {
		return new $tab_DataAlertDialogViewModel(model, editDataAlertId, isResuming);
	};
	$tab_DataAlertDialogViewModel.handleDataAlertClick = function DataAlertDialogViewModel$HandleDataAlertClick(alertNotAllowedReasonFromPlatform) {
		$tab_DataAlertTelemetry.logAlertToolbarButtonClicked();
		if (!ss.isNullOrEmptyString(alertNotAllowedReasonFromPlatform)) {
			$tab_DataAlertDialogViewModel.showNotificationAndLogError(alertNotAllowedReasonFromPlatform, $tab_DataAlertTelemetryConstants.platformPropagatedErrorType);
			return;
		}
		tab.DataAlertClientCommands.newDataAlert(function() {
			$tab_DataAlertDialogViewModel.showNotificationAndLogError(tab.Strings.DataAlertInitFailure, $tab_DataAlertTelemetryConstants.genericDataAlertInitErrorType);
		});
	};
	$tab_DataAlertDialogViewModel.showNotificationAndLogError = function DataAlertDialogViewModel$ShowNotificationAndLogError(errorMessage, errorMessageType) {
		$tab_DataAlertTelemetry.logAlertToolbarButtonError(errorMessageType, errorMessage);
		$tab_NotificationViewModel.showNotification(errorMessage, null);
	};
	global.tab.DataAlertDialogViewModel = $tab_DataAlertDialogViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertEditPersister
	var $tab_DataAlertEditPersister = function(editAlertId) {
		this.$editAlertId = '';
		$tab_DataAlertPersisterBase.call(this);
		this.$editAlertId = editAlertId;
		this.successMessage = tab.Strings.DataAlertUpdateSuccess;
		this.failureMessage = tab.Strings.DataAlertUpdateFailure;
	};
	$tab_DataAlertEditPersister.__typeName = 'tab.DataAlertEditPersister';
	$tab_DataAlertEditPersister.new$1 = function DataAlertEditPersister$New(editAlertId) {
		return new $tab_DataAlertEditPersister(editAlertId);
	};
	$tab_DataAlertEditPersister.getDifferenceInUserLists = function DataAlertEditPersister$GetDifferenceInUserLists(list1, list2) {
		var addedIds = _.difference(list2.map(function(u) {
			return u.id;
		}), list1.map(function(u1) {
			return u1.id;
		}));
		var addedUsers = [];
		for (var $t1 = 0; $t1 < addedIds.length; $t1++) {
			var id = { $: addedIds[$t1] };
			ss.arrayAddRange(addedUsers, list2.filter(ss.mkdel({ id: id }, function(u2) {
				return u2.id === this.id.$;
			})));
		}
		return addedUsers;
	};
	$tab_DataAlertEditPersister.getOldUsersToRemove = function DataAlertEditPersister$GetOldUsersToRemove(initialUsers, newUsers) {
		return $tab_DataAlertEditPersister.getDifferenceInUserLists(newUsers, initialUsers);
	};
	global.tab.DataAlertEditPersister = $tab_DataAlertEditPersister;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertEditPreparer
	var $tab_DataAlertEditPreparer = function(alertDialogPm, editAlertId) {
		this.$editAlertId = null;
		this.$dataAlertLoaded = false;
		this.$dataAlertRecipientsLoaded = false;
		$tab_DataAlertPreparerBase.call(this);
		this.dataAlert = new tab.DataAlert.$ctor1(alertDialogPm);
		this.$editAlertId = editAlertId;
	};
	$tab_DataAlertEditPreparer.__typeName = 'tab.DataAlertEditPreparer';
	$tab_DataAlertEditPreparer.new$1 = function DataAlertEditPreparer$New(alertDialogPm, editAlertId) {
		return new $tab_DataAlertEditPreparer(alertDialogPm, editAlertId);
	};
	global.tab.DataAlertEditPreparer = $tab_DataAlertEditPreparer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertEditUrlHelper
	var $tab_DataAlertEditUrlHelper = function() {
	};
	$tab_DataAlertEditUrlHelper.__typeName = 'tab.DataAlertEditUrlHelper';
	$tab_DataAlertEditUrlHelper.isDataAlertEdit = function DataAlertEditUrlHelper$IsDataAlertEdit() {
		var editAlertId = $tab_DataAlertEditUrlHelper.editDataAlertId();
		return !ss.isNullOrEmptyString(editAlertId);
	};
	$tab_DataAlertEditUrlHelper.editDataAlertId = function DataAlertEditUrlHelper$EditDataAlertId() {
		var id = tabBootstrap.UrlLocationHashManager.get_urlLocationSearchParams()[$tab_DataAlertEditUrlHelper.editDataAlertUrlParam];
		return (ss.isNullOrEmptyString(id) ? '' : id);
	};
	$tab_DataAlertEditUrlHelper.isResumeDataAlert = function DataAlertEditUrlHelper$IsResumeDataAlert() {
		var resume = tabBootstrap.UrlLocationHashManager.get_urlLocationSearchParams()[$tab_DataAlertEditUrlHelper.resumeDataAlertUrlParam];
		return !ss.isNullOrEmptyString(resume) && ss.equalsT(resume, 'true');
	};
	global.tab.DataAlertEditUrlHelper = $tab_DataAlertEditUrlHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertErrorComponent
	var $tab_DataAlertErrorComponent = function(props) {
		spiff.PureRenderComponent.call(this, props);
	};
	$tab_DataAlertErrorComponent.__typeName = 'tab.DataAlertErrorComponent';
	global.tab.DataAlertErrorComponent = $tab_DataAlertErrorComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertErrorViewModel
	var $tab_DataAlertErrorViewModel = function(errorText, alertId, isFromEditOrResume) {
		this.$errorText = null;
		this.$alertId = null;
		this.$alertSubject = null;
		this.$canDelete = false;
		this.$3$OkButtonClickedField = null;
		this.$3$AlertDeletedFromErrorDialogField = null;
		ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]).call(this);
		this.$errorText = errorText;
		this.$alertId = alertId;
		this.$canDelete = isFromEditOrResume;
		this.$loadAlertSubject();
	};
	$tab_DataAlertErrorViewModel.__typeName = 'tab.DataAlertErrorViewModel';
	global.tab.DataAlertErrorViewModel = $tab_DataAlertErrorViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertPageReloadHandler
	var $tab_DataAlertPageReloadHandler = function() {
	};
	$tab_DataAlertPageReloadHandler.__typeName = 'tab.DataAlertPageReloadHandler';
	$tab_DataAlertPageReloadHandler.removeLeftoverRefline = function DataAlertPageReloadHandler$RemoveLeftoverRefline(model) {
		var presModel = model.pm;
		if (ss.isNullOrUndefined(presModel)) {
			return;
		}
		var rightAreaDrawerVm = $tab_Application.get_instance().get_rightAreaDrawerViewModel();
		var reloadedWhileInlineEditing = ss.isNullOrEmptyString($tab_DataAlertEditUrlHelper.editDataAlertId()) && presModel.dataAlertDialogMode === 'edit' && !rightAreaDrawerVm.get_isOpen();
		var reloadedWhileShowingAlertDetails = presModel.dataAlertDialogMode === 'background';
		if (!ss.isNullOrEmptyString(presModel.referenceLineId) && !rightAreaDrawerVm.get_isOpen() && (reloadedWhileInlineEditing || reloadedWhileShowingAlertDetails)) {
			var $t1 = new tab.CloseDataAlertDialogCmd();
			$t1.set_noExceptionDialog(true);
			$t1.invoke();
		}
	};
	global.tab.DataAlertPageReloadHandler = $tab_DataAlertPageReloadHandler;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertPersisterBase
	var $tab_DataAlertPersisterBase = function() {
		this.successMessage = null;
		this.failureMessage = null;
		this.$1$PersistSuccessField = null;
		this.$1$PersistFailureField = null;
	};
	$tab_DataAlertPersisterBase.__typeName = 'tab.DataAlertPersisterBase';
	global.tab.DataAlertPersisterBase = $tab_DataAlertPersisterBase;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertPreparerBase
	var $tab_DataAlertPreparerBase = function() {
		this.dataAlert = null;
		this.$1$DataAlertPreparedField = null;
		this.$1$DataAlertPrepareFailedField = null;
	};
	$tab_DataAlertPreparerBase.__typeName = 'tab.DataAlertPreparerBase';
	global.tab.DataAlertPreparerBase = $tab_DataAlertPreparerBase;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertTelemetry
	var $tab_DataAlertTelemetry = function() {
	};
	$tab_DataAlertTelemetry.__typeName = 'tab.DataAlertTelemetry';
	$tab_DataAlertTelemetry.logAlertToolbarButtonClicked = function DataAlertTelemetry$LogAlertToolbarButtonClicked() {
		tab.OnlineAnalyticsClient.logEvent($tab_DataAlertTelemetryConstants.warningToastTelemetryEventName, ss.mkdict([$tab_DataAlertTelemetryConstants.errorMessageTypeProperty, $tab_DataAlertTelemetryConstants.alertButtonClickedType]));
	};
	$tab_DataAlertTelemetry.logAlertToolbarButtonError = function DataAlertTelemetry$LogAlertToolbarButtonError(errorMessageType, errorMessage) {
		tab.OnlineAnalyticsClient.logEvent($tab_DataAlertTelemetryConstants.warningToastTelemetryEventName, ss.mkdict([$tab_DataAlertTelemetryConstants.errorMessageTypeProperty, errorMessageType, $tab_DataAlertTelemetryConstants.errorMessageStringProperty, errorMessage]));
	};
	$tab_DataAlertTelemetry.$logSubmitOrCloseButtonClickedEvent = function DataAlertTelemetry$LogSubmitOrCloseButtonClickedEvent(telemetryProperties) {
		tab.OnlineAnalyticsClient.logEvent($tab_DataAlertTelemetryConstants.closeOrSubmitButtonClickedEventName, telemetryProperties);
	};
	global.tab.DataAlertTelemetry = $tab_DataAlertTelemetry;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataAlertTelemetryConstants
	var $tab_DataAlertTelemetryConstants = function() {
	};
	$tab_DataAlertTelemetryConstants.__typeName = 'tab.DataAlertTelemetryConstants';
	global.tab.DataAlertTelemetryConstants = $tab_DataAlertTelemetryConstants;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.DataHighlighterView
	var $tab_DataHighlighterView = function(vm, dataHighlighterViewTemplate) {
		this.dataHighlighterViewModel = null;
		this.$compositeSearchWidget = null;
		this.$dataHighlighterContainer = null;
		this.dataHighlighterContentElement = null;
		this.dataHighlighterViewRootElement = null;
		this.zoneTitleRegionRootElement = null;
		this.$suggestionsListItemViewModels = null;
		this.queryDelayTimer = null;
		this.currentListPopulationMode = 0;
		this.notShownResultsListItemIsVisible = false;
		this.$selectTextOnMouseUp = false;
		this.$mouseCursorPositionBeforeClick = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_DataHighlighterViewModel]).call(this, vm, dataHighlighterViewTemplate);
		this.dataHighlighterViewModel = vm;
		this.$dataHighlighterContainer = dataHighlighterViewTemplate.domRoot;
		this.dataHighlighterContentElement = dataHighlighterViewTemplate.get_dataHighlighterContentElement();
		this.dataHighlighterViewRootElement = dataHighlighterViewTemplate.get_dataHighlighterViewRootElement();
		this.zoneTitleRegionRootElement = dataHighlighterViewTemplate.get_zoneTitleRegionRootElement();
		this.$compositeSearchWidget = tab.ObjectRegistry.newWidget(spiff.CompositeSearchWidget).call(null);
		this.dataHighlighterViewRootElement.append(this.$compositeSearchWidget.get_domRoot());
		this.$compositeSearchWidget.addClass('tabDataHighlighterView-searchControlsContainer');
		this.get_compositeSearchWidget().setPlaceholderText(this.get_viewModel().get_searchPlaceholderString());
		if (!ss.isNullOrUndefined(this.get_viewModel().get_searchText()) && this.get_viewModel().get_searchText().length > 0) {
			this.get_compositeSearchWidget().get_textInputView().get_inputElement().toggleClass($tab_DataHighlighterView.inactiveTextClassName, !this.get_viewModel().get_isActive());
			this.get_compositeSearchWidget().setSearchText(this.get_viewModel().get_searchText());
		}
		this.$updateSearchAndClearButtonState();
		this.get_compositeSearchWidget().add_inputTextChanged(ss.mkdel(this, this.$handleInputTextChange));
		this.get_compositeSearchWidget().add_textInputElementClicked(ss.mkdel(this, this.handleTextInputElementClicked));
		this.get_compositeSearchWidget().add_listItemClicked(ss.mkdel(this, this.handleListItemSelected));
		this.get_compositeSearchWidget().add_textInputSearchButtonClicked(ss.mkdel(this, this.handleSearchButtonClicked));
		this.get_compositeSearchWidget().add_textInputClearButtonClicked(ss.mkdel(this, this.handleClearButtonClicked));
		this.get_compositeSearchWidget().get_textInputView().add_enterKeyPressed(ss.mkdel(this, this.handleEnterKeyPress));
		this.get_compositeSearchWidget().get_textInputView().add_escapeKeyPressed(ss.mkdel(this, this.handleEscapeKeyPress));
		this.dataHighlighterViewModel.add_receivedSearchQueryResults(ss.mkdel(this, this.handleNewSearchQueryResults));
		this.dataHighlighterViewModel.add_titleChanged(ss.mkdel(this, this.handleTitleChanged));
		this.dataHighlighterViewModel.add_searchTextChanged(ss.mkdel(this, this.handleSearchTextChanged));
		this.dataHighlighterViewModel.add_isActiveChanged(ss.mkdel(this, this.handleIsActiveChanged));
		this.dataHighlighterViewModel.add_domainItemsChanged(ss.mkdel(this, this.$handleFullDomainItemsInSetChanged));
		this.disposables.add$1(spiff.EventUtil.bindWithDispose(this.get_compositeSearchWidget().get_textInputView().get_inputElement(), 'focus', ss.mkdel(this, this.$handleSearchBoxFocusIn)));
		this.disposables.add$1(spiff.EventUtil.bindWithDispose(this.get_compositeSearchWidget().get_textInputView().get_inputElement(), 'focusout', ss.mkdel(this, this.$handleSearchBoxFocusOut)));
		this.disposables.add$1(spiff.EventUtil.bindWithDispose(this.get_compositeSearchWidget().get_textInputView().get_inputElement(), 'mouseup', ss.mkdel(this, this.$handleSearchBoxMouseUp)));
		this.disposables.add$1(spiff.EventUtil.bindWithDispose(this.get_compositeSearchWidget().get_textInputView().get_inputElement(), 'touchend', ss.mkdel(this, this.$handleSearchBoxMouseUp)));
		this.setTitleFromModel();
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.get_compositeSearchWidget().removeList();
			this.get_compositeSearchWidget().remove_inputTextChanged(ss.mkdel(this, this.$handleInputTextChange));
			this.get_compositeSearchWidget().remove_textInputElementClicked(ss.mkdel(this, this.handleTextInputElementClicked));
			this.get_compositeSearchWidget().remove_listItemClicked(ss.mkdel(this, this.handleListItemSelected));
			this.get_compositeSearchWidget().remove_textInputSearchButtonClicked(ss.mkdel(this, this.handleSearchButtonClicked));
			this.get_compositeSearchWidget().remove_textInputClearButtonClicked(ss.mkdel(this, this.handleClearButtonClicked));
			this.get_compositeSearchWidget().get_textInputView().remove_enterKeyPressed(ss.mkdel(this, this.handleEnterKeyPress));
			this.get_compositeSearchWidget().get_textInputView().remove_escapeKeyPressed(ss.mkdel(this, this.handleEscapeKeyPress));
			this.dataHighlighterViewModel.remove_receivedSearchQueryResults(ss.mkdel(this, this.handleNewSearchQueryResults));
			this.dataHighlighterViewModel.remove_titleChanged(ss.mkdel(this, this.handleTitleChanged));
			this.dataHighlighterViewModel.remove_searchTextChanged(ss.mkdel(this, this.handleSearchTextChanged));
			this.dataHighlighterViewModel.remove_isActiveChanged(ss.mkdel(this, this.handleIsActiveChanged));
			this.dataHighlighterViewModel.remove_domainItemsChanged(ss.mkdel(this, this.$handleFullDomainItemsInSetChanged));
			this.$removeQueryDelayTimer();
		})));
	};
	$tab_DataHighlighterView.__typeName = 'tab.DataHighlighterView';
	global.tab.DataHighlighterView = $tab_DataHighlighterView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.DataHighlighterView.ListPopulationMode
	var $tab_DataHighlighterView$ListPopulationMode = function() {
	};
	$tab_DataHighlighterView$ListPopulationMode.__typeName = 'tab.DataHighlighterView$ListPopulationMode';
	global.tab.DataHighlighterView$ListPopulationMode = $tab_DataHighlighterView$ListPopulationMode;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewModels.DataHighlighterViewModel
	var $tab_DataHighlighterViewModel = function(dataHighlighterModel, visualIdPresModel, parentZoneViewModel) {
		this.$dataHighlighterModel = null;
		this.$visualId = null;
		this.$zoneTitle = null;
		this.$parentZoneViewModel = null;
		this.$isActive = false;
		this.$searchText = null;
		this.$fullDomainItemsCached = null;
		this.lastSatisfiedSearchTerm = null;
		this.lastSatisfiedSearchResults = null;
		this.$2$ReceivedSearchQueryResultsField = null;
		this.$2$TitleChangedField = null;
		this.$2$SearchTextChangedField = null;
		this.$2$IsActiveChangedField = null;
		this.$2$DomainItemsChangedField = null;
		spiff.BaseViewModel.call(this);
		this.$dataHighlighterModel = dataHighlighterModel;
		this.$visualId = visualIdPresModel;
		this.$parentZoneViewModel = parentZoneViewModel;
		this.$isActive = this.$dataHighlighterModel.get_isActive();
		this.set_searchText(this.$dataHighlighterModel.get_searchText());
		this.$fullDomainItemsCached = ss.arrayClone(this.$dataHighlighterModel.get_fullDomainItemSet().dataHighlighterItems);
		if (ss.isValue(this.$parentZoneViewModel)) {
			if (ss.isValue(this.$parentZoneViewModel.get_model().pm) && this.$parentZoneViewModel.get_hasTitle()) {
				this.$zoneTitle = this.$parentZoneViewModel.get_model().pm.zoneTitle;
			}
			this.$parentZoneViewModel.add_updateZone(ss.mkdel(this, this.$handleParentZoneUpdate));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$parentZoneViewModel.remove_updateZone(ss.mkdel(this, this.$handleParentZoneUpdate));
			})));
		}
		this.$dataHighlighterModel.add_newDataHighlighterPresModel(ss.mkdel(this, this.$handleDataHighlighterPresModelUpdate));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$dataHighlighterModel.remove_newDataHighlighterPresModel(ss.mkdel(this, this.$handleDataHighlighterPresModelUpdate));
		})));
	};
	$tab_DataHighlighterViewModel.__typeName = 'tab.DataHighlighterViewModel';
	$tab_DataHighlighterViewModel.$itemsSetsAreDifferent = function DataHighlighterViewModel$ItemsSetsAreDifferent(set1, set2) {
		if (set1.length !== set2.length) {
			return true;
		}
		else {
			for (var i = 0; i < set1.length; i++) {
				if (!ss.referenceEquals(set1[i].text, set2[i].text)) {
					return true;
				}
			}
		}
		return false;
	};
	global.tab.DataHighlighterViewModel = $tab_DataHighlighterViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.DataHighlighterViewTemplate
	var $tab_DataHighlighterViewTemplate = function() {
		this.$dataHighlighterContentElement = null;
		this.$dataHighlighterViewRootElement = null;
		this.$zoneTitleRegionRootElement = null;
		spiff.Template.call(this, $($tab_DataHighlighterViewTemplate.$htmlTemplate));
		this.$dataHighlighterContentElement = this.domRoot.find('.tabDataHighlighterContent');
		this.$dataHighlighterViewRootElement = this.domRoot.find('.tabDataHighlighterView');
		this.$zoneTitleRegionRootElement = this.domRoot.find('.tab-zone-titleregion');
	};
	$tab_DataHighlighterViewTemplate.__typeName = 'tab.DataHighlighterViewTemplate';
	global.tab.DataHighlighterViewTemplate = $tab_DataHighlighterViewTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DataSourceConnectionErrorDialog
	var $tab_DataSourceConnectionErrorDialog = function(dataSourceConnectionAttemptErrorResponse, onProceed, onCancel) {
		this.$dialog = null;
		$tab_BaseDataSourceConnectionErrorWidget.call(this, dataSourceConnectionAttemptErrorResponse, onProceed, onCancel);
		this.$dialog = new $tab_DynamicallyLoadedContentIntoIframeDialog(tab.Strings.AuthenticationRequired, dataSourceConnectionAttemptErrorResponse.RedirectUrl, $tab_BaseDataSourceConnectionErrorWidget.frameTestHook);
	};
	$tab_DataSourceConnectionErrorDialog.__typeName = 'tab.DataSourceConnectionErrorDialog';
	global.tab.DataSourceConnectionErrorDialog = $tab_DataSourceConnectionErrorDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DatePicker
	var $tab_DatePicker = function(settings) {
		this.$firstDayOfWeek = 0;
		this.$shortDayOfWeekNames = null;
		this.$monthYearFormatter = null;
		this.$fullDateFormatter = null;
		this.$currentMonth = null;
		this.$selectedDate = null;
		this.$minDate = null;
		this.$minMonth = null;
		this.$maxDate = null;
		this.$maxMonth = null;
		this.$monthYearBox = null;
		this.$prevMonthButton = null;
		this.$nextMonthButton = null;
		this.$monthTable = null;
		this.$todayReadout = null;
		this.$todayFormatTemplate = null;
		this.$usingMaxHeight = false;
		spiff.Widget.call(this, $('<span>'));
		this.$firstDayOfWeek = settings.firstDayOfWeek;
		this.$shortDayOfWeekNames = settings.shortDayOfWeekNames;
		this.$todayFormatTemplate = settings.todayFormatTemplate;
		this.$monthYearFormatter = settings.monthYearFormatter;
		this.$fullDateFormatter = settings.fullDateFormatter;
		this.$usingMaxHeight = false;
		var now = new Date();
		this.$currentMonth = $tab_DatePicker.$monthOf($tab_DatePicker.$asLocalDate(settings.monthToShow) || now);
		this.$selectedDate = $tab_DatePicker.$asLocalDate(settings.dateToSelect);
		this.setDateRange(settings.minDate, settings.maxDate);
		this.element.addClass('tab-datepicker');
		this.$makeHeader().appendTo(this.element);
		var tableWrapper = $('<div>').addClass('tab-datepicker-month-table-wrapper').append($('<div>').addClass('tab-datepicker-week-shade')).append(this.$makeMonthTable());
		tableWrapper.appendTo(this.element);
		this.$makeFooter().appendTo(this.element);
		this.element.mousedown(function(e) {
			spiff.EventUtil.stopEvent$2(e);
		});
		this.$update();
	};
	$tab_DatePicker.__typeName = 'tab.DatePicker';
	$tab_DatePicker.$asLocalDate = function DatePicker$AsLocalDate(utcDate) {
		return (!!utcDate ? new Date(utcDate.getUTCFullYear(), utcDate.getUTCMonth(), utcDate.getUTCDate()) : null);
	};
	$tab_DatePicker.$asUTCDate = function DatePicker$AsUTCDate(localDate) {
		return (!!localDate ? new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate())) : null);
	};
	$tab_DatePicker.$monthOf = function DatePicker$MonthOf(date) {
		return (!!date ? new Date(date.getFullYear(), date.getMonth(), 1) : null);
	};
	$tab_DatePicker.$adjustForWindow = function DatePicker$AdjustForWindow(calendarPosition, calendarSize, windowMin, windowMax) {
		if (calendarPosition + calendarSize > windowMax) {
			calendarPosition = windowMax - calendarSize;
			if (calendarPosition < windowMin) {
				calendarPosition += Math.ceil((windowMin - calendarPosition) / 2);
			}
		}
		return calendarPosition;
	};
	$tab_DatePicker.$addDayOfWeek = function DatePicker$AddDayOfWeek(dayOfWeek, days) {
		return (dayOfWeek + days + 14) % 7;
	};
	$tab_DatePicker.$sameDay = function DatePicker$SameDay(date1, date2) {
		return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
	};
	global.tab.DatePicker = $tab_DatePicker;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DatePickerSettings
	var $tab_DatePickerSettings = function(initialMonthToShow, initialDateToSelect, minDate, maxDate, initialFirstDayOfWeek, initialShortDayOfWeekNames, initialTodayFormatTemplate, initialMonthYearFormatter, initialFullDateFormatter) {
		this.monthToShow = null;
		this.dateToSelect = null;
		this.minDate = null;
		this.maxDate = null;
		this.firstDayOfWeek = 0;
		this.shortDayOfWeekNames = null;
		this.todayFormatTemplate = null;
		this.monthYearFormatter = null;
		this.fullDateFormatter = null;
		this.monthToShow = (ss.isNullOrUndefined(initialMonthToShow) ? null : new Date(initialMonthToShow.getTime()));
		this.dateToSelect = (ss.isNullOrUndefined(initialDateToSelect) ? null : new Date(initialDateToSelect.getTime()));
		this.minDate = (ss.isNullOrUndefined(minDate) ? null : new Date(minDate.getTime()));
		this.maxDate = (ss.isNullOrUndefined(maxDate) ? null : new Date(maxDate.getTime()));
		this.firstDayOfWeek = ss.coalesce(initialFirstDayOfWeek, 0);
		this.shortDayOfWeekNames = (ss.isNullOrUndefined(initialShortDayOfWeekNames) ? ['S', 'M', 'T', 'W', 'T', 'F', 'S'] : ss.arrayClone(initialShortDayOfWeekNames));
		this.todayFormatTemplate = (ss.isNullOrUndefined(initialTodayFormatTemplate) ? 'Today: {0}' : initialTodayFormatTemplate);
		this.monthYearFormatter = (ss.isNullOrUndefined(initialMonthYearFormatter) ? function(utcDate) {
			return ss.localeFormatDate($tab_DatePicker.$asLocalDate(utcDate), 'MMMM yyyy');
		} : initialMonthYearFormatter);
		this.fullDateFormatter = (ss.isNullOrUndefined(initialFullDateFormatter) ? function(utcDate1) {
			return ss.localeFormatDate($tab_DatePicker.$asLocalDate(utcDate1), 'MMMM d, yyyy');
		} : initialFullDateFormatter);
	};
	$tab_DatePickerSettings.__typeName = 'tab.DatePickerSettings';
	global.tab.DatePickerSettings = $tab_DatePickerSettings;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DetailedErrorDialog
	var $tab_DetailedErrorDialog = function() {
	};
	$tab_DetailedErrorDialog.__typeName = 'tab.DetailedErrorDialog';
	$tab_DetailedErrorDialog.$getShortMessageAndDetails = function DetailedErrorDialog$GetShortMessageAndDetails(content) {
		var errorShortMessageList = ss.arrayClone(ss.netSplit(content, ['<br>', '<br/>', '\r\n', '\r', '\n', '<li>', '<ul>', '</ul>'], null, 1));
		var errorShortMessage = errorShortMessageList[0];
		ss.remove(errorShortMessageList, errorShortMessage);
		var errorDetails = [];
		ss.arrayInsertRange(errorDetails, 0, errorShortMessageList);
		var errorDetailsList = errorDetails;
		return { item1: errorShortMessage, item2: errorDetailsList };
	};
	$tab_DetailedErrorDialog.$formatIssueHelperLinks = function DetailedErrorDialog$FormatIssueHelperLinks(links) {
		var helperLinkMap = {};
		if (ss.isValue(links)) {
			for (var $t1 = 0; $t1 < links.length; $t1++) {
				var link = links[$t1];
				helperLinkMap[link.displayText] = link.url;
			}
		}
		return helperLinkMap;
	};
	$tab_DetailedErrorDialog.show = function DetailedErrorDialog$Show(content, title, links) {
		var shortMessageAndDetails = $tab_DetailedErrorDialog.$getShortMessageAndDetails(content);
		var helperLinkMap = $tab_DetailedErrorDialog.$formatIssueHelperLinks(links);
		var detailedErrorPresModel = { errorDialogTitle: title, errorShortMessage: shortMessageAndDetails.item1, errorDetails: Array.prototype.slice.call(shortMessageAndDetails.item2), errorCodeId: 0, errorHelpLink: 'https://www.tableau.com/support/', issueHelperLinks: JSON.stringify(helperLinkMap), queryDetails: '', useCopyCommand: false };
		var notificationId = 'doc:update-detailed-error-dialog-event';
		try {
			tab.ApplicationModel.get_instance().raiseNotification(notificationId, detailedErrorPresModel, null);
		}
		catch ($t1) {
			var exception = ss.Exception.wrap($t1);
			tab.ErrorTrace.report(new ss.Exception('Error when showing the error dialog.', exception));
			tab.Log.get$1($tab_DetailedErrorDialog).error(ss.formatString("Notification '{0}' failed to show error dialog failed.Presmodel: '{1}', CallStack: '{2}'", notificationId, JSON.stringify(detailedErrorPresModel), JSON.stringify(tab.ErrorTrace.getStackTraceFor(exception))), []);
		}
	};
	global.tab.DetailedErrorDialog = $tab_DetailedErrorDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DeviceLayoutToolbarButtonBuilder
	var $tab_DeviceLayoutToolbarButtonBuilder = function() {
	};
	$tab_DeviceLayoutToolbarButtonBuilder.__typeName = 'tab.DeviceLayoutToolbarButtonBuilder';
	$tab_DeviceLayoutToolbarButtonBuilder.get_$layoutToSwitchTo = function DeviceLayoutToolbarButtonBuilder$get_LayoutToSwitchTo() {
		var currentlyRequestedLayout = tabBootstrap.ViewerBootstrap.get_instance().get_deviceDetector().get_deviceType();
		if (currentlyRequestedLayout === 'phone' || currentlyRequestedLayout === 'tablet') {
			return 'desktop';
		}
		else {
			return tabBootstrap.ViewerBootstrap.get_instance().get_deviceDetector().get_detectedDeviceType();
		}
	};
	$tab_DeviceLayoutToolbarButtonBuilder.get_isDeviceLayoutSelectorEnabled = function DeviceLayoutToolbarButtonBuilder$get_IsDeviceLayoutSelectorEnabled() {
		var isEmbeddedInAPageOutsideOfVizPortal = tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage() && !tsConfig.isVizPortal;
		var isCustomView = ss.isValue(tsConfig.current_custom_view_id);
		return tab.FeatureFlags.isEnabled('SelectDeviceLayoutOnWeb') && !tsConfig.isPublic && !isEmbeddedInAPageOutsideOfVizPortal && !isCustomView;
	};
	$tab_DeviceLayoutToolbarButtonBuilder.buildViewModel = function DeviceLayoutToolbarButtonBuilder$BuildViewModel(deviceLayouts, automaticDeviceLayouts, dialogHost) {
		if (!$tab_DeviceLayoutToolbarButtonBuilder.get_isDeviceLayoutSelectorEnabled()) {
			return null;
		}
		var layoutToSwitchTo = $tab_DeviceLayoutToolbarButtonBuilder.get_$layoutToSwitchTo();
		if (tabBootstrap.ViewerBootstrap.get_instance().get_deviceDetector().get_detectedDeviceType() === 'desktop' || !$tab_DeviceLayoutToolbarButtonBuilder.$canSwitchToLayout(layoutToSwitchTo, deviceLayouts)) {
			return null;
		}
		var action = function() {
			tab.ModuleManager.load(tab.IDeviceLayoutSelectorModule).call(null, []).done(function(module) {
				var dialogContent = module.buildDialogContent(layoutToSwitchTo, automaticDeviceLayouts);
				dialogHost.show(dialogContent);
			});
		};
		return new $tab_ToolbarButtonViewModel($tab_DeviceLayoutToolbarButtonBuilder.$getLabelForLayout(layoutToSwitchTo), $tab_DeviceLayoutToolbarButtonBuilder.$getIconClassForLayout(layoutToSwitchTo), action);
	};
	$tab_DeviceLayoutToolbarButtonBuilder.$getLabelForLayout = function DeviceLayoutToolbarButtonBuilder$GetLabelForLayout(layout) {
		switch (layout) {
			case 'desktop': {
				return tab.Strings.DeviceLayoutSelectorDesktopLayoutToolbarButtonLabel;
			}
			case 'tablet': {
				return tab.Strings.DeviceLayoutSelectorTabletLayoutToolbarButtonLabel;
			}
			case 'phone': {
				return tab.Strings.DeviceLayoutSelectorPhoneLayoutToolbarButtonLabel;
			}
			default: {
				return '';
			}
		}
	};
	$tab_DeviceLayoutToolbarButtonBuilder.$getIconClassForLayout = function DeviceLayoutToolbarButtonBuilder$GetIconClassForLayout(layout) {
		switch (layout) {
			case 'desktop': {
				return $tab_DeviceLayoutToolbarButtonBuilder.desktopLayoutIconClass;
			}
			case 'tablet': {
				return $tab_DeviceLayoutToolbarButtonBuilder.tabletLayoutIconClass;
			}
			case 'phone': {
				return $tab_DeviceLayoutToolbarButtonBuilder.phoneLayoutIconClass;
			}
			default: {
				return '';
			}
		}
	};
	$tab_DeviceLayoutToolbarButtonBuilder.$canSwitchToLayout = function DeviceLayoutToolbarButtonBuilder$CanSwitchToLayout(layout, availableLayouts) {
		var currentlyViewingDeviceSpecificLayout = availableLayouts.indexOf(tabBootstrap.ViewerBootstrap.get_instance().get_deviceDetector().get_deviceType()) !== -1;
		var willSwitchToDeviceSpecificLayout = availableLayouts.indexOf(layout) !== -1;
		return currentlyViewingDeviceSpecificLayout || willSwitchToDeviceSpecificLayout;
	};
	global.tab.DeviceLayoutToolbarButtonBuilder = $tab_DeviceLayoutToolbarButtonBuilder;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DeviceLayoutViewModel
	var $tab_DeviceLayoutViewModel = function(workbookModel) {
		this.$dashboardModel = null;
		this.$2$NewLayoutsField = null;
		spiff.BaseViewModel.call(this);
		workbookModel.withDashboard(ss.mkdel(this, this.$handleDashboard));
	};
	$tab_DeviceLayoutViewModel.__typeName = 'tab.DeviceLayoutViewModel';
	global.tab.DeviceLayoutViewModel = $tab_DeviceLayoutViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DevicePreviewViewModel
	var $tab_DevicePreviewViewModel = function() {
		this.$2$VizSizeField = null;
		spiff.BaseViewModel.call(this);
	};
	$tab_DevicePreviewViewModel.__typeName = 'tab.DevicePreviewViewModel';
	$tab_DevicePreviewViewModel.get_isDevicePreviewMode = function DevicePreviewViewModel$get_IsDevicePreviewMode() {
		return tab.FeatureParamsLookup.getBool(57);
	};
	$tab_DevicePreviewViewModel.getZoomRatio = function DevicePreviewViewModel$GetZoomRatio(deviceWidth, vizContainerWidth) {
		var MinimumZoom = 0.25;
		var zoomRatio = deviceWidth / vizContainerWidth;
		if (zoomRatio < MinimumZoom) {
			zoomRatio = MinimumZoom;
		}
		if (zoomRatio > 1) {
			zoomRatio = 1;
		}
		return zoomRatio;
	};
	global.tab.DevicePreviewViewModel = $tab_DevicePreviewViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DialogHostComponent
	var $tab_DialogHostComponent = function() {
		React.Component.call(this);
	};
	$tab_DialogHostComponent.__typeName = 'tab.DialogHostComponent';
	global.tab.DialogHostComponent = $tab_DialogHostComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DialogHostViewModel
	var $tab_DialogHostViewModel = function() {
		this.$isShown = false;
		this.$dialogContent = null;
		ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]).call(this);
	};
	$tab_DialogHostViewModel.__typeName = 'tab.DialogHostViewModel';
	global.tab.DialogHostViewModel = $tab_DialogHostViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DisabledTooltipBehavior
	var $tab_DisabledTooltipBehavior = function() {
	};
	$tab_DisabledTooltipBehavior.__typeName = 'tab.DisabledTooltipBehavior';
	global.tab.DisabledTooltipBehavior = $tab_DisabledTooltipBehavior;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DownloadFileDialog
	var $tab_DownloadFileDialog = function(title, message, url, urlTarget) {
		this.$title = null;
		this.$message = null;
		this.$url = null;
		this.$urlTarget = null;
		this.$closeDialog = null;
		tab.Param.verifyString(title, 'title');
		tab.Param.verifyString(message, 'message');
		tab.Param.verifyString(url, 'url');
		tab.Param.verifyString(urlTarget, 'urlTarget');
		this.$title = title;
		this.$message = message;
		this.$url = url;
		this.$urlTarget = urlTarget;
	};
	$tab_DownloadFileDialog.__typeName = 'tab.DownloadFileDialog';
	$tab_DownloadFileDialog.$buildCancelButton = function DownloadFileDialog$BuildCancelButton(closeDialogAction) {
		var cancelButton = React.createElement(SharedWidgets.ButtonWidget, {
			handleClick: function(e) {
				closeDialogAction();
			},
			buttonType: 1,
			testId: 'CancelBtn',
			children: tab.Strings.DialogButtonCancel
		});
		var cancelButtonWrapper = spiff.DOMElements.div({ key: 'cancel-button-wrapper-key', children: cancelButton });
		return cancelButtonWrapper;
	};
	global.tab.DownloadFileDialog = $tab_DownloadFileDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DynamicallyLoadedContentDialog
	var $tab_DynamicallyLoadedContentDialog = function(title) {
		spiff.ModalDialog.$ctor1.call(this, title, $($tab_DynamicallyLoadedContentDialog.bodyContainer));
	};
	$tab_DynamicallyLoadedContentDialog.__typeName = 'tab.DynamicallyLoadedContentDialog';
	global.tab.DynamicallyLoadedContentDialog = $tab_DynamicallyLoadedContentDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DynamicallyLoadedContentIntoDomDialog
	var $tab_DynamicallyLoadedContentIntoDomDialog = function(title, element) {
		this.$element = null;
		$tab_DynamicallyLoadedContentDialog.call(this, title);
		this.$element = element;
		this.get_dialogElement().addClass('tab-dsauthdlg tab-dsauthdlg-small');
	};
	$tab_DynamicallyLoadedContentIntoDomDialog.__typeName = 'tab.DynamicallyLoadedContentIntoDomDialog';
	global.tab.DynamicallyLoadedContentIntoDomDialog = $tab_DynamicallyLoadedContentIntoDomDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.DynamicallyLoadedContentIntoIframeDialog
	var $tab_DynamicallyLoadedContentIntoIframeDialog = function(title, urlToLoadContent, frameTestHook) {
		this.$frameTestHook = null;
		this.urlToLoadDialogContent = null;
		$tab_DynamicallyLoadedContentDialog.call(this, title);
		this.$frameTestHook = frameTestHook;
		ss.Debug.assert(!ss.isNullOrEmptyString(urlToLoadContent), 'Attempting to show DataSource auth dialog but URL is empty.');
		this.urlToLoadDialogContent = urlToLoadContent;
		this.get_dialogElement().addClass('tab-dsauthdlg tab-dsauthdlg-tall');
	};
	$tab_DynamicallyLoadedContentIntoIframeDialog.__typeName = 'tab.DynamicallyLoadedContentIntoIframeDialog';
	global.tab.DynamicallyLoadedContentIntoIframeDialog = $tab_DynamicallyLoadedContentIntoIframeDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.EditConnectionInformationDialog
	var $tab_EditConnectionInformationDialog = function(connectionAttemptInfo) {
		this.$connectionAttemptInfo = null;
		this.$handledActionTriggered = false;
		this.$2$HandledField = null;
		$tab_BaseDisposableDialog.call(this);
		this.$connectionAttemptInfo = connectionAttemptInfo;
	};
	$tab_EditConnectionInformationDialog.__typeName = 'tab.EditConnectionInformationDialog';
	global.tab.EditConnectionInformationDialog = $tab_EditConnectionInformationDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.EmailValidator
	var $tab_EmailValidator = function() {
	};
	$tab_EmailValidator.__typeName = 'tab.EmailValidator';
	$tab_EmailValidator.validate = function EmailValidator$Validate(email) {
		if (ss.isNullOrEmptyString(email)) {
			return false;
		}
		if (email.length > $tab_EmailValidator.maxEmailLength) {
			return false;
		}
		var validator = new RegExp('^[^\\s"(),:;<>@[\\]]+@([-a-z0-9]+\\.)+[a-z0-9]{2,}$', 'i');
		return validator.test(email);
	};
	global.tab.EmailValidator = $tab_EmailValidator;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.EmptyExtensionTemplate
	var $tab_EmptyExtensionTemplate = function() {
		this.content = null;
		spiff.Template.call(this, $($tab_EmptyExtensionTemplate.$htmlTemplate));
	};
	$tab_EmptyExtensionTemplate.__typeName = 'tab.EmptyExtensionTemplate';
	global.tab.EmptyExtensionTemplate = $tab_EmptyExtensionTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.EmptyFloatingLayoutTemplate
	var $tab_EmptyFloatingLayoutTemplate = function() {
		spiff.Template.call(this, $($tab_EmptyFloatingLayoutTemplate.$htmlTemplate));
		this.domRoot.text(tab.Strings.EmptyFloatingLayoutMessage);
	};
	$tab_EmptyFloatingLayoutTemplate.__typeName = 'tab.EmptyFloatingLayoutTemplate';
	global.tab.EmptyFloatingLayoutTemplate = $tab_EmptyFloatingLayoutTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.EmptyFloatingLayoutView
	var $tab_EmptyFloatingLayoutView = function(viewModel) {
		ss.makeGenericType(spiff.BaseView$1, [$tab_EmptyFloatingLayoutViewModel]).call(this, viewModel, new $tab_EmptyFloatingLayoutTemplate());
	};
	$tab_EmptyFloatingLayoutView.__typeName = 'tab.EmptyFloatingLayoutView';
	global.tab.EmptyFloatingLayoutView = $tab_EmptyFloatingLayoutView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.EmptyFloatingLayoutViewModel
	var $tab_EmptyFloatingLayoutViewModel = function(zoneModel) {
		spiff.BaseViewModel.call(this);
		zoneModel.add_childrenAdded(ss.mkdel(this, this.onChildrenAdded));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			zoneModel.remove_childrenAdded(ss.mkdel(this, this.onChildrenAdded));
		})));
	};
	$tab_EmptyFloatingLayoutViewModel.__typeName = 'tab.EmptyFloatingLayoutViewModel';
	global.tab.EmptyFloatingLayoutViewModel = $tab_EmptyFloatingLayoutViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.EventHandlerParam
	var $tab_EventHandlerParam = function() {
		this.eventHandler = null;
		this.onTabSelectHandle = null;
		this.zoneBecameValidHandler = null;
	};
	$tab_EventHandlerParam.__typeName = 'tab.EventHandlerParam';
	global.tab.EventHandlerParam = $tab_EventHandlerParam;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ExportHelper
	var $tab_ExportHelper = function() {
		this.$sheetScrollPositions = null;
		this.$sheetScrollPositions = {};
	};
	$tab_ExportHelper.__typeName = 'tab.ExportHelper';
	global.tab.ExportHelper = $tab_ExportHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ExtensionIFrameTemplate
	var $tab_ExtensionIFrameTemplate = function(iframeName) {
		this.$iframeName = null;
		spiff.Template.call(this, $($tab_ExtensionIFrameTemplate.$htmlTemplate));
		this.$iframeName = iframeName;
		this.get_frame().prop('name', this.$iframeName);
		this.get_frame().prop('id', this.$iframeName);
		var containerCss = { position: 'absolute', top: 0 + 'px', left: 0 + 'px' };
		this.get_container().css(containerCss);
		this.get_frame().css({ border: '0px none' });
	};
	$tab_ExtensionIFrameTemplate.__typeName = 'tab.ExtensionIFrameTemplate';
	global.tab.ExtensionIFrameTemplate = $tab_ExtensionIFrameTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ExtensionLoadErrorTemplate
	var $tab_ExtensionLoadErrorTemplate = function(errMsg) {
		this.content = null;
		spiff.Template.call(this, $(ss.formatString($tab_ExtensionLoadErrorTemplate.$htmlTemplate, errMsg)));
		var css = { 'text-align': 'center' };
		this.domRoot.css(css);
	};
	$tab_ExtensionLoadErrorTemplate.__typeName = 'tab.ExtensionLoadErrorTemplate';
	global.tab.ExtensionLoadErrorTemplate = $tab_ExtensionLoadErrorTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ExtensionZoneTemplate
	var $tab_ExtensionZoneTemplate = function() {
		this.content = null;
		spiff.Template.call(this, $($tab_ExtensionZoneTemplate.$htmlTemplate));
	};
	$tab_ExtensionZoneTemplate.__typeName = 'tab.ExtensionZoneTemplate';
	global.tab.ExtensionZoneTemplate = $tab_ExtensionZoneTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ExtensionZoneView
	var $tab_ExtensionZoneView = function(viewModel, parentZoneViewModel) {
		this.$parentZoneViewModel = null;
		this.$frameTemplate = null;
		this.$glass = null;
		this.$bootstrapModulePromise = null;
		this.$dispatcher = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_ExtensionZoneViewModel]).call(this, viewModel, new $tab_ExtensionZoneTemplate());
		this.$parentZoneViewModel = parentZoneViewModel;
		this.get_viewModel().add_extensionZoneUpdated(ss.mkdel(this, this.$handleNewExtensionZone));
		this.get_viewModel().add_refreshExtensionZone(ss.mkdel(this, this.$handleNewExtensionZone));
		this.$parentZoneViewModel.add_propertyChanged(ss.mkdel(this, this.$parentZoneChanged));
		this.$parentZoneViewModel.add_resizeZone(ss.mkdel(this, this.$handleResizeZone));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.get_viewModel().remove_extensionZoneUpdated(ss.mkdel(this, this.$handleNewExtensionZone));
			this.get_viewModel().remove_refreshExtensionZone(ss.mkdel(this, this.$handleNewExtensionZone));
			this.$parentZoneViewModel.remove_propertyChanged(ss.mkdel(this, this.$parentZoneChanged));
			this.$parentZoneViewModel.remove_resizeZone(ss.mkdel(this, this.$handleResizeZone));
			if (ss.isValue(this.$dispatcher)) {
				this.$dispatcher.dispose();
			}
		})));
		this.$bootstrapModulePromise = tab.ModuleManager.load$1('@tableau/api-platform-js', []).pipe(function(module) {
			return module;
		});
	};
	$tab_ExtensionZoneView.__typeName = 'tab.ExtensionZoneView';
	global.tab.ExtensionZoneView = $tab_ExtensionZoneView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ExtensionZoneViewModel
	var $tab_ExtensionZoneViewModel = function(extensionZoneModel, zoneViewModel) {
		this.$extensionZoneModel = null;
		this.$zoneViewModel = null;
		this.$isInitialized = false;
		this.$renderStatus = 'initial';
		this.$2$ExtensionZoneUpdatedField = null;
		this.$2$ExtensionZoneReadyField = null;
		this.$2$RefreshExtensionZoneField = null;
		spiff.BaseViewModel.call(this);
		this.$extensionZoneModel = extensionZoneModel;
		this.$zoneViewModel = zoneViewModel;
		this.$extensionZoneModel.add_extensionZoneUpdated(ss.mkdel(this, this.handleExtensionZoneUpdated));
		tab.ApplicationModel.get_instance().get_extensionPermissionsCache().add_updated(ss.mkdel(this, this.$handlePermissionsUpdate));
		tab.ApplicationModel.get_instance().registerNotificationHandler('doc:block-extension-event', ss.mkdel(this, this.$blockExtensionEventHandler));
		if (tsConfig.is_authoring) {
			tab.ApplicationModel.get_instance().registerNotificationHandler('doc:reload-add-in-event', ss.mkdel(this, this.$reloadEventHandler));
		}
		this.$initializeAsync();
		this.disposables.add(ss.mkdel(this, function() {
			this.$extensionZoneModel.remove_extensionZoneUpdated(ss.mkdel(this, this.handleExtensionZoneUpdated));
			tab.ApplicationModel.get_instance().get_extensionPermissionsCache().remove_updated(ss.mkdel(this, this.$handlePermissionsUpdate));
			if (tsConfig.is_authoring) {
				tab.ApplicationModel.get_instance().unRegisterNotificationHandler('doc:reload-add-in-event', ss.mkdel(this, this.$reloadEventHandler));
			}
			tab.ApplicationModel.get_instance().unRegisterNotificationHandler('doc:block-extension-event', ss.mkdel(this, this.$blockExtensionEventHandler));
		}));
	};
	$tab_ExtensionZoneViewModel.__typeName = 'tab.ExtensionZoneViewModel';
	global.tab.ExtensionZoneViewModel = $tab_ExtensionZoneViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.FilePicker.FilePickerComponent
	var $tab_FilePickerComponent = function(props) {
		this.$refBrowseFilesSetup = null;
		this.$fileInputElement = null;
		spiff.PureRenderComponent.call(this, props);
		this.$refBrowseFilesSetup = ss.mkdel(this, function(element) {
			this.$fileInputElement = element;
			this.$openFilePicker();
		});
	};
	$tab_FilePickerComponent.__typeName = 'tab.FilePickerComponent';
	global.tab.FilePickerComponent = $tab_FilePickerComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.FilePicker.FilePickerConfig
	var $tab_FilePickerConfig = function() {
		this.allowedFileExtensions = null;
		this.allowMulti = false;
	};
	$tab_FilePickerConfig.__typeName = 'tab.FilePickerConfig';
	global.tab.FilePickerConfig = $tab_FilePickerConfig;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.FilePicker.FilePickerViewModel
	var $tab_FilePickerViewModel = function(config, fileBrowseCallback) {
		this.$currentConfig = null;
		this.$onFileBrowse = null;
		ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]).call(this);
		this.$currentConfig = config;
		this.$onFileBrowse = fileBrowseCallback;
	};
	$tab_FilePickerViewModel.__typeName = 'tab.FilePickerViewModel';
	$tab_FilePickerViewModel.createFilePickerViewModel = function FilePickerViewModel$CreateFilePickerViewModel(config, fileBrowseCallback) {
		return new $tab_FilePickerViewModel(config, fileBrowseCallback);
	};
	global.tab.FilePickerViewModel = $tab_FilePickerViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.FileReconnectWidget
	var $tab_FileReconnectWidget = function(props) {
		$tab_SheetReconnectWidget.call(this, props);
	};
	$tab_FileReconnectWidget.__typeName = 'tab.FileReconnectWidget';
	global.tab.FileReconnectWidget = $tab_FileReconnectWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.FontMetricsLogger
	var $tab_FontMetricsLogger = function() {
	};
	$tab_FontMetricsLogger.__typeName = 'tab.FontMetricsLogger';
	$tab_FontMetricsLogger.logUIStabilized = function FontMetricsLogger$LogUIStabilized() {
		$tab_FontMetricsLogger.$logFontMetric($tab_FontMetricsLogger.uiStabilizedMetricName);
	};
	$tab_FontMetricsLogger.logFontsLoaded = function FontMetricsLogger$LogFontsLoaded() {
		$tab_FontMetricsLogger.$logFontMetric($tab_FontMetricsLogger.fontsReadyMetricName);
	};
	$tab_FontMetricsLogger.$logFontMetric = function FontMetricsLogger$LogFontMetric(metricName) {
		tab.Logger.lazyGetLogger($tab_FontMetricsLogger).debug('Font metric being called: ', [metricName]);
		tabBootstrap.MetricsController.logMetricsEvent(metricName, 128);
	};
	global.tab.FontMetricsLogger = $tab_FontMetricsLogger;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.FontNormalizer
	var $tab_FontNormalizer = function() {
		this.normalizeFont = null;
		this.normalizeFont = (BrowserSupport.BrowserSupport.IsIE() ? $tab_FontNormalizer.$ieFontNormalizer : $tab_FontNormalizer.$noOpFontNormalizer);
	};
	$tab_FontNormalizer.__typeName = 'tab.FontNormalizer';
	$tab_FontNormalizer.instance = function FontNormalizer$Instance() {
		if (ss.isNullOrUndefined($tab_FontNormalizer.$instance)) {
			$tab_FontNormalizer.$instance = new $tab_FontNormalizer();
			$tab_FontNormalizer.$initializeFontMap();
		}
		return $tab_FontNormalizer.$instance;
	};
	$tab_FontNormalizer.$ieFontNormalizer = function FontNormalizer$IEFontNormalizer(font) {
		if (tab.MiscUtil.isNullOrEmpty$3(font)) {
			return font;
		}
		var fontParts = font.split(' ');
		var normalizedPart;
		var dirty = false;
		for (var i = 0; i < fontParts.length; ++i) {
			normalizedPart = $tab_FontNormalizer.$fontMap[fontParts[i]];
			if (!(typeof(normalizedPart) === 'undefined')) {
				dirty = true;
				fontParts[i] = normalizedPart;
			}
		}
		if (dirty) {
			return fontParts.join(' ');
		}
		return font;
	};
	$tab_FontNormalizer.$noOpFontNormalizer = function FontNormalizer$NoOpFontNormalizer(font) {
		return font;
	};
	$tab_FontNormalizer.$initializeFontMap = function FontNormalizer$InitializeFontMap() {
		if (ss.isValue($tab_FontNormalizer.$fontMap)) {
			return;
		}
		if (BrowserSupport.BrowserSupport.IsIE()) {
			$tab_FontNormalizer.$fontMap = {};
			$tab_FontNormalizer.$fontMap['華康中明體'] = 'DLCMingMedium';
			$tab_FontNormalizer.$fontMap['華康粗明體'] = 'DLCMingBold';
			$tab_FontNormalizer.$fontMap['細明體'] = 'Ming Light';
			$tab_FontNormalizer.$fontMap['新細明體'] = 'PMingLiU';
			$tab_FontNormalizer.$fontMap['細明體-ExtB'] = 'MingLiU-ExtB';
			$tab_FontNormalizer.$fontMap['新細明體-ExtB'] = 'PMingLiU-ExtB';
			$tab_FontNormalizer.$fontMap['MS宋体'] = 'MS Song';
			$tab_FontNormalizer.$fontMap['新宋体'] = 'NSimSun';
			$tab_FontNormalizer.$fontMap['中易宋体'] = 'SimSun';
			$tab_FontNormalizer.$fontMap['宋体'] = 'SimSun';
			$tab_FontNormalizer.$fontMap['宋体-18030'] = 'SimSun-18030';
			$tab_FontNormalizer.$fontMap['新宋体-18030'] = 'NSimSun-18030';
			$tab_FontNormalizer.$fontMap['宋体–方正超大字符集'] = 'SimSun (Founder Extended)';
			$tab_FontNormalizer.$fontMap['宋體ExtA'] = 'SimSun-ExtA';
			$tab_FontNormalizer.$fontMap['宋體ExtB'] = 'SimSun-ExtB';
			$tab_FontNormalizer.$fontMap['华文宋体'] = 'STSong';
			$tab_FontNormalizer.$fontMap['华文中宋'] = 'STZhongsong';
			$tab_FontNormalizer.$fontMap['ＭＳ'] = 'MS';
			$tab_FontNormalizer.$fontMap['明朝'] = 'Mincho';
			$tab_FontNormalizer.$fontMap['Ｐ明朝'] = 'PMincho';
			$tab_FontNormalizer.$fontMap['平成明朝'] = 'Heisei Minchō';
			$tab_FontNormalizer.$fontMap['リュウミン'] = 'Ry­ūbundō Minchō';
			$tab_FontNormalizer.$fontMap['小塚明朝'] = 'Kozuka Minchō';
			$tab_FontNormalizer.$fontMap['바탕'] = 'Batang';
			$tab_FontNormalizer.$fontMap['바탕체'] = 'BatangChe';
			$tab_FontNormalizer.$fontMap['궁서'] = 'Gungsuh';
			$tab_FontNormalizer.$fontMap['궁서체'] = 'GungsuhChe';
			$tab_FontNormalizer.$fontMap['华文细黑'] = 'STHeiti Light';
			$tab_FontNormalizer.$fontMap['微軟正黑體'] = 'Microsoft JhengHei';
			$tab_FontNormalizer.$fontMap['微软雅黑'] = 'Microsoft YaHei';
			$tab_FontNormalizer.$fontMap['MS黑体'] = 'MS Hei';
			$tab_FontNormalizer.$fontMap['蒙纳黑体'] = 'MHei';
			$tab_FontNormalizer.$fontMap['中易黑体'] = 'SimHei';
			$tab_FontNormalizer.$fontMap['メイリオ'] = 'Meiryo';
			$tab_FontNormalizer.$fontMap['ゴシック'] = 'Gothic';
			$tab_FontNormalizer.$fontMap['Ｐゴシック'] = 'PGothic';
			$tab_FontNormalizer.$fontMap['돋움'] = 'Dotum';
			$tab_FontNormalizer.$fontMap['돋움체'] = 'DotumChe';
			$tab_FontNormalizer.$fontMap['굴림'] = 'Gulim';
			$tab_FontNormalizer.$fontMap['굴림체'] = 'GulimChe';
			$tab_FontNormalizer.$fontMap['맑은'] = 'Malgun';
			$tab_FontNormalizer.$fontMap['고딕'] = 'Gothic';
			$tab_FontNormalizer.$fontMap['새굴림'] = 'New Gulim';
			$tab_FontNormalizer.$fontMap['標楷體'] = 'KaiU';
			$tab_FontNormalizer.$fontMap['中易楷体'] = 'SimKai';
			$tab_FontNormalizer.$fontMap['楷体_GB2312'] = 'SimKai';
			$tab_FontNormalizer.$fontMap['华文楷体'] = 'STKaiti';
			$tab_FontNormalizer.$fontMap['中易隶书'] = 'SimLi';
			$tab_FontNormalizer.$fontMap['隶书'] = 'SimLi';
			$tab_FontNormalizer.$fontMap['中易仿宋'] = 'SimFang';
			$tab_FontNormalizer.$fontMap['仿宋'] = 'SimFang';
			$tab_FontNormalizer.$fontMap['幼圆'] = 'SimYou';
			$tab_FontNormalizer.$fontMap['华文行楷'] = 'HuaWen Xingkai';
			$tab_FontNormalizer.$fontMap['华文彩云'] = 'HuaWen CaiYun';
			$tab_FontNormalizer.$fontMap['方正舒体'] = 'FangZheng ShuTi';
			$tab_FontNormalizer.$fontMap['方正启体'] = 'FangZheng QiTi';
			$tab_FontNormalizer.$fontMap['汉仪雪君体'] = 'HanYi XueJun';
			$tab_FontNormalizer.$fontMap['華康少女體'] = 'HuaKang ShaoNu';
			$tab_FontNormalizer.$fontMap['華康娃娃體'] = 'HuaKang WuaWua';
		}
	};
	global.tab.FontNormalizer = $tab_FontNormalizer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.FormattingTelemetryClient
	var $tab_FormattingTelemetryClient = function() {
	};
	$tab_FormattingTelemetryClient.__typeName = 'tab.FormattingTelemetryClient';
	$tab_FormattingTelemetryClient.logRichTextEditorEvent = function FormattingTelemetryClient$LogRichTextEditorEvent(nameValuePairs) {
		if (tab.FeatureFlags.isEnabled('WebAuthoringOnlineTelemetry')) {
			tab.OnlineAnalyticsClient.logEvent($tab_FormattingTelemetryClient.richTextEditingEventType, nameValuePairs);
		}
	};
	$tab_FormattingTelemetryClient.logPerformanceEvent = function FormattingTelemetryClient$LogPerformanceEvent(nameValuePairs) {
		if (tab.FeatureFlags.isEnabled('WebAuthoringOnlineTelemetry')) {
			tab.OnlineAnalyticsClient.logEvent($tab_FormattingTelemetryClient.performanceEventType, nameValuePairs);
		}
	};
	global.tab.FormattingTelemetryClient = $tab_FormattingTelemetryClient;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.GenericDataSourceErrorWidget
	var $tab_GenericDataSourceErrorWidget = function(errorMessage, onRetryHandler) {
		spiff.Widget.call(this, $($tab_GenericDataSourceErrorWidget.genericErrorTemplateHtml));
		$('.tb-data-source-error', this.element).text(tab.Strings.DataSourceGenericErrorMsg);
		$('.tb-data-source-error-sub', this.element).text(tab.Strings.DataSourceGenericErrorSubMsg);
		var retryButton = $('.tb-data-source-button-retry', this.element);
		retryButton.text(tab.Strings.DataSourceGenericErrorButtonLabel);
		retryButton.on('click', function(e) {
			if (ss.isValue(onRetryHandler)) {
				onRetryHandler();
			}
		});
		retryButton.on('keypress', function(e1) {
			if (e1.which === 13 || e1.which === 32) {
				if (ss.isValue(onRetryHandler)) {
					onRetryHandler();
				}
				e1.stopPropagation();
			}
		});
		errorMessage = ss.replaceAllString(errorMessage, '<br>', '\r\n');
		$('.tb-data-source-error-message', this.element).text(errorMessage);
	};
	$tab_GenericDataSourceErrorWidget.__typeName = 'tab.GenericDataSourceErrorWidget';
	global.tab.GenericDataSourceErrorWidget = $tab_GenericDataSourceErrorWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.GenericDataSourceExceptionDialogWidget
	var $tab_GenericDataSourceExceptionDialogWidget = function(dataSourceConectionAttemptErrorResponse, onProceed, onCancel) {
		this.$title = tab.Strings.DataSourceGenericTitle;
		this.$dialog = null;
		$tab_BaseDataSourceConnectionErrorWidget.call(this, dataSourceConectionAttemptErrorResponse, onProceed, onCancel);
		var onRetryClick = ss.mkdel(this, function() {
			if (ss.isValue(this.onProceed)) {
				this.onProceed();
			}
			this.cleanup(null);
		});
		var widget = new $tab_GenericDataSourceErrorWidget(this.dataSourceConnectionAttemptErrorResponse.ErrorMessage, onRetryClick);
		this.$dialog = new $tab_DynamicallyLoadedContentIntoDomDialog(this.$title, widget.element);
		this.$dialog.add_closed(ss.mkdel(this, function(obj, args) {
			this.$onDialogClosed();
		}));
	};
	$tab_GenericDataSourceExceptionDialogWidget.__typeName = 'tab.GenericDataSourceExceptionDialogWidget';
	global.tab.GenericDataSourceExceptionDialogWidget = $tab_GenericDataSourceExceptionDialogWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.GenericDataSourceExceptionOverlayWidget
	var $tab_GenericDataSourceExceptionOverlayWidget = function(dataSourceConnectionAttemptErrorResponse, connectionAttemptInfo, onProceed) {
		this.$connectionAttemptInfo = null;
		$tab_BaseDataSourceConnectionErrorOverlayWidget.call(this, dataSourceConnectionAttemptErrorResponse, onProceed);
		this.$connectionAttemptInfo = connectionAttemptInfo;
	};
	$tab_GenericDataSourceExceptionOverlayWidget.__typeName = 'tab.GenericDataSourceExceptionOverlayWidget';
	global.tab.GenericDataSourceExceptionOverlayWidget = $tab_GenericDataSourceExceptionOverlayWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.GeoLocationNotificationView
	var $tab_GeoLocationNotificationView = function(viewModel) {
		$tab_NotificationView.call(this, viewModel);
		this.adjustMargin = false;
		this.element.addClass('tabGeoLocationNotification');
		if (ss.isValue(this.notificationViewModel.get_displayPosition())) {
			this.messageDom.parent().css('left', this.notificationViewModel.get_displayPosition().x + 'px');
			this.messageDom.parent().css('top', this.notificationViewModel.get_displayPosition().y + 'px');
		}
		this.updateContent();
	};
	$tab_GeoLocationNotificationView.__typeName = 'tab.GeoLocationNotificationView';
	global.tab.GeoLocationNotificationView = $tab_GeoLocationNotificationView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.HelpKeyboardShortcut
	var $tab_HelpKeyboardShortcut = function(uri) {
		this.$uri = null;
		tab.GlobalKeyboardShortcut.call(this);
		ss.Debug.assert(!tab.MiscUtil.isNullOrEmpty$3(uri), 'uri must be provided for the shortcut to open');
		this.$uri = uri;
	};
	$tab_HelpKeyboardShortcut.__typeName = 'tab.HelpKeyboardShortcut';
	global.tab.HelpKeyboardShortcut = $tab_HelpKeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.HitTargetColliders
	var $tab_HitTargetColliders = function() {
	};
	$tab_HitTargetColliders.__typeName = 'tab.HitTargetColliders';
	global.tab.HitTargetColliders = $tab_HitTargetColliders;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.HitTargetType
	var $tab_HitTargetType = function() {
	};
	$tab_HitTargetType.__typeName = 'tab.HitTargetType';
	global.tab.HitTargetType = $tab_HitTargetType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.HorizontalIteratorButtonTemplate
	var $tab_HorizontalIteratorButtonTemplate = function() {
		$tab_IteratorButtonTemplate.call(this, $tab_HorizontalIteratorButtonTemplate.$htmlTemplate);
	};
	$tab_HorizontalIteratorButtonTemplate.__typeName = 'tab.HorizontalIteratorButtonTemplate';
	global.tab.HorizontalIteratorButtonTemplate = $tab_HorizontalIteratorButtonTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.HttpsEmbedHttpAuthoringMessage
	var $tab_HttpsEmbedHttpAuthoringMessage = function(url) {
		spiff.Template.call(this, $($tab_HttpsEmbedHttpAuthoringMessage.$htmlTemplate));
		this.get_$message().text(tab.Strings.WebZoneHttpsEmbedHttpAuthoring);
		if (ss.startsWithString(url, 'http://')) {
			url = url.replace('http://', '');
		}
		this.get_$path().text(unescape(url));
	};
	$tab_HttpsEmbedHttpAuthoringMessage.__typeName = 'tab.HttpsEmbedHttpAuthoringMessage';
	global.tab.HttpsEmbedHttpAuthoringMessage = $tab_HttpsEmbedHttpAuthoringMessage;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.HttpsEmbedHttpViewMessage
	var $tab_HttpsEmbedHttpViewMessage = function(url) {
		spiff.Template.call(this, $($tab_HttpsEmbedHttpViewMessage.$htmlTemplate));
		this.get_$message().text(tab.Strings.WebZoneHttpsEmbedHttpView);
		this.get_$link().prop('href', url);
		this.get_$link().text(unescape(url));
	};
	$tab_HttpsEmbedHttpViewMessage.__typeName = 'tab.HttpsEmbedHttpViewMessage';
	global.tab.HttpsEmbedHttpViewMessage = $tab_HttpsEmbedHttpViewMessage;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IApiStorytellingClient
	var $tab_IApiStorytellingClient = function() {
	};
	$tab_IApiStorytellingClient.__typeName = 'tab.IApiStorytellingClient';
	global.tab.IApiStorytellingClient = $tab_IApiStorytellingClient;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IAppBannerView
	var $tab_IAppBannerView = function() {
	};
	$tab_IAppBannerView.__typeName = 'tab.IAppBannerView';
	global.tab.IAppBannerView = $tab_IAppBannerView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IClient
	var $tab_IClient = function() {
	};
	$tab_IClient.__typeName = 'tab.IClient';
	global.tab.IClient = $tab_IClient;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IDashboardViewport
	var $tab_IDashboardViewport = function() {
	};
	$tab_IDashboardViewport.__typeName = 'tab.IDashboardViewport';
	global.tab.IDashboardViewport = $tab_IDashboardViewport;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IDataAlertPreparer
	var $tab_IDataAlertPreparer = function() {
	};
	$tab_IDataAlertPreparer.__typeName = 'tab.IDataAlertPreparer';
	global.tab.IDataAlertPreparer = $tab_IDataAlertPreparer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IFilterTypeViewModel
	var $tab_IFilterTypeViewModel = function() {
	};
	$tab_IFilterTypeViewModel.__typeName = 'tab.IFilterTypeViewModel';
	global.tab.IFilterTypeViewModel = $tab_IFilterTypeViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewModels.IFlipboardViewModel
	var $tab_IFlipboardViewModel = function() {
	};
	$tab_IFlipboardViewModel.__typeName = 'tab.IFlipboardViewModel';
	global.tab.IFlipboardViewModel = $tab_IFlipboardViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IFontLoader
	var $tab_IFontLoader = function() {
	};
	$tab_IFontLoader.__typeName = 'tab.IFontLoader';
	global.tab.IFontLoader = $tab_IFontLoader;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IFrameTemplate
	var $tab_IFrameTemplate = function(iframeName, parentZoneViewModel) {
		spiff.Template.call(this, $($tab_IFrameTemplate.$htmlTemplate));
		this.get_frame().prop('name', iframeName);
		var containerCss = { position: 'absolute', top: 0 + 'px', left: 0 + 'px' };
		if (tsConfig.is_mobile) {
			if (BrowserSupport.BrowserSupport.IsSafari() || BrowserSupport.BrowserSupport.IsIos()) {
				this.get_container().css('-webkit-overflow-scrolling', 'touch');
				containerCss.height = parentZoneViewModel.get_contentHeight() + 'px';
				containerCss.width = parentZoneViewModel.get_contentWidth() + 'px';
			}
			containerCss.overflow = 'auto';
		}
		this.get_container().css(containerCss);
		this.get_frame().css({ border: '0px none' });
	};
	$tab_IFrameTemplate.__typeName = 'tab.IFrameTemplate';
	global.tab.IFrameTemplate = $tab_IFrameTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IHitTargetGeom
	var $tab_IHitTargetGeom = function() {
	};
	$tab_IHitTargetGeom.__typeName = 'tab.IHitTargetGeom';
	global.tab.IHitTargetGeom = $tab_IHitTargetGeom;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ImageUtil
	var $tab_ImageUtil = function() {
	};
	$tab_ImageUtil.__typeName = 'tab.ImageUtil';
	$tab_ImageUtil.scaleImage = function ImageUtil$ScaleImage(img, newWidth, newHeight, oldWidth, oldHeight) {
		var scaleSurface = document.createElement('canvas');
		scaleSurface.width = newWidth;
		scaleSurface.height = newHeight;
		if (newWidth > 0 && newHeight > 0) {
			var target = document.createElement('canvas');
			target.width = oldWidth;
			target.height = oldHeight;
			var context = ss.cast(target.getContext('2d'), CanvasRenderingContext2D);
			context.drawImage(img, 0, 0);
			var pixels = context.getImageData(0, 0, oldWidth, oldHeight);
			var scaleContext = ss.cast(scaleSurface.getContext('2d'), CanvasRenderingContext2D);
			var scalePixels = scaleContext.createImageData(newWidth, newHeight);
			$tab_ImageUtil.bilinearDownSampleAlgorithm(pixels, scalePixels);
			scaleContext.putImageData(scalePixels, 0, 0);
		}
		return scaleSurface;
	};
	$tab_ImageUtil.bilinearDownSampleAlgorithm = function ImageUtil$BilinearDownSampleAlgorithm(input, output) {
		var inputWidth = input.width;
		var intpuHeight = input.height;
		var mappedPixelWidth = inputWidth / output.width;
		var mappedPixelHeight = intpuHeight / output.height;
		var mpColErr = mappedPixelWidth;
		var mpRowErr = mappedPixelHeight;
		var inputData = input.data;
		var realOutput = output.data;
		var outputData = new Array(realOutput.length);
		for (var i = 0; i < outputData.length; i++) {
			outputData[i] = 0;
		}
		var pixelScale = 1 / (mappedPixelWidth * mappedPixelHeight);
		var inIndex = 0;
		var outIndex = 0;
		var midRow = false;
		var curRowBlendFactor, nextRowBlendFactor;
		curRowBlendFactor = nextRowBlendFactor = 0;
		var curScaleFactor = pixelScale;
		var eScaleFactor = 0;
		var sScaleFactor = 0;
		var seScaleFactor = 0;
		var rowStride = 4 * output.width;
		for (var r = 0; r < intpuHeight; r++) {
			mpColErr = mappedPixelWidth;
			for (var c = 0; c < inputWidth; c++) {
				var red = inputData[inIndex];
				var green = inputData[inIndex + 1];
				var blue = inputData[inIndex + 2];
				var alpha = inputData[inIndex + 3];
				curScaleFactor = pixelScale;
				if (midRow) {
					curScaleFactor = curRowBlendFactor;
					sScaleFactor = nextRowBlendFactor;
					if (mpColErr < 1) {
						sScaleFactor *= mpColErr;
					}
					var indexBase = outIndex + rowStride;
					outputData[indexBase] += red * sScaleFactor;
					outputData[indexBase + 1] += green * sScaleFactor;
					outputData[indexBase + 2] += blue * sScaleFactor;
					outputData[indexBase + 3] += alpha * sScaleFactor;
				}
				if (mpColErr < 1) {
					eScaleFactor = curScaleFactor * (1 - mpColErr);
					curScaleFactor *= mpColErr;
					if (midRow) {
						seScaleFactor = nextRowBlendFactor * (1 - mpColErr);
						var indexBase1 = outIndex + rowStride;
						outputData[indexBase1 + 4] += red * seScaleFactor;
						outputData[indexBase1 + 5] += green * seScaleFactor;
						outputData[indexBase1 + 6] += blue * seScaleFactor;
						outputData[indexBase1 + 7] += alpha * seScaleFactor;
					}
					outputData[outIndex + 4] += red * eScaleFactor;
					outputData[outIndex + 5] += green * eScaleFactor;
					outputData[outIndex + 6] += blue * eScaleFactor;
					outputData[outIndex + 7] += alpha * eScaleFactor;
				}
				outputData[outIndex++] += red * curScaleFactor;
				outputData[outIndex++] += green * curScaleFactor;
				outputData[outIndex++] += blue * curScaleFactor;
				outputData[outIndex++] += alpha * curScaleFactor;
				inIndex += 4;
				mpColErr -= 1;
				if (mpColErr < $tab_ImageUtil.$scaleErrorResetThreshold) {
					mpColErr += mappedPixelWidth;
				}
				else {
					outIndex -= 4;
				}
			}
			mpRowErr -= 1;
			if (mpRowErr < $tab_ImageUtil.$scaleErrorResetThreshold) {
				mpRowErr += mappedPixelHeight;
			}
			else {
				outIndex -= rowStride;
			}
			if (mpRowErr < 1) {
				midRow = true;
				curRowBlendFactor = mpRowErr / (mappedPixelWidth * mappedPixelHeight);
				nextRowBlendFactor = (1 - mpRowErr) / (mappedPixelWidth * mappedPixelHeight);
			}
			else {
				midRow = false;
			}
		}
		for (var i1 = 0; i1 < outputData.length; i1++) {
			realOutput[i1] = outputData[i1] + 0.5;
		}
	};
	global.tab.ImageUtil = $tab_ImageUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ImageZoneTemplate
	var $tab_ImageZoneTemplate = function() {
		spiff.Template.call(this, $($tab_ImageZoneTemplate.$htmlTemplate));
	};
	$tab_ImageZoneTemplate.__typeName = 'tab.ImageZoneTemplate';
	global.tab.ImageZoneTemplate = $tab_ImageZoneTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ImageZoneView
	var $tab_ImageZoneView = function(viewModel, parentZoneViewModel) {
		this.$internalImageNode = null;
		this.$parentZoneViewModel = null;
		this.$cachedPrescaledImage = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_ImageZoneViewModel]).call(this, viewModel, new $tab_ImageZoneTemplate());
		this.$parentZoneViewModel = parentZoneViewModel;
		this.get_$imageVM().add_newImageZone(ss.mkdel(this, this.handleNewImageZone));
		this.$parentZoneViewModel.add_resizeZone(ss.mkdel(this, this.$handleResizeZone));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.get_$imageVM().remove_newImageZone(ss.mkdel(this, this.handleNewImageZone));
			this.$parentZoneViewModel.remove_resizeZone(ss.mkdel(this, this.$handleResizeZone));
			this.$parentZoneViewModel = null;
		})));
	};
	$tab_ImageZoneView.__typeName = 'tab.ImageZoneView';
	$tab_ImageZoneView.$setupScaledImageNodeStyleAndSizeProperties = function ImageZoneView$SetupScaledImageNodeStyleAndSizeProperties(isSVGImage, zoneModel, naturalImageWidth, naturalImageHeight, imageNodeStyle, newWidth, newHeight) {
		if (naturalImageWidth / zoneModel.get_zoneCommonModel().get_contentWidth() >= naturalImageHeight / zoneModel.get_zoneCommonModel().get_contentHeight()) {
			newWidth.$ = zoneModel.get_zoneCommonModel().get_contentWidth();
			newHeight.$ = ss.Int32.trunc(zoneModel.get_zoneCommonModel().get_contentWidth() / naturalImageWidth * naturalImageHeight);
			if (isSVGImage) {
				imageNodeStyle.$ = { width: zoneModel.get_zoneCommonModel().get_contentWidth() + 'px', height: newHeight.$ + 'px' };
			}
			else {
				imageNodeStyle.$ = { width: zoneModel.get_zoneCommonModel().get_contentWidth() + 'px', height: 'auto' };
			}
		}
		else {
			newHeight.$ = zoneModel.get_zoneCommonModel().get_contentHeight();
			newWidth.$ = ss.Int32.trunc(zoneModel.get_zoneCommonModel().get_contentHeight() / naturalImageHeight * naturalImageWidth);
			if (isSVGImage) {
				imageNodeStyle.$ = { height: zoneModel.get_zoneCommonModel().get_contentHeight() + 'px', width: newWidth.$ + 'px' };
			}
			else {
				imageNodeStyle.$ = { height: zoneModel.get_zoneCommonModel().get_contentHeight() + 'px', width: 'auto' };
			}
		}
	};
	global.tab.ImageZoneView = $tab_ImageZoneView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ImageZoneViewModel
	var $tab_ImageZoneViewModel = function(imageZoneModel) {
		this.$imageZoneModel = null;
		this.$2$NewImageZoneField = null;
		spiff.BaseViewModel.call(this);
		this.$imageZoneModel = imageZoneModel;
		this.$imageZoneModel.add_newImageZone(ss.mkdel(this, this.handleNewImageZone));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$imageZoneModel.remove_newImageZone(ss.mkdel(this, this.handleNewImageZone));
		})));
	};
	$tab_ImageZoneViewModel.__typeName = 'tab.ImageZoneViewModel';
	global.tab.ImageZoneViewModel = $tab_ImageZoneViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IMovable
	var $tab_IMovable = function() {
	};
	$tab_IMovable.__typeName = 'tab.IMovable';
	global.tab.IMovable = $tab_IMovable;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ISlider
	var $tab_ISlider = function() {
	};
	$tab_ISlider.__typeName = 'tab.ISlider';
	global.tab.ISlider = $tab_ISlider;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IteratorButtons
	var $tab_IteratorButtons = function(scrollContents, horizontal, buttonSize) {
		this.$scrollContent = null;
		this.$template = null;
		this.$disposables = new tab.DisposableHolder();
		this.$isHorizontal = false;
		this.$scrollIncrement = 0;
		this.$scrollContent = scrollContents;
		if (horizontal) {
			this.$template = new $tab_HorizontalIteratorButtonTemplate();
		}
		else {
			this.$template = new $tab_VerticalIteratorButtonTemplate();
		}
		this.$scrollIncrement = $tab_IteratorButtons.$defaultScrollIncrememnt;
		this.$isHorizontal = horizontal;
		this.$template.$setArrows();
		this.$template.nextButton.width(buttonSize).height(buttonSize).css('line-height', buttonSize + 'px');
		this.$template.prevButton.width(buttonSize).height(buttonSize).css('line-height', buttonSize + 'px');
		this.$disposables.add$1(spiff.EventUtil.bindWithDispose(this.$template.nextButton, 'click', ss.mkdel(this, this.$scrollNext)));
		this.$disposables.add$1(spiff.EventUtil.bindWithDispose(this.$template.prevButton, 'click', ss.mkdel(this, this.$scrollPrev)));
		this.updateButtonState();
	};
	$tab_IteratorButtons.__typeName = 'tab.IteratorButtons';
	global.tab.IteratorButtons = $tab_IteratorButtons;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.IteratorButtonTemplate
	var $tab_IteratorButtonTemplate = function(htmlTemplate) {
		this.prevButton = null;
		this.nextButton = null;
		spiff.Template.call(this, $(htmlTemplate));
		this.prevButton = this.getElementBySelector('.tabCatLegendScrollPrev');
		this.nextButton = this.getElementBySelector('.tabCatLegendScrollNext');
	};
	$tab_IteratorButtonTemplate.__typeName = 'tab.IteratorButtonTemplate';
	global.tab.IteratorButtonTemplate = $tab_IteratorButtonTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ITooltipBehavior
	var $tab_ITooltipBehavior = function() {
	};
	$tab_ITooltipBehavior.__typeName = 'tab.ITooltipBehavior';
	global.tab.ITooltipBehavior = $tab_ITooltipBehavior;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.KeyboardHandlers
	var $tab_KeyboardHandlers = function() {
	};
	$tab_KeyboardHandlers.__typeName = 'tab.KeyboardHandlers';
	$tab_KeyboardHandlers.setAccessibilityKeyboardHandlers = function KeyboardHandlers$SetAccessibilityKeyboardHandlers(element, callback) {
		return spiff.EventUtil.bindWithDispose($(element), 'keyup', function(e) {
			$tab_KeyboardHandlers.$genericKeyUpHandler(e, callback);
		});
	};
	$tab_KeyboardHandlers.$genericKeyUpHandler = function KeyboardHandlers$GenericKeyUpHandler(e, callback) {
		switch (e.which) {
			case 32:
			case 13: {
				if (!ss.staticEquals(callback, null)) {
					callback();
				}
				break;
			}
			default: {
				return;
			}
		}
		e.preventDefault();
		e.stopPropagation();
	};
	global.tab.KeyboardHandlers = $tab_KeyboardHandlers;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.LegacyErrorDialog
	var $tab_LegacyErrorDialog = function(props) {
		React.Component.call(this, props);
	};
	$tab_LegacyErrorDialog.__typeName = 'tab.LegacyErrorDialog';
	global.tab.LegacyErrorDialog = $tab_LegacyErrorDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.MapScaleComponent
	var $tab_MapScaleComponent = function(props, context) {
		React.Component.call(this, props, context);
	};
	$tab_MapScaleComponent.__typeName = 'tab.MapScaleComponent';
	global.tab.MapScaleComponent = $tab_MapScaleComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Spiff.UI.MapScaleViewModel
	var $tab_MapScaleViewModel = function(mapScaleModel) {
		this.$mapScaleInfoModel = null;
		ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]).call(this);
		this.$mapScaleInfoModel = mapScaleModel;
		this.$mapScaleInfoModel.add_updatedMapScaleInfo(ss.mkdel(this, this.handleUpdatedMapScaleInfo));
		this.disposables.add(ss.mkdel(this, function() {
			this.$mapScaleInfoModel.remove_updatedMapScaleInfo(ss.mkdel(this, this.handleUpdatedMapScaleInfo));
		}));
	};
	$tab_MapScaleViewModel.__typeName = 'tab.MapScaleViewModel';
	global.tab.MapScaleViewModel = $tab_MapScaleViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.MenuItemTelemetryConfigOptions
	var $tab_MenuItemTelemetryConfigOptions = function() {
		this.menuItems = null;
		this.$1$CommandsField = null;
		this.$1$MenuItemField = null;
		this.$1$MenuPrefixField = null;
		this.$1$MenuTextMayBeSensitiveField = false;
	};
	$tab_MenuItemTelemetryConfigOptions.__typeName = 'tab.MenuItemTelemetryConfigOptions';
	global.tab.MenuItemTelemetryConfigOptions = $tab_MenuItemTelemetryConfigOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.MenuItemTelemetryInfo
	var $tab_MenuItemTelemetryInfo = function() {
		this.flatCommandItemList = null;
		this.fullMenuItemName = null;
		this.$1$MenuItemPrefixField = null;
		this.$1$CommandIndexInFlattenedListField = 0;
		this.$1$CommandReadIdField = null;
		this.$1$CommandNameField = null;
	};
	$tab_MenuItemTelemetryInfo.__typeName = 'tab.MenuItemTelemetryInfo';
	global.tab.MenuItemTelemetryInfo = $tab_MenuItemTelemetryInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.MethodAdded
	var $tab_MethodAdded = function() {
	};
	$tab_MethodAdded.__typeName = 'tab.MethodAdded';
	global.tab.MethodAdded = $tab_MethodAdded;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Metrics
	var $tab_Metrics = function() {
	};
	$tab_Metrics.__typeName = 'tab.Metrics';
	$tab_Metrics.get_scrollW = function Metrics$get_ScrollW() {
		return $tab_Metrics.get_$scrollBarSize();
	};
	$tab_Metrics.get_minScrollWidth = function Metrics$get_MinScrollWidth() {
		if (BrowserSupport.BrowserSupport.IsSafari() || BrowserSupport.BrowserSupport.IsMac()) {
			return 60;
		}
		return $tab_Metrics.get_scrollW() * 2;
	};
	$tab_Metrics.get_scrollH = function Metrics$get_ScrollH() {
		return $tab_Metrics.get_$scrollBarSize();
	};
	$tab_Metrics.get_minScrollHeight = function Metrics$get_MinScrollHeight() {
		if (BrowserSupport.BrowserSupport.IsSafari() || BrowserSupport.BrowserSupport.IsMac()) {
			return 60;
		}
		return $tab_Metrics.get_scrollH() * 2;
	};
	$tab_Metrics.get_$scrollBarSize = function Metrics$get_ScrollBarSize() {
		return ss.unbox(ss.cast(tab.LazyUtil.lazyInitStaticField($tab_Metrics, '_scrollBarSize', function() {
			return $tab_Metrics.$getScrollbarSize();
		}), ss.Int32));
	};
	$tab_Metrics.$getScrollbarSize = function Metrics$GetScrollbarSize() {
		if (tsConfig.is_mobile) {
			return 0;
		}
		var outer = document.createElement('div');
		var style = outer.style;
		style.width = '100px';
		style.height = '100px';
		style.overflow = 'scroll';
		style.position = 'absolute';
		style.top = '0px';
		style.filter = 'alpha(opacity=0)';
		style.opacity = '0';
		style.left = '0px';
		var inner = document.createElement('div');
		inner.style.width = '400px';
		inner.style.height = '400px';
		outer.appendChild(inner);
		document.body.appendChild(outer);
		var width = outer.offsetWidth - outer.clientWidth;
		document.body.removeChild(outer);
		outer.removeChild(inner);
		outer = inner = null;
		width = ((width > 0) ? width : 9);
		return width;
	};
	global.tab.Metrics = $tab_Metrics;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ModifierKeyState
	var $tab_ModifierKeyState = function() {
		$(document).on('keydown.ModifierKeyState keyup.ModifierKeyState mouseover.ModifierKeyState', ss.mkdel(this, this.$handleEvent));
	};
	$tab_ModifierKeyState.__typeName = 'tab.ModifierKeyState';
	$tab_ModifierKeyState.add_modifierKeysChanged = function ModifierKeyState$add_ModifierKeysChanged(value) {
		$tab_ModifierKeyState.$1$ModifierKeysChangedField = ss.delegateCombine($tab_ModifierKeyState.$1$ModifierKeysChangedField, value);
	};
	$tab_ModifierKeyState.remove_modifierKeysChanged = function ModifierKeyState$remove_ModifierKeysChanged(value) {
		$tab_ModifierKeyState.$1$ModifierKeysChangedField = ss.delegateRemove($tab_ModifierKeyState.$1$ModifierKeysChangedField, value);
	};
	$tab_ModifierKeyState.fireModifierKeysChanged = function ModifierKeyState$FireModifierKeysChanged(e) {
		if (!ss.staticEquals($tab_ModifierKeyState.$1$ModifierKeysChangedField, null)) {
			$tab_ModifierKeyState.$1$ModifierKeysChangedField(e);
		}
	};
	global.tab.ModifierKeyState = $tab_ModifierKeyState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ModuleInterfaces.ModulesRegistration
	var $tab_ModulesRegistration = function() {
	};
	$tab_ModulesRegistration.__typeName = 'tab.ModulesRegistration';
	$tab_ModulesRegistration.$registerLegacyDojoUI = function ModulesRegistration$RegisterLegacyDojoUI(onDemandModuleLoadEnabled) {
		var legacyDojoUIDependencies = [];
		$tab_ModulesRegistration.$registerDojoToolkit(legacyDojoUIDependencies);
		var legacyDojoUIModule;
		if (tsConfig.debugMode || tsConfig.isUnitTestRun) {
			var BaseFile = 'vqllegacydojoui.debug';
			var legacyDojoUIBase = tab.ModuleManager.registerDependencyModule(BaseFile, BaseFile).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
			if (tsConfig.is_mobile) {
				legacyDojoUIModule = tab.ModuleManager.register(tab.ILegacyDojoUIModule).call(null, 'LegacyDojoUIMobile', null).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
			}
			else {
				legacyDojoUIModule = tab.ModuleManager.register(tab.ILegacyDojoUIModule).call(null, 'LegacyDojoUIWeb', null).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
			}
			legacyDojoUIDependencies.push(legacyDojoUIBase);
		}
		else if (tsConfig.is_mobile) {
			legacyDojoUIModule = tab.ModuleManager.register(tab.ILegacyDojoUIModule).call(null, 'LegacyDojoUIMobile', null).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
		}
		else {
			legacyDojoUIModule = tab.ModuleManager.register(tab.ILegacyDojoUIModule).call(null, 'LegacyDojoUIWeb', null).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
		}
		for (var $t1 = 0; $t1 < legacyDojoUIDependencies.length; $t1++) {
			var dojoUIDependency = legacyDojoUIDependencies[$t1];
			legacyDojoUIModule.addDependency(dojoUIDependency);
		}
		legacyDojoUIModule.waitUntilModuleReadyFunc = function() {
			var deferred = $.Deferred();
			dojo.addOnLoad(function() {
				deferred.resolve();
			});
			return deferred;
		};
	};
	$tab_ModulesRegistration.$registerDojoToolkit = function ModulesRegistration$RegisterDojoToolkit(legacyDojoUIDependencies) {
		var DebugSuffix = '.js.uncompressed';
		var ClientJsTemplate = 'built-dojo/tableau/client{0}';
		var PathToDojo = 'built-dojo/dojo/dojo';
		var clientFlavor = (tsConfig.is_mobile ? 'mobile' : 'web');
		var pathToClientJs = ss.formatString(ClientJsTemplate, clientFlavor);
		var dojo = tab.ModuleManager.registerRawJsModule(PathToDojo, PathToDojo, 'built-dojo/dojo/dojo.js.uncompressed').moduleBeingConfigured;
		var clientJs = tab.ModuleManager.registerRawJsModule(pathToClientJs, pathToClientJs, pathToClientJs + DebugSuffix).moduleBeingConfigured;
		legacyDojoUIDependencies.push(dojo);
		legacyDojoUIDependencies.push(clientJs);
	};
	$tab_ModulesRegistration.$registerCommentingModule = function ModulesRegistration$RegisterCommentingModule(onDemandModuleLoadEnabled) {
		var CommentingLibrary = 'commenting';
		var commentingLibJsModuleInfo = tab.ModuleManager.registerRawJsModule(CommentingLibrary, 'commenting.min', CommentingLibrary).andLoadOnDemandIf(onDemandModuleLoadEnabled).andExportResultAs('Commenting').moduleBeingConfigured;
		var commentingJsModuleInfo = tab.ModuleManager.register(tab.ICommentingFactory).call(null, 'Commenting', null).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
		$tab_ModulesRegistration.$addCodeMirrorAsDependency(commentingJsModuleInfo);
		commentingJsModuleInfo.addDependency(commentingLibJsModuleInfo);
	};
	$tab_ModulesRegistration.$addCssDependency = function ModulesRegistration$AddCssDependency(module, minifiedFilename, debugFilename) {
		var basePath = tsConfig.external_static_asset_prefix + '/css/';
		var finalizedCssFileName = (tsConfig.debugMode ? debugFilename : minifiedFilename);
		module.addDependencyOnCssFile(basePath + finalizedCssFileName + '.css');
	};
	$tab_ModulesRegistration.$addCodeMirrorAsDependency = function ModulesRegistration$AddCodeMirrorAsDependency(parentJsModuleInfo) {
		var module = tab.ModuleManager.registerRawJsModule('codemirror', 'codemirror-min', 'codemirror').andExportResultAs('CodeMirror').moduleBeingConfigured;
		$tab_ModulesRegistration.$addCssDependency(module, 'codemirror-min', 'codemirror');
		parentJsModuleInfo.addDependency(module);
	};
	$tab_ModulesRegistration.$registerRichTextEditingModule = function ModulesRegistration$RegisterRichTextEditingModule() {
		tab.ModuleManager.registerRawJsModule('@tableau/rich-text-editor', 'rich-text-editor.min', 'rich-text-editor').andShowLoadingIndicator();
	};
	$tab_ModulesRegistration.$registerBackgroundMapModules = function ModulesRegistration$RegisterBackgroundMapModules(onDemandModuleLoadEnabled) {
		tab.ModuleManager.registerTypicalRawJsModule($tab_ModulesRegistration.leafletLibFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		var MapboxGLLibDebugSuffix = '-dev';
		var MapboxGLNamespaceName = 'mapboxgl';
		var MapboxGLCssFile = '/css/mapbox-gl.css';
		tab.ModuleManager.registerRawJsModule($tab_ModulesRegistration.mapboxGLLibFileName, $tab_ModulesRegistration.mapboxGLLibFileName, 'mapbox-gl-dev').andLoadOnDemandIf(onDemandModuleLoadEnabled).andExportResultAs(MapboxGLNamespaceName).moduleBeingConfigured.addDependencyOnCssFile(tsConfig.external_static_asset_prefix + MapboxGLCssFile);
	};
	$tab_ModulesRegistration.$registerNaturalLanguageModules = function ModulesRegistration$RegisterNaturalLanguageModules(onDemandModuleLoadEnabled) {
		var inputBoxModule = tab.ModuleManager.registerTypicalRawJsModule($tab_ModulesRegistration.naturalLanguageInputBoxLibFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled).andExportResultAs('NaturalLanguageInputBox').moduleBeingConfigured;
		var fieldsPanelModule = tab.ModuleManager.registerTypicalRawJsModule($tab_ModulesRegistration.naturalLanguageFieldsPanelLibFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled).andExportResultAs('NaturalLanguageFieldsPanel').moduleBeingConfigured;
		var layoutModule = tab.ModuleManager.registerTypicalRawJsModule($tab_ModulesRegistration.naturalLanguageLayoutLibFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
		layoutModule.addDependency(inputBoxModule);
		layoutModule.addDependency(fieldsPanelModule);
	};
	$tab_ModulesRegistration.$registerSchemaViewerModules = function ModulesRegistration$RegisterSchemaViewerModules(onDemandModuleLoadEnabled) {
		tab.ModuleManager.registerTypicalRawJsModule($tab_ModulesRegistration.schemaViewerLibFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled);
	};
	$tab_ModulesRegistration.$registerDataAlertModules = function ModulesRegistration$RegisterDataAlertModules(onDemandModuleLoadEnabled) {
		var dataAlertsLibJsModuleInfo = tab.ModuleManager.registerTypicalRawJsModule($tab_ModulesRegistration.dataAlertsPanelLibFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled).andExportResultAs('DataAlertsPanel').moduleBeingConfigured;
		var dataAlertsJsModuleInfo = tab.ModuleManager.register(tab.IDataAlertsPanelFactory).call(null, 'DataAlertsPanel', null).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
		dataAlertsJsModuleInfo.addDependency(dataAlertsLibJsModuleInfo);
		$tab_ModulesRegistration.$addCodeMirrorAsDependency(dataAlertsJsModuleInfo);
	};
	$tab_ModulesRegistration.$registerSharingModule = function ModulesRegistration$RegisterSharingModule(onDemandModuleLoadEnabled) {
		var vizclientModuleFactoryPrefix = 'ShareDialog';
		var exportedModuleNamespace = 'ShareDialog';
		var sharingModuleInputFileName = 'share-dialog';
		var sharingSampleLibJsModuleInfo = tab.ModuleManager.registerTypicalRawJsModule(sharingModuleInputFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled).andExportResultAs(exportedModuleNamespace).moduleBeingConfigured;
		var sharingSampleJsModuleInfo = tab.ModuleManager.register(tab.IShareDialogFactory).call(null, vizclientModuleFactoryPrefix, null).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
		sharingSampleJsModuleInfo.addDependency(sharingSampleLibJsModuleInfo);
	};
	global.tab.ModulesRegistration = $tab_ModulesRegistration;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.NativeFontLoader
	var $tab_NativeFontLoader = function() {
		this.$fontFaces = null;
		this.$fontPromises = null;
		this.$1$FontsReadyField = null;
		this.$1$FontDownloadingField = null;
		this.$fontFaces = {};
		this.$fontPromises = [];
	};
	$tab_NativeFontLoader.__typeName = 'tab.NativeFontLoader';
	$tab_NativeFontLoader.get_$documentFonts = function NativeFontLoader$get_DocumentFonts() {
		return document['fonts'];
	};
	global.tab.NativeFontLoader = $tab_NativeFontLoader;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.ApiDomain.NativePresModelsFactory
	var $tab_NativePresModelsFactory = function() {
	};
	$tab_NativePresModelsFactory.__typeName = 'tab.NativePresModelsFactory';
	$tab_NativePresModelsFactory.newAddInLocatorPresModel = function NativePresModelsFactory$NewAddInLocatorPresModel(apiAddInLocator) {
		var addInLocator = new Object();
		addInLocator.addInInstanceId = apiAddInLocator.instanceId;
		addInLocator.sheetPath = new Object();
		addInLocator.sheetPath.flipboardZoneId = apiAddInLocator.dashboardPath.flipboardZoneID;
		addInLocator.sheetPath.isDashboard = apiAddInLocator.dashboardPath.isDashboard;
		addInLocator.sheetPath.sheetName = apiAddInLocator.dashboardPath.sheetName;
		addInLocator.sheetPath.storyboard = apiAddInLocator.dashboardPath.storyboard;
		addInLocator.sheetPath.storyPointId = apiAddInLocator.dashboardPath.storyPointID;
		return addInLocator;
	};
	$tab_NativePresModelsFactory.newVisualIdPresModel = function NativePresModelsFactory$NewVisualIdPresModel(apiVisualId) {
		var visualId = new Object();
		visualId.worksheet = apiVisualId.worksheet;
		visualId.dashboard = apiVisualId.dashboard;
		visualId.storyboard = apiVisualId.storyboard;
		visualId.storyPointId = apiVisualId.storyPointID;
		visualId.flipboardZoneId = apiVisualId.flipboardZoneID;
		return visualId;
	};
	global.tab.NativePresModelsFactory = $tab_NativePresModelsFactory;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.NaturalLanguageInfo
	var $tab_NaturalLanguageInfo = function() {
		this.serverBuild = null;
		this.siteId = null;
		this.siteLuid = null;
		this.pod = null;
		this.publishedDatasourceId = null;
		this.unifiedDatasourceId = null;
		this.isReleaseStage = false;
		this.externalVersion = null;
		this.ownerId = null;
	};
	$tab_NaturalLanguageInfo.__typeName = 'tab.NaturalLanguageInfo';
	global.tab.NaturalLanguageInfo = $tab_NaturalLanguageInfo;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.NaturalLanguageModuleUtil
	var $tab_NaturalLanguageModuleUtil = function() {
	};
	$tab_NaturalLanguageModuleUtil.__typeName = 'tab.NaturalLanguageModuleUtil';
	$tab_NaturalLanguageModuleUtil.whenNaturalLanguageLayoutModuleLoaded = function NaturalLanguageModuleUtil$WhenNaturalLanguageLayoutModuleLoaded(module) {
		if ($('.tab-nlbox-layout').length !== 0) {
			return;
		}
		$tab_ServerFontLoader.downloadAdditionalNLPFonts();
		var parent = $("<div class='tab-nlbox-layout'></div>").get(0);
		$(document.body).append(parent);
		tab.WorkgroupServerCommands.get_getSessionInfo().done(function(info) {
			$tab_NaturalLanguageModuleUtil.$afterGetSessionInfo(info, module, parent);
		}).fail(function(error) {
			$tab_NaturalLanguageModuleUtil.$afterGetSessionInfo(null, module, parent);
		});
	};
	$tab_NaturalLanguageModuleUtil.$afterGetSessionInfo = function NaturalLanguageModuleUtil$AfterGetSessionInfo(sessionInfo, module, parent) {
		var info = $tab_NaturalLanguageModuleUtil.$buildNaturalLanguageInfo(sessionInfo);
		tab.WorkgroupServerCommands.fetchDataSourcesByRepositoryUrl(function(sources) {
			info.publishedDatasourceId = ((sources.length > 0) ? (sources[0].get_datasourceId() + '') : '');
			info.unifiedDatasourceId = ((sources.length > 0) ? (sources[0].get_id() + '') : '');
			info.ownerId = ((sources.length > 0) ? (sources[0].get_ownerId() + '') : '');
			tab.ModuleManager.load(tab.ISavingModule).call(null, []).done(function(savingModule) {
				$tab_NaturalLanguageModuleUtil.$renderNaturalLanguageLayout(module, savingModule, parent, info);
			});
		}, $tab_NaturalLanguageModuleUtil.$datasourceUrlFromTsConfig());
	};
	$tab_NaturalLanguageModuleUtil.$buildNaturalLanguageInfo = function NaturalLanguageModuleUtil$BuildNaturalLanguageInfo(sessionInfo) {
		if (ss.isNullOrUndefined(sessionInfo)) {
			var $t1 = new $tab_NaturalLanguageInfo();
			$t1.serverBuild = 'UNKNOWN BUILD';
			$t1.siteId = '';
			$t1.siteLuid = '';
			$t1.pod = '(Unknown POD)';
			$t1.isReleaseStage = true;
			$t1.externalVersion = '';
			return $t1;
		}
		var siteInfo = sessionInfo.site;
		var serverInfo = sessionInfo.server;
		var versionInfo = serverInfo.version;
		var $t2 = new $tab_NaturalLanguageInfo();
		$t2.serverBuild = versionInfo.build;
		$t2.siteId = siteInfo.id + '';
		$t2.siteLuid = siteInfo.luid;
		$t2.pod = serverInfo.logicalServerInstanceId;
		$t2.isReleaseStage = versionInfo.isReleaseStage;
		$t2.externalVersion = versionInfo.externalVersion.major + '.' + versionInfo.externalVersion.minor + '.' + versionInfo.externalVersion.patch;
		return $t2;
	};
	$tab_NaturalLanguageModuleUtil.$renderNaturalLanguageLayout = function NaturalLanguageModuleUtil$RenderNaturalLanguageLayout(module, savingModule, parent, info) {
		var telemetryData = { buildVersion: info.serverBuild, deploymentType: $tab_NaturalLanguageModuleUtil.$deploymentTypeFromTsConfig(), displayName: tsConfig.current_user_friendly_name, domainName: tsConfig.current_user_domain_name, externalVersion: info.externalVersion, isReleaseStage: info.isReleaseStage, pod: info.pod, sessionId: tsConfig.sessionid, siteLuid: info.siteLuid, userId: tsConfig.current_user_id, userEmail: ss.coalesce(tsConfig.current_user_email, ''), username: tsConfig.current_user_name };
		var $t1 = [];
		$t1.push({ ns: 'tabdoc', cmd: 'get-datasource-status' });
		$t1.push({ ns: 'tabdoc', cmd: 'get-suggestions' });
		$t1.push({ ns: 'tabdoc', cmd: 'interpret-query' });
		$t1.push({ ns: 'tabdoc', cmd: 'interpret-scoped-query' });
		$t1.push({ ns: 'tabdoc', cmd: 'nlp-log-perf' });
		$t1.push({ ns: 'tabdoc', cmd: 'update-term' });
		$t1.push({ ns: 'tabdoc', cmd: 'validate-synonyms' });
		$t1.push({ ns: 'tabdoc', cmd: 'initialize-conversation' });
		$t1.push({ ns: 'tabdoc', cmd: 'discourse-parse' });
		$t1.push({ ns: 'tabdoc', cmd: 'upsert-nlpquery-data' });
		$t1.push({ ns: 'tabdoc', cmd: 'insert-nlpvisualization-data' });
		var nonBlockingCommands = $t1;
		var savingActions = { isAllowed: tsConfig.allow_save_as, save: $tab_NaturalLanguageModuleUtil.$save, saveAs: $tab_NaturalLanguageModuleUtil.$saveAs, promptToSave: $tab_NaturalLanguageModuleUtil.$promptToSave };
		var sheetActions = {
			createNewSheet: function() {
				return tab.SheetClientCommandPromises.createSheet(null, true);
			},
			switchToThisSheet: function(sheetName) {
				return tab.SheetClientCommandPromises.goToSheet(sheetName);
			}
		};
		var props = {
			dashboardSpacer: function() {
				return $tab_WorkbookView.findDashboardContainer().get(0);
			},
			dashboardViewport: function() {
				return $($tab_ApplicationView.dashboardViewportSelector).get(0);
			},
			datasourceName: tsConfig.workbookName,
			datasourceUrl: $tab_NaturalLanguageModuleUtil.$datasourceUrlFromTsConfig(),
			featureStatus: $tab_NaturalLanguageModuleUtil.$getFeatureStatus(),
			feedbackFormMode: $tab_NaturalLanguageModuleUtil.$feedbackModeFromTsConfig(),
			finishedNlpOnboardingStage: $tab_NaturalLanguageModuleUtil.$nlpOnboardingStageFromTsConfig(),
			helpUrl: tab.UriUtil.makeHelpUri('ask-data', ''),
			mainLayoutType: $tab_NaturalLanguageModuleUtil.$mainLayoutTypeFromTsConfig(),
			pluginPresLayer: new tab.CustomUIBlockingPluginPresentationLayer(nonBlockingCommands),
			publishedDatasourceId: info.publishedDatasourceId,
			savingActions: savingActions,
			sheetActions: sheetActions,
			siteId: info.siteId,
			siteRoot: tsConfig.site_root,
			siteUrlName: tsConfig.site_url_name,
			telemetryData: telemetryData,
			updateUserNlpOnboardingStage: $tab_NaturalLanguageModuleUtil.$updateUserNlpOnboardingStage,
			unifiedDatasourceId: info.unifiedDatasourceId,
			worksheetName: tsConfig.current_sheet_name,
			userIsDatasourceAdmin: tsConfig.is_admin || ss.referenceEquals(tsConfig.current_user_id + '', info.ownerId)
		};
		$tab_NaturalLanguageModuleUtil.$saveController = savingModule.instance();
		ReactDOM.render(React.createElement(module, props), parent);
	};
	$tab_NaturalLanguageModuleUtil.$save = function NaturalLanguageModuleUtil$Save() {
		return $tab_NaturalLanguageModuleUtil.$saveController.saveNlpWorkbook(false, '');
	};
	$tab_NaturalLanguageModuleUtil.$saveAs = function NaturalLanguageModuleUtil$SaveAs(suggestedWorkbookName) {
		return $tab_NaturalLanguageModuleUtil.$saveController.saveNlpWorkbook(true, suggestedWorkbookName);
	};
	$tab_NaturalLanguageModuleUtil.$promptToSave = function NaturalLanguageModuleUtil$PromptToSave(redirectUrlOnDecline) {
	};
	$tab_NaturalLanguageModuleUtil.$updateUserNlpOnboardingStage = function NaturalLanguageModuleUtil$UpdateUserNlpOnboardingStage(nlpOnboardingStage) {
		var parameters = ss.mkdict(['nlpOnboardingStage', nlpOnboardingStage]);
		var deferred = $.Deferred();
		var options = tab.VizPortalServer.createRequest('updateUserNlpOnboardingStage', parameters, function(resultsFromServer) {
			deferred.resolve(resultsFromServer);
		}, function() {
			deferred.reject();
		});
		tab.XhrUtil.helper(options, null);
		return deferred;
	};
	$tab_NaturalLanguageModuleUtil.$datasourceUrlFromTsConfig = function NaturalLanguageModuleUtil$DatasourceUrlFromTsConfig() {
		return ss.replaceAllString(tsConfig.workbook_repo_url, 'ds:', '');
	};
	$tab_NaturalLanguageModuleUtil.$mainLayoutTypeFromTsConfig = function NaturalLanguageModuleUtil$MainLayoutTypeFromTsConfig() {
		switch (tsConfig.nlpLayoutMode) {
			case 'exploration': {
				return 'explorationPage';
			}
			case 'landing': {
				return 'landingPage';
			}
			default: {
				tab.Log.get(tsConfig.nlpLayoutMode).error('Unrecognized NLP layout mode', []);
				return 'landingPage';
			}
		}
	};
	$tab_NaturalLanguageModuleUtil.$feedbackModeFromTsConfig = function NaturalLanguageModuleUtil$FeedbackModeFromTsConfig() {
		switch (tsConfig.nlpFeedbackMode) {
			case 'full': {
				return 'full';
			}
			case 'withSlack': {
				return 'withSlack';
			}
			case 'bigQueryOnly': {
				return 'bigQueryOnly';
			}
			case 'none': {
				return 'none';
			}
			default: {
				tab.Log.get(tsConfig.nlpLayoutMode).error('Unrecognized NLP feedback form mode', []);
				return 'none';
			}
		}
	};
	$tab_NaturalLanguageModuleUtil.$nlpOnboardingStageFromTsConfig = function NaturalLanguageModuleUtil$NlpOnboardingStageFromTsConfig() {
		switch (tsConfig.current_user_nlp_onboarding_stage) {
			case 'None': {
				return 'None';
			}
			case 'FieldsPanel': {
				return 'FieldsPanel';
			}
			case 'NLBox': {
				return 'NLBox';
			}
			case 'Phrase': {
				return 'Phrase';
			}
			case 'Help': {
				return 'Help';
			}
			default: {
				tab.Log.get(tsConfig.current_user_nlp_onboarding_stage).error('Unrecognized NLP on-boarding stage', []);
				return 'None';
			}
		}
	};
	$tab_NaturalLanguageModuleUtil.$deploymentTypeFromTsConfig = function NaturalLanguageModuleUtil$DeploymentTypeFromTsConfig() {
		return (tsConfig.is_saas ? 'online' : 'onPrem');
	};
	$tab_NaturalLanguageModuleUtil.$getFeatureStatus = function NaturalLanguageModuleUtil$GetFeatureStatus() {
		var featureFlagIds = ['NLConversation', 'NLHeatMap', 'NLMultipleSheets', 'NLPreviewDiscourse', 'NLDatasourceAnalytics', 'NLValueSynonyms'];
		var featureStatus = {};
		for (var $t1 = 0; $t1 < featureFlagIds.length; $t1++) {
			var id = featureFlagIds[$t1];
			featureStatus[id.toString()] = tab.FeatureFlags.isEnabled(id);
		}
		return featureStatus;
	};
	global.tab.NaturalLanguageModuleUtil = $tab_NaturalLanguageModuleUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.NeedRemoteTooltip
	var $tab_NeedRemoteTooltip = function() {
	};
	$tab_NeedRemoteTooltip.__typeName = 'tab.NeedRemoteTooltip';
	global.tab.NeedRemoteTooltip = $tab_NeedRemoteTooltip;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.NotificationView
	var $tab_NotificationView = function(viewModel) {
		this.notificationViewModel = null;
		this.messageDom = null;
		this.closeDom = null;
		this.$pendingDispose = false;
		this.adjustMargin = true;
		ss.makeGenericType(spiff.BaseView$1, [$tab_NotificationViewModel]).call(this, viewModel, spiff.Template.fromHtml("<div class='tabNotification'>"));
		this.notificationViewModel = viewModel;
		this.element.attr('role', 'alert');
		this.messageDom = $('<div>').addClass('tabNotificationMessage').appendTo(this.element);
		var dismissNotificationDom = $('<div>').addClass('tabNotificationClose').attr('tabindex', '0').attr('aria-label', tab.Strings.AccessbilityNotificationButtonDismissLabel).attr('role', 'button').keydown(ss.mkdel(this, function(e) {
			if (e.which === 13 || e.which === 32) {
				e.preventDefault();
				e.stopPropagation();
				this.$handleCloseClicked(e);
			}
		}));
		this.closeDom = spiff.ClickHandler.targetAndClick(dismissNotificationDom, ss.mkdel(this, this.$handleCloseClicked)).get_target();
		this.closeDom.appendTo(this.element);
		this.notificationViewModel.add_shown(ss.mkdel(this, this.shown));
		this.notificationViewModel.add_hidden(ss.mkdel(this, this.hidden));
	};
	$tab_NotificationView.__typeName = 'tab.NotificationView';
	global.tab.NotificationView = $tab_NotificationView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.NotificationViewModel
	var $tab_NotificationViewModel = function() {
		this.$message = null;
		this.$visible = false;
		this.$autoHideTimeout = 5000;
		this.$autoHideHandle = 0;
		this.$displayPosition = null;
		this.$2$ShownField = null;
		this.$2$HiddenField = null;
		spiff.BaseViewModel.call(this);
	};
	$tab_NotificationViewModel.__typeName = 'tab.NotificationViewModel';
	$tab_NotificationViewModel.$createDefaultViewModel = function NotificationViewModel$CreateDefaultViewModel(message, timeout) {
		var vm = new $tab_NotificationViewModel();
		vm.set_message(message);
		if (ss.isValue(timeout)) {
			vm.set_autoHideTimeout(ss.unbox(timeout));
		}
		return vm;
	};
	$tab_NotificationViewModel.showGeoLocationNotification = function NotificationViewModel$ShowGeoLocationNotification(message, timeout, location) {
		var vm = $tab_NotificationViewModel.$createDefaultViewModel(message, timeout);
		vm.set_displayPosition(location);
		tab.ObjectRegistry.newView($tab_GeoLocationNotificationView).call(null, [vm]);
		EventUtils.GlobalUIEvents.add_FirstTouch(ss.mkdel(vm, vm.$dismissNotificationView));
		EventUtils.GlobalUIEvents.add_DismissTemporaryElements(ss.mkdel(vm, vm.hide));
		vm.disposables.add$1(new tab.CallOnDispose(function() {
			EventUtils.GlobalUIEvents.remove_FirstTouch(ss.mkdel(vm, vm.$dismissNotificationView));
			EventUtils.GlobalUIEvents.remove_DismissTemporaryElements(ss.mkdel(vm, vm.hide));
		}));
		vm.disposeOnHide();
		vm.show();
	};
	$tab_NotificationViewModel.showNotification = function NotificationViewModel$ShowNotification(message, timeout) {
		$tab_NotificationViewModel.showCustomNotification($tab_NotificationView).call(null, message, timeout);
	};
	$tab_NotificationViewModel.showCustomNotification = function(T) {
		return function NotificationViewModel$ShowCustomNotification(message, timeout) {
			var vm = $tab_NotificationViewModel.$createDefaultViewModel(message, timeout);
			tab.ObjectRegistry.newView(T).call(null, [vm]);
			vm.disposeOnHide();
			vm.show();
			return vm;
		};
	};
	global.tab.NotificationViewModel = $tab_NotificationViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.OverlayImage
	var $tab_OverlayImage = function(parent, imageSource) {
		this.$parent = null;
		this.$location = null;
		spiff.Widget.call(this, $($tab_OverlayImage.$htmlTemplate));
		this.$parent = $(parent);
		this.element.on('load', ss.mkdel(this, function() {
			this.$updateOverlayImageLocation();
		}));
		this.element.attr('src', imageSource);
	};
	$tab_OverlayImage.__typeName = 'tab.OverlayImage';
	global.tab.OverlayImage = $tab_OverlayImage;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.PagableGroupListComponent
	var $tab_PagableGroupListComponent = function(props) {
		ss.makeGenericType(spiff.PagableListComponent$2, [Object, Object]).call(this, props);
	};
	$tab_PagableGroupListComponent.__typeName = 'tab.PagableGroupListComponent';
	global.tab.PagableGroupListComponent = $tab_PagableGroupListComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.PagableUserListComponent
	var $tab_PagableUserListComponent = function(props) {
		ss.makeGenericType(spiff.PagableListComponent$2, [Object, Object]).call(this, props);
	};
	$tab_PagableUserListComponent.__typeName = 'tab.PagableUserListComponent';
	global.tab.PagableUserListComponent = $tab_PagableUserListComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.PillStatus
	var $tab_PillStatus = function() {
	};
	$tab_PillStatus.__typeName = 'tab.PillStatus';
	global.tab.PillStatus = $tab_PillStatus;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.FilePicker.PluginFilePicker
	var $tab_PluginFilePicker = function() {
		this.$disposables = new tab.DisposableHolder();
		this.$filePickerViewModel = null;
		this.$imageConfig = null;
	};
	$tab_PluginFilePicker.__typeName = 'tab.PluginFilePicker';
	$tab_PluginFilePicker.get_instance = function PluginFilePicker$get_Instance() {
		$tab_PluginFilePicker.$instance = $tab_PluginFilePicker.$instance || new $tab_PluginFilePicker();
		return $tab_PluginFilePicker.$instance;
	};
	$tab_PluginFilePicker.set_instance = function PluginFilePicker$set_Instance(value) {
		$tab_PluginFilePicker.$instance = value;
	};
	$tab_PluginFilePicker.$resolveFileName = function PluginFilePicker$ResolveFileName(deferred, fileList) {
		if (fileList.length === 0) {
			deferred.reject('no-file-selected');
			return;
		}
		tab.ModuleManager.load(tab.IFileUploadModule).call(null, []).done(function(module) {
			try {
				module.uploadFiles(fileList).done(function(fileId) {
					module.copyTempFileToSessionStorage(fileList[0], fileId).done(function(sessionId) {
						var $t1 = new Object();
						$t1.fileName = fileList[0].name;
						$t1.fileLocator = sessionId;
						var fileInfo = $t1;
						deferred.resolve(fileInfo);
					});
				}).fail(function(e) {
					deferred.reject('upload-failed');
				});
			}
			catch ($t2) {
				deferred.reject('upload-failed');
			}
		}).fail(function(e1) {
			deferred.reject('upload-failed');
		});
	};
	global.tab.PluginFilePicker = $tab_PluginFilePicker;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.PortSizeCalculator
	var $tab_PortSizeCalculator = function() {
	};
	$tab_PortSizeCalculator.__typeName = 'tab.PortSizeCalculator';
	$tab_PortSizeCalculator.calculatePortSize = function PortSizeCalculator$CalculatePortSize() {
		var dashboardPortSize;
		var worksheetPortSize;
		if (tsConfig.is_authoring) {
			dashboardPortSize = tabBootstrap.ViewerBootstrap.get_instance().getWebClientPortSize('dashboard');
			worksheetPortSize = tabBootstrap.ViewerBootstrap.get_instance().getWebClientPortSize('worksheet');
		}
		else {
			dashboardPortSize = ((tab.FeatureFlags.isEnabled('IframeSizedToWindow') && !tsConfig.is_mobile) ? tab.DashboardSizeCalculator.calculateDashboardSize() : tabBootstrap.ViewerBootstrap.get_instance().getWebClientPortSize('dashboard'));
			worksheetPortSize = dashboardPortSize;
		}
		return { dashboardPortSize: tab.SizePresModelUtils.sanitizePresModel(tab.DashboardSizeCalculator.asSizePresModel(dashboardPortSize)), storyPortSize: tab.SizePresModelUtils.sanitizePresModel(tab.DashboardSizeCalculator.asSizePresModel(dashboardPortSize)), worksheetPortSize: tab.SizePresModelUtils.sanitizePresModel(tab.DashboardSizeCalculator.asSizePresModel(worksheetPortSize)) };
	};
	global.tab.PortSizeCalculator = $tab_PortSizeCalculator;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.PresModelBrowserView
	var $tab_PresModelBrowserView = function(viewModel) {
		this.$viewModel$1 = null;
		this.$openAll = false;
		this.$searchedText = '';
		this.$dialog = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_PresModelBrowserViewModel]).call(this, viewModel, spiff.Template.fromHtml($tab_PresModelBrowserView.$viewTemplate));
		var themeConfig = jQuery.jstree.defaults['core']['themes'];
		themeConfig['dir'] = tableau.util.assetUrl('/css/jstree', false);
		themeConfig['url'] = true;
		this.element.find('.pres_model_search_text').on('keyup click mousedown', ss.mkdel(this, function(e) {
			this.$updateSearchButton();
		})).keydown(ss.mkdel(this, function(e1) {
			if (e1.which === 13) {
				e1.preventDefault();
				this.$search();
			}
		}));
		this.element.find('.pres_model_search').click(ss.mkdel(this, function(e2) {
			this.$search();
		}));
		this.element.find('.pres_model_expand').click(ss.mkdel(this, function(e3) {
			this.$doExpandCollapse();
		}));
		this.update(viewModel);
		this.element.find('.tree').on('search.jstree', ss.mkdel(this, function(e4, data) {
			this.$jsTree('deselect_all', null, null);
			this.$jsTree('select_node', data['res'], true);
		})).on('select_node.jstree', function(e5, data1) {
			if (ss.isValue(data1['event'])) {
				data1['event'].stopPropagation();
			}
		}).click(ss.mkdel(this, function(e6) {
			this.$jsTree('deselect_all', null, null);
		}));
		this.$setupDialog();
	};
	$tab_PresModelBrowserView.__typeName = 'tab.PresModelBrowserView';
	global.tab.PresModelBrowserView = $tab_PresModelBrowserView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewModels.PresModelBrowserViewModel
	var $tab_PresModelBrowserViewModel = function(name, pm, activateCallback) {
		this.data = null;
		this.$activationCallback = null;
		this.name = null;
		spiff.BaseViewModel.call(this);
		this.name = name;
		if ($tab_PresModelBrowserViewModel.$isObject(pm)) {
			if ($.isArray(pm)) {
				this.data = $tab_PresModelBrowserViewModel.$jsTreeChildArray(pm);
			}
			else {
				this.data = $tab_PresModelBrowserViewModel.$jsTreeChildDictionary(pm);
			}
		}
		else {
			this.data = pm.toString();
		}
		this.$activationCallback = activateCallback;
	};
	$tab_PresModelBrowserViewModel.__typeName = 'tab.PresModelBrowserViewModel';
	$tab_PresModelBrowserViewModel.$isObject = function PresModelBrowserViewModel$IsObject(value) {
		return ss.isValue(value) && typeof(value) === 'object';
	};
	$tab_PresModelBrowserViewModel.$jsTreeChildArray = function PresModelBrowserViewModel$JsTreeChildArray(pm) {
		var data = [];
		for (var p = 0; p < pm.length; ++p) {
			data.push($tab_PresModelBrowserViewModel.$jsTreeChildElement(p.toString(), pm[p]));
		}
		return data;
	};
	$tab_PresModelBrowserViewModel.$jsTreeChildDictionary = function PresModelBrowserViewModel$JsTreeChildDictionary(pm) {
		var data = [];
		var $t1 = new ss.ObjectEnumerator(pm);
		try {
			while ($t1.moveNext()) {
				var e = $t1.current();
				data.push($tab_PresModelBrowserViewModel.$jsTreeChildElement(e.key, e.value));
			}
		}
		finally {
			$t1.dispose();
		}
		return data;
	};
	$tab_PresModelBrowserViewModel.$formatKey = function PresModelBrowserViewModel$FormatKey(key) {
		return '<strong>' + key + ':</strong> ';
	};
	$tab_PresModelBrowserViewModel.$jsTreeChildElement = function PresModelBrowserViewModel$JsTreeChildElement(key, val) {
		if ($tab_PresModelBrowserViewModel.$isObject(val)) {
			if ($.isArray(val)) {
				return ss.mkdict(['text', $tab_PresModelBrowserViewModel.$formatKey(key), 'children', $tab_PresModelBrowserViewModel.$jsTreeChildArray(val)]);
			}
			else {
				return ss.mkdict(['text', $tab_PresModelBrowserViewModel.$formatKey(key), 'children', $tab_PresModelBrowserViewModel.$jsTreeChildDictionary(val)]);
			}
		}
		else if (ss.endsWithString(key, 'Json') && (ss.startsWithString(ss.cast(val, String), '{') || ss.startsWithString(ss.cast(val, String), '['))) {
			var parsedVal = null;
			try {
				parsedVal = JSON.parse(ss.cast(val, String));
			}
			catch ($t1) {
			}
			if (ss.isValue(parsedVal)) {
				return $tab_PresModelBrowserViewModel.$jsTreeChildElement(key, parsedVal);
			}
		}
		return $tab_PresModelBrowserViewModel.$formatKey(key) + val;
	};
	global.tab.PresModelBrowserViewModel = $tab_PresModelBrowserViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.PublicInfoComponent
	var $tab_PublicInfoComponent = function(props, context) {
		ss.makeGenericType(spiff.ReactSpiffAdapter$3, [$tab_PublicInfoView, $tab_PublicInfoProps, Object]).call(this, tab.ObjectRegistry.newView($tab_PublicInfoView).call(null, [props.viewModel]), props, context);
	};
	$tab_PublicInfoComponent.__typeName = 'tab.PublicInfoComponent';
	global.tab.PublicInfoComponent = $tab_PublicInfoComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.PublicInfoProps
	var $tab_PublicInfoProps = function() {
		this.viewModel = null;
	};
	$tab_PublicInfoProps.__typeName = 'tab.PublicInfoProps';
	global.tab.PublicInfoProps = $tab_PublicInfoProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.PublicInfoTemplate
	var $tab_PublicInfoTemplate = function() {
		this.publicInfoArea = null;
		this.moreAboutPublicSection = null;
		this.viewAndAuthorInfoSection = null;
		spiff.Template.call(this, $($tab_PublicInfoTemplate.$htmlTemplate));
		this.publicInfoArea = this.domRoot;
		this.moreAboutPublicSection = this.getElementBySelector('.tab-moreAboutPublicSection');
		this.viewAndAuthorInfoSection = this.getElementBySelector('.tab-viewAndAuthorInfoSection');
	};
	$tab_PublicInfoTemplate.__typeName = 'tab.PublicInfoTemplate';
	global.tab.PublicInfoTemplate = $tab_PublicInfoTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.PublicInfoView
	var $tab_PublicInfoView = function(viewModel) {
		this.$publicInfoViewModel = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_PublicInfoViewModel]).call(this, viewModel, new $tab_PublicInfoTemplate());
		this.$publicInfoViewModel = viewModel;
		this.$updatePublicInfo();
	};
	$tab_PublicInfoView.__typeName = 'tab.PublicInfoView';
	global.tab.PublicInfoView = $tab_PublicInfoView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.PublicInfoViewModel
	var $tab_PublicInfoViewModel = function() {
		spiff.BaseViewModel.call(this);
	};
	$tab_PublicInfoViewModel.__typeName = 'tab.PublicInfoViewModel';
	$tab_PublicInfoViewModel.get_localizedViewCount = function PublicInfoViewModel$get_LocalizedViewCount() {
		var viewCountDv = { t: 'i', v: $tab_PublicInfoViewModel.get_viewCount(), s: null };
		return tableau.format.formatDataValue(viewCountDv, null, tab.ApplicationModel.get_instance().get_numberFormat(), null, 0);
	};
	$tab_PublicInfoViewModel.get_viewCount = function PublicInfoViewModel$get_ViewCount() {
		return $tab_PublicInfoViewModel.$2$ViewCountField;
	};
	$tab_PublicInfoViewModel.set_viewCount = function PublicInfoViewModel$set_ViewCount(value) {
		$tab_PublicInfoViewModel.$2$ViewCountField = value;
	};
	global.tab.PublicInfoViewModel = $tab_PublicInfoViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.PureComponentWithAsyncDependencies
	var $tab_PureComponentWithAsyncDependencies$3 = function(TDependencies, TProps, TState) {
		var $type = function(props) {
			this.$dependenciesHaveBeenLoaded = false;
			this.$dependencies = ss.getDefaultValue(TDependencies);
			this.$asyncDependenciesPromise = null;
			spiff.PureRenderComponent.call(this, props);
			this.$dependenciesHaveBeenLoaded = false;
			this.$asyncDependenciesPromise = this.fetchAsyncDependencies().done(ss.mkdel(this, function(deps) {
				this.$dependencies = deps;
				this.$dependenciesHaveBeenLoaded = true;
			}));
		};
		ss.registerGenericClassInstance($type, $tab_PureComponentWithAsyncDependencies$3, [TDependencies, TProps, TState], {
			render: function PureComponentWithAsyncDependencies$Render() {
				if (!this.$dependenciesHaveBeenLoaded) {
					this.$asyncDependenciesPromise.done(ss.mkdel(this, function(m) {
						this.forceUpdate();
					}));
					return this.renderWhileWaiting();
				}
				return this.renderWithDependencies(this.$dependencies);
			},
			fetchAsyncDependencies: null,
			renderWhileWaiting: null,
			renderWithDependencies: null
		}, function() {
			return spiff.PureRenderComponent;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_PureComponentWithAsyncDependencies$3.__typeName = 'tab.PureComponentWithAsyncDependencies$3';
	ss.initGenericClass($tab_PureComponentWithAsyncDependencies$3, $asm, 3);
	global.tab.PureComponentWithAsyncDependencies$3 = $tab_PureComponentWithAsyncDependencies$3;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.PureComponentWithModule
	var $tab_PureComponentWithModule$3 = function(TModule, TProps, TState) {
		var $type = function(props) {
			ss.makeGenericType($tab_PureComponentWithAsyncDependencies$3, [TModule, TProps, TState]).call(this, props);
		};
		ss.registerGenericClassInstance($type, $tab_PureComponentWithModule$3, [TModule, TProps, TState], {
			fetchAsyncDependencies: function PureComponentWithModule$FetchAsyncDependencies() {
				return tab.ModuleManager.load(TModule).call(null, []);
			},
			renderWhileWaiting: function PureComponentWithModule$RenderWhileWaiting() {
				return null;
			},
			renderWithDependencies: function PureComponentWithModule$RenderWithDependencies(deps) {
				return this.renderWithModule(deps);
			},
			renderWithModule: null
		}, function() {
			return ss.makeGenericType($tab_PureComponentWithAsyncDependencies$3, [TModule, TProps, TState]);
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_PureComponentWithModule$3.__typeName = 'tab.PureComponentWithModule$3';
	ss.initGenericClass($tab_PureComponentWithModule$3, $asm, 3);
	global.tab.PureComponentWithModule$3 = $tab_PureComponentWithModule$3;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.QuickFilterConstants
	var $tab_QuickFilterConstants = function() {
	};
	$tab_QuickFilterConstants.__typeName = 'tab.QuickFilterConstants';
	global.tab.QuickFilterConstants = $tab_QuickFilterConstants;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.QuickFilterNoninteractiveDropdownComponent
	var $tab_QuickFilterNoninteractiveDropdownComponent = function(props) {
		spiff.PureRenderComponent.call(this, props);
	};
	$tab_QuickFilterNoninteractiveDropdownComponent.__typeName = 'tab.QuickFilterNoninteractiveDropdownComponent';
	global.tab.QuickFilterNoninteractiveDropdownComponent = $tab_QuickFilterNoninteractiveDropdownComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.QuickFilterReadoutComponent
	var $tab_QuickFilterReadoutComponent = function(props) {
		spiff.PureRenderComponent.call(this, props);
	};
	$tab_QuickFilterReadoutComponent.__typeName = 'tab.QuickFilterReadoutComponent';
	global.tab.QuickFilterReadoutComponent = $tab_QuickFilterReadoutComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.RecipientPillComponent
	var $tab_RecipientPillComponent = function(props) {
		React.Component.call(this, props);
	};
	$tab_RecipientPillComponent.__typeName = 'tab.RecipientPillComponent';
	global.tab.RecipientPillComponent = $tab_RecipientPillComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.RecipientPillsComponent
	var $tab_RecipientPillsComponent = function(props) {
		React.Component.call(this, props);
	};
	$tab_RecipientPillsComponent.__typeName = 'tab.RecipientPillsComponent';
	global.tab.RecipientPillsComponent = $tab_RecipientPillsComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.RecipientSearchComponent
	var $tab_RecipientSearchComponent = function(props) {
		this.$searchDebouncer = null;
		this.$searchInProgress = false;
		this.$searchText = null;
		this.disposables = new tab.DisposableHolder();
		this.$3$DisposedField = null;
		this.$3$PropertyChangedField = null;
		React.Component.call(this, props);
		this.$searchDebouncer = new tab.Debouncer(ss.mkdel(this, function() {
			this.$searchInProgress = true;
		}), $tab_RecipientSearchComponent.autoCompleteDebounceTime);
		this.state = this.createNewDefaultState();
		this.$searchInProgress = false;
		this.$searchText = null;
	};
	$tab_RecipientSearchComponent.__typeName = 'tab.RecipientSearchComponent';
	global.tab.RecipientSearchComponent = $tab_RecipientSearchComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.RecipientSearchSelectorComponent
	var $tab_RecipientSearchSelectorComponent = function(props, context) {
		this.numberOfRowsInViewport = 6;
		this.$searchInProgress = false;
		this.$searchText = null;
		React.Component.call(this, props, context);
		this.state = this.createNewDefaultState();
		if (this.props.shouldHideSearchComponent) {
			this.numberOfRowsInViewport = $tab_RecipientSearchSelectorComponent.numberOfRowsInViewportWithoutSearchComponent;
		}
	};
	$tab_RecipientSearchSelectorComponent.__typeName = 'tab.RecipientSearchSelectorComponent';
	global.tab.RecipientSearchSelectorComponent = $tab_RecipientSearchSelectorComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.RectangleGeom
	var $tab_RectangleGeom = function(geom) {
		this.$geom = null;
		this.$geom = geom;
	};
	$tab_RectangleGeom.__typeName = 'tab.RectangleGeom';
	global.tab.RectangleGeom = $tab_RectangleGeom;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.RedoKeyboardShortcut
	var $tab_RedoKeyboardShortcut = function() {
		$tab_UndoRedoKeyboardShortcut.call(this);
	};
	$tab_RedoKeyboardShortcut.__typeName = 'tab.RedoKeyboardShortcut';
	global.tab.RedoKeyboardShortcut = $tab_RedoKeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.RenderAndCheckFontLoader
	var $tab_RenderAndCheckFontLoader = function() {
		this.$fontList = null;
		this.$canvasElement = null;
		this.$canvasContext = null;
		this.$baselineFontMeasurementDiv = null;
		this.$pollingIntervalId = 0;
		this.$pollingLoopCallCount = 0;
		this.$1$FontsReadyField = null;
		this.$1$FontDownloadingField = null;
		this.$fontList = {};
	};
	$tab_RenderAndCheckFontLoader.__typeName = 'tab.RenderAndCheckFontLoader';
	$tab_RenderAndCheckFontLoader.$buildMeasurementElement = function RenderAndCheckFontLoader$BuildMeasurementElement(className, fontFamily) {
		var span = $('<span/>').text($tab_RenderAndCheckFontLoader.measurementElementText);
		var div = $('<div/>').css($tab_RenderAndCheckFontLoader.$hiddenProps).css('font-family', fontFamily.join(', ')).addClass(className);
		div.append(span);
		return div;
	};
	$tab_RenderAndCheckFontLoader.$rectsAreIdentical = function RenderAndCheckFontLoader$RectsAreIdentical(obj1, obj2) {
		if (ss.isNullOrUndefined(obj1) || ss.isNullOrUndefined(obj2)) {
			return false;
		}
		var span1 = obj1.children('span')[0];
		var span2 = obj2.children('span')[0];
		return $tab_RenderAndCheckFontLoader.$compareBoundingClientHeight(span1, span2) === 0 && $tab_RenderAndCheckFontLoader.$compareBoundingClientWidth(span1, span2) === 0;
	};
	$tab_RenderAndCheckFontLoader.$compareBoundingClientHeight = function RenderAndCheckFontLoader$CompareBoundingClientHeight(obj1, obj2) {
		var size1 = obj1.getBoundingClientRect().height;
		var size2 = (ss.isNullOrUndefined(obj2) ? 0 : obj2.getBoundingClientRect().height);
		return ss.compare(size1, size2);
	};
	$tab_RenderAndCheckFontLoader.$compareBoundingClientWidth = function RenderAndCheckFontLoader$CompareBoundingClientWidth(obj1, obj2) {
		var size1 = obj1.getBoundingClientRect().width;
		var size2 = (ss.isNullOrUndefined(obj2) ? 0 : obj2.getBoundingClientRect().width);
		return ss.compare(size1, size2);
	};
	global.tab.RenderAndCheckFontLoader = $tab_RenderAndCheckFontLoader;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.RenderUtil
	var $tab_RenderUtil = function() {
	};
	$tab_RenderUtil.__typeName = 'tab.RenderUtil';
	$tab_RenderUtil.calculatePixelRatio = function RenderUtil$CalculatePixelRatio(forCanvas) {
		var pixelRatioResult = 1;
		if (ss.isValue(tsConfig.highDpi) && tsConfig.highDpi) {
			if (ss.isValue(tsConfig.pixelRatio)) {
				pixelRatioResult = tsConfig.pixelRatio;
			}
			else if (!forCanvas) {
				pixelRatioResult = BrowserSupport.BrowserSupport.DevicePixelRatio();
			}
			else {
				pixelRatioResult = BrowserSupport.BrowserSupport.DevicePixelRatio() / BrowserSupport.BrowserSupport.BackingStoragePixelRatio();
			}
		}
		return pixelRatioResult;
	};
	$tab_RenderUtil.manualFadeAnimation = function RenderUtil$ManualFadeAnimation(element, fromOpacity, toOpacity, fps, animationLengthMilliseconds, exponentialSlowDown) {
		var current = fromOpacity;
		var end = toOpacity;
		var totalSteps = ss.Int32.div(animationLengthMilliseconds, 1000) * fps;
		var step = (toOpacity - fromOpacity) / totalSteps;
		var intervalMilliseconds = ss.Int32.div(1000, fps);
		var animationStep = null;
		animationStep = function() {
			if (current > end) {
				element.css('filter', 'alpha(opacity=' + end + ')');
				element.css('opacity', (end / 100).toString());
				return;
			}
			element.css('filter', 'alpha(opacity=' + current + ')');
			element.css('opacity', (current / 100).toString());
			current += step;
			if (ss.isValue(exponentialSlowDown)) {
				intervalMilliseconds += intervalMilliseconds;
			}
			window.setTimeout(animationStep, intervalMilliseconds);
		};
		window.setTimeout(animationStep, intervalMilliseconds);
	};
	$tab_RenderUtil.compareBoundingClientHeight = function RenderUtil$CompareBoundingClientHeight(obj1, obj2) {
		var size1 = obj1.getBoundingClientRect().height;
		var size2 = (ss.isNullOrUndefined(obj2) ? 0 : obj2.getBoundingClientRect().height);
		return ss.compare(size1, size2);
	};
	$tab_RenderUtil.compareBoundingClientWidth = function RenderUtil$CompareBoundingClientWidth(obj1, obj2) {
		var size1 = obj1.getBoundingClientRect().width;
		var size2 = (ss.isNullOrUndefined(obj2) ? 0 : obj2.getBoundingClientRect().width);
		return ss.compare(size1, size2);
	};
	$tab_RenderUtil.ensureImageEltSize = function RenderUtil$EnsureImageEltSize(imgElt, bounds) {
		var devicePixelRatio = $tab_RenderUtil.calculatePixelRatio(false);
		if (tab.DoubleUtil.isGreaterThanAndNotApproximatelyEqual(devicePixelRatio, 1)) {
			var imgNode = $(imgElt);
			imgNode.css('max-width', bounds.w + 'px');
			imgNode.css('max-height', bounds.h + 'px');
		}
	};
	global.tab.RenderUtil = $tab_RenderUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.RightAreaDrawerModuleLoader
	var $tab_RightAreaDrawerModuleLoader = function() {
		this.disposables = new tab.DisposableHolder();
		this.$commentingModuleViewModel = null;
		this.$dataAlertsPanelModuleViewModel = null;
		this.$lineagePanelViewModel = null;
	};
	$tab_RightAreaDrawerModuleLoader.__typeName = 'tab.RightAreaDrawerModuleLoader';
	global.tab.RightAreaDrawerModuleLoader = $tab_RightAreaDrawerModuleLoader;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.RightAreaDrawerModuleLoaderTemplate
	var $tab_RightAreaDrawerModuleLoaderTemplate = function() {
		this.loaderContainer = null;
		spiff.Template.call(this, $tab_RightAreaDrawerModuleLoaderTemplate.$getRootTemplate());
		this.loaderContainer = this.domRoot;
	};
	$tab_RightAreaDrawerModuleLoaderTemplate.__typeName = 'tab.RightAreaDrawerModuleLoaderTemplate';
	$tab_RightAreaDrawerModuleLoaderTemplate.$getRootTemplate = function RightAreaDrawerModuleLoaderTemplate$GetRootTemplate() {
		return $($tab_RightAreaDrawerModuleLoaderTemplate.$htmlTemplate);
	};
	global.tab.RightAreaDrawerModuleLoaderTemplate = $tab_RightAreaDrawerModuleLoaderTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.RightAreaDrawerModuleLoaderView
	var $tab_RightAreaDrawerModuleLoaderView = function(viewModel) {
		ss.makeGenericType(spiff.BaseView$1, [$tab_RightAreaDrawerModuleLoaderViewModel]).call(this, viewModel, new $tab_RightAreaDrawerModuleLoaderTemplate());
		var spinner = React.createElement(SharedWidgets.ActivitySpinnerWidget, { testId: 'waiting', shouldShowUnderlay: false });
		window.setTimeout(ss.mkdel(this, function() {
			ReactDOM.render(spinner, this.get_dom().loaderContainer.get(0));
		}), 300);
		this.get_dom().loaderContainer.css({ position: 'absolute', top: 0 + 'px', right: 0 + 'px', bottom: 0 + 'px', left: 0 + 'px', 'box-sizing': 'border-box', 'border-left-style': 'solid', 'border-left-width': SharedWidgets.TabStyles.Sizing.BorderWidth + 'px', 'border-left-color': SharedWidgets.TabStyles.Colors.L6, 'background-color': SharedWidgets.TabStyles.Colors.L1, 'padding-top': 85 + 'px', 'text-align': 'center' });
	};
	$tab_RightAreaDrawerModuleLoaderView.__typeName = 'tab.RightAreaDrawerModuleLoaderView';
	global.tab.RightAreaDrawerModuleLoaderView = $tab_RightAreaDrawerModuleLoaderView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewModels.RightAreaDrawerModuleLoaderViewModel
	var $tab_RightAreaDrawerModuleLoaderViewModel = function(rightAreaDrawer) {
		this.$rightAreaDrawerModuleLoader = null;
		this.$rightAreaDrawerModel = null;
		spiff.BaseViewModel.call(this);
		this.$rightAreaDrawerModel = rightAreaDrawer;
	};
	$tab_RightAreaDrawerModuleLoaderViewModel.__typeName = 'tab.RightAreaDrawerModuleLoaderViewModel';
	$tab_RightAreaDrawerModuleLoaderViewModel.getContentFromType = function RightAreaDrawerModuleLoaderViewModel$GetContentFromType(loadingContentType) {
		switch (loadingContentType) {
			case 1: {
				return (new $tab_RightAreaDrawerModuleLoaderViewModel(tab.ApplicationModel.get_instance().get_rightAreaDrawer())).loadCommentingModule();
			}
			case 2: {
				return (new $tab_RightAreaDrawerModuleLoaderViewModel(tab.ApplicationModel.get_instance().get_rightAreaDrawer())).loadDataAlertsModule();
			}
			case 3: {
				return (new $tab_RightAreaDrawerModuleLoaderViewModel(tab.ApplicationModel.get_instance().get_rightAreaDrawer())).loadLineageModule();
			}
			default: {
				return null;
			}
		}
	};
	global.tab.RightAreaDrawerModuleLoaderViewModel = $tab_RightAreaDrawerModuleLoaderViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.RightAreaDrawerTemplate
	var $tab_RightAreaDrawerTemplate = function() {
		this.drawerContainer = null;
		spiff.Template.call(this, $tab_RightAreaDrawerTemplate.$getRootTemplate());
		this.drawerContainer = this.domRoot;
	};
	$tab_RightAreaDrawerTemplate.__typeName = 'tab.RightAreaDrawerTemplate';
	$tab_RightAreaDrawerTemplate.$getRootTemplate = function RightAreaDrawerTemplate$GetRootTemplate() {
		return (tab.FeatureFlags.isEnabled('IframeSizedToWindow') ? $($tab_RightAreaDrawerTemplate.$htmlTemplate) : $($tab_RightAreaDrawerTemplate.$oldHtmlTemplate));
	};
	global.tab.RightAreaDrawerTemplate = $tab_RightAreaDrawerTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Views.RightAreaDrawerView
	var $tab_RightAreaDrawerView = function(viewModel) {
		ss.makeGenericType(spiff.BaseView$1, [$tab_RightAreaDrawerViewModel]).call(this, viewModel, new $tab_RightAreaDrawerTemplate());
		this.get_viewModel().add_open(ss.mkdel(this, this.$openPanel));
		this.get_viewModel().add_close(ss.mkdel(this, this.$closePanel));
		this.get_viewModel().add_update(ss.mkdel(this, this.$updatePanel));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.get_viewModel().remove_open(ss.mkdel(this, this.$openPanel));
			this.get_viewModel().remove_close(ss.mkdel(this, this.$closePanel));
			this.get_viewModel().remove_update(ss.mkdel(this, this.$updatePanel));
		})));
		this.$positionDrawer();
	};
	$tab_RightAreaDrawerView.__typeName = 'tab.RightAreaDrawerView';
	global.tab.RightAreaDrawerView = $tab_RightAreaDrawerView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewModels.RightAreaDrawerViewModel
	var $tab_RightAreaDrawerViewModel = function(rightAreaDrawer) {
		this.$content = null;
		this.$rightAreaDrawerModel = null;
		this.$2$OpenField = null;
		this.$2$CloseField = null;
		this.$2$UpdateField = null;
		spiff.BaseViewModel.call(this);
		this.$rightAreaDrawerModel = rightAreaDrawer;
		this.$rightAreaDrawerModel.add_updated(ss.mkdel(this, this.$setPanelVisibilityAndContent));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$rightAreaDrawerModel.remove_updated(ss.mkdel(this, this.$setPanelVisibilityAndContent));
		})));
	};
	$tab_RightAreaDrawerViewModel.__typeName = 'tab.RightAreaDrawerViewModel';
	global.tab.RightAreaDrawerViewModel = $tab_RightAreaDrawerViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewModels.RightAreaDrawerViewModel.ToggleType
	var $tab_RightAreaDrawerViewModel$ToggleType = function() {
	};
	$tab_RightAreaDrawerViewModel$ToggleType.__typeName = 'tab.RightAreaDrawerViewModel$ToggleType';
	global.tab.RightAreaDrawerViewModel$ToggleType = $tab_RightAreaDrawerViewModel$ToggleType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SelectActionResolver
	var $tab_SelectActionResolver = function() {
	};
	$tab_SelectActionResolver.__typeName = 'tab.SelectActionResolver';
	$tab_SelectActionResolver.fromNormalizedEvent = function SelectActionResolver$FromNormalizedEvent(pseudoEvent, resolverEvent) {
		var action = pseudoEvent.GetSelectAction();
		switch (resolverEvent) {
			case 0: {
				return ((action === 'toggle') ? 'range' : action);
			}
			case 1: {
				return ((action === 'range') ? 'simple' : action);
			}
			case 2:
			default: {
				return action;
			}
		}
	};
	global.tab.SelectActionResolver = $tab_SelectActionResolver;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SelectActionResolverEvent
	var $tab_SelectActionResolverEvent = function() {
	};
	$tab_SelectActionResolverEvent.__typeName = 'tab.SelectActionResolverEvent';
	global.tab.SelectActionResolverEvent = $tab_SelectActionResolverEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ServerFontLoader
	var $tab_ServerFontLoader = function() {
		this.$knownFonts = {};
		this.$internalFontLoader = null;
		this.$wereAllFontsFound = false;
		this.$raiseNotificationWhenFontsReady = false;
		this.$completionToken = null;
		this.$fontsLoadedDeferred = null;
		this.$1$FontPreparationCompleteField = null;
		this.$internalFontLoader = $tab_ServerFontLoader.$constructDefaultLoader();
		this.$internalFontLoader.add_fontsReady(ss.mkdel(this, this.$handleFontsReady));
		this.$internalFontLoader.add_fontDownloading(ss.mkdel(this, this.$handleFontDownloading));
		this.$raiseNotificationWhenFontsReady = true;
	};
	$tab_ServerFontLoader.__typeName = 'tab.ServerFontLoader';
	$tab_ServerFontLoader.get_instance = function ServerFontLoader$get_Instance() {
		if (ss.isNullOrUndefined($tab_ServerFontLoader.$internalServerLoader)) {
			$tab_ServerFontLoader.$internalServerLoader = new $tab_ServerFontLoader();
		}
		return $tab_ServerFontLoader.$internalServerLoader;
	};
	$tab_ServerFontLoader.get_allCustomFonts = function ServerFontLoader$get_AllCustomFonts() {
		return _.union(tab.ServerFonts.tableauFontNames, tab.ServerFonts.effectiveBentonSans);
	};
	$tab_ServerFontLoader.loadFonts = function ServerFontLoader$LoadFonts(fonts) {
		var newFontsLoadedDeferred = $.Deferred();
		$tab_ServerFontLoader.get_instance().get_fontsLoadedPromise().then(function() {
			$tab_ServerFontLoader.get_instance().initialize(false);
			$tab_ServerFontLoader.get_instance().registerServerLoadedFonts(fonts);
			$tab_ServerFontLoader.get_instance().notifyDownloadableFont(fonts);
			$tab_ServerFontLoader.get_instance().downloadFonts();
			$tab_ServerFontLoader.get_instance().allFontsFound();
			$tab_ServerFontLoader.get_instance().get_fontsLoadedPromise().then(function() {
				newFontsLoadedDeferred.resolve();
			}, null);
		}, null);
		return newFontsLoadedDeferred;
	};
	$tab_ServerFontLoader.downloadAdditionalDrawerFonts = function ServerFontLoader$DownloadAdditionalDrawerFonts() {
		var newFonts = (BrowserSupport.BrowserSupport.IsHighDpi() ? $tab_ServerFontLoader.drawerFontNames : $tab_ServerFontLoader.drawerLowDpiFontNames);
		return $tab_ServerFontLoader.loadFonts(newFonts);
	};
	$tab_ServerFontLoader.downloadAdditionalNLPFonts = function ServerFontLoader$DownloadAdditionalNLPFonts() {
		var newFonts = (BrowserSupport.BrowserSupport.IsHighDpi() ? $tab_ServerFontLoader.nlpFontNames : $tab_ServerFontLoader.nlpLowDpiFontNames);
		return $tab_ServerFontLoader.loadFonts(newFonts);
	};
	$tab_ServerFontLoader.$constructDefaultLoader = function ServerFontLoader$ConstructDefaultLoader() {
		if (BrowserSupport.BrowserSupport.FontLoader() && BrowserSupport.BrowserSupport.Promise() && (BrowserSupport.BrowserSupport.IsFF() || BrowserSupport.BrowserSupport.IsChrome() || BrowserSupport.BrowserSupport.IsSafari() || BrowserSupport.BrowserSupport.IsIos())) {
			return new $tab_NativeFontLoader();
		}
		return new $tab_RenderAndCheckFontLoader();
	};
	global.tab.ServerFontLoader = $tab_ServerFontLoader;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewModels.SessionViewModel
	var $tab_SessionViewModel = function() {
	};
	$tab_SessionViewModel.__typeName = 'tab.SessionViewModel';
	$tab_SessionViewModel.onSessionRecoveryAttempt = function SessionViewModel$OnSessionRecoveryAttempt() {
		$tab_NotificationViewModel.showNotification(tab.Strings.SessionRecoveryWarning, null);
	};
	global.tab.SessionViewModel = $tab_SessionViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ShareComponent
	var $tab_ShareComponent = function(props, context) {
		ss.makeGenericType(spiff.ReactSpiffAdapter$3, [$tab_ShareView, $tab_ShareProps, Object]).call(this, tab.ObjectRegistry.newView($tab_ShareView).call(null, [props.viewModel]), props, context);
	};
	$tab_ShareComponent.__typeName = 'tab.ShareComponent';
	global.tab.ShareComponent = $tab_ShareComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ShareProps
	var $tab_ShareProps = function() {
		this.viewModel = null;
	};
	$tab_ShareProps.__typeName = 'tab.ShareProps';
	global.tab.ShareProps = $tab_ShareProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ShareTemplate
	var $tab_ShareTemplate = function() {
		this.shareArea = null;
		this.shareStateArea = null;
		this.shareLinkSection = null;
		this.shareLinkTitle = null;
		this.shareLinkInput = null;
		this.shareLinkButtons = null;
		this.shareEmbedTitle = null;
		this.shareEmbedInput = null;
		spiff.Template.call(this, $($tab_ShareTemplate.$htmlTemplate));
		this.shareArea = this.domRoot;
	};
	$tab_ShareTemplate.__typeName = 'tab.ShareTemplate';
	global.tab.ShareTemplate = $tab_ShareTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewModels.ShareToggleButtonViewModel
	var $tab_ShareToggleButtonViewModel = function() {
		this.$selectedToggle = 0;
		this.$3$OriginalViewSelectedField = null;
		ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]).call(this);
	};
	$tab_ShareToggleButtonViewModel.__typeName = 'tab.ShareToggleButtonViewModel';
	global.tab.ShareToggleButtonViewModel = $tab_ShareToggleButtonViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ShareView
	var $tab_ShareView = function(viewModel) {
		this.$shareViewModel = null;
		this.$emailButtonWrapper = null;
		this.$toggleButton = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_ShareViewModel]).call(this, viewModel, new $tab_ShareTemplate());
		this.$shareViewModel = viewModel;
		this.$shareViewModel.saveSharedView();
		this.$buildShareContent();
		this.$shareViewModel.add_selectedViewChanged(ss.mkdel(this, this.$updateShareLinks));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$shareViewModel.remove_selectedViewChanged(ss.mkdel(this, this.$updateShareLinks));
		})));
	};
	$tab_ShareView.__typeName = 'tab.ShareView';
	global.tab.ShareView = $tab_ShareView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ShareViewModel
	var $tab_ShareViewModel = function() {
		this.embedCodeVersion = 3;
		this.shareToggleButtonViewModel = null;
		this.$shareOriginalView = true;
		this.$2$SelectedViewChangedField = null;
		spiff.BaseViewModel.call(this);
		this.$shareOriginalView = !this.get_$isBaseViewASharedView();
		this.shareToggleButtonViewModel = new $tab_ShareToggleButtonViewModel();
		this.shareToggleButtonViewModel.add_originalViewSelected(ss.mkdel(this, this.$handleToggleButtonUpdated));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.shareToggleButtonViewModel.remove_originalViewSelected(ss.mkdel(this, this.$handleToggleButtonUpdated));
		})));
	};
	$tab_ShareViewModel.__typeName = 'tab.ShareViewModel';
	$tab_ShareViewModel.$getEmbedScriptLocation = function ShareViewModel$GetEmbedScriptLocation(uriParts) {
		var embedScriptFilePath = '/javascripts/api/viz_v1.js';
		var protocol = (tsConfig.forceHttpsForPublicEmbed ? 'https:' : uriParts['protocol']);
		return encodeURI(protocol + '//' + uriParts['hostname'] + embedScriptFilePath);
	};
	$tab_ShareViewModel.$buildSizingJSForDSD = function ShareViewModel$BuildSizingJSForDSD() {
		var sizingAsync;
		var dsdSizing = new ss.StringBuilder(ss.formatString('if ( divElement.offsetWidth > {0} ) { ', tsConfig.dsd_tablet_max_size));
		dsdSizing.append($tab_ShareViewModel.$calculateEmbedSize$1(tabBootstrap.VizSizeConstraints.getSizeConstraints('desktop'), $tab_ShareViewModel.$automaticVizDesktopAspectRatio));
		dsdSizing.append(ss.formatString('} else if ( divElement.offsetWidth > {0} ) { ', tsConfig.dsd_phone_max_size));
		dsdSizing.append($tab_ShareViewModel.$calculateEmbedSize$1(tabBootstrap.VizSizeConstraints.getSizeConstraints('tablet'), $tab_ShareViewModel.$automaticVizTabletAspectRatio));
		dsdSizing.append('} else { ');
		dsdSizing.append($tab_ShareViewModel.$calculateEmbedSize$1(tabBootstrap.VizSizeConstraints.getSizeConstraints('phone'), $tab_ShareViewModel.$automaticVizPhoneAspectRatio));
		dsdSizing.append('} ');
		var result = $.Deferred();
		sizingAsync = result.resolve(dsdSizing.toString()).promise();
		return sizingAsync;
	};
	$tab_ShareViewModel.$calculateEmbedSize$1 = function ShareViewModel$CalculateEmbedSize(size, aspectRatio) {
		return $tab_ShareViewModel.$calculateEmbedSize({ minWidth: size.minWidth, maxWidth: size.maxWidth, minHeight: size.minHeight, maxHeight: size.maxHeight }, aspectRatio);
	};
	$tab_ShareViewModel.$calculateEmbedSize = function ShareViewModel$CalculateEmbedSize(size, aspectRatio) {
		var js = new ss.StringBuilder('');
		var addedHeight = $tab_ShareViewModel.$getAddedHeightForToolbarAndTabs();
		if (size.dashboardSizingMode === 'automatic' || size.minWidth === 0 && size.maxWidth === 0) {
			js.append("vizElement.style.width='100%';");
		}
		else if (size.minWidth === size.maxWidth) {
			js.append(ss.formatString("vizElement.style.width='{0}px';", size.minWidth));
		}
		else {
			if (size.minWidth > 0) {
				js.append(ss.formatString("vizElement.style.minWidth='{0}px';", size.minWidth));
			}
			else {
				js.append("vizElement.style.width='100%';");
			}
			if (size.maxWidth > 0) {
				js.append(ss.formatString("vizElement.style.maxWidth='{0}px';", size.maxWidth));
			}
			else {
				js.append("vizElement.style.maxWidth='100%';");
			}
			if (size.minWidth > 0 && size.maxWidth > 0 && size.minWidth !== size.maxWidth) {
				js.append("vizElement.style.width='100%';");
			}
		}
		if (size.dashboardSizingMode === 'automatic' || size.minHeight === 0 && size.maxHeight === 0) {
			js.append(ss.formatString("vizElement.style.height=(divElement.offsetWidth*{0})+'px';", aspectRatio));
		}
		else if (size.minHeight === size.maxHeight) {
			js.append(ss.formatString("vizElement.style.height='{0}px';", size.minHeight + addedHeight));
		}
		else {
			if (size.minHeight > 0) {
				js.append(ss.formatString("vizElement.style.minHeight='{0}px';", size.minHeight + addedHeight));
			}
			else {
				js.append(ss.formatString("vizElement.style.height=(divElement.offsetWidth*{0})+'px';", aspectRatio));
			}
			if (size.maxHeight > 0) {
				js.append(ss.formatString("vizElement.style.maxHeight='{0}px';", size.maxHeight + addedHeight));
			}
			else {
				js.append(ss.formatString("vizElement.style.maxHeight=(divElement.offsetWidth*{0})+'px';", aspectRatio));
			}
			if (size.minHeight > 0 && size.maxHeight > 0 && size.minHeight !== size.maxHeight) {
				js.append(ss.formatString("vizElement.style.height=(divElement.offsetWidth*{0})+'px';", aspectRatio));
			}
		}
		return js.toString();
	};
	$tab_ShareViewModel.$getV1ScriptTag = function ShareViewModel$GetV1ScriptTag(baseLocation) {
		var api_url = baseLocation.protocol + '//' + baseLocation.host + '/javascripts/api/viz_v1.js';
		return "<script type='text/javascript' src='" + api_url + "'></script>";
	};
	$tab_ShareViewModel.$getAddedHeightForToolbarAndTabs = function ShareViewModel$GetAddedHeightForToolbarAndTabs() {
		var height = 0;
		if (tsConfig.toolbarvis) {
			height += tabBootstrap.VizLayoutConstants.toolbarHeight;
		}
		height += tabBootstrap.VizLayoutConstants.get_tabsHeight();
		return height;
	};
	$tab_ShareViewModel.$getFacebookRedirectUri = function ShareViewModel$GetFacebookRedirectUri() {
		return tsConfig.facebookRedirectURI || $tab_ShareViewModel.$defaultFacebookUrl;
	};
	$tab_ShareViewModel.$fixURIParam = function ShareViewModel$FixURIParam(requestURI, isNewSetting, isDefaultSetting, paramNameStr, newSettingValue) {
		var isDifferentFromDefault = isNewSetting !== isDefaultSetting;
		var newRequestURI = requestURI;
		var newValue = '';
		if (ss.isNullOrEmptyString(newSettingValue)) {
			newValue = ':' + paramNameStr + '=' + (isNewSetting ? 'yes' : 'no');
		}
		else {
			newValue = ':' + paramNameStr + '=' + newSettingValue;
		}
		var regex = new RegExp(':' + paramNameStr + '=[^&]+');
		if (!!newRequestURI.match(regex)) {
			if (isDifferentFromDefault) {
				newRequestURI = newRequestURI.replace(regex, newValue);
			}
			else {
				newRequestURI = newRequestURI.replace(regex, '');
				newRequestURI = newRequestURI.replace(new RegExp('&&'), '&');
				newRequestURI = newRequestURI.replace(new RegExp('\\?&'), '?');
				newRequestURI = newRequestURI.replace(new RegExp('&$'), '');
				newRequestURI = newRequestURI.replace(new RegExp('\\?$'), '');
			}
		}
		else if (isDifferentFromDefault) {
			if (!!newRequestURI.match(new RegExp('[?]'))) {
				newRequestURI = newRequestURI + '&' + newValue;
			}
			else {
				newRequestURI = newRequestURI + '?' + newValue;
			}
		}
		return newRequestURI;
	};
	$tab_ShareViewModel.$generateRandomId = function ShareViewModel$GenerateRandomId() {
		var nowTimestamp = (new Date()).getTime().toString();
		return 'viz' + nowTimestamp;
	};
	global.tab.ShareViewModel = $tab_ShareViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SheetReconnectWidget
	var $tab_SheetReconnectWidget = function(props) {
		spiff.PureRenderComponent.call(this, props);
		this.state = { isConnectionClassSupported: false };
	};
	$tab_SheetReconnectWidget.__typeName = 'tab.SheetReconnectWidget';
	global.tab.SheetReconnectWidget = $tab_SheetReconnectWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ShownEventArgs
	var $tab_ShownEventArgs = function() {
		this.shownX = 0;
		this.shownY = 0;
		this.origX = 0;
		this.origY = 0;
		this.position = null;
		this.viewport = null;
		ss.EventArgs.call(this);
	};
	$tab_ShownEventArgs.__typeName = 'tab.ShownEventArgs';
	$tab_ShownEventArgs.areShownArgsSame = function ShownEventArgs$AreShownArgsSame(args1, args2) {
		if (ss.isNullOrUndefined(args1) && ss.isNullOrUndefined(args2)) {
			return true;
		}
		if (ss.isNullOrUndefined(args1) && ss.isValue(args2) || ss.isValue(args1) && ss.isNullOrUndefined(args2)) {
			return false;
		}
		var areSame;
		areSame = args1.origX === args2.origX;
		areSame = areSame && args1.origY === args2.origY;
		areSame = areSame && args1.shownX === args2.shownX;
		areSame = areSame && args1.shownY === args2.shownY;
		areSame = areSame && args1.position === args2.position;
		areSame = areSame && tab.RectUtil.isEqual(args1.viewport.get_dimensions(), args2.viewport.get_dimensions());
		return areSame;
	};
	global.tab.ShownEventArgs = $tab_ShownEventArgs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ShownTooltipEventArgs
	var $tab_ShownTooltipEventArgs = function() {
		this.tooltipAnchorY = 0;
		$tab_ShownEventArgs.call(this);
	};
	$tab_ShownTooltipEventArgs.__typeName = 'tab.ShownTooltipEventArgs';
	$tab_ShownTooltipEventArgs.areShownArgsSame = function ShownTooltipEventArgs$AreShownArgsSame(args1, args2) {
		return $tab_ShownEventArgs.areShownArgsSame(args1, args2) && args1.tooltipAnchorY === args2.tooltipAnchorY;
	};
	global.tab.ShownTooltipEventArgs = $tab_ShownTooltipEventArgs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SimpleTextContentDialog
	var $tab_SimpleTextContentDialog = function(props) {
		React.Component.call(this, props);
		this.state = new $tab_SimpleTextContentDialogState();
	};
	$tab_SimpleTextContentDialog.__typeName = 'tab.SimpleTextContentDialog';
	global.tab.SimpleTextContentDialog = $tab_SimpleTextContentDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SimpleTextContentDialogState
	var $tab_SimpleTextContentDialogState = function() {
		this.detailsAreExpanded = false;
	};
	$tab_SimpleTextContentDialogState.__typeName = 'tab.SimpleTextContentDialogState';
	global.tab.SimpleTextContentDialogState = $tab_SimpleTextContentDialogState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SmoothTooltipBehavior
	var $tab_SmoothTooltipBehavior = function(tooltip) {
		this.$mouseStopDetectionTime = 750;
		this.$tooltip = null;
		this.$mouseStopTimeoutHandle = null;
		this.$timeTooltipShown = null;
		this.$disposables = new tab.DisposableHolder();
		this.$1$OnMouseStopField = null;
		this.serverMarkBounds = null;
		tab.Param.verifyValue(tooltip, 'tooltip');
		this.$tooltip = tooltip;
		var mouseStopOverride = tab.FeatureParamsLookup.getInt(11);
		if (ss.isValue(mouseStopOverride)) {
			this.$mouseStopDetectionTime = ss.coalesce(mouseStopOverride, 0);
		}
	};
	$tab_SmoothTooltipBehavior.__typeName = 'tab.SmoothTooltipBehavior';
	global.tab.SmoothTooltipBehavior = $tab_SmoothTooltipBehavior;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Social
	var $tab_Social = function() {
	};
	$tab_Social.__typeName = 'tab.Social';
	$tab_Social.twitterPopup = function Social$TwitterPopup(vizLink, tweetText) {
		var twitterEl = $('#twitter_creator');
		var handle = (ss.isValue(twitterEl) ? twitterEl.attr('content') : null);
		if (!ss.isNullOrEmptyString(handle)) {
			handle = ' ' + handle;
		}
		tweetText += handle;
		var queryParams = {};
		queryParams['url'] = vizLink;
		queryParams['via'] = 'tableaupublic';
		queryParams['text'] = tweetText;
		queryParams['related'] = 'tableau';
		var twitterShareUrl = 'https://twitter.com/share?' + $.param(queryParams);
		var windowTitle = null;
		var popupOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=yes,width=680,height=350';
		window.open(twitterShareUrl, windowTitle, popupOptions);
	};
	$tab_Social.facebookPopup = function Social$FacebookPopup(appid, vizLink, thumbnailUrl, name, description, redirectUri) {
		var queryParams = {};
		queryParams['app_id'] = appid;
		queryParams['link'] = vizLink;
		queryParams['picture'] = thumbnailUrl;
		queryParams['name'] = name;
		queryParams['description'] = description;
		if (!!redirectUri && redirectUri.length > 0) {
			queryParams['redirect_uri'] = redirectUri;
		}
		var facebookShareUrl = 'http://www.facebook.com/dialog/feed?' + $.param(queryParams);
		var windowTitle = null;
		var popupOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=no,width=1000,height=565';
		var newWin = window.open(facebookShareUrl, windowTitle, popupOptions);
		if (ss.isValue(newWin) && typeof(newWin['focus']) === 'function') {
			newWin.focus();
		}
	};
	$tab_Social.mailTo = function Social$MailTo(shareUrl, description) {
		var queryParams = ss.mkdict(['body', shareUrl]);
		if (!!description) {
			queryParams['subject'] = description;
		}
		var mailtoStr = 'mailto:?' + $.param(queryParams);
		if (tsConfig.is_mobile && !tsConfig.is_mobile_app && BrowserSupport.BrowserSupport.IsSafari()) {
			window.location.href = mailtoStr;
		}
		else {
			var mailWindow = window.open(mailtoStr, 'MailWindow');
			if (ss.isValue(mailWindow)) {
				window.setTimeout(function() {
					try {
						if (mailWindow.location.href === 'about:blank') {
							mailWindow.close();
						}
					}
					catch ($t1) {
					}
				}, 999);
			}
		}
	};
	global.tab.Social = $tab_Social;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SubscribeComponent
	var $tab_SubscribeComponent = function(props, context) {
		React.Component.call(this, props, context);
		var users = props.users;
		var name = ((users.length === 0) ? '' : users[0].friendlyName);
		var groups = props.groups;
		var groupName = ((groups.length === 0) ? '' : groups[0].name);
		var defaultRecurrence = (ss.isValue(this.props.selfServiceSchedulesModule) ? this.props.selfServiceSchedulesModule.get_defaultRecurrence() : null);
		this.state = { mode: 0, message: null, subject: props.defaultSubject, includeValue: '0', scheduleValue: '0', formatValue: tab.Strings.ToolbarSubscribeToImage, email: props.email, users: props.users, groups: props.groups, usersText: this.$getSubscribersText(users.length, name, tab.Strings.ToolbarSubscribeAddUsersPlaceholder), groupsText: this.$getSubscribersText(groups.length, groupName, tab.Strings.ToolbarSubscribeAddGroupsPlaceholder), recurrenceModel: defaultRecurrence, sendOnlyWhenDataPresent: false, selfSubscribe: !props.isSelfSubscribeCheckboxEnabled };
	};
	$tab_SubscribeComponent.__typeName = 'tab.SubscribeComponent';
	global.tab.SubscribeComponent = $tab_SubscribeComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SubscribeComponentContainer
	var $tab_SubscribeComponentContainer = function(props) {
		ss.makeGenericType($tab_PureComponentWithAsyncDependencies$3, [tab.ISelfServiceSchedulesModule, $tab_SubscribeProps, Object]).call(this, props);
	};
	$tab_SubscribeComponentContainer.__typeName = 'tab.SubscribeComponentContainer';
	global.tab.SubscribeComponentContainer = $tab_SubscribeComponentContainer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SubscribeProps
	var $tab_SubscribeProps = function() {
		this.schedules = null;
		this.defaultSubject = null;
		this.email = null;
		this.emailIsValid = null;
		this.users = null;
		this.groups = null;
		this.onCancel = null;
		this.addSubscribersComponentProps = null;
		this.createSubscriptions = null;
		this.createSubscriptionsWithSelfServiceSchedule = null;
		this.setEmail = null;
		this.subscriptionsPageUrl = null;
		this.userSettingsPageUrl = null;
		this.sendOnlyWhenDataPresentCheckboxVisible = false;
		this.isFormatDropdownEnabled = false;
		this.isSelfSubscribeCheckboxEnabled = false;
		this.isSelfServiceSchedulesEnabled = false;
		this.selfServiceSchedulesModule = null;
	};
	$tab_SubscribeProps.__typeName = 'tab.SubscribeProps';
	global.tab.SubscribeProps = $tab_SubscribeProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SubscribeViewModel
	var $tab_SubscribeViewModel = function() {
		this.$users = [];
		this.$groups = [];
		this.$schedules = [];
		this.addSubscribersViewModel = null;
		this.$shouldSubscribeAllViews = false;
		this.$attachImage = false;
		this.$attachPdf = false;
		this.$mode = $tab_SubscribeViewModel.modeMainDialog;
		this.$3$SchedulesChangedField = null;
		this.$3$SubscribeSuccessField = null;
		this.$3$SubscribeCancelField = null;
		this.$3$UsersChangedField = null;
		this.$3$GroupsChangedField = null;
		this.$3$SendOnlyWhenDataPresentCheckboxStateChangedField = null;
		this.$3$AddSubscribersPopupStateChangedField = null;
		this.$3$DialogHiddenField = null;
		this.$3$ModeChangedField = null;
		this.$3$SendOnlyWhenDataPresentCheckboxSelectedField = false;
		this.$3$AddPdfAttachmentCheckboxSelectedField = false;
		this.$3$EmailField = null;
		this.$3$MessageField = null;
		this.$3$SubscriptionsPageUrlField = null;
		this.$3$UserSettingsPageUrlField = null;
		ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]).call(this);
		if (!tsConfig.is_guest || tab.FeatureFlags.isEnabled('SelfServiceSchedules') && tsConfig.self_service_schedules_enabled) {
			tab.StartupUtils.callOnceAfterInitialBootstrap(ss.mkdel(this, function() {
				tab.WorkgroupServerCommands.getSchedules(ss.mkdel(this, function(scheds) {
					this.$schedules = scheds.filter(function(sched) {
						return sched.get_schedulePresModel().scheduledAction === 'Subscription';
					});
					if (!ss.staticEquals(this.$3$SchedulesChangedField, null)) {
						this.$3$SchedulesChangedField();
					}
					this.incrementProps();
				}));
			}));
		}
		this.set_email(tsConfig.current_user_email);
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, this.$disposeAddSubscribersViewModel)));
		this.set_subscriptionsPageUrl((ss.isNullOrEmptyString(tsConfig.site_url_name) ? ss.formatString('/#/workbooks/{0}/subscriptions', tsConfig.current_workbook_id) : ss.formatString('/#/site/{0}/workbooks/{1}/subscriptions', tsConfig.site_url_name, tsConfig.current_workbook_id)));
		if (tab.FeatureFlags.isEnabled('UserTimeZone')) {
			this.set_userSettingsPageUrl((ss.isNullOrEmptyString(tsConfig.site_url_name) ? ss.formatString('/#/user/{0}/{1}/settings', tsConfig.current_user_domain_name, tsConfig.current_user_name) : ss.formatString('/#/site/{0}/user/{1}/{2}/settings', tsConfig.site_url_name, tsConfig.current_user_domain_name, tsConfig.current_user_name)));
		}
	};
	$tab_SubscribeViewModel.__typeName = 'tab.SubscribeViewModel';
	$tab_SubscribeViewModel.isSelfServiceSchedulesEnabled = function SubscribeViewModel$IsSelfServiceSchedulesEnabled() {
		return tab.FeatureFlags.isEnabled('SelfServiceSchedules') && tsConfig.self_service_schedules_enabled;
	};
	global.tab.SubscribeViewModel = $tab_SubscribeViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.SubscriptionMessageEditor
	var $tab_SubscriptionMessageEditor = function(props) {
		this.$textAreaRows = 24;
		this.textAreaElement = null;
		this.$boundDomElemRef = null;
		this.$bindDoneButtonClick = null;
		React.Component.call(this, props);
		this.$boundDomElemRef = ss.mkdel(this, function(el) {
			this.textAreaElement = ss.cast(el, ss.isValue(el) && (ss.isInstanceOfType(el, Element) && el.tagName === 'TEXTAREA'));
		});
		this.$bindDoneButtonClick = ss.mkdel(this, function(reactEvent) {
			this.props.onDoneButtonClick(this.textAreaElement.value);
		});
		var isWarning = ss.isValue(this.props.message) && this.props.message.length >= $tab_SubscriptionMessageEditor.characterWarningLimit;
		this.state = { isError: false, isWarning: isWarning, warningMessage: (isWarning ? tab.Strings.MessageCharacterLimit(this.props.message.length, $tab_SubscriptionMessageEditor.characterLimit) : null) };
	};
	$tab_SubscriptionMessageEditor.__typeName = 'tab.SubscriptionMessageEditor';
	global.tab.SubscriptionMessageEditor = $tab_SubscriptionMessageEditor;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TabEventArgs
	var $tab_TabEventArgs = function(tabLabelElement, tabContentElement, tabIndex) {
		this.tabLabelElement = null;
		this.tabContentElement = null;
		this.tabIndex = 0;
		ss.EventArgs.call(this);
		this.tabLabelElement = tabLabelElement;
		this.tabContentElement = tabContentElement;
		this.tabIndex = tabIndex;
	};
	$tab_TabEventArgs.__typeName = 'tab.TabEventArgs';
	global.tab.TabEventArgs = $tab_TabEventArgs;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TableauServerReconnectWidget
	var $tab_TableauServerReconnectWidget = function(props) {
		$tab_SheetReconnectWidget.call(this, props);
	};
	$tab_TableauServerReconnectWidget.__typeName = 'tab.TableauServerReconnectWidget';
	global.tab.TableauServerReconnectWidget = $tab_TableauServerReconnectWidget;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TabRenderContext2D
	var $tab_TabRenderContext2D = function(baseContext) {
		this.$baseContext = null;
		this.$extraStateStack = null;
		this.$fontNormalizer = null;
		this.$transformMatrix = null;
		this.$linePattern = null;
		this.$textAngle = 0;
		this.$shapeFillStyle = null;
		this.$textFillStyle = null;
		this.$shouldAntialias = false;
		this.$baseFillStyle = null;
		this.$baseLineCap = null;
		this.$baseLineJoin = null;
		this.$baseStrokeStyle = null;
		this.$shouldUnderlineText = false;
		this.$fontSize = 0;
		this.$numSavedStates = 0;
		this.$currentClipRect = null;
		this.dirtyRect = null;
		this.pixelRatio = 0;
		this.$baseContext = baseContext;
		this.$extraStateStack = new Array();
		this.$fontNormalizer = $tab_FontNormalizer.instance();
		this.$transformMatrix = new tab.TransformationMatrix();
		this.reset();
		this.clearDirtyRect();
	};
	$tab_TabRenderContext2D.__typeName = 'tab.TabRenderContext2D';
	$tab_TabRenderContext2D.$findFontSize = function TabRenderContext2D$FindFontSize(font) {
		if (!tab.MiscUtil.isNullOrEmpty$3(font)) {
			var fontParts = font.split(' ');
			for (var $t1 = 0; $t1 < fontParts.length; $t1++) {
				var fontPart = fontParts[$t1];
				var val = parseFloat(fontPart);
				if (isFinite(val)) {
					return val;
				}
			}
		}
		return $tab_TabRenderContext2D.defaultFontSize;
	};
	global.tab.TabRenderContext2D = $tab_TabRenderContext2D;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TextRegionOptions
	var $tab_TextRegionOptions = function(textSelectable) {
		this.textSelectable = false;
		this.textSelectable = textSelectable;
	};
	$tab_TextRegionOptions.__typeName = 'tab.TextRegionOptions';
	global.tab.TextRegionOptions = $tab_TextRegionOptions;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TextRegionTemplate
	var $tab_TextRegionTemplate = function(headerLevel) {
		this.textRegionBoundaryElem = null;
		this.contentElem = null;
		this.formatIndicatorElem = null;
		this.chevron = null;
		spiff.Template.call(this, $($tab_TextRegionTemplate.$addHeaderInfoIfNeeded(headerLevel)));
		var g = ss.mkdel(this, this.getElementBySelector);
		this.textRegionBoundaryElem = g('.tab-textRegion-boundary');
		this.contentElem = g('.tab-textRegion-content');
		this.formatIndicatorElem = g('.tab-formatThisZone');
		this.formatIndicatorElem.hide();
	};
	$tab_TextRegionTemplate.__typeName = 'tab.TextRegionTemplate';
	$tab_TextRegionTemplate.$addHeaderInfoIfNeeded = function TextRegionTemplate$AddHeaderInfoIfNeeded(headerLevel) {
		var replacement = '';
		if (headerLevel > 0) {
			replacement = ss.formatString("role='heading' aria-level='{0}'", headerLevel);
		}
		return ss.formatString($tab_TextRegionTemplate.$htmlTemplate, replacement);
	};
	global.tab.TextRegionTemplate = $tab_TextRegionTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TextRegionView
	var $tab_TextRegionView = function(viewModel) {
		$tab_TextRegionView.$ctor1.call(this, viewModel, -1);
	};
	$tab_TextRegionView.__typeName = 'tab.TextRegionView';
	$tab_TextRegionView.$ctor1 = function(viewModel, headingVal) {
		this.$contextMenuVisible = false;
		ss.makeGenericType(spiff.BaseView$1, [$tab_TextRegionViewModel]).call(this, viewModel, new $tab_TextRegionTemplate(headingVal));
		this.get_$textRegionViewModel().add_newTextRegion(ss.mkdel(this, this.handleNewTextRegion));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.get_$textRegionViewModel().remove_newTextRegion(ss.mkdel(this, this.handleNewTextRegion));
		})));
		this.disposables.add$1(spiff.TableauClickHandler.targetAndRightClick(this.element[0], ss.mkdel(this, this.handleRightClick)));
		if (tsConfig.is_authoring && !tsConfig.is_mobile && this.get_viewModel().isTitle()) {
			this.disposables.add$1(spiff.TableauClickHandler.targetAndDoubleClick(this.element[0], ss.mkdel(this, this.handleDoubleClick)));
			var $t1 = new EventUtils.EventHandleSpec();
			$t1.hoverDelay = 0;
			var config = $t1;
			config.SetHandler('mouseleave', ss.mkdel(this, this.handleMouseLeave));
			config.SetHandler('hover', ss.mkdel(this, this.handleHover));
			this.disposables.add$1(spiff.TableauClickHandler.targetAndConfig(this.element[0], config));
			this.get_$textRegionTemplate().addChevron(ss.mkdel(this, this.$handleChevronClick));
		}
	};
	$tab_TextRegionView.$isRotatedRight = function TextRegionView$IsRotatedRight(orientation) {
		return Math.round(orientation) === 90;
	};
	$tab_TextRegionView.$isRotatedLeft = function TextRegionView$IsRotatedLeft(orientation) {
		return Math.round(orientation) === -90;
	};
	$tab_TextRegionView.$addCssTransform = function TextRegionView$AddCssTransform(elem, origin, angle) {
		var css = {};
		css['transform-origin'] = origin;
		css['transform'] = 'rotate(' + angle + 'deg)';
		elem.css(css);
	};
	$tab_TextRegionView.$getCssLeftForRotatedText = function TextRegionView$GetCssLeftForRotatedText(containerWidth, contentElemHeight, align, orientation) {
		var left = 0;
		if (contentElemHeight > containerWidth) {
			align = ($tab_TextRegionView.$isRotatedRight(orientation) ? 'h-align-right' : 'h-align-left');
		}
		switch (align) {
			case 'h-align-left': {
				left = 0;
				break;
			}
			case 'h-align-right': {
				left = containerWidth - contentElemHeight;
				break;
			}
			case 'h-align-center': {
				left = ss.Int32.div(containerWidth, 2) - ss.Int32.div(contentElemHeight, 2);
				break;
			}
		}
		return left + 'px';
	};
	global.tab.TextRegionView = $tab_TextRegionView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TextRegionViewModel
	var $tab_TextRegionViewModel = function(textRegionModel) {
		this.$textRegionModel = null;
		this.options = new $tab_TextRegionOptions(true);
		this.$2$NewTextRegionField = null;
		spiff.BaseViewModel.call(this);
		this.$textRegionModel = textRegionModel;
		this.$textRegionModel.add_newText(ss.mkdel(this, this.handleNewTextRegion));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$textRegionModel.remove_newText(ss.mkdel(this, this.handleNewTextRegion));
		})));
	};
	$tab_TextRegionViewModel.__typeName = 'tab.TextRegionViewModel';
	global.tab.TextRegionViewModel = $tab_TextRegionViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TiledImageTemplate
	var $tab_TiledImageTemplate = function() {
		this.container = null;
		spiff.Template.call(this, $($tab_TiledImageTemplate.$htmlTemplate));
		this.container = this.getElementBySelector('.tvimagesContainer');
	};
	$tab_TiledImageTemplate.__typeName = 'tab.TiledImageTemplate';
	global.tab.TiledImageTemplate = $tab_TiledImageTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TiledImageView
	var $tab_TiledImageView = function(viewModel) {
		ss.makeGenericType(spiff.BaseView$1, [$tab_TiledImageViewModel]).call(this, viewModel, new $tab_TiledImageTemplate());
	};
	$tab_TiledImageView.__typeName = 'tab.TiledImageView';
	global.tab.TiledImageView = $tab_TiledImageView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TiledImageViewModel
	var $tab_TiledImageViewModel = function() {
		spiff.BaseViewModel.call(this);
	};
	$tab_TiledImageViewModel.__typeName = 'tab.TiledImageViewModel';
	global.tab.TiledImageViewModel = $tab_TiledImageViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToggleFullScreenKeyboardShortcut
	var $tab_ToggleFullScreenKeyboardShortcut = function() {
		tab.GlobalKeyboardShortcut.call(this);
	};
	$tab_ToggleFullScreenKeyboardShortcut.__typeName = 'tab.ToggleFullScreenKeyboardShortcut';
	global.tab.ToggleFullScreenKeyboardShortcut = $tab_ToggleFullScreenKeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarButtonProps
	var $tab_ToolbarButtonProps$1 = function(TViewModel) {
		var $type = function() {
			this.viewModel = null;
		};
		ss.registerGenericClassInstance($type, $tab_ToolbarButtonProps$1, [TViewModel], {}, function() {
			return null;
		}, function() {
			return [];
		});
		return $type;
	};
	$tab_ToolbarButtonProps$1.__typeName = 'tab.ToolbarButtonProps$1';
	ss.initGenericClass($tab_ToolbarButtonProps$1, $asm, 1);
	global.tab.ToolbarButtonProps$1 = $tab_ToolbarButtonProps$1;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarButtonTemplate
	var $tab_ToolbarButtonTemplate = function() {
		this.$2$ImageField = null;
		this.$2$TextField = null;
		spiff.Template.call(this, $($tab_ToolbarButtonTemplate.$htmlTemplate));
		this.set_image(this.getElementBySelector('.tabToolbarButtonImg'));
		this.set_text(this.getElementBySelector('.tabToolbarButtonText'));
	};
	$tab_ToolbarButtonTemplate.__typeName = 'tab.ToolbarButtonTemplate';
	global.tab.ToolbarButtonTemplate = $tab_ToolbarButtonTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarButtonView
	var $tab_ToolbarButtonView = function(viewModel) {
		this.$previousIconClass = null;
		this.$3$ToolbarButtonField = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_ToolbarButtonViewModel]).call(this, viewModel, new $tab_ToolbarButtonTemplate());
		this.get_viewModel().add_clickButtonRequested(ss.mkdel(this, this.onClicked));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.get_viewModel().remove_clickButtonRequested(ss.mkdel(this, this.onClicked));
		})));
		this.get_viewModel().add_showButtonRequested(ss.mkdel(this, this.$show));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.get_viewModel().remove_showButtonRequested(ss.mkdel(this, this.$show));
		})));
		this.get_viewModel().add_hideButtonRequested(ss.mkdel(this, this.$hide));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.get_viewModel().remove_hideButtonRequested(ss.mkdel(this, this.$hide));
		})));
		this.$setupButton();
	};
	$tab_ToolbarButtonView.__typeName = 'tab.ToolbarButtonView';
	$tab_ToolbarButtonView.create = function ToolbarButtonView$Create(viewModel) {
		return new $tab_ToolbarButtonView(viewModel);
	};
	global.tab.ToolbarButtonView = $tab_ToolbarButtonView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarButtonViewModel
	var $tab_ToolbarButtonViewModel = function(text, iconClass, action) {
		this.$fetchDialogContent = null;
		this.action = null;
		this.dialogContent = null;
		this.$text = null;
		this.$tooltipText = null;
		this.$iconClass = null;
		this.$description = null;
		this.$enabled = false;
		this.$isActive = false;
		this.$2$ShowDialogRequestedField = null;
		this.$2$ClickButtonRequestedField = null;
		this.$2$ShowButtonRequestedField = null;
		this.$2$HideButtonRequestedField = null;
		this.$2$ItemWrapperField = null;
		this.$2$IconTypeField = null;
		this.$2$IsSeparatorField = false;
		this.$2$IsHiddenField = false;
		spiff.BaseViewModel.call(this);
		this.$text = text;
		this.$iconClass = iconClass;
		this.action = action;
		this.$enabled = !ss.staticEquals(action, null);
	};
	$tab_ToolbarButtonViewModel.__typeName = 'tab.ToolbarButtonViewModel';
	$tab_ToolbarButtonViewModel.shouldShowButton = function ToolbarButtonViewModel$ShouldShowButton(itemWrapper, viewModel) {
		if (ss.isNullOrUndefined(viewModel)) {
			return false;
		}
		switch (itemWrapper.get_iconRes()) {
			case 'share': {
				return tsConfig.showShareOptions;
			}
			case 'edit': {
				return tsConfig.allow_authoring && !tsConfig.previewMode && !$tab_ToolbarViewModel.get_$isPublic() && !tsConfig.is_mobile_app && !viewModel.get_useSmallScreenToolbar();
			}
			case 'customviews': {
				return tsConfig.allow_custom_views && !viewModel.get_forceHideCustomViewsButton() && !viewModel.get_useSmallScreenToolbar();
			}
			case 'subscribe': {
				return tsConfig.allow_subscriptions && tsConfig.workbook_allow_subscriptions;
			}
			case 'download': {
				return !tsConfig.previewMode;
			}
			case 'alert': {
				if (tab.FeatureFlags.isEnabled('AlertSidePanel') && !tsConfig.is_mobile_app) {
					return tsConfig.allow_view_data_alerts;
				}
				else {
					return tsConfig.allow_data_alert;
				}
			}
			case 'lineage': {
				return !tsConfig.is_guest;
			}
			case 'public-logo': {
				return tsConfig.isPublic;
			}
			default: {
				return true;
			}
		}
	};
	$tab_ToolbarButtonViewModel.createSeparator = function ToolbarButtonViewModel$CreateSeparator() {
		var $t1 = new $tab_ToolbarButtonViewModel(null, 'tabAuthToolbarSeparator', null);
		$t1.set_isSeparator(true);
		return $t1;
	};
	$tab_ToolbarButtonViewModel.createFromCommandItem = function ToolbarButtonViewModel$CreateFromCommandItem(commandItem, iconClassPrefix, toolbarViewModel) {
		var itemWrapper = tab.CommandItemWrapper.create(commandItem);
		tab.Param.verifyValue(commandItem, 'commandItem');
		var $t1 = new $tab_ToolbarButtonViewModel(itemWrapper.get_name(), iconClassPrefix + itemWrapper.get_iconRes(), null);
		$t1.$enabled = ss.isNullOrUndefined(itemWrapper.get_enabled()) || itemWrapper.get_enabled();
		$t1.set_iconType(itemWrapper.get_iconRes());
		$t1.set_description(itemWrapper.get_description());
		$t1.set_itemWrapper(itemWrapper);
		var buttonVM = $t1;
		buttonVM.$fetchDialogContent = function() {
			return $tab_ToolbarButtonViewModel.fetchDialogContent(toolbarViewModel, buttonVM);
		};
		var itemCommand = tab.CommandSerializer.deserialize(itemWrapper.get_command(), false);
		if (ss.referenceEquals(buttonVM.get_iconType(), $tab_ToolbarButtonViewModel.iconTypeEdit)) {
			buttonVM.action = tab.ToolbarServerCommands.launchEditing;
		}
		else if (buttonVM.get_iconType() === 'alert') {
			buttonVM.action = function() {
				$tab_DataAlertDialogViewModel.handleDataAlertClick(itemWrapper.get_description());
			};
		}
		else if (ss.isValue(itemCommand)) {
			buttonVM.action = function() {
				var itemCommandId = { ns: itemCommand.commandNamespace, cmd: itemCommand.commandName };
				buttonVM.set_isActive(true);
				if (tab.WebCommandRegistry.get_instance().hasCommand(itemCommandId)) {
					var command = tab.WebCommandRegistry.get_instance().createCommandWithParams(itemCommandId, itemCommand.commandParams);
					command.invoke();
					buttonVM.set_isActive(false);
				}
				else {
					tab.ServerCommands.executeServerCommand(itemCommand, 'immediately', function(arg) {
						buttonVM.set_isActive(false);
					}, function(arg1) {
						buttonVM.set_isActive(false);
					});
				}
			};
		}
		return buttonVM;
	};
	$tab_ToolbarButtonViewModel.fetchDialogContent = function ToolbarButtonViewModel$FetchDialogContent(toolbarViewModel, buttonVM) {
		var deferred = $.Deferred();
		switch (buttonVM.get_iconType()) {
			case 'download': {
				tab.ModuleManager.load(tab.IDownloadDialogModule).call(null, []).done(function(module) {
					buttonVM.dialogContent = buttonVM.dialogContent || module.buildDialogContent();
					deferred.resolve(buttonVM.dialogContent);
				});
				break;
			}
			case 'share': {
				if (!$tab_ToolbarViewModel.get_$isPublic() && tab.FeatureFlags.isEnabled('NewShareDialog')) {
					tab.ModuleManager.load(tab.IShareDialogFactory).call(null, []).done(function(module1) {
						buttonVM.dialogContent = module1.buildDialogContent();
						deferred.resolve(buttonVM.dialogContent);
					});
				}
				else {
					buttonVM.dialogContent = buttonVM.dialogContent || $tab_ToolbarButtonViewModel.$createDialogContentFromIconType(buttonVM.get_iconType(), toolbarViewModel);
					deferred.resolve(buttonVM.dialogContent);
				}
				break;
			}
			default: {
				buttonVM.dialogContent = buttonVM.dialogContent || $tab_ToolbarButtonViewModel.$createDialogContentFromIconType(buttonVM.get_iconType(), toolbarViewModel);
				deferred.resolve(buttonVM.dialogContent);
				break;
			}
		}
		return deferred.promise();
	};
	$tab_ToolbarButtonViewModel.$createDialogContentFromIconType = function ToolbarButtonViewModel$CreateDialogContentFromIconType(iconType, toolbarViewModel) {
		switch (iconType) {
			case 'share': {
				return new $tab_ShareViewModel();
			}
			case 'customviews': {
				return (ss.isNullOrUndefined(toolbarViewModel) ? null : toolbarViewModel.get_customViewsViewModel());
			}
			case 'subscribe': {
				return new $tab_SubscribeViewModel();
			}
			case 'public-logo': {
				return new $tab_PublicInfoViewModel();
			}
			default: {
				return null;
			}
		}
	};
	global.tab.ToolbarButtonViewModel = $tab_ToolbarButtonViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarDropdownButtonViewModel
	var $tab_ToolbarDropdownButtonViewModel = function(text, iconClass, menuBuilder) {
		this.$menuBuilder = null;
		$tab_ToolbarButtonViewModel.call(this, text, iconClass, null);
		tab.Param.verifyValue(menuBuilder, 'menuBuilder');
		this.$menuBuilder = menuBuilder;
		this.set_enabled(this.createMenu().menuItems.some(function(item) {
			return item.enabled;
		}));
	};
	$tab_ToolbarDropdownButtonViewModel.__typeName = 'tab.ToolbarDropdownButtonViewModel';
	global.tab.ToolbarDropdownButtonViewModel = $tab_ToolbarDropdownButtonViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarDropdownMenuViewModel
	var $tab_ToolbarDropdownMenuViewModel = function(text, iconClass, menuBuilder) {
		this.$menuBuilder = null;
		this.$menu = null;
		this.$3$PropsUpdatedField = null;
		this.$3$PropsField = null;
		$tab_ToolbarButtonViewModel.call(this, text, iconClass, null);
		tab.Param.verifyValue(menuBuilder, 'menuBuilder');
		this.$menuBuilder = menuBuilder;
		this.$menu = this.createMenu();
		this.set_enabled(this.$menu.menuItems.some(function(item) {
			return item.enabled;
		}));
		if (this.get_enabled()) {
			var selectedIndex = 0;
			var index = 0;
			for (var $t1 = 0; $t1 < this.$menu.menuItems.length; $t1++) {
				var item1 = this.$menu.menuItems[$t1];
				if (item1.checkState !== 0) {
					selectedIndex = index;
					break;
				}
				index++;
			}
			index = 0;
			this.set_props({ dropdownType: 0, menuItemInfos: _.map(this.$menu.menuItems, function(menuItem) {
				return { displayValue: menuItem.name, disabled: !menuItem.enabled, value: (index++).toString() };
			}), containerStyle: { width: '97px' }, selectedValue: selectedIndex.toString(), onSelect: ss.mkdel(this, this.$handleSelection), testId: 'FitDropdown' });
		}
	};
	$tab_ToolbarDropdownMenuViewModel.__typeName = 'tab.ToolbarDropdownMenuViewModel';
	global.tab.ToolbarDropdownMenuViewModel = $tab_ToolbarDropdownMenuViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarTemplate
	var $tab_ToolbarTemplate = function() {
		this.toolbar = null;
		this.leftItems = null;
		this.rightItems = null;
		spiff.Template.call(this, $(($tab_ToolbarViewModel.get_$isPublic() ? $tab_ToolbarTemplate.$publicHtmlTemplate : $tab_ToolbarTemplate.$defaultHtmlTemplate)));
		this.toolbar = this.domRoot;
		this.leftItems = this.getElementBySelector('.tab-vizItems');
		this.rightItems = this.getElementBySelector('.tab-nonVizItems');
	};
	$tab_ToolbarTemplate.__typeName = 'tab.ToolbarTemplate';
	global.tab.ToolbarTemplate = $tab_ToolbarTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarToggleButtonViewModel
	var $tab_ToolbarToggleButtonViewModel = function(text, iconType, iconClass, action, toggleToText) {
		this.$toggleToText = null;
		$tab_ToolbarButtonViewModel.call(this, text, iconClass, action);
		this.$toggleToText = toggleToText;
		this.set_iconType(iconType);
	};
	$tab_ToolbarToggleButtonViewModel.__typeName = 'tab.ToolbarToggleButtonViewModel';
	$tab_ToolbarToggleButtonViewModel.createFromCommandItems = function ToolbarToggleButtonViewModel$CreateFromCommandItems(commandItemOne, commandItemTwo, iconClassPrefix) {
		var activeCommandItem;
		var inactiveCommandItem;
		var itemOneWrapper = tab.CommandItemWrapper.create(commandItemOne);
		var itemTwoWrapper = tab.CommandItemWrapper.create(commandItemTwo);
		if (!ss.isValue(itemOneWrapper.get_enabled()) || itemOneWrapper.get_enabled()) {
			activeCommandItem = itemOneWrapper;
			inactiveCommandItem = itemTwoWrapper;
		}
		else if (!ss.isValue(itemTwoWrapper.get_enabled()) || itemTwoWrapper.get_enabled()) {
			activeCommandItem = itemTwoWrapper;
			inactiveCommandItem = itemOneWrapper;
		}
		else {
			return null;
		}
		var button = $tab_ToolbarButtonViewModel.createFromCommandItem(activeCommandItem.get_item(), iconClassPrefix, null);
		var toggleButton = new $tab_ToolbarToggleButtonViewModel(button.get_text(), button.get_iconType(), button.get_iconClass(), button.get_buttonAction(), inactiveCommandItem.get_name());
		toggleButton.disposables.add$1(button);
		toggleButton.set_enabled(ss.isValue(inactiveCommandItem) && !inactiveCommandItem.get_enabled());
		if (toggleButton.get_enabled()) {
			return toggleButton;
		}
		return null;
	};
	global.tab.ToolbarToggleButtonViewModel = $tab_ToolbarToggleButtonViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarView
	var $tab_ToolbarView = function(viewModel) {
		this.$toolbarButtonsForSidePanes = ['alert', 'lineage'];
		this.$toolbarViewModel = null;
		this.$vizItemsWidth = 0;
		this.$vizItemsStackedWidth = 0;
		this.$vizItemsSmallWidth = 0;
		this.$nonVizItemsWidth = 0;
		this.$nonVizItemsStackedWidth = 0;
		this.$nonVizItemsSmallWidth = 0;
		this.$buttonNoTextWidth = 0;
		this.$3$CustomViewsButtonField = null;
		this.$3$RedoButtonField = null;
		this.$3$EditButtonField = null;
		this.$3$ShareButtonField = null;
		this.$3$AlertButtonField = null;
		this.$3$SubscribeOthersButtonField = null;
		this.$3$FullScreenButtonField = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_ToolbarViewModel]).call(this, viewModel, new $tab_ToolbarTemplate());
		this.$toolbarViewModel = viewModel;
		this.$toolbarViewModel.add_newToolbar(ss.mkdel(this, this.$rebuildToolbarButtons));
		$tab_ServerFontLoader.get_instance().add_fontPreparationComplete(ss.mkdel(this, this.$handleResize));
		spiff.FullscreenUtil.add_fullscreenStateChanged(ss.mkdel(this, this.$handleFullscreenChange));
		this.disposables.add(ss.mkdel(this, function() {
			this.$toolbarViewModel.remove_newToolbar(ss.mkdel(this, this.$rebuildToolbarButtons));
			$tab_ServerFontLoader.get_instance().remove_fontPreparationComplete(ss.mkdel(this, this.$handleResize));
			spiff.FullscreenUtil.remove_fullscreenStateChanged(ss.mkdel(this, this.$handleFullscreenChange));
		}));
		this.element.on('keydown', ss.mkdel(this, this.$onKeyDown));
		this.element.attr('role', 'toolbar');
		if (tsConfig.allow_custom_views) {
			var updateButton = ss.mkdel(this, function(sender, args) {
				this.updateCustomViewsButton();
				this.$measureToolbarItemsAndHandleResize();
			});
			this.get_$customViewsViewModel().add_dirtyChanged(updateButton);
			this.get_$customViewsViewModel().add_customViewListChanged(updateButton);
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.get_$customViewsViewModel().remove_dirtyChanged(updateButton);
				this.get_$customViewsViewModel().remove_customViewListChanged(updateButton);
			})));
		}
		var throttleHandleResize = _.throttle(ss.mkdel(this, this.$handleResize), $tab_ToolbarView.$toolbarThrottleTimeMs);
		this.disposables.add$1(spiff.EventUtil.bindWithDispose($(window), 'resize', function(evt) {
			throttleHandleResize();
		}));
	};
	$tab_ToolbarView.__typeName = 'tab.ToolbarView';
	$tab_ToolbarView.$showIfNotNull = function ToolbarView$ShowIfNotNull(button) {
		if (ss.isValue(button)) {
			button.element.show();
		}
	};
	$tab_ToolbarView.shouldAllowFullScreen = function ToolbarView$ShouldAllowFullScreen() {
		return spiff.FullscreenUtil.get_fullscreenEnabled() && !tsConfig.is_mobile;
	};
	$tab_ToolbarView.$relaxButtonWidths = function ToolbarView$RelaxButtonWidths(toolbarSection) {
		toolbarSection.children($tab_ToolbarView.$toolbarButtonSelector).css('width', '');
	};
	$tab_ToolbarView.$hideLabels = function ToolbarView$HideLabels(items) {
		items.addClass($tab_ToolbarView.$hideLabelsClass);
		items.removeClass($tab_ToolbarView.$showLabelsClass);
		items.find($tab_ToolbarView.$toolbarButtonSelector).each(function(index, e) {
			var button = $(e);
			var label = button.find('.tabToolbarButtonText').text();
			button.attr('title', label);
			button.removeAttr('aria-label');
		});
	};
	$tab_ToolbarView.$showLabels = function ToolbarView$ShowLabels(items) {
		items.addClass($tab_ToolbarView.$showLabelsClass);
		items.removeClass($tab_ToolbarView.$hideLabelsClass);
		items.find($tab_ToolbarView.$toolbarButtonSelector).each(function(index, e) {
			e.removeAttribute('title');
			var button = $(e);
			var label = button.find('.tabToolbarButtonText').text();
			button.attr('aria-label', label);
		});
	};
	global.tab.ToolbarView = $tab_ToolbarView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ToolbarViewModel
	var $tab_ToolbarViewModel = function(model, deviceLayoutViewModel) {
		this.$toolbarModel = null;
		this.$vizItems = [];
		this.$nonVizItems = [];
		this.$customViewsViewModel = new $tab_CustomViewsViewModel();
		this.$deviceLayoutViewModel = null;
		this.$forceHideCustomViews = false;
		this.$renderModelLabel = null;
		this.$2$NewToolbarField = null;
		this.$2$ShouldShowCommentingField = false;
		this.$2$DeviceLayoutItemField = null;
		this.$2$DialogHostViewModelField = null;
		spiff.BaseViewModel.call(this);
		this.$toolbarModel = model;
		if (!tsConfig.allow_custom_view_save) {
			this.$forceHideCustomViews = true;
			this.$customViewsViewModel.add_customViewListChanged(ss.mkdel(this, this.$onCustomViewListChanged));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$customViewsViewModel.remove_customViewListChanged(ss.mkdel(this, this.$onCustomViewListChanged));
			})));
		}
		this.set_dialogHostViewModel(new $tab_DialogHostViewModel());
		this.$deviceLayoutViewModel = deviceLayoutViewModel;
		this.$deviceLayoutViewModel.add_newLayouts(ss.mkdel(this, this.$onNewDeviceLayouts));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$deviceLayoutViewModel.remove_newLayouts(ss.mkdel(this, this.$onNewDeviceLayouts));
		})));
		if (ss.isValue(this.$deviceLayoutViewModel.get_deviceLayouts())) {
			this.$onNewDeviceLayouts();
		}
		if (ss.isValue(this.$toolbarModel.get_vizCommandItems())) {
			this.$handleNewToolbar(null);
		}
		var handleNewtoolbarWrapper = ss.mkdel(this, function() {
			this.$handleNewToolbar(null);
		});
		this.$toolbarModel.add_newToolbar(handleNewtoolbarWrapper);
		tab.CommandController.get().add_tabChangeCompleted(ss.mkdel(this, this.$handleNewToolbar));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$toolbarModel.remove_newToolbar(handleNewtoolbarWrapper);
			tab.CommandController.get().remove_tabChangeCompleted(ss.mkdel(this, this.$handleNewToolbar));
		})));
	};
	$tab_ToolbarViewModel.__typeName = 'tab.ToolbarViewModel';
	$tab_ToolbarViewModel.get_toolbarHeight = function ToolbarViewModel$get_ToolbarHeight() {
		return tabBootstrap.VizLayoutConstants.get_vizToolbarHeight();
	};
	$tab_ToolbarViewModel.get_$isPublic = function ToolbarViewModel$get_IsPublic() {
		return tsConfig.isPublic;
	};
	$tab_ToolbarViewModel.get_toolbarIsBottom = function ToolbarViewModel$get_ToolbarIsBottom() {
		return ($tab_ToolbarViewModel.get_$isPublic() || tsConfig.embedded) && !tsConfig.forceToolbarTop;
	};
	global.tab.ToolbarViewModel = $tab_ToolbarViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Tooltip
	var $tab_Tooltip = function(template) {
		this.tupleId = null;
		this.$domTemplate = null;
		this.$prePositionActions = [];
		this.$isShown = false;
		this.$showPosition = null;
		this.$showAbove = false;
		this.$verticalOffset = $tab_Tooltip.defaultVerticalOffset;
		this.$horizontalOffset = $tab_Tooltip.defaultHorizonalOffset;
		this.$lastLocation = null;
		this.$verticalCutoffForAbovePositioning = null;
		this.$suppressTooltip = false;
		this.$showTooltipAfterPositioning = false;
		this.$calculatedShownArgs = null;
		this.$2$ClosedField = null;
		this.$2$PrePositionField = null;
		this.$2$PositionCalculatedField = null;
		this.$2$ShowedField = null;
		this.$2$PositionedField = null;
		this.$2$FreezePositionWhileOpenField = false;
		spiff.Widget.call(this, (template || $tab_Tooltip.$lazyGetTooltipElement()).domRoot);
		this.$domTemplate = template || $tab_Tooltip.$lazyGetTooltipElement();
		this.$showAbove = tsConfig.is_mobile;
		if (!tsConfig.is_mobile) {
			$(window).on(this.createNamespacedEventName('resize'), ss.mkdel(this, function() {
				this.$verticalCutoffForAbovePositioning = null;
			}));
		}
	};
	$tab_Tooltip.__typeName = 'tab.Tooltip';
	$tab_Tooltip.$lazyGetTooltipElement = function Tooltip$LazyGetTooltipElement() {
		return $tab_Tooltip.$tooltipElement || ($tab_Tooltip.$tooltipElement = new $tab_TooltipTemplate());
	};
	global.tab.Tooltip = $tab_Tooltip;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TooltipBaseLegacyMode
	var $tab_TooltipBaseLegacyMode = function(contextProvider, visualId) {
		$tab_TooltipBaseMode.call(this, 'sticky', contextProvider, visualId);
		var legacyTooltipBehavior = this.get_currentBehavior();
		legacyTooltipBehavior.attach();
		this.get_tooltip().add_showed(ss.mkdel(this, this.$removeMousePassthrough));
	};
	$tab_TooltipBaseLegacyMode.__typeName = 'tab.TooltipBaseLegacyMode';
	global.tab.TooltipBaseLegacyMode = $tab_TooltipBaseLegacyMode;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TooltipBaseMode
	var $tab_TooltipBaseMode = function(defaultBehavior, contextProvider, visualId) {
		this.disposables = new tab.DisposableHolder();
		this.tooltipBehaviors = null;
		this.$contextProvider = null;
		this.readyForHover = true;
		this.$hasHoverOrMenuAction = false;
		this.$vizInTooltipDelayTimer = null;
		this.$isMenuOpen = false;
		this.$1$TooltipClosedField = null;
		this.$1$MouseExitedTooltipField = null;
		this.$1$UbertipUpdatedField = null;
		this.$1$UbertipActionExecutedField = null;
		this.$1$UbertipCommandExecutedField = null;
		this.$1$VisualIDPresModelField = null;
		this.$1$TooltipField = null;
		this.$1$UbertipField = null;
		this.$1$CurrentBehaviorTypeField = null;
		this.$1$DefaultBehaviorTypeField = null;
		this.$contextProvider = contextProvider;
		this.set_visualIDPresModel(visualId);
		this.set_tooltip(new $tab_Tooltip(null));
		this.get_tooltip().add_closed(ss.mkdel(this, this.$onClose));
		this.get_tooltip().add_prePosition(ss.mkdel(this, this.$allowHoverIfShown));
		this.get_tooltip().add_showed(ss.mkdel(this, this.$allowHoverIfShown));
		this.get_tooltip().get_body().on($tab_TooltipBaseMode.$tooltipMouseLeaveListener, ss.mkdel(this, this.$onMouseLeave));
		this.set_ubertip(new $tab_Ubertip(this.get_tooltip(), this.get_ubertipShouldEnforceButtonOrdering(), this.shouldAddCommandButtonsAndActions()));
		this.get_ubertip().add_actionExecuted(ss.mkdel(this, this.$onUbertipActionExecuted));
		this.get_ubertip().add_commandExecuted(ss.mkdel(this, this.$onUbertipCommandExecuted));
		this.get_ubertip().add_ubertipMenuToggled(ss.mkdel(this, this.$onUbertipMenuToggle));
		this.get_ubertip().add_ubertipMenuClosed(ss.mkdel(this, this.$onUbertipMenuClose));
		this.set_defaultBehaviorType(defaultBehavior);
		this.set_currentBehaviorType(defaultBehavior);
		this.tooltipBehaviors = {};
		this.buildBehaviorsDictionary();
		this.$hasHoverOrMenuAction = tab.ActionUtils.doesWorksheetHaveHoverOrMenuActions(this.get_visualIDPresModel().worksheet);
		if (tsConfig.is_mobile) {
			$tab_VizEvent.add_mobileVizReduceTransform(ss.mkdel(this, this.$onMobileVizReduceTransform));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				$tab_VizEvent.remove_mobileVizReduceTransform(ss.mkdel(this, this.$onMobileVizReduceTransform));
			})));
		}
	};
	$tab_TooltipBaseMode.__typeName = 'tab.TooltipBaseMode';
	$tab_TooltipBaseMode.isUbertipHtmlEmpty = function TooltipBaseMode$IsUbertipHtmlEmpty(model) {
		return ss.isValue(model) && tab.MiscUtil.isNullOrEmpty$3(model.tooltipHtml);
	};
	global.tab.TooltipBaseMode = $tab_TooltipBaseMode;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.TypeDefs.TooltipBehaviorType
	var $tab_TooltipBehaviorType = function() {
	};
	$tab_TooltipBehaviorType.__typeName = 'tab.TooltipBehaviorType';
	global.tab.TooltipBehaviorType = $tab_TooltipBehaviorType;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TooltipContextProvider
	var $tab_TooltipContextProvider = function(selectionsModel) {
		this.$selectionsModel = null;
		this.$selectionsModel = selectionsModel;
	};
	$tab_TooltipContextProvider.__typeName = 'tab.TooltipContextProvider';
	global.tab.TooltipContextProvider = $tab_TooltipContextProvider;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.TooltipTemplate
	var $tab_TooltipTemplate = function() {
		spiff.Template.call(this, $($tab_TooltipTemplate.$htmlTemplate));
	};
	$tab_TooltipTemplate.__typeName = 'tab.TooltipTemplate';
	global.tab.TooltipTemplate = $tab_TooltipTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Ubertip
	var $tab_Ubertip = function(tooltip, enforceButtonOrderingInMultiselect, addCommandButtonsAndActions) {
		this.$tooltip = null;
		this.$disposables = new tab.DisposableHolder();
		this.$model = null;
		this.$position = null;
		this.$enforceButtonOrderingInMultiselect = false;
		this.$addCommandButtonsAndActions = false;
		this.$isActionClicked = false;
		this.$actionDisplayName = null;
		this.$prevWidth = -1;
		this.$buttonAnimationAction = null;
		this.$contentAreaElt = null;
		this.$commandAreaElt = null;
		this.$actionsElt = null;
		this.$commandsElt = null;
		this.$selectionRelaxationInfo = [];
		this.$selectionRelaxationHandlers = [];
		this.$2$CommandExecutedField = null;
		this.$2$ActionExecutedField = null;
		this.$2$UbertipMenuToggledField = null;
		this.$2$UbertipMenuClosedField = null;
		spiff.Widget.call(this, $($tab_Ubertip.$htmlTemplate));
		this.$contentAreaElt = this.element.find($tab_Ubertip.$contentAreaSelector);
		this.$commandAreaElt = this.element.find($tab_Ubertip.$commandAreaSelector);
		this.$actionsElt = this.element.find($tab_Ubertip.$actionsSelector);
		this.$commandsElt = this.element.find($tab_Ubertip.$commandsSelector);
		this.$tooltip = tooltip;
		this.$tooltip.add_showed(ss.mkdel(this, this.handleTooltipShowed));
		this.$tooltip.add_positionCalculated(ss.mkdel(this, this.handleTooltipPositionCalculated));
		this.$addCommandButtonsAndActions = addCommandButtonsAndActions;
		this.$enforceButtonOrderingInMultiselect = enforceButtonOrderingInMultiselect;
	};
	$tab_Ubertip.__typeName = 'tab.Ubertip';
	$tab_Ubertip.$isGroupButtonModel = function Ubertip$IsGroupButtonModel(buttonModel) {
		return buttonModel.get_commandType() === 10;
	};
	$tab_Ubertip.$getGroupButtonModelFromRemoteModel = function Ubertip$GetGroupButtonModelFromRemoteModel(remoteModel) {
		return _.find(remoteModel.buttonModels, $tab_Ubertip.$isGroupButtonModel);
	};
	$tab_Ubertip.$isGroupMenuButton = function Ubertip$IsGroupMenuButton(buttonModel) {
		var commandItem = buttonModel.get_wrappedCommandItemPresModel();
		if (ss.isNullOrUndefined(commandItem)) {
			return false;
		}
		return commandItem.get_iconRes() === ':/en_US/TQRC_MERGE';
	};
	$tab_Ubertip.$getGroupMenuButtonModelFromRemoteModel = function Ubertip$GetGroupMenuButtonModelFromRemoteModel(remoteModel) {
		return _.find(remoteModel.buttonModels, $tab_Ubertip.$isGroupMenuButton);
	};
	$tab_Ubertip.$findPlaceholderButtonModel = function Ubertip$FindPlaceholderButtonModel(localModel, commandType) {
		return _.find(localModel.buttonModels, function(buttonModel) {
			return buttonModel.get_isPlaceholder() && buttonModel.get_commandType() === commandType;
		});
	};
	$tab_Ubertip.$getCommandKeyFromCommand = function Ubertip$GetCommandKeyFromCommand(buttonModel) {
		var textKey;
		if (ss.isNullOrEmptyString(buttonModel.get_imageRes())) {
			textKey = 'Command' + buttonModel.get_commandType();
		}
		else if (ss.endsWithString(buttonModel.get_imageRes().toString(), 'png')) {
			textKey = tab.TabResources.getResourceName(buttonModel.get_imageRes());
		}
		else {
			textKey = tab.TabResources.lookupFullResourceAlias(buttonModel.get_imageRes());
		}
		return textKey;
	};
	$tab_Ubertip.$getMobileLabel = function Ubertip$GetMobileLabel(key, defaultValue) {
		if (tab.MiscUtil.isNullOrEmpty$3(key)) {
			return defaultValue;
		}
		var localizedStringsKey = ss.formatString('Ubertip{0}Mobile', key);
		var val = tab.Strings.getString(localizedStringsKey);
		if (ss.referenceEquals(val, ss.formatString('!{0}!', localizedStringsKey))) {
			return defaultValue;
		}
		return val;
	};
	$tab_Ubertip.$createPlaceholderButton = function Ubertip$CreatePlaceholderButton(placeHolderButton) {
		var button = spiff.LabelButton.newNativeButton();
		if (tsConfig.is_mobile) {
			button.set_label($tab_Ubertip.$getMobileLabel($tab_Ubertip.$getCommandKeyFromCommand(placeHolderButton), placeHolderButton.get_name()));
		}
		else {
			button.set_label(placeHolderButton.get_name());
			button.set_hoverTooltipText(placeHolderButton.get_description());
		}
		button.set_disabled(true);
		var classSb = new ss.StringBuilder('tab-command');
		classSb.append($tab_Ubertip.$getCommandKeyFromCommand(placeHolderButton));
		button.element.addClass(classSb.toString());
		button.element.css('visibility', 'hidden');
		return button;
	};
	$tab_Ubertip.$getActiveSelectedLinkIndex = function Ubertip$GetActiveSelectedLinkIndex(previousTooltipHtml) {
		var links = previousTooltipHtml.find('.tab-selection-relaxation');
		for (var i = 0; i < links.length; i++) {
			if (ss.isValue(links.eq(i).data('isSelected'))) {
				return i;
			}
		}
		return -1;
	};
	$tab_Ubertip.$createSimpleMenuButton = function Ubertip$CreateSimpleMenuButton(buttonMenuModel) {
		var b = spiff.LabelButton.newNativeButton();
		b.set_label(buttonMenuModel.get_name());
		b.set_hoverTooltipText(buttonMenuModel.get_description());
		$('<span>').addClass('tabComboBoxButton').appendTo(b.element);
		return b;
	};
	$tab_Ubertip.$setMenuButtonLabel = function Ubertip$SetMenuButtonLabel(b, buttonModel, iconResourceName) {
		if (tsConfig.is_mobile && !tab.MiscUtil.isNullOrEmpty$3(iconResourceName)) {
			var label = $tab_Ubertip.$getMobileLabel(iconResourceName, buttonModel.get_description());
			b.setLabelContents($('<div>' + label + '</div>'));
		}
		else {
			b.set_label(buttonModel.get_name());
		}
	};
	$tab_Ubertip.$addCommandIcon = function Ubertip$AddCommandIcon(b, iconResourceName) {
		b.element.addClass(ss.formatString('tab-command{0}', iconResourceName));
	};
	$tab_Ubertip.$enableMenuButtonCommand = function Ubertip$EnableMenuButtonCommand(b) {
		b.element.addClass('enabled'.toString());
	};
	$tab_Ubertip.$getIconResourceName = function Ubertip$GetIconResourceName(icon) {
		return tab.TabResources.getResourceName(tab.TabResources.lookupFullResourceAlias(icon));
	};
	global.tab.Ubertip = $tab_Ubertip;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.UndoKeyboardShortcut
	var $tab_UndoKeyboardShortcut = function() {
		$tab_UndoRedoKeyboardShortcut.call(this);
	};
	$tab_UndoKeyboardShortcut.__typeName = 'tab.UndoKeyboardShortcut';
	global.tab.UndoKeyboardShortcut = $tab_UndoKeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.UndoRedoKeyboardShortcut
	var $tab_UndoRedoKeyboardShortcut = function() {
		tab.CommandKeyboardShortcut.call(this);
	};
	$tab_UndoRedoKeyboardShortcut.__typeName = 'tab.UndoRedoKeyboardShortcut';
	global.tab.UndoRedoKeyboardShortcut = $tab_UndoRedoKeyboardShortcut;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.URIUtil
	var $tab_URIUtil = function() {
	};
	$tab_URIUtil.__typeName = 'tab.URIUtil';
	$tab_URIUtil.absolutizeURI = function URIUtil$AbsolutizeURI(uri, requireHttp) {
		if (ss.isValue(uri)) {
			uri = uri.trim();
		}
		if (ss.isNullOrEmptyString(uri)) {
			return uri;
		}
		var schemeRegex = new RegExp('^([a-zA-Z0-9]+):(?!\\d+(/|$))');
		var matches = uri.match(schemeRegex);
		if (ss.isValue(matches) && matches[1] !== 'http' && matches[1] !== 'https') {
			if (requireHttp) {
				return '';
			}
			return uri;
		}
		var cleanHTTP = '//';
		var httpsRegex = new RegExp('^https|^/?/?[a-zA-Z0-9.-]+:443(/|$)');
		var httpRegex = new RegExp('^http|^/?/?[a-zA-Z0-9.-]+:80(/|$)');
		if (httpsRegex.test(uri)) {
			cleanHTTP = 'https://';
		}
		else if (httpRegex.test(uri)) {
			cleanHTTP = 'http://';
		}
		var sloppyHTTPRegex = new RegExp('^(https?:)?/?/?');
		uri = uri.replace(sloppyHTTPRegex, cleanHTTP);
		return uri;
	};
	global.tab.URIUtil = $tab_URIUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.UserPillComponent
	var $tab_UserPillComponent = function(props) {
		React.Component.call(this, props);
	};
	$tab_UserPillComponent.__typeName = 'tab.UserPillComponent';
	global.tab.UserPillComponent = $tab_UserPillComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.UserPillsComponent
	var $tab_UserPillsComponent = function(props) {
		React.Component.call(this, props);
	};
	$tab_UserPillsComponent.__typeName = 'tab.UserPillsComponent';
	global.tab.UserPillsComponent = $tab_UserPillsComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.UserPillsViewModel
	var $tab_UserPillsViewModel = function(users) {
		this.$2$PropsUpdatedField = null;
		this.$2$PropsField = null;
		spiff.BaseViewModel.call(this);
		this.set_props({
			users: ss.arrayClone(users),
			userValidator: function(user) {
				return (user.hasEmail ? 0 : 1);
			},
			invalidUserTextGenerator: function(user1) {
				return tab.Strings.UserHasNoEmailAddressWarning;
			},
			addUser: ss.mkdel(this, this.addUser),
			removeUser: ss.mkdel(this, this.removeUser)
		});
	};
	$tab_UserPillsViewModel.__typeName = 'tab.UserPillsViewModel';
	global.tab.UserPillsViewModel = $tab_UserPillsViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.VerticalIteratorButtonTemplate
	var $tab_VerticalIteratorButtonTemplate = function() {
		$tab_IteratorButtonTemplate.call(this, $tab_VerticalIteratorButtonTemplate.$htmlTemplate);
	};
	$tab_VerticalIteratorButtonTemplate.__typeName = 'tab.VerticalIteratorButtonTemplate';
	global.tab.VerticalIteratorButtonTemplate = $tab_VerticalIteratorButtonTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewController
	var $tab_ViewController = function(session) {
		this.$viewSession = null;
		this.$imageCacheVersion = 0;
		this.$viewWidget = null;
		this.$disposables = new tab.DisposableHolder();
		this.$1$RefreshLegacyLegendImagesField = null;
		this.$viewSession = session;
		tab.Log.get(this).debug('New: %s', [this.get_sheetName()]);
	};
	$tab_ViewController.__typeName = 'tab.ViewController';
	$tab_ViewController.add_selectionChanged = function ViewController$add_SelectionChanged(value) {
		$tab_ViewController.$1$SelectionChangedField = ss.delegateCombine($tab_ViewController.$1$SelectionChangedField, value);
	};
	$tab_ViewController.remove_selectionChanged = function ViewController$remove_SelectionChanged(value) {
		$tab_ViewController.$1$SelectionChangedField = ss.delegateRemove($tab_ViewController.$1$SelectionChangedField, value);
	};
	global.tab.ViewController = $tab_ViewController;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewingToolbarCommands
	var $tab_ViewingToolbarCommands = function(app) {
		this.$app = null;
		this.$app = app;
	};
	$tab_ViewingToolbarCommands.__typeName = 'tab.ViewingToolbarCommands';
	$tab_ViewingToolbarCommands.exportData = function ViewingToolbarCommands$ExportData(sheetName) {
		if (ss.isNullOrUndefined(sheetName)) {
			sheetName = tab.ModelUtils.findActiveOrDefaultVisual(null).get_worksheetName();
		}
		var session = tab.ModelUtils.findContentDashboard(null).getViewSession(sheetName);
		if (ss.isValue(session)) {
			var sourceSheet = tab.ModelUtils.findActiveOrDefaultVisual(sheetName).get_visualId();
			window.open(session.formatUnderlyingDataURL(null, sourceSheet), session.getWindow('vud'), 'scrollbars,resizable');
		}
	};
	$tab_ViewingToolbarCommands.exportCrosstab = function ViewingToolbarCommands$ExportCrosstab(sheetName) {
		if (ss.isNullOrUndefined(sheetName)) {
			sheetName = tab.ModelUtils.findActiveOrDefaultVisual(null).get_worksheetName();
		}
		var session = tab.ModelUtils.findContentDashboard(null).getViewSession(sheetName);
		if (ss.isValue(session)) {
			var dialogData = tableau.types.ExportDialogType['ExportCrosstab'];
			session.fileDownloadHelper.openDownload(session.formatExportCrossTabURL('utf16'), dialogData);
		}
	};
	global.tab.ViewingToolbarCommands = $tab_ViewingToolbarCommands;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ViewportChangeDetector
	var $tab_ViewportChangeDetector = function() {
		this.$pollForViewportChangeRequestId = 0;
		this.$isWaitingForViewportCheck = false;
		this.$hasDeferredViewportCheck = false;
		this.$1$ViewportChangedInternalField = null;
		this.$1$LastViewportRectField = null;
	};
	$tab_ViewportChangeDetector.__typeName = 'tab.ViewportChangeDetector';
	$tab_ViewportChangeDetector.get_instance = function ViewportChangeDetector$get_Instance() {
		if (ss.isNullOrUndefined($tab_ViewportChangeDetector.$instance)) {
			$tab_ViewportChangeDetector.$instance = new $tab_ViewportChangeDetector();
		}
		return $tab_ViewportChangeDetector.$instance;
	};
	global.tab.ViewportChangeDetector = $tab_ViewportChangeDetector;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.TypeDefs.VisibleSheetAndRepositoryUrl
	var $tab_VisibleSheetAndRepositoryUrl = function(sheetName, repositoryUrl) {
		this.sheetName = null;
		this.repositoryUrl = null;
		this.sheetName = sheetName;
		this.repositoryUrl = repositoryUrl;
	};
	$tab_VisibleSheetAndRepositoryUrl.__typeName = 'tab.VisibleSheetAndRepositoryUrl';
	global.tab.VisibleSheetAndRepositoryUrl = $tab_VisibleSheetAndRepositoryUrl;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.VizEvent
	var $tab_VizEvent = function() {
	};
	$tab_VizEvent.__typeName = 'tab.VizEvent';
	$tab_VizEvent.add_mobileVizExpandTransform = function VizEvent$add_MobileVizExpandTransform(value) {
		$tab_VizEvent.$1$MobileVizExpandTransformField = ss.delegateCombine($tab_VizEvent.$1$MobileVizExpandTransformField, value);
	};
	$tab_VizEvent.remove_mobileVizExpandTransform = function VizEvent$remove_MobileVizExpandTransform(value) {
		$tab_VizEvent.$1$MobileVizExpandTransformField = ss.delegateRemove($tab_VizEvent.$1$MobileVizExpandTransformField, value);
	};
	$tab_VizEvent.add_mobileVizReduceTransform = function VizEvent$add_MobileVizReduceTransform(value) {
		$tab_VizEvent.$1$MobileVizReduceTransformField = ss.delegateCombine($tab_VizEvent.$1$MobileVizReduceTransformField, value);
	};
	$tab_VizEvent.remove_mobileVizReduceTransform = function VizEvent$remove_MobileVizReduceTransform(value) {
		$tab_VizEvent.$1$MobileVizReduceTransformField = ss.delegateRemove($tab_VizEvent.$1$MobileVizReduceTransformField, value);
	};
	$tab_VizEvent.notifyMobileVizExpandTransform = function VizEvent$NotifyMobileVizExpandTransform() {
		if (ss.isValue($tab_VizEvent.$1$MobileVizExpandTransformField)) {
			$tab_VizEvent.$1$MobileVizExpandTransformField();
		}
	};
	$tab_VizEvent.notifyMobileVizReduceTransform = function VizEvent$NotifyMobileVizReduceTransform() {
		if (ss.isValue($tab_VizEvent.$1$MobileVizReduceTransformField)) {
			$tab_VizEvent.$1$MobileVizReduceTransformField();
		}
	};
	global.tab.VizEvent = $tab_VizEvent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.WaitDialog
	var $tab_WaitDialog = function(dialogprops, onDialogClose) {
		this.$currentCommand = null;
		this.$dialogProps = null;
		this.$onDialogCloseEvent = null;
		$tab_BaseDisposableDialog.call(this);
		this.$dialogProps = dialogprops;
		this.$onDialogCloseEvent = onDialogClose;
	};
	$tab_WaitDialog.__typeName = 'tab.WaitDialog';
	global.tab.WaitDialog = $tab_WaitDialog;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.WaitDialogComponent
	var $tab_WaitDialogComponent = function(props) {
		spiff.PureRenderComponent.call(this, props);
	};
	$tab_WaitDialogComponent.__typeName = 'tab.WaitDialogComponent';
	global.tab.WaitDialogComponent = $tab_WaitDialogComponent;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.WebZoneTemplate
	var $tab_WebZoneTemplate = function() {
		this.content = null;
		spiff.Template.call(this, $($tab_WebZoneTemplate.$htmlTemplate));
	};
	$tab_WebZoneTemplate.__typeName = 'tab.WebZoneTemplate';
	global.tab.WebZoneTemplate = $tab_WebZoneTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.WebZoneView
	var $tab_WebZoneView = function(viewModel, parentZoneViewModel) {
		this.$webZoneViewModel = null;
		this.$parentZoneViewModel = null;
		this.$frameTemplate = null;
		this.$glass = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_WebZoneViewModel]).call(this, viewModel, new $tab_WebZoneTemplate());
		this.$webZoneViewModel = viewModel;
		this.$parentZoneViewModel = parentZoneViewModel;
		this.$webZoneViewModel.add_newWebZone(ss.mkdel(this, this.$handleNewWebZone));
		this.$parentZoneViewModel.add_propertyChanged(ss.mkdel(this, this.$parentZoneChanged));
		this.$parentZoneViewModel.add_resizeZone(ss.mkdel(this, this.$handleResizeZone));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$webZoneViewModel.remove_newWebZone(ss.mkdel(this, this.$handleNewWebZone));
			this.$parentZoneViewModel.remove_propertyChanged(ss.mkdel(this, this.$parentZoneChanged));
			this.$parentZoneViewModel.remove_resizeZone(ss.mkdel(this, this.$handleResizeZone));
		})));
	};
	$tab_WebZoneView.__typeName = 'tab.WebZoneView';
	global.tab.WebZoneView = $tab_WebZoneView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.WebZoneViewModel
	var $tab_WebZoneViewModel = function(webZoneModel) {
		this.$webZoneModel = null;
		this.$2$NewWebZoneField = null;
		spiff.BaseViewModel.call(this);
		this.$webZoneModel = webZoneModel;
		this.$webZoneModel.add_newWebZone(ss.mkdel(this, this.handleNewWebZone));
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$webZoneModel.remove_newWebZone(ss.mkdel(this, this.handleNewWebZone));
		})));
	};
	$tab_WebZoneViewModel.__typeName = 'tab.WebZoneViewModel';
	global.tab.WebZoneViewModel = $tab_WebZoneViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Authoring.WidgetPluginContainer
	var $tab_WidgetPluginContainer = function(props) {
		this.$componentTypePromise = null;
		React.PureComponent.call(this, props);
		var $t1 = new $tab_WidgetPluginContainerState();
		$t1.componentType = null;
		this.state = $t1;
		this.$componentTypePromise = tab.ModuleManager.load$1(props.moduleName, []);
	};
	$tab_WidgetPluginContainer.__typeName = 'tab.WidgetPluginContainer';
	global.tab.WidgetPluginContainer = $tab_WidgetPluginContainer;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Authoring.WidgetPluginContainerProps
	var $tab_WidgetPluginContainerProps = function() {
		this.moduleName = null;
		this.initialProps = null;
	};
	$tab_WidgetPluginContainerProps.__typeName = 'tab.WidgetPluginContainerProps';
	global.tab.WidgetPluginContainerProps = $tab_WidgetPluginContainerProps;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.Authoring.WidgetPluginContainerState
	var $tab_WidgetPluginContainerState = function() {
		this.componentType = null;
	};
	$tab_WidgetPluginContainerState.__typeName = 'tab.WidgetPluginContainerState';
	global.tab.WidgetPluginContainerState = $tab_WidgetPluginContainerState;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.WidgetUtil
	var $tab_WidgetUtil = function() {
	};
	$tab_WidgetUtil.__typeName = 'tab.WidgetUtil';
	$tab_WidgetUtil.newMenuItemsFromCommands = function WidgetUtil$NewMenuItemsFromCommands(items, c, createItemData, commandPermission) {
		if (ss.isNullOrUndefined(c)) {
			return;
		}
		var commandsWrapper = tab.CommandsPresModelWrapper.create(c);
		if (ss.isNullOrUndefined(commandsWrapper.get_commandItems())) {
			return;
		}
		var defaultMenuItemIndex = ss.coalesce(commandsWrapper.get_defaultItem(), -1);
		var itemIndex = -1;
		var lastAddedWasDivider = true;
		var $t1 = commandsWrapper.get_commandItems();
		for (var $t2 = 0; $t2 < $t1.length; $t2++) {
			var ci = $t1[$t2];
			itemIndex++;
			var mi = null;
			var itemWrapper = tab.CommandItemWrapper.create(ci);
			if (!$tab_WidgetUtil.$isPermissable(itemWrapper, commandPermission)) {
				continue;
			}
			switch (itemWrapper.get_commandsType()) {
				case 'item': {
					mi = spiff.MenuItem.newItem(createItemData(ci), itemWrapper.get_name(), null, null);
					mi.description = itemWrapper.get_description();
					mi.enabled = ss.isNullOrUndefined(itemWrapper.get_enabled()) || itemWrapper.get_enabled();
					break;
				}
				case 'separator': {
					if (!lastAddedWasDivider) {
						mi = spiff.MenuItem.newDivider();
					}
					break;
				}
				case 'subcommands': {
					var subItems = [];
					$tab_WidgetUtil.newMenuItemsFromCommands(subItems, itemWrapper.get_commands(), createItemData, commandPermission);
					if (subItems.length > 0) {
						mi = spiff.MenuItem.newItem(null, itemWrapper.get_name(), 0, new spiff.Menu(subItems));
					}
					break;
				}
			}
			if (ss.isValue(mi)) {
				var isDefault = itemIndex === defaultMenuItemIndex || itemWrapper.get_isDefault();
				$tab_WidgetUtil.$setMenuItemStateFromCommandItem(mi, itemWrapper, isDefault);
				items.push(mi);
				lastAddedWasDivider = mi.isDivider;
			}
		}
		if (items.length > 0 && items[items.length - 1].isDivider) {
			ss.removeAt(items, items.length - 1);
		}
	};
	$tab_WidgetUtil.$setMenuItemStateFromCommandItem = function WidgetUtil$SetMenuItemStateFromCommandItem(mi, itemWrapper, isDefault) {
		mi.enabled = itemWrapper.get_enabled();
		mi.isDefault = isDefault && mi.enabled;
		if (itemWrapper.get_isRadioOn()) {
			mi.checkState = 2;
		}
		else if (itemWrapper.get_isChecked()) {
			mi.checkState = 1;
		}
		if (ss.isValue(itemWrapper.get_colorSwatch())) {
			var colorClass = 'swatch-' + ss.replaceAllString(itemWrapper.get_colorSwatch().toString(), '#', '');
			mi.itemClass = ss.formatString('{0} {1}', $tab_WidgetUtil.colorSwatchMenuItemClass, colorClass);
		}
	};
	$tab_WidgetUtil.$isPermissable = function WidgetUtil$IsPermissable(itemWrapper, commandPermission) {
		if (!itemWrapper.get_isVisible()) {
			return false;
		}
		if (ss.isValue(itemWrapper.get_command()) && ss.isValue(commandPermission)) {
			var $t1 = new tab.CommandModel();
			$t1.command = tab.CommandSerializer.deserialize(itemWrapper.get_command(), false);
			var com = $t1;
			tab.UbertipSerializer.setCommandType(com);
			return commandPermission.test(com);
		}
		return true;
	};
	$tab_WidgetUtil.createDropdownMenuCommandHandler = function WidgetUtil$CreateDropdownMenuCommandHandler(commandModel) {
		var commandWrapper = tab.CommandItemWrapper.create(commandModel);
		var c = tab.CommandSerializer.deserialize(commandWrapper.get_command(), false);
		var cmdAction;
		cmdAction = function() {
			var commandId = { ns: c.commandNamespace, cmd: c.commandName };
			if (tab.RichTextClientCommands.isRichTextEditingCommand(c)) {
				tab.RichTextClientCommands.callRichTextEditingCommand(c);
			}
			else if (tab.DashboardButtonClientCommands.isGetButtonConfigDialogCommand(c)) {
				tab.DashboardButtonClientCommands.callGetButtonConfigDialogCommand(c);
			}
			else if (tab.WebCommandRegistry.get_instance().hasCommand(commandId)) {
				var command = tab.WebCommandRegistry.get_instance().createCommandWithParams(commandId, c.commandParams);
				command.invoke();
			}
			else {
				var blockingPolicy = $tab_WidgetUtil.$getCommandBlockingPolicy(c);
				tab.ServerCommands.executeServerCommand(c, blockingPolicy, tab.CommandUtils.createCommandRedirectSuccessHandler(null), null);
			}
		};
		return cmdAction;
	};
	$tab_WidgetUtil.createDropdownMenuCommand = function WidgetUtil$CreateDropdownMenuCommand(commandModel) {
		var commandWrapper = tab.CommandItemWrapper.create(commandModel);
		var c = tab.CommandSerializer.deserialize(commandWrapper.get_command(), false);
		return c;
	};
	$tab_WidgetUtil.$getCommandBlockingPolicy = function WidgetUtil$GetCommandBlockingPolicy(command) {
		var policy = 'immediately';
		if (ss.contains($tab_WidgetUtil.$blockingNoneCommands, command.commandName)) {
			policy = 'none';
		}
		return policy;
	};
	$tab_WidgetUtil.commandMenuItemClicked = function WidgetUtil$CommandMenuItemClicked(menuItem) {
		if (ss.referenceEquals(ss.getInstanceType(menuItem.data), Function)) {
			ss.cast(menuItem.data, Function)();
		}
		else {
			var command = menuItem.data;
			tab.ServerCommands.executeServerCommand(command, 'immediately', null, null);
		}
	};
	$tab_WidgetUtil.menuViewModelFromCommands = function WidgetUtil$MenuViewModelFromCommands(commands, handler, menuHidden, onShowAction, createMenuCommandHandler) {
		tab.Param.verifyValue(commands, 'commands');
		var commandsWrapper = tab.CommandsPresModelWrapper.create(commands);
		if (tab.MiscUtil.isNullOrEmpty$1(commandsWrapper.get_commandItems())) {
			if (ss.isValue(menuHidden)) {
				menuHidden();
			}
			return null;
		}
		var items = [];
		$tab_WidgetUtil.newMenuItemsFromCommands(items, commands, createMenuCommandHandler || $tab_WidgetUtil.createDropdownMenuCommandHandler, null);
		var menu = new spiff.Menu(items);
		var menuViewModel = spiff.MenuViewModel.createForMenu(menu, handler, null, menuHidden, onShowAction, true);
		return menuViewModel;
	};
	$tab_WidgetUtil.getMenuItemsInFlatList = function WidgetUtil$GetMenuItemsInFlatList(menuItemList) {
		var flatList = [];
		if (ss.isValue(menuItemList)) {
			for (var $t1 = 0; $t1 < menuItemList.length; $t1++) {
				var item = menuItemList[$t1];
				$tab_WidgetUtil.$addMenuItemToList(item, flatList);
			}
		}
		return flatList;
	};
	$tab_WidgetUtil.$addMenuItemToList = function WidgetUtil$AddMenuItemToList(item, list) {
		if (item.isDivider) {
		}
		else if (ss.isValue(item.subMenu) && ss.isValue(item.subMenu.menuItems)) {
			for (var $t1 = 0; $t1 < item.subMenu.menuItems.length; $t1++) {
				var subItem = item.subMenu.menuItems[$t1];
				$tab_WidgetUtil.$addMenuItemToList(subItem, list);
			}
		}
		else {
			list.push(item);
		}
	};
	$tab_WidgetUtil.getMenuItemInfos = function WidgetUtil$GetMenuItemInfos(menuItemList) {
		var menuData = [];
		if (ss.isValue(menuItemList)) {
			for (var $t1 = 0; $t1 < menuItemList.length; $t1++) {
				var item = menuItemList[$t1];
				$tab_WidgetUtil.$addMenuItemInfoToList(item, menuData);
			}
		}
		return menuData;
	};
	$tab_WidgetUtil.$addMenuItemInfoToList = function WidgetUtil$AddMenuItemInfoToList(item, menuData) {
		var isChecked = ((item.checkState === 1 || item.checkState === 2) ? true : null);
		if (item.isDivider) {
			menuData.push({ isDivider: true });
		}
		else if (ss.isValue(item.subMenu)) {
			var subMenuData = [];
			for (var $t1 = 0; $t1 < item.subMenu.menuItems.length; $t1++) {
				var subItem = item.subMenu.menuItems[$t1];
				$tab_WidgetUtil.$addMenuItemInfoToList(subItem, subMenuData);
			}
			menuData.push({ value: item.name, displayValue: item.name, checked: isChecked, disabled: !item.enabled, menuItemInfos: subMenuData });
		}
		else {
			menuData.push({ value: item.name, displayValue: item.name, checked: isChecked, disabled: !item.enabled });
		}
	};
	global.tab.WidgetUtil = $tab_WidgetUtil;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.WorkbookTemplate
	var $tab_WorkbookTemplate = function() {
		this.dashboardSpacer = null;
		this.centeringContainer = null;
		spiff.Template.call(this, $tab_WorkbookTemplate.$getRootTemplate());
		this.dashboardSpacer = this.domRoot;
		this.centeringContainer = $($tab_WorkbookTemplate.centeringContainerSelector);
	};
	$tab_WorkbookTemplate.__typeName = 'tab.WorkbookTemplate';
	$tab_WorkbookTemplate.$getRootTemplate = function WorkbookTemplate$GetRootTemplate() {
		return (tab.FeatureFlags.isEnabled('IframeSizedToWindow') ? $($tab_WorkbookTemplate.$workbookHtmlTemplate) : $($tab_WorkbookTemplate.$htmlTemplate));
	};
	global.tab.WorkbookTemplate = $tab_WorkbookTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.WorkbookView
	var $tab_WorkbookView = function(viewModel) {
		this.$workbookViewModel = null;
		this.$dashboardView = null;
		this.$connectionPromptView = null;
		ss.makeGenericType(spiff.BaseView$1, [$tab_WorkbookViewModel]).call(this, viewModel, new $tab_WorkbookTemplate());
		this.$workbookViewModel = viewModel;
		this.$workbookViewModel.add_dashboardUpdated(ss.mkdel(this, this.$handleDashboardUpdated));
		this.$workbookViewModel.add_newDataConnectionPrompt(ss.mkdel(this, this.$handleNewDataConnectionPrompt));
		$tab_ApplicationViewModel.add_applicationSizeChanged(ss.mkdel(this, this.$handleResize));
		if (this.$workbookViewModel.get_hasPrompt()) {
			this.$handleNewDataConnectionPrompt();
		}
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$workbookViewModel.remove_dashboardUpdated(ss.mkdel(this, this.$handleDashboardUpdated));
			this.$workbookViewModel.remove_newDataConnectionPrompt(ss.mkdel(this, this.$handleNewDataConnectionPrompt));
			$tab_ApplicationViewModel.remove_applicationSizeChanged(ss.mkdel(this, this.$handleResize));
		})));
		this.handleFullScreenChanged();
	};
	$tab_WorkbookView.__typeName = 'tab.WorkbookView';
	$tab_WorkbookView.findDashboardContainer = function WorkbookView$FindDashboardContainer() {
		return $($tab_WorkbookView.dashboardSpacerSelector);
	};
	global.tab.WorkbookView = $tab_WorkbookView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.WorkbookViewModel
	var $tab_WorkbookViewModel = function(workbookModel) {
		this.$workbookModel = null;
		this.$dashboardViewModel = null;
		this.$connectionPromptViewModel = null;
		this.$2$DashboardUpdatedField = null;
		this.$2$NewDataConnectionPromptField = null;
		spiff.BaseViewModel.call(this);
		this.$workbookModel = workbookModel;
		this.$workbookModel.addDashboardUpdatedHandler(ss.mkdel(this, this.$handleDashboardUpdated));
		this.$workbookModel.add_newDataConnectionPrompt(ss.mkdel(this, this.$handleNewDataConnectionPrompt));
		this.$workbookModel.add_dataConnectionPromptDismissed(ss.mkdel(this, this.$onDataConnectionPromptDismissed));
		if (this.$workbookModel.get_hasPrompt()) {
			this.$handleNewDataConnectionPrompt(this.$workbookModel.get_connectionPromptModel());
		}
		this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
			this.$workbookModel.remove_newDataConnectionPrompt(ss.mkdel(this, this.$handleNewDataConnectionPrompt));
			this.$workbookModel.remove_dataConnectionPromptDismissed(ss.mkdel(this, this.$onDataConnectionPromptDismissed));
		})));
	};
	$tab_WorkbookViewModel.__typeName = 'tab.WorkbookViewModel';
	$tab_WorkbookViewModel.add_workbookResized = function WorkbookViewModel$add_WorkbookResized(value) {
		$tab_WorkbookViewModel.$2$WorkbookResizedField = ss.delegateCombine($tab_WorkbookViewModel.$2$WorkbookResizedField, value);
	};
	$tab_WorkbookViewModel.remove_workbookResized = function WorkbookViewModel$remove_WorkbookResized(value) {
		$tab_WorkbookViewModel.$2$WorkbookResizedField = ss.delegateRemove($tab_WorkbookViewModel.$2$WorkbookResizedField, value);
	};
	global.tab.WorkbookViewModel = $tab_WorkbookViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ZoneTemplate
	var $tab_ZoneTemplate = function() {
		spiff.Template.call(this, $($tab_ZoneTemplate.$htmlTemplate));
	};
	$tab_ZoneTemplate.__typeName = 'tab.ZoneTemplate';
	global.tab.ZoneTemplate = $tab_ZoneTemplate;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ZoneView
	var $tab_ZoneView = function(zoneViewModel) {
		this.$zoneContentView = null;
		this.$glass = null;
		this.$zIndex = 0;
		this.$bgColor = '';
		this.$deferredZoneContentView = null;
		this.$deferredZoneType = $.Deferred();
		ss.makeGenericType(spiff.BaseView$1, [$tab_ZoneViewModel]).call(this, zoneViewModel, new $tab_ZoneTemplate());
		this.get_$zoneVM().add_updateZone(ss.mkdel(this, this.$handleUpdateZone));
		this.get_$zoneVM().add_resizeZone(ss.mkdel(this, this.$handleResizeZone));
		this.get_$zoneVM().add_updateZIndex(ss.mkdel(this, this.$handleUpdateZIndex));
		this.get_$zoneVM().add_newZoneContent(ss.mkdel(this, this.$handleNewZoneContent));
		this.get_$zoneVM().add_validStateChanged(ss.mkdel(this, this.$refreshValidState));
		if (tsConfig.is_authoring) {
			this.disposables.add$1(new spiff.HoverBehavior(this, null, ss.mkdel(this, this.$handleZoneEnter), null));
		}
		this.$zIndex = 0;
		this.$deferredZoneContentView = null;
	};
	$tab_ZoneView.__typeName = 'tab.ZoneView';
	$tab_ZoneView.add_zoneBecameValid = function ZoneView$add_ZoneBecameValid(value) {
		$tab_ZoneView.$3$ZoneBecameValidField = ss.delegateCombine($tab_ZoneView.$3$ZoneBecameValidField, value);
	};
	$tab_ZoneView.remove_zoneBecameValid = function ZoneView$remove_ZoneBecameValid(value) {
		$tab_ZoneView.$3$ZoneBecameValidField = ss.delegateRemove($tab_ZoneView.$3$ZoneBecameValidField, value);
	};
	$tab_ZoneView.$makeZoneElementId = function ZoneView$MakeZoneElementId(zoneId) {
		return 'tabZoneId' + zoneId;
	};
	$tab_ZoneView.getZoneElement = function ZoneView$GetZoneElement(zoneId) {
		return $('#' + $tab_ZoneView.$makeZoneElementId(zoneId)).get(0);
	};
	global.tab.ZoneView = $tab_ZoneView;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.ZoneViewModel
	var $tab_ZoneViewModel = function(zoneModel) {
		this.$zoneModel = null;
		this.zoneContentViewModel = null;
		this.$vizModel = null;
		this.$isValid = false;
		this.$isActiveZone = false;
		this.$isReadyZone = false;
		this.$containsNewStyleQuickFilter = false;
		this.$containsNewStyleParameterFilter = false;
		this.$2$UpdateZoneField = null;
		this.$2$UpdateZIndexField = null;
		this.$2$ResizeZoneField = null;
		this.$2$ZoneResizedField = null;
		this.$2$NewZoneContentField = null;
		this.$2$ValidStateChangedField = null;
		spiff.BaseViewModel.call(this);
		this.$isValid = true;
		this.$zoneModel = zoneModel;
		this.$zoneModel.add_updateZone(ss.mkdel(this, this.$handleUpdateZone));
		this.$zoneModel.add_updateZIndex(ss.mkdel(this, this.$handleUpdateZIndex));
		this.$zoneModel.get_zoneCommonModel().add_resizeZone(ss.mkdel(this, this.$handleResizeZone));
		this.$zoneModel.add_newZoneContent(ss.mkdel(this, this.$handleNewZoneContent));
		this.$zoneModel.add_removeZoneContent(ss.mkdel(this, this.$handleRemovedZoneContent));
		this.$zoneModel.get_zoneCommonModel().add_changeZoneTitleVisibility(ss.mkdel(this, this.$handleTitleVisibiltyChanged));
		this.$refreshVisualModelReference();
		this.$refreshZoneValidState();
		if (ss.isValue(zoneModel) && ss.isValue(zoneModel.get_model())) {
			this.$handleNewZoneContent(zoneModel.get_model());
		}
		else if (tsConfig.is_authoring) {
			this.$addAuthoringContent();
		}
	};
	$tab_ZoneViewModel.__typeName = 'tab.ZoneViewModel';
	$tab_ZoneViewModel.calculateZoneZIndex = function ZoneViewModel$CalculateZoneZIndex(zone) {
		return 10 + zone.get_relativeZoneZIndex();
	};
	global.tab.ZoneViewModel = $tab_ZoneViewModel;
	////////////////////////////////////////////////////////////////////////////////
	// Tableau.JavaScript.Vql.UI.Api.ApiCommandExecutor
	var $tableau_ApiCommandExecutor = function() {
	};
	$tableau_ApiCommandExecutor.__typeName = 'tableau.ApiCommandExecutor';
	$tableau_ApiCommandExecutor.execute = function ApiCommandExecutor$Execute(commandName, hostId, parameters) {
		var id = tab._ApiCommand.generateNextCommandId();
		var command = new tab._ApiCommand(commandName, id, hostId, parameters);
		$tab_Application.get_instance().get_apiEventHandler().routeCommand(command);
		return id;
	};
	$tableau_ApiCommandExecutor.installResponderOverride = function ApiCommandExecutor$InstallResponderOverride(responseAction) {
		var nativeHostApiReponsder = ss.safeCast(tabBootstrap.ViewerBootstrap.get_instance().apiResponder, tabBootstrap.ApiNativeHostResponder);
		if (ss.isValue(nativeHostApiReponsder)) {
			nativeHostApiReponsder.set_responseAction(responseAction);
		}
		else {
			tab.Logger.lazyGetLogger($tableau_ApiCommandExecutor).warn('Cannot install a reponsder override because the api responder is not a native host responder.', []);
		}
	};
	global.tableau.ApiCommandExecutor = $tableau_ApiCommandExecutor;
	ss.initEnum($FontFace$FontFaceLoadStatus, $asm, { unloaded: 'unloaded', loading: 'loading', loaded: 'loaded', error: 'error' }, true);
	ss.initEnum($FontFaceSet$FontFaceSetLoadStatus, $asm, { loading: 'loading', loaded: 'loaded' }, true);
	ss.initClass($TsConfigExtensions, $asm, {});
	ss.initClass($tab_$AdjustStaticImageSizeUtility, $asm, {});
	ss.initClass($tab_$ApiParameterHandler, $asm, {});
	ss.initClass($tab_$ApiServerResultBuilder, $asm, {});
	ss.initClass($tab_$ApplicationStartupUtil, $asm, {});
	ss.initClass($tab_$ApplicationViewModelsClickDetector, $asm, {
		add_$clicked: function ApplicationViewModelsClickDetector$add_Clicked(value) {
			this.$1$ClickedField = ss.delegateCombine(this.$1$ClickedField, value);
		},
		remove_$clicked: function ApplicationViewModelsClickDetector$remove_Clicked(value) {
			this.$1$ClickedField = ss.delegateRemove(this.$1$ClickedField, value);
		},
		$onMouseDown: function ApplicationViewModelsClickDetector$OnMouseDown(e) {
			this.$lastStartEvent = new Date();
			this.$startX = e.pageX;
			this.$startY = e.pageY;
		},
		$onMouseUp: function ApplicationViewModelsClickDetector$OnMouseUp(e) {
			this.$testClickEvent(e);
		},
		$testClickEvent: function ApplicationViewModelsClickDetector$TestClickEvent(e) {
			var timeDiff = new Date() - this.$lastStartEvent;
			var xDiff = Math.abs(e.pageX - this.$startX);
			var yDiff = Math.abs(e.pageY - this.$startY);
			tab.Log.get(this).debug('Time difference: %s. X difference: %s. Y difference: %s', [timeDiff, xDiff, yDiff]);
			if (timeDiff <= 600 && xDiff <= $tab_$ApplicationViewModelsClickDetector.$moveSlop && yDiff <= $tab_$ApplicationViewModelsClickDetector.$moveSlop && !ss.staticEquals(this.$1$ClickedField, null)) {
				this.$1$ClickedField(e);
			}
		}
	});
	ss.initClass($tab_$ExtraContextState, $asm, {
		$applyState: function ExtraContextState$ApplyState(context) {
			context.set_linePattern(this.$linePattern);
			context.set_textAngle(this.$textAngle);
			context.set_shapeFillStyle(this.$shapeFillStyle);
			context.set_textFillStyle(this.$textFillStyle);
			context.set_shouldAntialias(this.$shouldAntialias);
			context.set_shouldUnderlineText(this.$shouldUnderlineText);
			context.set_transformation(this.$transformation);
		}
	});
	ss.initClass($tab_$RenderAndCheckFontLoader$DownloadableFontState, $asm, {});
	ss.initClass($tab_$SrInfo, $asm, {
		get_$commandName: function SrInfo$get_CommandName() {
			return this.$1$CommandNameField;
		},
		set_$commandName: function SrInfo$set_CommandName(value) {
			this.$1$CommandNameField = value;
		},
		get_$linkContent: function SrInfo$get_LinkContent() {
			return this.$1$LinkContentField;
		},
		set_$linkContent: function SrInfo$set_LinkContent(value) {
			this.$1$LinkContentField = value;
		}
	});
	ss.initClass($tab_$TextRunLayoutInfo, $asm, {
		$alignsWith: function TextRunLayoutInfo$AlignsWith(alignX, alignY) {
			var toRet;
			if (this.$orientation === 'horizontal') {
				toRet = Math.round(this.$y) === Math.round(alignY);
			}
			else {
				toRet = Math.round(this.$x) === Math.round(alignX);
			}
			return toRet;
		},
		$getNewPosition: function TextRunLayoutInfo$GetNewPosition(newX, newY) {
			var widthOffset = this.$width;
			var positionX = newX;
			var positionY = newY;
			switch (this.$orientation) {
				case 'horizontal': {
					if (this.$isEndAligned) {
						widthOffset = -widthOffset;
					}
					positionX = this.$x + widthOffset;
					break;
				}
				case 'up': {
					if (!this.$isEndAligned) {
						widthOffset = -widthOffset;
					}
					positionY = this.$y + widthOffset;
					break;
				}
				case 'down': {
					if (this.$isEndAligned) {
						widthOffset = -widthOffset;
					}
					positionY = this.$y + widthOffset;
					break;
				}
				default: {
					ss.Debug.fail('Unknown orientation' + this.$orientation);
					break;
				}
			}
			return { x: positionX, y: positionY };
		}
	});
	ss.initClass($tab__ApiSerializer, $asm, {});
	ss.initClass($tab_ActionExecutedEventArgs, $asm, {}, ss.EventArgs);
	ss.initClass($tab_AddSubscribersComponent, $asm, {
		addUser: function AddSubscribersComponent$AddUser(user) {
			if (_.any(this.state.users, function(value) {
				return value.id === user.id;
			})) {
				return;
			}
			this.setState(function(prevState, prevProps) {
				var $t1 = ss.arrayClone(prevState.users);
				$t1.push(user);
				var users = $t1;
				return { users: users, groups: prevState.groups };
			});
		},
		addGroup: function AddSubscribersComponent$AddGroup(group) {
			if (_.any(this.state.groups, function(value) {
				return value.id === group.id;
			})) {
				return;
			}
			this.setState(function(prevState, prevProps) {
				var $t1 = ss.arrayClone(prevState.groups);
				$t1.push(group);
				var groups = $t1;
				return { users: prevState.users, groups: groups };
			});
		},
		setUsers: function AddSubscribersComponent$SetUsers(users) {
			this.setState(function(prevState, prevProps) {
				return { users: users, groups: prevState.groups };
			});
		},
		removeUser: function AddSubscribersComponent$RemoveUser(user) {
			this.setState(function(prevState, prevProps) {
				var users = ss.arrayClone(prevState.users);
				ss.remove(users, user);
				return { users: users, groups: prevState.groups };
			});
		},
		removeGroup: function AddSubscribersComponent$RemoveGroup(group) {
			this.setState(function(prevState, prevProps) {
				var groups = ss.arrayClone(prevState.groups);
				ss.remove(groups, group);
				return { users: prevState.users, groups: groups };
			});
		},
		removeRecipientByIndex: function AddSubscribersComponent$RemoveRecipientByIndex(index) {
			if (this.props.isUsers) {
				this.removeUserByIndex(index);
			}
			else {
				this.removeGroupByIndex(index);
			}
		},
		removeUserByIndex: function AddSubscribersComponent$RemoveUserByIndex(index) {
			this.setState(function(prevState, prevProps) {
				var users = ss.arrayClone(prevState.users);
				ss.removeAt(users, index);
				return { users: users, groups: prevState.groups };
			});
		},
		removeGroupByIndex: function AddSubscribersComponent$RemoveGroupByIndex(index) {
			this.setState(function(prevState, prevProps) {
				var groups = ss.arrayClone(prevState.groups);
				ss.removeAt(groups, index);
				return { users: prevState.users, groups: groups };
			});
		},
		confirmSelection: function AddSubscribersComponent$ConfirmSelection() {
			if (this.props.isUsers) {
				this.props.confirmUsersSelection(this.state.users);
			}
			else {
				this.props.confirmGroupsSelection(this.state.groups);
			}
		},
		render: function AddSubscribersComponent$Render() {
			return spiff.DOMElements.div({ className: 'tabAddSubscribersContent', 'data-tb-test-id': 'add-subscribers-root' }, this.$renderHeader(), this.$renderRecipientSearchSelectorComponent(), this.$renderButtons());
		},
		$renderHeader: function AddSubscribersComponent$RenderHeader() {
			var headerText = (this.props.isUsers ? tab.Strings.ToolbarSubscribeAddUsersHeader : tab.Strings.ToolbarSubscribeAddGroupsHeader);
			return spiff.DOMElements.div({ className: 'tabAddSubscribersHeader' }, headerText);
		},
		$createRecipientSearchSelectorProps: function AddSubscribersComponent$CreateRecipientSearchSelectorProps(users, addUser, removeUser, groups, addGroup, removeRecipient, message) {
			return {
				users: users,
				addUser: addUser,
				removeUser: removeUser,
				groups: groups,
				addGroup: addGroup,
				removeRecipientByIndex: removeRecipient,
				isUsers: this.props.isUsers,
				userValidator: function(user) {
					return (user.hasEmail ? 0 : 1);
				},
				placeholderMessage: message,
				emptySearch: function(empty) {
				},
				noResults: function(noResults) {
				},
				shouldHideSearchComponent: true
			};
		},
		$renderRecipientSearchSelectorComponent: function AddSubscribersComponent$RenderRecipientSearchSelectorComponent() {
			var recipientSearchSelectorProps = this.$createRecipientSearchSelectorProps(this.state.users, ss.mkdel(this, this.addUser), ss.mkdel(this, this.removeUser), this.state.groups, ss.mkdel(this, this.addGroup), ss.mkdel(this, this.removeRecipientByIndex), '');
			return React.createElement($tab_RecipientSearchSelectorComponent, recipientSearchSelectorProps);
		},
		$renderButtons: function AddSubscribersComponent$RenderButtons() {
			return spiff.DOMElements.div({ className: 'tabAddSubscribersButtons' }, React.createElement(SharedWidgets.ButtonWidget, { handleClick: ss.mkdel(this, function(e) {
				this.props.cancelSelection();
			}), buttonType: 3, testId: 'add-subscribers-cancel', children: tab.Strings.SubscribeCancel, style: { marginRight: 12 } }), React.createElement(SharedWidgets.ButtonWidget, { handleClick: ss.mkdel(this, function(e1) {
				this.confirmSelection();
			}), buttonType: 2, testId: 'add-subscribers-done', children: tab.Strings.SubscribeDone }));
		}
	}, React.Component);
	ss.initClass($tab_AddSubscribersComponentConstants, $asm, {});
	ss.initClass($tab_AddSubscribersComponentProps, $asm, {});
	ss.initClass($tab_AddSubscribersViewModel, $asm, {
		add_propsUpdated: function AddSubscribersViewModel$add_PropsUpdated(value) {
			this.$2$PropsUpdatedField = ss.delegateCombine(this.$2$PropsUpdatedField, value);
		},
		remove_propsUpdated: function AddSubscribersViewModel$remove_PropsUpdated(value) {
			this.$2$PropsUpdatedField = ss.delegateRemove(this.$2$PropsUpdatedField, value);
		},
		add_selectionCanceled: function AddSubscribersViewModel$add_SelectionCanceled(value) {
			this.$2$SelectionCanceledField = ss.delegateCombine(this.$2$SelectionCanceledField, value);
		},
		remove_selectionCanceled: function AddSubscribersViewModel$remove_SelectionCanceled(value) {
			this.$2$SelectionCanceledField = ss.delegateRemove(this.$2$SelectionCanceledField, value);
		},
		add_selectionConfirmedUser: function AddSubscribersViewModel$add_SelectionConfirmedUser(value) {
			this.$2$SelectionConfirmedUserField = ss.delegateCombine(this.$2$SelectionConfirmedUserField, value);
		},
		remove_selectionConfirmedUser: function AddSubscribersViewModel$remove_SelectionConfirmedUser(value) {
			this.$2$SelectionConfirmedUserField = ss.delegateRemove(this.$2$SelectionConfirmedUserField, value);
		},
		add_selectionConfirmedGroup: function AddSubscribersViewModel$add_SelectionConfirmedGroup(value) {
			this.$2$SelectionConfirmedGroupField = ss.delegateCombine(this.$2$SelectionConfirmedGroupField, value);
		},
		remove_selectionConfirmedGroup: function AddSubscribersViewModel$remove_SelectionConfirmedGroup(value) {
			this.$2$SelectionConfirmedGroupField = ss.delegateRemove(this.$2$SelectionConfirmedGroupField, value);
		},
		get_viewModel: function AddSubscribersViewModel$get_ViewModel() {
			return this;
		},
		get_props: function AddSubscribersViewModel$get_Props() {
			return this.$2$PropsField;
		},
		set_props: function AddSubscribersViewModel$set_Props(value) {
			this.$2$PropsField = value;
		},
		get_viewType: function AddSubscribersViewModel$get_ViewType() {
			return ss.makeGenericType(spiff.ReactHostView$3, [$tab_AddSubscribersViewModel, $tab_AddSubscribersComponent, $tab_AddSubscribersComponentProps]);
		},
		updateUberPopupViewModel: function AddSubscribersViewModel$UpdateUberPopupViewModel(vm) {
		},
		addUser: function AddSubscribersViewModel$AddUser(user) {
			if (_.any(this.users, function(value) {
				return value.id === user.id;
			})) {
				return;
			}
			this.users.push(user);
			this.$onComponentPropUpdated();
		},
		addGroup: function AddSubscribersViewModel$AddGroup(group) {
			if (_.any(this.groups, function(value) {
				return value.id === group.id;
			})) {
				return;
			}
			this.groups.push(group);
			this.$onComponentPropUpdated();
		},
		setUsers: function AddSubscribersViewModel$SetUsers(users) {
			this.users = users;
			this.$onComponentPropUpdated();
		},
		removeUser: function AddSubscribersViewModel$RemoveUser(user) {
			ss.remove(this.users, user);
			this.$onComponentPropUpdated();
		},
		removeGroup: function AddSubscribersViewModel$RemoveGroup(group) {
			ss.remove(this.groups, group);
			this.$onComponentPropUpdated();
		},
		removeRecipientByIndex: function AddSubscribersViewModel$RemoveRecipientByIndex(index) {
			if (this.get_props().isUsers) {
				this.removeUserByIndex(index);
			}
			else {
				this.removeGroupByIndex(index);
			}
			this.$onComponentPropUpdated();
		},
		removeUserByIndex: function AddSubscribersViewModel$RemoveUserByIndex(index) {
			ss.removeAt(this.users, index);
		},
		removeGroupByIndex: function AddSubscribersViewModel$RemoveGroupByIndex(index) {
			ss.removeAt(this.groups, index);
		},
		disposeViewModel: function AddSubscribersViewModel$DisposeViewModel() {
			this.dispose();
		},
		cancelSelection: function AddSubscribersViewModel$CancelSelection() {
			this.users = this.originalUsers;
			this.groups = this.originalGroups;
			this.$onComponentPropUpdated();
			this.raiseActionEvent(this.$2$SelectionCanceledField);
		},
		confirmSelection: function AddSubscribersViewModel$ConfirmSelection() {
			if (this.isUsers) {
				this.raiseActionEvent$1(Array).call(this, this.$2$SelectionConfirmedUserField, this.users);
			}
			else {
				this.raiseActionEvent$1(Array).call(this, this.$2$SelectionConfirmedGroupField, this.groups);
			}
		},
		updateProps: function AddSubscribersViewModel$UpdateProps() {
			var $t1 = $tab_AddSubscribersComponentProps.$ctor();
			$t1.users = this.users;
			$t1.addUser = ss.mkdel(this, this.addUser);
			$t1.removeUser = ss.mkdel(this, this.removeUser);
			$t1.groups = this.groups;
			$t1.addGroup = ss.mkdel(this, this.addGroup);
			$t1.removeGroup = ss.mkdel(this, this.removeGroup);
			$t1.removeRecipientByIndex = ss.mkdel(this, this.removeRecipientByIndex);
			$t1.isUsers = this.isUsers;
			$t1.cancelSelection = ss.mkdel(this, this.cancelSelection);
			$t1.confirmSelection = ss.mkdel(this, this.confirmSelection);
			$t1.confirmGroupsSelection = this.$2$SelectionConfirmedGroupField;
			$t1.confirmUsersSelection = this.$2$SelectionConfirmedUserField;
			this.set_props($t1);
		},
		$onComponentPropUpdated: function AddSubscribersViewModel$OnComponentPropUpdated() {
			this.updateProps();
			this.raiseActionEvent(this.$2$PropsUpdatedField);
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel, spiff.IContent, spiff.IUberPopupContent, ss.makeGenericType(spiff.IPropsProvider$1, [$tab_AddSubscribersComponentProps])]);
	ss.initClass($tab_ApiCrossDomainEnumConverter, $asm, {});
	ss.initClass($tab_ApiCrossDomainParamConverter, $asm, {});
	ss.initClass($tab_ApiCrossDomainPresModelsFactory, $asm, {});
	ss.initClass($tab_ApiDataSourcesHandler, $asm, {});
	ss.initClass($tab_ApiDeviceLayoutHandler, $asm, {
		get_$state: function ApiDeviceLayoutHandler$get_State() {
			var $t1 = new Object();
			$t1.availableDeviceSpecificLayouts = this.$viewModel.get_deviceLayouts();
			$t1.automaticDeviceSpecificLayouts = this.$viewModel.get_autoGeneratedDeviceLayouts();
			$t1.currentlyRequestedLayout = tabBootstrap.ViewerBootstrap.get_instance().get_deviceDetector().get_deviceType();
			$t1.detectedDeviceType = tabBootstrap.ViewerBootstrap.get_instance().get_deviceDetector().get_detectedDeviceType();
			return $t1;
		},
		dispose: function ApiDeviceLayoutHandler$Dispose() {
			this.$viewModel.remove_newLayouts(ss.mkdel(this, this.$handleNewLayouts));
		},
		handleGetDeviceLayoutState: function ApiDeviceLayoutHandler$HandleGetDeviceLayoutState(requestCommand) {
			var response = $tab_$ApiServerResultBuilder.$buildResult('api.success', this.get_$state());
			this.$responder.sendResponse(requestCommand, response);
		},
		$handleNewLayouts: function ApiDeviceLayoutHandler$HandleNewLayouts() {
			this.$responder.sendEventNotification('api.DeviceLayoutStateChangedEvent', null, JSON.stringify(this.get_$state()));
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_ApiEventHandler, $asm, {
		dispose: function ApiEventHandler$Dispose() {
			this.$dashboardDisposables.dispose();
			if (ss.isValue(this.$toolbarManager)) {
				this.$toolbarManager.dispose();
				this.$toolbarManager = null;
			}
			if (ss.isValue(this.$storytellingHandler)) {
				this.$storytellingHandler.dispose();
				this.$storytellingHandler = null;
			}
			if (ss.isValue(this.$deviceLayoutHandler)) {
				this.$deviceLayoutHandler.dispose();
				this.$deviceLayoutHandler = null;
			}
			tab.CommandController.get().remove_tabChangeCompleted(ss.mkdel(this, this.handleNewLayout));
			tab.StartupUtils.remove_clientFullyLoaded(ss.mkdel(this, this.onClientFullyLoaded));
			tab.CommandController.get().remove_commandQueueComplete(ss.mkdel(this, this.onCommandComplete));
		},
		updateClients: function ApiEventHandler$UpdateClients(newClient, newStorytellingClient) {
			this.$updateMainClient(newClient);
			this.$updateStorytellingClient(newStorytellingClient);
			_.defer(ss.mkdel(this, this.$updateViewListeners));
			if (!this.$dashboardHandlerInstalled) {
				var wm = tab.ApplicationModel.get_instance().get_workbook();
				if (ss.isValue(wm)) {
					wm.addDashboardUpdatedHandler(ss.mkdel(this, this.onDashboardUpdated));
					this.$dashboardHandlerInstalled = true;
				}
			}
			else {
				this.onDashboardUpdated(null);
			}
		},
		$updateMainClient: function ApiEventHandler$UpdateMainClient(newClient) {
			if (!ss.referenceEquals(this.$client, newClient)) {
				var oldClient = this.$client;
				this.$client = newClient;
				if (tsConfig.allow_custom_views) {
					var oldCustomViewModel = (ss.isValue(oldClient) ? oldClient.get_customViewsViewModel() : null);
					if (ss.isValue(oldCustomViewModel)) {
						oldCustomViewModel.remove_dirtyChanged(ss.mkdel(this, this.onCustomViewUpdated));
						oldCustomViewModel.remove_customViewListChanged(ss.mkdel(this, this.onCustomViewListLoaded));
						oldCustomViewModel.remove_customViewDestroyed(ss.mkdel(this, this.onCustomViewDestroyed));
						oldCustomViewModel.remove_defaultCustomViewChanged(ss.mkdel(this, this.onCustomViewSetDefault));
					}
					var newCustomViewModel = (ss.isValue(newClient) ? newClient.get_customViewsViewModel() : null);
					if (ss.isValue(newCustomViewModel)) {
						newCustomViewModel.add_dirtyChanged(ss.mkdel(this, this.onCustomViewUpdated));
						newCustomViewModel.add_customViewListChanged(ss.mkdel(this, this.onCustomViewListLoaded));
						newCustomViewModel.add_customViewDestroyed(ss.mkdel(this, this.onCustomViewDestroyed));
						newCustomViewModel.add_defaultCustomViewChanged(ss.mkdel(this, this.onCustomViewSetDefault));
					}
				}
				this.$customViewLoaded = false;
				this.$toolbarManager = tab.MiscUtil.dispose$1(this.$toolbarManager);
				if (ss.isValue(this.$apiResponder) && ss.isValue(this.$client.get_toolbarCommands().get_toolbarViewModel())) {
					this.$toolbarManager = new $tab_ApiToolbarStateManager(this.$apiResponder, this.$client.get_toolbarCommands().get_toolbarViewModel());
				}
				this.$deviceLayoutHandler = tab.MiscUtil.dispose$1(this.$deviceLayoutHandler);
				if (ss.isValue(this.$apiResponder) && ss.isValue(this.$client.get_deviceLayoutViewModel())) {
					this.$deviceLayoutHandler = new $tab_ApiDeviceLayoutHandler(this.$client.get_deviceLayoutViewModel(), this.$apiResponder);
				}
			}
		},
		$updateStorytellingClient: function ApiEventHandler$UpdateStorytellingClient(newStorytellingClient) {
			if (!ss.referenceEquals(this.$storytellingClient, newStorytellingClient) || ss.isValue(this.$storytellingHandler) && !this.$storytellingHandler.get_eventHandlerAttached() && ss.isValue(newStorytellingClient.get_flipboardNavigatorViewModel())) {
				if (ss.isValue(this.$storytellingHandler)) {
					this.$storytellingHandler.dispose();
				}
				this.$storytellingClient = newStorytellingClient;
				if (ss.isValue(this.$storytellingClient)) {
					this.$storytellingHandler = new $tab_ApiStorytellingHandler(newStorytellingClient, this.$apiResponder);
				}
			}
		},
		$updateViewListeners: function ApiEventHandler$UpdateViewListeners() {
			var controllersToAdd = {};
			var $t1 = this.$client.get_viewControllers();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var controller = $t1[$t2];
				controllersToAdd[controller.get_sheetName()] = controller;
			}
			var $t3 = _.keys(this.$viewListeners);
			for (var $t4 = 0; $t4 < $t3.length; $t4++) {
				var sheetName = $t3[$t4];
				if (!ss.keyExists(controllersToAdd, sheetName)) {
					this.$viewListeners[sheetName].dispose();
					delete this.$viewListeners[sheetName];
				}
				else {
					delete controllersToAdd[sheetName];
				}
			}
			this.$subscribeFilterAndMarksEvents(controllersToAdd);
		},
		$subscribeFilterAndMarksEvents: function ApiEventHandler$SubscribeFilterAndMarksEvents(controllersToAdd) {
			_.each(_.keys(controllersToAdd), ss.mkdel(this, function(sheetName) {
				var controller = controllersToAdd[sheetName];
				var selectionChangeHandler = ss.mkdel(this, function(sheet, io) {
					if (ss.referenceEquals(controller.get_sheetName(), sheet)) {
						this.onSelectionChanged(sheet, io);
					}
				});
				$tab_ViewController.add_selectionChanged(selectionChangeHandler);
				this.$viewListeners[sheetName] = new tab.CallOnDispose(function() {
					$tab_ViewController.remove_selectionChanged(selectionChangeHandler);
				});
			}));
		},
		handleEvent: function ApiEventHandler$HandleEvent(e) {
			var odata = e.data;
			if (ss.isNullOrUndefined(odata) || typeof(odata) !== 'string') {
				return;
			}
			var data = ss.cast(odata, String);
			var cmd = tab._ApiCommand.parse(data);
			if (ss.isNullOrUndefined(cmd.get_rawName())) {
				return;
			}
			this.routeCommand(cmd);
		},
		routeCommand: function ApiEventHandler$RouteCommand(cmd) {
			switch (cmd.get_name()) {
				case 'api.GetClientInfoCommand': {
					this.$sendClientInfo(cmd);
					break;
				}
				case 'api.GetCurrentUrlCommand': {
					this.$sendCurrentUrl(cmd);
					break;
				}
				case 'api.ClearFilterCommand': {
					this.$clearFilter(cmd);
					break;
				}
				case 'api.ApplyCategoricalFilterCommand': {
					this.$applyCategoricalFilter(cmd);
					break;
				}
				case 'api.ApplyRangeFilterCommand': {
					this.$applyRangeFilter(cmd);
					break;
				}
				case 'api.ApplyRelativeDateFilterCommand': {
					this.$applyRelativeDateFilter(cmd);
					break;
				}
				case 'api.ApplyHierarchicalFilterCommand': {
					this.$applyHierarchicalFilter(cmd);
					break;
				}
				case 'api.RefreshDataCommand': {
					this.$refreshData(cmd);
					break;
				}
				case 'api.RevertAllCommand': {
					this.$revertAll(cmd);
					break;
				}
				case 'api.SwitchActiveSheetCommand': {
					this.$switchActiveSheet(cmd);
					break;
				}
				case 'api.UpdateActiveSheetCommand': {
					this.$updateActiveSheet(cmd);
					break;
				}
				case 'api.SelectMarksCommand': {
					this.$selectMarks(cmd);
					break;
				}
				case 'api.ClearSelectedMarksCommand': {
					this.$clearSelectedMarks(cmd);
					break;
				}
				case 'api.FetchSelectedMarksCommand': {
					this.$fetchSelectedMarks(cmd);
					break;
				}
				case 'api.FetchParametersCommand': {
					this.$fetchParameters(cmd);
					break;
				}
				case 'api.SetParameterValueCommand': {
					this.$setParameterValue(cmd);
					break;
				}
				case 'api.InvokeCommandCommand': {
					this.$invokeCommand(cmd);
					break;
				}
				case 'api.SetSheetSizeCommand': {
					this.$setSheetSize(cmd);
					break;
				}
				case 'api.ShowHideToolbarCommand': {
					this.$showHideToolbar(cmd);
					break;
				}
				case 'api.GetFiltersListCommand': {
					this.$getFiltersList(cmd);
					break;
				}
				case 'api.GetOneFilterInfoCommand': {
					this.$getOneFilterInfo(cmd);
					break;
				}
				case 'api.GetDataSourceCommand': {
					this.$getDataSource(cmd);
					break;
				}
				case 'api.GetDataSourcesCommand': {
					this.$getDataSources(cmd);
					break;
				}
				case 'api.FetchCustomViewsCommand': {
					this.$fetchCustomViewList(cmd);
					break;
				}
				case 'api.ShowCustomViewCommand': {
					this.$showCustomView(cmd);
					break;
				}
				case 'api.UpdateCustomViewCommand': {
					this.$updateCustomView(cmd);
					break;
				}
				case 'api.MakeCurrentCustomViewDefaultCommand': {
					this.$makeCurrentCustomViewDefault(cmd);
					break;
				}
				case 'api.RemoveCustomViewCommand': {
					this.$removeCustomView(cmd);
					break;
				}
				case 'api.SaveNewCustomViewCommand': {
					this.$saveNewCustomView(cmd);
					break;
				}
				case 'api.ActivateStoryPoint': {
					this.$storytellingHandler.activateStoryPoint(cmd);
					break;
				}
				case 'api.ActivatePreviousStoryPoint': {
					this.$storytellingHandler.activatePreviousStoryPoint(cmd);
					break;
				}
				case 'api.ActivateNextStoryPoint': {
					this.$storytellingHandler.activateNextStoryPoint(cmd);
					break;
				}
				case 'api.SwitchViz': {
					var p = JSON.parse(cmd.get_parameters());
					tab.SessionServerCommands.switchToViz(p['api.invokeCommandParam']);
					break;
				}
				case 'api.RevertStoryPoint': {
					this.$storytellingHandler.revertStoryPoint(cmd);
					break;
				}
				case 'api.GetSummaryTableCommand': {
					this.$getSummaryData(cmd);
					break;
				}
				case 'api.GetUnderlyingTableCommand': {
					this.$getUnderlyingData(cmd);
					break;
				}
				case 'api.ClearHighlightedMarksCommand': {
					this.$clearHighlightedMarks(cmd);
					break;
				}
				case 'api.HighlightMarksCommand': {
					this.$highlightMarks(cmd);
					break;
				}
				case 'api.HighlightMarksByPatternMatch': {
					this.$highlightMarksByPatternMatch(cmd);
					break;
				}
				case 'api.FetchHighlightedMarksCommand': {
					this.$fetchHighlightedMarks(cmd);
					break;
				}
				case 'api.GetToolbarState': {
					this.$getToolbarState(cmd);
					break;
				}
				case 'api.Undo': {
					this.$undo(cmd);
					break;
				}
				case 'api.Redo': {
					this.$redo(cmd);
					break;
				}
				case 'api.ToggleUpdates': {
					this.$toggleUpdates(cmd);
					break;
				}
				case 'api.ShowShareDialog': {
					this.$showShareDialog();
					break;
				}
				case 'api.ShowDataAlertDialog': {
					this.$showDataAlertDialog();
					break;
				}
				case 'api.ShowSubscribeDialog': {
					this.$showSubscribeDialog();
					break;
				}
				case 'api.ShowCustomViewsDialog': {
					this.$showCustomViewsDialog();
					break;
				}
				case 'api.ShowPerformanceDialog': {
					this.$showPerformanceDialog();
					break;
				}
				case 'api.ShowDownloadDialog': {
					this.$showDownloadDialog();
					break;
				}
				case 'api.GetDeviceLayoutState': {
					this.$getDeviceLayoutState(cmd);
					break;
				}
			}
		},
		handleNewLayout: function ApiEventHandler$HandleNewLayout(oldAndNewSheetNames) {
			var oldSheetName = oldAndNewSheetNames.item1;
			var newSheetName = oldAndNewSheetNames.item2;
			this.$apiResponder.sendEventNotification('api.TabSwitchEvent', oldSheetName, newSheetName);
		},
		handleMarkSelectionEvent: function ApiEventHandler$HandleMarkSelectionEvent(sheetName, selectionInfo) {
			if (ss.referenceEquals(sheetName, selectionInfo.primarySheet)) {
				this.$apiResponder.sendEventNotification('api.MarksSelectionChangedEvent', sheetName, null);
			}
		},
		handleFilterChangeEvent: function ApiEventHandler$HandleFilterChangeEvent(sheetName, filterChangeInfo) {
			if (ss.isNullOrUndefined(filterChangeInfo.primarySheet)) {
				return;
			}
			var result = filterChangeInfo.cmdResult.commandReturn;
			var filterFieldName = result['fn'];
			if (ss.isNullOrUndefined(result['invalidValues']) && ss.isNullOrUndefined(result['invalidFieldCaption']) && ss.isValue(filterFieldName)) {
				var filterCaption = null;
				var vm = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), filterChangeInfo.primarySheet);
				if (ss.isValue(vm)) {
					var fm = _.find(vm.get_filters(), function(model) {
						return ss.referenceEquals(model.get_globalFieldName(), filterFieldName);
					});
					if (ss.isValue(fm)) {
						filterCaption = fm.get_filterPresModel().fieldCaption;
					}
				}
				var fieldNames = [filterFieldName, ss.coalesce(filterCaption, filterFieldName)];
				this.$apiResponder.sendEventNotification('api.FilterChangedEvent', sheetName, JSON.stringify(fieldNames));
			}
		},
		$isFilterCommand: function ApiEventHandler$IsFilterCommand(commandName) {
			return ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'reset-filter' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'clear-existing-filter' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'range-filter' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'categorical-filter' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'categorical-filter-by-index' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'hierarchical-filter' }.cmd) || ss.referenceEquals(commandName, { ns: 'tabdoc', cmd: 'relative-date-filter' }.cmd);
		},
		removeEditDataAlertUrlParam: function ApiEventHandler$RemoveEditDataAlertUrlParam(sheetName) {
			this.$apiResponder.sendEventNotification('api.RemoveEditDataAlertUrlParamEvent', sheetName, '');
		},
		onSelectionChanged: function ApiEventHandler$OnSelectionChanged(sheetName, oSelectionInfo) {
			if (ss.isNullOrUndefined(oSelectionInfo) || ss.isNullOrUndefined(oSelectionInfo.cmdResult) || ss.isNullOrUndefined(oSelectionInfo.cmdResult.commandName)) {
				return;
			}
			var names = oSelectionInfo.cmdResult.commandName.split(':');
			if (names[0] === 'tabsrv' && (ss.startsWithString(names[1], 'select') && !ss.startsWithString(names[1], 'select-legend'))) {
				this.handleMarkSelectionEvent(sheetName, oSelectionInfo);
			}
			else {
				if (ss.startsWithString(names[1], 'highlight') || ss.startsWithString(names[1], 'select-legend')) {
					this.$apiResponder.sendEventNotification('api.MarksHighlightChangedEvent', sheetName, null);
				}
				if (ss.startsWithString(names[1], 'select') && !ss.startsWithString(names[1], 'select-legend')) {
					this.handleMarkSelectionEvent(sheetName, oSelectionInfo);
				}
				else if (this.$isFilterCommand(names[1])) {
					this.handleFilterChangeEvent(sheetName, oSelectionInfo);
				}
			}
		},
		onClientFullyLoaded: function ApiEventHandler$OnClientFullyLoaded() {
			tab.StartupUtils.remove_clientFullyLoaded(ss.mkdel(this, this.onClientFullyLoaded));
			this.$apiResponder.sendEventNotification('api.VizInteractiveEvent', null, tsConfig.clientNumber);
		},
		onCommandComplete: function ApiEventHandler$OnCommandComplete() {
			this.$apiResponder.sendEventNotification('api.VizInteractiveEvent', null, tsConfig.clientNumber);
		},
		onDashboardUpdated: function ApiEventHandler$OnDashboardUpdated(dm) {
			dm = tab.ModelUtils.findContentDashboard(null);
			this.$dashboardDisposables.dispose();
			if (ss.isNullOrUndefined(dm)) {
				return;
			}
			var zoneModels = dm.get_zoneModels();
			_.each(zoneModels, ss.mkdel(this, function(m, i) {
				if (m.get_zoneType() === 'paramctrl' && ss.isValue(m.get_model())) {
					if (ss.referenceEquals(ss.getInstanceType(m.get_model()), tab.ParameterCtrlModel)) {
						var pm = ss.cast(m.get_model(), tab.ParameterCtrlModel);
						pm.add_newParameterCtrl(ss.mkdel(this, this.onParameterChange));
						this.$dashboardDisposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
							pm.remove_newParameterCtrl(ss.mkdel(this, this.onParameterChange));
						})));
					}
				}
			}));
		},
		onParameterChange: function ApiEventHandler$OnParameterChange(info) {
			var parameterName = info.fieldCaption;
			this.$apiResponder.sendEventNotification('api.ParameterChangedEvent', null, parameterName);
		},
		onCustomViewDestroyed: function ApiEventHandler$OnCustomViewDestroyed(sender, e) {
			this.$apiResponder.sendEventNotification('api.CustomViewRemovedEvent', null, JSON.stringify(this.$customViewsInfo()));
		},
		onCustomViewUpdated: function ApiEventHandler$OnCustomViewUpdated(sender, e) {
			this.$apiResponder.sendEventNotification('api.CustomViewUpdatedEvent', null, JSON.stringify(this.$customViewsInfo()));
		},
		onCustomViewSetDefault: function ApiEventHandler$OnCustomViewSetDefault(sender, e) {
			this.$apiResponder.sendEventNotification('api.CustomViewSetDefaultEvent', null, JSON.stringify(this.$customViewsInfo()));
		},
		onCustomViewListLoaded: function ApiEventHandler$OnCustomViewListLoaded(sender, e) {
			this.$apiResponder.sendEventNotification('api.CustomViewsListLoadedEvent', null, JSON.stringify(this.$customViewsInfo()));
			this.$customViewLoaded = true;
		},
		$fetchParameters: function ApiEventHandler$FetchParameters(cmd) {
			var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-parameter-models' }, null);
			this.$sendCommand(cmd, c, $tab_$ApiParameterHandler.$processParameters);
		},
		$setParameterValue: function ApiEventHandler$SetParameterValue(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var cmdParams = {};
			cmdParams['fieldCaption'] = param['api.setParameterName'];
			cmdParams['valueString'] = param['api.setParameterValue'];
			var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-parameter-value' }, cmdParams);
			this.$sendCommand(cmd, c, $tab_$ApiParameterHandler.$processOneParameters);
		},
		$getFiltersList: function ApiEventHandler$GetFiltersList(apiCommand) {
			var addParametersAction = function(source, destination) {
				destination['ignoreDomain'] = source['api.ignoreDomain'];
			};
			var c = this.$prepareVisualIdCommand$1(apiCommand, { ns: 'tabsrv', cmd: 'get-filter-info' }, addParametersAction);
			this.$sendCommand(apiCommand, c, $tab_ApiFilterHandler.processFilters);
		},
		$getOneFilterInfo: function ApiEventHandler$GetOneFilterInfo(apiCommand) {
			var addParametersAction = function(source, destination) {
				if (ss.isValue(source['api.fieldCaption'])) {
					destination['fieldCaption'] = source['api.fieldCaption'];
				}
				else {
					destination['fn'] = source['api.fieldName'];
				}
				if (ss.isValue(source['api.filterHierarchicalLevels'])) {
					destination['filterLevel'] = source['api.filterHierarchicalLevels'];
				}
				destination['ignoreDomain'] = source['api.ignoreDomain'];
			};
			var c = this.$prepareVisualIdCommand$1(apiCommand, { ns: 'tabsrv', cmd: 'get-filter-info' }, addParametersAction);
			this.$sendCommand(apiCommand, c, $tab_ApiFilterHandler.processSingleFilter);
		},
		$fetchSelectedMarks: function ApiEventHandler$FetchSelectedMarks(apiCommand) {
			var addParametersAction = function(source, destination) {
			};
			var c = this.$prepareVisualIdCommand$1(apiCommand, { ns: 'tabdoc', cmd: 'get-selection' }, addParametersAction);
			this.$sendCommand(apiCommand, c, ss.mkdel(this, this.$processSelectedMarks));
		},
		$processActiveMarks: function ApiEventHandler$ProcessActiveMarks(dataDictionaryPM, vizData) {
			var returnPm = new Object();
			var dataDictionary = new tab.DataDictionaryModel(null);
			dataDictionary.update(dataDictionaryPM);
			var vizDataModel = new tab.VizDataModel(null);
			vizDataModel.update(vizData, tab.NoopModelEventsHandler.get_noopContext());
			var marks = [];
			returnPm.marks = marks;
			if (ss.isNullOrUndefined(dataDictionary) || dataDictionary.get_isEmpty()) {
				return returnPm;
			}
			vizDataModel.forEachTupleId(function(tupleId) {
				var $t1 = new Object();
				$t1.tupleId = tupleId;
				var mark = $t1;
				var pairs = [];
				mark.pairs = pairs;
				marks.push(mark);
				vizDataModel.forEachVizDataField(function(dataField, colIdx) {
					var $t2 = new Object();
					$t2.fieldName = dataField.get_fieldCaption();
					$t2.formattedValue = tab.VizDataLookup.lookupAlias(tupleId, dataField, dataDictionary);
					$t2.valueDataType = $tab_ApiCrossDomainEnumConverter.convertDataType(dataField.get_dataType());
					var pair = $t2;
					var dataValue = null;
					if (!tab.VizDataLookup.isSpecial(tupleId, dataField, dataDictionary, null) && dataField.get_hasDataValues() && dataField.isTupleIdValid(tupleId)) {
						dataValue = tab.VizDataLookup.lookupRawDataValue(tupleId, dataField, dataDictionary);
					}
					var jsonValue = $tab__ApiSerializer.serializeDataValue(dataValue, dataField.get_dataType());
					pair.value = jsonValue;
					pairs.push(pair);
					return true;
				});
				return true;
			});
			return returnPm;
		},
		$processSelectedMarks: function ApiEventHandler$ProcessSelectedMarks(pm) {
			var selectionDataPm = pm;
			var dataDictionaryPM = selectionDataPm.dataDictionary;
			var vizData = selectionDataPm.vizData;
			return this.$processActiveMarks(dataDictionaryPM, vizData);
		},
		$applyHierarchicalFilter: function ApiEventHandler$ApplyHierarchicalFilter(apiCommand) {
			var addParametersAction = function(source, destination) {
				destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
				if (ss.isValue(source['api.filterReset']) && ss.unbox(ss.cast(source['api.filterReset'], Boolean))) {
					destination['filterUpdateType'] = 'filter-clear'.toString();
				}
				else {
					if (ss.isValue(source['api.exclude'])) {
						destination['exclude'] = source['api.exclude'];
					}
					var updateType = $tab_ApiCrossDomainParamConverter.convertFilterUpdateType(source['api.filterUpdateType'].toString());
					destination['filterUpdateType'] = updateType;
					if (ss.isValue(source['api.filterHierarchicalValues'])) {
						destination['filterValues'] = ss.cast(source['api.filterHierarchicalValues'], String);
					}
					if (ss.isValue(source['api.filterHierarchicalLevels'])) {
						destination['filterLevels'] = ss.cast(source['api.filterHierarchicalLevels'], String);
					}
					if (ss.isNullOrUndefined(source['api.filterHierarchicalValues']) && ss.isNullOrUndefined(source['api.filterHierarchicalLevels'])) {
						destination['filterLevels'] = '[]';
					}
				}
			};
			var c = this.$prepareVisualIdCommand$1(apiCommand, { ns: 'tabdoc', cmd: 'hierarchical-filter' }, addParametersAction);
			this.$sendCommand(apiCommand, c, $tab_ApiFilterHandler.processFilterCommandReturningFieldName);
		},
		$applyRangeFilter: function ApiEventHandler$ApplyRangeFilter(apiCommand) {
			var addParametersAction = function(source, destination) {
				destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
				if (ss.isValue(source['api.filterReset']) && ss.unbox(ss.cast(source['api.filterReset'], Boolean))) {
					destination['filterUpdateType'] = 'filter-clear'.toString();
				}
				else {
					if (ss.isValue(source['api.filterRangeMax'])) {
						destination['rangeMax'] = source['api.filterRangeMax'];
					}
					if (ss.isValue(source['api.filterRangeMin'])) {
						destination['rangeMin'] = source['api.filterRangeMin'];
					}
					if (ss.isValue(source['api.filterRangeNullOption'])) {
						if (ss.cast(source['api.filterRangeNullOption'], String) === 'NULL_VALUES') {
							destination['included'] = 'include-null'.toString();
						}
						else if (ss.cast(source['api.filterRangeNullOption'], String) === 'NON_NULL_VALUES') {
							destination['included'] = 'include-non-null'.toString();
						}
						else {
							destination['included'] = 'include-all'.toString();
						}
					}
				}
			};
			var c = this.$prepareVisualIdCommand$1(apiCommand, { ns: 'tabdoc', cmd: 'range-filter' }, addParametersAction);
			this.$sendCommand(apiCommand, c, $tab_ApiFilterHandler.processFilterCommandReturningFieldName);
		},
		$applyRelativeDateFilter: function ApiEventHandler$ApplyRelativeDateFilter(apiCommand) {
			var addParametersAction = function(source, destination) {
				destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
				if (ss.isValue(source['api.filterReset']) && ss.unbox(ss.cast(source['api.filterReset'], Boolean))) {
					destination['filterUpdateType'] = 'filter-clear'.toString();
				}
				else {
					if (ss.isValue(source['api.filterDateArchorValue'])) {
						destination['anchorDate'] = source['api.filterDateArchorValue'];
					}
					destination['datePeriodType'] = ss.cast(source['api.filterPeriodType'], String).toLowerCase();
					destination['dateRangeType'] = ss.cast(source['api.filterDateRangeType'], String).toLowerCase();
					if (ss.isValue(source['api.filterDateRange'])) {
						destination['rangeN'] = source['api.filterDateRange'];
					}
				}
			};
			var c = this.$prepareVisualIdCommand$1(apiCommand, { ns: 'tabdoc', cmd: 'relative-date-filter' }, addParametersAction);
			this.$sendCommand(apiCommand, c, $tab_ApiFilterHandler.processFilterCommandReturningFieldName);
		},
		$verifySelectType: function ApiEventHandler$VerifySelectType(inputType) {
			if (inputType.toLowerCase() === 'replace') {
				return 'select-replace'.toString();
			}
			else if (inputType.toLowerCase() === 'add') {
				return 'select-add'.toString();
			}
			else if (inputType.toLowerCase() === 'remove') {
				return 'select-remove'.toString();
			}
			return 'select-replace'.toString();
		},
		$verifyNullOption: function ApiEventHandler$VerifyNullOption(nullOption) {
			if (nullOption.toLowerCase() === 'nullvalues') {
				return 'include-null'.toString();
			}
			else if (nullOption.toLowerCase() === 'nonnullvalues') {
				return 'include-non-null'.toString();
			}
			else if (nullOption.toLowerCase() === 'allvalues') {
				return 'include-all'.toString();
			}
			return 'include-all'.toString();
		},
		$clearFilter: function ApiEventHandler$ClearFilter(apiCommand) {
			var commandParams = JSON.parse(apiCommand.get_parameters());
			var quickFilterTypeMap = $tab_ApiEventHandler.$buildQuickFiltersTypeMap();
			var fieldCaption = ss.cast(commandParams['api.fieldCaption'], String);
			var quickFilterShown = ss.keyExists(quickFilterTypeMap, fieldCaption);
			var commandName;
			if (quickFilterShown) {
				if (quickFilterTypeMap[fieldCaption] === 'RD') {
					var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.localfailed', 'Clearing a relative date filter is not supported when an associated quick filter is on the Worksheet. Please call applyRelativeDateFilter instead.');
					this.$apiResponder.sendResponse(apiCommand, jsonResult);
					return;
				}
				commandName = { ns: 'tabdoc', cmd: 'reset-filter' };
			}
			else {
				commandName = { ns: 'tabdoc', cmd: 'clear-existing-filter' };
			}
			var addParametersAction = function(source, destination) {
				destination['qualifiedFieldCaption'] = fieldCaption;
			};
			var command = this.$prepareVisualIdCommand$1(apiCommand, commandName, addParametersAction);
			this.$sendCommand(apiCommand, command, $tab_ApiFilterHandler.processFilterCommandReturningFieldName);
		},
		$applyCategoricalFilter: function ApiEventHandler$ApplyCategoricalFilter(apiCommand) {
			var addParametersAction = function(source, destination) {
				destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
				if (ss.isValue(source['api.filterReset']) && ss.unbox(ss.cast(source['api.filterReset'], Boolean))) {
					destination['filterUpdateType'] = 'filter-clear'.toString();
				}
				else {
					if (ss.isValue(source['api.exclude'])) {
						destination['exclude'] = source['api.exclude'].toString();
					}
					var updateType = $tab_ApiCrossDomainParamConverter.convertFilterUpdateType(source['api.filterUpdateType'].toString());
					destination['filterUpdateType'] = updateType;
					if (ss.isValue(source['api.filterCategoricalValues'])) {
						destination['filterValues'] = JSON.stringify(source['api.filterCategoricalValues']);
					}
					else {
						destination['filterValues'] = '[""]';
					}
				}
			};
			var c = this.$prepareVisualIdCommand$1(apiCommand, { ns: 'tabdoc', cmd: 'categorical-filter' }, addParametersAction);
			this.$sendCommand(apiCommand, c, $tab_ApiFilterHandler.processFilterCommandReturningFieldName);
		},
		$addFieldValues: function ApiEventHandler$AddFieldValues(fieldCaptions, markValues) {
			var sb = new ss.StringBuilder();
			sb.append('[');
			for (var i = 0; i < fieldCaptions.length; i++) {
				if (i > 0) {
					sb.append(',');
				}
				sb.append('{');
				sb.append('"' + 'qualifiedFieldCaption'.toString() + '":');
				sb.append('"' + fieldCaptions[i] + '"');
				sb.append(',');
				sb.append('"' + 'selectValues'.toString() + '":');
				sb.append(markValues[i]);
				sb.append('}');
			}
			sb.append(']');
			return sb.toString();
		},
		$addFieldValuesForRange: function ApiEventHandler$AddFieldValuesForRange(fieldCaptions, rangeValues) {
			var sb = new ss.StringBuilder();
			sb.append('[');
			for (var i = 0; i < fieldCaptions.length; i++) {
				if (i > 0) {
					sb.append(',');
				}
				sb.append('{');
				sb.append('"' + 'qualifiedFieldCaption' + '":');
				sb.append('"' + fieldCaptions[i] + '"');
				sb.append(',');
				var rangeArray = ss.cast(JSON.parse(rangeValues[i]), Array);
				var range = JSON.parse(ss.cast(rangeArray[0], String));
				if (ss.isValue(range['max'])) {
					sb.append('"' + 'maxValue' + '":');
					sb.append('"' + range['max'].toString() + '"');
				}
				if (ss.isValue(range['min'])) {
					if (ss.isValue(range['max'])) {
						sb.append(',');
					}
					sb.append('"' + 'minValue'.toString() + '":');
					sb.append('"' + range['min'].toString() + '"');
				}
				if (ss.isValue(range['nullOption'])) {
					var nullOption = this.$verifyNullOption(range['nullOption'].toString());
					sb.append(',');
					sb.append('"' + 'included'.toString() + '":');
					sb.append('"' + nullOption + '"');
				}
				sb.append('}');
			}
			sb.append(']');
			return sb.toString();
		},
		$getSummaryData: function ApiEventHandler$GetSummaryData(cmd) {
			var c = this.$prepareVisualIdCommand$1(cmd, { ns: 'tabdoc', cmd: 'get-summary-data' }, $tab_ApiUnderlyingDataHandler.$prepareSummaryCommand);
			this.$sendCommand(cmd, c, $tab_ApiUnderlyingDataHandler.processSummaryData);
		},
		$getUnderlyingData: function ApiEventHandler$GetUnderlyingData(cmd) {
			var c = this.$prepareVisualIdCommand$1(cmd, { ns: 'tabdoc', cmd: 'get-underlying-data' }, $tab_ApiUnderlyingDataHandler.$prepareUnderlyingCommand);
			this.$sendCommand(cmd, c, $tab_ApiUnderlyingDataHandler.$processUnderlyingData);
		},
		$clearHighlightedMarks: function ApiEventHandler$ClearHighlightedMarks(cmd) {
			var addParametersAction = function(source, destination) {
			};
			var c = this.$prepareVisualIdCommand$1(cmd, { ns: 'tabsrv', cmd: 'select-none' }, addParametersAction);
			this.$sendCommand(cmd, c, $tab_ApiEventHandler.$processHighlightMarksCommand);
		},
		$highlightMarks: function ApiEventHandler$HighlightMarks(cmd) {
			var addParametersAction = function(source, destination) {
				destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
				destination['objectTextIds'] = source['api.ObjectTextIDs'];
			};
			var c = this.$prepareVisualIdCommand$1(cmd, { ns: 'tabdoc', cmd: 'highlight-items' }, addParametersAction);
			this.$sendCommand(cmd, c, $tab_ApiEventHandler.$processHighlightMarksCommand);
		},
		$highlightMarksByPatternMatch: function ApiEventHandler$HighlightMarksByPatternMatch(cmd) {
			var addParametersAction = function(source, destination) {
				destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
				destination['valueString'] = source['api.Pattern'];
			};
			var c = this.$prepareVisualIdCommand$1(cmd, { ns: 'tabdoc', cmd: 'highlight-items-by-pattern-match' }, addParametersAction);
			this.$sendCommand(cmd, c, $tab_ApiEventHandler.$processHighlightMarksCommand);
		},
		$fetchHighlightedMarks: function ApiEventHandler$FetchHighlightedMarks(cmd) {
			var addParametersAction = function(source, destination) {
			};
			var c = this.$prepareVisualIdCommand$1(cmd, { ns: 'tabdoc', cmd: 'get-highlighted-data' }, addParametersAction);
			this.$sendCommand(cmd, c, ss.mkdel(this, this.$processHighlightedMarks));
		},
		$processHighlightedMarks: function ApiEventHandler$ProcessHighlightedMarks(pm) {
			var selectionDataPm = pm;
			var dataDictionaryPM = selectionDataPm.dataDictionary;
			var vizData = selectionDataPm.vizData;
			return this.$processActiveMarks(dataDictionaryPM, vizData);
		},
		$selectMarks: function ApiEventHandler$SelectMarks(apiCommand) {
			var addParametersAction = ss.mkdel(this, function(source, destination) {
				if (tab.MiscUtil.isNullOrEmpty$2(source)) {
					destination['selectionUpdateType'] = 'select-replace'.toString();
				}
				else {
					destination['selectionUpdateType'] = this.$verifySelectType(source['api.filterUpdateType'].toString());
					if (ss.isValue(source['api.categoricalFieldCaption']) && ss.isValue(source['api.categoricalMarkValues'])) {
						var catFieldCaptions = ss.cast(JSON.parse(ss.cast(source['api.categoricalFieldCaption'], String)), Array);
						var catMarkValues = ss.cast(JSON.parse(ss.cast(source['api.categoricalMarkValues'], String)), Array);
						var fieldValues = this.$addFieldValues(catFieldCaptions, catMarkValues);
						destination['dimensionValueSelectionModels'] = fieldValues;
					}
					if (ss.isValue(source['api.hierarchicalFieldCaption']) && ss.isValue(source['api.hierarchicalMarkValues'])) {
						var catFieldCaptions1 = ss.cast(JSON.parse(ss.cast(source['api.hierarchicalFieldCaption'], String)), Array);
						var catMarkValues1 = ss.cast(JSON.parse(ss.cast(source['api.hierarchicalMarkValues'], String)), Array);
						var fieldValues1 = this.$addFieldValues(catFieldCaptions1, catMarkValues1);
						destination['hierarchicalValueSelectionModels'] = fieldValues1;
					}
					if (ss.isValue(source['api.rangeFieldCaption']) && ss.isValue(source['api.rangeMarkValues'])) {
						var fieldCaptions = ss.cast(JSON.parse(ss.cast(source['api.rangeFieldCaption'], String)), Array);
						var rangeValues = ss.cast(JSON.parse(ss.cast(source['api.rangeMarkValues'], String)), Array);
						var fieldValues2 = this.$addFieldValuesForRange(fieldCaptions, rangeValues);
						destination['quantativeRangeSelectionModels'] = fieldValues2;
					}
					if (ss.isValue(source['api.tupleIds'])) {
						var sb = new ss.StringBuilder();
						sb.append('{');
						sb.append('"' + 'selectionType' + '":');
						sb.append('"tuples"');
						sb.append(',');
						sb.append('"' + 'objectIds' + '":');
						sb.append(source['api.tupleIds']);
						sb.append('}');
						destination['selection'] = sb.toString();
					}
				}
			});
			var c = this.$prepareVisualIdCommand$1(apiCommand, { ns: 'tabdoc', cmd: 'select-by-value' }, addParametersAction);
			this.$sendCommand(apiCommand, c, $tab_ApiEventHandler.$processSelectMarksCommand);
		},
		$clearSelectedMarks: function ApiEventHandler$ClearSelectedMarks(cmd) {
			var addParametersAction = function(source, destination) {
			};
			var c = this.$prepareVisualIdCommand$1(cmd, { ns: 'tabsrv', cmd: 'select-none' }, addParametersAction);
			this.$sendCommand(cmd, c, $tab_ApiEventHandler.$processSelectMarksCommand);
		},
		$customViewsInfo: function ApiEventHandler$CustomViewsInfo() {
			var vm = this.$client.get_customViewsViewModel();
			var currentCustomView = vm.get_currentCustomView();
			var currentView = null;
			if (ss.isValue(currentCustomView)) {
				currentView = $tab__ApiSerializer.serializeCustomView(vm.get_currentCustomView(), tab.CustomizedViewRequests.buildUrl(vm.get_currentCustomView(), true));
			}
			var customViews = [];
			var ownCustomViews = this.$client.get_customViewsViewModel().get_myCustomViews();
			var $t1 = ss.getEnumerator(ownCustomViews);
			try {
				while ($t1.moveNext()) {
					var cv = $t1.current();
					var url = tab.CustomizedViewRequests.buildUrl(cv, true);
					var apiCustomView = $tab__ApiSerializer.serializeCustomView(cv, url);
					customViews.push(apiCustomView);
				}
			}
			finally {
				$t1.dispose();
			}
			var otherCustomViews = this.$client.get_customViewsViewModel().get_otherCustomViews();
			var $t2 = ss.getEnumerator(otherCustomViews);
			try {
				while ($t2.moveNext()) {
					var cv1 = $t2.current();
					var url1 = tab.CustomizedViewRequests.buildUrl(cv1, true);
					var apiCustomView1 = $tab__ApiSerializer.serializeCustomView(cv1, url1);
					customViews.push(apiCustomView1);
				}
			}
			finally {
				$t2.dispose();
			}
			return $tab_ApiCrossDomainPresModelsFactory.newCustomViewsInfo(this.$customViewLoaded, vm.get_defaultCustomViewId(), currentView, customViews);
		},
		$fetchCustomViewList: function ApiEventHandler$FetchCustomViewList(cmd) {
			this.$client.get_customViewsViewModel().updateCustomizedViews(ss.mkdel(this, function(cvs, defaultId) {
				var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', this.$customViewsInfo());
				this.$apiResponder.sendResponse(cmd, jsonResult);
			}), ss.mkdel(this, function(msg) {
				var jsonResult1 = $tab_$ApiServerResultBuilder.$buildResult('api.remotefailed', msg);
				this.$apiResponder.sendResponse(cmd, jsonResult1);
			}));
		},
		$showCustomView: function ApiEventHandler$ShowCustomView(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var cv = null;
			if (ss.isValue(param['api.customViewParam'])) {
				var apiCv = param['api.customViewParam'];
				cv = $tab__ApiSerializer.convertToCustomizedView(apiCv);
			}
			this.$client.get_customViewsViewModel().select(cv);
		},
		$removeCustomView: function ApiEventHandler$RemoveCustomView(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var apiCv = param['api.customViewParam'];
			var cv = $tab__ApiSerializer.convertToCustomizedView(apiCv);
			this.$client.get_customViewsViewModel().destroy(cv, ss.mkdel(this, function() {
				var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', this.$customViewsInfo());
				this.$apiResponder.sendResponse(cmd, jsonResult);
			}), ss.mkdel(this, function(msg) {
				var jsonResult1 = $tab_$ApiServerResultBuilder.$buildResult('api.remotefailed', msg);
				this.$apiResponder.sendResponse(cmd, jsonResult1);
			}));
		},
		$updateCustomView: function ApiEventHandler$UpdateCustomView(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var apiCv = param['api.customViewParam'];
			var updated = $tab__ApiSerializer.convertToCustomizedView(apiCv);
			this.$client.get_customViewsViewModel().update(updated, ss.mkdel(this, function(cv) {
				var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', this.$customViewsInfo());
				this.$apiResponder.sendResponse(cmd, jsonResult);
			}), ss.mkdel(this, function(msg) {
				var jsonResult1 = $tab_$ApiServerResultBuilder.$buildResult('api.remotefailed', msg);
				this.$apiResponder.sendResponse(cmd, jsonResult1);
			}));
		},
		$makeCurrentCustomViewDefault: function ApiEventHandler$MakeCurrentCustomViewDefault(cmd) {
			this.$client.get_customViewsViewModel().makeCurrentDefault(ss.mkdel(this, function(cv) {
				var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', this.$customViewsInfo());
				this.$apiResponder.sendResponse(cmd, jsonResult);
			}), ss.mkdel(this, function(msg) {
				var jsonResult1 = $tab_$ApiServerResultBuilder.$buildResult('api.remotefailed', msg);
				this.$apiResponder.sendResponse(cmd, jsonResult1);
			}));
		},
		$saveNewCustomView: function ApiEventHandler$SaveNewCustomView(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var name = ss.cast(param['api.customViewName'], String);
			this.$client.get_customViewsViewModel().save(name, ss.mkdel(this, function(cv) {
				var info = this.$customViewsInfo();
				info.newView = $tab__ApiSerializer.serializeCustomView(cv, tab.CustomizedViewRequests.buildUrl(cv, false));
				var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', info);
				this.$apiResponder.sendResponse(cmd, jsonResult);
			}), ss.mkdel(this, function(msg) {
				var jsonResult1 = $tab_$ApiServerResultBuilder.$buildResult('api.remotefailed', msg);
				this.$apiResponder.sendResponse(cmd, jsonResult1);
			}));
		},
		$getDataSource: function ApiEventHandler$GetDataSource(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var dataSourceName = param['api.dataSourceName'];
			var worksheetName = param['api.worksheetName'];
			var cmdParams = {};
			var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-schema' }, cmdParams);
			var processDataSource = function(pm) {
				var schemaPm = pm;
				var result = $tab_ApiDataSourcesHandler.$processDataSourcesForWorksheet(schemaPm, worksheetName, dataSourceName);
				return result.dataSources[0];
			};
			this.$sendCommand(cmd, c, processDataSource);
		},
		$getDataSources: function ApiEventHandler$GetDataSources(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var worksheetName = param['api.worksheetName'];
			var addParametersAction = function(source, destination) {
			};
			var c = this.$prepareVisualIdCommand$1(cmd, { ns: 'tabdoc', cmd: 'get-schema' }, addParametersAction);
			var processDataSources = function(pm) {
				var schemaPm = pm;
				var result = $tab_ApiDataSourcesHandler.$processDataSourcesForWorksheet(schemaPm, worksheetName, null);
				return result;
			};
			this.$sendCommand(cmd, c, processDataSources);
		},
		$invokeCommand: function ApiEventHandler$InvokeCommand(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var commandName = ss.cast(param['api.invokeCommandName'], String);
			if (commandName === 'showExportImageDialog') {
				this.$client.get_toolbarCommands().exportImage();
			}
			else if (commandName === 'showExportDataDialog') {
				var sheetName = null;
				if (ss.isValue('api.invokeCommandParam')) {
					sheetName = ss.cast(param['api.invokeCommandParam'], String);
				}
				$tab_ViewingToolbarCommands.exportData(sheetName);
			}
			else if (commandName === 'showExportCrosstabDialog') {
				var sheetName1 = null;
				if (ss.isValue('api.invokeCommandParam')) {
					sheetName1 = ss.cast(param['api.invokeCommandParam'], String);
				}
				$tab_ViewingToolbarCommands.exportCrosstab(sheetName1);
			}
			else if (commandName === 'showExportPDFDialog') {
				this.$client.get_toolbarCommands().exportPdf();
			}
			else if (commandName === 'pauseAutomaticUpdates') {
				this.$client.get_toolbarCommands().$pauseAutoUpdate();
				this.$sendAutoUpdateFlag(cmd);
			}
			else if (commandName === 'resumeAutomaticUpdates') {
				this.$client.get_toolbarCommands().$resumeAutoUpdate();
				this.$sendAutoUpdateFlag(cmd);
			}
			else if (commandName === 'toggleAutomaticUpdates') {
				this.$toggleUpdates(cmd);
			}
			else if (commandName === 'showShareDialog') {
				this.$client.get_toolbarCommands().$showShareDialog();
			}
			else if (commandName === 'showDownloadWorkbookDialog') {
				var dashboard = this.$client.get_applicationPresModel().workbookPresModel.dashboardPresModel;
				this.$client.get_toolbarCommands().$downloadWorkbookForApi(dashboard.sheetLayoutInfo.downloadLink);
			}
			else if (commandName === 'selectedMarksKeepOnly') {
				this.$client.get_toolbarCommands().$selectMarksKeepOnly();
			}
			else if (commandName === 'selectedMarksExclude') {
				this.$client.get_toolbarCommands().$selectMarksExclude();
			}
		},
		$getToolbarState: function ApiEventHandler$GetToolbarState(cmd) {
			if (ss.isValue(this.$toolbarManager)) {
				var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', this.$toolbarManager.get_toolbarState());
				this.$apiResponder.sendResponse(cmd, jsonResult);
			}
		},
		$undo: function ApiEventHandler$Undo(cmd) {
			tab.WorksheetServerCommands.undo();
			var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', '');
			this.$apiResponder.sendResponse(cmd, jsonResult);
		},
		$redo: function ApiEventHandler$Redo(cmd) {
			tab.WorksheetServerCommands.redo();
			var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', '');
			this.$apiResponder.sendResponse(cmd, jsonResult);
		},
		$toggleUpdates: function ApiEventHandler$ToggleUpdates(cmd) {
			this.$client.get_toolbarCommands().$toggleAutoUpdate();
			this.$sendAutoUpdateFlag(cmd);
		},
		$showShareDialog: function ApiEventHandler$ShowShareDialog() {
			this.$client.get_toolbarCommands().$showShareDialog();
		},
		$showDataAlertDialog: function ApiEventHandler$ShowDataAlertDialog() {
			this.$client.get_toolbarCommands().$showDataAlertDialog();
		},
		$showSubscribeDialog: function ApiEventHandler$ShowSubscribeDialog() {
			this.$client.get_toolbarCommands().$showSubscribeDialog();
		},
		$showPerformanceDialog: function ApiEventHandler$ShowPerformanceDialog() {
			this.$client.get_toolbarCommands().$showPerformanceDialog();
		},
		$showCustomViewsDialog: function ApiEventHandler$ShowCustomViewsDialog() {
			this.$client.get_toolbarCommands().$showCustomViewsDialog();
		},
		$showDownloadDialog: function ApiEventHandler$ShowDownloadDialog() {
			this.$client.get_toolbarCommands().$showDownloadDialog();
		},
		$sendAutoUpdateFlag: function ApiEventHandler$SendAutoUpdateFlag(cmd) {
			var result = $tab_ApiCrossDomainPresModelsFactory.newAutoUpdateState(this.$client.get_toolbarCommands().$isAutoUpdate());
			var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', result);
			this.$apiResponder.sendResponse(cmd, jsonResult);
		},
		$setSheetSize: function ApiEventHandler$SetSheetSize(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var cmdParams = {};
			cmdParams['sheet'] = param['api.setSheetSizeName'];
			cmdParams['minWidth'] = param['api.minWidth'];
			cmdParams['minHeight'] = param['api.minHeight'];
			cmdParams['maxWidth'] = param['api.maxWidth'];
			cmdParams['maxHeight'] = param['api.maxHeight'];
			var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-sheet-size' }, cmdParams);
			this.$sendCommand(cmd, c, null);
		},
		$refreshData: function ApiEventHandler$RefreshData(cmd) {
			this.$client.get_toolbarCommands().$refreshData();
			var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', '');
			this.$apiResponder.sendResponse(cmd, jsonResult);
		},
		$revertAll: function ApiEventHandler$RevertAll(cmd) {
			tab.WorksheetServerCommands.revert(null);
			var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', '');
			this.$apiResponder.sendResponse(cmd, jsonResult);
		},
		$showHideToolbar: function ApiEventHandler$ShowHideToolbar(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var show = ss.unbox(ss.cast(param['api.showHideToolbarValue'], Boolean));
			this.$client.set_toolbarDisplayed(show);
			this.$client.doResize();
		},
		$switchActiveSheet: function ApiEventHandler$SwitchActiveSheet(cmd) {
			var param = JSON.parse(cmd.get_parameters());
			var msg = new Object();
			msg.oldRepositoryUrl = ss.cast(param['api.oldRepositoryUrl'], String);
			msg.repositoryUrl = ss.cast(param['api.switchToRepositoryUrl'], String);
			msg.sheetName = ss.cast(param['api.switchToSheetName'], String);
			msg.oldSheetName = tsConfig.current_sheet_name;
			msg.noUndo = true;
			msg.successCallback = ss.mkdel(this, function(model) {
				var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', '');
				this.$apiResponder.sendResponse(cmd, jsonResult);
			});
			msg.errorCallback = ss.mkdel(this, function(error) {
				var jsonResult1 = $tab_$ApiServerResultBuilder.$buildResult('api.remotefailed', error);
				this.$apiResponder.sendResponse(cmd, jsonResult1);
			});
			$tab_Application.fireOnTabSelect(msg);
		},
		$updateActiveSheet: function ApiEventHandler$UpdateActiveSheet(cmd) {
			this.$client.doResize();
		},
		$sendClientInfo: function ApiEventHandler$SendClientInfo(cmd) {
			if (tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapFailed()) {
				return;
			}
			if (!tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapCompleted()) {
				ss.Debug.assert(false, "Somehow we're requesting the client info before bootstrap has completed.  How did I get here?");
				return;
			}
			tab.ModuleManager.registerModulesLoadedCallback(ss.mkdel(this, function() {
				var clientInfo = $tab__ApiSerializer.serializeClientInfo(this.$client, this.$storytellingClient);
				var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', clientInfo);
				this.$apiResponder.sendResponse(cmd, jsonResult);
			}));
		},
		$sendCurrentUrl: function ApiEventHandler$SendCurrentUrl(cmd) {
			var currentUrl = tab.VizUriModel.createForViewingSheet(tsConfig.repositoryUrl).get_absoluteUri();
			var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', currentUrl);
			this.$apiResponder.sendResponse(cmd, jsonResult);
		},
		$prepareVisualIdCommand$1: function ApiEventHandler$PrepareVisualIdCommand(apiCommand, commandName, addParametersAction) {
			return this.$prepareVisualIdCommand(apiCommand, tab.CommandUtils.newCommand(commandName, null), addParametersAction);
		},
		$prepareVisualIdCommand: function ApiEventHandler$PrepareVisualIdCommand(apiCommand, serverCommand, addParametersAction) {
			var crossDomainParameters = JSON.parse(apiCommand.get_parameters());
			var serverParameters = this.$deserializeVisualId(crossDomainParameters);
			serverCommand.commandParams = serverParameters;
			addParametersAction(crossDomainParameters, serverParameters);
			return serverCommand;
		},
		$deserializeVisualId: function ApiEventHandler$DeserializeVisualId(crossDomainParameters) {
			var serverCommandParameters = {};
			if (ss.isValue(crossDomainParameters['api.visualId'])) {
				serverCommandParameters['visualIdPresModel'] = JSON.stringify(crossDomainParameters['api.visualId']);
			}
			else {
				serverCommandParameters['worksheet'] = crossDomainParameters['api.worksheetName'];
				if (ss.isValue(crossDomainParameters['api.dashboardName'])) {
					serverCommandParameters['dashboard'] = crossDomainParameters['api.dashboardName'];
				}
			}
			return serverCommandParameters;
		},
		$getDeviceLayoutState: function ApiEventHandler$GetDeviceLayoutState(command) {
			if (ss.isValue(this.$deviceLayoutHandler)) {
				this.$deviceLayoutHandler.handleGetDeviceLayoutState(command);
			}
		},
		$sendCommand: function ApiEventHandler$SendCommand(cmd, c, processServerResult) {
			c.noExceptionDialog = true;
			tab.ApiClientCommands.doApiCommand(c, ss.mkdel(this, function(pm) {
				tab.Log.get(this).debug('SendCommand success: apiCmd=%s, pm=%o', [cmd, pm]);
				var result = pm;
				if (ss.isValue(processServerResult)) {
					result = processServerResult(pm);
				}
				var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', result);
				this.$apiResponder.sendResponse(cmd, jsonResult);
			}), ss.mkdel(this, function(error) {
				var jsonResult1 = $tab_$ApiServerResultBuilder.$buildResult('api.remotefailed', error);
				this.$apiResponder.sendResponse(cmd, jsonResult1);
			}));
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_ApiFilterHandler, $asm, {});
	ss.initClass($tab_ApiPresModelsConverter, $asm, {});
	ss.initClass($tab_ApiStorytellingHandler, $asm, {
		get_eventHandlerAttached: function ApiStorytellingHandler$get_EventHandlerAttached() {
			return this.$eventHandlerAttached;
		},
		dispose: function ApiStorytellingHandler$Dispose() {
			this.$disposables.dispose();
			this.$disposed = true;
		},
		activateStoryPoint: function ApiStorytellingHandler$ActivateStoryPoint(command) {
			this.$handleStoryPointCommand(command, ss.mkdel(this, this.$handleActivateStoryPoint));
		},
		activatePreviousStoryPoint: function ApiStorytellingHandler$ActivatePreviousStoryPoint(command) {
			this.$handleStoryPointCommand(command, ss.mkdel(this, function(c) {
				return this.$handleActivatePreviousOrNextStoryPoint(c, function(navVm) {
					return navVm.clickPrevious();
				});
			}));
		},
		activateNextStoryPoint: function ApiStorytellingHandler$ActivateNextStoryPoint(command) {
			this.$handleStoryPointCommand(command, ss.mkdel(this, function(c) {
				return this.$handleActivatePreviousOrNextStoryPoint(c, function(navVm) {
					return navVm.clickNext();
				});
			}));
		},
		revertStoryPoint: function ApiStorytellingHandler$RevertStoryPoint(command) {
			this.$handleStoryPointCommand(command, ss.mkdel(this, this.$handleRevertStoryPoint));
		},
		$handleRevertStoryPoint: function ApiStorytellingHandler$HandleRevertStoryPoint(command) {
			return this.$handleIndexedStoryPointCommand(command, 'api.RevertStoryPoint', function(storyPointVm) {
				return storyPointVm.revertStoryPoint();
			});
		},
		$handleActivateStoryPoint: function ApiStorytellingHandler$HandleActivateStoryPoint(command) {
			return this.$handleIndexedStoryPointCommand(command, 'api.ActivateStoryPoint', function(storyPointVm) {
				return storyPointVm.clickStoryPoint();
			});
		},
		$handleIndexedStoryPointCommand: function ApiStorytellingHandler$HandleIndexedStoryPointCommand(command, expectedCommandName, operationFunc) {
			$tab_ApiStorytellingHandler.$verifyCommand(command, expectedCommandName);
			var commandParameters = JSON.parse(command.get_parameters());
			var index = ss.cast(commandParameters['api.storyPointIndex'], ss.Int32);
			if (!ss.isValue(index) || isNaN(ss.unbox(index))) {
				throw new ss.Exception('Missing index parameter.');
			}
			var navVm = this.$getFlipboardNavigatorViewModel();
			if (ss.Nullable$1.lt(index, 0) || ss.Nullable$1.ge(index, ss.count(navVm.get_captions()))) {
				throw new ss.Exception('The index is out of bounds.');
			}
			var deferred = $.Deferred();
			var storyPointVm = ss.getItem(navVm.get_captions(), ss.unbox(index));
			operationFunc(storyPointVm).then(ss.mkdel(this, function(updatedStoryPointVm) {
				var storyPointPm = $tab__ApiSerializer.serializeStoryPoint(updatedStoryPointVm, this.$client);
				deferred.resolve(storyPointPm);
			}), function(error) {
				deferred.reject(error);
			});
			return deferred.promise();
		},
		$handleActivatePreviousOrNextStoryPoint: function ApiStorytellingHandler$HandleActivatePreviousOrNextStoryPoint(command, viewModelClickFunc) {
			$tab_ApiStorytellingHandler.$verifyCommand(command, ['api.ActivateNextStoryPoint', 'api.ActivatePreviousStoryPoint']);
			var navVm = this.$getFlipboardNavigatorViewModel();
			var deferred = $.Deferred();
			viewModelClickFunc(navVm).then(ss.mkdel(this, function(nextIndexToBeActive) {
				var captionVm = ss.getItem(navVm.get_captions(), nextIndexToBeActive);
				var storyPointPm = $tab__ApiSerializer.serializeStoryPoint(captionVm, this.$client);
				deferred.resolve(storyPointPm);
			}), function(error) {
				deferred.reject(error);
			});
			return deferred.promise();
		},
		$handleRemoteUpdateComplete: function ApiStorytellingHandler$HandleRemoteUpdateComplete() {
			var storyPm = $tab__ApiSerializer.serializeStory(this.$client);
			var storyPmJson = JSON.stringify(storyPm);
			this.$responder.sendEventNotification('api.StorytellingStateChangedEvent', null, storyPmJson);
		},
		$getFlipboardNavigatorViewModel: function ApiStorytellingHandler$GetFlipboardNavigatorViewModel() {
			var navVm = this.$client.get_flipboardNavigatorViewModel();
			if (ss.isNullOrUndefined(navVm)) {
				throw new ss.Exception('The active sheet is not a story.');
			}
			return navVm;
		},
		$handleStoryPointCommand: function ApiStorytellingHandler$HandleStoryPointCommand(command, handler) {
			try {
				handler(command).then(ss.mkdel(this, function(result) {
					var successResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', result);
					this.$responder.sendResponse(command, successResult);
				}), ss.mkdel(this, function(error) {
					var errorResult = $tab_$ApiServerResultBuilder.$buildResult('api.remotefailed', error);
					this.$responder.sendResponse(command, errorResult);
				}));
			}
			catch ($t1) {
				var e = ss.Exception.wrap($t1);
				var errorResult1 = $tab_$ApiServerResultBuilder.$buildResult('api.localfailed', e.get_message());
				this.$responder.sendResponse(command, errorResult1);
			}
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_ApiToolbarStateManager, $asm, {
		get_toolbarState: function ApiToolbarStateManager$get_ToolbarState() {
			return this.$1$ToolbarStateField;
		},
		set_toolbarState: function ApiToolbarStateManager$set_ToolbarState(value) {
			this.$1$ToolbarStateField = value;
		},
		dispose: function ApiToolbarStateManager$Dispose() {
			this.$disposables.dispose();
		},
		$sendUpdate: function ApiToolbarStateManager$SendUpdate() {
			var cmd = new tab._ApiCommand('api.ToolbarStateChangedEvent', tab._ApiCommand.generateNextCommandId(), null, null);
			var jsonResult = $tab_$ApiServerResultBuilder.$buildResult('api.success', this.get_toolbarState());
			this.$apiResponder.sendResponse(cmd, jsonResult);
			this.$apiResponder.sendEventNotification('api.ToolbarStateChangedEvent', null, JSON.stringify(this.get_toolbarState()));
		},
		$canShow: function ApiToolbarStateManager$CanShow(items, name) {
			var button = items[name];
			return ss.isValue(button) && $tab_ToolbarButtonViewModel.shouldShowButton(button, this.$toolbar);
		},
		$handleNewToolbar: function ApiToolbarStateManager$HandleNewToolbar() {
			if (ss.isNullOrUndefined(this.$toolbar.get_vizCommandItems()) || ss.isNullOrUndefined(this.$toolbar.get_nonVizCommandItems())) {
				return;
			}
			var buttons = {};
			$tab_ApiToolbarStateManager.$addButtonsToDictionary(buttons, this.$toolbar.get_vizCommandItems());
			$tab_ApiToolbarStateManager.$addButtonsToDictionary(buttons, this.$toolbar.get_nonVizCommandItems());
			var pm = $tab_ApiCrossDomainPresModelsFactory.newToolbarStatePM($tab_ApiToolbarStateManager.$isEnabled(buttons, $tab_ToolbarButtonViewModel.iconTypeUndo), $tab_ApiToolbarStateManager.$isEnabled(buttons, $tab_ToolbarButtonViewModel.iconTypeRedo), $tab_ApiToolbarStateManager.$isEnabled(buttons, $tab_ToolbarButtonViewModel.iconTypeRevert), !$tab_ApiToolbarStateManager.$isToggleEnabled(buttons, $tab_ToolbarButtonViewModel.iconTypeToggleDataUpdates, $tab_ToolbarButtonViewModel.pauseButton), $tab_ApiToolbarStateManager.$isEnabled(buttons, $tab_ToolbarButtonViewModel.iconTypeRefreshData), this.$canShow(buttons, $tab_ToolbarButtonViewModel.iconTypeCustomViews), tsConfig.is_metrics_enabled, this.$canShow(buttons, 'alert'), this.$canShow(buttons, $tab_ToolbarButtonViewModel.iconTypeSubscribe), this.$canShow(buttons, $tab_ToolbarButtonViewModel.iconTypeShare), this.$canShow(buttons, $tab_ToolbarButtonViewModel.iconTypeDownload));
			this.set_toolbarState(pm);
			this.$sendUpdate();
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_ApiUnderlyingDataHandler, $asm, {});
	ss.initClass($tab_ApiUnderlyingDataHandler, $asm, {});
	ss.initClass($tab_AppBannerViewModel, $asm, {
		shouldShowAppBanner: function AppBannerViewModel$ShouldShowAppBanner() {
			if (!tsConfig.is_mobile || tsConfig.is_mobile_app || !tsConfig.showAppBanner || tsConfig.isPublic || tsConfig.is_authoring || tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
				return false;
			}
			var cookieValue = tab.CookieHelper.getValueForCookie($tab_AppBannerViewModel.hideAppBannerCookie);
			var bannerPreviouslyDismissed = tab.MiscUtil.toBoolean(cookieValue, false);
			return !bannerPreviouslyDismissed;
		},
		createHideAppBannerCookie: function AppBannerViewModel$CreateHideAppBannerCookie() {
			var date = new Date();
			date.setTime(date.getTime() + tab.DateUtil.oneWeek);
			tab.CookieHelper.setCookie($tab_AppBannerViewModel.hideAppBannerCookie, true.toString(), '/', date);
		},
		redirectToApp: function AppBannerViewModel$RedirectToApp() {
			var windowLocation = tab.WindowHelper.getLocation(window.self);
			var deepLink = ss.replaceAllString(windowLocation.href, windowLocation.protocol, 'tableau:');
			tab.WindowHelper.locationReplace(window.self, deepLink);
			window.setTimeout(ss.mkdel(this, function() {
				this.$openAppStore();
			}), $tab_AppBannerViewModel.redirectToAppStoreDelayInMS);
		},
		$openAppStore: function AppBannerViewModel$OpenAppStore() {
			if (BrowserSupport.BrowserSupport.IsAndroid()) {
				tab.WindowHelper.locationReplace(window.self, $tab_AppBannerViewModel.playStoreUrl);
			}
			else if (BrowserSupport.BrowserSupport.IsIos()) {
				if (window.confirm(tab.Strings.RedirectToApp)) {
					tab.WindowHelper.locationReplace(window.self, $tab_AppBannerViewModel.appStoreUrl);
				}
			}
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_Application, $asm, {
		add_clientChanged: function Application$add_ClientChanged(value) {
			this.$1$ClientChangedField = ss.delegateCombine(this.$1$ClientChangedField, value);
		},
		remove_clientChanged: function Application$remove_ClientChanged(value) {
			this.$1$ClientChangedField = ss.delegateRemove(this.$1$ClientChangedField, value);
		},
		get_tabHeight: function Application$get_TabHeight() {
			var tabDom = $(this.get_tabbedNavigation().get_widgetDomNode());
			return tabDom.outerHeight(true);
		},
		get_tabbedNavigation: function Application$get_TabbedNavigation() {
			return this.$1$TabbedNavigationField;
		},
		set_tabbedNavigation: function Application$set_TabbedNavigation(value) {
			this.$1$TabbedNavigationField = value;
		},
		get_rightAreaDrawerViewModel: function Application$get_RightAreaDrawerViewModel() {
			return this.$1$RightAreaDrawerViewModelField;
		},
		set_rightAreaDrawerViewModel: function Application$set_RightAreaDrawerViewModel(value) {
			this.$1$RightAreaDrawerViewModelField = value;
		},
		get_client: function Application$get_Client() {
			return this.$1$ClientField;
		},
		set_client: function Application$set_Client(value) {
			this.$1$ClientField = value;
		},
		get_apiEventHandler: function Application$get_ApiEventHandler() {
			return this.$1$ApiEventHandlerField;
		},
		set_apiEventHandler: function Application$set_ApiEventHandler(value) {
			this.$1$ApiEventHandlerField = value;
		},
		initRightAreaDrawer: function Application$InitRightAreaDrawer() {
			if (ss.isValue(this.get_rightAreaDrawerViewModel())) {
				return;
			}
			this.set_rightAreaDrawerViewModel(new $tab_RightAreaDrawerViewModel(this.$appModel.get_rightAreaDrawer()));
			this.$initRightAreaDrawerInternal(this.get_rightAreaDrawerViewModel());
		},
		processUrlParamsToShowRightAreaDrawer: function Application$ProcessUrlParamsToShowRightAreaDrawer() {
			if (ss.isNullOrUndefined(this.get_rightAreaDrawerViewModel())) {
				return;
			}
			var vizUriModel = tab.VizUriModel.createForCurrentWindowLocation(null);
			if (tsConfig.allow_commenting && vizUriModel.get_showComments() && tsConfig.commentingEnabled) {
				this.get_rightAreaDrawerViewModel().toggleCommenting();
			}
			else if (tab.FeatureFlags.isEnabled('AlertSidePanel') && tsConfig.allow_data_alert && (!ss.isNullOrEmptyString(vizUriModel.get_showDataAlertId()) || vizUriModel.get_showDataAlerts())) {
				this.get_rightAreaDrawerViewModel().toggleDataAlertsPanel();
			}
		},
		$initRightAreaDrawerInternal: function Application$InitRightAreaDrawerInternal(rightAreaDrawer) {
			var onDrawerToggle = function() {
				$tab_Application.get_instance().get_client().doResize();
			};
			rightAreaDrawer.add_open(onDrawerToggle);
			rightAreaDrawer.add_close(onDrawerToggle);
			this.$disposables.add$1(new tab.CallOnDispose(function() {
				rightAreaDrawer.remove_open(onDrawerToggle);
				rightAreaDrawer.remove_close(onDrawerToggle);
				tab.MiscUtil.dispose$1(rightAreaDrawer);
			}));
			this.$drawerView = tab.ObjectRegistry.newView($tab_RightAreaDrawerView).call(null, [rightAreaDrawer]);
			this.$appendToClientDom(this.$drawerView);
		},
		initTabbedNavigation: function Application$InitTabbedNavigation() {
			if (!tab.ApplicationModel.get_instance().get_showTabs()) {
				return;
			}
			var tabContainer = $('.tabbedNavigationWrapper');
			if (tabContainer.length > 0) {
				if (ss.isValue(this.get_tabbedNavigation())) {
					this.get_tabbedNavigation().destroyShim();
				}
				tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(loadedModule) {
					var placeHolder = $("<div dojoAttachPoint='tabbed_navigation' class='tabbedNavigation'></div>").get(0);
					placeHolder.id = (tsConfig.features['IframeSizedToWindow'] ? 'tabs' : 'tabbedNavigation');
					tabContainer.append(placeHolder);
					this.set_tabbedNavigation(loadedModule.createTabbedNavigation({}, placeHolder));
					this.get_tabbedNavigation().startupShim();
				}));
			}
		},
		dispose: function Application$Dispose() {
			if (!ss.isValue($tab_Application.$instance)) {
				return;
			}
			if (ss.isValue(this.get_apiEventHandler())) {
				this.get_apiEventHandler().dispose();
				this.set_apiEventHandler(null);
			}
			this.$destroyClient();
			this.$disposables.dispose();
			this.$removeApiEventHandler();
			this.$modifierKeyState.dispose();
			if (ss.isValue(this.get_tabbedNavigation())) {
				this.get_tabbedNavigation().destroyShim();
				this.set_tabbedNavigation(null);
			}
			$tab_Application.$instance = null;
		},
		$subscribeToApplication: function Application$SubscribeToApplication() {
			this.$appModel = tab.ApplicationModel.get_instance();
			this.$appModel.add_newWorkbook(ss.mkdel(this, this.$onWorkbookModelChange));
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$appModel.remove_newWorkbook(ss.mkdel(this, this.$onWorkbookModelChange));
				this.$appModel = null;
			})));
			return this;
		},
		$subscribeToWorkbook: function Application$SubscribeToWorkbook() {
			this.$onWorkbookModelChange(this.$appModel.get_workbook());
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$onWorkbookModelChange(null);
			})));
			return this;
		},
		$onWorkbookModelChange: function Application$OnWorkbookModelChange(newWorkbook) {
			if (ss.isValue(newWorkbook)) {
				newWorkbook.add_dashboardDeleted(ss.mkdel(this, this.$workbookOnDashboardDeleted));
				newWorkbook.add_uiModeChanged(ss.mkdel(this, this.$handleWorkbookUIModeChange));
			}
			if (ss.isValue(this.$workbookModel)) {
				this.$workbookModel.remove_dashboardDeleted(ss.mkdel(this, this.$workbookOnDashboardDeleted));
				this.$workbookModel.remove_uiModeChanged(ss.mkdel(this, this.$handleWorkbookUIModeChange));
			}
			this.$workbookModel = newWorkbook;
		},
		$appendToClientDom: function Application$AppendToClientDom(widget) {
			if (ss.isValue(widget)) {
				widget.element.insertAfter(this.get_client().get_domNode());
			}
		},
		$workbookOnDashboardDeleted: function Application$WorkbookOnDashboardDeleted(dash) {
			this.$destroyClient();
		},
		$destroyClient: function Application$DestroyClient() {
			if (ss.isNullOrUndefined(this.get_client())) {
				return;
			}
			this.get_client().destroyRecursive();
			this.set_client(null);
			this.$storytellingClient = null;
		},
		$doTabSelect: function Application$DoTabSelect(msg) {
			tab.SheetClientCommands.switchSheets(msg);
		},
		$removeApiEventHandler: function Application$RemoveApiEventHandler() {
			if (!$tab_Application.get_isHostedInApiContext()) {
				return;
			}
			if (ss.isValue(this.get_apiEventHandler())) {
				var removeEventListener = window.removeEventListener;
				if (ss.isValue(removeEventListener)) {
					removeEventListener('message', ss.mkdel(this, this.$handleApiMessage), true);
				}
				else {
					var handler = ss.mkdel(this, this.$handleApiMessage);
					window.self.detachEvent('onmessage', handler);
				}
				this.set_apiEventHandler(null);
			}
			tab.Log.get(this).debug('ApiEventHandler removed.', []);
		},
		$instantiateApiEventHandler: function Application$InstantiateApiEventHandler(clientInstance, storytelingClientInstance) {
			if (!$tab_Application.get_isHostedInApiContext()) {
				return;
			}
			this.set_apiEventHandler(new $tab_ApiEventHandler(clientInstance, storytelingClientInstance, tabBootstrap.ViewerBootstrap.get_instance().apiResponder));
			var addEventListener = window.addEventListener;
			if (ss.isValue(addEventListener)) {
				addEventListener('message', ss.mkdel(this, this.$handleApiMessage), true);
			}
			else {
				var handler = ss.mkdel(this, this.$handleApiMessage);
				window.self.attachEvent('onmessage', handler);
			}
		},
		$addUnloadHandler: function Application$AddUnloadHandler() {
			if (!$tab_Application.get_isHostedInApiContext()) {
				return;
			}
			if ('addEventListener' in window.self) {
				window.addEventListener('unload', ss.mkdel(this, this.$onUnload), true);
			}
			else {
				window.self.attachEvent('onunload', ss.mkdel(this, this.$onUnload));
			}
		},
		$onUnload: function Application$OnUnload(e) {
			this.$removeApiEventHandler();
		},
		$handleClientFullyLoaded: function Application$HandleClientFullyLoaded() {
			this.$updateApiClients();
			this.$initMetrics();
			this.processUrlParamsToShowRightAreaDrawer();
			tab.StartupUtils.remove_clientFullyLoaded(ss.mkdel(this, this.$handleClientFullyLoaded));
		},
		$handleSwitchingViz: function Application$HandleSwitchingViz() {
			$tab_Application.$instance.dispose();
			if (ss.isValue($tab_Application.$commonDialogProvider)) {
				$tab_Application.$commonDialogProvider.dispose();
			}
			$tab_Application.$started = false;
		},
		$setupServerFonts: function Application$SetupServerFonts() {
			var handleIncomingFont = function(fontProperties) {
				var downloadableFonts = [];
				for (var $t1 = 0; $t1 < fontProperties.length; $t1++) {
					var prop = fontProperties[$t1];
					downloadableFonts.push(tab.DownloadableFontPropertiesExtensions.toDownloadableFontProperties(prop, ''));
				}
				$tab_ServerFontLoader.get_instance().notifyDownloadableFont(downloadableFonts);
			};
			tab.FontNotificationUtil.add_fontPropertiesIdentified(handleIncomingFont);
			tab.WorldUpdateInterceptor.get().add_onCommandResponse(function(args) {
				var switchedToClientRendering = !tab.ApplicationModel.get_instance().get_isLocalRenderMode() && args.get_applicationPresModel().renderMode === 'render-mode-client';
				var creatingNewNLPView = ss.referenceEquals(args.get_worldUpdateCommand().commandName, { ns: 'tabdoc', cmd: 'execute-expression' }.cmd);
				if (ss.referenceEquals(args.get_worldUpdateCommand().commandName, { ns: 'tabdoc', cmd: 'set-active-story-point' }.cmd) || ss.referenceEquals(args.get_worldUpdateCommand().commandName, { ns: 'tabsrv', cmd: 'render-tooltip-server' }.cmd) || args.get_sheetChanged() || args.get_rebuildTheWorld() || switchedToClientRendering || creatingNewNLPView) {
					$tab_Application.$initializeServerFontLoader();
					if (switchedToClientRendering || creatingNewNLPView) {
						var afterModelsUpdated = null;
						afterModelsUpdated = function() {
							tab.CommandController.get().remove_modelsUpdated(afterModelsUpdated);
							$tab_Application.handleAllFontsFound();
						};
						tab.CommandController.get().add_modelsUpdated(afterModelsUpdated);
					}
				}
			});
			tab.FontNotificationUtil.add_allFontsFound($tab_Application.handleAllFontsFound);
			if (tab.ProgressiveLoader.get_progressiveLoadEnabled()) {
				var progressiveLoadHandler = null;
				progressiveLoadHandler = function() {
					tab.WorldUpdateInterceptor.get().remove_onProgressiveLoadComplete(progressiveLoadHandler);
					$tab_Application.handleAllFontsFound();
				};
				tab.WorldUpdateInterceptor.get().add_onProgressiveLoadComplete(progressiveLoadHandler);
			}
			var modelsUpdatedHandler = function() {
				if (!tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapCompleted()) {
					$tab_ServerFontLoader.get_instance().downloadFonts();
				}
			};
			tab.StartupUtils.callAfterModelsInitialized(function() {
				tab.CommandController.get().add_modelsUpdated(modelsUpdatedHandler);
			});
			tab.StartupUtils.callOnceAfterInitialBootstrap(function() {
				if (!tab.ProgressiveLoader.get_progressiveLoadEnabled()) {
					$tab_Application.handleAllFontsFound();
				}
				tab.CommandController.get().remove_modelsUpdated(modelsUpdatedHandler);
			});
			$tab_Application.$initializeServerFontLoader();
		},
		$initMetrics: function Application$InitMetrics() {
			tabBootstrap.MetricsController.initSessionInfo();
			var clientMetricLoggers = [];
			if (tab.MetricsLogger.isLoggerEnabled()) {
				clientMetricLoggers.push(new tab.MetricsLogger());
			}
			if (tab.OnlineAnalyticsMetricsLogger.isLoggerSupported()) {
				clientMetricLoggers.push(new tab.OnlineAnalyticsMetricsLogger());
			}
			if (tab.NewRelicMetricsLogger.isLoggerSupported()) {
				clientMetricLoggers.push(new tab.NewRelicMetricsLogger());
			}
			tabBootstrap.MetricsController.setEventLoggers(clientMetricLoggers);
		},
		$handleApiMessage: function Application$HandleApiMessage(e) {
			if (typeof(ss.getType('ss')) === 'undefined') {
				return;
			}
			if (ss.isValue(this.get_apiEventHandler())) {
				this.get_apiEventHandler().handleEvent(e);
			}
		},
		$handleNewLayout: function Application$HandleNewLayout(presModel) {
			tab.Log.get(this).debug('Changing tabs: %o', [presModel]);
			this.$updateTsConfig(presModel);
			var layoutSession = tab.CommandController.get().legacySession;
			this.$destroyClient();
			tab.ApplicationModel.get_instance().get_shapeManager().clearShapeStampCache();
			tabBootstrap.MetricsController.initSessionInfo();
			var appVm = $tab_Application.$createApplicationViewModel(true, layoutSession);
			this.set_client(appVm);
			this.$storytellingClient = appVm;
			this.get_client().startup();
			if (!ss.staticEquals(this.$1$ClientChangedField, null)) {
				this.$1$ClientChangedField();
			}
			this.$updateApiClients();
			if (!tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
				this.$replaceUrl(presModel);
			}
		},
		$handleTabChangeComplete: function Application$HandleTabChangeComplete(oldNewSheetNames) {
			this.$updateApiClients();
			$tab_Application.handleAllFontsFound();
		},
		$updateApiClients: function Application$UpdateApiClients() {
			if (ss.isValue(this.get_apiEventHandler())) {
				this.get_apiEventHandler().updateClients(this.get_client(), this.$storytellingClient);
			}
		},
		$replaceUrl: function Application$ReplaceUrl(presModel) {
			if (tab.NaturalLanguageUtil.isNlpView()) {
				return;
			}
			if (tsConfig.is_authoring) {
				this.$replaceWindowLocationForTabChangeWhileAuthoring(presModel.repositoryUrl, presModel.sheetName);
			}
			else {
				this.replaceWindowLocationForTabChangeWhileViewing(presModel.repositoryUrl);
			}
		},
		$replaceWindowLocationForTabChangeWhileAuthoring: function Application$ReplaceWindowLocationForTabChangeWhileAuthoring(newRepoUrl, authoringSheetName) {
			var vizUriModel = tab.VizUriModel.createForCurrentWindowLocation(null);
			if (vizUriModel.get_isAuthorNewWorkbookUri()) {
				return;
			}
			if (this.$isValidRepoUrl(newRepoUrl)) {
				var newVizUriModel = tab.VizUriModel.createForAuthoringPublishedSheet(newRepoUrl);
				newVizUriModel.replaceState(null);
			}
			else if (tab.MiscUtil.isNullOrEmpty$3(newRepoUrl)) {
				var newVizUriModel1 = tab.VizUriModel.createForAuthoringUnpublishedSheet(tsConfig.origin_repository_url, authoringSheetName);
				newVizUriModel1.replaceState(null);
			}
		},
		replaceWindowLocationForTabChangeWhileViewing: function Application$ReplaceWindowLocationForTabChangeWhileViewing(newRepoUrl) {
			if (this.$isValidRepoUrl(newRepoUrl)) {
				var vizUriModel = tab.VizUriModel.createForViewingSheet(newRepoUrl);
				vizUriModel.replaceState(null);
			}
			else {
				tab.Logger.lazyGetLogger(tab.VizUriModel).error("ReplaceWindowLocationForTabChangeWhileViewing received invalid newRepoUrl argument: '%s'", [newRepoUrl]);
			}
		},
		$isValidRepoUrl: function Application$IsValidRepoUrl(repoUrl) {
			return !tab.MiscUtil.isNullOrEmpty$3(repoUrl) && !ss.startsWithString(repoUrl, 'ds:');
		},
		$updateTsConfig: function Application$UpdateTsConfig(presModel) {
			tsConfig.current_sheet_name = presModel.sheetName;
			tsConfig.current_sheet_type = presModel.sheetType;
			tsConfig.current_view_id = presModel.viewId;
			if (presModel.isCurrentCustViewIdValid) {
				tsConfig.current_custom_view_id = presModel.currentCustomViewId;
			}
			else {
				tsConfig.current_custom_view_id = null;
			}
			tsConfig.layoutid = presModel.layoutId;
			tsConfig.embeddedTitle = presModel.embeddedTitle;
			tsConfig.blogURI = presModel.blogLink;
			tsConfig.requestURI = presModel.shareLink;
			if (!ss.isNullOrEmptyString(tsConfig.downloadURI)) {
				tsConfig.downloadURI = presModel.downloadLink;
			}
			else {
				tsConfig.downloadURI = '';
			}
			tsConfig.staticImage = presModel.staticImage;
			tsConfig.guid = presModel.guid;
			var repoUrl = presModel.repositoryUrl;
			tsConfig.repositoryUrl = (this.$isValidRepoUrl(repoUrl) ? repoUrl : '');
		},
		$handleWorkbookUIModeChange: function Application$HandleWorkbookUIModeChange() {
			if (tab.ApplicationModel.get_instance().get_workbook().get_uiMode() === 'data-tab') {
				EventUtils.GlobalUIEvents.FireDismissTemporaryElements();
			}
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_ApplicationSizeCalculator, $asm, {});
	ss.initClass($tab_ApplicationTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initInterface($tab_IDashboardViewport, $asm, { add_scrolled: null, remove_scrolled: null, get_visibleRect: null, appendToDom: null, convertPointFromPageToDashboardCoords: null });
	ss.initClass($tab_ApplicationView, $asm, {
		add_scrolled: function ApplicationView$add_Scrolled(value) {
			this.get_dom().domNode[0].addEventListener('scroll', value);
		},
		remove_scrolled: function ApplicationView$remove_Scrolled(value) {
			this.get_dom().domNode[0].removeEventListener('scroll', value);
		},
		get_dom: function ApplicationView$get_Dom() {
			return ss.cast(this.get_template(), $tab_ApplicationTemplate);
		},
		get_containerNode: function ApplicationView$get_ContainerNode() {
			return this.$workbookView.get_containerNode();
		},
		get_toolbarContainer: function ApplicationView$get_ToolbarContainer() {
			return this.get_dom().toolbarContainer;
		},
		get_$applicationViewModel: function ApplicationView$get_ApplicationViewModel() {
			return this.get_viewModel();
		},
		get_visibleRect: function ApplicationView$get_VisibleRect() {
			return { l: this.get_dom().domNode[0].scrollLeft, t: this.get_dom().domNode[0].scrollTop, w: this.get_dom().domNode[0].clientWidth, h: this.get_dom().domNode[0].clientHeight };
		},
		onAddedToDom: function ApplicationView$OnAddedToDom() {
			if (!this.addedToDom) {
				this.$updateToolbarPosition();
				this.$addWorkbook();
				this.$addToolbar();
				this.$addAppBanner();
				this.$addToolbarDialogHost();
				spiff.FocusManager.initialize();
				if (tab.FeatureFlags.isEnabled('IframeSizedToWindow')) {
					$(document.body).addClass('ff-IFrameSizedToWindow');
				}
				if (tab.GestureModelSettings.get_newModelEnabled()) {
					$(document.body).addClass('ff-TouchSmoothTooltips');
				}
			}
			spiff.Widget.prototype.onAddedToDom.call(this);
		},
		$updateToolbarPosition: function ApplicationView$UpdateToolbarPosition() {
			if ($tab_ToolbarViewModel.get_toolbarIsBottom()) {
				this.get_toolbarContainer().detach().appendTo($($tab_ApplicationView.vizContainerSelector));
			}
		},
		resizeToolbar: function ApplicationView$ResizeToolbar() {
			this.$toolbarView.forceResizeToolbar();
		},
		resizeAppBanner: function ApplicationView$ResizeAppBanner(bounds) {
			if (ss.isValue(this.$appBannerView)) {
				this.$appBannerView.get_rootElement().width(bounds.w);
			}
		},
		addDevicePreviewSettings: function ApplicationView$AddDevicePreviewSettings() {
			var devicePreviewVm = this.get_$applicationViewModel().get_devicePreviewViewModel();
			if (devicePreviewVm.get_shouldCutInteraction()) {
				this.$glassPane = new spiff.Glass(null, false);
				this.$glassPane.show();
			}
			if (devicePreviewVm.get_shouldScaleDownVizContainer()) {
				var cssDictionary = devicePreviewVm.get_getDevicePreviewVizContainerCss();
				$($tab_ApplicationView.vizContainerSelector).css(cssDictionary);
			}
		},
		$addAppBanner: function ApplicationView$AddAppBanner() {
			if (this.get_$applicationViewModel().get_appBannerViewModel().shouldShowAppBanner()) {
				this.$appBannerView = tab.ObjectRegistry.newView($tab_IAppBannerView).call(null, [this.get_$applicationViewModel().get_appBannerViewModel()]);
				this.$appBannerView.get_rootElement().insertBefore($tab_ApplicationViewModel.selectCenteringContainer()).width($tab_ApplicationSizeCalculator.calculateClientBounds().w);
			}
		},
		$addWorkbook: function ApplicationView$AddWorkbook() {
			this.$workbookView = tab.ObjectRegistry.newView($tab_WorkbookView).call(null, [this.get_$applicationViewModel().get_workbookViewModel()]);
			this.$workbookView.addToDom(this.get_dom().domNode);
		},
		$addToolbar: function ApplicationView$AddToolbar() {
			if (ss.isNullOrUndefined(this.get_$applicationViewModel().get_toolbarViewModel()) || !tsConfig.toolbarContainerVis) {
				return;
			}
			{
				var mc = tabBootstrap.MetricsController.createContext('TBRADD'.toString(), 64, null);
				try {
					this.$toolbarView = tab.ObjectRegistry.newView($tab_ToolbarView).call(null, [this.get_$applicationViewModel().get_toolbarViewModel()]);
					this.$toolbarView.addToDom(this.get_toolbarContainer());
					this.get_toolbarContainer().height(tabBootstrap.VizLayoutConstants.get_vizToolbarHeight());
				}
				finally {
					if (ss.isValue(mc)) {
						mc.dispose();
					}
				}
			}
		},
		$addToolbarDialogHost: function ApplicationView$AddToolbarDialogHost() {
			if (ss.isNullOrUndefined(this.get_$applicationViewModel().get_toolbarViewModel()) || ss.isNullOrUndefined(this.get_$applicationViewModel().get_toolbarViewModel().get_dialogHostViewModel())) {
				return;
			}
			var viewModel = this.get_$applicationViewModel().get_toolbarViewModel().get_dialogHostViewModel();
			var dialogHostView = tab.ObjectRegistry.newView(ss.makeGenericType(spiff.ReactHostView$3, [$tab_DialogHostViewModel, $tab_DialogHostComponent, Object])).call(null, [viewModel]);
			dialogHostView.addToDom(this.get_toolbarContainer());
			dialogHostView.addClass('tab-toolbar-dialoghost');
		},
		appendToDom: function ApplicationView$AppendToDom(view) {
			view.addToDom(this.get_dom().domNode);
		},
		convertPointFromPageToDashboardCoords: function ApplicationView$ConvertPointFromPageToDashboardCoords(point) {
			var dashboardPosInPageCoords = tab.DomUtil.toPoint(tab.DomUtil.getPageOffset$1(this.get_dom().domNode));
			var pointInDashboardCoordsWithoutScroll = tab.PointUtil.subtract(point, dashboardPosInPageCoords);
			var dashboardScrollOffset = { x: this.get_dom().domNode[0].scrollLeft, y: this.get_dom().domNode[0].scrollTop };
			var pointInDashboardCoords = tab.PointUtil.add(pointInDashboardCoordsWithoutScroll, dashboardScrollOffset);
			return pointInDashboardCoords;
		},
		dispose: function ApplicationView$Dispose() {
			if (ss.isValue(this.$glassPane)) {
				this.$glassPane.dispose();
			}
			ss.makeGenericType(spiff.BaseView$1, [$tab_ApplicationViewModelReal]).prototype.dispose.call(this);
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_ApplicationViewModelReal]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_ApplicationViewModelReal]), $tab_IDashboardViewport]);
	ss.initInterface($tab_IClient, $asm, { get_domNode: null, get_isDashboard: null, get_vizSize: null, get_session: null, get_viewControllers: null, get_applicationPresModel: null, get_toolbarContainer: null, get_toolbarDisplayed: null, set_toolbarDisplayed: null, get_toolbarCommands: null, get_customViewsViewModel: null, get_deviceLayoutViewModel: null, get_dashboardViewport: null, destroyRecursive: null, startup: null, doResize: null });
	ss.initInterface($tab_IApiStorytellingClient, $asm, { get_flipboardNavigatorViewModel: null, get_containedSheetName: null, get_containedSheetType: null, get_containedSheetZoneId: null, get_containedDashboardZones: null, get_hasContainedSheet: null });
	ss.initClass($tab_ApplicationViewModel, $asm, {
		get_flipboardNavigatorViewModel: function ApplicationViewModel$get_FlipboardNavigatorViewModel() {
			if (ss.isValue(this.$applicationViewModelReal) && ss.isValue(this.$applicationViewModelReal.get_dashboardViewModel())) {
				return this.$applicationViewModelReal.get_dashboardViewModel().get_flipboardNavigatorViewModel();
			}
			return null;
		},
		get_hasContainedSheet: function ApplicationViewModel$get_HasContainedSheet() {
			return ss.isValue(this.get_containedSheetZoneId());
		},
		get_containedSheetName: function ApplicationViewModel$get_ContainedSheetName() {
			var flipboardVm = this.get_$flipboardViewModel();
			if (ss.isNullOrUndefined(flipboardVm) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel()) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel().dashboardModel)) {
				return null;
			}
			return flipboardVm.get_dashboardViewModel().dashboardModel.get_sheetName();
		},
		get_containedSheetZoneId: function ApplicationViewModel$get_ContainedSheetZoneId() {
			var flipboardVm = this.get_$flipboardViewModel();
			if (ss.isNullOrUndefined(flipboardVm) || flipboardVm.get_flipboardModel() === null) {
				return null;
			}
			return flipboardVm.get_flipboardModel().get_zoneId();
		},
		get_containedSheetType: function ApplicationViewModel$get_ContainedSheetType() {
			var flipboardVm = this.get_$flipboardViewModel();
			if (ss.isNullOrUndefined(flipboardVm) || ss.isNullOrUndefined(flipboardVm.get_flipboardModel()) || ss.isNullOrUndefined(flipboardVm.get_flipboardModel().get_storyPointModel())) {
				return 'worksheet';
			}
			return (flipboardVm.get_flipboardModel().get_storyPointModel().get_isBackingSheetDashboard() ? 'dashboard' : 'worksheet');
		},
		get_containedDashboardZones: function ApplicationViewModel$get_ContainedDashboardZones() {
			var flipboardVm = this.get_$flipboardViewModel();
			if (ss.isNullOrUndefined(flipboardVm) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel()) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel().dashboardModel) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel().dashboardModel.pm)) {
				return null;
			}
			return flipboardVm.get_dashboardViewModel().dashboardModel.pm.zones;
		},
		get_autoUpdate: function ApplicationViewModel$get_AutoUpdate() {
			return tab.ApplicationModel.get_instance().get_autoUpdate();
		},
		set_autoUpdate: function ApplicationViewModel$set_AutoUpdate(value) {
			tab.ApplicationModel.get_instance().set_autoUpdate(value);
		},
		get_isDashboard: function ApplicationViewModel$get_IsDashboard() {
			return this.get_$dashboardViewModel().get_isDashboard();
		},
		get_$shouldShowTabs: function ApplicationViewModel$get_ShouldShowTabs() {
			return tabBootstrap.VizLayoutConstants.get_shouldShowTabs();
		},
		get_vizSize: function ApplicationViewModel$get_VizSize() {
			return tab.ApplicationModel.get_instance().get_workbook().get_outerDashboardSize();
		},
		get_session: function ApplicationViewModel$get_Session() {
			return this.session;
		},
		get_applicationPresModel: function ApplicationViewModel$get_ApplicationPresModel() {
			return tab.ApplicationModel.get_instance().get_appPresModel();
		},
		get_viewControllers: function ApplicationViewModel$get_ViewControllers() {
			var dashboardVM = this.get_$contentDashboardViewModel();
			if (ss.isValue(dashboardVM)) {
				return dashboardVM.viewControllers;
			}
			return [];
		},
		get_toolbarDisplayed: function ApplicationViewModel$get_ToolbarDisplayed() {
			return tabBootstrap.ViewerBootstrap.get_instance().toolbarDisplayed;
		},
		set_toolbarDisplayed: function ApplicationViewModel$set_ToolbarDisplayed(value) {
			tabBootstrap.ViewerBootstrap.get_instance().toolbarDisplayed = value;
			if (ss.isValue(this.get_toolbarContainer())) {
				this.get_toolbarContainer().toggle(value);
			}
		},
		get_invalid: function ApplicationViewModel$get_Invalid() {
			return tab.ApplicationModel.get_instance().get_invalid();
		},
		set_invalid: function ApplicationViewModel$set_Invalid(value) {
			tab.ApplicationModel.get_instance().set_invalid(value);
		},
		get_skipInit: function ApplicationViewModel$get_SkipInit() {
			return this.skipInit;
		},
		get_toolbarCommands: function ApplicationViewModel$get_ToolbarCommands() {
			return this.$toolbarCommands;
		},
		get_customViewsViewModel: function ApplicationViewModel$get_CustomViewsViewModel() {
			if (ss.isValue(this.get_toolbarViewModel())) {
				return this.get_toolbarViewModel().get_customViewsViewModel();
			}
			else {
				return null;
			}
		},
		get_toolbarViewModel: function ApplicationViewModel$get_ToolbarViewModel() {
			if (ss.isValue(this.$applicationViewModelReal)) {
				return this.$applicationViewModelReal.get_toolbarViewModel();
			}
			else {
				return null;
			}
		},
		get_deviceLayoutViewModel: function ApplicationViewModel$get_DeviceLayoutViewModel() {
			if (ss.isValue(this.$applicationViewModelReal)) {
				return this.$applicationViewModelReal.get_deviceLayoutViewModel();
			}
			else {
				return null;
			}
		},
		get_$log: function ApplicationViewModel$get_Log() {
			return tab.Logger.getLoggerWithName(ss.getTypeName($tab_ApplicationViewModel) + tsConfig.layoutid);
		},
		get_$flipboardViewModel: function ApplicationViewModel$get_FlipboardViewModel() {
			if (ss.isValue(this.$applicationViewModelReal) && ss.isValue(this.$applicationViewModelReal.get_dashboardViewModel())) {
				return this.$applicationViewModelReal.get_dashboardViewModel().get_flipboardViewModel();
			}
			return null;
		},
		get_workbookViewModel: function ApplicationViewModel$get_WorkbookViewModel() {
			return (ss.isValue(this.$applicationViewModelReal) ? this.$applicationViewModelReal.get_workbookViewModel() : null);
		},
		get_$dashboardViewModel: function ApplicationViewModel$get_DashboardViewModel() {
			if (ss.isValue(this.$applicationViewModelReal)) {
				return this.$applicationViewModelReal.get_dashboardViewModel();
			}
			return null;
		},
		get_$contentDashboardViewModel: function ApplicationViewModel$get_ContentDashboardViewModel() {
			if (ss.isValue(this.$applicationViewModelReal)) {
				return this.$applicationViewModelReal.get_contentDashboardViewModel();
			}
			return null;
		},
		get_$devicePreviewViewModel: function ApplicationViewModel$get_DevicePreviewViewModel() {
			return (ss.isValue(this.$applicationViewModelReal) ? this.$applicationViewModelReal.get_devicePreviewViewModel() : null);
		},
		get_domNode: function ApplicationViewModel$get_DomNode() {
			return this.$applicationView.get_dom().domNode;
		},
		get_toolbarContainer: function ApplicationViewModel$get_ToolbarContainer() {
			return this.$applicationView.get_toolbarContainer();
		},
		get_vizClientContainerSize: function ApplicationViewModel$get_VizClientContainerSize() {
			var vizClientContainerElement = document.getElementById('viz-client-container');
			return { w: vizClientContainerElement.clientWidth, h: vizClientContainerElement.clientHeight };
		},
		get_dashboardViewport: function ApplicationViewModel$get_DashboardViewport() {
			return this.$applicationView;
		},
		startup: function ApplicationViewModel$Startup() {
			this.$applicationViewModelReal = new $tab_ApplicationViewModelReal(tab.ApplicationModel.get_instance());
			this.$applicationView = tab.ObjectRegistry.newView($tab_ApplicationView).call(null, [this.$applicationViewModelReal]);
			this.$applicationViewModelReal.add_applicationUpdate(ss.mkdel(this, this.$onUpdateLayout));
			this._connections.push(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$applicationViewModelReal.remove_applicationUpdate(ss.mkdel(this, this.$onUpdateLayout));
			})));
			this.setupDomAndEvents();
			if (this.$applicationViewModelReal.get_shouldShowRightAreaDrawer()) {
				$tab_Application.get_instance().initRightAreaDrawer();
			}
			this.resize(false);
		},
		destroyRecursive: function ApplicationViewModel$DestroyRecursive() {
			this.get_$log().debug('DestroyRecursive', []);
			this.destroy();
		},
		destroy: function ApplicationViewModel$Destroy() {
			this.get_$log().debug('Destroy', []);
			this.$layoutTimeout = tab.MiscUtil.clearTimeout(this.$layoutTimeout);
			for (var $t1 = 0; $t1 < this._connections.length; $t1++) {
				var disposable = this._connections[$t1];
				disposable.dispose();
			}
			ss.clear(this._connections);
			if (ss.isValue(this.$applicationViewModelReal)) {
				this.$applicationViewModelReal.dispose();
				this.$applicationViewModelReal = null;
			}
			$('body').off(this.createNamespacedEventName('mouseenter')).off(this.createNamespacedEventName('mouseleave'));
			this.$applicationView = tab.MiscUtil.dispose$1(this.$applicationView);
			this.dispose();
		},
		doResize: function ApplicationViewModel$DoResize() {
			if (!tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapCompleted()) {
				this.$timesResizedDuringBootstrap++;
			}
			this.$scheduleLayout(!this.$doneInitialLayout);
		},
		resize: function ApplicationViewModel$Resize(forceUpdate) {
			if (!forceUpdate && ss.isValue(this.$lastReferenceSize)) {
				var currentPortSizeReferenceDimensions = this.$getCurrentPortSizeReferenceDimensions();
				if (currentPortSizeReferenceDimensions.w === this.$lastReferenceSize.w && currentPortSizeReferenceDimensions.h === this.$lastReferenceSize.h) {
					this.$hasTriggeredResize = false;
					return;
				}
				if (this.$hasTriggeredResize) {
					this.$lastReferenceSize = currentPortSizeReferenceDimensions;
					this.$hasTriggeredResize = false;
					return;
				}
				this.$hasTriggeredResize = true;
			}
			else {
				this.$hasTriggeredResize = false;
			}
			this.doResize();
		},
		$hookupInvalidationHandlers: function ApplicationViewModel$HookupInvalidationHandlers() {
			tab.CommandController.get().resetInvalidationHandlers();
			tab.CommandController.get().add_onUrlActionsResponse(tab.ActionUtils.launchActionUrls);
			this._connections.push(new tab.CallOnDispose(function() {
				tab.CommandController.get().remove_onUrlActionsResponse(tab.ActionUtils.launchActionUrls);
			}));
			tab.CommandController.get().add_onInvalidation(ss.mkdel(this, this.$onInvalidation));
			this._connections.push(new tab.CallOnDispose(ss.mkdel(this, function() {
				tab.CommandController.get().remove_onInvalidation(ss.mkdel(this, this.$onInvalidation));
			})));
			tab.CommandController.get().add_onPrimaryBootstrapSuccess(ss.mkdel(this, this.$onBootstrapSuccess));
			this._connections.push(new tab.CallOnDispose(ss.mkdel(this, function() {
				tab.CommandController.get().remove_onPrimaryBootstrapSuccess(ss.mkdel(this, this.$onBootstrapSuccess));
			})));
			if (tab.FeatureFlags.isEnabled('PortableSessionsCheckpoint')) {
				tab.BaseSession.subscribeToSessionRecoveryAttempt($tab_SessionViewModel.onSessionRecoveryAttempt);
			}
		},
		$isClickOnScroll: function ApplicationViewModel$IsClickOnScroll(e) {
			var retVal = false;
			if (e.clientX >= e.target.clientWidth || e.clientY >= e.target.clientHeight) {
				retVal = true;
			}
			return retVal;
		},
		$onWhitespaceClick: function ApplicationViewModel$OnWhitespaceClick(e) {
			if (tsConfig.is_authoring && tsConfig.current_sheet_type !== 'worksheet') {
				if (ss.referenceEquals(e.target, this.get_domNode().get(0)) && !this.$isClickOnScroll(e) || $tab_DashboardView.isDashboardNode(e.target) || ss.referenceEquals(e.target, this.$applicationView.get_containerNode().get(0)) || ss.referenceEquals(e.target, $tab_WorkbookView.findDashboardContainer().get(0))) {
					tab.SelectionClientCommands.clearActiveZone();
				}
				return;
			}
			if (ss.isValue(e.target)) {
				if (ss.referenceEquals(e.target, this.get_domNode().get(0)) && !this.$isClickOnScroll(e) || $tab_DashboardView.isDashboardNode(e.target) || $(e.target).hasClass('wcLayoutContainer')) {
					var visualModel = tab.ModelUtils.findActiveOrDefaultVisual(null);
					if (ss.isValue(visualModel)) {
						tab.SelectionClientCommands.clearAllSelections(visualModel.get_visualId());
					}
					e.preventDefault();
				}
			}
		},
		setupDomAndEvents: function ApplicationViewModel$SetupDomAndEvents() {
			this.get_$log().debug('SetupDomAndEvents', []);
			$('html').attr('lang', tsConfig.language).toggleClass('ie', BrowserSupport.BrowserSupport.IsIE());
			var applicationContainer = (tab.FeatureFlags.isEnabled('IframeSizedToWindow') ? $($tab_ApplicationView.applicationContainerSelector) : $('#centeringContainer'));
			applicationContainer.append(this.get_domNode());
			var applicationViewModelsClickDetector = new $tab_$ApplicationViewModelsClickDetector();
			this.get_domNode().on(this.createNamespacedEventName('contextmenu'), ss.mkdel(this, this.$onContextMenu)).on(this.createNamespacedEventName('mousedown'), ss.mkdel(applicationViewModelsClickDetector, applicationViewModelsClickDetector.$onMouseDown)).on(this.createNamespacedEventName('mouseup'), ss.mkdel(applicationViewModelsClickDetector, applicationViewModelsClickDetector.$onMouseUp));
			this._connections.push(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.get_domNode().off(this.createNamespacedEventName('contextmenu')).off(this.createNamespacedEventName('mousedown')).off(this.createNamespacedEventName('mouseup'));
			})));
			applicationViewModelsClickDetector.add_$clicked(ss.mkdel(this, this.$onWhitespaceClick));
			this._connections.push(new tab.CallOnDispose(ss.mkdel(this, function() {
				applicationViewModelsClickDetector.remove_$clicked(ss.mkdel(this, this.$onWhitespaceClick));
			})));
			this.$applicationView.onAddedToDom();
			tab.BaseSession.get_waitHandler().unlock();
			this.get_toolbarContainer().toggle(this.get_toolbarDisplayed());
			this.$updateRenderModeIndicator();
			tab.BaseSession.linkTarget = tsConfig.linktarget;
			tab.AckbarEventsHelper.get().add_doLaunchAuthoring(ss.mkdel(this, this.$doLaunchAuthoring));
			this._connections.push(new tab.CallOnDispose(ss.mkdel(this, function() {
				tab.AckbarEventsHelper.get().remove_doLaunchAuthoring(ss.mkdel(this, this.$doLaunchAuthoring));
			})));
			this.$hookupInvalidationHandlers();
		},
		$doLaunchAuthoring: function ApplicationViewModel$DoLaunchAuthoring() {
			tab.ToolbarServerCommands.launchEditing();
		},
		$getPrimaryContentUrl: function ApplicationViewModel$GetPrimaryContentUrl() {
			if (!ss.isNullOrEmptyString(tsConfig.primaryContentUrl)) {
				return tsConfig.primaryContentUrl;
			}
			if (ss.referenceEquals(window.self, window.top)) {
				return null;
			}
			var embeddingUri = tableau.util.parseUri(document.referrer);
			if (!ss.isValue(embeddingUri) || ss.isValue(embeddingUri['hostname']) && ss.referenceEquals(embeddingUri['hostname'], window.location.hostname)) {
				return null;
			}
			return document.referrer;
		},
		$onUpdateLayout: function ApplicationViewModel$OnUpdateLayout() {
			this.get_$log().debug('OnUpdateLayout', []);
			if (ss.isNullOrUndefined(this.get_$dashboardViewModel())) {
				return;
			}
			tab.ModuleManager.registerModulesLoadedCallback(ss.mkdel(this, this.$updateRenderModeIndicator));
			if (!this.get_skipInit() && !this.$doneInitialUpdateLayout) {
				tab.BaseSession.get_waitHandler().onNextHide(ss.mkdel(this, this.$doLoadingTransition));
				this.$setBackgroundFrameSourceIfNeed();
			}
			this.$doneInitialUpdateLayout = true;
			if (!this.get_$shouldShowTabs()) {
				this.layoutToolbar();
			}
			this.$applicationView.resizeAppBanner($tab_ApplicationSizeCalculator.calculateClientBounds());
			this.get_$devicePreviewViewModel().set_vizSize(this.get_vizSize());
			this.$applicationView.addDevicePreviewSettings();
			this.resize(false);
		},
		$updateRenderModeIndicator: function ApplicationViewModel$UpdateRenderModeIndicator() {
			if (ss.isNullOrUndefined(this.get_$contentDashboardViewModel()) || ss.isNullOrUndefined(this.get_toolbarViewModel())) {
				return;
			}
			this.get_toolbarViewModel().updateRenderModeText(tab.ApplicationModel.get_instance().get_isLocalRenderMode());
		},
		$setBackgroundFrameSourceIfNeed: function ApplicationViewModel$SetBackgroundFrameSourceIfNeed() {
			if (tsConfig.showLytebox) {
				$('#primaryContent').attr('src', this.$getPrimaryContentUrl());
			}
		},
		$onContextMenu: function ApplicationViewModel$OnContextMenu(e) {
			var target = $(e.target);
			if (target.filter('input[type=text]').length === 0 && target.filter('textarea').length === 0) {
				e.preventDefault();
				e.stopPropagation();
			}
		},
		$getCurrentPortSizeReferenceDimensions: function ApplicationViewModel$GetCurrentPortSizeReferenceDimensions() {
			var currentSize = null;
			if (!tab.FeatureFlags.isEnabled('IframeSizedToWindow') || tsConfig.isPublic) {
				currentSize = tabBootstrap.ViewerBootstrap.get_instance().getWebClientDashboardContainerSize(tsConfig.current_sheet_type);
			}
			else {
				currentSize = { w: window.innerWidth, h: window.innerHeight };
			}
			return currentSize;
		},
		$onBootstrapSuccess: function ApplicationViewModel$OnBootstrapSuccess() {
			this.get_$log().info('Bootstrap succeeded: layoutId=%s', [tsConfig.layoutid]);
			$tab_Application.get_instance().initTabbedNavigation();
			this.$lastReferenceSize = this.$getCurrentPortSizeReferenceDimensions();
			if (this.$timesResizedDuringBootstrap > 1) {
				this.$updateClientBound();
			}
		},
		$onInvalidation: function ApplicationViewModel$OnInvalidation(invalidationInfo) {
			var layoutStatus = invalidationInfo.layoutStatus;
			this.set_invalid(!ss.isNullOrUndefined(layoutStatus.invalidatedLayout) && layoutStatus.invalidatedLayout);
			if (ss.isValue(layoutStatus.vizStateList) && layoutStatus.vizStateList.length > 0) {
				var dirtyViews = [];
				for (var $t1 = 0; $t1 < layoutStatus.vizStateList.length; $t1++) {
					var vizStatePM = layoutStatus.vizStateList[$t1];
					if (!ss.contains(dirtyViews, vizStatePM.sheet) && vizStatePM.vizRegionRectList.length > 0) {
						dirtyViews.push(vizStatePM.sheet);
					}
				}
				var viewControllers = this.get_viewControllers();
				for (var $t2 = 0; $t2 < dirtyViews.length; $t2++) {
					var viewName = dirtyViews[$t2];
					var name = { $: viewName };
					var vc = _.find(viewControllers, ss.mkdel({ name: name }, function(iterator) {
						return ss.referenceEquals(iterator.get_sheetName(), this.name.$);
					}));
					if (ss.isValue(vc)) {
						vc.$fireSelectionChanged(invalidationInfo);
					}
				}
			}
		},
		$scheduleLayout: function ApplicationViewModel$ScheduleLayout(immediate) {
			this.get_$log().debug('ScheduleLayout: immediate=%s', [immediate]);
			var waitTime = (immediate ? 0 : 1000);
			this.$layoutTimeout = tab.MiscUtil.clearTimeout(this.$layoutTimeout);
			this.$layoutTimeout = window.setTimeout(ss.mkdel(this, this.$safeLayout), waitTime);
		},
		$safeLayout: function ApplicationViewModel$SafeLayout() {
			this.get_$log().debug('SafeLayout', []);
			if (!tab.BaseSession.get_waitHandler().isBusy() && (!this.$doneInitialLayout || ss.isValue(tsConfig.layoutid)) && ss.isValue(this.$applicationViewModelReal)) {
				this.$layout();
				return;
			}
			this.$layoutTimeout = tab.MiscUtil.clearTimeout(this.$layoutTimeout);
			this.$layoutTimeout = window.setTimeout(ss.mkdel(this, this.$safeLayout), 100);
		},
		$layout: function ApplicationViewModel$Layout() {
			this.get_$log().debug('Layout', []);
			var isIframeSizedToWindow = tab.FeatureFlags.isEnabled('IframeSizedToWindow');
			this.$lastReferenceSize = this.$getCurrentPortSizeReferenceDimensions();
			if (tsConfig.isPublic) {
				var containerSize = tabBootstrap.ViewerBootstrap.get_instance().getVizClientContainerSize(tsConfig.current_sheet_type);
				$($tab_ApplicationView.vizContainerSelector).css({ width: containerSize.w + 'px', height: containerSize.h + 'px' });
			}
			this.$updateClientBound();
			tab.CommandController.get().refreshLayout();
			this.layoutToolbar();
			var sheetTabs = $tab_Application.get_instance().get_tabbedNavigation();
			if (this.get_$shouldShowTabs() && ss.isValue(sheetTabs)) {
				if (tsConfig.is_mobile_app) {
					var tabWidth = (isIframeSizedToWindow ? this.get_vizClientContainerSize().w : $tab_ApplicationSizeCalculator.calculateClientBounds().w);
					sheetTabs.get_widgetDomNode().style.width = tabWidth + 'px';
				}
				sheetTabs.resizeShim();
			}
			this.$doneInitialLayout = true;
		},
		layoutToolbar: function ApplicationViewModel$LayoutToolbar() {
			var currentToolbarWidth = (tab.FeatureFlags.isEnabled('IframeSizedToWindow') ? this.get_vizClientContainerSize().w : $tab_ApplicationSizeCalculator.calculateClientBounds().w);
			if (ss.isValue(this.$toolbarWidth) && this.$toolbarWidth === currentToolbarWidth) {
				return;
			}
			this.$toolbarWidth = currentToolbarWidth;
			{
				var $t1 = tabBootstrap.MetricsController.createContext('TBRLAY'.toString(), 64, null);
				try {
					if (!tab.ApplicationModel.get_instance().get_showToolbar()) {
						this.get_toolbarContainer().css('visibility', 'hidden');
					}
					else if (tsConfig.toolbarContainerVis) {
						if ($tab_ToolbarViewModel.get_toolbarIsBottom() && !tab.FeatureFlags.isEnabled('IframeSizedToWindow')) {
							this.get_domNode().after(this.get_toolbarContainer());
						}
						this.get_toolbarContainer().css('visibility', 'visible');
						if (tsConfig.is_mobile && !tsConfig.is_authoring && !tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
							this.$applicationView.resizeToolbar();
						}
						else if (!tab.FeatureFlags.isEnabled('IframeSizedToWindow')) {
							if ($tab_ToolbarViewModel.get_toolbarIsBottom() || !this.get_$shouldShowTabs()) {
								this.get_toolbarContainer().css('max-width', this.$toolbarWidth + 'px');
							}
							this.$applicationView.resizeToolbar();
						}
					}
				}
				finally {
					if (ss.isValue($t1)) {
						$t1.dispose();
					}
				}
			}
		},
		$updateClientBound: function ApplicationViewModel$UpdateClientBound() {
			if (!tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapCompleted()) {
				return;
			}
			$tab_ApplicationViewModel.updatePortSize();
			this.updateApplicationSize();
		},
		updateApplicationSize: function ApplicationViewModel$UpdateApplicationSize() {
			var applicationSize = $tab_ApplicationSizeCalculator.calculateApplicationSize();
			if (!_.isEqual(this.$lastApplicationSize, applicationSize)) {
				this.$lastApplicationSize = applicationSize;
				if (!ss.staticEquals($tab_ApplicationViewModel.$2$ApplicationSizeChangedField, null)) {
					$tab_ApplicationViewModel.$2$ApplicationSizeChangedField();
				}
			}
		},
		$notifyAppInteractive: function ApplicationViewModel$NotifyAppInteractive() {
			tabBootstrap.MetricsController.logMetricsEvent('APPINT'.toString(), 2);
			var success = tabBootstrap.Utility.sendCommandWithContext('tableau.responsive');
			if (!success) {
				tab.Logger.lazyGetLogger($tab_ApplicationViewModel).debug('ApplicationViewModel: SendCommandWithContext failed.', []);
			}
		},
		$doLoadingTransition: function ApplicationViewModel$DoLoadingTransition() {
			var fadeDuration = (tab.ProgressiveLoader.get_progressiveLoadEnabled() ? 150 : 450);
			this.$notifyAppInteractive();
			var staticImageNode = $('#staticImage');
			var glassPaneNode = $('#loadingGlassPane');
			var spinnerNode = $('#loadingSpinner');
			var svgSpinnerContainer = $('#svg-spinner-container');
			if (tsConfig.animateTransition) {
				tab.WaitHandler.loadingElementFadeOut(spinnerNode, fadeDuration, function(elem) {
					elem.hide();
					svgSpinnerContainer.css('background', 'rgba(255,255,255,0.6)');
				});
				tab.WaitHandler.loadingElementFadeOut(glassPaneNode, fadeDuration, function(elem1) {
					elem1.hide().css('cursor', 'default');
				});
				if (staticImageNode.length > 0) {
					tab.WaitHandler.loadingElementFadeOut(staticImageNode, fadeDuration, function(elem2) {
						elem2.hide();
					});
				}
			}
			else {
				spinnerNode.hide();
				staticImageNode.hide();
				glassPaneNode.hide();
			}
		}
	}, spiff.Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable, $tab_IClient, $tab_IApiStorytellingClient]);
	ss.initClass($tab_ApplicationViewModelReal, $asm, {
		add_applicationUpdate: function ApplicationViewModelReal$add_ApplicationUpdate(value) {
			this.$2$ApplicationUpdateField = ss.delegateCombine(this.$2$ApplicationUpdateField, value);
		},
		remove_applicationUpdate: function ApplicationViewModelReal$remove_ApplicationUpdate(value) {
			this.$2$ApplicationUpdateField = ss.delegateRemove(this.$2$ApplicationUpdateField, value);
		},
		get_dashboardViewModel: function ApplicationViewModelReal$get_DashboardViewModel() {
			return this.$workbookViewModel.get_dashboardViewModel();
		},
		get_contentDashboardViewModel: function ApplicationViewModelReal$get_ContentDashboardViewModel() {
			return this.$workbookViewModel.get_contentDashboardViewModel();
		},
		get_workbookViewModel: function ApplicationViewModelReal$get_WorkbookViewModel() {
			return this.$workbookViewModel;
		},
		get_appBannerViewModel: function ApplicationViewModelReal$get_AppBannerViewModel() {
			return this.$appBannerViewModel;
		},
		get_toolbarViewModel: function ApplicationViewModelReal$get_ToolbarViewModel() {
			return this.$toolbarViewModel;
		},
		get_devicePreviewViewModel: function ApplicationViewModelReal$get_DevicePreviewViewModel() {
			return this.$devicePreviewViewModel;
		},
		get_deviceLayoutViewModel: function ApplicationViewModelReal$get_DeviceLayoutViewModel() {
			return this.$deviceLayoutViewModel;
		},
		get_shouldShowCommenting: function ApplicationViewModelReal$get_ShouldShowCommenting() {
			var show = !tsConfig.is_authoring && !tsConfig.is_mobile_app && tsConfig.commentingEnabled && tsConfig.allow_commenting && tsConfig.allow_view_comments;
			return show;
		},
		get_shouldShowRightAreaDrawer: function ApplicationViewModelReal$get_ShouldShowRightAreaDrawer() {
			return !(tsConfig.is_authoring && tsConfig.is_mobile) && !tsConfig.is_mobile_app;
		},
		$performPostLoadOperations: function ApplicationViewModelReal$PerformPostLoadOperations() {
			tab.CommandController.get().legacySession.performPostLoadOperations(tsConfig.current_sheet_name, ss.mkdel(this, this.$processViewCountData));
		},
		dispose: function ApplicationViewModelReal$Dispose() {
			if (ss.isValue(this.$toolbarViewModel)) {
				this.$toolbarViewModel.dispose();
			}
			this.$appBannerViewModel.dispose();
			this.$disposeWorkbook();
			this.$applicationModel.remove_newWorkbook(ss.mkdel(this, this.handleNewWorkbook));
			this.$devicePreviewViewModel.dispose();
			this.$deviceLayoutViewModel.dispose();
			spiff.BaseViewModel.prototype.dispose.call(this);
		},
		handleNewWorkbook: function ApplicationViewModelReal$HandleNewWorkbook(workbookModel) {
			this.$disposeWorkbook();
			this.$workbookViewModel = new $tab_WorkbookViewModel(workbookModel);
		},
		$disposeWorkbook: function ApplicationViewModelReal$DisposeWorkbook() {
			if (ss.isValue(this.$workbookViewModel)) {
				this.$workbookViewModel.dispose();
				this.$workbookViewModel = null;
			}
		},
		handleApplicationUpdate: function ApplicationViewModelReal$HandleApplicationUpdate() {
			this.raiseActionEvent(this.$2$ApplicationUpdateField);
		},
		$processViewCountData: function ApplicationViewModelReal$ProcessViewCountData(dataObject) {
			var data = dataObject;
			if (ss.isValue(data['viewCount'])) {
				$tab_PublicInfoViewModel.set_viewCount(parseInt(data['viewCount'], 10));
			}
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_AreYouSureButtons, $asm, {
		add_$confirm: function AreYouSureButtons$add_Confirm(value) {
			this.$2$ConfirmField = ss.delegateCombine(this.$2$ConfirmField, value);
		},
		remove_$confirm: function AreYouSureButtons$remove_Confirm(value) {
			this.$2$ConfirmField = ss.delegateRemove(this.$2$ConfirmField, value);
		},
		add_$cancel: function AreYouSureButtons$add_Cancel(value) {
			this.$2$CancelField = ss.delegateCombine(this.$2$CancelField, value);
		},
		remove_$cancel: function AreYouSureButtons$remove_Cancel(value) {
			this.$2$CancelField = ss.delegateRemove(this.$2$CancelField, value);
		},
		dismiss: function AreYouSureButtons$Dismiss() {
			this.element.remove();
		},
		$setupContent: function AreYouSureButtons$SetupContent() {
			this.$template.label.text(tab.Strings.AreYouSureText);
			var cancel = spiff.StyledTextButton.createUnificationLabelButton(ss.mkdel(this, this.$onCancelPressed), tab.Strings.AreYouSureCancel, null, 2, null);
			this.disposables.add$1(cancel);
			this.$template.cancelButton.append(cancel.element);
			var confirm = spiff.StyledTextButton.createUnificationLabelButton(ss.mkdel(this, this.$onConfirmPressed), tab.Strings.AreYouSureDelete, null, 1, null);
			this.disposables.add$1(confirm);
			this.$template.confirmButton.append(confirm.element);
		},
		$onCancelPressed: function AreYouSureButtons$OnCancelPressed() {
			this.dismiss();
			if (ss.isValue(this.$2$CancelField)) {
				this.$2$CancelField();
			}
		},
		$onConfirmPressed: function AreYouSureButtons$OnConfirmPressed() {
			this.dismiss();
			if (ss.isValue(this.$2$ConfirmField)) {
				this.$2$ConfirmField();
			}
		}
	}, spiff.Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($tab_AreYouSureTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_BaseDataSourceConnectionErrorWidget, $asm, {
		get_retryWithMessageViewName: function BaseDataSourceConnectionErrorWidget$get_RetryWithMessageViewName() {
			return ss.formatString('/{0}/dataSourceGenericErrorView.html', tsConfig.language);
		},
		get_submitted: function BaseDataSourceConnectionErrorWidget$get_Submitted() {
			return this.$1$SubmittedField;
		},
		set_submitted: function BaseDataSourceConnectionErrorWidget$set_Submitted(value) {
			this.$1$SubmittedField = value;
		},
		onAuthDialogMessage: function BaseDataSourceConnectionErrorWidget$OnAuthDialogMessage(e, eventHandlerParam) {
			if (ss.isNullOrUndefined(e)) {
				return;
			}
			var message = e;
			var data = message.data.toString();
			if (ss.isNullOrEmptyString(data) || !ss.equalsT(data, 'tableau.authCompleted')) {
				return;
			}
			if (!ss.equalsT(BrowserSupport.BrowserSupport.GetOrigin(document.location), message.origin)) {
				return;
			}
			this.set_submitted(true);
			this.cleanup(eventHandlerParam);
			if (ss.isValue(this.onProceed)) {
				this.onProceed();
			}
		},
		show: null,
		cleanup: null
	});
	ss.initClass($tab_BaseDataSourceConnectionErrorOverlayWidget, $asm, {
		cleanup: function BaseDataSourceConnectionErrorOverlayWidget$Cleanup(eventHandlerParam) {
			var element = document.getElementById($tab_BaseDataSourceConnectionErrorWidget.overlayId);
			if (!ss.isNullOrUndefined(element)) {
				element.parentElement.removeChild(element);
			}
			if (ss.isValue(eventHandlerParam)) {
				if (ss.isValue(eventHandlerParam.onTabSelectHandle)) {
					eventHandlerParam.onTabSelectHandle.dispose();
				}
				tab.WindowHelper.removeListener(window.self, $tab_BaseDataSourceConnectionErrorWidget.messageEventName, eventHandlerParam.eventHandler);
				if (ss.isValue(eventHandlerParam.zoneBecameValidHandler)) {
					eventHandlerParam.zoneBecameValidHandler.dispose();
				}
			}
		},
		dispose: function BaseDataSourceConnectionErrorOverlayWidget$Dispose() {
			this.cleanup(null);
		}
	}, $tab_BaseDataSourceConnectionErrorWidget, [ss.IDisposable]);
	ss.initClass($tab_BadPasswordAuthPromptOverlayWidget, $asm, {
		show: function BadPasswordAuthPromptOverlayWidget$Show() {
			this.createOverlay();
			var handlerParam = new $tab_EventHandlerParam();
			var zoneValidHandler = ss.mkdel(this, function() {
				this.cleanup(handlerParam);
			});
			$tab_ZoneView.add_zoneBecameValid(zoneValidHandler);
			handlerParam.zoneBecameValidHandler = new tab.CallOnDispose(function() {
				$tab_ZoneView.remove_zoneBecameValid(zoneValidHandler);
			});
			var eventHandler = ss.mkdel(this, function(e) {
				this.onAuthDialogMessage(e, handlerParam);
			});
			handlerParam.eventHandler = eventHandler;
			var onSheetNameChange = ss.mkdel(this, function() {
				this.cleanup(handlerParam);
			});
			tab.CommandController.add_sheetNameChanged(onSheetNameChange);
			handlerParam.onTabSelectHandle = new tab.CallOnDispose(function() {
				tab.CommandController.remove_sheetNameChanged(onSheetNameChange);
			});
			tab.WindowHelper.addListener(window.self, $tab_BaseDataSourceConnectionErrorWidget.messageEventName, eventHandler);
		},
		createOverlay: function BadPasswordAuthPromptOverlayWidget$CreateOverlay() {
			var element = $($tab_BaseDataSourceConnectionErrorWidget.dashboardContainerSelector);
			var overlay = $("<div id='auth-overlay'></div>");
			if (ss.isValue(this.$dataSourceConnectionAttemptInfo)) {
				tab.DataConnectionUtils.isTableauServerSupportedInReconnectFlow(this.dataSourceConnectionAttemptErrorResponse.ConnectionClass).done(ss.mkdel(this, function(tableauServerSupported) {
					var props = this.$setupSheetReconnectProps();
					if (tableauServerSupported) {
						ReactDOM.render(React.createElement($tab_TableauServerReconnectWidget, props), overlay.get(0));
					}
					else {
						ReactDOM.render(React.createElement($tab_SheetReconnectWidget, props), overlay.get(0));
					}
				}));
			}
			else {
				this.$setupIFrame(overlay);
			}
			element.append(overlay);
		},
		$setupIFrame: function BadPasswordAuthPromptOverlayWidget$SetupIFrame(overlay) {
			var iframe = document.createElement('iframe');
			iframe.setAttribute('src', this.$authPageUrl);
			iframe.setAttribute('tb-test-id', $tab_BaseDataSourceConnectionErrorWidget.frameTestHook);
			overlay.append(iframe);
		},
		$setupSheetReconnectProps: function BadPasswordAuthPromptOverlayWidget$SetupSheetReconnectProps() {
			var displayAttrs = [];
			for (var i = 0; i < this.$dataSourceConnectionAttemptInfo.connectionAttrDisplayNames.length; ++i) {
				displayAttrs.push([this.$dataSourceConnectionAttemptInfo.connectionAttrDisplayNames[i], this.$dataSourceConnectionAttemptInfo.connectionAttrDisplayValues[i]]);
			}
			var props = { connectionAttemptInfo: this.$connectionAttemptInfo, connectionAttributes: this.$dataSourceConnectionAttemptInfo.exceptionAttrs, connectionDisplayAttributes: Array.prototype.slice.call(displayAttrs), connectionClass: this.dataSourceConnectionAttemptErrorResponse.ConnectionClass, connectionErrorStage: this.$dataSourceConnectionAttemptInfo.connectionErrorStage, connectionName: this.dataSourceConnectionAttemptErrorResponse.ConnectionName, connectionTypeLabel: this.$dataSourceConnectionAttemptInfo.connectionTypeLabel, dataSourceCaption: this.dataSourceConnectionAttemptErrorResponse.DataSourceCaption, errorType: this.dataSourceConnectionAttemptErrorResponse.ErrorType, onCredentialsAdded: ss.mkdel(this, function(pm) {
				this.cleanup(null);
				this.onProceed();
			}) };
			return props;
		}
	}, $tab_BaseDataSourceConnectionErrorOverlayWidget, [ss.IDisposable]);
	ss.initClass($tab_BaseDisposableDialog, $asm, {
		dispose: function BaseDisposableDialog$Dispose() {
			if (ss.isValue(this.parentNode)) {
				ReactDOM.unmountComponentAtNode(this.parentNode);
				$(this.parentNode).remove();
			}
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_BrowserViewport, $asm, {
		get_dimensions: function BrowserViewport$get_Dimensions() {
			return this.$dimensions;
		},
		translatePositionToViewport: function BrowserViewport$TranslatePositionToViewport(p) {
			var viewp = { x: p.x, y: p.y };
			$tab_BrowserViewport.$addLegacyVizOffset(viewp);
			viewp.y -= this.$dimensions.t;
			viewp.x -= this.$dimensions.l;
			return viewp;
		},
		getVisibleRoom: function BrowserViewport$GetVisibleRoom(position, padding) {
			var viewportPos = this.translatePositionToViewport(position);
			var capWithPadding = function(i) {
				return Math.max(0, i - padding);
			};
			var roomRight = capWithPadding(Math.min(this.get_dimensions().w - viewportPos.x, window.pageXOffset + window.innerWidth - position.x));
			var roomLeft = capWithPadding(Math.min(viewportPos.x, position.x));
			var roomAbove = capWithPadding(Math.min(viewportPos.y, position.y));
			var roomBelow = capWithPadding(Math.min(this.get_dimensions().h - viewportPos.y, window.pageYOffset + window.innerHeight - position.y));
			return { roomAbove: roomAbove, roomBelow: roomBelow, roomLeft: roomLeft, roomRight: roomRight };
		},
		getDocumentViewport: function BrowserViewport$GetDocumentViewport(point) {
			var room = this.getVisibleRoom(point, 0);
			return { l: ss.Int32.trunc(point.x - room.roomLeft), t: ss.Int32.trunc(point.y - room.roomAbove), w: ss.Int32.trunc(room.roomLeft + room.roomRight), h: ss.Int32.trunc(room.roomAbove + room.roomBelow) };
		}
	}, null, [tab.IBrowserViewport]);
	ss.initClass($tab_ButtonZoneComponent, $asm, {
		dispose: function ButtonZoneComponent$Dispose() {
			$tab_ServerFontLoader.get_instance().remove_fontPreparationComplete(ss.mkdel(this, this.$fontPreparationComplete));
		},
		$fontPreparationComplete: function ButtonZoneComponent$FontPreparationComplete() {
			this.props.handleFontLoaded();
		},
		$isEnabled: function ButtonZoneComponent$IsEnabled() {
			return this.props.enabledState === 'enabled';
		},
		$isDisabledForPermissions: function ButtonZoneComponent$IsDisabledForPermissions() {
			return this.props.enabledState === 'disabled-no-permissions';
		},
		render: function ButtonZoneComponent$Render() {
			var contentGenerator = ss.mkdel(this, function() {
				return spiff.DOMElements.div({ className: 'tab-button-object', title: this.props.tooltipText, 'aria-label': this.props.tooltipText, style: this.$getButtonStyle(), onMouseEnter: ss.mkdel(this, function(_) {
					this.props.hoverActivated();
				}), onMouseLeave: ss.mkdel(this, function(_1) {
					this.props.hoverDeactivated();
				}), onDoubleClick: ss.mkdel(this, this.$handleDoubleClick), 'data-test-id': 'tab-button-object' }, (!this.$isEnabled() ? ss.mkdel(this, this.$renderDisableOverlay)() : null), this.$renderButtonContent());
			});
			return spiff.InteractAsButtonWrapperComponent.create({ handleClickOnly: ss.mkdel(this, this.$handleTap), handleEnterSpaceOnly: ss.mkdel(this, this.$handleKeyDown), disabled: false, buttonContent: contentGenerator });
		},
		$addBasicButtonObjectStylingToCSS: function ButtonZoneComponent$AddBasicButtonObjectStylingToCSS(cssProps) {
			this.$addBorderProperties(cssProps);
			this.$addBackgroundProperties(cssProps);
			cssProps.boxSizing = 'border-box';
		},
		$addTextHoverStateBorderProperties: function ButtonZoneComponent$AddTextHoverStateBorderProperties(cssProps) {
			var normalBorderColor = (this.props.border.get_hasColor() ? tab.ColorModel.fromColorCode(this.props.border.color) : tab.ColorModel.fromColorCode(this.props.backgroundColor));
			var overlayBorderColor = (normalBorderColor.isLuminanceAboveThreshold(0.200000002980232) ? $tab_ButtonZoneComponent.textButtonHoverOverlayColorDark : $tab_ButtonZoneComponent.textButtonHoverOverlayColorLight);
			var finalTint = tab.ColorModel.alphaBlend(overlayBorderColor, normalBorderColor);
			cssProps.borderColor = finalTint.toString();
			cssProps.borderWidth = (this.props.border.get_hasWidth() ? this.props.border.width : $tab_ButtonZoneComponent.defaultHoverBorderWidth);
			cssProps.borderStyle = tab.BorderDefinition.borderStyleToCss((this.props.border.get_hasStyle() ? this.props.border.style : 'bs-solid'));
		},
		$addBorderProperties: function ButtonZoneComponent$AddBorderProperties(cssProps) {
			var grayscaleColor = '#808080';
			cssProps.borderWidth = this.props.border.width + 'px';
			cssProps.borderStyle = tab.BorderDefinition.borderStyleToCss(this.props.border.style);
			cssProps.borderColor = (this.$isEnabled() ? this.props.border.color : grayscaleColor);
		},
		$addBackgroundProperties: function ButtonZoneComponent$AddBackgroundProperties(cssProps) {
			var grayscaleBackgroundColor = '#e5e5e5';
			cssProps.backgroundColor = (this.$isEnabled() ? this.props.backgroundColor : grayscaleBackgroundColor);
		},
		$basicButtonObjectTextSupportToCSS: function ButtonZoneComponent$BasicButtonObjectTextSupportToCSS(cssProps) {
			if (this.props.hoverActive && this.props.buttonType === 'text' && this.$isEnabled()) {
				this.$addTextHoverStateBorderProperties(cssProps);
			}
			var grayscaleColor = '#808080';
			cssProps.fontFamily = this.props.captionTextFont;
			cssProps.color = (this.$isEnabled() ? this.props.captionTextColor : grayscaleColor);
			cssProps.fontSize = this.props.captionFontSize + 'pt';
			cssProps.fontStyle = (this.props.captionFontIsItalic ? 'italic' : 'normal');
			cssProps.fontWeight = (this.props.captionFontIsBold ? 'bold' : 'normal');
			cssProps.textDecoration = (this.props.captionFontIsUnderlined ? 'underline' : '');
			var cssPropertiesFormattingConverterObject = new $tab_CssPropertiesFormattingConverterObject(cssProps);
			tab.FormattingConverters.cleanUpFontFamilyStyling(cssPropertiesFormattingConverterObject);
		},
		$getButtonStyle: function ButtonZoneComponent$GetButtonStyle() {
			var result = { width: this.props.contentWidth, height: this.props.contentHeight };
			if (tab.FeatureFlags.isEnabled('BasicButtonObjectStyling')) {
				this.$addBasicButtonObjectStylingToCSS(result);
			}
			if (tab.FeatureFlags.isEnabled('BasicButtonObjectTextSupport')) {
				this.$basicButtonObjectTextSupportToCSS(result);
			}
			return result;
		},
		$renderDisableOverlay: function ButtonZoneComponent$RenderDisableOverlay() {
			return spiff.DOMElements.div({ className: 'tab-button-zone-disabled-overlay', key: 'disabledButtonOverlay' });
		},
		$calculateImageWidthFromProps: function ButtonZoneComponent$CalculateImageWidthFromProps() {
			return this.props.width - 2 * this.props.border.width;
		},
		$calculateImageHeightFromProps: function ButtonZoneComponent$CalculateImageHeightFromProps() {
			return this.props.height - 2 * this.props.border.width;
		},
		$renderButtonZoneImageHover: function ButtonZoneComponent$RenderButtonZoneImageHover() {
			return spiff.DOMElements.div({ className: 'tab-button-zone-image-hover', style: { width: this.$calculateImageWidthFromProps(), height: this.$calculateImageHeightFromProps(), backgroundColor: tab.ColorModel.fromColorCode(this.props.backgroundColor).toRgb(), opacity: 0.5 } });
		},
		$handleDoubleClick: function ButtonZoneComponent$HandleDoubleClick(ev) {
			if (tsConfig.is_authoring && ev.button === 0 && !ev.altKey && !tab.ApplicationModel.get_instance().get_workbook().get_isCurrentSheetStoryboard()) {
				if (tab.FeatureFlags.isEnabled('BasicButtonObjectTextSupport') && tab.FeatureFlags.isEnabled('CollapsiblePane')) {
					this.$logOpenButtonConfigDialogInvoked($tab_DashboardAuthoringButtonTelemetry.doubleMouseClickType);
				}
				this.props.handleAuthoringDoubleClick();
			}
		},
		$handleTap: function ButtonZoneComponent$HandleTap(e) {
			var isValidPress = e.altKey || !tsConfig.is_authoring;
			if (this.$isEnabled() && isValidPress) {
				if (tab.FeatureFlags.isEnabled('BasicButtonObjectTextSupport') && tab.FeatureFlags.isEnabled('CollapsiblePane')) {
					var clickAction = (e.altKey ? $tab_DashboardAuthoringButtonTelemetry.altSingleMouseClickType : $tab_DashboardAuthoringButtonTelemetry.singleMouseClickType);
					this.$logButtonActionInvoked(clickAction);
				}
				else {
					$tab_DashboardAuthoringButtonTelemetry.logNavigateButtonByClickEvent(tsConfig.is_authoring, e.altKey);
				}
				this.props.buttonClickAction();
			}
			else if (isValidPress && this.$isDisabledForPermissions()) {
				if (tab.FeatureFlags.isEnabled('BasicButtonObjectTextSupport') && tab.FeatureFlags.isEnabled('CollapsiblePane')) {
					var clickAction1 = (e.altKey ? $tab_DashboardAuthoringButtonTelemetry.altSingleMouseClickType : $tab_DashboardAuthoringButtonTelemetry.singleMouseClickType);
					this.$logOpenButtonPermissionsErrorDialogInvoked(clickAction1);
				}
				this.props.handlePermissionsError();
			}
		},
		$handleKeyDown: function ButtonZoneComponent$HandleKeyDown() {
			if (this.$isEnabled()) {
				if (tab.FeatureFlags.isEnabled('BasicButtonObjectTextSupport') && tab.FeatureFlags.isEnabled('CollapsiblePane')) {
					this.$logButtonActionInvoked($tab_DashboardAuthoringButtonTelemetry.enterSpaceKeyClickType);
				}
				else {
					$tab_DashboardAuthoringButtonTelemetry.logNavigateButtonByKeyboardEvent(tsConfig.is_authoring);
				}
				this.props.buttonClickAction();
			}
			else if (this.$isDisabledForPermissions()) {
				if (tab.FeatureFlags.isEnabled('BasicButtonObjectTextSupport') && tab.FeatureFlags.isEnabled('CollapsiblePane')) {
					this.$logOpenButtonPermissionsErrorDialogInvoked($tab_DashboardAuthoringButtonTelemetry.enterSpaceKeyClickType);
				}
				this.props.handlePermissionsError();
			}
		},
		$logButtonActionInvoked: function ButtonZoneComponent$LogButtonActionInvoked(clickAction) {
			$tab_DashboardAuthoringButtonTelemetry.logButtonActionInvoked(tsConfig.is_authoring, clickAction, this.props.buttonType.toString(), this.props.buttonBehaviour.toString());
		},
		$logOpenButtonConfigDialogInvoked: function ButtonZoneComponent$LogOpenButtonConfigDialogInvoked(clickAction) {
			$tab_DashboardAuthoringButtonTelemetry.logOpenButtonConfigDialogInvoked(clickAction, this.props.buttonType.toString(), this.props.buttonBehaviour.toString());
		},
		$logOpenButtonPermissionsErrorDialogInvoked: function ButtonZoneComponent$LogOpenButtonPermissionsErrorDialogInvoked(clickAction) {
			$tab_DashboardAuthoringButtonTelemetry.logOpenButtonPermissionsErrorDialogInvoked(clickAction, this.props.buttonType.toString(), this.props.buttonBehaviour.toString());
		},
		$renderButtonContent: function ButtonZoneComponent$RenderButtonContent() {
			if (tab.FeatureFlags.isEnabled('BasicButtonObjectTextSupport') && this.props.buttonType === 'text') {
				return this.$renderText();
			}
			else {
				return this.$renderImageNode();
			}
		},
		$renderImageNode: function ButtonZoneComponent$RenderImageNode() {
			if (!this.$isEnabled()) {
				return this.$renderImageElement('tab-button-zone-image-disabled');
			}
			else {
				return spiff.DOMElements.div({ className: 'tab-button-image-container-hover' }, this.$renderImageElement('tab-button-zone-image'), (this.props.hoverActive ? ss.mkdel(this, this.$renderButtonZoneImageHover)() : null));
			}
		},
		$renderText: function ButtonZoneComponent$RenderText() {
			if (!this.$isEnabled()) {
				return this.$renderTextElement('tab-button-zone-text-disabled');
			}
			else {
				return spiff.DOMElements.div({ className: 'tab-button-text-container-hover' }, this.$renderTextElement('tab-button-zone-text'));
			}
		},
		$renderTextElement: function ButtonZoneComponent$RenderTextElement(buttonTextClassName) {
			return spiff.DOMElements.div({ className: buttonTextClassName, 'data-test-id': buttonTextClassName }, this.props.effectiveCaption.toString());
		},
		$renderImageElement: function ButtonZoneComponent$RenderImageElement(buttonImageClassName) {
			var imageWidth = this.$calculateImageWidthFromProps();
			var imageHeight = this.$calculateImageHeightFromProps();
			var attr = { className: 'image-disabled-svg', width: imageWidth, height: imageHeight };
			var values = spiff.DOMElements.feColorMatrix({ values: '0.3333 0.3333 0.3333 0.17 0\n                           0.3333 0.3333 0.3333 0.17 0\n                           0.3333 0.3333 0.3333 0.17 0\n                           0      0      0      1    0' });
			var filter = spiff.DOMElements.filter({ id: 'grayscale' }, values);
			var defs = spiff.DOMElements.defs({}, filter);
			var image = spiff.DOMElements.image({ xlinkHref: this.props.imageUrl, className: buttonImageClassName, width: imageWidth, height: imageHeight });
			return spiff.DOMElements.svg(attr, defs, image);
		}
	}, React.Component, [ss.IDisposable]);
	ss.initClass($tab_ButtonZoneViewModel, $asm, {
		get_$backgroundColor: function ButtonZoneViewModel$get_BackgroundColor() {
			return this.$buttonZoneModel.get_backgroundColor();
		},
		get_$border: function ButtonZoneViewModel$get_Border() {
			return new tab.BorderDefinition(this.$buttonZoneModel.get_borderWidth(), this.$buttonZoneModel.get_borderStyle(), this.$buttonZoneModel.get_borderColor(), 0);
		},
		get_$buttonType: function ButtonZoneViewModel$get_ButtonType() {
			return this.$buttonZoneModel.get_buttonType();
		},
		get_$buttonBehaviour: function ButtonZoneViewModel$get_ButtonBehaviour() {
			return this.$buttonZoneModel.get_buttonBehaviour();
		},
		get_$effectiveCaption: function ButtonZoneViewModel$get_EffectiveCaption() {
			return this.$buttonZoneModel.get_effectiveCaption();
		},
		get_$clickActionString: function ButtonZoneViewModel$get_ClickActionString() {
			return this.$buttonZoneModel.get_clickActionString();
		},
		get_$tooltipText: function ButtonZoneViewModel$get_TooltipText() {
			return this.$buttonZoneModel.get_tooltipText();
		},
		get_imageUrl: function ButtonZoneViewModel$get_ImageUrl() {
			var session = tab.CommandController.get().legacySession;
			var imageUrl = session.formatDashboardTempfileReference(this.$buttonZoneModel.get_imagePathKey(), true, false);
			return imageUrl;
		},
		get_$imageOriginalWidth: function ButtonZoneViewModel$get_ImageOriginalWidth() {
			return this.$buttonZoneModel.get_width();
		},
		get_$imageOriginalHeight: function ButtonZoneViewModel$get_ImageOriginalHeight() {
			return this.$buttonZoneModel.get_height();
		},
		get_width: function ButtonZoneViewModel$get_Width() {
			if (tab.FeatureFlags.isEnabled('BasicButtonObjectTextSupport') && this.get_$buttonType() === 'text') {
				return this.$buttonZoneModel.get_width();
			}
			else {
				return (this.get_isWidthConstrained() ? this.$parentZoneViewModel.get_contentWidth() : ss.Int32.trunc(this.get_aspectRatio() * this.$parentZoneViewModel.get_contentHeight()));
			}
		},
		get_height: function ButtonZoneViewModel$get_Height() {
			if (tab.FeatureFlags.isEnabled('BasicButtonObjectTextSupport') && this.get_$buttonType() === 'text') {
				return this.$buttonZoneModel.get_height();
			}
			else {
				return (this.get_isWidthConstrained() ? ss.Int32.trunc(this.$parentZoneViewModel.get_contentWidth() / this.get_aspectRatio()) : this.$parentZoneViewModel.get_contentHeight());
			}
		},
		get_aspectRatio: function ButtonZoneViewModel$get_AspectRatio() {
			return this.get_$imageOriginalWidth() / this.get_$imageOriginalHeight();
		},
		get_isWidthConstrained: function ButtonZoneViewModel$get_IsWidthConstrained() {
			var flag = this.get_$imageOriginalWidth() / this.$parentZoneViewModel.get_contentWidth() >= this.get_$imageOriginalHeight() / this.$parentZoneViewModel.get_contentHeight();
			return flag;
		},
		get_captionTextFont: function ButtonZoneViewModel$get_CaptionTextFont() {
			return this.$buttonZoneModel.get_captionFontName();
		},
		get_captionTextColor: function ButtonZoneViewModel$get_CaptionTextColor() {
			return this.$buttonZoneModel.get_captionTextColor();
		},
		get_captionFontSize: function ButtonZoneViewModel$get_CaptionFontSize() {
			return this.$buttonZoneModel.get_captionFontSize();
		},
		get_captionFontIsBold: function ButtonZoneViewModel$get_CaptionFontIsBold() {
			return this.$buttonZoneModel.get_captionFontIsBold();
		},
		get_captionFontIsItalic: function ButtonZoneViewModel$get_CaptionFontIsItalic() {
			return this.$buttonZoneModel.get_captionFontIsItalic();
		},
		get_captionFontIsUnderlined: function ButtonZoneViewModel$get_CaptionFontIsUnderlined() {
			return this.$buttonZoneModel.get_captionFontIsUnderlined();
		},
		get_$enabledState: function ButtonZoneViewModel$get_EnabledState() {
			return this.$buttonZoneModel.get_enabledState();
		},
		createUpdatedProps: function ButtonZoneViewModel$CreateUpdatedProps() {
			return { backgroundColor: this.get_$backgroundColor(), border: this.get_$border(), buttonType: this.get_$buttonType(), buttonBehaviour: this.get_$buttonBehaviour(), effectiveCaption: this.get_$effectiveCaption(), buttonClickAction: ss.mkdel(this, this.buttonClickAction), tooltipText: this.get_$tooltipText(), enabledState: this.get_$enabledState(), imageUrl: this.get_imageUrl(), contentWidth: this.$parentZoneViewModel.get_contentWidth(), contentHeight: this.$parentZoneViewModel.get_contentHeight(), width: this.get_width(), height: this.get_height(), hoverActivated: ss.mkdel(this, this.$hoverActivated), hoverDeactivated: ss.mkdel(this, this.$hoverDeactivated), hoverActive: this.$hoverActive, handleAuthoringDoubleClick: ss.mkdel(this, this.$handleAuthoringDoubleClick), handlePermissionsError: ss.mkdel(this, this.$handlePermissionsError), captionTextFont: this.get_captionTextFont(), captionTextColor: this.get_captionTextColor(), captionFontSize: this.get_captionFontSize(), captionFontIsBold: this.get_captionFontIsBold(), captionFontIsItalic: this.get_captionFontIsItalic(), captionFontIsUnderlined: this.get_captionFontIsUnderlined(), handleFontLoaded: ss.mkdel(this, this.$handleFontLoaded) };
		},
		$hoverActivated: function ButtonZoneViewModel$HoverActivated() {
			this.$hoverActive = true;
			this.incrementProps();
		},
		$hoverDeactivated: function ButtonZoneViewModel$HoverDeactivated() {
			this.$hoverActive = false;
			this.incrementProps();
		},
		$handleAuthoringDoubleClick: function ButtonZoneViewModel$HandleAuthoringDoubleClick() {
			var $t1 = new tab.GetButtonConfigDialogCmd();
			$t1.cmdParams['dashboard'] = this.$parentZoneViewModel.get_dashboardSheetName();
			$t1.cmdParams['dashboardObjectStateHandle'] = this.$parentZoneViewModel.get_model().pm.zoneCommon.dashboardObjectCurrentStateHandle;
			$t1.cmdParams['dashboardObjectHandle'] = this.$parentZoneViewModel.get_model().pm.zoneCommon.dashboardObjectHandle;
			$t1.cmdParams['zoneId'] = this.$parentZoneViewModel.get_model().pm.zoneCommon.zoneId | 0;
			$t1.cmdParams['fontFamilies'] = tab.FormattingUtil.compatibleFontNameList();
			$t1.cmdParams['fontSizes'] = ss.cast(tab.FormattingUtil.fontSizes, Array);
			$t1.invoke();
		},
		buttonClickAction: function ButtonZoneViewModel$ButtonClickAction() {
			var saveCommand = tab.CommandSerializer.deserialize(this.get_$clickActionString().toString(), false);
			tab.ServerCommands.executeServerCommand(saveCommand, 'afterDelay', null, null);
		},
		$handleResizeZone: function ButtonZoneViewModel$HandleResizeZone() {
			this.incrementProps();
		},
		$handleContentUpdate: function ButtonZoneViewModel$HandleContentUpdate() {
			this.incrementProps();
		},
		$handlePermissionsError: function ButtonZoneViewModel$HandlePermissionsError() {
			$tab_DetailedErrorDialog.show(tab.Strings.DashboardButtonNoPermissions, tab.Strings.DashboardButtonAccessDenied, null);
		},
		$handleFontLoaded: function ButtonZoneViewModel$HandleFontLoaded() {
			this.incrementProps();
		}
	}, ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object])]);
	ss.initClass($tab_CancelDialog, $asm, {
		get_$cancelSuccessAction: function CancelDialog$get_CancelSuccessAction() {
			return this.$2$CancelSuccessActionField;
		},
		set_$cancelSuccessAction: function CancelDialog$set_CancelSuccessAction(value) {
			this.$2$CancelSuccessActionField = value;
		},
		get_$cancelFailureAction: function CancelDialog$get_CancelFailureAction() {
			return this.$2$CancelFailureActionField;
		},
		set_$cancelFailureAction: function CancelDialog$set_CancelFailureAction(value) {
			this.$2$CancelFailureActionField = value;
		},
		get_$handleRef: function CancelDialog$get_HandleRef() {
			return this.$2$HandleRefField;
		},
		set_$handleRef: function CancelDialog$set_HandleRef(value) {
			this.$2$HandleRefField = value;
		},
		get_$title: function CancelDialog$get_Title() {
			return this.$2$TitleField;
		},
		set_$title: function CancelDialog$set_Title(value) {
			this.$2$TitleField = value;
		},
		handleCommandCompleted: function CancelDialog$HandleCommandCompleted() {
			if (!tab.FeatureFlags.isEnabled('CommandCancellation')) {
				return;
			}
			if (!ss.staticEquals(this.$cancelClickTime, null)) {
				return;
			}
			if (this.$dialogIsNotYetReset()) {
				var dialogCloseTime = new Date();
				$tab_CancelDialogTelemetry.$logCancelDialogNeverCanceledEvent(this.$currentCommand.get_commandName(), this.$dialogShownTime, dialogCloseTime);
			}
			this.closeAndResetDialog();
		},
		handleCommandError: function CancelDialog$HandleCommandError() {
			this.closeAndResetDialog();
		},
		handleCommandStarted: function CancelDialog$HandleCommandStarted(command) {
			if (!tab.FeatureFlags.isEnabled('CommandCancellation')) {
				return;
			}
			this.$currentCommand = command;
			this.$showDialogTimeout = window.setTimeout(ss.mkdel(this, this.$showDialog), this.$dialogShowDelay);
		},
		$showDialog: function CancelDialog$ShowDialog() {
			if (!tab.FeatureFlags.isEnabled('CommandCancellation') || !this.$currentCommand.get_isCancelable()) {
				return;
			}
			if (ss.isNullOrUndefined(this.$currentCommand) || ss.isNullOrUndefined(this.$currentCommand.get_remoteCommands())) {
				return;
			}
			var remoteCommands = this.$currentCommand.get_remoteCommands();
			ss.Debug.assert(remoteCommands.length === 1, 'Cancellation requires exactly 1 remote command.');
			if (remoteCommands.length !== 1) {
				return;
			}
			var remoteCommand = remoteCommands[0];
			if (ss.isNullOrUndefined($tab_CancelDialog.instanceElement)) {
				this.parentNode = document.createElement('div');
				var props = { cancel: ss.mkdel(this, function() {
					this.onCancel(remoteCommand);
				}), title: this.get_$title(), handleRef: this.get_$handleRef() };
				$tab_CancelDialog.instanceElement = React.createElement($tab_CancelDialogComponent, props);
				ReactDOM.render($tab_CancelDialog.instanceElement, this.parentNode);
				this.$dialogShownTime = new Date();
			}
		},
		onCancel: function CancelDialog$OnCancel(remoteCommand) {
			this.$cancelClickTime = new Date();
			tab.CancelCommands.cancelRunningCommand(remoteCommand, ss.mkdel(this, this.$onCancelSuccess), ss.mkdel(this, this.$onCancelFailure));
		},
		$dialogIsNotYetReset: function CancelDialog$DialogIsNotYetReset() {
			return ss.isValue(this.$currentCommand);
		},
		closeAndResetDialog: function CancelDialog$CloseAndResetDialog() {
			this.$showDialogTimeout = tab.MiscUtil.clearTimeout(this.$showDialogTimeout);
			$tab_CancelDialog.instanceElement = null;
			this.$dialogShownTime = null;
			this.$cancelClickTime = null;
			this.$currentCommand = null;
			_.defer(ss.mkdel(this, this.dispose));
		},
		$onCancelSuccess: function CancelDialog$OnCancelSuccess(cancelStatus) {
			if (!ss.staticEquals(this.get_$cancelSuccessAction(), null)) {
				this.get_$cancelSuccessAction()(cancelStatus);
			}
			if (this.$dialogIsNotYetReset()) {
				var dialogCloseTime = new Date();
				$tab_CancelDialogTelemetry.$logCancelDialogSuccessEvent(this.$currentCommand.get_commandName(), cancelStatus, this.$dialogShownTime, this.$cancelClickTime, dialogCloseTime);
			}
			this.closeAndResetDialog();
		},
		$onCancelFailure: function CancelDialog$OnCancelFailure() {
			if (!ss.staticEquals(this.get_$cancelFailureAction(), null)) {
				this.get_$cancelFailureAction()();
			}
			if (this.$dialogIsNotYetReset()) {
				var dialogCloseTime = new Date();
				$tab_CancelDialogTelemetry.$logCancelDialogFailureEvent(this.$currentCommand.get_commandName(), this.$dialogShownTime, this.$cancelClickTime, dialogCloseTime);
			}
			this.closeAndResetDialog();
		}
	}, $tab_BaseDisposableDialog, [ss.IDisposable, tab.IWaitForCommands]);
	ss.initClass($tab_CancelDialogComponent, $asm, {
		render: function CancelDialogComponent$Render() {
			return React.createElement(SharedWidgets.DialogWidget, { children: this.$getContent(), ref: this.props.handleRef, testId: 'CancelDialog', isModal: true, type: 2, positioningBehavior: 0, dialogBodyStyle: { height: 200 + 'px', overflow: 'visible', padding: 0 }, onCloseRequest: ss.mkdel(this, function() {
				this.$cancel();
			}), shouldReturnFocusOnClose: false, shouldAdjustPositionOnWindowResize: true, shouldRecenterOnUpdate: true, dialogWidth: 375, showFooter: false, title: (ss.isNullOrEmptyString(this.props.title) ? tab.Strings.CancelDialogProcessingStatus : this.props.title), zIndex: tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex });
		},
		$getContent: function CancelDialogComponent$GetContent() {
			return React.createElement(Cancel.WaitingComponent, { onButtonClick: ss.mkdel(this, this.$cancel), buttonType: 3, buttonLabel: (this.state.isCanceling ? tab.Strings.CancelDialogCancellingStatus : tab.Strings.DialogButtonCancel), disableButton: this.state.isCanceling, title: (ss.isNullOrEmptyString(this.props.title) ? tab.Strings.CancelDialogProcessingStatus : this.props.title) });
		},
		$cancel: function CancelDialogComponent$Cancel() {
			this.props.cancel();
			this.setState({ isCanceling: true });
		}
	}, spiff.PureRenderComponent);
	ss.initClass($tab_CancelDialogTelemetry, $asm, {});
	ss.initClass($tab_CanvasRenderer, $asm, {
		get_renderOffset: function CanvasRenderer$get_RenderOffset() {
			return this.$renderOffset;
		},
		set_renderOffset: function CanvasRenderer$set_RenderOffset(value) {
			this.$renderOffset = value;
			this.get_currentContext().translate(-this.$renderOffset.x, -this.$renderOffset.y);
		},
		get_currentCanvas: function CanvasRenderer$get_CurrentCanvas() {
			return (this.$renderOffscreen ? this.$offscreenCanvas : this.$mainCanvas);
		},
		get_currentContext: function CanvasRenderer$get_CurrentContext() {
			return (this.$renderOffscreen ? this.$offscreenContext : this.$mainContext);
		},
		get_visibleRect: function CanvasRenderer$get_VisibleRect() {
			if (ss.isValue(this.$cachedVisibleRect)) {
				return this.$cachedVisibleRect;
			}
			var effectiveWidth = $tab_CanvasRenderer.$getEffectiveWidth(this.get_currentCanvas(), this.get_currentCanvas().width);
			var effectiveHeight = $tab_CanvasRenderer.$getEffectiveHeight(this.get_currentCanvas(), this.get_currentCanvas().height);
			return { x: this.$renderOffset.x, y: this.$renderOffset.y, w: effectiveWidth, h: effectiveHeight };
		},
		clear: function CanvasRenderer$Clear() {
			this.clearRect(this.get_visibleRect());
		},
		reset: function CanvasRenderer$Reset() {
			this.$renderOffscreen = false;
			this.$offscreenContext = null;
			this.$offscreenCanvas = null;
			this.get_currentContext().reset();
			this.$renderOffset = { x: 0, y: 0 };
			this.clearPrevTextRunInfo();
		},
		setRenderOffsetNoTranslate: function CanvasRenderer$SetRenderOffsetNoTranslate(offset) {
			this.$renderOffset = offset;
		},
		clearRect: function CanvasRenderer$ClearRect(rect) {
			this.get_currentContext().clearRect(rect.x, rect.y, rect.w, rect.h);
		},
		isRectVisible: function CanvasRenderer$IsRectVisible(rect) {
			return tab.RectXYUtil.intersectsWith(rect, this.get_visibleRect());
		},
		beginOffScreenRender: function CanvasRenderer$BeginOffScreenRender(bounds) {
			if (this.$renderOffscreen) {
				return;
			}
			if (ss.isValue(bounds)) {
				this.$offscreenBounds = tab.RectXYUtil.intersect(bounds, this.get_visibleRect());
			}
			else {
				this.$offscreenBounds = this.get_visibleRect();
			}
			if (ss.isNullOrUndefined(this.$offscreenCanvas)) {
				var $t1 = document.createElement('canvas');
				this.$offscreenCanvas = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
				var actual = { w: this.$mainCanvas.width, h: this.$mainCanvas.height };
				var effective = { w: $tab_CanvasRenderer.$getEffectiveWidth(this.$mainCanvas, 0), h: $tab_CanvasRenderer.$getEffectiveHeight(this.$mainCanvas, 0) };
				$tab_CanvasUtil.densifyCanvasUsingSize(this.$offscreenCanvas, actual, effective);
			}
			if (ss.isNullOrUndefined(this.$offscreenContext)) {
				this.$offscreenContext = $tab_CanvasRenderer.getRenderContext(this.$offscreenCanvas, 'transparent');
			}
			else {
				this.$offscreenContext.reset();
			}
			var pixelRatio = this.$mainCanvas.width / $tab_CanvasRenderer.$getEffectiveWidth(this.$mainCanvas, this.$mainCanvas.width);
			if (pixelRatio !== 1) {
				$tab_CanvasUtil.scaleCanvasDrawing(this.$offscreenContext, pixelRatio);
			}
			this.$offscreenContext.setTransform(this.$mainContext.get_transformation());
			this.$renderOffscreen = true;
			var toClear = tab.RectXYUtil.outsetRect(this.$offscreenBounds, 1, 1);
			tab.RectXYUtil.intersectInPlace(toClear, this.get_visibleRect());
			this.clearRect(toClear);
		},
		endOffScreenRender: function CanvasRenderer$EndOffScreenRender(alpha) {
			if (!this.$renderOffscreen) {
				return;
			}
			this.$renderOffscreen = false;
			this.$mainContext.save();
			this.$mainContext.set_alpha(alpha);
			this.$mainContext.resetTransform();
			if (ss.isNullOrUndefined(this.$offscreenBounds)) {
				this.$mainContext.drawImage1(this.$offscreenCanvas, 0, 0);
			}
			else if (!tab.RectXYUtil.isEmpty(this.$offscreenBounds)) {
				var pixelRatio = this.$mainContext.pixelRatio;
				var xPos = Math.max(0, Math.floor((this.$offscreenBounds.x - this.$renderOffset.x) * pixelRatio));
				var yPos = Math.max(0, Math.floor((this.$offscreenBounds.y - this.$renderOffset.y) * pixelRatio));
				var width = Math.min(this.$mainCanvas.width, Math.ceil(this.$offscreenBounds.w * pixelRatio));
				var height = Math.min(this.$mainCanvas.height, Math.ceil(this.$offscreenBounds.h * pixelRatio));
				this.$mainContext.drawImage5(this.$offscreenCanvas, xPos, yPos, width, height, xPos, yPos, width, height);
			}
			this.$mainContext.restore();
		},
		renderFilledRectangle: function CanvasRenderer$RenderFilledRectangle(x, y, width, height, color) {
			var w2 = width / 2;
			var h2 = height / 2;
			var context = this.get_currentContext();
			context.set_shapeFillStyle(color);
			context.fillRect(x - w2, y - h2, width, height);
		},
		renderFilledWedge: function CanvasRenderer$RenderFilledWedge(x, y, radius, theta1, theta2, color, anticlockwise) {
			var angle1 = $tab_CanvasRenderer.toCanvasAngle(theta1);
			var angle2 = $tab_CanvasRenderer.toCanvasAngle(theta2);
			if (Math.abs(angle2 - angle1) < $tab_CanvasRenderer.angleEpsilon) {
				return;
			}
			if (ss.isNullOrUndefined(anticlockwise)) {
				anticlockwise = false;
			}
			var context = this.get_currentContext();
			context.beginPath();
			context.moveTo(x, y);
			angle1 = $tab_CanvasRenderer.$limitPrecision(angle1);
			angle2 = $tab_CanvasRenderer.$limitPrecision(angle2);
			context.arc(x, y, radius, angle1, angle2, anticlockwise);
			context.closePath();
			context.set_shapeFillStyle(color);
			context.fill();
		},
		createStyleSettersAndSetDominantStyle: function CanvasRenderer$CreateStyleSettersAndSetDominantStyle(styleDict) {
			if (ss.isNullOrUndefined(styleDict)) {
				return function(styleNum) {
				};
			}
			var stylesDifferForValue = [];
			styleDict.forEach(ss.mkdel(this, function(styleValues, key) {
				var allSame = true;
				var refValue = styleValues.v[(styleValues.c ? 0 : 0)];
				for (var ii = 1; ii < styleValues.length; ++ii) {
					if (!ss.referenceEquals(refValue, styleValues.v[(styleValues.c ? 0 : ii)])) {
						allSame = false;
						break;
					}
				}
				if (allSame) {
					this.setTextStyleProperty(key, refValue);
				}
				else if (key !== 'text_style_color') {
					stylesDifferForValue.push(key);
				}
			}));
			var toRet = ss.mkdel(this, function(styleNum1) {
				for (var $t1 = 0; $t1 < stylesDifferForValue.length; $t1++) {
					var styleKey = stylesDifferForValue[$t1];
					var styleColumn = styleDict.get(styleKey);
					this.setTextStyleProperty(styleKey, styleColumn.v[(styleColumn.c ? 0 : styleNum1)]);
				}
			});
			return toRet;
		},
		setTextStyleProperty: function CanvasRenderer$SetTextStyleProperty(styleKey, styleVal) {
			switch (styleKey) {
				case 'font': {
					this.get_currentContext().set_font(styleVal);
					break;
				}
				case 'text_orientation': {
					this.get_currentContext().set_textAngle(styleVal);
					break;
				}
				case 'text_alignment': {
					this.get_currentContext().set_textAlign(styleVal);
					break;
				}
				case 'alpha':
				case 'text_style_color': {
					break;
				}
				case 'text_decoration': {
					this.get_currentContext().set_shouldUnderlineText(!!styleVal);
					break;
				}
				default: {
					break;
				}
			}
		},
		renderText: function CanvasRenderer$RenderText(text, x, y, maxWidth, color, multiRunText) {
			if (multiRunText && ss.isValue(this.$prevTextInfo) && this.$prevTextInfo.$alignsWith(x, y)) {
				var drawPoint = this.$prevTextInfo.$getNewPosition(x, y);
				x = drawPoint.x;
				y = drawPoint.y;
			}
			else {
				this.clearPrevTextRunInfo();
			}
			if (ss.isValue(color)) {
				this.get_currentContext().set_textFillStyle(color);
			}
			if (maxWidth > 0) {
				if (!multiRunText) {
					text = ss.trimEndString(text);
				}
				this.get_currentContext().fillText2(text, x, y, maxWidth);
			}
			else {
				this.get_currentContext().fillText1(text, x, y);
			}
			if (multiRunText) {
				var width = this.get_currentContext().measureText(text).width;
				var endAligned = this.get_currentContext().get_textAlign() === 'end';
				var textAngle = this.get_currentContext().get_textAngle();
				var orientation;
				if (textAngle > 1) {
					orientation = 'down';
				}
				else if (textAngle < -1) {
					orientation = 'up';
				}
				else {
					orientation = 'horizontal';
				}
				this.$prevTextInfo = new $tab_$TextRunLayoutInfo(x, y, width, endAligned, orientation);
			}
			else {
				this.clearPrevTextRunInfo();
			}
		},
		clearPrevTextRunInfo: function CanvasRenderer$ClearPrevTextRunInfo() {
			this.$prevTextInfo = null;
		},
		strokeCurrentPath: function CanvasRenderer$StrokeCurrentPath(strokeWidth, color) {
			var ctx = this.get_currentContext();
			ctx.set_lineWidth(strokeWidth);
			ctx.set_strokeStyle(color);
			ctx.stroke();
		},
		fillCurrentPath: function CanvasRenderer$FillCurrentPath(color) {
			var ctx = this.get_currentContext();
			ctx.set_shapeFillStyle(color);
			ctx.fill();
		},
		startCachingVisibleRect: function CanvasRenderer$StartCachingVisibleRect() {
			this.$cachedVisibleRect = null;
			this.$cachedVisibleRect = this.get_visibleRect();
		},
		stopCachingVisibleRect: function CanvasRenderer$StopCachingVisibleRect() {
			this.$cachedVisibleRect = null;
		}
	});
	ss.initClass($tab_CanvasUtil, $asm, {});
	ss.initClass($tab_CommandExecutedEventArgs, $asm, {}, ss.EventArgs);
	ss.initClass($tab_CommandsTelemetryUtils, $asm, {});
	ss.initClass($tab_CommonBannerProviderImpl, $asm, {
		dispose: function CommonBannerProviderImpl$Dispose() {
			this.$disposables.dispose();
		},
		showErrorBanner: function CommonBannerProviderImpl$ShowErrorBanner(message, actionMessage, onActionLink, autoDismiss) {
			this.$showBanner({ testId: 'banner-error', toastType: 'error', message: message, actionMessage: actionMessage }, onActionLink);
		},
		showSuccessBanner: function CommonBannerProviderImpl$ShowSuccessBanner(message, actionMessage, onActionLink, autoDismiss) {
			this.$showBanner({ testId: 'banner-success', toastType: 'success', message: message, actionMessage: actionMessage, autoDismiss: autoDismiss }, onActionLink);
		},
		$showBanner: function CommonBannerProviderImpl$ShowBanner(props, onActionlink) {
			var parentNode = document.createElement('div');
			props.topLeftYPx = tabBootstrap.VizLayoutConstants.get_authoringMenuBarHeight();
			props.onCloseRequest = function() {
				ReactDOM.unmountComponentAtNode(parentNode);
			};
			props.onAction = function() {
				onActionlink();
				props.onCloseRequest();
			};
			props.zIndex = 1031;
			var el = React.createElement(SharedWidgets.ToastWidget, props);
			ReactDOM.render(el, parentNode);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$removeReactNode(parentNode);
			})));
		},
		$removeReactNode: function CommonBannerProviderImpl$RemoveReactNode(node) {
			if (!ss.isNullOrUndefined(node)) {
				_.defer(function() {
					ReactDOM.unmountComponentAtNode(node);
					$(node).remove();
				});
			}
		}
	}, null, [tab.ICommonBannerProvider, ss.IDisposable]);
	ss.initClass($tab_CommonDialogProviderImpl, $asm, {
		showAlertDialog: function CommonDialogProviderImpl$ShowAlertDialog(content, title) {
			var parentNode = $tab_CommonDialogProviderImpl.$createDialogParentNode();
			var props = {
				content: content,
				title: title,
				contentSelectable: false,
				onDialogCloseRequested: function() {
					ReactDOM.unmountComponentAtNode(parentNode);
				}
			};
			var el = React.createElement($tab_SimpleTextContentDialog, props);
			ReactDOM.render(el, parentNode);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$removeReactNode(parentNode);
			})));
		},
		showConfirmationDialog: function CommonDialogProviderImpl$ShowConfirmationDialog(content, title, isError, onYes, onNo) {
			var parentNode = $tab_CommonDialogProviderImpl.$createDialogParentNode();
			var props = {
				content: content,
				title: title,
				contentSelectable: isError,
				dialogButtons: [],
				onDialogCloseRequested: function() {
					ReactDOM.unmountComponentAtNode(parentNode);
				}
			};
			if (isError) {
				$tab_CommonDialogProviderTelemetry.$logErrorAlert(title, content, null);
			}
			props.dialogButtons.push({ buttonClickHandler: onYes, buttonText: tab.Strings.DialogYesButtonText, testId: 'YesBtn', buttonType: 5 });
			props.dialogButtons.push({ buttonClickHandler: onNo, buttonText: tab.Strings.DialogNoButtonText, testId: 'NoBtn', buttonType: 3 });
			var el = React.createElement($tab_SimpleTextContentDialog, props);
			ReactDOM.render(el, parentNode);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$removeReactNode(parentNode);
			})));
		},
		ShowErrorDialog: function CommonDialogProviderImpl$ShowErrorDialog(content, title, links) {
			$tab_CommonDialogProviderTelemetry.$logErrorAlert(title, content, links);
			$tab_DetailedErrorDialog.show(content, title, links);
		},
		ShowLocalErrorDialog: function CommonDialogProviderImpl$ShowLocalErrorDialog(content, title, links) {
			var parentNode = $tab_CommonDialogProviderImpl.$createDialogParentNode();
			var props = {
				content: content,
				title: title,
				contentSelectable: true,
				dialogButtons: [{ buttonClickHandler: null, buttonText: tab.Strings.DialogButtonOK, testId: 'OKBtn', buttonType: 2 }],
				onDialogCloseRequested: function() {
					ReactDOM.unmountComponentAtNode(parentNode);
				}
			};
			$tab_CommonDialogProviderTelemetry.$logErrorAlert(title, content, null);
			if (tab.FeatureFlags.isEnabled('WebErrorDialog')) {
				props.dialogWidth = 500;
				var el = React.createElement($tab_LegacyErrorDialog, props);
				ReactDOM.render(el, parentNode);
			}
			else {
				props.dialogWidth = 250;
				var el1 = React.createElement($tab_SimpleTextContentDialog, props);
				ReactDOM.render(el1, parentNode);
			}
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$removeReactNode(parentNode);
			})));
		},
		showSheetAuthenticationOverlay: function CommonDialogProviderImpl$ShowSheetAuthenticationOverlay(dataSourceConnectionAttemptErrorResponse, connectionAttemptInfo, onProceed) {
			$tab_CommonDialogProviderTelemetry.$logDataSourceConnectionError('AuthenticationOverlay', dataSourceConnectionAttemptErrorResponse);
			var widget = new $tab_BadPasswordAuthPromptOverlayWidget(dataSourceConnectionAttemptErrorResponse, connectionAttemptInfo, onProceed);
			widget.show();
			this.$disposables.add$1(widget);
		},
		showGenericDataSourceErrorOverlay: function CommonDialogProviderImpl$ShowGenericDataSourceErrorOverlay(dataSourceConnectionAttemptErrorResponse, connectionAttemptInfo, onProceed) {
			$tab_CommonDialogProviderTelemetry.$logDataSourceConnectionError('GenericErrorOverlay', dataSourceConnectionAttemptErrorResponse);
			var widget = new $tab_GenericDataSourceExceptionOverlayWidget(dataSourceConnectionAttemptErrorResponse, connectionAttemptInfo, onProceed);
			widget.show();
			this.$disposables.add$1(widget);
		},
		showSheetAuthenticationDialog: function CommonDialogProviderImpl$ShowSheetAuthenticationDialog(dataSourceConnectionAttemptErrorResponse, onProceed, onCancel) {
			$tab_CommonDialogProviderTelemetry.$logDataSourceConnectionError('AuthenticationDialog', dataSourceConnectionAttemptErrorResponse);
			var dialog = new $tab_DataSourceConnectionErrorDialog(dataSourceConnectionAttemptErrorResponse, onProceed, onCancel);
			dialog.show();
			this.$disposables.add$1(dialog);
		},
		showGenericDataSourceErrorDialog: function CommonDialogProviderImpl$ShowGenericDataSourceErrorDialog(dataSourceConnectionAttemptErrorResponse, onProceed, onCancel) {
			$tab_CommonDialogProviderTelemetry.$logDataSourceConnectionError('GenericErrorDialog', dataSourceConnectionAttemptErrorResponse);
			var dialog = new $tab_GenericDataSourceExceptionDialogWidget(dataSourceConnectionAttemptErrorResponse, onProceed, onCancel);
			dialog.show();
			this.$disposables.add$1(dialog);
		},
		showFileDownloadDialog: function CommonDialogProviderImpl$ShowFileDownloadDialog(title, message, url, urlTarget) {
			var dialog = new $tab_DownloadFileDialog(title, message, url, urlTarget);
			dialog.show();
			this.$disposables.add$1(dialog);
		},
		showConnectionMissingFileDialog: function CommonDialogProviderImpl$ShowConnectionMissingFileDialog(filename, connectionName, connectionClass) {
			var result = $.Deferred();
			var dialog = new $tab_ConnectionMissingFileDialog(filename, connectionName, connectionClass);
			dialog.add_handled(function(handled) {
				result.resolve(handled);
			});
			dialog.show();
			this.$disposables.add$1(dialog);
			return result.promise();
		},
		showEditConnectionInformationDialog: function CommonDialogProviderImpl$ShowEditConnectionInformationDialog(connectionAttemptInfo, isEditingDataSource) {
			var result = $.Deferred();
			if (!tsConfig.is_authoring || !tab.ApplicationModel.get_instance().get_workbook().get_dataSchema().getDataSource(connectionAttemptInfo.datasource).get_isDataTabViewSupported()) {
				return result.resolve(false).promise();
			}
			if (isEditingDataSource) {
				this.$showEditConnectionFormDialog(connectionAttemptInfo).done(function(submitted) {
					result.resolve(submitted);
				});
			}
			else {
				var dialog = new $tab_EditConnectionInformationDialog(connectionAttemptInfo);
				dialog.add_handled(ss.mkdel(this, function(confirmed) {
					if (confirmed) {
						this.$showEditConnectionFormDialog(connectionAttemptInfo).done(function(submitted1) {
							result.resolve(submitted1);
						});
					}
					else {
						result.resolve(false);
					}
				}));
				dialog.show();
			}
			return result.promise();
		},
		$showEditConnectionFormDialog: function CommonDialogProviderImpl$ShowEditConnectionFormDialog(connectionAttemptInfo) {
			var result = $.Deferred();
			if (connectionAttemptInfo.connectionErrorStage !== 'load-metadata-failed') {
				tab.ModuleManager.load(tab.IConnectionDialogModule).call(null, []).done(function(module) {
					module.showEditConnectionDialog(tab.DataConnectionUtils.connectionNameFromFullConnectionName(connectionAttemptInfo.connectionFullName), function(connectionParams) {
						tab.VizClientCommands.setUIMode('data-tab', 'ReconnectEditConnection', '');
						result.resolve(true);
					}, function() {
						result.resolve(false);
					});
				});
			}
			else {
				tab.VizClientCommands.setUIMode('data-tab', 'ReconnectEditConnection', '');
				result.resolve(true);
			}
			return result.promise();
		},
		showConnectionSignInDialog: function CommonDialogProviderImpl$ShowConnectionSignInDialog(connectionAttemptInfo, isEditingDataSource) {
			var deferred = $.Deferred();
			var dataSourceConnectionAttemptInfo = connectionAttemptInfo.dataSourceConnectionAttemptInfos[0];
			if (tab.TabbedAuthenticationDialogCommands.useTabbedAuthDialog(connectionAttemptInfo)) {
				tab.TabbedAuthenticationDialogCommands.showTabbedAuthenticationDialog(tab.DataConnectionUtils.getConnectionNames(connectionAttemptInfo), isEditingDataSource, connectionAttemptInfo);
				return deferred;
			}
			else {
				var displayAttrs = [];
				for (var i = 0; i < connectionAttemptInfo.dataSourceConnectionAttemptInfos[0].connectionAttrDisplayNames.length; ++i) {
					displayAttrs.push([dataSourceConnectionAttemptInfo.connectionAttrDisplayNames[i], dataSourceConnectionAttemptInfo.connectionAttrDisplayValues[i]]);
				}
				tab.ModuleManager.load(tab.IConnectionDialogModule).call(null, []).done(function(module) {
					module.showSignInDialog(dataSourceConnectionAttemptInfo.exceptionAttrs, Array.prototype.slice.call(displayAttrs), dataSourceConnectionAttemptInfo.datasourceCaption, tab.DataConnectionUtils.connectionNameFromFullConnectionName(dataSourceConnectionAttemptInfo.connectionFullName), dataSourceConnectionAttemptInfo.connectionTypeLabel, function(unused) {
						deferred.resolve();
					}, function() {
						deferred.reject();
					});
				});
				return deferred.promise();
			}
		},
		dispose: function CommonDialogProviderImpl$Dispose() {
			this.$disposables.dispose();
		},
		$removeReactNode: function CommonDialogProviderImpl$RemoveReactNode(node) {
			ReactDOM.unmountComponentAtNode(node);
			$(node).remove();
		}
	}, null, [tab.ICommonDialogProvider, ss.IDisposable]);
	ss.initClass($tab_CommonDialogProviderTelemetry, $asm, {});
	ss.initClass($tab_CompletionMonitor, $asm, {
		reset: function CompletionMonitor$Reset(type) {
			this.$internalSemaphores[type] = 0;
			this.$actionCompleted[type] = null;
		},
		hold: function CompletionMonitor$Hold(type) {
			if (!ss.keyExists(this.$internalSemaphores, type)) {
				this.$internalSemaphores[type] = 0;
			}
			this.$internalSemaphores[type] += 1;
			return new $tab_CompletionToken(type, ss.mkdel(this, function() {
				this.$release(type);
			}));
		},
		$release: function CompletionMonitor$Release(type) {
			if (this.$internalSemaphores[type] <= 0) {
				return;
			}
			this.$internalSemaphores[type] -= 1;
			if (this.$internalSemaphores[type] === 0 && !ss.staticEquals(this.$actionCompleted[type], null)) {
				this.$actionCompleted[type]();
			}
		},
		addCompletedHandler: function CompletionMonitor$AddCompletedHandler(type, a) {
			var autoDestructingAction = null;
			autoDestructingAction = ss.mkdel(this, function() {
				if (!ss.staticEquals(a, null)) {
					a();
				}
				this.$actionCompleted[type] = ss.delegateRemove(this.$actionCompleted[type], autoDestructingAction);
			});
			this.$actionCompleted[type] = ss.delegateCombine(this.$actionCompleted[type], autoDestructingAction);
		}
	});
	ss.initEnum($tab_CompletionMonitorType, $asm, { unspecified: 0, twoPassRendering: 1 });
	ss.initClass($tab_CompletionToken, $asm, {
		dispose: function CompletionToken$Dispose() {
			if (!ss.staticEquals(this.$disposeAction, null)) {
				this.$disposeAction();
				this.$disposeAction = null;
			}
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_ConnectionMissingFileDialog, $asm, {
		add_handled: function ConnectionMissingFileDialog$add_Handled(value) {
			this.$2$HandledField = ss.delegateCombine(this.$2$HandledField, value);
		},
		remove_handled: function ConnectionMissingFileDialog$remove_Handled(value) {
			this.$2$HandledField = ss.delegateRemove(this.$2$HandledField, value);
		},
		show: function ConnectionMissingFileDialog$Show() {
			this.parentNode = document.createElement('div');
			$tab_ConnectionMissingFileDialog.$replaceFileDialogCalled = false;
			var props = { key: 'ConnectionMissingFileDialog', content: (this.$missingDirectory ? tab.Strings.ConnectionMissingFileDialogMissingDirectoryText(this.$filename) : tab.Strings.ConnectionMissingFileDialogText(this.$filename)), title: tab.Strings.ConnectionMissingFileDialogTitle, contentSelectable: true, dialogWidth: 500, dialogButtons: [], onDialogCloseRequested: ss.mkdel(this, function() {
				if (!$tab_ConnectionMissingFileDialog.$replaceFileDialogCalled) {
					this.$2$HandledField(false);
				}
				ReactDOM.unmountComponentAtNode(this.parentNode);
			}) };
			props.dialogButtons.push({ buttonClickHandler: this.$onYes, buttonText: tab.Strings.DialogYesButtonText, testId: 'YesBtn', buttonType: 5 });
			props.dialogButtons.push({ buttonClickHandler: null, buttonText: tab.Strings.DialogNoButtonText, testId: 'NoBtn', buttonType: 3 });
			var el = React.createElement($tab_SimpleTextContentDialog, props);
			ReactDOM.render(el, this.parentNode);
		},
		$showReplaceFileDialog: function ConnectionMissingFileDialog$ShowReplaceFileDialog() {
			$tab_ConnectionMissingFileDialog.$replaceFileDialogCalled = true;
			tab.ModuleManager.load(tab.IConnectionDialogModule).call(null, []).done(ss.mkdel(this, function(module) {
				module.showReplaceFileDialog(this.$connectionName, this.$connectionClass).done(ss.mkdel(this, function(handled) {
					this.$2$HandledField(handled);
				})).fail(ss.mkdel(this, function(unused) {
					_.defer(ss.mkdel(this, function() {
						this.$showReplaceFileDialog();
					}));
				}));
			}));
		}
	}, $tab_BaseDisposableDialog, [ss.IDisposable]);
	ss.initClass($tab_CreateSubscriptionFormat, $asm, {});
	ss.initClass($tab_CreateSubscriptionsCheckboxOptions, $asm, {});
	ss.initClass($tab_CssPropertiesFormattingConverterObject, $asm, {
		get_getFontFamily: function CssPropertiesFormattingConverterObject$get_GetFontFamily() {
			if (ss.isNullOrUndefined(this.$cssProperties.fontFamily)) {
				return '';
			}
			else {
				return this.$cssProperties.fontFamily.toString();
			}
		},
		setCSS: function CssPropertiesFormattingConverterObject$SetCSS(newCss) {
			var $t1 = new ss.ObjectEnumerator(newCss);
			try {
				while ($t1.moveNext()) {
					var pair = $t1.current();
					switch (pair.key) {
						case 'font-style': {
							this.$cssProperties.fontStyle = pair.value;
							break;
						}
						case 'font-weight': {
							this.$cssProperties.fontWeight = pair.value;
							break;
						}
						case 'font-stretch': {
							this.$cssProperties.fontStretch = pair.value;
							break;
						}
						case 'font-family': {
							this.$cssProperties.fontFamily = pair.value;
							break;
						}
						default: {
							tab.Log.get(this).error('Failed to convert font information to CSS on button for ' + pair.key, []);
							break;
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
		},
		hasStyleProperty: function CssPropertiesFormattingConverterObject$HasStyleProperty(javascriptPropertyName) {
			switch (javascriptPropertyName) {
				case 'fontStyle': {
					return !ss.isNullOrUndefined(this.$cssProperties.fontStyle);
				}
				case 'fontWeight': {
					return !ss.isNullOrUndefined(this.$cssProperties.fontWeight);
				}
				case 'fontStretch': {
					return !ss.isNullOrUndefined(this.$cssProperties.fontStretch);
				}
				default: {
					tab.Log.get(this).error('Failed to find font information on button for ' + javascriptPropertyName, []);
					return false;
				}
			}
		}
	}, null, [tab.IFormattingConverterObject]);
	ss.initClass($tab_CustomViewsComponent, $asm, {
		handleWidgetPropertyChanged: function CustomViewsComponent$HandleWidgetPropertyChanged(sender, propertyChangedEventArgs) {
		},
		updateWidgetState: function CustomViewsComponent$UpdateWidgetState(newProps) {
		}
	}, ss.makeGenericType(spiff.ReactSpiffAdapter$3, [$tab_CustomViewsView, $tab_CustomViewsProps, Object]));
	ss.initClass($tab_CustomViewsProps, $asm, {});
	ss.initClass($tab_CustomViewsTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_CustomViewsView, $asm, {
		get_dom: function CustomViewsView$get_Dom() {
			return ss.cast(this.get_template(), $tab_CustomViewsTemplate);
		},
		dispose: function CustomViewsView$Dispose() {
			this.get_viewModel().exitManageMode();
			this.get_viewModel().resetViewIfRequired();
			this.get_viewModel().remove_customViewListChanged(ss.mkdel(this, this.$onViewListChanged));
			ss.makeGenericType(spiff.BaseView$1, [$tab_CustomViewsViewModel]).prototype.dispose.call(this);
		},
		$buildCustomViewsContent: function CustomViewsView$BuildCustomViewsContent() {
			this.$buildSaveViewArea();
			this.$buildMyViewsArea();
			this.$buildOtherViewsArea();
			this.$buildManageModeArea();
		},
		$buildSaveViewArea: function CustomViewsView$BuildSaveViewArea() {
			var initialHeight = tab.DoubleUtil.parseDouble(tab.DomUtil.getComputedStyle(this.get_dom().saveViewArea[0]).height);
			this.get_dom().saveViewArea.empty();
			if (this.get_viewModel().get_mode() === $tab_CustomViewsViewModel.modeSelect) {
				if (tsConfig.allow_custom_view_save) {
					var nameInputSpan = $('<span/>').addClass('tab-cv-viewNameInputWrapper');
					this.$viewNameInput = this.$createViewNameInput();
					nameInputSpan.append(this.$viewNameInput.get_inputElement());
					this.$saveButton = this.$createSaveButton();
					nameInputSpan.append(this.$saveButton.element);
					this.get_dom().saveViewArea.append(nameInputSpan);
					this.$updateSaveEnabledState();
					if (tsConfig.allow_custom_view_default) {
						this.$defaultCustomViewCheckbox = this.$createCheckbox(tab.Strings.ToolbarCustomViewsMakeItMyDefault, this.get_viewModel().get_$defaultCheckboxDefault());
						this.get_dom().saveViewArea.append(this.$defaultCustomViewCheckbox.element);
					}
					if (tsConfig.allow_custom_view_share) {
						this.$publicCustomViewCheckbox = this.$createCheckbox(tab.Strings.ToolbarCustomViewsShareItWithOthers, this.get_viewModel().get_$publicCheckboxDefault());
						this.get_dom().saveViewArea.append(this.$publicCustomViewCheckbox.element);
					}
				}
				else {
					this.get_dom().saveViewArea.remove();
				}
			}
			else {
				this.get_dom().saveViewArea.append(this.$buildSaveAreaTitleElement(tab.Strings.ToolbarCustomViewsSaveAreaFillerTextManage));
			}
			if (ss.isValue(initialHeight)) {
				var currentHeight = ss.coalesce(tab.DoubleUtil.parseDouble(tab.DomUtil.getComputedStyle(this.get_dom().saveViewArea[0]).height), 0);
				this.get_dom().saveViewArea.height(Math.max(ss.unbox(initialHeight), currentHeight) + 'px');
			}
		},
		$buildMyViewsArea: function CustomViewsView$BuildMyViewsArea() {
			this.get_dom().myViewsTitle.text(tab.Strings.ToolbarCustomViewsMyViews);
			this.get_dom().myViewsListArea.empty();
			if (ss.count(this.get_viewModel().get_myCustomViews()) > 0) {
				var $t1 = ss.getEnumerator(this.get_viewModel().get_myCustomViews());
				try {
					while ($t1.moveNext()) {
						var cv = $t1.current();
						var listItem = this.$buildCustomViewListItemElement(cv, false);
						ss.Debug.assert(ss.isValue(cv.id), 'CustomizedViews being rendered should always have a non-null Id field');
						this.$listItemElementMap[ss.unbox(cv.id)] = listItem;
						this.$updateViewListItemState(cv);
						this.get_dom().myViewsListArea.append(listItem);
					}
				}
				finally {
					$t1.dispose();
				}
				return;
			}
			if (tsConfig.allow_custom_view_save) {
				this.$renderEmptyListPlaceholder(this.get_dom().myViewsListArea);
				return;
			}
			this.get_dom().myViewsArea.remove();
		},
		$buildOtherViewsArea: function CustomViewsView$BuildOtherViewsArea() {
			if (!tsConfig.allow_custom_view_save && ss.count(this.get_viewModel().get_myCustomViews()) === 0) {
				this.get_dom().otherViewsTitle.hide();
			}
			else {
				this.get_dom().otherViewsTitle.text(tab.Strings.ToolbarCustomViewsOtherViews);
			}
			this.get_dom().otherViewsListArea.empty();
			var originalViewListItem = this.$buildCustomViewListItemElement(null, true);
			this.$originalViewListItemElement = originalViewListItem;
			this.$updateViewListItemState(null);
			this.get_dom().otherViewsListArea.append(originalViewListItem);
			var $t1 = ss.getEnumerator(this.get_viewModel().get_otherCustomViews());
			try {
				while ($t1.moveNext()) {
					var cv = $t1.current();
					var listItem = this.$buildCustomViewListItemElement(cv, true);
					ss.Debug.assert(ss.isValue(cv.id), 'CustomizedViews being rendered should always have a non-null Id field');
					this.$listItemElementMap[ss.unbox(cv.id)] = listItem;
					this.$updateViewListItemState(cv);
					this.get_dom().otherViewsListArea.append(listItem);
				}
			}
			finally {
				$t1.dispose();
			}
		},
		$buildManageModeArea: function CustomViewsView$BuildManageModeArea() {
			if (!tsConfig.allow_custom_view_default && !tsConfig.allow_custom_view_save && ss.count(this.get_viewModel().get_myCustomViews()) === 0) {
				this.get_dom().manageModeControlArea.remove();
				return;
			}
			this.$enterManageModeButton = this.$buildEnterManageModeButton();
			this.get_dom().manageModeControlArea.append(this.$enterManageModeButton.element);
			this.$exitManageModeButton = this.$buildExitManageModeButton();
			this.get_dom().manageModeControlArea.append(this.$exitManageModeButton.element);
			this.$updateManageModeButtonState();
			this.get_viewModel().add_modeChanged(ss.mkdel(this, this.$onModeChanged));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.get_viewModel().remove_modeChanged(ss.mkdel(this, this.$onModeChanged));
			})));
		},
		$createViewNameInput: function CustomViewsView$CreateViewNameInput() {
			var newViewNameInput = spiff.TextInputView.newTextInputView(this.get_viewModel().get_$viewNameInputPrepopulatedText(), tab.Strings.ToolbarCustomViewsViewNamePlaceholder, null, false);
			newViewNameInput.get_inputElement().attr('maxlength', $tab_CustomViewsViewModel.maxCustomViewNameLength.toString());
			newViewNameInput.add_propertyChanged(ss.mkdel(this, this.$onInputTextPropertyChanged));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$viewNameInput.remove_propertyChanged(ss.mkdel(this, this.$onInputTextPropertyChanged));
			})));
			newViewNameInput.add_enterKeyPressed(ss.mkdel(this, this.$onEnterKeyPressedInSaveTextBox));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$viewNameInput.remove_enterKeyPressed(ss.mkdel(this, this.$onEnterKeyPressedInSaveTextBox));
			})));
			this.disposables.add$1(newViewNameInput);
			return newViewNameInput;
		},
		$createSaveButton: function CustomViewsView$CreateSaveButton() {
			var button = spiff.StyledTextButton.createUnificationLabelButton(ss.mkdel(this, this.$onSaveClicked), tab.Strings.ToolbarCustomViewsSave, null, 0, null);
			this.disposables.add$1(button);
			return button;
		},
		$createCheckbox: function CustomViewsView$CreateCheckbox(label, isChecked) {
			var newCheckbox = spiff.LabelToggleButton.newCheckbox(label, false);
			newCheckbox.set_selected(isChecked);
			this.disposables.add$1(newCheckbox);
			return newCheckbox;
		},
		$renderEmptyListPlaceholder: function CustomViewsView$RenderEmptyListPlaceholder(parentViewList) {
			var emptyPlaceholderElem = $('<div/>').addClass('tab-cv-emptyList').text(tab.Strings.ToolbarCustomViewsEmptyPlaceholder);
			parentViewList.append(emptyPlaceholderElem);
		},
		$buildSaveAreaTitleElement: function CustomViewsView$BuildSaveAreaTitleElement(title) {
			return $('<div/>').addClass('tab-customViews-saveAreaTitle').text(title);
		},
		$buildCustomViewListItemElement: function CustomViewsView$BuildCustomViewListItemElement(cv, showOwner) {
			var customViewListItem = $('<div/>').addClass('tab-cv-viewListItem');
			if (showOwner) {
				var ownerElems = this.$buildOwnerWrapper(cv);
				customViewListItem.addClass('tab-cv-viewListItem-showOwner').append(ownerElems);
			}
			else {
				var actionButtons = this.$buildViewActionButtons(cv);
				customViewListItem.append(actionButtons);
			}
			var iconAndNameElems = this.$buildIconAndName(cv);
			customViewListItem.append(iconAndNameElems);
			customViewListItem.click(ss.mkdel(this, function(e) {
				this.$onListItemClicked(cv);
			}));
			return customViewListItem;
		},
		$buildIconAndName: function CustomViewsView$BuildIconAndName(cv) {
			var name = this.$getViewNameDisplayText(cv);
			var leftHandSide = $('<div/>').addClass('tab-cv-viewListItem-leftSide');
			var setDefaultButton = this.$buildSetDefaultButton(cv);
			var viewNameWrapper = $('<span/>').addClass('tab-cv-viewListItem-viewName').text(name).attr('title', name);
			leftHandSide.append(setDefaultButton);
			leftHandSide.append(' ');
			leftHandSide.append(viewNameWrapper);
			return leftHandSide;
		},
		$buildSetDefaultButton: function CustomViewsView$BuildSetDefaultButton(cv) {
			var isDefault = this.get_viewModel().isDefault(cv);
			var setDefaultButton = new spiff.IconButton();
			if (tsConfig.allow_custom_view_default) {
				setDefaultButton.addClass('tab-customViews-viewListItem-setDefaultButton');
				setDefaultButton.onClick(ss.mkdel(this, function(e) {
					this.$onSetDefaultClicked(cv);
				}));
				var iconClass;
				var hoverTooltip;
				if (isDefault) {
					iconClass = 'tab-icons-customView-toggled';
					hoverTooltip = tab.Strings.ToolbarCustomViewsSetDefaultButtonTooltipWhenCurrent;
				}
				else {
					iconClass = 'tab-icons-customView-menu';
					hoverTooltip = tab.Strings.ToolbarCustomViewsSetDefaultButtonTooltip;
				}
				setDefaultButton.set_disabled(isDefault);
				setDefaultButton.setIcon(iconClass);
				setDefaultButton.set_hoverTooltipText(hoverTooltip);
			}
			this.disposables.add$1(setDefaultButton);
			return setDefaultButton.element;
		},
		$buildOwnerWrapper: function CustomViewsView$BuildOwnerWrapper(cv) {
			var owner = this.$getViewOwnerDisplayText(cv);
			var ownerNameWrapper = $('<span/>').addClass('tab-cv-viewListItem-ownerName').text(owner).attr('title', owner);
			return ownerNameWrapper;
		},
		$buildViewActionButtons: function CustomViewsView$BuildViewActionButtons(cv) {
			var actionButtonRoot = $('<div/>').addClass('tab-customViews-viewListItem-actionButtonWrapper');
			var renameViewButton = new spiff.IconButton();
			renameViewButton.addClass('tab-customViews-viewListItem-renameButton');
			renameViewButton.set_hoverTooltipText(tab.Strings.ToolbarCustomViewsRenameButtonTooltip);
			renameViewButton.setIcon('tab-icons-edit');
			renameViewButton.onClick(ss.mkdel(this, function(e) {
				this.onRenameButtonClicked(cv);
			}));
			this.disposables.add$1(renameViewButton);
			actionButtonRoot.append(renameViewButton.element);
			var deleteViewButton = new spiff.IconButton();
			deleteViewButton.addClass('tab-customViews-viewListItem-deleteButton');
			deleteViewButton.set_hoverTooltipText(tab.Strings.ToolbarCustomViewsDeleteButtonTooltip);
			deleteViewButton.setIcon('tab-icons-delete');
			deleteViewButton.onClick(ss.mkdel(this, function(e1) {
				this.$onDeleteClicked(cv);
			}));
			this.disposables.add$1(deleteViewButton);
			actionButtonRoot.append(deleteViewButton.element);
			if (!tab.FeatureFlags.isEnabled('AllowViewersSaveCustomViews') && tsConfig.allow_custom_view_share || tab.FeatureFlags.isEnabled('AllowViewersSaveCustomViews') && tsConfig.allow_custom_view_save) {
				var publicViewButton = new spiff.IconButton();
				publicViewButton.addClass('tab-customViews-viewListItem-toggleHideButton');
				if (cv.isPublic) {
					publicViewButton.set_hoverTooltipText(tab.Strings.ToolbarCustomViewsHideViewButtonTooltipWhenPublic);
					publicViewButton.setIcon('tab-icons-view-public');
				}
				else {
					publicViewButton.set_hoverTooltipText(tab.Strings.ToolbarCustomViewsHideViewButtonTooltipWhenPrivate);
					publicViewButton.setIcon('tab-icons-view-private');
				}
				if (tab.FeatureFlags.isEnabled('AllowViewersSaveCustomViews') && !tsConfig.allow_custom_view_share || this.get_viewModel().get_mode() === $tab_CustomViewsViewModel.modeSelect) {
					publicViewButton.set_disabled(true);
				}
				publicViewButton.onClick(ss.mkdel(this, function(e2) {
					this.$onPublicClick(cv);
				}));
				this.disposables.add$1(publicViewButton);
				actionButtonRoot.append(publicViewButton.element);
			}
			return actionButtonRoot;
		},
		$buildRenameUI: function CustomViewsView$BuildRenameUI(originalName, listItem) {
			ss.Debug.assert(ss.isValue(listItem), 'got null listItem in BuildRenameUI, expected jQueryObject');
			var scalingFactor = tab.DomUtil.getTransformScale(this.get_rootElement());
			var container = $('<div/>').addClass($tab_CustomViewsView.$renameContainerDivClassName);
			container.click(ss.mkdel(this, this.$onRenameClick));
			var renameDiv = $('<div/>').addClass('tab-cv-viewListItem').width(listItem.width() / scalingFactor);
			var actionButtonRoot = $('<div/>').addClass('tab-customViews-viewListItem-actionButtonWrapper');
			var $t1 = new spiff.IconButton();
			$t1.set_hoverTooltipText(tab.Strings.ToolbarCustomViewsRenameUIClearButtonTooltip);
			var clearButton = $t1;
			clearButton.setIcon($tab_CustomViewsView.renameCancelIconClassName);
			clearButton.onClick(ss.mkdel(this, function(e) {
				this.$onClearRenameClicked(listItem);
			}));
			actionButtonRoot.append(clearButton.element);
			renameDiv.append(actionButtonRoot);
			renameDiv.append(this.$createRenameInput(originalName));
			container.append(renameDiv);
			this.get_dom().domRoot.append(container);
			this.$renameTextBox.get_inputElement().focus();
			var top = listItem.position().top;
			var left = listItem.position().left;
			if (!tsConfig.is_mobile) {
				tab.DomUtil.selectAllInputText(this.$renameTextBox.get_inputElement());
			}
			else {
				top /= scalingFactor;
				left /= scalingFactor;
				var offsetParent = listItem[0].parentElement;
				while (ss.isValue(offsetParent) && offsetParent.style.position !== 'absolute' && offsetParent.style.position !== 'relative') {
					offsetParent = offsetParent.parentElement;
				}
				if (ss.isValue(offsetParent)) {
					top += offsetParent.offsetTop;
					left += offsetParent.offsetLeft;
				}
			}
			renameDiv.css('top', top + 'px').css('left', left + 'px');
		},
		$createRenameInput: function CustomViewsView$CreateRenameInput(name) {
			var inputDiv = $('<div/>').addClass('tab-customViews-rename-inputWrapper');
			this.$renameTextBox = spiff.TextInputView.newTextInputView(name, tab.Strings.ToolbarCustomViewsRenameUIPlaceholderText, null, false);
			this.$renameTextBox.get_inputElement().attr('maxlength', $tab_CustomViewsViewModel.maxCustomViewNameLength.toString());
			this.$renameTextBox.get_inputElement().addClass($tab_CustomViewsView.renameInputDivClassName);
			this.$renameTextBox.add_enterKeyPressed(ss.mkdel(this, this.$onEnterKeyPressedInRenameTextBox));
			this.$renameTextBox.add_escapeKeyPressed(ss.mkdel(this, this.$onEscapeKeyPressedInRenameTextBox));
			inputDiv.append(this.$renameTextBox.get_inputElement());
			return inputDiv;
		},
		$enterRenameUI: function CustomViewsView$EnterRenameUI(cv) {
			if (this.$isRenameUIActive()) {
				this.$exitRenameUI(this.$listItemBeingRenamed());
			}
			this.$customizedViewBeingRenamed = cv;
			var listItem = this.$listItemBeingRenamed();
			listItem.children().hide();
			this.$buildRenameUI(cv.name, listItem);
		},
		$exitRenameUI: function CustomViewsView$ExitRenameUI(listItem) {
			if (!this.$isRenameUIActive()) {
				return;
			}
			this.get_dom().domRoot.children('.tab-customViews-rename-container').remove();
			listItem.children().show();
			this.$customizedViewBeingRenamed = null;
			this.$renameTextBox.remove_enterKeyPressed(ss.mkdel(this, this.$onEnterKeyPressedInRenameTextBox));
			this.$renameTextBox.remove_escapeKeyPressed(ss.mkdel(this, this.$onEscapeKeyPressedInRenameTextBox));
			this.$renameTextBox.dispose();
			this.$renameTextBox = null;
		},
		$buildEnterManageModeButton: function CustomViewsView$BuildEnterManageModeButton() {
			var enterButton = spiff.StyledTextButton.createUnificationIconTextButton(ss.mkdel(this, this.$onEnterManageClicked), tab.Strings.ToolbarCustomViewsEnterManageButtonText, 'tab-customViews-enterManageModeButton');
			this.disposables.add$1(enterButton);
			return enterButton;
		},
		$buildExitManageModeButton: function CustomViewsView$BuildExitManageModeButton() {
			var exitButton = spiff.StyledTextButton.createUnificationLabelButton(ss.mkdel(this, this.$onExitManageClicked), tab.Strings.ToolbarCustomViewsExitManageButtonText, 'tab-customViews-exitManageModeButton', 0, null);
			this.disposables.add$1(exitButton);
			return exitButton;
		},
		$updateSaveEnabledState: function CustomViewsView$UpdateSaveEnabledState() {
			var shouldBeDisabled = !this.get_viewModel().shouldSaveButtonBeEnabled(this.$viewNameInput);
			if (ss.isValue(this.$saveButton) && this.$saveButton.get_disabled() !== shouldBeDisabled) {
				var title = (shouldBeDisabled ? tab.Strings.ToolbarCustomViewsSaveButtonDisabledTitle : '');
				this.$saveButton.set_hoverTooltipText(title);
				this.$saveButton.set_disabled(shouldBeDisabled);
			}
		},
		updateViewListsState: function CustomViewsView$UpdateViewListsState() {
			if (ss.count(this.get_viewModel().get_myCustomViews()) === 0 && ss.count(this.get_viewModel().get_otherCustomViews()) === 0 && this.get_viewModel().get_mode() === $tab_CustomViewsViewModel.modeManage) {
				this.get_viewModel().exitManageMode();
			}
			else {
				this.$buildSaveViewArea();
				this.$buildMyViewsArea();
				this.$buildOtherViewsArea();
			}
		},
		$updateViewListItemState: function CustomViewsView$UpdateViewListItemState(cv) {
			var customViewListItem;
			if (this.get_viewModel().isOriginalView(cv)) {
				customViewListItem = this.$originalViewListItemElement;
			}
			else {
				ss.Debug.assert(ss.isValue(cv.id), 'CustomizedViews associated with elements on the dom must have an Id field');
				customViewListItem = this.$listItemForView(cv);
			}
			ss.Debug.assert(ss.isValue(customViewListItem), 'DOM element could not be found for this CustomizedView');
			if (this.get_viewModel().isDefault(cv)) {
				customViewListItem.addClass('tab-cv-viewListItem-defaultView');
			}
			if (this.get_viewModel().isCurrentCustomView(cv)) {
				customViewListItem.addClass('tab-cv-viewListItem-currentView');
			}
			if (ss.isValue(cv) && cv.isPublic) {
				customViewListItem.addClass('tab-cv-viewListItem-publicView');
			}
			var name = this.$getViewNameDisplayText(cv);
			customViewListItem.children('.tab-cv-viewListItem-viewName').text(name).attr('title', name);
		},
		$updateManageModeButtonState: function CustomViewsView$UpdateManageModeButtonState() {
			if (this.get_viewModel().get_mode() === $tab_CustomViewsViewModel.modeSelect) {
				this.$exitManageModeButton.element.css('display', 'none');
				this.$enterManageModeButton.element.css('display', '');
				if (this.get_viewModel().get_hasCustomViews()) {
					this.$enterManageModeButton.set_disabled(false);
					this.$enterManageModeButton.set_hoverTooltipText(null);
				}
				else {
					this.$enterManageModeButton.set_disabled(true);
					this.$enterManageModeButton.set_hoverTooltipText(tab.Strings.ManageCustomViewsDisabledExplanation);
				}
			}
			else if (this.get_viewModel().get_mode() === $tab_CustomViewsViewModel.modeManage) {
				this.$enterManageModeButton.element.css('display', 'none');
				this.$exitManageModeButton.element.css('display', '');
				this.$exitManageModeButton.set_disabled(false);
			}
		},
		$onViewListChanged: function CustomViewsView$OnViewListChanged(sender, e) {
			this.updateViewListsState();
		},
		$onSaveClicked: function CustomViewsView$OnSaveClicked() {
			this.$saveCustomView();
		},
		$saveCustomView: function CustomViewsView$SaveCustomView() {
			var name = this.get_viewModel().cleanCustomViewName(this.$viewNameInput.get_text());
			if (!this.get_viewModel().isValidCustomViewName(name)) {
				tab.Log.get(this).error("SaveCustomView got an invalid view name. This shouldn't be possible because the UI should stop the user from being able to submit the form when the name is invalid.", []);
				return;
			}
			var customView = this.get_viewModel().getMyCustomViewByName(name);
			if (ss.isNullOrUndefined(customView)) {
				customView = new Object();
			}
			customView.name = name;
			customView.isPublic = this.$checkboxExistsAndIsSelected(this.$publicCustomViewCheckbox);
			this.get_viewModel().save$1(customView, null, function(errorMsg) {
				$tab_NotificationViewModel.showNotification(tab.Strings.ToolbarCustomViewsErrorSavingView, null);
			}, this.$checkboxExistsAndIsSelected(this.$defaultCustomViewCheckbox));
			this.$viewNameInput.get_inputElement().blur();
		},
		$onInputTextPropertyChanged: function CustomViewsView$OnInputTextPropertyChanged(element, args) {
			if (ss.equalsT(args.get_propertyName(), spiff.TextInputView.textPropertyName)) {
				this.$updateSaveEnabledState();
			}
		},
		$onEnterKeyPressedInSaveTextBox: function CustomViewsView$OnEnterKeyPressedInSaveTextBox() {
			if (!this.$saveButton.get_disabled()) {
				this.$onSaveClicked();
			}
		},
		$onListItemClicked: function CustomViewsView$OnListItemClicked(cv) {
			if (this.get_viewModel().get_mode() === $tab_CustomViewsViewModel.modeSelect) {
				this.get_viewModel().select(cv);
				this.updateViewListsState();
			}
		},
		$onSetDefaultClicked: function CustomViewsView$OnSetDefaultClicked(cv) {
			this.get_viewModel().setDefault(cv, ss.mkdel(this, function(savedCv) {
				this.updateViewListsState();
			}), function(errorMsg) {
				$tab_NotificationViewModel.showNotification(tab.Strings.ToolbarCustomViewsErrorSettingDefault, null);
			});
		},
		$onDeleteClicked: function CustomViewsView$OnDeleteClicked(cv) {
			var confirm = $tab_AreYouSureButtons.create(null, ss.mkdel(this, function() {
				this.$onDeleteConfirm(cv);
			}));
			this.get_dom().customViewsArea.append(confirm.element);
		},
		$onDeleteConfirm: function CustomViewsView$OnDeleteConfirm(cv) {
			this.get_viewModel().destroyCustomView(cv, ss.mkdel(this, this.updateViewListsState), ss.mkdel(this, function(errorMessage) {
				$tab_NotificationViewModel.showNotification(tab.Strings.ToolbarCustomViewsErrorDeleting, null);
				this.updateViewListsState();
			}));
		},
		$onClearRenameClicked: function CustomViewsView$OnClearRenameClicked(listItem) {
			this.$exitRenameUI(listItem);
		},
		onRenameButtonClicked: function CustomViewsView$OnRenameButtonClicked(cv) {
			this.$enterRenameUI(cv);
		},
		$onEnterKeyPressedInRenameTextBox: function CustomViewsView$OnEnterKeyPressedInRenameTextBox() {
			this.$renameView();
		},
		$onEscapeKeyPressedInRenameTextBox: function CustomViewsView$OnEscapeKeyPressedInRenameTextBox() {
			this.$exitRenameUI(this.$listItemBeingRenamed());
		},
		$onRenameClick: function CustomViewsView$OnRenameClick(e) {
			var elem = $(e.target);
			var isRenameTextBox = elem.hasClass($tab_CustomViewsView.renameInputDivClassName);
			if (!isRenameTextBox) {
				this.$renameView();
			}
		},
		$renameView: function CustomViewsView$RenameView() {
			var newName = this.get_viewModel().cleanCustomViewName(this.$renameTextBox.get_text());
			if (!this.get_viewModel().isValidCustomViewName(newName)) {
				$tab_NotificationViewModel.showNotification(tab.Strings.ToolbarCustomViewsErrorInvalidName, null);
				return;
			}
			var listItem = this.$listItemBeingRenamed();
			if (ss.equalsT(newName, this.$customizedViewBeingRenamed.name)) {
				this.$exitRenameUI(listItem);
				return;
			}
			this.get_viewModel().updateCustomizedViewName(this.$customizedViewBeingRenamed, newName, ss.mkdel(this, function(cv) {
				this.$exitRenameUI(listItem);
				this.updateViewListsState();
			}), ss.mkdel(this, function(errorMessage) {
				$tab_NotificationViewModel.showNotification(tab.Strings.ToolbarCustomViewsErrorRenaming, null);
				this.$exitRenameUI(listItem);
				this.updateViewListsState();
			}));
		},
		$onPublicClick: function CustomViewsView$OnPublicClick(cv) {
			if (!ss.isValue(cv) || this.get_viewModel().get_mode() !== $tab_CustomViewsViewModel.modeManage) {
				return;
			}
			this.get_viewModel().updateCustomizedViewPublicState(cv, !cv.isPublic, ss.mkdel(this, function(updated) {
				this.updateViewListsState();
			}), ss.mkdel(this, function(errorMessage) {
				$tab_NotificationViewModel.showNotification(tab.Strings.ToolbarCustomViewsErrorChangingPublicPrivateState, null);
				this.updateViewListsState();
			}));
		},
		$onEnterManageClicked: function CustomViewsView$OnEnterManageClicked() {
			this.get_viewModel().startManage();
		},
		$onExitManageClicked: function CustomViewsView$OnExitManageClicked() {
			this.get_viewModel().exitManageMode();
		},
		$onModeChanged: function CustomViewsView$OnModeChanged(sender, e) {
			var mode = this.get_viewModel().get_mode();
			if (mode === $tab_CustomViewsViewModel.modeManage) {
				this.get_dom().customViewsArea.toggleClass('tab-customViews-inManageMode', true);
			}
			else if (mode === $tab_CustomViewsViewModel.modeSelect) {
				this.get_dom().customViewsArea.toggleClass('tab-customViews-inManageMode', false);
			}
			this.$buildSaveViewArea();
			this.updateViewListsState();
			this.$updateManageModeButtonState();
		},
		$isRenameUIActive: function CustomViewsView$IsRenameUIActive() {
			return ss.isValue(this.$customizedViewBeingRenamed);
		},
		$listItemForView: function CustomViewsView$ListItemForView(cv) {
			if (ss.isNullOrUndefined(cv)) {
				return this.$originalViewListItemElement;
			}
			else {
				return this.$listItemElementMap[ss.unbox(cv.id)];
			}
		},
		$listItemBeingRenamed: function CustomViewsView$ListItemBeingRenamed() {
			return this.$listItemForView(this.$customizedViewBeingRenamed);
		},
		$checkboxExistsAndIsSelected: function CustomViewsView$CheckboxExistsAndIsSelected(checkbox) {
			if (ss.isValue(checkbox)) {
				return checkbox.get_selected();
			}
			else {
				return false;
			}
		},
		$getViewNameDisplayText: function CustomViewsView$GetViewNameDisplayText(cv) {
			var name;
			if (this.get_viewModel().isOriginalView(cv)) {
				name = tab.Strings.CustomViewsOriginalView;
			}
			else {
				name = cv.name;
			}
			if (this.get_viewModel().isDefault(cv)) {
				name = tab.Strings.ToolbarCustomViewsDefault(name);
			}
			return name;
		},
		$getViewOwnerDisplayText: function CustomViewsView$GetViewOwnerDisplayText(cv) {
			var owner;
			if (this.get_viewModel().isOriginalView(cv)) {
				owner = tsConfig.workbook_owner_friendly_name;
			}
			else {
				owner = cv.owner.friendlyName;
			}
			return owner;
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_CustomViewsViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_CustomViewsViewModel])]);
	ss.initClass($tab_CustomViewsViewModel, $asm, {
		add_modeChanged: function CustomViewsViewModel$add_ModeChanged(value) {
			this.$2$ModeChangedField = ss.delegateCombine(this.$2$ModeChangedField, value);
		},
		remove_modeChanged: function CustomViewsViewModel$remove_ModeChanged(value) {
			this.$2$ModeChangedField = ss.delegateRemove(this.$2$ModeChangedField, value);
		},
		add_customViewListChanged: function CustomViewsViewModel$add_CustomViewListChanged(value) {
			this.$2$CustomViewListChangedField = ss.delegateCombine(this.$2$CustomViewListChangedField, value);
		},
		remove_customViewListChanged: function CustomViewsViewModel$remove_CustomViewListChanged(value) {
			this.$2$CustomViewListChangedField = ss.delegateRemove(this.$2$CustomViewListChangedField, value);
		},
		add_defaultCustomViewChanged: function CustomViewsViewModel$add_DefaultCustomViewChanged(value) {
			this.$2$DefaultCustomViewChangedField = ss.delegateCombine(this.$2$DefaultCustomViewChangedField, value);
		},
		remove_defaultCustomViewChanged: function CustomViewsViewModel$remove_DefaultCustomViewChanged(value) {
			this.$2$DefaultCustomViewChangedField = ss.delegateRemove(this.$2$DefaultCustomViewChangedField, value);
		},
		add_customViewDestroyed: function CustomViewsViewModel$add_CustomViewDestroyed(value) {
			this.$2$CustomViewDestroyedField = ss.delegateCombine(this.$2$CustomViewDestroyedField, value);
		},
		remove_customViewDestroyed: function CustomViewsViewModel$remove_CustomViewDestroyed(value) {
			this.$2$CustomViewDestroyedField = ss.delegateRemove(this.$2$CustomViewDestroyedField, value);
		},
		add_dirtyChanged: function CustomViewsViewModel$add_DirtyChanged(value) {
			this.$2$DirtyChangedField = ss.delegateCombine(this.$2$DirtyChangedField, value);
		},
		remove_dirtyChanged: function CustomViewsViewModel$remove_DirtyChanged(value) {
			this.$2$DirtyChangedField = ss.delegateRemove(this.$2$DirtyChangedField, value);
		},
		add_hideDialogRequested: function CustomViewsViewModel$add_HideDialogRequested(value) {
			this.$2$HideDialogRequestedField = ss.delegateCombine(this.$2$HideDialogRequestedField, value);
		},
		remove_hideDialogRequested: function CustomViewsViewModel$remove_HideDialogRequested(value) {
			this.$2$HideDialogRequestedField = ss.delegateRemove(this.$2$HideDialogRequestedField, value);
		},
		add_propsUpdated: function CustomViewsViewModel$add_PropsUpdated(value) {
		},
		remove_propsUpdated: function CustomViewsViewModel$remove_PropsUpdated(value) {
		},
		get_mode: function CustomViewsViewModel$get_Mode() {
			return this.$mode;
		},
		get_myCustomViews: function CustomViewsViewModel$get_MyCustomViews() {
			return this.$myCustomViews;
		},
		get_otherCustomViews: function CustomViewsViewModel$get_OtherCustomViews() {
			return this.$otherCustomViews;
		},
		get_currentCustomView: function CustomViewsViewModel$get_CurrentCustomView() {
			return this.$currentCustomView;
		},
		get_defaultCustomViewId: function CustomViewsViewModel$get_DefaultCustomViewId() {
			return this.$defaultCustomViewId;
		},
		get_currentCustomViewName: function CustomViewsViewModel$get_CurrentCustomViewName() {
			return this.$currentCustomViewName;
		},
		get_hasCustomViews: function CustomViewsViewModel$get_HasCustomViews() {
			return this.$myCustomViews.length > 0 || this.$otherCustomViews.length > 0;
		},
		get_dirty: function CustomViewsViewModel$get_Dirty() {
			return tab.ApplicationModel.get_instance().get_workbook().get_isCurrentDashboardModified();
		},
		get_props: function CustomViewsViewModel$get_Props() {
			var $t1 = new $tab_CustomViewsProps();
			$t1.viewModel = this;
			return { children: React.createElement($tab_CustomViewsComponent, $t1), isGlassTransparent: false, isModal: true, positioningBehavior: 0, shouldAdjustPositionOnWindowResize: !tsConfig.is_mobile, shouldRecenterOnUpdate: true, shouldReturnFocusOnClose: true, showCloseButton: true, showFooter: false, testId: 'customViews', title: tab.Strings.CustomViewsDialogTitle, type: 0 };
		},
		get_$shouldPrepopulateSaveArea: function CustomViewsViewModel$get_ShouldPrepopulateSaveArea() {
			return !this.isOriginalView(this.get_currentCustomView()) && this.belongsToCurrentUser(this.get_currentCustomView());
		},
		get_$viewNameInputPrepopulatedText: function CustomViewsViewModel$get_ViewNameInputPrepopulatedText() {
			return (this.get_$shouldPrepopulateSaveArea() ? this.get_currentCustomView().name : '');
		},
		get_$defaultCheckboxDefault: function CustomViewsViewModel$get_DefaultCheckboxDefault() {
			return this.get_$shouldPrepopulateSaveArea() && this.isDefault(this.get_currentCustomView());
		},
		get_$publicCheckboxDefault: function CustomViewsViewModel$get_PublicCheckboxDefault() {
			return this.get_$shouldPrepopulateSaveArea() && this.get_currentCustomView().isPublic;
		},
		isDefault: function CustomViewsViewModel$IsDefault(cv) {
			if (tsConfig.allow_custom_view_default) {
				if (this.isOriginalView(cv)) {
					return ss.isNullOrUndefined(this.$defaultCustomViewId);
				}
				else {
					return ss.isValue(this.$defaultCustomViewId) && ss.unbox(this.$defaultCustomViewId) === ss.unbox(cv.id);
				}
			}
			else {
				return false;
			}
		},
		isOriginalView: function CustomViewsViewModel$IsOriginalView(cv) {
			return ss.isNullOrUndefined(cv);
		},
		belongsToCurrentUser: function CustomViewsViewModel$BelongsToCurrentUser(cv) {
			return ss.isValue(cv.owner) && cv.owner.id === tsConfig.current_user_id;
		},
		isCurrentCustomView: function CustomViewsViewModel$IsCurrentCustomView(cv) {
			if (this.isOriginalView(cv)) {
				return this.isCurrentCustomViewTheOriginalView();
			}
			else {
				return ss.isValue(tsConfig.current_custom_view_id) && ss.unbox(tsConfig.current_custom_view_id) === ss.unbox(cv.id);
			}
		},
		isCurrentCustomViewTheOriginalView: function CustomViewsViewModel$IsCurrentCustomViewTheOriginalView() {
			return ss.isValue(tsConfig.current_custom_view_id) === false;
		},
		shouldSaveButtonBeEnabled: function CustomViewsViewModel$ShouldSaveButtonBeEnabled(viewNameInput) {
			return this.isValidCustomViewName(this.cleanCustomViewName(viewNameInput.get_text()));
		},
		isValidCustomViewName: function CustomViewsViewModel$IsValidCustomViewName(name) {
			var cleanedName = this.cleanCustomViewName(name);
			ss.Debug.assert(ss.equalsT(name, cleanedName), 'The name passed in should be run through the CleanCustomViewName method before checking its validity.');
			return cleanedName.length > 0 && cleanedName.length <= $tab_CustomViewsViewModel.maxCustomViewNameLength;
		},
		cleanCustomViewName: function CustomViewsViewModel$CleanCustomViewName(name) {
			return name.trim().substr(0, $tab_CustomViewsViewModel.maxCustomViewNameLength);
		},
		$hide: function CustomViewsViewModel$Hide() {
			this.raiseActionEvent(this.$2$HideDialogRequestedField);
		},
		save: function CustomViewsViewModel$Save(name, onSuccess, onError) {
			$tab_CustomViewsViewModel.$log.debug('Save (with name passed in): %s', [name]);
			var viewToSave = this.getMyCustomViewByName(name);
			if (ss.isNullOrUndefined(viewToSave)) {
				viewToSave = new Object();
				viewToSave.name = name;
			}
			this.save$1(viewToSave, onSuccess, onError, false);
		},
		save$1: function CustomViewsViewModel$Save(customizedView, onSuccess, onError, setDefault) {
			$tab_CustomViewsViewModel.$log.debug('Save (with CustomizedView passed in): %s', [customizedView.name]);
			tab.CustomizedViewRequests.saveCustomizedView(customizedView, ss.mkdel(this, function(cv) {
				var onSaveViewSuccess = ss.mkdel(this, function(newCv) {
					this.saveCustomizedViewSuccess(newCv);
					if (ss.isValue(onSuccess)) {
						onSuccess(newCv);
					}
				});
				if (setDefault) {
					this.setDefault(cv, onSaveViewSuccess, function(errorMsg) {
						onSaveViewSuccess(cv);
					});
				}
				else if (this.isDefault(cv)) {
					this.setDefault(null, function(defaultView) {
						onSaveViewSuccess(cv);
					}, function(errorMsg1) {
						onSaveViewSuccess(cv);
					});
				}
				else {
					onSaveViewSuccess(cv);
				}
			}), ss.mkdel(this, function(msg) {
				this.$saveCustomizedViewFailure(msg);
				if (ss.isValue(onError)) {
					onError(msg);
				}
			}));
		},
		getMyCustomViewByName: function CustomViewsViewModel$GetMyCustomViewByName(name) {
			var retrievedCV = null;
			for (var $t1 = 0; $t1 < this.$myCustomViews.length; $t1++) {
				var cv = this.$myCustomViews[$t1];
				if (ss.equalsT(cv.name, name)) {
					retrievedCV = cv;
				}
			}
			return retrievedCV;
		},
		select: function CustomViewsViewModel$Select(cv) {
			if (this.isOriginalView(cv)) {
				$tab_CustomViewsViewModel.$log.debug('Calling NavigateToOriginalView', []);
				tab.CustomizedViewRequests.navigateToOriginalView(null);
				tsConfig.current_custom_view_id = null;
			}
			else {
				$tab_CustomViewsViewModel.$log.debug('Calling NavigateToCustomizedView: %o', [cv]);
				tab.CustomizedViewRequests.navigateToCustomizedView(cv);
				tsConfig.current_custom_view_id = cv.id;
			}
		},
		destroy: function CustomViewsViewModel$Destroy(cv, onSuccess, onError) {
			this.destroyCustomView(cv, onSuccess, onError);
		},
		update: function CustomViewsViewModel$Update(cv, onSuccess, onError) {
			this.$updateCustomView(cv, null, onSuccess, onError);
		},
		makeCurrentDefault: function CustomViewsViewModel$MakeCurrentDefault(onSuccess, onError) {
			$tab_CustomViewsViewModel.$log.debug('MakeCurrentDefault', []);
			this.setDefault(this.$currentCustomView, onSuccess, onError);
		},
		setDefault: function CustomViewsViewModel$SetDefault(customizedViewToMakeDefault, onSuccess, onError) {
			tab.CustomizedViewRequests.setDefaultCustomizedView(customizedViewToMakeDefault, ss.mkdel(this, function(cv) {
				this.$setDefaultCustomizedViewSuccess(cv);
				if (ss.isValue(onSuccess)) {
					onSuccess(cv);
				}
			}), ss.mkdel(this, function(msg) {
				this.$setDefaultCustomizedViewFailure(msg);
				if (ss.isValue(onError)) {
					onError(msg);
				}
			}));
		},
		startManage: function CustomViewsViewModel$StartManage() {
			$tab_CustomViewsViewModel.$log.debug('StartManage', []);
			if (this.$mode === $tab_CustomViewsViewModel.modeSelect && this.get_hasCustomViews()) {
				this.$switchMode($tab_CustomViewsViewModel.modeManage);
			}
		},
		exitManageMode: function CustomViewsViewModel$ExitManageMode() {
			this.$switchMode($tab_CustomViewsViewModel.modeSelect);
		},
		resetViewIfRequired: function CustomViewsViewModel$ResetViewIfRequired() {
			if (this.$requireResetView) {
				this.select(null);
			}
		},
		updateCustomizedViews: function CustomViewsViewModel$UpdateCustomizedViews(onSuccess, onError) {
			this.$loadCustomizedViews(onSuccess, onError);
		},
		destroyCustomView: function CustomViewsViewModel$DestroyCustomView(cv, onSuccess, onError) {
			$tab_CustomViewsViewModel.$log.debug('Calling DestroyCustomizedView: %o', [cv]);
			this.$destroyInProgress = true;
			tab.CustomizedViewRequests.destroyCustomizedView(cv, ss.mkdel(this, function() {
				ss.remove(this.get_myCustomViews(), cv);
				if (ss.referenceEquals(cv.id, this.$defaultCustomViewId)) {
					this.$defaultCustomViewId = null;
				}
				if (ss.referenceEquals(cv.id, tsConfig.current_custom_view_id)) {
					this.$currentCustomView = null;
					tab.CustomizedViewRequests.updateTsConfig(null, true);
					this.$requireResetView = true;
				}
				this.$loadCustomizedViews(null, null);
				if (ss.isValue(onSuccess)) {
					onSuccess();
				}
			}), ss.mkdel(this, function(msg) {
				this.$loadCustomizedViews(null, null);
				if (ss.isValue(onError)) {
					onError(msg);
				}
			}));
		},
		updateCustomizedViewPublicState: function CustomViewsViewModel$UpdateCustomizedViewPublicState(originalView, newPublicState, onSuccess, onError) {
			if (!ss.isValue(originalView) || newPublicState === originalView.isPublic) {
				return;
			}
			var updated = new Object();
			updated.id = originalView.id;
			updated.isPublic = newPublicState;
			updated.name = originalView.name;
			updated.owner = originalView.owner;
			updated.startViewId = originalView.startViewId;
			updated.urlId = originalView.urlId;
			this.$updateCustomView(updated, originalView, onSuccess, onError);
		},
		updateCustomizedViewName: function CustomViewsViewModel$UpdateCustomizedViewName(originalView, newName, onSuccess, onError) {
			if (ss.equalsT(originalView.name, newName)) {
				return;
			}
			var updated = new Object();
			updated.id = originalView.id;
			updated.isPublic = originalView.isPublic;
			updated.name = newName;
			updated.owner = originalView.owner;
			updated.startViewId = originalView.startViewId;
			updated.urlId = originalView.urlId;
			this.$updateCustomView(updated, originalView, onSuccess, onError);
		},
		$updateCustomViewSuccess: function CustomViewsViewModel$UpdateCustomViewSuccess(newView, original) {
			if (ss.isValue(original)) {
				var oldIndex = ss.indexOf(this.$myCustomViews, original);
				if (oldIndex >= 0) {
					ss.removeAt(this.$myCustomViews, oldIndex);
					ss.insert(this.$myCustomViews, oldIndex, newView);
				}
				if (ss.isValue(original) && ss.referenceEquals(newView.id, original.id) && ss.referenceEquals(newView.id, tsConfig.current_custom_view_id)) {
					this.$currentCustomView = newView;
				}
			}
		},
		$updateCustomView: function CustomViewsViewModel$UpdateCustomView(newView, original, onSuccess, onError) {
			$tab_CustomViewsViewModel.$log.debug('Calling UpdateCustomizedView: %o', [newView]);
			tab.CustomizedViewRequests.updateCustomizedView(newView, ss.mkdel(this, function(cv) {
				this.$updateCustomViewSuccess(newView, original);
				this.$loadCustomizedViews(null, null);
				if (ss.isValue(onSuccess)) {
					onSuccess(cv);
				}
			}), ss.mkdel(this, function(msg) {
				this.$loadCustomizedViews(null, null);
				if (ss.isValue(onError)) {
					onError(msg);
				}
			}));
		},
		$switchMode: function CustomViewsViewModel$SwitchMode(newMode) {
			this.$mode = newMode;
			this.$onModeChanged();
		},
		$loadCustomizedViews: function CustomViewsViewModel$LoadCustomizedViews(onSuccess, onError) {
			tab.CustomizedViewRequests.getCustomizedViews(ss.mkdel(this, function(cvs, defaultId) {
				this.$getCustomizedViewsSuccess(cvs, defaultId);
				if (ss.isValue(onSuccess)) {
					onSuccess(cvs, defaultId);
				}
			}), ss.mkdel(this, function(msg) {
				this.$getCustomizedViewsFailure(msg);
				if (ss.isValue(onError)) {
					onError(msg);
				}
			}));
		},
		saveCustomizedViewSuccess: function CustomViewsViewModel$SaveCustomizedViewSuccess(cv) {
			$tab_CustomViewsViewModel.$log.debug('SaveCustomizedViewSuccess: %o', [cv]);
			var requestFromJsApi = tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage() && !tsConfig.reloadOnCustomViewSave;
			if (requestFromJsApi || ss.isValue(this.$currentCustomView) && ss.unbox(this.$currentCustomView.id) === ss.unbox(cv.id)) {
				this.$hide();
				if (requestFromJsApi) {
					var i;
					if (ss.isValue(cv.owner) && cv.owner.id === tsConfig.current_user_id) {
						for (i = 0; i < this.$myCustomViews.length; i++) {
							if (ss.referenceEquals(this.$myCustomViews[i].name, cv.name)) {
								this.$myCustomViews[i] = cv;
								break;
							}
						}
						if (i >= this.$myCustomViews.length) {
							this.$myCustomViews.push(cv);
							this.$myCustomViews.sort($tab_CustomViewsViewModel.$compareCustomizedViews);
						}
					}
					else {
						for (i = 0; i < this.$otherCustomViews.length; i++) {
							if (ss.referenceEquals(this.$otherCustomViews[i].name, cv.name)) {
								this.$otherCustomViews[i] = cv;
								break;
							}
						}
						if (i >= this.$otherCustomViews.length) {
							this.$otherCustomViews.push(cv);
							this.$otherCustomViews.sort($tab_CustomViewsViewModel.$compareCustomizedViews);
						}
					}
				}
				this.$currentCustomView = cv;
			}
			else {
				tab.CustomizedViewRequests.navigateToCustomizedView(cv);
			}
			this.onDirtyChanged();
		},
		$saveCustomizedViewFailure: function CustomViewsViewModel$SaveCustomizedViewFailure(msg) {
			$tab_CustomViewsViewModel.$log.debug('SaveCustomizedViewFailure: %s', [msg]);
			this.$hide();
		},
		$setDefaultCustomizedViewSuccess: function CustomViewsViewModel$SetDefaultCustomizedViewSuccess(cv) {
			$tab_CustomViewsViewModel.$log.debug('SetDefaultCustomizedViewSuccess: %o', [cv]);
			this.$defaultCustomViewId = (ss.isValue(cv) ? cv.id : null);
			this.$onDefaultCustomViewChanged();
		},
		$setDefaultCustomizedViewFailure: function CustomViewsViewModel$SetDefaultCustomizedViewFailure(msg) {
			$tab_CustomViewsViewModel.$log.debug('SetDefaultCustomizedViewFailure: %s', [msg]);
		},
		$getCustomizedViewsSuccess: function CustomViewsViewModel$GetCustomizedViewsSuccess(cvs, defaultId) {
			$tab_CustomViewsViewModel.$log.debug('GetCustomizedViewsSuccess: cvs=%o defaultId=%o', [cvs, defaultId]);
			ss.clear(this.$myCustomViews);
			ss.clear(this.$otherCustomViews);
			this.$currentCustomView = null;
			this.$currentCustomViewName = tab.Strings.ToolbarCustomViewsOriginalView;
			for (var $t1 = 0; $t1 < cvs.length; $t1++) {
				var cv = cvs[$t1];
				if (this.belongsToCurrentUser(cv)) {
					this.$myCustomViews.push(cv);
				}
				else {
					this.$otherCustomViews.push(cv);
				}
				if (this.isCurrentCustomView(cv)) {
					this.$currentCustomView = cv;
					this.$currentCustomViewName = cv.name;
				}
			}
			this.$myCustomViews.sort($tab_CustomViewsViewModel.$compareCustomizedViews);
			this.$otherCustomViews.sort($tab_CustomViewsViewModel.$compareCustomizedViews);
			this.$defaultCustomViewId = defaultId;
			this.$onCustomViewListChanged();
		},
		$getCustomizedViewsFailure: function CustomViewsViewModel$GetCustomizedViewsFailure(msg) {
			$tab_CustomViewsViewModel.$log.debug('GetCustomizedViewsFailure: %s', [msg]);
			this.$currentCustomViewName = null;
			this.$destroyInProgress = false;
		},
		$onModeChanged: function CustomViewsViewModel$OnModeChanged() {
			if (ss.isValue(this.$2$ModeChangedField)) {
				this.$2$ModeChangedField(this, ss.EventArgs.Empty);
			}
		},
		$onCustomViewListChanged: function CustomViewsViewModel$OnCustomViewListChanged() {
			if (ss.isValue(this.$2$CustomViewListChangedField)) {
				this.$2$CustomViewListChangedField(this, ss.EventArgs.Empty);
			}
			if (this.$destroyInProgress) {
				this.$onCustomViewDestroyed();
				this.$destroyInProgress = false;
			}
		},
		$onDefaultCustomViewChanged: function CustomViewsViewModel$OnDefaultCustomViewChanged() {
			if (ss.isValue(this.$2$DefaultCustomViewChangedField)) {
				this.$2$DefaultCustomViewChangedField(this, ss.EventArgs.Empty);
			}
		},
		$onCustomViewDestroyed: function CustomViewsViewModel$OnCustomViewDestroyed() {
			if (ss.isValue(this.$2$CustomViewDestroyedField)) {
				this.$2$CustomViewDestroyedField(this, ss.EventArgs.Empty);
			}
		},
		onDirtyChanged: function CustomViewsViewModel$OnDirtyChanged() {
			this.raiseEvent(this.$2$DirtyChangedField, null);
		},
		onDialogHidden: function CustomViewsViewModel$OnDialogHidden() {
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object]), spiff.IDialogContent]);
	ss.initClass($tab_DashboardAuthoringButtonTelemetry, $asm, {});
	ss.initClass($tab_DashboardAuthoringObjectsPaneTelemetry, $asm, {});
	ss.initClass($tab_DashboardLoadCompleteEventProperties, $asm, {});
	ss.initClass($tab_DashboardLoadCompleteTelemetry, $asm, {});
	ss.initClass($tab_DashboardTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_DashboardView, $asm, {
		get_$dom: function DashboardView$get_Dom() {
			return ss.cast(this.get_template(), $tab_DashboardTemplate);
		},
		get_containerNode: function DashboardView$get_ContainerNode() {
			return this.get_$dom().domRoot;
		},
		get_dashboardSize: function DashboardView$get_DashboardSize() {
			return tab.DashboardSizeCalculator.asMetric(this.$viewModel$1.get_size());
		},
		$handleFormatsChanged: function DashboardView$HandleFormatsChanged() {
			if (ss.isValue(this.$viewModel$1.get_formats())) {
				var formats = this.$viewModel$1.get_formats();
				this.get_$dom().dashboardNode.css(formats);
				if (this.$viewModel$1.get_hasGutter()) {
					var css = { top: this.$viewModel$1.gutter.top + 'px', left: this.$viewModel$1.gutter.left + 'px' };
					this.get_$dom().dashboardNode.css(css);
				}
			}
		},
		$handleSizeChanged: function DashboardView$HandleSizeChanged() {
			this.get_$dom().dashboardNode.height(this.$viewModel$1.get_size().h).width(this.$viewModel$1.get_size().w);
			if (this.$viewModel$1.get_hasGutter()) {
				$($tab_DashboardView.dashboardGutterCssSelector).height(this.$viewModel$1.get_size().h + this.$viewModel$1.gutter.top + this.$viewModel$1.gutter.bottom).width(this.$viewModel$1.get_size().w + this.$viewModel$1.gutter.left + this.$viewModel$1.gutter.right);
			}
		},
		$handleNewZone: function DashboardView$HandleNewZone(zoneViewModel) {
			var view = tab.ObjectRegistry.newView($tab_ZoneView).call(null, [zoneViewModel]);
			if (zoneViewModel.get_zoneType() === 'title') {
				view.prependToDom(this.get_$dom().dashboardNode);
			}
			else {
				view.addToDom(this.get_$dom().dashboardNode);
			}
		},
		onAddedToDom: function DashboardView$OnAddedToDom() {
			if (!this.addedToDom) {
				if (tsConfig.showTabs) {
					this.get_$dom().dashboardNode.attr('role', 'tabpanel');
				}
				this.$handleSizeChanged();
				this.$handleFormatsChanged();
				var $t1 = _.keys(this.$viewModel$1.get_zoneViewModels());
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var zoneId = $t1[$t2];
					this.$handleNewZone(this.$viewModel$1.get_zoneViewModels()[zoneId]);
				}
				if (this.$viewModel$1.get_isDashboard()) {
					this.get_containerNode().addClass('is-dashboard');
				}
				else if (this.$viewModel$1.get_isStory()) {
					this.get_containerNode().addClass('is-story');
				}
				else {
					this.get_containerNode().addClass('is-worksheet');
				}
			}
			spiff.Widget.prototype.onAddedToDom.call(this);
		},
		$putUpFakeDom: function DashboardView$PutUpFakeDom() {
			tab.Logger.getLoggerWithName(tab.DashboardModel.facadeDomId).debug((new Date()).getTime().toString() + ' Creating fake', []);
			if (this.$viewModel$1.get_renderMode() === 'render-mode-client') {
				var oldImages = this.get_$dom().dashboardNode.find('img');
				var len = oldImages.length;
				for (var i = 0; i < len; i++) {
					var $t1 = oldImages[i];
					var oldImage = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'IMG'));
					if (ss.isNullOrUndefined(oldImage) || oldImage.naturalHeight === 0 || oldImage.naturalWidth === 0) {
						continue;
					}
					var $t2 = document.createElement('canvas');
					var canvas = ss.cast($t2, ss.isValue($t2) && (ss.isInstanceOfType($t2, Element) && $t2.tagName === 'CANVAS'));
					canvas.width = oldImage.naturalWidth;
					canvas.height = oldImage.naturalHeight;
					var ctx = ss.cast(canvas.getContext('2d'), CanvasRenderingContext2D);
					ctx.drawImage(oldImage, 0, 0);
					try {
						var dataURL = canvas.toDataURL('image/png', new Object());
						oldImage.src = dataURL;
					}
					catch ($t3) {
					}
				}
			}
			var myclone = this.get_$dom().dashboardNode.clone(false, false);
			myclone.addClass(tab.DashboardModel.facadeDomId);
			$tab_DashboardView.uniquefyClonedFilterRadioElements(myclone);
			if (this.$viewModel$1.get_renderMode() === 'render-mode-server') {
				tab.Logger.getLoggerWithName(tab.DashboardModel.facadeDomId).debug((new Date()).getTime().toString() + ' Copying canvases', []);
				var oldCanvases = this.get_$dom().dashboardNode.find('canvas');
				var newCanvases = myclone.find('canvas');
				var len1 = oldCanvases.length;
				for (var i1 = 0; i1 < len1; i1++) {
					var $t4 = oldCanvases[i1];
					var oldCanvas = ss.cast($t4, ss.isValue($t4) && (ss.isInstanceOfType($t4, Element) && $t4.tagName === 'CANVAS'));
					var $t5 = newCanvases[i1];
					var newCanvas = ss.cast($t5, ss.isValue($t5) && (ss.isInstanceOfType($t5, Element) && $t5.tagName === 'CANVAS'));
					if (!ss.isValue(newCanvas)) {
						continue;
					}
					var context = ss.cast(newCanvas.getContext('2d'), CanvasRenderingContext2D);
					if (ss.isValue(oldCanvas) && oldCanvas.width > 0 && oldCanvas.height > 0 && ss.isValue(context)) {
						context.drawImage(oldCanvas, 0, 0);
					}
				}
			}
			tab.Logger.getLoggerWithName(tab.DashboardModel.facadeDomId).debug((new Date()).getTime().toString() + ' Appending fake', []);
			this.get_$dom().dashboardNode.parent().append(myclone);
			tab.Logger.getLoggerWithName(tab.DashboardModel.facadeDomId).debug((new Date()).getTime().toString() + ' Fake appended', []);
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_DashboardViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_DashboardViewModel])]);
	ss.initClass($tab_DashboardViewModel, $asm, {
		add_newZone: function DashboardViewModel$add_NewZone(value) {
			this.$2$NewZoneField = ss.delegateCombine(this.$2$NewZoneField, value);
		},
		remove_newZone: function DashboardViewModel$remove_NewZone(value) {
			this.$2$NewZoneField = ss.delegateRemove(this.$2$NewZoneField, value);
		},
		add_vizRebuildStart: function DashboardViewModel$add_VizRebuildStart(value) {
			this.$2$VizRebuildStartField = ss.delegateCombine(this.$2$VizRebuildStartField, value);
		},
		remove_vizRebuildStart: function DashboardViewModel$remove_VizRebuildStart(value) {
			this.$2$VizRebuildStartField = ss.delegateRemove(this.$2$VizRebuildStartField, value);
		},
		add_sizeChanged: function DashboardViewModel$add_SizeChanged(value) {
			this.$2$SizeChangedField = ss.delegateCombine(this.$2$SizeChangedField, value);
		},
		remove_sizeChanged: function DashboardViewModel$remove_SizeChanged(value) {
			this.$2$SizeChangedField = ss.delegateRemove(this.$2$SizeChangedField, value);
		},
		add_portSizeChanged: function DashboardViewModel$add_PortSizeChanged(value) {
			this.$2$PortSizeChangedField = ss.delegateCombine(this.$2$PortSizeChangedField, value);
		},
		remove_portSizeChanged: function DashboardViewModel$remove_PortSizeChanged(value) {
			this.$2$PortSizeChangedField = ss.delegateRemove(this.$2$PortSizeChangedField, value);
		},
		add_formatsChanged: function DashboardViewModel$add_FormatsChanged(value) {
			this.$2$FormatsChangedField = ss.delegateCombine(this.$2$FormatsChangedField, value);
		},
		remove_formatsChanged: function DashboardViewModel$remove_FormatsChanged(value) {
			this.$2$FormatsChangedField = ss.delegateRemove(this.$2$FormatsChangedField, value);
		},
		get_isStory: function DashboardViewModel$get_IsStory() {
			return this.dashboardModel.pm.isStory;
		},
		get_zoneViewModels: function DashboardViewModel$get_ZoneViewModels() {
			return this.$zoneViewModels;
		},
		get_formats: function DashboardViewModel$get_Formats() {
			var formats = this.dashboardModel.get_formats();
			if (tsConfig.current_sheet_type === 'worksheet' && tsConfig.is_authoring) {
				formats['backgroundColor'] = 'transparent';
			}
			return formats;
		},
		get_backgroundColor: function DashboardViewModel$get_BackgroundColor() {
			var background = '#FFFFFF';
			if (ss.isValue(this.get_formats()) && ss.keyExists(this.get_formats(), 'backgroundColor')) {
				background = this.get_formats()['backgroundColor'];
			}
			return background;
		},
		get_renderMode: function DashboardViewModel$get_RenderMode() {
			return this.dashboardModel.get_renderMode();
		},
		get_size: function DashboardViewModel$get_Size() {
			return this.$dashboardSizeOverride || this.dashboardModel.get_dashboardSize();
		},
		set_size: function DashboardViewModel$set_Size(value) {
			this.$dashboardSizeOverride = value;
			this.raiseActionEvent(this.$2$SizeChangedField);
		},
		get_isDashboard: function DashboardViewModel$get_IsDashboard() {
			return this.dashboardModel.get_isDashboard();
		},
		get_flipboardNavigatorViewModel: function DashboardViewModel$get_FlipboardNavigatorViewModel() {
			if (!this.get_isStory()) {
				return null;
			}
			return ss.cast(this.$findContentZoneByZoneType('flipboard-nav'), tab.IFlipboardNavigatorViewModel);
		},
		get_flipboardViewModel: function DashboardViewModel$get_FlipboardViewModel() {
			return ss.cast(this.$findContentZoneByZoneType('flipboard'), $tab_IFlipboardViewModel);
		},
		get_hasGutter: function DashboardViewModel$get_HasGutter() {
			return tsConfig.is_authoring && (tsConfig.current_sheet_type === 'dashboard' || tsConfig.current_sheet_type === 'story' && this.get_isStory());
		},
		dispose: function DashboardViewModel$Dispose() {
			var $t1 = ss.getEnumerator(Object.keys(this.$zoneViewModels));
			try {
				while ($t1.moveNext()) {
					var zoneId = $t1.current();
					tab.MiscUtil.dispose$1(this.$zoneViewModels[zoneId]);
				}
			}
			finally {
				$t1.dispose();
			}
			ss.clearKeys(this.$zoneViewModels);
			tab.SheetSession.remove_sheetDataChanged(ss.mkdel(this, this.$refreshView));
			for (var $t2 = 0; $t2 < this.viewControllers.length; $t2++) {
				var vc = this.viewControllers[$t2];
				tab.MiscUtil.dispose$1(vc);
			}
			ss.clear(this.viewControllers);
			ss.clearKeys(this.viewControllersBySheet);
			this.dashboardModel.zonesModel.remove_newZone(ss.mkdel(this, this.$handleNewZone));
			this.dashboardModel.remove_newDashboard(ss.mkdel(this, this.$handleNewDashboard));
			this.dashboardModel.remove_activeZoneChanged(ss.mkdel(this, this.$handleActiveZoneChanged));
			this.dashboardModel.remove_readyZoneChanged(ss.mkdel(this, this.$handleReadyZoneChanged));
			spiff.BaseViewModel.prototype.dispose.call(this);
		},
		$handleNewZone: function DashboardViewModel$HandleNewZone(zoneModel) {
			if (ss.keyExists(this.$zoneViewModels, zoneModel.get_zoneId())) {
				this.$killZone(zoneModel.get_zoneId());
			}
			tab.Log.get(this).debug('Handling new zone: %s %o', [zoneModel.get_zoneId(), zoneModel]);
			var zoneViewModel = this.$createZoneVM(zoneModel);
			if (zoneViewModel.get_zoneType() === 'viz') {
				if (ss.isValue(zoneViewModel.get_zoneContentViewModel())) {
					this.$initViewController(zoneViewModel);
				}
				else {
					var contentHandler = null;
					contentHandler = ss.mkdel(this, function() {
						zoneViewModel.remove_newZoneContent(contentHandler);
						this.$initViewController(zoneViewModel);
					});
					zoneViewModel.add_newZoneContent(contentHandler);
				}
			}
			else if (zoneViewModel.get_zoneType() === 'dashboard-object' && zoneViewModel.get_objectType() === 'extension') {
				if (ss.isValue(zoneViewModel.get_zoneContentViewModel())) {
					var extensionVM = ss.cast(zoneViewModel.get_zoneContentViewModel(), $tab_ExtensionZoneViewModel);
					if (extensionVM.get_isInitialized()) {
						this.$promptExtesionsForPermissionsIfNeeded();
						return;
					}
				}
				var contentHandler1 = null;
				contentHandler1 = ss.mkdel(this, function(vm) {
					var extensionVM1 = ss.cast(vm, $tab_ExtensionZoneViewModel);
					if (!extensionVM1.get_isInitialized()) {
						return;
					}
					this.$promptExtesionsForPermissionsIfNeeded();
					zoneViewModel.remove_newZoneContent(contentHandler1);
				});
				zoneViewModel.add_newZoneContent(contentHandler1);
			}
			zoneViewModel.set_isActiveZone(zoneViewModel.get_zoneId() === this.dashboardModel.get_activeZoneID());
			this.$raiseNewZone(zoneViewModel);
		},
		$initViewController: function DashboardViewModel$InitViewController(zoneViewModel) {
			ss.Debug.assert(ss.isNullOrUndefined(zoneViewModel) || zoneViewModel.get_zoneType() === 'viz', 'InitViewController called on non-viz zone');
			if (ss.isNullOrUndefined(zoneViewModel) || ss.isNullOrUndefined(zoneViewModel.get_zoneContentViewModel())) {
				return;
			}
			var vc = this.$createViewController(zoneViewModel.get_associatedSheet());
			zoneViewModel.get_zoneContentViewModel().set_viewController(vc);
		},
		$createZoneVM: function DashboardViewModel$CreateZoneVM(zoneModel) {
			var zoneViewModel = new $tab_ZoneViewModel(zoneModel);
			this.$zoneViewModels[zoneModel.get_zoneId()] = zoneViewModel;
			return zoneViewModel;
		},
		$findContentZoneByZoneType: function DashboardViewModel$FindContentZoneByZoneType(zoneType) {
			var $t1 = new ss.ObjectEnumerator(this.$zoneViewModels);
			try {
				while ($t1.moveNext()) {
					var entry = $t1.current();
					if (entry.value.get_zoneType() === zoneType) {
						return entry.value.get_zoneContentViewModel();
					}
				}
			}
			finally {
				$t1.dispose();
			}
			return null;
		},
		$raiseNewZone: function DashboardViewModel$RaiseNewZone(zoneViewModel) {
			if (!ss.staticEquals(this.$2$NewZoneField, null)) {
				this.$2$NewZoneField(zoneViewModel);
			}
		},
		$handleNewDashboard: function DashboardViewModel$HandleNewDashboard() {
			tab.Log.get(this).debug('HandleNewDashboard', []);
			this.$recreateZonesIf(ss.mkdel(this, function(viewModel) {
				return !this.dashboardModel.hasZone(viewModel.get_zoneId()) || !this.dashboardModel.isValidSheet(viewModel.get_model());
			}));
		},
		$promptExtesionsForPermissionsIfNeeded: function DashboardViewModel$PromptExtesionsForPermissionsIfNeeded() {
			var extensionVMs = this.$getExtensionZoneVMsIfInitialized();
			if (tab.MiscUtil.isNullOrEmpty(extensionVMs)) {
				return;
			}
			var extensionKeys = [];
			for (var $t1 = 0; $t1 < extensionVMs.length; $t1++) {
				var vm = extensionVMs[$t1];
				if (vm.get_renderStatus() === 'promptNeeded') {
					extensionKeys.push(vm.get_extensionKey());
				}
			}
			tab.ExtensionClientCommands.showPermissionsPromptDialog(extensionKeys);
		},
		$getExtensionZoneVMsIfInitialized: function DashboardViewModel$GetExtensionZoneVMsIfInitialized() {
			var extensionZoneVMs = [];
			var $t1 = _.keys(this.$zoneViewModels);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zoneId = $t1[$t2];
				var zoneViewModel = this.$zoneViewModels[zoneId];
				if (zoneViewModel.get_zoneType() === 'dashboard-object' && zoneViewModel.get_objectType() === 'extension') {
					var extensionVM = ss.cast(zoneViewModel.get_zoneContentViewModel(), $tab_ExtensionZoneViewModel);
					if (ss.isNullOrUndefined(extensionVM) || !extensionVM.get_isInitialized()) {
						return null;
					}
					if (extensionVM.get_isValid()) {
						extensionZoneVMs.push(ss.cast(zoneViewModel.get_zoneContentViewModel(), $tab_ExtensionZoneViewModel));
					}
				}
			}
			return extensionZoneVMs;
		},
		$onSizeChanged: function DashboardViewModel$OnSizeChanged() {
			this.raiseActionEvent(this.$2$SizeChangedField);
		},
		$onFormatsChanged: function DashboardViewModel$OnFormatsChanged() {
			this.raiseActionEvent(this.$2$FormatsChangedField);
		},
		$handleRenderModeChanged: function DashboardViewModel$HandleRenderModeChanged() {
			if (!ss.referenceEquals(this.dashboardModel, tab.ModelUtils.findContentDashboard(null))) {
				return;
			}
			tab.Log.get(this).debug('HandleRenderModeChanged', []);
			this.raiseActionEvent(this.$2$VizRebuildStartField);
			this.$recreateZonesIf(function(viewModel) {
				return viewModel.get_zoneType() === 'viz';
			});
		},
		$recreateZonesIf: function DashboardViewModel$RecreateZonesIf(shouldRemove) {
			var toRemove = [];
			var $t1 = _.keys(this.$zoneViewModels);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zoneId = $t1[$t2];
				var viewModel = this.$zoneViewModels[zoneId];
				if (shouldRemove(viewModel)) {
					toRemove.push(zoneId);
				}
			}
			this.$killZones(toRemove);
			this.$addNewZones();
		},
		$killZones: function DashboardViewModel$KillZones(toRemove) {
			for (var $t1 = 0; $t1 < toRemove.length; $t1++) {
				var zoneId = toRemove[$t1];
				this.$killZone(zoneId);
			}
		},
		$killZone: function DashboardViewModel$KillZone(zoneId) {
			var zoneViewModel = this.$zoneViewModels[zoneId];
			if (ss.isValue(zoneViewModel)) {
				tab.Log.get(this).debug('Removing zone: %s %o', [zoneId, zoneViewModel]);
				if (zoneViewModel.get_zoneType() === 'viz') {
					var vc = this.viewControllersBySheet['v_' + zoneViewModel.get_associatedSheet()];
					if (ss.isValue(vc)) {
						delete this.viewControllersBySheet['v_' + zoneViewModel.get_associatedSheet()];
						ss.remove(this.viewControllers, vc);
						vc.dispose();
					}
				}
				zoneViewModel.dispose();
				delete this.$zoneViewModels[zoneId];
			}
		},
		$addNewZones: function DashboardViewModel$AddNewZones() {
			var $t1 = this.dashboardModel.get_zoneModels();
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var zoneModel = $t1[$t2];
				if (!ss.keyExists(this.$zoneViewModels, zoneModel.get_zoneId()) && this.dashboardModel.isValidSheet(zoneModel)) {
					this.$handleNewZone(zoneModel);
				}
			}
		},
		$onStateChanged: function DashboardViewModel$OnStateChanged(data) {
			tab.Log.get(this).debug('OnStateChanged', []);
			if (this.dashboardModel.autoUpdate) {
				tab.CommandController.get().refreshLayout();
			}
			else {
				this.dashboardModel.invalid = true;
			}
		},
		$refreshView: function DashboardViewModel$RefreshView() {
			if (this.dashboardModel.autoUpdate) {
				tab.CommandController.get().refreshLayout();
			}
			else {
				this.dashboardModel.invalid = true;
			}
		},
		$handleActiveZoneChanged: function DashboardViewModel$HandleActiveZoneChanged() {
			if (tsConfig.isPublic) {
				return;
			}
			if (!tab.ModelUtils.getSheetInfoPresModel(tab.ApplicationModel.get_instance(), tsConfig.current_sheet_name).isDashboard) {
				return;
			}
			var activeZoneId = this.dashboardModel.get_activeZoneID();
			var $t1 = ss.getEnumerator(Object.keys(this.$zoneViewModels));
			try {
				while ($t1.moveNext()) {
					var zoneId = $t1.current();
					var zoneVM = this.$zoneViewModels[zoneId];
					zoneVM.set_isActiveZone(zoneVM.get_zoneId() === activeZoneId);
				}
			}
			finally {
				$t1.dispose();
			}
		},
		$handleReadyZoneChanged: function DashboardViewModel$HandleReadyZoneChanged() {
			if (!tab.ModelUtils.getSheetInfoPresModel(tab.ApplicationModel.get_instance(), tsConfig.current_sheet_name).isDashboard) {
				return;
			}
			var readyZoneId = this.dashboardModel.get_readyZoneID();
			var $t1 = ss.getEnumerator(Object.keys(this.$zoneViewModels));
			try {
				while ($t1.moveNext()) {
					var zoneId = $t1.current();
					var zoneVM = this.$zoneViewModels[zoneId];
					zoneVM.set_isReadyZone(zoneVM.get_zoneId() === readyZoneId);
				}
			}
			finally {
				$t1.dispose();
			}
		},
		$createViewController: function DashboardViewModel$CreateViewController(sheetName) {
			var session = this.dashboardModel.getViewSession(sheetName);
			var vc = new $tab_ViewController(session);
			this.viewControllersBySheet['v_' + sheetName] = vc;
			this.viewControllers.push(vc);
			return vc;
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_DataAlertCreateComponent, $asm, {
		render: function DataAlertCreateComponent$Render() {
			return spiff.DOMElements.div({ className: 'tab-dataAlertDialog tab-dataAlertCreateComponent' }, this.$renderConditionMessage(), this.$renderConditionArea(), this.$renderTitleInput(), this.$renderNotificationIntervalInput(), this.$renderAddRecipients(), this.$renderEmailInputIfNecessary(), this.$renderEmailErrorMessage(), this.$renderPublicPrivate(), this.$renderSaveButton());
		},
		$renderPublicPrivate: function DataAlertCreateComponent$RenderPublicPrivate() {
			if (tab.FeatureFlags.isEnabled('AlertSidePanel')) {
				var infoContent = spiff.DOMElements.div({ className: 'tab-dataAlertPublicPrivateInfoTooltip' }, tab.Strings.DataAlertPublicInfo);
				return spiff.DOMElements.div({ className: 'tab-dataAlertPublicPrivateCheckbox', style: { display: 'flex' } }, React.createElement(SharedWidgets.CheckBoxWithLabelWidget, { label: tab.Strings.DataAlertPublicCheckboxLabel, checked: this.props.isPublic, handleChange: this.props.onPublicChanged, testId: 'publicCheckBox', disabled: false }), React.createElement(SharedWidgets.Tooltip, {
					getContent: function() {
						return infoContent;
					},
					position: 'BottomRightCorner'
				}, [spiff.DOMElements.div({ className: 'tabDataAlertsPublicPrivateInfo', style: { marginLeft: '5px' } })]));
			}
			else {
				return null;
			}
		},
		$renderConditionMessage: function DataAlertCreateComponent$RenderConditionMessage() {
			var message;
			message = tab.Strings.DataAlertOnConstantThreshold2(this.props.selectionCaption);
			return spiff.DOMElements.div({ className: 'tab-dataAlertConditionMessage' }, message);
		},
		$renderConditionArea: function DataAlertCreateComponent$RenderConditionArea() {
			return spiff.DOMElements.div({ className: 'tab-dataAlertConditionArea' }, spiff.DOMElements.div({ className: 'tab-dataAlertOperatorArea' }, React.createElement(SharedWidgets.DropdownWidget, this.props.conditionProps)), spiff.DOMElements.div({ className: 'tab-dataAlertThresholdArea' }, spiff.DOMElements.label({ className: 'tab-dataAlertThresholdLabel' }, spiff.DOMElements.span({ className: 'tab-dataAlertLabelText' }, tab.Strings.DataAlertThreshold), this.$renderThresholdInput()), spiff.DOMElements.span(this.$inputThresholdMessageProps(this.props.thresholdIsValid), this.props.thresholdMessage)));
		},
		$inputThresholdMessageProps: function DataAlertCreateComponent$InputThresholdMessageProps(valid) {
			return { className: (valid ? 'tab-dataAlertStandardText' : 'tab-dataAlertErrorText') };
		},
		$inputErrorTextProps: function DataAlertCreateComponent$InputErrorTextProps(valid) {
			return { className: 'tab-dataAlertErrorText', style: { visibility: (valid ? 'hidden' : 'visible') } };
		},
		$renderThresholdInput: function DataAlertCreateComponent$RenderThresholdInput() {
			var thresholdClass = 'tab-dataAlertThreshold tab-TextInput';
			if (!this.props.thresholdIsValid) {
				thresholdClass += ' error';
			}
			return spiff.DOMElements.input({ type: 'text', value: this.props.threshold, className: thresholdClass, disabled: !this.props.readyForInteraction, onBeforeInput: tableau.util.maxLengthEnforcingBeforeInputHandler(this.props.maxThresholdLength), onChange: ss.mkdel(this, function(e) {
				this.props.onThresholdInputTextChanged(ss.cast(e.target, ss.isValue(e.target) && (ss.isInstanceOfType(e.target, Element) && e.target.tagName === 'INPUT')).value);
			}) });
		},
		$renderTitleInput: function DataAlertCreateComponent$RenderTitleInput() {
			var titleClass = 'tab-dataAlertTitleInput tab-TextInput';
			var valid = !tab.MiscUtil.isNullOrEmpty$3(this.props.title);
			if (!valid) {
				titleClass += ' error';
			}
			return spiff.DOMElements.div({ className: 'tab-dataAlertTitleInputArea' }, spiff.DOMElements.label({ className: 'tab-dataAlertTitleInputLabel' }, spiff.DOMElements.span({ className: 'tab-dataAlertLabelText' }, tab.Strings.DataAlertSubject), spiff.DOMElements.input({ type: 'text', className: titleClass, disabled: !this.props.readyForInteraction, maxLength: $tab_DataAlertCreateViewModel.maxTitleLength, value: this.props.title, onChange: ss.mkdel(this, function(e) {
				this.props.onTitleInputTextChanged(ss.cast(e.target, ss.isValue(e.target) && (ss.isInstanceOfType(e.target, Element) && e.target.tagName === 'INPUT')).value);
			}) })), spiff.DOMElements.span(this.$inputErrorTextProps(valid), tab.Strings.DataAlertNoSubjectErrorMessage));
		},
		$renderNotificationIntervalInput: function DataAlertCreateComponent$RenderNotificationIntervalInput() {
			return spiff.DOMElements.div({ className: 'tab-dataAlertNotificationIntervalInputArea' }, React.createElement(SharedWidgets.DropdownWidget, this.props.notificationIntervalProps));
		},
		$renderAddRecipients: function DataAlertCreateComponent$RenderAddRecipients() {
			return spiff.DOMElements.div({ className: 'tab-dataAlertAddRecipients', disabled: !this.props.readyForInteraction }, spiff.DOMElements.label({ className: 'tab-dataAlertAddRecipientsLabel' }, spiff.DOMElements.span({ className: 'tab-dataAlertLabelText' }, tab.Strings.DataAlertRecipients), React.createElement($tab_RecipientSearchSelectorComponent, this.props.recipientSearchSelectorProps)));
		},
		$renderEmailInputIfNecessary: function DataAlertCreateComponent$RenderEmailInputIfNecessary() {
			var inputClass = 'tab-dataAlertEmailInput tab-TextInput';
			if (!this.props.currentUserEmailIsValid) {
				inputClass += ' error';
			}
			return spiff.DOMElements.div({ className: 'tab-dataAlertEmailInputArea', disabled: !this.props.readyForInteraction, style: { visibility: (this.props.showEmailInput ? 'visible' : 'hidden'), height: (this.props.showEmailInput ? 'auto' : '0px'), padding: (this.props.showEmailInput ? '' : '0px') } }, spiff.DOMElements.label({ className: 'tab-dataAlertEmailInputLabel' }, spiff.DOMElements.span({ className: 'tab-dataAlertLabelText' }, tab.Strings.ToolbarSubscribeEmailPlaceholder)), spiff.DOMElements.input({ type: 'text', className: inputClass, maxLength: $tab_EmailValidator.maxEmailLength, onChange: ss.mkdel(this, function(e) {
				this.props.onEmailInputTextChanged(ss.cast(e.target, ss.isValue(e.target) && (ss.isInstanceOfType(e.target, Element) && e.target.tagName === 'INPUT')).value);
			}) }));
		},
		$renderEmailErrorMessage: function DataAlertCreateComponent$RenderEmailErrorMessage() {
			return spiff.DOMElements.span(this.$inputErrorTextProps(ss.isNullOrEmptyString(this.props.emailErrorText)), this.props.emailErrorText);
		},
		$renderSaveButton: function DataAlertCreateComponent$RenderSaveButton() {
			var saveButtonProps = { handleClick: ss.mkdel(this, function(e) {
				this.$onClickSaveButton();
			}), buttonType: 2, testId: 'tab-dataAlertSubmitButton', children: this.props.submitButtonText, disabled: !this.props.enableSubmitButton };
			var saveButton = React.createElement(SharedWidgets.ButtonWidget, saveButtonProps);
			return spiff.DOMElements.div({ className: 'tab-dataAlertSubmitButtonArea' }, saveButton);
		},
		$onClickSaveButton: function DataAlertCreateComponent$OnClickSaveButton() {
			this.props.onSave();
		}
	}, React.Component);
	ss.initClass($tab_DataAlertPersisterBase, $asm, {
		add_persistSuccess: function DataAlertPersisterBase$add_PersistSuccess(value) {
			this.$1$PersistSuccessField = ss.delegateCombine(this.$1$PersistSuccessField, value);
		},
		remove_persistSuccess: function DataAlertPersisterBase$remove_PersistSuccess(value) {
			this.$1$PersistSuccessField = ss.delegateRemove(this.$1$PersistSuccessField, value);
		},
		add_persistFailure: function DataAlertPersisterBase$add_PersistFailure(value) {
			this.$1$PersistFailureField = ss.delegateCombine(this.$1$PersistFailureField, value);
		},
		remove_persistFailure: function DataAlertPersisterBase$remove_PersistFailure(value) {
			this.$1$PersistFailureField = ss.delegateRemove(this.$1$PersistFailureField, value);
		},
		getSubmitButtonText: function DataAlertPersisterBase$GetSubmitButtonText() {
			return '';
		},
		saveDataAlert: function DataAlertPersisterBase$SaveDataAlert(dataAlert, originalRecipients) {
		},
		onPersistSuccess: function DataAlertPersisterBase$OnPersistSuccess() {
			$tab_NotificationViewModel.showNotification(this.successMessage, null);
			if (!ss.staticEquals(this.$1$PersistSuccessField, null)) {
				this.$1$PersistSuccessField();
			}
		},
		onPersistFailure: function DataAlertPersisterBase$OnPersistFailure() {
			$tab_NotificationViewModel.showNotification(this.failureMessage, 0);
			if (!ss.staticEquals(this.$1$PersistFailureField, null)) {
				this.$1$PersistFailureField();
			}
		}
	});
	ss.initClass($tab_DataAlertCreatePersister, $asm, {
		getSubmitButtonText: function DataAlertCreatePersister$GetSubmitButtonText() {
			return tab.Strings.DataAlertCreateButton;
		},
		saveDataAlert: function DataAlertCreatePersister$SaveDataAlert(dataAlert, originalRecipients) {
			var failure = ss.mkdel(this, function(errorCode) {
				this.failureMessage = ((errorCode === 210006) ? tab.Strings.DataAlertDatasourceError : tab.Strings.DataAlertCreateFailure);
				this.onPersistFailure();
			});
			var handleGenericFailure = ss.mkdel(this, function(errorCode1) {
				this.failureMessage = tab.Strings.DataAlertCreateFailure;
				this.onPersistFailure();
			});
			if (dataAlert.get_isViewSaveNeeded()) {
				var $t1 = new Object();
				$t1.isHidden = true;
				$t1.isPublic = true;
				$t1.startViewId = 'DDA';
				var customView = $t1;
				tab.CustomizedViewRequests.saveCustomizedView(customView, ss.mkdel(this, function(cv) {
					dataAlert.set_customizedViewId(cv.id.toString());
					tab.WorkgroupServerCommands.createDataAlert(dataAlert, ss.mkdel(this, this.onPersistSuccess), failure);
				}), handleGenericFailure);
			}
			else {
				tab.WorkgroupServerCommands.createDataAlert(dataAlert, ss.mkdel(this, this.onPersistSuccess), failure);
			}
		}
	}, $tab_DataAlertPersisterBase);
	ss.initInterface($tab_IDataAlertPreparer, $asm, { add_dataAlertPrepared: null, remove_dataAlertPrepared: null, add_dataAlertPrepareFailed: null, remove_dataAlertPrepareFailed: null, get_preparedDataAlert: null, prepareDataAlert: null });
	ss.initClass($tab_DataAlertPreparerBase, $asm, {
		add_dataAlertPrepared: function DataAlertPreparerBase$add_DataAlertPrepared(value) {
			this.$1$DataAlertPreparedField = ss.delegateCombine(this.$1$DataAlertPreparedField, value);
		},
		remove_dataAlertPrepared: function DataAlertPreparerBase$remove_DataAlertPrepared(value) {
			this.$1$DataAlertPreparedField = ss.delegateRemove(this.$1$DataAlertPreparedField, value);
		},
		add_dataAlertPrepareFailed: function DataAlertPreparerBase$add_DataAlertPrepareFailed(value) {
			this.$1$DataAlertPrepareFailedField = ss.delegateCombine(this.$1$DataAlertPrepareFailedField, value);
		},
		remove_dataAlertPrepareFailed: function DataAlertPreparerBase$remove_DataAlertPrepareFailed(value) {
			this.$1$DataAlertPrepareFailedField = ss.delegateRemove(this.$1$DataAlertPrepareFailedField, value);
		},
		get_preparedDataAlert: function DataAlertPreparerBase$get_PreparedDataAlert() {
			return this.dataAlert;
		},
		prepareDataAlert: null,
		raiseActionEvent: function DataAlertPreparerBase$RaiseActionEvent(action) {
			if (!ss.staticEquals(action, null)) {
				action();
			}
		},
		raiseDataAlertPrepared: function DataAlertPreparerBase$RaiseDataAlertPrepared() {
			this.raiseActionEvent(this.$1$DataAlertPreparedField);
		},
		raiseDataAlertPrepareFailed: function DataAlertPreparerBase$RaiseDataAlertPrepareFailed() {
			this.raiseActionEvent(this.$1$DataAlertPrepareFailedField);
		}
	}, null, [$tab_IDataAlertPreparer]);
	ss.initClass($tab_DataAlertCreatePreparer, $asm, {
		prepareDataAlert: function DataAlertCreatePreparer$PrepareDataAlert() {
			this.dataAlert = new tab.DataAlert.$ctor1(this.$alertDialogPresModel);
			this.raiseDataAlertPrepared();
		}
	}, $tab_DataAlertPreparerBase, [$tab_IDataAlertPreparer]);
	ss.initClass($tab_DataAlertCreateViewModel, $asm, {
		get_emptySearch: function DataAlertCreateViewModel$get_EmptySearch() {
			return this.$3$EmptySearchField;
		},
		set_emptySearch: function DataAlertCreateViewModel$set_EmptySearch(value) {
			this.$3$EmptySearchField = value;
		},
		get_noResults: function DataAlertCreateViewModel$get_NoResults() {
			return this.$3$NoResultsField;
		},
		set_noResults: function DataAlertCreateViewModel$set_NoResults(value) {
			this.$3$NoResultsField = value;
		},
		get_$conditionProps: function DataAlertCreateViewModel$get_ConditionProps() {
			return { label: tab.Strings.DataAlertCondition, testId: 'data-alert-condition-operation', onSelect: ss.mkdel(this, this.$onConditionOperatorChanged), disabled: !this.get_$isReadyForInteraction(), dropdownType: 1, selectedValue: (ss.isValue(this.$dataAlert) ? this.$dataAlert.get_operator().toString() : ''), menuItemInfos: _.map(tab.DataAlertConditionOperation.supportedOperations(), function(op) {
				return { value: op.toString(), displayValue: tab.DataAlertConditionOperation.displayString(op), isDivider: false };
			}), zIndex: tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex };
		},
		get_$notificationIntervalProps: function DataAlertCreateViewModel$get_NotificationIntervalProps() {
			var handleSelection = ss.mkdel(this, this.$onNotificationIntervalChanged);
			return { label: tab.Strings.DataAlertNotificationInterval, testId: 'data-alert-notification-interval', onSelect: handleSelection, disabled: !this.get_$isReadyForInteraction(), dropdownType: 1, selectedValue: (ss.isValue(this.$dataAlert) ? this.$dataAlert.get_notificationIntervalInMinutes().toString() : ''), menuItemInfos: _.map(tab.DataAlertNotificationInterval.supportedIntervals(), function(interval) {
				return { value: interval.toString(), displayValue: tab.DataAlertNotificationInterval.convertToString(interval), isDivider: false };
			}), zIndex: tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex };
		},
		get_$recipientSearchSelectorProps: function DataAlertCreateViewModel$get_RecipientSearchSelectorProps() {
			return { users: this.users, addUser: ss.mkdel(this, this.addUser), removeUser: ss.mkdel(this, this.removeUser), isUsers: true, userValidator: ss.mkdel(this, this.$userValidator), userErrorMessageGenerator: ss.mkdel(this, this.$userErrorMessageGenerator), noResults: ss.mkdel(this, this.setNoResults), emptySearch: ss.mkdel(this, this.setIsSearchEmpty), placeholderMessage: tab.Strings.DataAlertsRecipientsSearchPlaceholder, removeRecipientByIndex: ss.mkdel(this, this.removeUserByIndex) };
		},
		get_$submitButtonEnabled: function DataAlertCreateViewModel$get_SubmitButtonEnabled() {
			return ss.isValue(this.$dataAlert) && this.$dataAlert.get_thresholdIsValid() && !this.$submitButtonPressed && this.get_$currentUserEmailValid() && !ss.isNullOrEmptyString(this.$dataAlert.get_title()) && this.get_emptySearch() && this.$readyForInteraction;
		},
		get_$currentUserEmailValid: function DataAlertCreateViewModel$get_CurrentUserEmailValid() {
			if (tab.FeatureFlags.isEnabled('AlertRecipientPermissionsErrors')) {
				if (this.$currentUserIsARecipientAndHasNoEmail()) {
					return this.get_$newEmailHasValidFormat();
				}
				return true;
			}
			else {
				if (this.$currentUserIsARecipientAndHasNoEmail()) {
					return this.get_$newEmailHasValidFormat() && this.get_$recipientsWithNoEmailCount() === 1;
				}
				return this.get_$recipientsWithNoEmailCount() === 0;
			}
		},
		get_$recipientsWithNoEmailCount: function DataAlertCreateViewModel$get_RecipientsWithNoEmailCount() {
			return this.users.filter(function(user) {
				return !user.hasEmail;
			}).length;
		},
		get_$invalidRecipientsCount: function DataAlertCreateViewModel$get_InvalidRecipientsCount() {
			var invalidUserCount = this.users.filter(ss.mkdel(this, function(user) {
				return !this.$isValidOrPendingUser(user);
			})).length;
			if (this.$currentUserIsARecipientAndHasNotEnteredValidEmail()) {
				return invalidUserCount + 1;
			}
			return invalidUserCount;
		},
		get_$newEmailHasValidFormat: function DataAlertCreateViewModel$get_NewEmailHasValidFormat() {
			return $tab_EmailValidator.validate(this.$email);
		},
		get_$isReadyForInteraction: function DataAlertCreateViewModel$get_IsReadyForInteraction() {
			return this.$readyForInteraction;
		},
		$setupRecipientsList: function DataAlertCreateViewModel$SetupRecipientsList() {
			this.users = [];
			this.set_emptySearch(true);
		},
		$setupDataAlertEvents: function DataAlertCreateViewModel$SetupDataAlertEvents() {
			this.$dataAlert.add_titleChanged(ss.mkdel(this, this.refresh));
			this.$dataAlert.add_notificationIntervalChanged(ss.mkdel(this, this.refresh));
			this.$dataAlert.add_publicChanged(ss.mkdel(this, this.refresh));
			this.$dataAlert.add_measureChanged(ss.mkdel(this, this.refresh));
			this.$dataAlert.add_conditionChanged(ss.mkdel(this, this.refresh));
			this.$dataAlert.add_recipientsChanged(ss.mkdel(this, this.refresh));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$dataAlert.remove_titleChanged(ss.mkdel(this, this.refresh));
				this.$dataAlert.remove_notificationIntervalChanged(ss.mkdel(this, this.refresh));
				this.$dataAlert.remove_publicChanged(ss.mkdel(this, this.refresh));
				this.$dataAlert.remove_measureChanged(ss.mkdel(this, this.refresh));
				this.$dataAlert.remove_conditionChanged(ss.mkdel(this, this.refresh));
				this.$dataAlert.remove_recipientsChanged(ss.mkdel(this, this.refresh));
			})));
		},
		$setupDataAlertPreparerEvents: function DataAlertCreateViewModel$SetupDataAlertPreparerEvents() {
			this.$alertPreparer.add_dataAlertPrepared(ss.mkdel(this, this.$onDataAlertPrepared));
			this.$alertPreparer.add_dataAlertPrepareFailed(ss.mkdel(this, this.onDataAlertPrepareFailed));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$alertPreparer.remove_dataAlertPrepared(ss.mkdel(this, this.$onDataAlertPrepared));
				this.$alertPreparer.remove_dataAlertPrepareFailed(ss.mkdel(this, this.onDataAlertPrepareFailed));
			})));
		},
		$setupDebouncer: function DataAlertCreateViewModel$SetupDebouncer() {
			this.$updateReferenceLineDebouncer = new tab.Debouncer(ss.mkdel(this, function() {
				var deferredValue = tab.DataAlertClientCommands.updateDataAlert(this.$dataAlert);
				deferredValue.done(ss.mkdel(this, function(alertConditionMet) {
					this.$dataAlert.set_alertConditionMet(alertConditionMet);
					this.refresh();
				}));
			}), $tab_DataAlertCreateViewModel.debounceTimeout);
			this.disposables.add$1(this.$updateReferenceLineDebouncer);
		},
		$getThresholdMessage: function DataAlertCreateViewModel$GetThresholdMessage() {
			if (ss.isNullOrUndefined(this.$dataAlert)) {
				return '';
			}
			if (this.$dataAlert.get_thresholdIsValid()) {
				return (this.$dataAlert.get_alertConditionMet() ? tab.Strings.DataAlertThresholdConditionMet : tab.Strings.DataAlertThresholdConditionUnmet);
			}
			var thresholdDataType = this.$dataAlert.get_conditionPresModel().dataType;
			if (thresholdDataType === 'integer') {
				if (ss.isNullOrUndefined(tab.ApplicationModel.get_instance().get_appPresModel())) {
					if (tab.DoubleUtil.isValidDouble(this.$dataAlert.get_threshold())) {
						return tab.Strings.DataAlertThresholdErrorIntegerInputDouble;
					}
				}
				else {
					var format = tab.ApplicationModel.get_instance().get_appPresModel().numberFormats;
					if (tab.DoubleUtil.isValidDouble(tableau.format.reformatNumberToJsFormat(this.$dataAlert.get_threshold(), format))) {
						return tab.Strings.DataAlertThresholdErrorIntegerInputDouble;
					}
				}
				return tab.Strings.DataAlertThresholdErrorIntegerInputNonNumeric;
			}
			if (thresholdDataType === 'real') {
				return tab.Strings.DataAlertThresholdErrorDouble;
			}
			throw new ss.ArgumentException('ThresholdType.DataType is not among the supported data types');
		},
		$getSubmitButtonText: function DataAlertCreateViewModel$GetSubmitButtonText() {
			if (this.$submitButtonPressed) {
				return tab.Strings.DataAlertCreateButtonSaving;
			}
			return this.$alertPersister.getSubmitButtonText();
		},
		refresh: function DataAlertCreateViewModel$Refresh() {
			this.updateProps$1({ readyForInteraction: this.get_$isReadyForInteraction(), onThresholdInputTextChanged: ss.mkdel(this, this.$onThresholdTextChanged), maxThresholdLength: $tab_DataAlertCreateViewModel.$maxThresholdLength, onTitleInputTextChanged: ss.mkdel(this, this.$onTitleTextChanged), onPublicChanged: ss.mkdel(this, this.$onPublicChanged), onSave: ss.mkdel(this, this.$onComponentSave), title: (ss.isValue(this.$dataAlert) ? this.$dataAlert.get_title() : this.$getDefaultTitle()), isPublic: (ss.isValue(this.$dataAlert) ? this.$dataAlert.get_isPublic() : false), selectionCaption: (ss.isValue(this.$dataAlert) ? this.$dataAlert.get_selectionCaption() : ''), threshold: (ss.isValue(this.$dataAlert) ? this.$dataAlert.get_threshold() : ''), thresholdIsValid: ss.isValue(this.$dataAlert) && this.$dataAlert.get_thresholdIsValid(), alertConditionMet: ss.isValue(this.$dataAlert) && this.$dataAlert.get_alertConditionMet(), thresholdMessage: this.$getThresholdMessage(), onEmailInputTextChanged: ss.mkdel(this, this.$onEmailInputTextChanged), showEmailInput: this.$currentUserIsARecipientAndHasNoEmail(), recipientSearchSelectorProps: this.get_$recipientSearchSelectorProps(), enableSubmitButton: this.get_$submitButtonEnabled(), notificationIntervalProps: this.get_$notificationIntervalProps(), emailErrorText: this.$emailErrorText(), currentUserEmailIsValid: this.get_$currentUserEmailValid(), submitButtonText: this.$getSubmitButtonText(), conditionProps: this.get_$conditionProps() });
		},
		addUser: function DataAlertCreateViewModel$AddUser(user) {
			if (_.any(this.users, function(value) {
				return value.id === user.id;
			})) {
				return;
			}
			if (tab.FeatureFlags.isEnabled('AlertRecipientPermissionsErrors') && user.id !== tsConfig.current_user_id) {
				var promise = tab.WorkgroupServerCommands.checkIfUserCanReceiveDataAlert(user.id + '');
				if (ss.isNullOrUndefined(user.dataAlertRecipientErrorCode)) {
					user.dataAlertRecipientErrorCode = -1;
				}
				promise.done(ss.mkdel(this, function() {
					user.dataAlertRecipientErrorCode = 0;
					this.refresh();
				}));
				promise.fail(ss.mkdel(this, function(errorCode) {
					user.dataAlertRecipientErrorCode = errorCode;
					this.refresh();
				}));
			}
			this.users.push(user);
			this.refresh();
		},
		setUsers: function DataAlertCreateViewModel$SetUsers(users) {
			this.users = users;
			this.refresh();
		},
		removeUser: function DataAlertCreateViewModel$RemoveUser(user) {
			ss.remove(this.users, user);
			this.refresh();
		},
		removeUserByIndex: function DataAlertCreateViewModel$RemoveUserByIndex(index) {
			ss.removeAt(this.users, index);
			this.refresh();
		},
		setIsSearchEmpty: function DataAlertCreateViewModel$SetIsSearchEmpty(isEmpty) {
			this.set_emptySearch(isEmpty);
			this.refresh();
		},
		setNoResults: function DataAlertCreateViewModel$SetNoResults(noResults) {
			this.set_noResults(noResults);
			this.refresh();
		},
		buildTelemetryObject: function DataAlertCreateViewModel$BuildTelemetryObject(isEditMode) {
			return ss.mkdict([$tab_DataAlertTelemetryConstants.submitButtonPressedProperty, this.$submitButtonPressed, $tab_DataAlertTelemetryConstants.totalRecipientCountProperty, this.users.length, $tab_DataAlertTelemetryConstants.invalidUnlicensedRecipientCountProperty, this.users.filter(function(user) {
				return user.dataAlertRecipientErrorCode === 90;
			}).length, $tab_DataAlertTelemetryConstants.invalidViewPermissionsRecipientCountProperty, this.users.filter(function(user1) {
				return user1.dataAlertRecipientErrorCode === 210007;
			}).length, $tab_DataAlertTelemetryConstants.invalidDownloadPermissionRecipientCountProperty, this.users.filter(function(user2) {
				return user2.dataAlertRecipientErrorCode === 210008;
			}).length, $tab_DataAlertTelemetryConstants.invalidEmailRecipientCountProperty, this.users.filter(function(user3) {
				return user3.dataAlertRecipientErrorCode === 10011;
			}).length, $tab_DataAlertTelemetryConstants.operatorTypeProperty, this.$dataAlert.get_operator(), $tab_DataAlertTelemetryConstants.emailFrequencyProperty, this.$dataAlert.get_notificationIntervalInMinutes(), $tab_DataAlertTelemetryConstants.conditionMetProperty, this.$dataAlert.get_alertConditionMet(), $tab_DataAlertTelemetryConstants.submitButtonEnabledProperty, this.get_$submitButtonEnabled(), $tab_DataAlertTelemetryConstants.currentUserHasEmailProperty, !tab.MiscUtil.isNullOrEmpty$3(tsConfig.current_user_email), $tab_DataAlertTelemetryConstants.editModeProperty, isEditMode]);
		},
		$emailErrorText: function DataAlertCreateViewModel$EmailErrorText() {
			if (tab.FeatureFlags.isEnabled('AlertRecipientPermissionsErrors')) {
				if (this.$currentUserIsARecipientAndHasNotEnteredValidEmail()) {
					return tab.Strings.SubscribeInvalidAddress;
				}
				else if (this.get_$invalidRecipientsCount() === 1) {
					return tab.Strings.DataAlertInvalidUser;
				}
				else if (this.get_$invalidRecipientsCount() > 1) {
					return tab.Strings.DataAlertInvalidPluralUsers(this.get_$invalidRecipientsCount());
				}
				else if (this.get_noResults() && !this.get_emptySearch()) {
					return tab.Strings.DataAlertNoUsersMatchSearch;
				}
				return '';
			}
			else {
				if (this.$currentUserIsARecipientAndHasNoEmail()) {
					if (this.get_$currentUserEmailValid()) {
						return '';
					}
					return tab.Strings.SubscribeInvalidAddress;
				}
				else if (this.get_$recipientsWithNoEmailCount() > 0) {
					return tab.Strings.DataAlertRecipientWithNoEmail;
				}
				else if (this.get_noResults() && !this.get_emptySearch()) {
					return tab.Strings.DataAlertNoUsersMatchSearch;
				}
				return '';
			}
		},
		$isValidOrPendingUser: function DataAlertCreateViewModel$IsValidOrPendingUser(user) {
			return user.id === tsConfig.current_user_id || user.dataAlertRecipientErrorCode === 0 || user.dataAlertRecipientErrorCode === -1;
		},
		$currentUserIsARecipientAndHasNotEnteredValidEmail: function DataAlertCreateViewModel$CurrentUserIsARecipientAndHasNotEnteredValidEmail() {
			return this.$currentUserIsARecipientAndHasNoEmail() && !this.get_$currentUserEmailValid();
		},
		$currentUserIsARecipientAndHasNoEmail: function DataAlertCreateViewModel$CurrentUserIsARecipientAndHasNoEmail() {
			return this.$currentUserIsARecipient() && tab.MiscUtil.isNullOrEmpty$3(tsConfig.current_user_email);
		},
		$currentUserIsARecipient: function DataAlertCreateViewModel$CurrentUserIsARecipient() {
			return this.users.filter(function(user) {
				return user.id === tsConfig.current_user_id;
			}).length === 1;
		},
		$onEmailInputTextChanged: function DataAlertCreateViewModel$OnEmailInputTextChanged(newValue) {
			this.$email = newValue;
			this.refresh();
		},
		$onTitleTextChanged: function DataAlertCreateViewModel$OnTitleTextChanged(newValue) {
			if (ss.isNullOrUndefined(this.$dataAlert)) {
				return;
			}
			if (ss.referenceEquals(newValue, this.$dataAlert.get_title())) {
				return;
			}
			this.$dataAlert.set_title(newValue);
		},
		$onPublicChanged: function DataAlertCreateViewModel$OnPublicChanged(newValue) {
			if (ss.isNullOrUndefined(this.$dataAlert)) {
				return;
			}
			this.$dataAlert.set_isPublic(newValue);
		},
		$onDataAlertPrepared: function DataAlertCreateViewModel$OnDataAlertPrepared() {
			this.$dataAlert = this.$alertPreparer.get_preparedDataAlert();
			this.$initialRecipients = ss.arrayClone(this.$dataAlert.get_recipients());
			this.$setupDataAlertEvents();
			this.$setupDebouncer();
			this.$onRecipientsChanged();
			var $t1 = this.$dataAlert.get_title();
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.$getDefaultTitle();
			}
			var title = $t1;
			this.$onTitleTextChanged(title);
			this.$onPublicChanged(this.$dataAlert.get_isPublic());
			this.$dataAlert.set_deviceType(tabBootstrap.ViewerBootstrap.get_instance().get_deviceDetector().get_deviceType());
			this.$readyForInteraction = true;
			this.refresh();
		},
		onDataAlertPrepareFailed: function DataAlertCreateViewModel$OnDataAlertPrepareFailed() {
			this.$submitButtonPressed = false;
			this.$readyForInteraction = false;
			this.refresh();
		},
		onDataAlertPreparing: function DataAlertCreateViewModel$OnDataAlertPreparing() {
			this.$readyForInteraction = false;
			this.refresh();
		},
		$getDefaultTitle: function DataAlertCreateViewModel$GetDefaultTitle() {
			var defaultAlertTitle = tab.Strings.DataAlertSubjectTemplate(tsConfig.current_sheet_name);
			if (defaultAlertTitle.length > $tab_DataAlertCreateViewModel.maxTitleLength) {
				defaultAlertTitle = defaultAlertTitle.substr(0, $tab_DataAlertCreateViewModel.maxTitleLength - 3) + '...';
			}
			return defaultAlertTitle;
		},
		$onNotificationIntervalChanged: function DataAlertCreateViewModel$OnNotificationIntervalChanged(newSelectedInterval) {
			if (ss.isNullOrUndefined(newSelectedInterval)) {
				return;
			}
			if (ss.isValue(this.$dataAlert)) {
				this.$dataAlert.set_notificationIntervalInMinutes(newSelectedInterval);
			}
		},
		$onThresholdTextChanged: function DataAlertCreateViewModel$OnThresholdTextChanged(newThresholdValue) {
			if (ss.referenceEquals(newThresholdValue, this.$dataAlert.get_threshold())) {
				return;
			}
			if (tab.MiscUtil.isNullOrEmpty$3(newThresholdValue)) {
				this.$updateReferenceLineDebouncer.cancel();
			}
			else {
				this.$updateReferenceLine();
			}
			this.$updateCondition(this.$dataAlert.get_operator(), newThresholdValue);
		},
		$onConditionOperatorChanged: function DataAlertCreateViewModel$OnConditionOperatorChanged(newSelectedItem) {
			if (ss.isNullOrUndefined(newSelectedItem)) {
				return;
			}
			var newOperatorType = newSelectedItem;
			this.$onConditionOperatorChanged$1(newOperatorType);
		},
		$onConditionOperatorChanged$1: function DataAlertCreateViewModel$OnConditionOperatorChanged(newOperatorType) {
			if (newOperatorType === this.$dataAlert.get_operator()) {
				return;
			}
			this.$updateReferenceLine();
			this.$updateCondition(newOperatorType, this.$dataAlert.get_threshold());
		},
		$updateReferenceLine: function DataAlertCreateViewModel$UpdateReferenceLine() {
			if (ss.isValue(this.$updateReferenceLineDebouncer)) {
				this.$updateReferenceLineDebouncer.invokeActionDelayed();
			}
		},
		$onComponentSave: function DataAlertCreateViewModel$OnComponentSave() {
			this.$submitButtonPressed = true;
			this.refresh();
			if (tab.MiscUtil.isNullOrEmpty$3(tsConfig.current_user_email)) {
				this.$saveEmailAddressThenSaveAlert();
			}
			else {
				this.$saveDataAlert();
			}
		},
		$saveEmailAddressThenSaveAlert: function DataAlertCreateViewModel$SaveEmailAddressThenSaveAlert() {
			var success = ss.mkdel(this, this.$saveDataAlert);
			var failure = ss.mkdel(this, function(errorCode) {
				var errorMessage = ((errorCode === 10011) ? tab.Strings.SubscribeInvalidAddress : tab.Strings.DataAlertCreateFailure);
				$tab_NotificationViewModel.showNotification(errorMessage, null);
				this.$submitButtonPressed = false;
				this.refresh();
			});
			tab.WorkgroupServerCommands.setUserEmail(this.$email, success, failure);
		},
		$saveDataAlert: function DataAlertCreateViewModel$SaveDataAlert() {
			if (tab.FeatureFlags.isEnabled('AlertRecipientPermissionsErrors')) {
				var validUsers = this.users.filter(ss.mkdel(this, function(user) {
					return this.$isValidOrPendingUser(user);
				}));
				this.$dataAlert.updateRecipients(validUsers);
			}
			else {
				this.$dataAlert.updateRecipients(this.users);
			}
			this.$alertPersister.saveDataAlert(this.$dataAlert, this.$initialRecipients);
		},
		$onRecipientsChanged: function DataAlertCreateViewModel$OnRecipientsChanged() {
			this.users = this.$dataAlert.get_recipients();
		},
		$updateCondition: function DataAlertCreateViewModel$UpdateCondition(operatorType, threshold) {
			var thresholdText = this.$dataAlert.get_conditionPresModel().dataAlertThresholdText;
			if (this.$dataAlert.isValidThresholdText(threshold)) {
				thresholdText = threshold;
			}
			this.$dataAlert.set_threshold(threshold);
			this.$dataAlert.set_conditionPresModel({ dataAlertConditionOp: operatorType, dataAlertThresholdText: thresholdText, dataType: this.$dataAlert.get_conditionPresModel().dataType });
		},
		$userValidator: function DataAlertCreateViewModel$UserValidator(user) {
			if (user.id === tsConfig.current_user_id) {
				return ((this.get_$newEmailHasValidFormat() || user.hasEmail) ? 0 : 1);
			}
			if (tab.FeatureFlags.isEnabled('AlertRecipientPermissionsErrors')) {
				if (user.dataAlertRecipientErrorCode === -1) {
					return 2;
				}
				if (user.dataAlertRecipientErrorCode === 0) {
					return 0;
				}
				return 1;
			}
			else {
				return (user.hasEmail ? 0 : 1);
			}
		},
		$userErrorMessageGenerator: function DataAlertCreateViewModel$UserErrorMessageGenerator(user) {
			if (tab.FeatureFlags.isEnabled('AlertRecipientPermissionsErrors')) {
				switch (user.dataAlertRecipientErrorCode) {
					case 10011: {
						return tab.Strings.DataAlertRecipientPillNoEmail(user.friendlyName);
					}
					case 90: {
						return tab.Strings.DataAlertRecipientPillUnlicensed(user.friendlyName);
					}
					case 210007: {
						return tab.Strings.DataAlertRecipientPillNoViewPermissions(user.friendlyName);
					}
					case 210008: {
						return tab.Strings.DataAlertRecipientPillNoDownloadPermissions(user.friendlyName);
					}
					default: {
						return '';
					}
				}
			}
			else {
				return '';
			}
		}
	}, ss.makeGenericType(spiff.BaseComponentViewModel$1, [Object]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object])]);
	ss.initClass($tab_DataAlertDialogViewModel, $asm, {
		add_hideDialogRequested: function DataAlertDialogViewModel$add_HideDialogRequested(value) {
			this.$3$HideDialogRequestedField = ss.delegateCombine(this.$3$HideDialogRequestedField, value);
		},
		remove_hideDialogRequested: function DataAlertDialogViewModel$remove_HideDialogRequested(value) {
			this.$3$HideDialogRequestedField = ss.delegateRemove(this.$3$HideDialogRequestedField, value);
		},
		add_dialogHidden: function DataAlertDialogViewModel$add_DialogHidden(value) {
			this.$3$DialogHiddenField = ss.delegateCombine(this.$3$DialogHiddenField, value);
		},
		remove_dialogHidden: function DataAlertDialogViewModel$remove_DialogHidden(value) {
			this.$3$DialogHiddenField = ss.delegateRemove(this.$3$DialogHiddenField, value);
		},
		add_alertDeletedFromErrorDialog: function DataAlertDialogViewModel$add_AlertDeletedFromErrorDialog(value) {
			this.$3$AlertDeletedFromErrorDialogField = ss.delegateCombine(this.$3$AlertDeletedFromErrorDialogField, value);
		},
		remove_alertDeletedFromErrorDialog: function DataAlertDialogViewModel$remove_AlertDeletedFromErrorDialog(value) {
			this.$3$AlertDeletedFromErrorDialogField = ss.delegateRemove(this.$3$AlertDeletedFromErrorDialogField, value);
		},
		get_$isDataAlertEdit: function DataAlertDialogViewModel$get_IsDataAlertEdit() {
			return !ss.isNullOrEmptyString(this.$editDataAlertId);
		},
		get_createViewModel: function DataAlertDialogViewModel$get_CreateViewModel() {
			return this.$createViewModel;
		},
		get_dialogHostViewModel: function DataAlertDialogViewModel$get_DialogHostViewModel() {
			return this.$3$DialogHostViewModelField;
		},
		set_dialogHostViewModel: function DataAlertDialogViewModel$set_DialogHostViewModel(value) {
			this.$3$DialogHostViewModelField = value;
		},
		get_$presModel: function DataAlertDialogViewModel$get_PresModel() {
			return this.$model.pm;
		},
		get_$inlineEdit: function DataAlertDialogViewModel$get_InlineEdit() {
			return this.$3$InlineEditField;
		},
		set_$inlineEdit: function DataAlertDialogViewModel$set_InlineEdit(value) {
			this.$3$InlineEditField = value;
		},
		$setupView: function DataAlertDialogViewModel$SetupView() {
			this.set_dialogHostViewModel(new $tab_DialogHostViewModel());
			var dialogHostView = tab.ObjectRegistry.newView(ss.makeGenericType(spiff.ReactHostView$3, [$tab_DialogHostViewModel, $tab_DialogHostComponent, Object])).call(null, [this.get_dialogHostViewModel()]);
			var parent = $(document.createElement('div'));
			dialogHostView.addToDom(parent);
		},
		$showOrUpdateDialog: function DataAlertDialogViewModel$ShowOrUpdateDialog() {
			if (ss.isNullOrUndefined(this.get_$presModel()) || !this.get_$presModel().isDataAlertDialogVisible) {
				this.get_dialogHostViewModel().hide();
				this.$isShown = false;
				return;
			}
			if (this.get_$isDataAlertEdit() && this.$isDataAlertResume && !this.$isErrorState()) {
				this.$openDataAlertsPanel();
				$tab_Application.get_commonBannerProvider().showSuccessBanner(tab.Strings.DataAlertResumedSucessfullyToast, null, null, true);
				this.$isShown = false;
				this.$executeCloseDataAlertDialogCommand();
				return;
			}
			if (!this.$isShown) {
				this.$updateFromDialogPresModel();
				this.get_dialogHostViewModel().show(this);
				this.$isShown = true;
			}
		},
		setupInlineEditing: function DataAlertDialogViewModel$SetupInlineEditing(dataAlertId) {
			this.$editDataAlertId = dataAlertId;
			this.$isDataAlertResume = false;
			this.set_$inlineEdit(true);
		},
		$openDataAlertsPanel: function DataAlertDialogViewModel$OpenDataAlertsPanel() {
			var rightAreaDrawerViewModel = $tab_Application.get_instance().get_rightAreaDrawerViewModel();
			rightAreaDrawerViewModel.toggleDataAlertsPanel();
		},
		$updateFromDialogPresModel: function DataAlertDialogViewModel$UpdateFromDialogPresModel() {
			if (!this.get_$presModel().isDataAlertDialogVisible) {
				return;
			}
			if (this.$isErrorState()) {
				if (this.$isDataAlertResume) {
					this.$openDataAlertsPanel();
				}
				this.$createErrorViewModel();
			}
			else {
				this.$createPreparerAndPersister();
			}
			this.incrementProps();
		},
		$isErrorState: function DataAlertDialogViewModel$IsErrorState() {
			return ss.isValue(this.get_$presModel()) && !ss.isNullOrEmptyString(this.get_$presModel().dataAlertErrorText);
		},
		$createErrorViewModel: function DataAlertDialogViewModel$CreateErrorViewModel() {
			this.$errorViewModel = new $tab_DataAlertErrorViewModel(this.get_$presModel().dataAlertErrorText, this.$editDataAlertId, this.$isDataAlertResume || this.get_$isDataAlertEdit());
			this.$errorViewModel.add_okButtonClicked(ss.mkdel(this, this.$hideDialog));
			this.$errorViewModel.add_alertDeletedFromErrorDialog(ss.mkdel(this, this.$raiseAlertDeletedFromErrorDialog));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$errorViewModel.remove_okButtonClicked(ss.mkdel(this, this.$hideDialog));
			})));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$errorViewModel.remove_alertDeletedFromErrorDialog(ss.mkdel(this, this.$raiseAlertDeletedFromErrorDialog));
			})));
			this.disposables.add$1(this.addChildViewModel(this.$errorViewModel));
			this.disposables.add$1(this.$errorViewModel);
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$errorViewModel = null;
			})));
		},
		$raiseAlertDeletedFromErrorDialog: function DataAlertDialogViewModel$RaiseAlertDeletedFromErrorDialog() {
			this.raiseActionEvent(this.$3$AlertDeletedFromErrorDialogField);
		},
		$createPreparerAndPersister: function DataAlertDialogViewModel$CreatePreparerAndPersister() {
			if (this.get_$isDataAlertEdit()) {
				this.$alertPersister = $tab_DataAlertEditPersister.new$1(this.$editDataAlertId);
				this.$alertPreparer = $tab_DataAlertEditPreparer.new$1(this.get_$presModel(), this.$editDataAlertId);
			}
			else {
				this.$alertPersister = $tab_DataAlertCreatePersister.new$1();
				this.$alertPreparer = $tab_DataAlertCreatePreparer.new$1(this.get_$presModel());
			}
			this.$createViewModel = $tab_DataAlertCreateViewModel.new$1(this.$alertPreparer, this.$alertPersister);
			var closeForLoadFailureAction = ss.mkdel(this, function() {
				$tab_NotificationViewModel.showNotification(tab.Strings.DataAlertLoadForEditFailure, null);
				this.$hideDialog();
			});
			this.$alertPersister.add_persistSuccess(ss.mkdel(this, this.$hideDialog));
			this.$alertPersister.add_persistFailure(ss.mkdel(this, this.$hideDialog));
			this.$alertPreparer.add_dataAlertPrepareFailed(closeForLoadFailureAction);
			this.disposables.add$1(this.$createViewModel);
			this.disposables.add$1(this.addChildViewModel(this.$createViewModel));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$alertPersister.remove_persistSuccess(ss.mkdel(this, this.$hideDialog));
				this.$alertPersister.remove_persistFailure(ss.mkdel(this, this.$hideDialog));
				this.$alertPreparer.remove_dataAlertPrepareFailed(closeForLoadFailureAction);
				this.$alertPersister = null;
				this.$alertPreparer = null;
				this.$createViewModel = null;
			})));
			this.$alertPreparer.prepareDataAlert();
		},
		createInitialProps: function DataAlertDialogViewModel$CreateInitialProps() {
			return { dialogWidth: 400, isModal: true, positioningBehavior: 2, shouldAdjustPositionOnWindowResize: true, shouldReturnFocusOnClose: true, showCloseButton: true, testId: 'dataAlertDialog', type: 0 };
		},
		createUpdatedProps: function DataAlertDialogViewModel$CreateUpdatedProps() {
			return (this.$isErrorState() ? this.$getErrorProps() : this.$getCreateOrEditProps());
		},
		$getCreateOrEditProps: function DataAlertDialogViewModel$GetCreateOrEditProps() {
			return { children: this.$getCreateContent(), footerContent: null, shouldReturnFocusOnClose: true, showFooter: false, title: this.$getCreateOrEditTitle() };
		},
		$getCreateOrEditTitle: function DataAlertDialogViewModel$GetCreateOrEditTitle() {
			return (this.get_$isDataAlertEdit() ? tab.Strings.DataAlertDialogTitleEditMode : tab.Strings.DataAlertDialogTitle);
		},
		$getCreateContent: function DataAlertDialogViewModel$GetCreateContent() {
			return React.createElement($tab_DataAlertCreateComponent, this.$createViewModel.get_props());
		},
		$getErrorProps: function DataAlertDialogViewModel$GetErrorProps() {
			return this.$errorViewModel.get_dialogProps();
		},
		$hideDialog: function DataAlertDialogViewModel$HideDialog() {
			this.raiseActionEvent(this.$3$HideDialogRequestedField);
		},
		onDialogHidden: function DataAlertDialogViewModel$OnDialogHidden() {
			this.$executeCloseDataAlertDialogCommand();
			this.$isShown = false;
		},
		$executeCloseDataAlertDialogCommand: function DataAlertDialogViewModel$ExecuteCloseDataAlertDialogCommand() {
			tab.DataAlertClientCommands.closeDataAlertDialog().done([ss.mkdel(this, function() {
				this.raiseActionEvent(this.$3$DialogHiddenField);
			})]);
			if (!this.$isErrorState() && ss.isValue(this.$createViewModel)) {
				$tab_DataAlertTelemetry.$logSubmitOrCloseButtonClickedEvent(this.$createViewModel.buildTelemetryObject(this.get_$isDataAlertEdit()));
			}
			var removeAlertIdFromUrl = this.get_$isDataAlertEdit() && !this.get_$inlineEdit();
			if (removeAlertIdFromUrl || this.$isDataAlertResume) {
				if (ss.isValue(this.$alertPreparer) && this.$alertPreparer.get_preparedDataAlert().get_viewType().toString() === 'hiddenView') {
					var repoPathObject = new tab.RepoPathObject(tsConfig.repositoryUrl);
					var vizUriModel = tab.VizUriModel.createForViewingSheet(repoPathObject.get_originalViewURL());
					vizUriModel.removeQueryParam($tab_DataAlertEditUrlHelper.editDataAlertUrlParam);
					vizUriModel.removeQueryParam($tab_DataAlertEditUrlHelper.resumeDataAlertUrlParam);
					vizUriModel.removeQueryParam($tab_DataAlertEditUrlHelper.instanceIdUrlParam);
					vizUriModel.set_ignoreStickySession(true);
					vizUriModel.setWindowLocation(null);
				}
				else {
					var uriModel = tab.VizUriModel.createForCurrentWindowLocation(null);
					uriModel.removeQueryParam($tab_DataAlertEditUrlHelper.editDataAlertUrlParam);
					uriModel.removeQueryParam($tab_DataAlertEditUrlHelper.resumeDataAlertUrlParam);
					uriModel.replaceState(null);
				}
				if (ss.isValue($tab_Application.get_instance().get_apiEventHandler())) {
					$tab_Application.get_instance().get_apiEventHandler().removeEditDataAlertUrlParam(tsConfig.current_sheet_name);
				}
			}
			this.$editDataAlertId = null;
			this.$isDataAlertResume = false;
			_.defer(ss.mkdel(this, this.$clearDisposables));
		},
		$clearDisposables: function DataAlertDialogViewModel$ClearDisposables() {
			this.disposables.dispose();
		},
		onCancel: function DataAlertDialogViewModel$OnCancel(o, e) {
			this.$executeCloseDataAlertDialogCommand();
		},
		dispose: function DataAlertDialogViewModel$Dispose() {
			this.$model.remove_showOrUpdateDialog(ss.mkdel(this, this.$showOrUpdateDialog));
			tab.MiscUtil.dispose$1(this.get_dialogHostViewModel());
			spiff.BaseViewModel.prototype.dispose.call(this);
		}
	}, ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object]), spiff.IDialogContent]);
	ss.initClass($tab_DataAlertEditPersister, $asm, {
		getSubmitButtonText: function DataAlertEditPersister$GetSubmitButtonText() {
			return tab.Strings.DataAlertUpdateButton;
		},
		saveDataAlert: function DataAlertEditPersister$SaveDataAlert(dataAlert, originalRecipients) {
			var usersToAdd = $tab_DataAlertEditPersister.getDifferenceInUserLists(originalRecipients, dataAlert.get_recipients());
			var usersToRemove = $tab_DataAlertEditPersister.getDifferenceInUserLists(dataAlert.get_recipients(), originalRecipients);
			tab.WorkgroupServerCommands.updateDataAlert(dataAlert, this.$editAlertId, usersToAdd, usersToRemove, ss.mkdel(this, this.onPersistSuccess), ss.mkdel(this, this.onPersistFailure));
		}
	}, $tab_DataAlertPersisterBase);
	ss.initClass($tab_DataAlertEditPreparer, $asm, {
		prepareDataAlert: function DataAlertEditPreparer$PrepareDataAlert() {
			this.$getRestOfDataAlertInfoFromVizportal();
		},
		$onGetDataAlertCompleted: function DataAlertEditPreparer$OnGetDataAlertCompleted(alerts) {
			if (ss.isNullOrUndefined(alerts) || alerts.length === 0) {
				this.raiseDataAlertPrepareFailed();
				return;
			}
			if (alerts.length > 1) {
				this.raiseDataAlertPrepareFailed();
				return;
			}
			this.$setDataAlertParams(alerts);
			this.$dataAlertLoaded = true;
			this.$raiseDataAlertPreparedIfComplete();
		},
		$setDataAlertParams: function DataAlertEditPreparer$SetDataAlertParams(alerts) {
			var a = alerts[0];
			this.dataAlert.set_title(a.get_title());
			this.dataAlert.set_deviceType(a.get_deviceType());
			this.dataAlert.set_notificationIntervalInMinutes(a.get_notificationIntervalInMinutes());
			this.dataAlert.set_viewType(a.get_viewType());
			this.dataAlert.set_isPublic(a.get_isPublic());
		},
		$raiseDataAlertPreparedIfComplete: function DataAlertEditPreparer$RaiseDataAlertPreparedIfComplete() {
			if (this.$dataAlertLoaded && this.$dataAlertRecipientsLoaded) {
				this.raiseDataAlertPrepared();
			}
		},
		$onGetUsersForDataAlertCompleted: function DataAlertEditPreparer$OnGetUsersForDataAlertCompleted(users) {
			this.$dataAlertRecipientsLoaded = true;
			_.each(users, function(user) {
				user.hasEmail = true;
			});
			this.dataAlert.updateRecipients(users);
			this.$raiseDataAlertPreparedIfComplete();
		},
		$getRestOfDataAlertInfoFromVizportal: function DataAlertEditPreparer$GetRestOfDataAlertInfoFromVizportal() {
			this.$dataAlertLoaded = false;
			this.$dataAlertRecipientsLoaded = false;
			tab.WorkgroupServerCommands.getDataAlertForDataAlertId(tsConfig.current_view_id, this.$editAlertId).done(ss.mkdel(this, this.$onGetDataAlertCompleted)).fail(ss.mkdel(this, this.raiseDataAlertPrepareFailed));
			tab.WorkgroupServerCommands.getUsersForDataAlertId(this.$editAlertId).done(ss.mkdel(this, this.$onGetUsersForDataAlertCompleted)).fail(ss.mkdel(this, this.raiseDataAlertPrepareFailed));
		}
	}, $tab_DataAlertPreparerBase, [$tab_IDataAlertPreparer]);
	ss.initClass($tab_DataAlertEditUrlHelper, $asm, {});
	ss.initClass($tab_DataAlertErrorComponent, $asm, {
		render: function DataAlertErrorComponent$Render() {
			return spiff.DOMElements.div({ className: $tab_DataAlertErrorComponent.$errorContentClass }, this.renderGenericMessage());
		},
		renderGenericMessage: function DataAlertErrorComponent$RenderGenericMessage() {
			var genericMessage = (tab.MiscUtil.isNullOrEmpty$3(this.props.alertSubject) ? tab.Strings.DataAlertErrorDialogViewChanged(this.props.sheetName) : tab.Strings.DataAlertErrorDialogViewChangedWithSubject(this.props.sheetName, this.props.alertSubject));
			return spiff.DOMElements.div({ className: $tab_DataAlertErrorComponent.$genericMessageClass }, genericMessage);
		}
	}, spiff.PureRenderComponent);
	ss.initClass($tab_DataAlertErrorViewModel, $asm, {
		add_okButtonClicked: function DataAlertErrorViewModel$add_OkButtonClicked(value) {
			this.$3$OkButtonClickedField = ss.delegateCombine(this.$3$OkButtonClickedField, value);
		},
		remove_okButtonClicked: function DataAlertErrorViewModel$remove_OkButtonClicked(value) {
			this.$3$OkButtonClickedField = ss.delegateRemove(this.$3$OkButtonClickedField, value);
		},
		add_alertDeletedFromErrorDialog: function DataAlertErrorViewModel$add_AlertDeletedFromErrorDialog(value) {
			this.$3$AlertDeletedFromErrorDialogField = ss.delegateCombine(this.$3$AlertDeletedFromErrorDialogField, value);
		},
		remove_alertDeletedFromErrorDialog: function DataAlertErrorViewModel$remove_AlertDeletedFromErrorDialog(value) {
			this.$3$AlertDeletedFromErrorDialogField = ss.delegateRemove(this.$3$AlertDeletedFromErrorDialogField, value);
		},
		get_dialogProps: function DataAlertErrorViewModel$get_DialogProps() {
			return { children: this.$getErrorContent(), title: tab.Strings.DataAlertAccessErrorTitle, showFooter: true, footerContent: this.$getErrorFooterContent(), zIndex: tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex };
		},
		$loadAlertSubject: function DataAlertErrorViewModel$LoadAlertSubject() {
			tab.WorkgroupServerCommands.getDataAlertForDataAlertId(tsConfig.current_view_id, this.$alertId).done(ss.mkdel(this, this.$onGetDataAlertCompleted));
		},
		$onGetDataAlertCompleted: function DataAlertErrorViewModel$OnGetDataAlertCompleted(alerts) {
			if (alerts.length === 1) {
				this.$alertSubject = alerts[0].get_title();
			}
			this.incrementProps();
		},
		$getErrorContent: function DataAlertErrorViewModel$GetErrorContent() {
			return React.createElement($tab_DataAlertErrorComponent, this.get_props());
		},
		createUpdatedProps: function DataAlertErrorViewModel$CreateUpdatedProps() {
			return { errorText: this.$errorText, sheetName: tsConfig.current_sheet_name, alertSubject: this.$alertSubject };
		},
		$deleteAlert: function DataAlertErrorViewModel$DeleteAlert() {
			var failure = function() {
				$tab_NotificationViewModel.showNotification(tab.Strings.DataAlertDeleteFailureToast, null);
			};
			var success = ss.mkdel(this, function() {
				$tab_NotificationViewModel.showNotification(tab.Strings.DataAlertDeleteConfirmationToast(this.$alertSubject), null);
				this.raiseActionEvent(this.$3$AlertDeletedFromErrorDialogField);
			});
			tab.WorkgroupServerCommands.deleteDataAlerts([this.$alertId], success, failure);
		},
		$getErrorFooterContent: function DataAlertErrorViewModel$GetErrorFooterContent() {
			if (this.$canDelete) {
				return React.createElement(SharedWidgets.DialogFooterButtonsWidget, this.$createCancelAndDeleteButtons());
			}
			return React.createElement(SharedWidgets.DialogFooterButtonsWidget, this.$createOkButton());
		},
		$createOkButton: function DataAlertErrorViewModel$CreateOkButton() {
			return { buttons: [this.$addCancelButton(tab.Strings.DialogButtonOK)] };
		},
		$createCancelAndDeleteButtons: function DataAlertErrorViewModel$CreateCancelAndDeleteButtons() {
			return { buttons: [this.$addCancelButton(tab.Strings.DialogButtonCancel), this.$addDeleteButton()] };
		},
		$addDeleteButton: function DataAlertErrorViewModel$AddDeleteButton() {
			return { handleClick: ss.mkdel(this, function(e) {
				this.$deleteAlert();
				this.raiseActionEvent(this.$3$OkButtonClickedField);
			}), buttonType: 0, testId: 'DeleteAlert', children: tab.Strings.DataAlertDeleteButtonResumeError, disabled: false };
		},
		$addCancelButton: function DataAlertErrorViewModel$AddCancelButton(buttonText) {
			return { handleClick: ss.mkdel(this, function(e) {
				this.raiseActionEvent(this.$3$OkButtonClickedField);
			}), buttonType: 1, testId: 'OK', children: buttonText, disabled: false };
		}
	}, ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object])]);
	ss.initClass($tab_DataAlertPageReloadHandler, $asm, {});
	ss.initClass($tab_DataAlertTelemetry, $asm, {});
	ss.initClass($tab_DataAlertTelemetryConstants, $asm, {});
	ss.initClass($tab_DataHighlighterView, $asm, {
		get_compositeSearchWidget: function DataHighlighterView$get_CompositeSearchWidget() {
			return this.$compositeSearchWidget;
		},
		$handleInputTextChange: function DataHighlighterView$HandleInputTextChange(value) {
			this.$removeQueryDelayTimer();
			this.$updateSearchAndClearButtonState();
			if (value.trim().length > 0) {
				this.get_viewModel().set_isActive(true);
				this.$startQueryDelayTimer();
			}
			else {
				this.dataHighlighterViewModel.clearHighlighting();
				this.populateAndDisplayList(this.get_viewModel().get_fullDomainItemSet(), 1);
			}
			this.get_viewModel().lastSatisfiedSearchTerm = null;
			this.get_viewModel().lastSatisfiedSearchResults = null;
			this.get_viewModel().set_searchText(value);
		},
		$updateSearchAndClearButtonState: function DataHighlighterView$UpdateSearchAndClearButtonState() {
			if (this.$compositeSearchWidget.get_textInputView().get_text().trim().length > 0) {
				this.$compositeSearchWidget.get_searchButton().element.hide();
				this.$compositeSearchWidget.get_clearButton().element.show();
			}
			else {
				this.$compositeSearchWidget.get_searchButton().element.show();
				this.$compositeSearchWidget.get_clearButton().element.hide();
			}
		},
		$startQueryDelayTimer: function DataHighlighterView$StartQueryDelayTimer() {
			this.queryDelayTimer = window.setTimeout(ss.mkdel(this, this.$queryDelayTimerCallback), $tab_DataHighlighterView.queryDelayTimerMs);
		},
		$removeQueryDelayTimer: function DataHighlighterView$RemoveQueryDelayTimer() {
			this.queryDelayTimer = tab.MiscUtil.clearTimeout(this.queryDelayTimer);
		},
		$queryDelayTimerCallback: function DataHighlighterView$QueryDelayTimerCallback() {
			this.dataHighlighterViewModel.sendSearchQuery(this.get_compositeSearchWidget().get_textInputView().get_text(), false);
			this.$removeQueryDelayTimer();
		},
		handleNewSearchQueryResults: function DataHighlighterView$HandleNewSearchQueryResults(searchTerm, dataHighlighterItemSet) {
			if (!ss.referenceEquals(searchTerm, this.$compositeSearchWidget.get_textInputView().get_text()) || ss.isNullOrUndefined(dataHighlighterItemSet)) {
				return;
			}
			this.populateAndDisplayList(dataHighlighterItemSet, 2);
		},
		populateAndDisplayList: function DataHighlighterView$PopulateAndDisplayList(dataHighlighterItemSet, mode) {
			this.currentListPopulationMode = mode;
			this.$suggestionsListItemViewModels = tab.MiscUtil.dispose(this.$suggestionsListItemViewModels);
			this.$suggestionsListItemViewModels = [];
			var numberOfListItemsDisplayed = Math.min(dataHighlighterItemSet.dataHighlighterItems.length, this.get_viewModel().get_maxNumberListItems());
			for (var itemIndex = 0; itemIndex < numberOfListItemsDisplayed; itemIndex++) {
				var result = dataHighlighterItemSet.dataHighlighterItems[itemIndex];
				this.$suggestionsListItemViewModels.push(spiff.ListItemViewModel.newListItem(result.objectId.toString(), result, false, false, false));
			}
			if (numberOfListItemsDisplayed < dataHighlighterItemSet.totalNumberOfItemsInSet) {
				var notShownCount = dataHighlighterItemSet.totalNumberOfItemsInSet - numberOfListItemsDisplayed;
				var notShownMessage = ((notShownCount > 1) ? tab.Strings.SearchResultsNotShownPlural(notShownCount.toString()) : tab.Strings.SearchResultsNotShownSingular);
				this.$suggestionsListItemViewModels.push(spiff.ListItemViewModel.newListItem(notShownMessage, null, false, false, false));
				this.notShownResultsListItemIsVisible = true;
			}
			else {
				this.notShownResultsListItemIsVisible = false;
			}
			this.get_compositeSearchWidget().showListInsideUberPopup(this.$suggestionsListItemViewModels, this, this.dataHighlighterViewRootElement, $tab_DataHighlighterView.searchResultsListClassName, $tab_DataHighlighterView.$popupMaxHeight);
		},
		createListItemContent: function DataHighlighterView$CreateListItemContent(item) {
			var ListItemTemplate = "<div class='{0}' title='{1}'>{1}</div>";
			var listItemText;
			if (ss.isValue(item.get_data())) {
				var dataHighlighterItem = item.get_data();
				listItemText = dataHighlighterItem.text;
			}
			else {
				listItemText = item.get_id();
			}
			var listItemHtml = ss.formatString(ListItemTemplate, $tab_DataHighlighterView.searchResultsListItemLabelClassName, tab.EscapingUtil.escapeHtml(listItemText));
			return $(listItemHtml).css(this.get_viewModel().get_formatStyle());
		},
		handleListItemSelected: function DataHighlighterView$HandleListItemSelected(listItemViewModel) {
			if (ss.isNullOrUndefined(listItemViewModel.get_data())) {
				return;
			}
			var item = listItemViewModel.get_data();
			this.get_compositeSearchWidget().setSearchText(item.text);
			this.get_compositeSearchWidget().get_clearButton().element.show();
			this.get_compositeSearchWidget().get_searchButton().element.hide();
			this.get_viewModel().highlightItems([item.objectId]);
			this.get_compositeSearchWidget().get_textInputView().get_inputElement().blur();
			this.get_viewModel().lastSatisfiedSearchTerm = this.get_compositeSearchWidget().get_textInputView().get_text();
			this.get_viewModel().lastSatisfiedSearchResults = { dataHighlighterItems: [item] };
			this.get_viewModel().saveSearchTextForItem(item.text, item.objectId);
		},
		removeList: function DataHighlighterView$RemoveList() {
			this.currentListPopulationMode = 0;
			this.get_compositeSearchWidget().removeList();
		},
		handleTitleChanged: function DataHighlighterView$HandleTitleChanged() {
			this.setTitleFromModel();
		},
		setTitleFromModel: function DataHighlighterView$SetTitleFromModel() {
			if (ss.isValue(this.dataHighlighterViewModel.get_zoneTitleHtml())) {
				this.zoneTitleRegionRootElement.html(this.dataHighlighterViewModel.get_zoneTitleHtml());
				var titleAreaHeight = this.dataHighlighterViewModel.get_titleAreaHeight();
				if (titleAreaHeight > 0) {
					titleAreaHeight = Math.max(titleAreaHeight, 17);
					this.zoneTitleRegionRootElement.height(titleAreaHeight);
				}
				else {
					this.zoneTitleRegionRootElement.height('');
				}
				var titleAreaWidth = this.dataHighlighterViewModel.get_titleAreaWidth();
				if (titleAreaWidth > 0) {
					this.zoneTitleRegionRootElement.width(this.dataHighlighterViewModel.get_titleAreaWidth());
					this.$dataHighlighterContainer.addClass(spiff.UnificationClassNames.horizontalLayout);
				}
				else {
					this.$dataHighlighterContainer.removeClass(spiff.UnificationClassNames.horizontalLayout);
				}
				tableau.util.setupTitleEllipsis(this.zoneTitleRegionRootElement);
				this.zoneTitleRegionRootElement.attr('title', this.dataHighlighterViewModel.get_zoneTitleTooltip());
			}
			this.$dataHighlighterContainer.toggleClass('tabBordered', this.get_viewModel().get_zoneHasBorder());
		},
		handleTextInputElementClicked: function DataHighlighterView$HandleTextInputElementClicked() {
			var searchTextLength = this.get_compositeSearchWidget().get_textInputView().get_text().trim().length;
			this.$mouseCursorPositionBeforeClick = (this.$isDropdownListShowing() ? this.$searchBoxCursorPosition() : null);
			if (searchTextLength === 0) {
				this.populateAndDisplayList(this.dataHighlighterViewModel.get_fullDomainItemSet(), 1);
			}
			else if (!this.$isDropdownListShowing()) {
				this.$showSearchResultsAndHighlight();
			}
		},
		$searchBoxCursorPosition: function DataHighlighterView$SearchBoxCursorPosition() {
			var inputElement = this.get_compositeSearchWidget().get_textInputView().get_inputElement();
			var selectionStart = inputElement.prop('selectionStart');
			var selectionEnd = inputElement.prop('selectionEnd');
			var isTextSelected = selectionStart !== selectionEnd;
			if (isTextSelected) {
				return null;
			}
			return selectionStart;
		},
		$isDropdownListShowing: function DataHighlighterView$IsDropdownListShowing() {
			return ss.isValue(this.get_compositeSearchWidget().get_listViewModel());
		},
		$showSearchResultsAndHighlight: function DataHighlighterView$ShowSearchResultsAndHighlight() {
			if (ss.referenceEquals(this.get_viewModel().lastSatisfiedSearchTerm, this.get_compositeSearchWidget().get_textInputView().get_text()) && ss.isValue(this.get_viewModel().lastSatisfiedSearchResults)) {
				this.populateAndDisplayList(this.get_viewModel().lastSatisfiedSearchResults, 2);
			}
			this.get_viewModel().sendSearchQuery(this.get_compositeSearchWidget().get_textInputView().get_text(), false);
		},
		$handleSearchBoxFocusIn: function DataHighlighterView$HandleSearchBoxFocusIn(e) {
			this.get_viewModel().set_isActive(true);
			this.$selectTextOnMouseUp = true;
		},
		$handleSearchBoxFocusOut: function DataHighlighterView$HandleSearchBoxFocusOut(e) {
			tab.WindowHelper.clearSelection();
			this.$selectTextOnMouseUp = false;
		},
		$handleSearchBoxMouseUp: function DataHighlighterView$HandleSearchBoxMouseUp(e) {
			var cursorPositionNow = this.$searchBoxCursorPosition();
			var noTextSelectedNow = ss.isValue(cursorPositionNow);
			var noTextSelectedBeforeClick = ss.isValue(this.$mouseCursorPositionBeforeClick);
			if (this.$selectTextOnMouseUp) {
				if (noTextSelectedNow && !tsConfig.is_mobile) {
					tab.DomUtil.selectAllInputText(this.get_compositeSearchWidget().get_textInputView().get_inputElement());
				}
				this.$selectTextOnMouseUp = false;
			}
			else if (this.$isDropdownListShowing() && noTextSelectedBeforeClick && noTextSelectedNow) {
				var cursorPositionBeforeClickValue = ss.unbox(this.$mouseCursorPositionBeforeClick);
				var cursorPositionNowValue = ss.unbox(cursorPositionNow);
				if (cursorPositionBeforeClickValue === cursorPositionNowValue) {
					var textLength = this.get_compositeSearchWidget().get_textInputView().get_text().length;
					if (cursorPositionNowValue === textLength) {
						this.removeList();
					}
				}
			}
			this.$mouseCursorPositionBeforeClick = null;
		},
		handleSearchButtonClicked: function DataHighlighterView$HandleSearchButtonClicked() {
			this.get_compositeSearchWidget().get_textInputView().get_inputElement().focus();
			this.$selectTextOnMouseUp = false;
			this.populateAndDisplayList(this.dataHighlighterViewModel.get_fullDomainItemSet(), 1);
		},
		handleClearButtonClicked: function DataHighlighterView$HandleClearButtonClicked() {
			this.$selectTextOnMouseUp = false;
		},
		handleSearchTextChanged: function DataHighlighterView$HandleSearchTextChanged() {
			if (ss.isValue(this.queryDelayTimer)) {
				return;
			}
			this.get_compositeSearchWidget().setSearchText(this.get_viewModel().get_searchText());
			this.$updateSearchAndClearButtonState();
		},
		handleIsActiveChanged: function DataHighlighterView$HandleIsActiveChanged() {
			this.get_compositeSearchWidget().get_textInputView().get_inputElement().toggleClass($tab_DataHighlighterView.inactiveTextClassName, !this.get_viewModel().get_isActive());
		},
		$handleFullDomainItemsInSetChanged: function DataHighlighterView$HandleFullDomainItemsInSetChanged() {
			if (!this.$isDropdownListShowing()) {
				return;
			}
			var searchTextLength = this.get_compositeSearchWidget().get_textInputView().get_text().trim().length;
			if (searchTextLength > 0) {
				this.$showSearchResultsAndHighlight();
			}
			else {
				this.populateAndDisplayList(this.get_viewModel().get_fullDomainItemSet(), 1);
			}
		},
		handleEnterKeyPress: function DataHighlighterView$HandleEnterKeyPress() {
			this.removeList();
			this.get_compositeSearchWidget().get_textInputView().get_inputElement().blur();
		},
		handleEscapeKeyPress: function DataHighlighterView$HandleEscapeKeyPress() {
			if (ss.isNullOrEmptyString(this.get_compositeSearchWidget().get_textInputView().get_text())) {
				this.removeList();
				this.get_compositeSearchWidget().get_textInputView().get_inputElement().blur();
			}
			else {
				this.get_compositeSearchWidget().get_textInputView().set_text('');
			}
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_DataHighlighterViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_DataHighlighterViewModel]), spiff.IListItemContentCreator]);
	ss.initEnum($tab_DataHighlighterView$ListPopulationMode, $asm, { none: 0, fullDomain: 1, searchResults: 2 });
	ss.initClass($tab_DataHighlighterViewModel, $asm, {
		add_receivedSearchQueryResults: function DataHighlighterViewModel$add_ReceivedSearchQueryResults(value) {
			this.$2$ReceivedSearchQueryResultsField = ss.delegateCombine(this.$2$ReceivedSearchQueryResultsField, value);
		},
		remove_receivedSearchQueryResults: function DataHighlighterViewModel$remove_ReceivedSearchQueryResults(value) {
			this.$2$ReceivedSearchQueryResultsField = ss.delegateRemove(this.$2$ReceivedSearchQueryResultsField, value);
		},
		add_titleChanged: function DataHighlighterViewModel$add_TitleChanged(value) {
			this.$2$TitleChangedField = ss.delegateCombine(this.$2$TitleChangedField, value);
		},
		remove_titleChanged: function DataHighlighterViewModel$remove_TitleChanged(value) {
			this.$2$TitleChangedField = ss.delegateRemove(this.$2$TitleChangedField, value);
		},
		add_searchTextChanged: function DataHighlighterViewModel$add_SearchTextChanged(value) {
			this.$2$SearchTextChangedField = ss.delegateCombine(this.$2$SearchTextChangedField, value);
		},
		remove_searchTextChanged: function DataHighlighterViewModel$remove_SearchTextChanged(value) {
			this.$2$SearchTextChangedField = ss.delegateRemove(this.$2$SearchTextChangedField, value);
		},
		add_isActiveChanged: function DataHighlighterViewModel$add_IsActiveChanged(value) {
			this.$2$IsActiveChangedField = ss.delegateCombine(this.$2$IsActiveChangedField, value);
		},
		remove_isActiveChanged: function DataHighlighterViewModel$remove_IsActiveChanged(value) {
			this.$2$IsActiveChangedField = ss.delegateRemove(this.$2$IsActiveChangedField, value);
		},
		add_domainItemsChanged: function DataHighlighterViewModel$add_DomainItemsChanged(value) {
			this.$2$DomainItemsChangedField = ss.delegateCombine(this.$2$DomainItemsChangedField, value);
		},
		remove_domainItemsChanged: function DataHighlighterViewModel$remove_DomainItemsChanged(value) {
			this.$2$DomainItemsChangedField = ss.delegateRemove(this.$2$DomainItemsChangedField, value);
		},
		get_zoneTitleHtml: function DataHighlighterViewModel$get_ZoneTitleHtml() {
			if (ss.isValue(this.$zoneTitle)) {
				return this.$zoneTitle.html;
			}
			else {
				return '';
			}
		},
		get_titleAreaHeight: function DataHighlighterViewModel$get_TitleAreaHeight() {
			return ((ss.isValue(this.$zoneTitle) && this.$parentZoneViewModel.get_titleSize().h !== 0) ? this.$zoneTitle.h : 0);
		},
		get_titleAreaWidth: function DataHighlighterViewModel$get_TitleAreaWidth() {
			return ((ss.isValue(this.$zoneTitle) && this.$parentZoneViewModel.get_titleSize().w !== 0) ? this.$zoneTitle.w : 0);
		},
		get_zoneHasBorder: function DataHighlighterViewModel$get_ZoneHasBorder() {
			return this.$dataHighlighterModel.get_zoneHasBorder();
		},
		get_zoneWidth: function DataHighlighterViewModel$get_ZoneWidth() {
			return this.$dataHighlighterModel.get_zoneWidth();
		},
		get_zoneTitleTooltip: function DataHighlighterViewModel$get_ZoneTitleTooltip() {
			return (ss.isValue(this.$zoneTitle) ? this.$zoneTitle.caption : '');
		},
		get_searchPlaceholderString: function DataHighlighterViewModel$get_SearchPlaceholderString() {
			return this.$dataHighlighterModel.get_searchPlaceholderString();
		},
		get_fullDomainItemSet: function DataHighlighterViewModel$get_FullDomainItemSet() {
			return this.$dataHighlighterModel.get_fullDomainItemSet();
		},
		get_searchText: function DataHighlighterViewModel$get_SearchText() {
			return this.$searchText;
		},
		set_searchText: function DataHighlighterViewModel$set_SearchText(value) {
			var changed = !ss.referenceEquals(value, this.$searchText);
			this.$searchText = value;
			if (changed && !ss.staticEquals(this.$2$SearchTextChangedField, null)) {
				this.$2$SearchTextChangedField();
			}
		},
		get_numHighlighted: function DataHighlighterViewModel$get_NumHighlighted() {
			return this.$dataHighlighterModel.get_numHighlighted();
		},
		get_isActive: function DataHighlighterViewModel$get_IsActive() {
			return this.$isActive;
		},
		set_isActive: function DataHighlighterViewModel$set_IsActive(value) {
			var changed = value !== this.$isActive;
			this.$isActive = value;
			if (changed && !ss.staticEquals(this.$2$IsActiveChangedField, null)) {
				this.$2$IsActiveChangedField();
			}
		},
		get_maxNumberListItems: function DataHighlighterViewModel$get_MaxNumberListItems() {
			var $t1 = tab.FeatureParamsLookup.getInt(44);
			if (ss.isNullOrUndefined($t1)) {
				$t1 = this.$dataHighlighterModel.get_maxNumberListItems();
			}
			return $t1;
		},
		get_formatStyle: function DataHighlighterViewModel$get_FormatStyle() {
			return tab.FormattingConverters.makeFormatStyleDict(this.$dataHighlighterModel.get_bodyTextStyle(), null);
		},
		alertIfDomainItemsChanged: function DataHighlighterViewModel$AlertIfDomainItemsChanged() {
			if ($tab_DataHighlighterViewModel.$itemsSetsAreDifferent(this.$fullDomainItemsCached, this.get_fullDomainItemSet().dataHighlighterItems)) {
				this.$fullDomainItemsCached = ss.arrayClone(this.get_fullDomainItemSet().dataHighlighterItems);
				this.raiseActionEvent(this.$2$DomainItemsChangedField);
			}
		},
		$doFastHighlighting: function DataHighlighterViewModel$DoFastHighlighting() {
			return tab.ApplicationModel.get_instance().get_isLocalRenderMode();
		},
		sendSearchQuery: function DataHighlighterViewModel$SendSearchQuery(query, ignoreResponse) {
			if (tab.ApplicationModel.get_instance().get_isOffline()) {
				var lowerCaseQuery = query.toLowerCase();
				var listItems = [];
				var itemIds = [];
				var $t1 = this.$dataHighlighterModel.get_fullDomainItemSet().dataHighlighterItems;
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var item = $t1[$t2];
					if (item.text.toString().toLowerCase().indexOf(lowerCaseQuery) !== -1) {
						itemIds.push(item.objectId);
						listItems.push(item);
					}
				}
				this.lastSatisfiedSearchTerm = query;
				var results = { dataHighlighterItems: Array.prototype.slice.call(listItems), totalNumberOfItemsInSet: listItems.length };
				this.lastSatisfiedSearchResults = results;
				if (!ss.staticEquals(this.$2$ReceivedSearchQueryResultsField, null)) {
					this.$2$ReceivedSearchQueryResultsField(query, results);
				}
				this.highlightItems(Array.prototype.slice.call(itemIds));
			}
			else {
				var $t3 = new tab.HighlightItemsByPatternMatchCmd();
				$t3.cmdParams['fn'] = this.$dataHighlighterModel.get_fieldName();
				$t3.cmdParams['valueString'] = query;
				$t3.cmdParams['visualIdPresModel'] = this.$visualId;
				$t3.set_uiBlocking('none');
				$t3.invoke().done(ss.mkdel(this, function(response) {
					if (ignoreResponse) {
						return;
					}
					this.lastSatisfiedSearchTerm = query;
					this.lastSatisfiedSearchResults = response.$$cmdParams['dataHighlighterItemSet'];
					if (!ss.staticEquals(this.$2$ReceivedSearchQueryResultsField, null)) {
						this.$2$ReceivedSearchQueryResultsField(query, response.$$cmdParams['dataHighlighterItemSet']);
					}
				}));
			}
		},
		saveSearchTextForItem: function DataHighlighterViewModel$SaveSearchTextForItem(text, itemId) {
			var $t1 = new tab.HighlightItemsByPatternMatchCmd();
			$t1.cmdParams['fn'] = this.$dataHighlighterModel.get_fieldName();
			$t1.cmdParams['valueString'] = text;
			$t1.cmdParams['visualIdPresModel'] = this.$visualId;
			$t1.cmdParams['objectIds'] = [itemId];
			$t1.invoke();
		},
		highlightItems: function DataHighlighterViewModel$HighlightItems(itemIds) {
			if (itemIds.length > 0) {
				tab.SelectionClientCommands.highlightItems(this.$dataHighlighterModel, this.$dataHighlighterModel.get_fieldName(), itemIds, this.$visualId, this.$doFastHighlighting());
			}
		},
		clearHighlighting: function DataHighlighterViewModel$ClearHighlighting() {
			tab.SelectionClientCommands.clearHighlighting(this.$dataHighlighterModel, this.$dataHighlighterModel.get_fieldName(), this.$visualId, this.$doFastHighlighting());
		},
		restoreSearchResultsHighlighting: function DataHighlighterViewModel$RestoreSearchResultsHighlighting() {
			ss.Debug.assert(ss.isValue(this.lastSatisfiedSearchTerm) && ss.isValue(this.lastSatisfiedSearchResults), 'Expcted to have search results available to restore highlighting');
			if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
				if (ss.isValue(this.lastSatisfiedSearchResults)) {
					this.highlightItems(this.lastSatisfiedSearchResults.dataHighlighterItems.map(function(item) {
						return item.objectId;
					}));
				}
			}
			else {
				this.sendSearchQuery(this.lastSatisfiedSearchTerm, true);
			}
		},
		$handleParentZoneUpdate: function DataHighlighterViewModel$HandleParentZoneUpdate() {
			var zoneModel = this.$parentZoneViewModel.get_model();
			var hasTitleRegion = ss.isValue(zoneModel.pm) && ss.isValue(zoneModel.pm.zoneTitle);
			if (hasTitleRegion) {
				var updatedZoneTitle = (this.$parentZoneViewModel.get_model().get_hasTitle() ? zoneModel.pm.zoneTitle : null);
				if (!ss.referenceEquals(updatedZoneTitle, this.$zoneTitle)) {
					this.$zoneTitle = updatedZoneTitle;
					if (!ss.staticEquals(this.$2$TitleChangedField, null)) {
						this.$2$TitleChangedField();
					}
				}
			}
		},
		$handleDataHighlighterPresModelUpdate: function DataHighlighterViewModel$HandleDataHighlighterPresModelUpdate() {
			this.set_isActive(this.$dataHighlighterModel.get_isActive());
			this.set_searchText(this.$dataHighlighterModel.get_searchText());
			this.alertIfDomainItemsChanged();
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_DataHighlighterViewTemplate, $asm, {
		get_dataHighlighterContentElement: function DataHighlighterViewTemplate$get_DataHighlighterContentElement() {
			return this.$dataHighlighterContentElement;
		},
		get_dataHighlighterViewRootElement: function DataHighlighterViewTemplate$get_DataHighlighterViewRootElement() {
			return this.$dataHighlighterViewRootElement;
		},
		get_zoneTitleRegionRootElement: function DataHighlighterViewTemplate$get_ZoneTitleRegionRootElement() {
			return this.$zoneTitleRegionRootElement;
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_DataSourceConnectionErrorDialog, $asm, {
		show: function DataSourceConnectionErrorDialog$Show() {
			var handlerParam = new $tab_EventHandlerParam();
			var eventHandler = ss.mkdel(this, function(e) {
				this.onAuthDialogMessage(e, handlerParam);
			});
			handlerParam.eventHandler = eventHandler;
			tab.WindowHelper.addListener(window.self, $tab_BaseDataSourceConnectionErrorWidget.messageEventName, eventHandler);
			this.$dialog.add_closed(ss.mkdel(this, function(sender, args) {
				this.$onDialogClosed(handlerParam);
			}));
			this.$dialog.show();
		},
		cleanup: function DataSourceConnectionErrorDialog$Cleanup(eventHandlerParam) {
			this.$dialog.close(null);
		},
		dispose: function DataSourceConnectionErrorDialog$Dispose() {
			this.$dialog.dispose();
		},
		$onDialogClosed: function DataSourceConnectionErrorDialog$OnDialogClosed(eventHandlerParam) {
			tab.WindowHelper.removeListener(window.self, $tab_BaseDataSourceConnectionErrorWidget.messageEventName, eventHandlerParam.eventHandler);
			if (!this.get_submitted() && !ss.staticEquals(this.onCancel, null)) {
				this.onCancel();
			}
		}
	}, $tab_BaseDataSourceConnectionErrorWidget, [ss.IDisposable]);
	ss.initClass($tab_DatePicker, $asm, {
		setDateRange: function DatePicker$SetDateRange(newMinDate, newMaxDate) {
			this.$minDate = $tab_DatePicker.$asLocalDate(newMinDate);
			this.$maxDate = $tab_DatePicker.$asLocalDate(newMaxDate);
			this.$minMonth = $tab_DatePicker.$monthOf(this.$minDate);
			this.$maxMonth = $tab_DatePicker.$monthOf(this.$maxDate);
		},
		show: function DatePicker$Show(newMonthToShow) {
			if (ss.isValue(newMonthToShow)) {
				this.$currentMonth = $tab_DatePicker.$monthOf($tab_DatePicker.$asLocalDate(newMonthToShow));
				this.$selectedDate = $tab_DatePicker.$asLocalDate(newMonthToShow);
			}
			this.$update();
			return this.element.show().width(tab.DoubleUtil.roundToInt(this.element.width()));
		},
		hide: function DatePicker$Hide() {
			this.$usingMaxHeight = false;
			this.element.height('auto');
			return this.element.hide();
		},
		positionCalendarByElement: function DatePicker$PositionCalendarByElement(element) {
			$tab_BrowserViewport.getViewport(ss.mkdel(this, function(browserViewport) {
				var calendarOffset = element.offset();
				var calendarWidth = tab.DoubleUtil.roundToInt(this.element.outerWidth());
				var calendarMaxHeight = this.getMaxHeight();
				var elementHeight = tab.DoubleUtil.roundToInt(element.outerHeight());
				calendarOffset = this.$findBestPositionForCalendar(browserViewport, elementHeight, calendarOffset, calendarWidth, calendarMaxHeight);
				this.element.offset(calendarOffset);
			}));
		},
		$findBestPositionForCalendar: function DatePicker$FindBestPositionForCalendar(browserViewport, elementHeight, calendarOffset, calendarWidth, calendarMaxHeight) {
			var offsetLeft = tab.DoubleUtil.roundToInt(calendarOffset.left);
			var offsetTop = tab.DoubleUtil.roundToInt(calendarOffset.top);
			var viewport = browserViewport.getDocumentViewport({ x: offsetLeft, y: offsetTop });
			var viewportRight = viewport.l + viewport.w;
			var viewportBottom = viewport.t + viewport.h;
			if (offsetTop + elementHeight - 1 + calendarMaxHeight <= viewportBottom) {
				offsetTop += elementHeight - 1;
				offsetLeft = $tab_DatePicker.$adjustForWindow(offsetLeft, calendarWidth, viewport.l, viewportRight);
			}
			else if (offsetTop - (calendarMaxHeight - 1) > viewport.t) {
				this.useMaxHeight();
				offsetTop -= calendarMaxHeight - 1;
				offsetLeft = $tab_DatePicker.$adjustForWindow(offsetLeft, calendarWidth, viewport.l, viewportRight);
			}
			else if (offsetLeft - (calendarWidth - 1) > viewport.l) {
				offsetLeft -= calendarWidth - 1;
				offsetTop = $tab_DatePicker.$adjustForWindow(offsetTop, calendarMaxHeight, viewport.t, viewportBottom);
			}
			else {
				var inputEdge = offsetLeft;
				offsetLeft = viewport.l;
				offsetLeft = $tab_DatePicker.$adjustForWindow(offsetLeft, calendarWidth, viewport.l, inputEdge);
				offsetTop = $tab_DatePicker.$adjustForWindow(offsetTop, calendarMaxHeight, viewport.t, viewportBottom);
			}
			return { left: offsetLeft, top: offsetTop };
		},
		getMaxHeight: function DatePicker$GetMaxHeight() {
			var rows = this.element.find('.tab-datepicker-month-table tbody tr');
			return tab.DoubleUtil.roundToInt(this.element.outerHeight()) + Math.round(tab.DoubleUtil.roundToInt(rows.outerHeight()) * ($tab_DatePicker.$maxWeeks - rows.length));
		},
		useMaxHeight: function DatePicker$UseMaxHeight() {
			if (!this.$usingMaxHeight) {
				this.$usingMaxHeight = true;
				this.$update();
				this.element.height(tab.DoubleUtil.roundToInt(this.element.height()));
			}
		},
		$makeHeader: function DatePicker$MakeHeader() {
			var header = $('<div>').addClass('tab-datepicker-header');
			this.$monthYearBox = $('<span>').addClass('tab-datepicker-header-text').appendTo(header);
			this.$prevMonthButton = $('<span>').addClass('tab-datepicker-header-button').addClass('tab-datepicker-prev-month-button').appendTo(header).click(ss.mkdel(this, this.$showPrevMonth));
			this.$nextMonthButton = $('<span>').addClass('tab-datepicker-header-button').addClass('tab-datepicker-next-month-button').appendTo(header).click(ss.mkdel(this, this.$showNextMonth));
			return header;
		},
		$makeFooter: function DatePicker$MakeFooter() {
			var footer = $('<div>').addClass('tab-datepicker-footer');
			$('<span>').addClass('tab-datepicker-today-label').html(ss.formatString(this.$todayFormatTemplate, "<span class='tab-datepicker-today-date'></span>")).appendTo(footer);
			this.$todayReadout = $('.tab-datepicker-today-date', footer).click(ss.mkdel(this, this.$chooseToday));
			return footer;
		},
		$makeMonthTable: function DatePicker$MakeMonthTable() {
			this.$monthTable = $('<table>').addClass('tab-datepicker-month-table');
			this.$monthTable.on('click', '.tab-datepicker-day-cell', ss.mkdel(this, this.$dayCellClicked));
			return this.$monthTable;
		},
		$dayCellClicked: function DatePicker$DayCellClicked(evt) {
			var cell = $(evt.target);
			if (!cell.hasClass('tab-disabled')) {
				this.$selectDay(cell);
			}
		},
		$selectDay: function DatePicker$SelectDay(cell) {
			this.$monthTable.find('.tab-datepicker-day-cell-selected').removeClass('tab-datepicker-day-cell-selected');
			cell.addClass('tab-datepicker-day-cell-selected');
			var dateData = cell.data();
			this.$selectedDate = new Date(dateData['year'], dateData['month'], dateData['dayOfMonth']);
			var selectedDateTimezoneless = new Date(Date.UTC(dateData['year'], dateData['month'], dateData['dayOfMonth']));
			this.$triggerDateSelected(selectedDateTimezoneless);
		},
		$triggerDateSelected: function DatePicker$TriggerDateSelected(dt) {
			this.element.trigger('dateSelected', [dt]);
		},
		$showPrevMonth: function DatePicker$ShowPrevMonth(ignored) {
			if (this.$previousMonthEnabled()) {
				if (this.$currentMonth.getMonth() === 0) {
					if (this.$currentMonth.getFullYear() > 1) {
						this.$currentMonth.setMonth(11);
						this.$currentMonth.setFullYear(this.$currentMonth.getFullYear() - 1);
					}
				}
				else {
					this.$currentMonth.setMonth(this.$currentMonth.getMonth() - 1);
				}
				this.$update();
			}
		},
		$showNextMonth: function DatePicker$ShowNextMonth(ignored) {
			if (this.$nextMonthEnabled()) {
				if (this.$currentMonth.getMonth() === 11) {
					this.$currentMonth.setMonth(0);
					this.$currentMonth.setFullYear(this.$currentMonth.getFullYear() + 1);
				}
				else {
					this.$currentMonth.setMonth(this.$currentMonth.getMonth() + 1);
				}
				this.$update();
			}
		},
		$previousMonthEnabled: function DatePicker$PreviousMonthEnabled() {
			return ss.isNullOrUndefined(this.$minMonth) || this.$currentMonth > this.$minMonth;
		},
		$nextMonthEnabled: function DatePicker$NextMonthEnabled() {
			return ss.isNullOrUndefined(this.$maxMonth) || this.$currentMonth < this.$maxMonth;
		},
		$chooseToday: function DatePicker$ChooseToday(ignored) {
			var now = $tab_DatePicker.$asUTCDate(new Date());
			if (!this.$isInvalidDate(now)) {
				this.$triggerDateSelected(now);
			}
		},
		$update: function DatePicker$Update() {
			this.$updateHeader();
			this.$updateMonthTable();
			this.$updateFooter();
			this.element.prop('unselectable', 'on');
			this.element.find('*').prop('unselectable', 'on');
			this.element.trigger('calendarUpdated');
		},
		$updateHeader: function DatePicker$UpdateHeader() {
			this.$monthYearBox.text(this.$monthYearFormatter($tab_DatePicker.$asUTCDate(this.$currentMonth)));
			this.$prevMonthButton.toggleClass('tab-disabled', !this.$previousMonthEnabled());
			this.$nextMonthButton.toggleClass('tab-disabled', !this.$nextMonthEnabled());
		},
		$updateFooter: function DatePicker$UpdateFooter() {
			this.$todayReadout.text(this.$fullDateFormatter($tab_DatePicker.$asUTCDate(new Date())));
			this.$todayReadout.toggleClass('tab-disabled', this.$isInvalidMonth($tab_DatePicker.$monthOf(new Date())));
		},
		$makeDayCell: function DatePicker$MakeDayCell(date) {
			return $('<td>').addClass('tab-datepicker-day-cell').text(date.getDate().toString()).data(ss.mkdict(['year', date.getFullYear(), 'month', date.getMonth(), 'dayOfMonth', date.getDate()])).toggleClass('tab-datepicker-day-cell-today', $tab_DatePicker.$sameDay(date, new Date())).toggleClass('tab-datepicker-day-cell-selected', !!this.$selectedDate && $tab_DatePicker.$sameDay(date, this.$selectedDate)).toggleClass('tab-datepicker-day-cell-othermonth', date.getMonth() !== this.$currentMonth.getMonth()).toggleClass('tab-disabled', this.$isInvalidDate(date));
		},
		$isInvalidDate: function DatePicker$IsInvalidDate(date) {
			return ss.isValue(this.$minDate) && date < this.$minDate || ss.isValue(this.$maxDate) && date > this.$maxDate;
		},
		$isInvalidMonth: function DatePicker$IsInvalidMonth(month) {
			return ss.isValue(this.$minMonth) && month < this.$minMonth || ss.isValue(this.$maxMonth) && month > this.$maxMonth;
		},
		$updateMonthTable: function DatePicker$UpdateMonthTable() {
			var startDayOfWeek = (new Date(this.$currentMonth.getFullYear(), this.$currentMonth.getMonth(), 1)).getDay();
			var dayOfWeek;
			var date, untilDate;
			var thead, tbody, tr;
			this.$monthTable.html('');
			thead = $('<thead>').appendTo(this.$monthTable);
			tr = $('<tr>').appendTo(thead);
			dayOfWeek = this.$firstDayOfWeek;
			do {
				$('<th>').addClass('tab-datepicker-header-cell').text(this.$shortDayOfWeekNames[dayOfWeek]).appendTo(tr);
				dayOfWeek = $tab_DatePicker.$addDayOfWeek(dayOfWeek, 1);
			} while (dayOfWeek !== this.$firstDayOfWeek);
			tbody = $('<tbody>').appendTo(this.$monthTable);
			tr = $('<tr>').appendTo(tbody);
			date = new Date(this.$currentMonth.getFullYear(), this.$currentMonth.getMonth(), 1);
			date.setDate(date.getDate() - $tab_DatePicker.$addDayOfWeek(startDayOfWeek, -this.$firstDayOfWeek));
			untilDate = new Date(this.$currentMonth.getFullYear(), this.$currentMonth.getMonth() + 1, 1);
			untilDate.setDate(untilDate.getDate() + $tab_DatePicker.$addDayOfWeek(this.$firstDayOfWeek, -untilDate.getDay()));
			while (!$tab_DatePicker.$sameDay(date, untilDate)) {
				this.$makeDayCell(date).appendTo(tr);
				date.setDate(date.getDate() + 1);
				if (date.getDay() === this.$firstDayOfWeek && !$tab_DatePicker.$sameDay(date, untilDate)) {
					tr = $('<tr>').appendTo(tbody);
				}
			}
			if (this.$usingMaxHeight) {
				var rows = tbody.find('tr');
				if (rows.length < $tab_DatePicker.$maxWeeks) {
					var rowHeight = tab.DoubleUtil.roundToInt(rows.height());
					for (var r = rows.length; r < $tab_DatePicker.$maxWeeks; ++r) {
						$("<tr><td class='tab-datepicker-day-cell'></td></tr>").height(rowHeight).insertAfter(rows.last());
					}
				}
			}
		}
	}, spiff.Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($tab_DatePickerSettings, $asm, {});
	ss.initClass($tab_DetailedErrorDialog, $asm, {});
	ss.initClass($tab_DeviceLayoutToolbarButtonBuilder, $asm, {});
	ss.initClass($tab_DeviceLayoutViewModel, $asm, {
		add_newLayouts: function DeviceLayoutViewModel$add_NewLayouts(value) {
			this.$2$NewLayoutsField = ss.delegateCombine(this.$2$NewLayoutsField, value);
		},
		remove_newLayouts: function DeviceLayoutViewModel$remove_NewLayouts(value) {
			this.$2$NewLayoutsField = ss.delegateRemove(this.$2$NewLayoutsField, value);
		},
		get_deviceLayouts: function DeviceLayoutViewModel$get_DeviceLayouts() {
			return (ss.isValue(this.$dashboardModel) ? this.$dashboardModel.get_deviceLayouts() : null);
		},
		get_autoGeneratedDeviceLayouts: function DeviceLayoutViewModel$get_AutoGeneratedDeviceLayouts() {
			return (ss.isValue(this.$dashboardModel) ? this.$dashboardModel.get_autoGeneratedDeviceLayouts() : null);
		},
		$handleDashboard: function DeviceLayoutViewModel$HandleDashboard(dashboard) {
			this.$dashboardModel = dashboard;
			this.raiseActionEvent(this.$2$NewLayoutsField);
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_DevicePreviewViewModel, $asm, {
		get_vizSize: function DevicePreviewViewModel$get_VizSize() {
			return this.$2$VizSizeField;
		},
		set_vizSize: function DevicePreviewViewModel$set_VizSize(value) {
			this.$2$VizSizeField = value;
		},
		get_$shouldEnableDevicePreviewSettings: function DevicePreviewViewModel$get_ShouldEnableDevicePreviewSettings() {
			return $tab_DevicePreviewViewModel.get_isDevicePreviewMode() && ss.isValue(this.get_vizSize());
		},
		get_shouldCutInteraction: function DevicePreviewViewModel$get_ShouldCutInteraction() {
			return this.get_$shouldEnableDevicePreviewSettings();
		},
		get_shouldScaleDownVizContainer: function DevicePreviewViewModel$get_ShouldScaleDownVizContainer() {
			return this.get_$shouldEnableDevicePreviewSettings() && tsConfig.deviceTypeOverride === 'phone';
		},
		get_getDevicePreviewVizContainerCss: function DevicePreviewViewModel$get_GetDevicePreviewVizContainerCss() {
			var vizContainerWidth = this.get_vizSize().w;
			var vizContainerHeight = this.get_vizSize().h + tabBootstrap.VizLayoutConstants.get_tabsHeight();
			var deviceWidth = tabBootstrap.ViewerBootstrap.get_instance().getViewport().w;
			var zoomRatio = $tab_DevicePreviewViewModel.getZoomRatio(deviceWidth, vizContainerWidth);
			return { width: vizContainerWidth + 'px', height: vizContainerHeight + 'px', transform: 'scale(' + zoomRatio + ',' + zoomRatio + ')', 'transform-origin': '0 0' };
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_DialogHostComponent, $asm, {
		render: function DialogHostComponent$Render() {
			return (this.props.isShown ? this.$renderDialog() : null);
		},
		$renderDialog: function DialogHostComponent$RenderDialog() {
			return React.createElement(SharedWidgets.DialogWidget, this.props.dialogProps);
		}
	}, React.Component);
	ss.initClass($tab_DialogHostViewModel, $asm, {
		get_$dialogProps: function DialogHostViewModel$get_DialogProps() {
			var props = { onCloseRequest: ss.mkdel(this, this.hide), handleGlassClick: ss.mkdel(this, this.$handleGlassClick) };
			if (ss.isValue(this.$dialogContent)) {
				$.extend(props, this.$dialogContent.get_props());
			}
			return props;
		},
		dispose: function DialogHostViewModel$Dispose() {
			if (ss.isValue(this.$dialogContent)) {
				this.$dialogContent.remove_hideDialogRequested(ss.mkdel(this, this.hide));
			}
			spiff.BaseViewModel.prototype.dispose.call(this);
		},
		show: function DialogHostViewModel$Show(content) {
			if (ss.isNullOrUndefined(content)) {
				return;
			}
			if (this.$isShown && ss.isValue(this.$dialogContent)) {
				this.$dialogContent.onDialogHidden();
			}
			EventUtils.GlobalUIEvents.FireDismissTemporaryElements();
			this.$isShown = true;
			this.$dialogContent = content;
			this.$dialogContent.add_hideDialogRequested(ss.mkdel(this, this.hide));
			this.$dialogContent.add_propsUpdated(ss.mkdel(this, this.incrementProps));
			this.incrementProps();
		},
		hide: function DialogHostViewModel$Hide() {
			if (!this.$isShown) {
				return;
			}
			if (ss.isValue(this.$dialogContent)) {
				this.$dialogContent.remove_hideDialogRequested(ss.mkdel(this, this.hide));
				this.$dialogContent.remove_propsUpdated(ss.mkdel(this, this.incrementProps));
				this.$dialogContent.onDialogHidden();
				this.$dialogContent = null;
			}
			this.$isShown = false;
			this.incrementProps();
		},
		createUpdatedProps: function DialogHostViewModel$CreateUpdatedProps() {
			return { isShown: this.$isShown, dialogProps: this.get_$dialogProps() };
		},
		$handleGlassClick: function DialogHostViewModel$HandleGlassClick() {
			if (tsConfig.is_mobile) {
				this.hide();
			}
		}
	}, ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object])]);
	ss.initInterface($tab_ITooltipBehavior, $asm, { attach: null, detach: null, disposeTooltip: null, shownTooltipIsSticky: null, isHoverAllowed: null, shouldShowCommandButtons: null, handleUbertipMenuToggle: null, handleUbertipMenuClose: null, hoverOverObject: null, hoverOverWhitespace: null, multiSelectComplete: null, singleSelectComplete: null, selectionMoved: null, repositionWithinRegion: null, onPanningOrDragging: null, onScroll: null, mouseDown: null });
	ss.initClass($tab_DisabledTooltipBehavior, $asm, {
		attach: function DisabledTooltipBehavior$Attach() {
		},
		detach: function DisabledTooltipBehavior$Detach() {
		},
		dispose: function DisabledTooltipBehavior$Dispose() {
		},
		disposeTooltip: function DisabledTooltipBehavior$DisposeTooltip() {
		},
		shownTooltipIsSticky: function DisabledTooltipBehavior$ShownTooltipIsSticky() {
			return true;
		},
		isHoverAllowed: function DisabledTooltipBehavior$IsHoverAllowed(pageCoords) {
			return true;
		},
		shouldShowCommandButtons: function DisabledTooltipBehavior$ShouldShowCommandButtons() {
			return true;
		},
		handleUbertipMenuToggle: function DisabledTooltipBehavior$HandleUbertipMenuToggle(areMenuItemsVisible) {
		},
		handleUbertipMenuClose: function DisabledTooltipBehavior$HandleUbertipMenuClose() {
		},
		hoverOverObject: function DisabledTooltipBehavior$HoverOverObject(pageCoords, isSelected, isEmpty, isSameObject) {
		},
		hoverOverWhitespace: function DisabledTooltipBehavior$HoverOverWhitespace(pageCoords) {
		},
		multiSelectComplete: function DisabledTooltipBehavior$MultiSelectComplete(pageAnchorPoint) {
		},
		singleSelectComplete: function DisabledTooltipBehavior$SingleSelectComplete(pageCoords) {
		},
		selectionMoved: function DisabledTooltipBehavior$SelectionMoved(pageCoords) {
		},
		repositionWithinRegion: function DisabledTooltipBehavior$RepositionWithinRegion(pageRegion) {
		},
		onPanningOrDragging: function DisabledTooltipBehavior$OnPanningOrDragging() {
		},
		onScroll: function DisabledTooltipBehavior$OnScroll() {
		},
		mouseDown: function DisabledTooltipBehavior$MouseDown(pageCoords, objectUnderMouse) {
		}
	}, null, [$tab_ITooltipBehavior, ss.IDisposable]);
	ss.initClass($tab_DownloadFileDialog, $asm, {
		show: function DownloadFileDialog$Show() {
			var parentNode = document.createElement('div');
			this.$closeDialog = function() {
				_.defer(function() {
					ReactDOM.unmountComponentAtNode(parentNode);
				});
			};
			var sharedDialogProps = { testId: 'FileDownload-Dlg', isModal: true, title: this.$title, showCloseButton: false, type: 0, positioningBehavior: 0, onCloseRequest: ss.mkdel(this, this.dispose), shouldAdjustPositionOnWindowResize: !tsConfig.is_mobile, children: this.$message, zIndex: tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex };
			var footer = this.$buildFooterContainer(ss.mkdel(this, this.dispose));
			sharedDialogProps.footerContent = footer;
			sharedDialogProps.showFooter = true;
			var el = React.createElement(SharedWidgets.DialogWidget, sharedDialogProps);
			ReactDOM.render(el, parentNode);
		},
		dispose: function DownloadFileDialog$Dispose() {
			this.$closeDialog();
		},
		$buildFooterContainer: function DownloadFileDialog$BuildFooterContainer(closeDialogAction) {
			var cancelButtonWrapper = $tab_DownloadFileDialog.$buildCancelButton(closeDialogAction);
			var downloadButtonWrapper = this.$buildDownloadButton(closeDialogAction);
			var $t1 = [];
			$t1.push(cancelButtonWrapper);
			$t1.push(downloadButtonWrapper);
			var buttonRow = $t1;
			var footer = spiff.DOMElements.div({ style: { display: 'flex', alignItems: 'center', justifyContent: 'flex-end', height: '100%' }, children: buttonRow });
			return footer;
		},
		$buildDownloadButton: function DownloadFileDialog$BuildDownloadButton(closeDialogAction) {
			var downloadButton = spiff.DOMElements.a({
				href: this.$url,
				target: this.$urlTarget,
				className: 'tabDownloadFileButton',
				style: { textDecoration: 'none', wordBreak: 'keep-all' },
				onClick: function(e) {
					closeDialogAction();
				},
				'data-test-id': 'DownloadLink',
				role: 'button'
			}, tab.Strings.DialogButtonDownload);
			var downloadButtonWrapper = spiff.DOMElements.div({ className: spiff.ClickBuster.suppressClickBustingClass, key: 'download-button-wrapper-key', style: { paddingLeft: SharedWidgets.TabStyles.Spacing.MediumSpace }, children: downloadButton });
			return downloadButtonWrapper;
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_DynamicallyLoadedContentDialog, $asm, {
		show: function DynamicallyLoadedContentDialog$Show() {
			spiff.Dialog.prototype.show.call(this);
			this.showInternal();
		},
		showInternal: null
	}, spiff.ModalDialog, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($tab_DynamicallyLoadedContentIntoDomDialog, $asm, {
		showInternal: function DynamicallyLoadedContentIntoDomDialog$ShowInternal() {
			this.get_body().append(this.$element);
		}
	}, $tab_DynamicallyLoadedContentDialog, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($tab_DynamicallyLoadedContentIntoIframeDialog, $asm, {
		showInternal: function DynamicallyLoadedContentIntoIframeDialog$ShowInternal() {
			var iframe = $('<iframe />');
			iframe.attr('src', this.urlToLoadDialogContent);
			iframe.attr('tb-test-id', this.$frameTestHook);
			this.get_body().append(iframe);
		}
	}, $tab_DynamicallyLoadedContentDialog, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($tab_EditConnectionInformationDialog, $asm, {
		add_handled: function EditConnectionInformationDialog$add_Handled(value) {
			this.$2$HandledField = ss.delegateCombine(this.$2$HandledField, value);
		},
		remove_handled: function EditConnectionInformationDialog$remove_Handled(value) {
			this.$2$HandledField = ss.delegateRemove(this.$2$HandledField, value);
		},
		show: function EditConnectionInformationDialog$Show() {
			this.parentNode = document.createElement('div');
			var props = { key: 'EditConnectionInformationDialog', content: tab.Strings.EditConnectionInformationDialogText(this.$connectionAttemptInfo.datasourceCaption), showDetailsLabel: tab.Strings.ShowDetailsLabel, hideDetailsLabel: tab.Strings.HideDetailsLabel, detailsContent: this.$connectionAttemptInfo.exceptionMessage, title: tab.Strings.EditConnectionInformationDialogTitle, contentSelectable: true, dialogWidth: 500, dialogButtons: [], onDialogCloseRequested: ss.mkdel(this, this.$closeDialog) };
			props.dialogButtons.push({ buttonClickHandler: ss.mkdel(this, this.$showEditConnectionInformationDialog), buttonText: tab.Strings.DialogYesButtonText, testId: 'YesBtn', buttonType: 5 });
			props.dialogButtons.push({ buttonClickHandler: ss.mkdel(this, this.$closeDialog), buttonText: tab.Strings.DialogNoButtonText, testId: 'NoBtn', buttonType: 3 });
			var el = React.createElement($tab_SimpleTextContentDialog, props);
			ReactDOM.render(el, this.parentNode);
		},
		$showEditConnectionInformationDialog: function EditConnectionInformationDialog$ShowEditConnectionInformationDialog() {
			if (!ss.staticEquals(this.$2$HandledField, null) && !this.$handledActionTriggered) {
				this.$2$HandledField(true);
				this.$handledActionTriggered = true;
				tab.VizClientCommands.setUIMode('data-tab', 'ReconnectEditConnection', '');
			}
		},
		$closeDialog: function EditConnectionInformationDialog$CloseDialog() {
			if (!ss.staticEquals(this.$2$HandledField, null) && !this.$handledActionTriggered) {
				this.$2$HandledField(false);
				this.$handledActionTriggered = true;
			}
			this.dispose();
		}
	}, $tab_BaseDisposableDialog, [ss.IDisposable]);
	ss.initClass($tab_EmailValidator, $asm, {});
	ss.initClass($tab_EmptyExtensionTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_EmptyFloatingLayoutTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_EmptyFloatingLayoutView, $asm, {}, ss.makeGenericType(spiff.BaseView$1, [$tab_EmptyFloatingLayoutViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_EmptyFloatingLayoutViewModel])]);
	ss.initClass($tab_EmptyFloatingLayoutViewModel, $asm, {
		onChildrenAdded: function EmptyFloatingLayoutViewModel$OnChildrenAdded() {
			this.dispose();
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_EventHandlerParam, $asm, {});
	ss.initClass($tab_ExportHelper, $asm, {
		get_sheetScrollPositions: function ExportHelper$get_SheetScrollPositions() {
			return this.$sheetScrollPositions;
		},
		setSheetScrollPositions: function ExportHelper$SetSheetScrollPositions(viewControllers) {
			this.$sheetScrollPositions = {};
			for (var $t1 = 0; $t1 < viewControllers.length; $t1++) {
				var viewController = viewControllers[$t1];
				this.$sheetScrollPositions[viewController.get_sheetName()] = viewController.get_viewWidget().get_scrollPosition();
			}
		},
		triggerExportPdfUI: function ExportHelper$TriggerExportPdfUI() {
			tab.ModuleManager.load(tab.IPdfExportDialogModule).call(null, []).done(function(module) {
				module.showExportPdfDialog(tab.CommandController.get().legacySession);
			});
		}
	}, null, [tab.IExportImageHelper, tab.IExportPdfHelper]);
	ss.initClass($tab_ExtensionIFrameTemplate, $asm, {
		get_container: function ExtensionIFrameTemplate$get_Container() {
			return this.domRoot;
		},
		get_frame: function ExtensionIFrameTemplate$get_Frame() {
			return this.get_container().children().first();
		},
		get_iFrame: function ExtensionIFrameTemplate$get_IFrame() {
			var $t1 = this.get_container().find('#' + this.$iframeName).get(0);
			return ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'IFRAME'));
		},
		setSrc: function ExtensionIFrameTemplate$SetSrc(url) {
			this.get_frame().prop('src', url);
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_ExtensionLoadErrorTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_ExtensionZoneTemplate, $asm, {
		updateContentTemplate: function ExtensionZoneTemplate$UpdateContentTemplate(template) {
			this.domRoot.children().detach();
			this.domRoot.append(template.domRoot);
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_ExtensionZoneView, $asm, {
		get_zoneViewModel: function ExtensionZoneView$get_ZoneViewModel() {
			return this.get_viewModel().get_zoneViewModel();
		},
		get_domRoot: function ExtensionZoneView$get_DomRoot() {
			return this.get_template().domRoot;
		},
		get_$dom: function ExtensionZoneView$get_Dom() {
			return this.get_template();
		},
		onAddedToDom: function ExtensionZoneView$OnAddedToDom() {
			spiff.Widget.prototype.onAddedToDom.call(this);
			this.$handleNewExtensionZone();
		},
		$parentZoneChanged: function ExtensionZoneView$ParentZoneChanged(source, args) {
			if (ss.referenceEquals(args.get_propertyName(), $tab_ZoneViewModel.isActiveZonePropertyName)) {
				this.$updateGlass();
			}
		},
		$handleNewExtensionZone: function ExtensionZoneView$HandleNewExtensionZone() {
			if (this.get_viewModel().get_isEmpty() || this.get_viewModel().get_renderStatus() === 'promptNeeded' || this.get_viewModel().get_renderStatus() === 'initial') {
				this.$loadEmptyExtension();
			}
			else if (this.get_viewModel().get_renderStatus() === 'load') {
				this.$loadExtension();
			}
			else {
				var errorTemplate = new $tab_ExtensionLoadErrorTemplate(this.get_viewModel().get_errorMessage());
				this.get_$dom().updateContentTemplate(errorTemplate);
			}
		},
		$loadEmptyExtension: function ExtensionZoneView$LoadEmptyExtension() {
			var emptyTemplate = new $tab_EmptyExtensionTemplate();
			this.get_$dom().updateContentTemplate(emptyTemplate);
			return;
		},
		$loadExtensionWithError: function ExtensionZoneView$LoadExtensionWithError(errMsg) {
			var errTemplate = new $tab_ExtensionLoadErrorTemplate(errMsg);
			this.get_$dom().updateContentTemplate(errTemplate);
			return;
		},
		$loadExtension: function ExtensionZoneView$LoadExtension() {
			var url = this.get_viewModel().get_url();
			var template = this.$createOrUpdateTemplate();
			this.$bootstrapModulePromise.then(ss.mkdel(this, function(module) {
				var $t1 = new tab.ExtensionServerContext();
				$t1.isAuthoring = tsConfig.is_authoring;
				$t1.isPublic = tsConfig.isPublic;
				$t1.isSaas = tsConfig.is_saas;
				$t1.isOfficialRelease = !tsConfig.isBeta && !ss.equalsT(tsConfig.externalVersion, '0.0.0');
				var context = $t1;
				this.$dispatcher = module.createApiDispatcher(this.get_viewModel().get_extensionInstanceInfo(), context);
				this.get_$dom().updateContentTemplate(template);
				this.$frameTemplate.setSrc(url);
				this.$dispatcher.setExtensionFrame(this.$frameTemplate.get_iFrame());
				this.$updateGlass();
			}), ss.mkdel(this, function(error) {
				tab.Log.get(this).error('Failed to load extensions bootstrap module', []);
			}));
			this.$updateGlass();
		},
		$createOrUpdateTemplate: function ExtensionZoneView$CreateOrUpdateTemplate() {
			if (ss.isNullOrUndefined(this.$frameTemplate)) {
				this.$frameTemplate = new $tab_ExtensionIFrameTemplate('extension_frame_' + this.get_zoneViewModel().get_zoneId());
			}
			this.$updateTemplate();
			return this.$frameTemplate;
		},
		$updateTemplate: function ExtensionZoneView$UpdateTemplate() {
			tab.DomUtil.resize(this.$frameTemplate.get_frame()[0], { l: 0, t: 0, w: this.get_zoneViewModel().get_contentWidth(), h: this.get_zoneViewModel().get_contentHeight() });
		},
		$glassClicked: function ExtensionZoneView$GlassClicked() {
			this.$parentZoneViewModel.setActive('replace');
		},
		$updateGlass: function ExtensionZoneView$UpdateGlass() {
			if (!tsConfig.is_authoring || tsConfig.is_mobile) {
				return;
			}
			if (ss.isNullOrUndefined(this.$glass)) {
				var $t1 = new spiff.Glass(this.element[0], false);
				$t1.set_opaque(false);
				this.$glass = $t1;
				this.$glass.add_click(ss.mkdel(this, this.$glassClicked));
				this.disposables.add$1(this.$glass);
			}
			if (this.$parentZoneViewModel.get_isActiveZone()) {
				this.$glass.hide();
			}
			else {
				this.$glass.show();
			}
		},
		$handleResizeZone: function ExtensionZoneView$HandleResizeZone() {
			if (ss.isValue(this.$frameTemplate)) {
				this.$updateTemplate();
			}
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_ExtensionZoneViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_ExtensionZoneViewModel])]);
	ss.initClass($tab_ExtensionZoneViewModel, $asm, {
		add_extensionZoneUpdated: function ExtensionZoneViewModel$add_ExtensionZoneUpdated(value) {
			this.$2$ExtensionZoneUpdatedField = ss.delegateCombine(this.$2$ExtensionZoneUpdatedField, value);
		},
		remove_extensionZoneUpdated: function ExtensionZoneViewModel$remove_ExtensionZoneUpdated(value) {
			this.$2$ExtensionZoneUpdatedField = ss.delegateRemove(this.$2$ExtensionZoneUpdatedField, value);
		},
		add_extensionZoneReady: function ExtensionZoneViewModel$add_ExtensionZoneReady(value) {
			this.$2$ExtensionZoneReadyField = ss.delegateCombine(this.$2$ExtensionZoneReadyField, value);
		},
		remove_extensionZoneReady: function ExtensionZoneViewModel$remove_ExtensionZoneReady(value) {
			this.$2$ExtensionZoneReadyField = ss.delegateRemove(this.$2$ExtensionZoneReadyField, value);
		},
		add_refreshExtensionZone: function ExtensionZoneViewModel$add_RefreshExtensionZone(value) {
			this.$2$RefreshExtensionZoneField = ss.delegateCombine(this.$2$RefreshExtensionZoneField, value);
		},
		remove_refreshExtensionZone: function ExtensionZoneViewModel$remove_RefreshExtensionZone(value) {
			this.$2$RefreshExtensionZoneField = ss.delegateRemove(this.$2$RefreshExtensionZoneField, value);
		},
		get_zoneViewModel: function ExtensionZoneViewModel$get_ZoneViewModel() {
			return this.$zoneViewModel;
		},
		get_extensionInstanceInfo: function ExtensionZoneViewModel$get_ExtensionInstanceInfo() {
			return this.$extensionZoneModel.pm.addInInstancePresModel;
		},
		get_extensionKey: function ExtensionZoneViewModel$get_ExtensionKey() {
			if (this.get_isEmpty()) {
				return null;
			}
			return { addInId: this.get_extensionInstanceInfo().addInRegistrationPresModel.addInId, extensionVersion: this.get_extensionInstanceInfo().addInRegistrationPresModel.extensionVersion, extensionUrl: this.get_url() };
		},
		get_isInitialized: function ExtensionZoneViewModel$get_IsInitialized() {
			return this.$isInitialized;
		},
		get_isEmpty: function ExtensionZoneViewModel$get_IsEmpty() {
			return this.get_extensionInstanceInfo().isEmpty;
		},
		get_isValid: function ExtensionZoneViewModel$get_IsValid() {
			return this.get_extensionInstanceInfo().isValid;
		},
		get_url: function ExtensionZoneViewModel$get_Url() {
			return (this.get_isEmpty() ? null : this.get_extensionInstanceInfo().addInRegistrationPresModel.url);
		},
		get_extensionName: function ExtensionZoneViewModel$get_ExtensionName() {
			return (this.get_isEmpty() ? null : this.get_extensionInstanceInfo().addInRegistrationPresModel.addInName);
		},
		get_renderStatus: function ExtensionZoneViewModel$get_RenderStatus() {
			if (!tab.FeatureFlags.isEnabled('ExtensionsSettingsTab')) {
				return 'load';
			}
			return this.$renderStatus;
		},
		get_errorMessage: function ExtensionZoneViewModel$get_ErrorMessage() {
			var siteSettingsAdmin = (tsConfig.is_saas ? tab.Strings.SiteAdmin : tab.Strings.ServerAdmin);
			switch (this.$renderStatus) {
				case 'extensionsDisabledOnServer': {
					return (tsConfig.isPublic ? tab.Strings.ExtensionsDisabledOnPublic : tab.Strings.ExtensionsDisabledOnServer);
				}
				case 'extensionBlockedByServer': {
					return tab.Strings.ExtensionBlockedByServer(this.get_extensionName(), this.get_url());
				}
				case 'extensionsDisabledOnSite': {
					return tab.Strings.ExtensionsDisabledOnSite(siteSettingsAdmin);
				}
				case 'notInSafeList': {
					return tab.Strings.ExtensionNotFoundOnSafelist(this.get_extensionName(), this.get_url(), siteSettingsAdmin);
				}
				case 'safeListViolation': {
					return tab.Strings.ExtensionViolatesSafelistPermission(this.get_extensionName(), this.get_url(), siteSettingsAdmin);
				}
				case 'userDenied': {
					if (tsConfig.is_authoring) {
						return tab.Strings.ExtensionDeniedByUserAuthoring;
					}
					return tab.Strings.ExtensionDeniedByUser;
				}
				case 'extensionBlockedPreRelease': {
					var extensionRegistration = this.get_extensionInstanceInfo().addInRegistrationPresModel;
					return tab.Strings.ExtensionBlockedPreRelease(extensionRegistration.extensionVersion, this.get_extensionName(), extensionRegistration.extensionAuthorWebsite);
				}
				default: {
					return '';
				}
			}
		},
		handleExtensionZoneUpdated: function ExtensionZoneViewModel$HandleExtensionZoneUpdated() {
			if (this.get_renderStatus() === 'initial') {
				this.$initializeAsync();
			}
			else {
				this.raiseActionEvent(this.$2$ExtensionZoneUpdatedField);
			}
		},
		$handlePermissionsUpdate: function ExtensionZoneViewModel$HandlePermissionsUpdate() {
			if (this.get_isEmpty()) {
				return;
			}
			if (this.get_renderStatus() === 'promptNeeded' || this.get_renderStatus() === 'userDenied' || this.get_renderStatus() === 'load') {
				var permissionsCache = tab.ApplicationModel.get_instance().get_extensionPermissionsCache();
				if (permissionsCache.hasUserResponse(this.get_extensionKey())) {
					var newRenderStatus = (permissionsCache.getPermissionsApproval(this.get_extensionKey()) ? 'load' : 'userDenied');
					if (newRenderStatus !== this.$renderStatus) {
						this.$renderStatus = newRenderStatus;
						this.raiseActionEvent(this.$2$ExtensionZoneUpdatedField);
					}
				}
			}
		},
		$initializeAsync: function ExtensionZoneViewModel$InitializeAsync() {
			if (!this.get_isValid()) {
				this.$isInitialized = true;
				return;
			}
			if (this.get_isEmpty()) {
				return;
			}
			if (this.get_renderStatus() !== 'initial') {
				this.$isInitialized = true;
				return;
			}
			var requireFullData = ss.contains(this.get_extensionInstanceInfo().addInRegistrationPresModel.extensionPermissions, 'full-data');
			tab.WorkgroupServerCommands.getExtensionLoadStatus(this.get_url(), requireFullData).done(ss.mkdel(this, function(status) {
				this.$initFromLoadServerStatus(status);
			})).fail(function() {
				tab.Logger.getLogger($tab_ExtensionZoneViewModel, null).error('Extension Encountered Internal Server Error While Rendering', []);
			});
		},
		$initFromLoadServerStatus: function ExtensionZoneViewModel$InitFromLoadServerStatus(pm) {
			var newRenderStatus;
			if (tsConfig.isPublic) {
				newRenderStatus = this.$convertRenderStatusForPublic(pm.status);
			}
			else {
				newRenderStatus = this.$convertRenderStatus(pm.status);
			}
			if (newRenderStatus === 'promptNeeded') {
				var permissionsCache = tab.ApplicationModel.get_instance().get_extensionPermissionsCache();
				if (permissionsCache.hasUserResponse(this.get_extensionKey())) {
					newRenderStatus = (permissionsCache.getPermissionsApproval(this.get_extensionKey()) ? 'load' : 'userDenied');
				}
			}
			this.$renderStatus = newRenderStatus;
			this.$isInitialized = true;
			this.raiseActionEvent(this.$2$ExtensionZoneReadyField);
			this.raiseActionEvent(this.$2$ExtensionZoneUpdatedField);
		},
		$convertRenderStatus: function ExtensionZoneViewModel$ConvertRenderStatus(status) {
			switch (status) {
				case 'blockedByServer': {
					return 'extensionBlockedByServer';
				}
				case 'disabledOnServer': {
					return 'extensionsDisabledOnServer';
				}
				case 'disabledOnSite': {
					return 'extensionsDisabledOnSite';
				}
				case 'notInSafeList': {
					return 'notInSafeList';
				}
				case 'safeListViolation': {
					return 'safeListViolation';
				}
				case 'promptUser': {
					return 'promptNeeded';
				}
				case 'load': {
					return 'load';
				}
				default: {
					throw new ss.Exception('Extension Encountered Error While Rendering');
				}
			}
		},
		$convertRenderStatusForPublic: function ExtensionZoneViewModel$ConvertRenderStatusForPublic(status) {
			switch (status) {
				case 'blockedByServer': {
					return 'extensionBlockedByServer';
				}
				case 'disabledOnServer': {
					return 'extensionsDisabledOnServer';
				}
				default: {
					return 'load';
				}
			}
		},
		$reloadEventHandler: function ExtensionZoneViewModel$ReloadEventHandler(presModel, context) {
			this.raiseActionEvent(this.$2$RefreshExtensionZoneField);
		},
		$blockExtensionEventHandler: function ExtensionZoneViewModel$BlockExtensionEventHandler(presModel, context) {
			this.$renderStatus = 'extensionBlockedPreRelease';
			this.raiseActionEvent(this.$2$RefreshExtensionZoneField);
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_FilePickerComponent, $asm, {
		componentDidUpdate: function FilePickerComponent$ComponentDidUpdate() {
			this.$openFilePicker();
		},
		render: function FilePickerComponent$Render() {
			return spiff.DOMElements.input({ style: { display: 'none' }, type: 'file', multiple: this.props.allowMulti, onChange: ss.mkdel(this, this.$onFileBrowse), value: null, accept: this.props.allowedFileExtensions.join(','), ref: this.$refBrowseFilesSetup });
		},
		$openFilePicker: function FilePickerComponent$OpenFilePicker() {
			if (ss.isValue(this.$fileInputElement)) {
				this.$fileInputElement.click();
			}
		},
		$onFileBrowse: function FilePickerComponent$OnFileBrowse(fe) {
			fe.stopPropagation();
			fe.preventDefault();
			this.props.onFileBrowse(this.$fileInputElement.files);
		}
	}, spiff.PureRenderComponent);
	ss.initClass($tab_FilePickerConfig, $asm, {});
	ss.initClass($tab_FilePickerViewModel, $asm, {
		createInitialProps: function FilePickerViewModel$CreateInitialProps() {
			return { onFileBrowse: ss.mkdel(this, this.$doFileBrowse) };
		},
		createUpdatedProps: function FilePickerViewModel$CreateUpdatedProps() {
			return { allowedFileExtensions: this.$currentConfig.allowedFileExtensions, allowMulti: this.$currentConfig.allowMulti };
		},
		$doFileBrowse: function FilePickerViewModel$DoFileBrowse(fileList) {
			this.$onFileBrowse(fileList);
		}
	}, ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object])]);
	ss.initClass($tab_SheetReconnectWidget, $asm, {
		$updateShouldRenderPrimaryButton: function SheetReconnectWidget$UpdateShouldRenderPrimaryButton() {
			this.determineIfConnectionClassSupported().done(ss.mkdel(this, function(supported) {
				this.setState({ isConnectionClassSupported: supported });
			}));
		},
		componentWillMount: function SheetReconnectWidget$ComponentWillMount() {
			this.$updateShouldRenderPrimaryButton();
		},
		componentWillReceiveProps: function SheetReconnectWidget$ComponentWillReceiveProps(newProps) {
			if (!ss.referenceEquals(newProps.connectionClass, this.props.connectionClass)) {
				this.$updateShouldRenderPrimaryButton();
			}
		},
		render: function SheetReconnectWidget$Render() {
			ss.Debug.assert(ss.isValue(this.props.dataSourceCaption), 'Data source caption should not be null when rendering sheet reconnect widget');
			return spiff.DOMElements.div({ className: 'tab-reconnect-sheetWidget' }, spiff.DOMElements.div({ className: 'tab-reconnect-sheetWidget-title' }, tab.Strings.SheetReconnectTitle), (this.shouldRenderSubtitle() ? ss.mkdel(this, this.createSubtitle)() : null), (this.shouldShowErrorMessage() ? ss.mkdel(this, this.createErrorMessage)() : null), (this.shouldRenderEditConnectionButton() ? ss.mkdel(this, this.createEditConnectionButton)() : null), (this.state.isConnectionClassSupported ? ss.mkdel(this, function() {
				return React.createElement(SharedWidgets.ButtonWidget, this.createPrimaryButtonProps());
			})() : null), (this.shouldRenderEditingNotSupported() ? ss.mkdel(this, this.$createEditingNotSupported)() : null));
		},
		$createEditingNotSupported: function SheetReconnectWidget$CreateEditingNotSupported() {
			return spiff.DOMElements.div({ className: 'tab-reconnect-sheetWidget-editing-not-supported' }, tab.Strings.SheetReconnectEditingNotSupported);
		},
		shouldRenderSubtitle: function SheetReconnectWidget$ShouldRenderSubtitle() {
			return !ss.isNullOrEmptyString(this.props.connectionClass);
		},
		createSubtitle: function SheetReconnectWidget$CreateSubtitle() {
			return spiff.DOMElements.div({ className: 'tab-reconnect-sheetWidget-subtitle' }, tab.Strings.SheetReconnectSubtitle(this.props.dataSourceCaption));
		},
		determineIfConnectionClassSupported: function SheetReconnectWidget$DetermineIfConnectionClassSupported() {
			var result = $.Deferred();
			if (ss.contains(tab.ConnectionClass.get_getSupportedFileClasses(), this.props.connectionClass)) {
				result.resolve(this.props.connectionErrorStage === 'create-protocol-failed');
			}
			tab.DataConnectionUtils.isDatabaseClassSupportedInReconnectFlow(this.props.connectionClass).done(ss.mkdel(this, function(supported) {
				if (supported) {
					result.resolve(tab.DeferredConnectionsCommandHandler.isBadPasswordError(this.props.errorType));
				}
				else {
					result.resolve(false);
				}
			}));
			return result.promise();
		},
		shouldRenderEditConnectionButton: function SheetReconnectWidget$ShouldRenderEditConnectionButton() {
			return tab.MiscUtil.shouldShowDataTab() && tsConfig.is_authoring && (this.state.isConnectionClassSupported || this.props.connectionErrorStage === 'load-metadata-failed' || ss.isNullOrEmptyString(this.props.connectionClass));
		},
		shouldRenderEditingNotSupported: function SheetReconnectWidget$ShouldRenderEditingNotSupported() {
			return tab.MiscUtil.shouldShowDataTab() && tsConfig.is_authoring && !this.shouldRenderEditConnectionButton();
		},
		createEditConnectionButton: function SheetReconnectWidget$CreateEditConnectionButton() {
			return React.createElement(SharedWidgets.ButtonWidget, this.createEditConnectionButtonProps());
		},
		shouldShowErrorMessage: function SheetReconnectWidget$ShouldShowErrorMessage() {
			return ss.isNullOrEmptyString(this.props.connectionClass) && !ss.isNullOrEmptyString(this.props.errorMessage);
		},
		createErrorMessage: function SheetReconnectWidget$CreateErrorMessage() {
			return spiff.DOMElements.div({ className: 'tab-reconnect-error-message' }, tab.Strings.SheetReconnectErrorMessage(this.props.errorMessage.trim()));
		},
		createEditConnectionButtonProps: function SheetReconnectWidget$CreateEditConnectionButtonProps() {
			var editConnection = function() {
				tab.VizClientCommands.setUIMode('data-tab', 'ReconnectEditConnection', '');
			};
			return {
				handleClick: function(e) {
					editConnection();
				},
				buttonType: 3,
				testId: $tab_SheetReconnectWidget.editConnectionTestID,
				children: tab.Strings.SheetReconnectEditConnectionLabel,
				style: { marginTop: '18px', marginBottom: 'auto', marginLeft: 'auto', marginRight: '30px' }
			};
		},
		$makeSigninAction: function SheetReconnectWidget$MakeSigninAction() {
			if (tab.TabbedAuthenticationDialogCommands.useTabbedAuthDialog(this.props.connectionAttemptInfo)) {
				return ss.mkdel(this, function() {
					var signInDialogIDeferred = $.Deferred();
					tab.TabbedAuthenticationDialogCommands.showTabbedAuthenticationDialog(tab.DataConnectionUtils.getConnectionNames(this.props.connectionAttemptInfo), false, this.props.connectionAttemptInfo);
					var resolvedCallback = function(dummyPresModel, dummyContext) {
						signInDialogIDeferred.resolve();
					};
					var rejectCallback = function(dummyPresModel1, dummyContext1) {
						signInDialogIDeferred.reject();
					};
					tab.ApplicationModel.get_instance().registerNotificationHandler('doc:tabbed-auth-dialog-closed-event', rejectCallback);
					tab.ApplicationModel.get_instance().registerNotificationHandler('doc:tabbed-auth-dialog-connected-event', resolvedCallback);
					signInDialogIDeferred.done([ss.mkdel(this, function(unused) {
						this.props.onCredentialsAdded(null);
					})]);
				});
			}
			else {
				return ss.mkdel(this, function() {
					tab.ModuleManager.load(tab.IConnectionDialogModule).call(null, []).done(ss.mkdel(this, function(module) {
						module.showSignInDialog(this.props.connectionAttributes, this.props.connectionDisplayAttributes, this.props.dataSourceCaption, this.props.connectionName, this.props.connectionTypeLabel, this.props.onCredentialsAdded, null);
					}));
				});
			}
		},
		createPrimaryButtonProps: function SheetReconnectWidget$CreatePrimaryButtonProps() {
			var signIn = this.$makeSigninAction();
			return {
				handleClick: function(e) {
					signIn();
				},
				buttonType: 1,
				testId: $tab_SheetReconnectWidget.$signInButtonTestID,
				children: tab.Strings.SheetReconnectSignInLabel,
				style: { marginTop: '18px', marginBottom: 'auto', marginLeft: 'auto', marginRight: 'auto' }
			};
		}
	}, spiff.PureRenderComponent);
	ss.initClass($tab_FileReconnectWidget, $asm, {
		createEditConnectionButtonProps: function FileReconnectWidget$CreateEditConnectionButtonProps() {
			var editConnection = function() {
				tab.VizClientCommands.setUIMode('data-tab', 'FileReconnect', '');
			};
			return {
				handleClick: function(e) {
					editConnection();
				},
				buttonType: 3,
				testId: $tab_SheetReconnectWidget.editConnectionTestID,
				children: tab.Strings.SheetReconnectEditConnectionLabel,
				style: { marginTop: '18px', marginBottom: 'auto', marginLeft: 'auto', marginRight: 'auto' }
			};
		},
		createPrimaryButtonProps: function FileReconnectWidget$CreatePrimaryButtonProps() {
			var signIn = null;
			signIn = ss.mkdel(this, function() {
				tab.ModuleManager.load(tab.IConnectionDialogModule).call(null, []).done(ss.mkdel(this, function(module) {
					module.showReplaceFileDialog(this.props.connectionName, this.props.connectionClass).done(ss.mkdel(this, function(handled) {
						if (handled && !ss.staticEquals(this.props.onCredentialsAdded, null)) {
							this.props.onCredentialsAdded(null);
						}
					})).fail(function(handled1) {
						signIn();
					});
				}));
			});
			return {
				handleClick: function(e) {
					signIn();
				},
				buttonType: 1,
				testId: $tab_FileReconnectWidget.$locateFileButtonTestID,
				children: tab.Strings.SheetReconnectLocateFileLabel,
				style: { marginTop: '18px', marginBottom: 'auto', marginLeft: '30px', marginRight: 'auto' }
			};
		}
	}, $tab_SheetReconnectWidget);
	ss.initClass($tab_FontMetricsLogger, $asm, {});
	ss.initClass($tab_FontNormalizer, $asm, {});
	ss.initClass($tab_FormattingTelemetryClient, $asm, {});
	ss.initClass($tab_GenericDataSourceErrorWidget, $asm, {}, spiff.Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($tab_GenericDataSourceExceptionDialogWidget, $asm, {
		show: function GenericDataSourceExceptionDialogWidget$Show() {
			this.$dialog.show();
		},
		cleanup: function GenericDataSourceExceptionDialogWidget$Cleanup(eventHandlerParam) {
			this.$dialog.closeAndDispose();
		},
		dispose: function GenericDataSourceExceptionDialogWidget$Dispose() {
			this.$dialog.dispose();
		},
		$onDialogClosed: function GenericDataSourceExceptionDialogWidget$OnDialogClosed() {
			if (!this.get_submitted() && !ss.staticEquals(this.onCancel, null)) {
				this.onCancel();
			}
		}
	}, $tab_BaseDataSourceConnectionErrorWidget, [ss.IDisposable]);
	ss.initClass($tab_GenericDataSourceExceptionOverlayWidget, $asm, {
		createOverlay: function GenericDataSourceExceptionOverlayWidget$CreateOverlay(handlerParam) {
			var element = $($tab_BaseDataSourceConnectionErrorWidget.dashboardContainerSelector);
			var overlay = $("<div id='auth-overlay' tabindex='0'></div>");
			if (tsConfig.is_authoring && tab.MiscUtil.shouldShowDataTab()) {
				this.$setupSheetReconnectWidget(overlay);
			}
			else {
				var onRetryClick = ss.mkdel(this, function() {
					this.set_submitted(true);
					if (!ss.staticEquals(this.onProceed, null)) {
						this.onProceed();
					}
					this.cleanup(handlerParam);
				});
				var errorWidget = new $tab_GenericDataSourceErrorWidget(this.dataSourceConnectionAttemptErrorResponse.ErrorMessage, onRetryClick);
				overlay.append(errorWidget.element);
			}
			element.append(overlay);
		},
		$setupSheetReconnectWidget: function GenericDataSourceExceptionOverlayWidget$SetupSheetReconnectWidget(overlay) {
			var onSuccessfulSignIn = ss.mkdel(this, function(unused) {
				if (!ss.staticEquals(this.onProceed, null)) {
					this.onProceed();
				}
			});
			var props = { connectionAttributes: this.$connectionAttemptInfo.exceptionAttrs, connectionClass: this.dataSourceConnectionAttemptErrorResponse.ConnectionClass, connectionErrorStage: this.$connectionAttemptInfo.connectionErrorStage, connectionName: this.dataSourceConnectionAttemptErrorResponse.ConnectionName, errorMessage: this.dataSourceConnectionAttemptErrorResponse.ErrorMessage, errorType: this.dataSourceConnectionAttemptErrorResponse.ErrorType, dataSourceCaption: this.dataSourceConnectionAttemptErrorResponse.DataSourceCaption, onCredentialsAdded: onSuccessfulSignIn };
			if (ss.contains(tab.ConnectionClass.get_getSupportedFileClasses(), this.dataSourceConnectionAttemptErrorResponse.ConnectionClass)) {
				ReactDOM.render(React.createElement($tab_FileReconnectWidget, props), overlay.get(0));
			}
			else {
				ReactDOM.render(React.createElement($tab_SheetReconnectWidget, props), overlay.get(0));
			}
		},
		show: function GenericDataSourceExceptionOverlayWidget$Show() {
			var handlerParam = new $tab_EventHandlerParam();
			var zoneBecameValid = ss.mkdel(this, function() {
				this.cleanup(handlerParam);
			});
			$tab_ZoneView.add_zoneBecameValid(zoneBecameValid);
			handlerParam.zoneBecameValidHandler = new tab.CallOnDispose(function() {
				$tab_ZoneView.remove_zoneBecameValid(zoneBecameValid);
			});
			this.createOverlay(handlerParam);
		}
	}, $tab_BaseDataSourceConnectionErrorOverlayWidget, [ss.IDisposable]);
	ss.initClass($tab_NotificationView, $asm, {
		dispose: function NotificationView$Dispose() {
			if (this.get_viewModel().get_visible()) {
				this.$pendingDispose = true;
				this.get_viewModel().hide();
				return;
			}
			this.notificationViewModel.remove_shown(ss.mkdel(this, this.shown));
			this.notificationViewModel.remove_hidden(ss.mkdel(this, this.hidden));
			ss.makeGenericType(spiff.BaseView$1, [$tab_NotificationViewModel]).prototype.dispose.call(this);
		},
		onViewModelPropertyChanged: function NotificationView$OnViewModelPropertyChanged(sender, e) {
			this.updateContent();
		},
		updateContent: function NotificationView$UpdateContent() {
			this.messageDom.text(this.notificationViewModel.get_message());
		},
		hidden: function NotificationView$Hidden() {
			this.element.fadeOut('slow', ss.mkdel(this, this.$onFadeOutCompleted));
		},
		shown: function NotificationView$Shown() {
			this.element.css('display', 'none');
			this.element.appendTo($('body'));
			this.element.fadeIn('fast');
			this.updateContent();
			if (this.adjustMargin) {
				this.element.css('margin-left', '-' + this.element.outerWidth(true) / 2 + 'px');
			}
		},
		$onFadeOutCompleted: function NotificationView$OnFadeOutCompleted() {
			if (this.$pendingDispose) {
				this.dispose();
			}
			else {
				this.element.detach();
			}
		},
		$handleCloseClicked: function NotificationView$HandleCloseClicked(e) {
			this.get_viewModel().hide();
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_NotificationViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_NotificationViewModel])]);
	ss.initClass($tab_GeoLocationNotificationView, $asm, {}, $tab_NotificationView, [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_NotificationViewModel])]);
	ss.initClass($tab_HelpKeyboardShortcut, $asm, {
		get_keyCombos: function HelpKeyboardShortcut$get_KeyCombos() {
			return new tab.KeyCombos(new tab.KeyCombo.$ctor4(new tab.KeyModifiers(false, true, false, false, true, false, false, false, false), 191, []), [new tab.KeyCombo.$ctor4(new tab.KeyModifiers(false, true, false, false, true, false, true, false, false), 191, []), new tab.KeyCombo.$ctor2(112, [])]);
		},
		isAllowed: function HelpKeyboardShortcut$IsAllowed(e) {
			return true;
		},
		executeShortcut: function HelpKeyboardShortcut$ExecuteShortcut(e) {
			tab.WindowHelper.open(this.$uri, tab.WindowHelper.blank);
		}
	}, tab.GlobalKeyboardShortcut, [tab.IKeyboardShortcut]);
	ss.initClass($tab_HitTargetColliders, $asm, {});
	ss.initEnum($tab_HitTargetType, $asm, { rectangle: 0, circle: 1, line: 2, polygon: 3 });
	ss.initClass($tab_IteratorButtonTemplate, $asm, { $setArrows: null }, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_HorizontalIteratorButtonTemplate, $asm, {
		$setArrows: function HorizontalIteratorButtonTemplate$SetArrows() {
			this.prevButton.addClass('tabCatLegendScrollLeft');
			this.nextButton.addClass('tabCatLegendScrollRight');
		}
	}, $tab_IteratorButtonTemplate, [ss.IDisposable]);
	ss.initClass($tab_HttpsEmbedHttpAuthoringMessage, $asm, {
		get_$message: function HttpsEmbedHttpAuthoringMessage$get_Message() {
			return this.domRoot.find('.message');
		},
		get_$path: function HttpsEmbedHttpAuthoringMessage$get_Path() {
			return this.domRoot.find('.path');
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_HttpsEmbedHttpViewMessage, $asm, {
		get_$message: function HttpsEmbedHttpViewMessage$get_Message() {
			return this.domRoot.find('.message');
		},
		get_$link: function HttpsEmbedHttpViewMessage$get_Link() {
			return this.domRoot.find('a');
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initInterface($tab_IAppBannerView, $asm, {}, [ss.IDisposable, tab.IAppendableView, ss.makeGenericType(tab.IView$1, [$tab_AppBannerViewModel])]);
	ss.initInterface($tab_IFilterTypeViewModel, $asm, { get_filterType: null }, [ss.IDisposable]);
	ss.initInterface($tab_IFlipboardViewModel, $asm, { get_dashboardViewModel: null, get_flipboardModel: null });
	ss.initInterface($tab_IFontLoader, $asm, { add_fontsReady: null, remove_fontsReady: null, add_fontDownloading: null, remove_fontDownloading: null, reset: null, addFonts: null, downloadFonts: null, finishDownloadingFonts: null });
	ss.initClass($tab_IFrameTemplate, $asm, {
		get_container: function IFrameTemplate$get_Container() {
			return this.domRoot;
		},
		get_frame: function IFrameTemplate$get_Frame() {
			return this.get_container().children().first();
		},
		setSrc: function IFrameTemplate$SetSrc(url, originalUrl) {
			if (!ss.referenceEquals(this.get_frame().prop('original_url'), originalUrl)) {
				this.get_frame().prop('src', url);
				this.get_frame().prop('original_url', originalUrl);
			}
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initInterface($tab_IHitTargetGeom, $asm, { get_type: null });
	ss.initClass($tab_ImageUtil, $asm, {});
	ss.initClass($tab_ImageZoneTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_ImageZoneView, $asm, {
		get_domRoot: function ImageZoneView$get_DomRoot() {
			return this.get_template().domRoot;
		},
		get_image: function ImageZoneView$get_Image() {
			return this.$internalImageNode;
		},
		get_$imageVM: function ImageZoneView$get_ImageVM() {
			return this.get_viewModel();
		},
		onAddedToDom: function ImageZoneView$OnAddedToDom() {
			spiff.Widget.prototype.onAddedToDom.call(this);
			if (tsConfig.is_mobile && tsConfig.is_authoring && tsConfig.current_sheet_type === 'dashboard') {
				this.element.addClass(spiff.ClickBuster.suppressClickBustingClass);
			}
			this.handleNewImageZone();
		},
		handleNewImageZone: function ImageZoneView$HandleNewImageZone() {
			this.createImageZoneView();
		},
		createImageZoneView: function ImageZoneView$CreateImageZoneView() {
			var css = ss.mkdict(['position', 'absolute', 'overflow', 'hidden', 'top', '0px', 'left', '0px', 'right', '0px', 'bottom', '0px']);
			this.get_template().domRoot.css(css);
			var isEmptyImage = ss.isNullOrEmptyString(this.get_$imageVM().get_imageZonePresModel().imageKey) && ss.isNullOrEmptyString(this.get_$imageVM().get_imageZonePresModel().image);
			if (isEmptyImage && tab.FeatureFlags.isEnabled('DashboardMttwImageObject')) {
				this.$createEmptyPlaceHolderNode();
			}
			else {
				this.$internalImageNode = this.$createImageNode();
			}
		},
		$createEmptyPlaceHolderNode: function ImageZoneView$CreateEmptyPlaceHolderNode() {
			var shouldCreateEmptyPlaceHolder = this.get_template().domRoot.find('.' + $tab_ImageZoneView.emptyImageClass).length === 0;
			if (!shouldCreateEmptyPlaceHolder) {
				return;
			}
			this.get_template().domRoot.empty();
			var message = ((!tsConfig.is_mobile && tsConfig.is_authoring && tsConfig.current_sheet_type === 'dashboard') ? tab.Strings.EmptyImageZoneMessage : '');
			var emptyMessageNode = $('<div>' + message + '</div>').addClass($tab_ImageZoneView.emptyImageClass);
			this.get_template().domRoot.append(emptyMessageNode);
		},
		$createImageNode: function ImageZoneView$CreateImageNode() {
			var imgNode = $('<img>');
			var onload = ss.mkdel(this, function() {
				if (ss.isNullOrUndefined(this.$internalImageNode)) {
					window.setTimeout(ss.mkdel(this, function() {
						this.$cachedPrescaledImage = imgNode.get(0);
						this.$styleImageNodeAndAddToDom();
					}), 1);
				}
				else {
					this.$cachedPrescaledImage = imgNode.get(0);
					this.$styleImageNodeAndAddToDom();
				}
				imgNode.off('load');
			});
			imgNode.on('load', onload);
			var imagePath = this.get_$imageVM().get_imageUrl();
			if (!ss.isNullOrEmptyString(this.get_$imageVM().get_imageZonePresModel().image)) {
				imagePath = 'data:image/jpeg;base64,' + this.get_$imageVM().get_imageZonePresModel().image;
			}
			var imageAltText = this.get_$imageVM().get_imageZonePresModel().altText;
			if (tab.FeatureFlags.isEnabled('DashboardMttwImageObject') && !ss.isNullOrEmptyString(imageAltText)) {
				imgNode.attr('alt', imageAltText);
			}
			imgNode.css('border', 'none').css('display', 'block').attr('src', imagePath);
			if (tab.FeatureFlags.isEnabled('DashboardImageObjectSvgSupport') && this.get_$imageVM().get_imageZonePresModel().isSvgImage) {
				imgNode.css('width', this.get_$imageVM().get_imageZonePresModel().imageWidth);
				imgNode.css('height', this.get_$imageVM().get_imageZonePresModel().imageHeight);
			}
			return imgNode;
		},
		$addImageToDom: function ImageZoneView$AddImageToDom(node) {
			this.get_template().domRoot.empty();
			this.get_template().domRoot.append(node);
		},
		$handleResizeZone: function ImageZoneView$HandleResizeZone() {
			if (ss.isNullOrEmptyString(this.get_$imageVM().get_imageZonePresModel().image) && ss.isNullOrEmptyString(this.get_$imageVM().get_imageZonePresModel().imageKey)) {
				return;
			}
			this.$styleImageNodeAndAddToDom();
		},
		$styleImageNodeAndAddToDom: function ImageZoneView$StyleImageNodeAndAddToDom() {
			var imagePresModel = this.get_$imageVM().get_imageZonePresModel();
			if (imagePresModel.isScaled) {
				this.$scaleImageNode();
			}
			var wrappedImageNode = this.$wrapImageNode();
			this.$addImageToDom(wrappedImageNode);
			if (imagePresModel.isCentered) {
				this.$centerImageNode(wrappedImageNode);
			}
			return wrappedImageNode;
		},
		$createImageNodeWrapper: function ImageZoneView$CreateImageNodeWrapper() {
			var zoneModel = this.get_$imageVM().get_zoneModel();
			var imagePresModel = this.get_$imageVM().get_imageZonePresModel();
			var url = $tab_URIUtil.absolutizeURI(imagePresModel.url, false);
			var placeImageInAnchor = zoneModel.get_zoneCommonModel().get_zoneType() === 'bitmap' && !tab.MiscUtil.isNullOrEmpty$3(imagePresModel.imageKey) && !tab.MiscUtil.isNullOrEmpty$3(url);
			if (placeImageInAnchor) {
				return $('<a/>').attr('href', url).attr('target', '_blank').css(ss.mkdict(['position', 'absolute', 'outline', 'none']));
			}
			else {
				return $('<div/>');
			}
		},
		$wrapImageNode: function ImageZoneView$WrapImageNode() {
			var imageNode = this.get_image();
			var wrapper = this.$createImageNodeWrapper();
			wrapper.append(imageNode);
			return wrapper;
		},
		$scaleImageNode: function ImageZoneView$ScaleImageNode() {
			var isSVGImage = tab.FeatureFlags.isEnabled('DashboardImageObjectSvgSupport') && this.get_$imageVM().get_imageZonePresModel().isSvgImage;
			var zoneModel = this.get_$imageVM().get_zoneModel();
			var naturalImageWidth = this.$cachedPrescaledImage['width'];
			var naturalImageHeight = this.$cachedPrescaledImage['height'];
			if (isSVGImage) {
				naturalImageWidth = this.get_$imageVM().get_imageZonePresModel().imageWidth;
				naturalImageHeight = this.get_$imageVM().get_imageZonePresModel().imageHeight;
			}
			else if (BrowserSupport.BrowserSupport.IsIE()) {
				naturalImageWidth = this.$cachedPrescaledImage['naturalWidth'];
				naturalImageHeight = this.$cachedPrescaledImage['naturalHeight'];
			}
			var newWidth = { $: 0 };
			var newHeight = { $: 0 };
			var imageNodeStyle = {};
			$tab_ImageZoneView.$setupScaledImageNodeStyleAndSizeProperties(isSVGImage, zoneModel, naturalImageWidth, naturalImageHeight, imageNodeStyle, newWidth, newHeight);
			if (BrowserSupport.BrowserSupport.IsIE() && !isSVGImage) {
				var deviceXdpi = window.screen['deviceXDPI'];
				var systemXdpi = window.screen['systemXDPI'];
				var browserZoomedIn = deviceXdpi / systemXdpi > 1;
				if (!browserZoomedIn && newWidth.$ > 0 && newHeight.$ > 0 && newWidth.$ / naturalImageWidth < 0.75 && naturalImageWidth < 500 && naturalImageHeight < 500) {
					var oldSrc = this.$internalImageNode.get(0).getAttribute('src');
					var scaledCanvas = $tab_ImageUtil.scaleImage(this.$cachedPrescaledImage, newWidth.$, newHeight.$, ss.Int32.trunc(naturalImageWidth), ss.Int32.trunc(naturalImageHeight));
					this.$internalImageNode = $(scaledCanvas);
					this.$internalImageNode.get(0).setAttribute('src', oldSrc);
					imageNodeStyle.$ = ss.mkdict(['width', newWidth.$ + 'px', 'height', newHeight.$ + 'px']);
				}
				else {
					this.$internalImageNode = $(this.$cachedPrescaledImage);
				}
			}
			this.$internalImageNode.css(imageNodeStyle.$);
		},
		$centerImageNode: function ImageZoneView$CenterImageNode(wrappedImageNode) {
			wrappedImageNode.addClass($tab_ImageZoneView.$centeredImageWrapperClass);
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_ImageZoneViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_ImageZoneViewModel])]);
	ss.initClass($tab_ImageZoneViewModel, $asm, {
		add_newImageZone: function ImageZoneViewModel$add_NewImageZone(value) {
			this.$2$NewImageZoneField = ss.delegateCombine(this.$2$NewImageZoneField, value);
		},
		remove_newImageZone: function ImageZoneViewModel$remove_NewImageZone(value) {
			this.$2$NewImageZoneField = ss.delegateRemove(this.$2$NewImageZoneField, value);
		},
		get_zoneModel: function ImageZoneViewModel$get_ZoneModel() {
			return this.$imageZoneModel.get_zoneModel();
		},
		get_imageZonePresModel: function ImageZoneViewModel$get_ImageZonePresModel() {
			return this.$imageZoneModel.pm;
		},
		get_imageUrl: function ImageZoneViewModel$get_ImageUrl() {
			var session = tab.CommandController.get().legacySession;
			var imageUrl = session.formatDashboardTempfileReference(this.get_imageZonePresModel().imageKey, true, false);
			return imageUrl;
		},
		handleNewImageZone: function ImageZoneViewModel$HandleNewImageZone() {
			if (ss.isValue(this.$2$NewImageZoneField)) {
				this.$2$NewImageZoneField();
			}
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initInterface($tab_IMovable, $asm, { get_location: null, set_location: null });
	ss.initInterface($tab_ISlider, $asm, { instantiate: null, instantiateFromDomain: null, layout: null, destroy: null, setNewState: null, updateReadout: null });
	ss.initClass($tab_IteratorButtons, $asm, {
		get_domRoot: function IteratorButtons$get_DomRoot() {
			return this.$template.domRoot;
		},
		get_scrollIncrement: function IteratorButtons$get_ScrollIncrement() {
			return this.$scrollIncrement;
		},
		set_scrollIncrement: function IteratorButtons$set_ScrollIncrement(value) {
			this.$scrollIncrement = value;
		},
		get_$scrollOffset: function IteratorButtons$get_ScrollOffset() {
			return (this.$isHorizontal ? this.$scrollContent.scrollLeft() : tab.DoubleUtil.roundToInt(this.$scrollContent.scrollTop()));
		},
		set_$scrollOffset: function IteratorButtons$set_ScrollOffset(value) {
			if (this.$isHorizontal) {
				this.$scrollContent.scrollLeft(value);
			}
			else {
				this.$scrollContent.scrollTop(value);
			}
		},
		get_$maxScroll: function IteratorButtons$get_MaxScroll() {
			if (this.$isHorizontal) {
				return this.$scrollContent.children()[0].scrollWidth - tab.DoubleUtil.roundToInt(this.$scrollContent.width());
			}
			else {
				return this.$scrollContent.children()[0].scrollHeight - tab.DoubleUtil.roundToInt(this.$scrollContent.height());
			}
		},
		reset: function IteratorButtons$Reset() {
			if (this.$isHorizontal) {
				this.$scrollContent.scrollLeft(0);
			}
			else {
				this.$scrollContent.scrollTop(0);
			}
			this.updateButtonState();
		},
		dispose: function IteratorButtons$Dispose() {
			this.$template.dispose();
			this.$disposables.dispose();
		},
		$scrollPrev: function IteratorButtons$ScrollPrev(evt) {
			this.set_$scrollOffset(Math.max($tab_IteratorButtons.$minScrollOffset, this.get_$scrollOffset() - this.$scrollIncrement));
			this.updateButtonState();
		},
		$scrollNext: function IteratorButtons$ScrollNext(evt) {
			this.set_$scrollOffset(Math.min(this.get_$maxScroll(), this.get_$scrollOffset() + this.$scrollIncrement));
			this.updateButtonState();
		},
		updateButtonState: function IteratorButtons$UpdateButtonState() {
			this.$setButtonEnabledState(this.$template.prevButton, this.$canScrollPrev());
			this.$setButtonEnabledState(this.$template.nextButton, this.$canScrollNext());
		},
		$canScrollPrev: function IteratorButtons$CanScrollPrev() {
			return this.get_$scrollOffset() > $tab_IteratorButtons.$minScrollOffset;
		},
		$canScrollNext: function IteratorButtons$CanScrollNext() {
			return this.get_$scrollOffset() < this.get_$maxScroll();
		},
		$setButtonEnabledState: function IteratorButtons$SetButtonEnabledState(button, enable) {
			button.toggleClass($tab_IteratorButtons.$disabledButtonClass, !enable);
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_KeyboardHandlers, $asm, {});
	ss.initClass($tab_LegacyErrorDialog, $asm, {
		render: function LegacyErrorDialog$Render() {
			var dialogProps = this.buildCommonDialogProps();
			var el = React.createElement(SharedWidgets.DialogWidget, dialogProps);
			return el;
		},
		closeDialog: function LegacyErrorDialog$CloseDialog() {
			_.defer(this.props.onDialogCloseRequested);
		},
		buildCommonDialogProps: function LegacyErrorDialog$BuildCommonDialogProps() {
			var sharedDialogProps = { testId: 'Dialog-Provider', isModal: true, title: this.props.title, showCloseButton: true, type: 0, positioningBehavior: 0, dialogStyle: { maxWidth: $tab_LegacyErrorDialog.maxDialogWidth }, dialogWidth: this.props.dialogWidth, onCloseRequest: ss.mkdel(this, function() {
				this.closeDialog();
			}), zIndex: tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex };
			var children = [];
			var domElement = spiff.DOMElements.div({ children: this.$formatAndSanitizeInput(this.props.content), className: spiff.Widget.selectableNodeClass });
			children.push(domElement);
			var errorDetailsContent = this.$formatAndSanitizeInput(this.props.detailsContent);
			if (ss.isValue(this.props.additionalLinks)) {
				for (var $t1 = 0; $t1 < this.props.additionalLinks.length; $t1++) {
					var link = this.props.additionalLinks[$t1];
					errorDetailsContent.push(spiff.DOMElements.p({}, spiff.DOMElements.a({ href: link.url, target: '_blank', children: link.displayText })));
				}
			}
			if (!tab.MiscUtil.isNullOrEmpty$1(errorDetailsContent)) {
				var errorDetails = spiff.DOMElements.div({ style: $tab_LegacyErrorDialog.$detailCssProps, children: errorDetailsContent, className: spiff.Widget.selectableNodeClass });
				children.push(errorDetails);
			}
			sharedDialogProps.children = children;
			return sharedDialogProps;
		},
		$formatAndSanitizeInput: function LegacyErrorDialog$FormatAndSanitizeInput(content) {
			var result = [];
			if (ss.isNullOrEmptyString(content)) {
				return result;
			}
			var LineBreak = '<br/>';
			content = ss.replaceAllString(content, '<br>', LineBreak);
			content = ss.replaceAllString(content, '\n', LineBreak);
			var lines = content.split(LineBreak);
			var areaElement = $tab_LegacyErrorDialog.textArea.value();
			for (var $t1 = 0; $t1 < lines.length; $t1++) {
				var line = lines[$t1];
				areaElement.innerHTML = line;
				var p = spiff.DOMElements.p({ children: areaElement.textContent });
				result.push(p);
			}
			return result;
		}
	}, React.Component);
	ss.initClass($tab_MapScaleComponent, $asm, {
		render: function MapScaleComponent$Render() {
			var mapScaleHoverOverlayText = ((this.props.marginOfError > 0.1) ? this.props.tooltipText : '');
			return spiff.DOMElements.div({ className: 'tab-MapScale', title: mapScaleHoverOverlayText, style: this.$mapScaleStyleProps() }, spiff.DOMElements.div({ className: 'tab-MapScaleOuterHalo', style: this.$mapScaleHaloStyleProps() }), spiff.DOMElements.div({ className: 'tab-MapScaleInnerHalo', style: this.$mapScaleHaloStyleProps() }), spiff.DOMElements.label({ className: 'tab-MapScaleReadout', style: this.$mapScaleReadoutStyleProps() }, this.props.readoutText));
		},
		$mapScaleStyleProps: function MapScaleComponent$MapScaleStyleProps() {
			var displayValue = (this.props.shouldShowMapScale ? '' : 'none');
			return { width: this.props.width + 'px', color: this.props.readoutColor, borderColor: this.props.readoutColor, display: displayValue };
		},
		$mapScaleReadoutStyleProps: function MapScaleComponent$MapScaleReadoutStyleProps() {
			var textShadow = '1px 1px 0 ' + this.props.borderColor + ', 1px -1px 0 ' + this.props.borderColor + ', -1px 1px 0 ' + this.props.borderColor + ', -1px -1px 0 ' + this.props.borderColor;
			return { textShadow: textShadow };
		},
		$mapScaleHaloStyleProps: function MapScaleComponent$MapScaleHaloStyleProps() {
			return { borderColor: this.props.borderColor };
		}
	}, React.Component);
	ss.initClass($tab_MapScaleViewModel, $asm, {
		createUpdatedProps: function MapScaleViewModel$CreateUpdatedProps() {
			var mapScaleModel = this.$mapScaleInfoModel;
			if (!mapScaleModel.get_hasPresModel()) {
				return $tab_MapScaleViewModel.$defaultProps;
			}
			return { width: mapScaleModel.get_mapScaleWidth(), readoutText: mapScaleModel.get_mapScaleReadoutString(), readoutColor: mapScaleModel.get_mapScaleColor(), borderColor: mapScaleModel.get_mapScaleBorderColor(), shouldShowMapScale: mapScaleModel.get_shouldShowMapScale(), marginOfError: mapScaleModel.get_mapScaleMarginOfError(), tooltipText: mapScaleModel.get_mapScaleTooltipString() };
		},
		handleUpdatedMapScaleInfo: function MapScaleViewModel$HandleUpdatedMapScaleInfo() {
			this.incrementProps();
		}
	}, ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object])]);
	ss.initClass($tab_MenuItemTelemetryConfigOptions, $asm, {
		get_commands: function MenuItemTelemetryConfigOptions$get_Commands() {
			return this.$1$CommandsField;
		},
		set_commands: function MenuItemTelemetryConfigOptions$set_Commands(value) {
			this.$1$CommandsField = value;
		},
		get_menuItem: function MenuItemTelemetryConfigOptions$get_MenuItem() {
			return this.$1$MenuItemField;
		},
		set_menuItem: function MenuItemTelemetryConfigOptions$set_MenuItem(value) {
			this.$1$MenuItemField = value;
		},
		get_menuPrefix: function MenuItemTelemetryConfigOptions$get_MenuPrefix() {
			return this.$1$MenuPrefixField;
		},
		set_menuPrefix: function MenuItemTelemetryConfigOptions$set_MenuPrefix(value) {
			this.$1$MenuPrefixField = value;
		},
		get_menuTextMayBeSensitive: function MenuItemTelemetryConfigOptions$get_MenuTextMayBeSensitive() {
			return this.$1$MenuTextMayBeSensitiveField;
		},
		set_menuTextMayBeSensitive: function MenuItemTelemetryConfigOptions$set_MenuTextMayBeSensitive(value) {
			this.$1$MenuTextMayBeSensitiveField = value;
		}
	});
	ss.initClass($tab_MenuItemTelemetryInfo, $asm, {
		get_menuItemPrefix: function MenuItemTelemetryInfo$get_MenuItemPrefix() {
			return this.$1$MenuItemPrefixField;
		},
		set_menuItemPrefix: function MenuItemTelemetryInfo$set_MenuItemPrefix(value) {
			this.$1$MenuItemPrefixField = value;
		},
		get_commandIndexInFlattenedList: function MenuItemTelemetryInfo$get_CommandIndexInFlattenedList() {
			return this.$1$CommandIndexInFlattenedListField;
		},
		set_commandIndexInFlattenedList: function MenuItemTelemetryInfo$set_CommandIndexInFlattenedList(value) {
			this.$1$CommandIndexInFlattenedListField = value;
		},
		get_commandReadId: function MenuItemTelemetryInfo$get_CommandReadId() {
			return this.$1$CommandReadIdField;
		},
		set_commandReadId: function MenuItemTelemetryInfo$set_CommandReadId(value) {
			this.$1$CommandReadIdField = value;
		},
		get_commandName: function MenuItemTelemetryInfo$get_CommandName() {
			return this.$1$CommandNameField;
		},
		set_commandName: function MenuItemTelemetryInfo$set_CommandName(value) {
			this.$1$CommandNameField = value;
		}
	});
	ss.initEnum($tab_MethodAdded, $asm, { dragDrop: 'dragDrop', doubleClick: 'doubleClick' }, true);
	ss.initClass($tab_Metrics, $asm, {});
	ss.initClass($tab_ModifierKeyState, $asm, {
		dispose: function ModifierKeyState$Dispose() {
			$(document).off('.ModifierKeyState');
		},
		$handleEvent: function ModifierKeyState$HandleEvent(e) {
			$tab_ModifierKeyState.fireModifierKeysChanged(e);
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_ModulesRegistration, $asm, {});
	ss.initClass($tab_NativeFontLoader, $asm, {
		add_fontsReady: function NativeFontLoader$add_FontsReady(value) {
			this.$1$FontsReadyField = ss.delegateCombine(this.$1$FontsReadyField, value);
		},
		remove_fontsReady: function NativeFontLoader$remove_FontsReady(value) {
			this.$1$FontsReadyField = ss.delegateRemove(this.$1$FontsReadyField, value);
		},
		add_fontDownloading: function NativeFontLoader$add_FontDownloading(value) {
			this.$1$FontDownloadingField = ss.delegateCombine(this.$1$FontDownloadingField, value);
		},
		remove_fontDownloading: function NativeFontLoader$remove_FontDownloading(value) {
			this.$1$FontDownloadingField = ss.delegateRemove(this.$1$FontDownloadingField, value);
		},
		reset: function NativeFontLoader$Reset() {
		},
		addFonts: function NativeFontLoader$AddFonts(fonts) {
			for (var $t1 = 0; $t1 < fonts.length; $t1++) {
				var font = fonts[$t1];
				var fontDescriptors = ss.mkdict(['style', font.get_style(), 'weight', font.get_weight()]);
				var fontFace = new FontFace(font.get_fontFamily(), font.get_source(), fontDescriptors);
				if (ss.keyExists(this.$fontFaces, font.get_hash())) {
					continue;
				}
				$tab_NativeFontLoader.get_$documentFonts().add(fontFace);
				this.$fontFaces[font.get_hash()] = fontFace;
			}
		},
		downloadFonts: function NativeFontLoader$DownloadFonts() {
			var $t1 = _.values(this.$fontFaces);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var fontFace = $t1[$t2];
				if (fontFace.status === 'unloaded') {
					this.$fontPromises.push(fontFace.load());
					this.$raiseFontDownloading();
				}
			}
		},
		finishDownloadingFonts: function NativeFontLoader$FinishDownloadingFonts() {
			if (this.$fontPromises.length > 0) {
				Promise.all(this.$fontPromises).then(ss.mkdel(this, this.$raiseFontsReady));
			}
			else {
				this.$raiseFontsReady();
			}
		},
		$raiseFontsReady: function NativeFontLoader$RaiseFontsReady() {
			if (!ss.staticEquals(this.$1$FontsReadyField, null)) {
				this.$1$FontsReadyField();
			}
		},
		$raiseFontDownloading: function NativeFontLoader$RaiseFontDownloading() {
			if (!ss.staticEquals(this.$1$FontDownloadingField, null)) {
				this.$1$FontDownloadingField();
			}
		}
	}, null, [$tab_IFontLoader]);
	ss.initClass($tab_NativePresModelsFactory, $asm, {});
	ss.initClass($tab_NaturalLanguageInfo, $asm, {});
	ss.initClass($tab_NaturalLanguageModuleUtil, $asm, {});
	ss.initEnum($tab_NeedRemoteTooltip, $asm, { localOnly: 0, needRemote: 1, needRemoteForViTOnly: 2 });
	ss.initClass($tab_NotificationViewModel, $asm, {
		add_shown: function NotificationViewModel$add_Shown(value) {
			this.$2$ShownField = ss.delegateCombine(this.$2$ShownField, value);
		},
		remove_shown: function NotificationViewModel$remove_Shown(value) {
			this.$2$ShownField = ss.delegateRemove(this.$2$ShownField, value);
		},
		add_hidden: function NotificationViewModel$add_Hidden(value) {
			this.$2$HiddenField = ss.delegateCombine(this.$2$HiddenField, value);
		},
		remove_hidden: function NotificationViewModel$remove_Hidden(value) {
			this.$2$HiddenField = ss.delegateRemove(this.$2$HiddenField, value);
		},
		get_message: function NotificationViewModel$get_Message() {
			return this.$message;
		},
		set_message: function NotificationViewModel$set_Message(value) {
			this.$message = value;
		},
		get_visible: function NotificationViewModel$get_Visible() {
			return this.$visible;
		},
		get_autoHideTimeout: function NotificationViewModel$get_AutoHideTimeout() {
			return this.$autoHideTimeout;
		},
		set_autoHideTimeout: function NotificationViewModel$set_AutoHideTimeout(value) {
			this.$autoHideTimeout = value;
		},
		get_displayPosition: function NotificationViewModel$get_DisplayPosition() {
			return this.$displayPosition;
		},
		set_displayPosition: function NotificationViewModel$set_DisplayPosition(value) {
			this.$displayPosition = value;
		},
		show: function NotificationViewModel$Show() {
			if (this.$visible) {
				return;
			}
			this.$visible = true;
			if (this.$autoHideTimeout > 0) {
				this.$autoHideHandle = window.setTimeout(ss.mkdel(this, this.hide), this.$autoHideTimeout);
			}
			this.raiseActionEvent(this.$2$ShownField);
		},
		disposeOnHide: function NotificationViewModel$DisposeOnHide() {
			this.add_hidden(ss.mkdel(this, this.dispose));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_hidden(ss.mkdel(this, this.dispose));
			})));
		},
		hide: function NotificationViewModel$Hide() {
			if (this.$visible === false) {
				return;
			}
			this.$visible = false;
			window.clearTimeout(this.$autoHideHandle);
			this.raiseActionEvent(this.$2$HiddenField);
		},
		$dismissNotificationView: function NotificationViewModel$DismissNotificationView(e, cancelCallback) {
			this.hide();
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_OverlayImage, $asm, {
		get_location: function OverlayImage$get_Location() {
			return { x: ss.Int32.trunc(this.$location.x), y: ss.Int32.trunc(this.$location.y) };
		},
		set_location: function OverlayImage$set_Location(value) {
			this.$location = { x: value.x, y: value.y };
			this.$updateOverlayImageLocation();
		},
		clone: function OverlayImage$Clone() {
			return new $tab_OverlayImage(this.$parent.get(0), this.element.attr('src'));
		},
		show: function OverlayImage$Show(showLocation) {
			this.$location = showLocation;
			this.$updateOverlayImageLocation();
		},
		hide: function OverlayImage$Hide() {
			this.element.detach();
		},
		$updateOverlayImageLocation: function OverlayImage$UpdateOverlayImageLocation() {
			if (!ss.referenceEquals(this.element.parent()[0], this.$parent[0])) {
				this.$parent.append(this.element);
			}
			if (ss.isNullOrUndefined(this.$location)) {
				return;
			}
			var top = this.$location.y;
			var left = this.$location.x;
			tab.Log.get(this).debug('Positioning overlay image: top=%d, left=%d, parent=%o', [top, left, this.$parent]);
			this.element.css(ss.mkdict(['top', top + 'px', 'left', left + 'px']));
		}
	}, spiff.Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable, $tab_IMovable]);
	ss.initClass($tab_PagableGroupListComponent, $asm, {
		buildItem: function PagableGroupListComponent$BuildItem(data) {
			var classes = ['tabPagableUserListItem'];
			if (ss.referenceEquals(data, this.props.activeGroup)) {
				classes.push(spiff.UnificationClassNames.active);
			}
			return spiff.DOMElements.div({ className: classes.join(' '), style: { whiteSpace: 'nowrap' }, title: data.name }, data.name);
		},
		getUniqueKey: function PagableGroupListComponent$GetUniqueKey(data) {
			return data.id;
		},
		getEventHandleSpecForItem: function PagableGroupListComponent$GetEventHandleSpecForItem(itemProps) {
			var $t1 = new EventUtils.EventHandleSpec();
			$t1.tap = ss.mkdel(this, function(evt) {
				this.props.onGroupSelected(itemProps.data);
			});
			return $t1;
		},
		onScrollStop: function PagableGroupListComponent$OnScrollStop(position, maxPosition) {
			if (position.y === maxPosition.y) {
				this.props.fetchNextPage();
			}
		},
		shouldScrollbarAlwaysBeShown: function PagableGroupListComponent$ShouldScrollbarAlwaysBeShown() {
			return true;
		}
	}, ss.makeGenericType(spiff.PagableListComponent$2, [Object, Object]));
	ss.initClass($tab_PagableUserListComponent, $asm, {
		buildItem: function PagableUserListComponent$BuildItem(data) {
			var classes = ['tabPagableUserListItem'];
			if (ss.referenceEquals(data, this.props.activeUser)) {
				classes.push(spiff.UnificationClassNames.active);
			}
			return spiff.DOMElements.div({ className: classes.join(' '), style: { whiteSpace: 'nowrap' }, title: data.friendlyName }, data.friendlyName);
		},
		getUniqueKey: function PagableUserListComponent$GetUniqueKey(data) {
			return data.id;
		},
		getEventHandleSpecForItem: function PagableUserListComponent$GetEventHandleSpecForItem(itemProps) {
			var $t1 = new EventUtils.EventHandleSpec();
			$t1.tap = ss.mkdel(this, function(evt) {
				this.props.onUserSelected(itemProps.data);
			});
			return $t1;
		},
		onScrollStop: function PagableUserListComponent$OnScrollStop(position, maxPosition) {
			if (position.y === maxPosition.y) {
				this.props.fetchNextPage();
			}
		},
		shouldScrollbarAlwaysBeShown: function PagableUserListComponent$ShouldScrollbarAlwaysBeShown() {
			return true;
		}
	}, ss.makeGenericType(spiff.PagableListComponent$2, [Object, Object]));
	ss.initEnum($tab_PillStatus, $asm, { valid: 0, invalid: 1, pending: 2 });
	ss.initClass($tab_PluginFilePicker, $asm, {
		getImageFile: function PluginFilePicker$GetImageFile() {
			var returnData = $.Deferred();
			var $t1 = new $tab_FilePickerConfig();
			$t1.allowedFileExtensions = ['image/*'];
			$t1.allowMulti = false;
			this.$imageConfig = $t1;
			this.$filePickerViewModel = tab.MiscUtil.dispose$1(this.$filePickerViewModel);
			this.$filePickerViewModel = $tab_FilePickerViewModel.createFilePickerViewModel(this.$imageConfig, function(fl) {
				$tab_PluginFilePicker.$resolveFileName(returnData, fl);
			});
			var filePicker = tab.ObjectRegistry.newView(ss.makeGenericType(spiff.ReactHostView$3, [$tab_FilePickerViewModel, $tab_FilePickerComponent, Object])).call(null, [this.$filePickerViewModel]);
			filePicker.addToDom($(document.body));
			return returnData.promise();
		},
		dispose: function PluginFilePicker$Dispose() {
			this.$filePickerViewModel = tab.MiscUtil.dispose$1(this.$filePickerViewModel);
			this.$disposables.dispose();
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_PortSizeCalculator, $asm, {});
	ss.initClass($tab_PresModelBrowserView, $asm, {
		$setupDialog: function PresModelBrowserView$SetupDialog() {
			this.$dialog = new spiff.Dialog(this.$viewModel$1.name, this.element);
			this.$dialog.get_dialogElement().addClass('pres_model_browser_dialog');
			this.$dialog.configMoveDragSource(spiff.Dialog.defaultDraggableDialogConfigurer);
			this.$dialog.get_dialogElement().addClass($tab_Application.suppressVizTooltipsAndOverlays);
			this.$dialog.set_resizeable(true);
			this.$dialog.add_closed(ss.mkdel(this, this.onDialogClose));
			this.$dialog.add_resizeMove(ss.mkdel(this, this.$onDialogResizeMove));
			this.$dialog.add_propertyChanged(ss.mkdel(this, this.$onDialogPropertyChanged));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.$dialog.remove_closed(ss.mkdel(this, this.onDialogClose));
				this.$dialog.remove_resizeMove(ss.mkdel(this, this.$onDialogResizeMove));
				this.$dialog.dispose();
			})));
			this.$dialog.show();
			this.$dialog.get_dialogElement().width(375);
			this.$dialog.get_dialogElement().height(250);
			this.$onDialogResizeMove();
		},
		onDialogClose: function PresModelBrowserView$OnDialogClose(o, args) {
			this.dispose();
		},
		$onDialogResizeMove: function PresModelBrowserView$OnDialogResizeMove() {
			this.element.outerHeight(this.element.parent().innerHeight());
		},
		$onDialogPropertyChanged: function PresModelBrowserView$OnDialogPropertyChanged(sender, propertyChangedEventArgs) {
			if (ss.referenceEquals(propertyChangedEventArgs.get_propertyName(), spiff.Dialog.isActiveProperty) && this.$dialog.get_isActive()) {
				this.$viewModel$1.activate();
			}
		},
		update: function PresModelBrowserView$Update(newViewModel) {
			this.$viewModel$1 = newViewModel;
			this.$jsTree(ss.mkdict(['core', ss.mkdict(['animation', 90, 'data', this.$viewModel$1.data, 'themes', ss.mkdict(['theme', 'default', 'icons', false, 'variant', 'small'])]), 'search', ss.mkdict(['show_only_matches', true, 'close_opened_onclear', false]), 'plugins', ['search']]), null, null);
			this.element.find('.pres_model_search_text').val('');
			this.$updateSearchButton();
		},
		$jsTree: function PresModelBrowserView$JsTree(input1, input2, input3) {
			return this.element.find('.tree').jstree(input1, input2, input3);
		},
		$updateSearchButton: function PresModelBrowserView$UpdateSearchButton() {
			var newSearchText = this.element.find('.pres_model_search_text').val().trim();
			var validSearchText = !ss.isNullOrEmptyString(newSearchText);
			var searchButton = this.element.find('.pres_model_search');
			if (this.$searchedText === '' || validSearchText && !ss.referenceEquals(this.$searchedText, newSearchText)) {
				searchButton.text('Search');
			}
			else {
				searchButton.text('Clear search');
			}
			if (validSearchText) {
				searchButton.prop('disabled', false);
			}
			else {
				searchButton.prop('disabled', true);
			}
		},
		$search: function PresModelBrowserView$Search() {
			var newSearchText = this.element.find('.pres_model_search_text').val().trim();
			if (ss.isValue(newSearchText) && !ss.referenceEquals(this.$searchedText, newSearchText) && newSearchText.length > 0) {
				this.$searchedText = newSearchText;
				this.$jsTree('close_all', null, null);
			}
			else {
				this.$searchedText = '';
			}
			this.element.find('.pres_model_search_text').val(this.$searchedText);
			this.$updateSearchButton();
			this.$jsTree('search', this.$searchedText, null);
		},
		$doExpandCollapse: function PresModelBrowserView$DoExpandCollapse() {
			if (this.$openAll) {
				this.$jsTree('close_all', null, null);
				this.element.find('.pres_model_expand').text('Expand all');
				this.$openAll = false;
			}
			else {
				this.$jsTree('open_all', null, null);
				this.element.find('.pres_model_expand').text('Collapse all');
				this.$openAll = true;
			}
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_PresModelBrowserViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_PresModelBrowserViewModel])]);
	ss.initClass($tab_PresModelBrowserViewModel, $asm, {
		activate: function PresModelBrowserViewModel$Activate() {
			if (!ss.staticEquals(this.$activationCallback, null)) {
				this.$activationCallback();
			}
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_PublicInfoComponent, $asm, {
		handleWidgetPropertyChanged: function PublicInfoComponent$HandleWidgetPropertyChanged(sender, propertyChangedEventArgs) {
		},
		updateWidgetState: function PublicInfoComponent$UpdateWidgetState(newProps) {
		}
	}, ss.makeGenericType(spiff.ReactSpiffAdapter$3, [$tab_PublicInfoView, $tab_PublicInfoProps, Object]));
	ss.initClass($tab_PublicInfoProps, $asm, {});
	ss.initClass($tab_PublicInfoTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_PublicInfoView, $asm, {
		get_dom: function PublicInfoView$get_Dom() {
			return ss.cast(this.get_template(), $tab_PublicInfoTemplate);
		},
		$updatePublicInfo: function PublicInfoView$UpdatePublicInfo() {
			this.get_dom().moreAboutPublicSection.empty();
			this.get_dom().viewAndAuthorInfoSection.empty();
			this.$addLearnMoreAboutTableauPublicLink();
			if (this.$publicInfoViewModel.get_shouldShowViewCount()) {
				this.$addViewCountLine();
				if (this.$publicInfoViewModel.get_shouldShowAuthorByLine()) {
					this.$addDivider();
				}
			}
			if (this.$publicInfoViewModel.get_shouldShowAuthorByLine()) {
				this.$addAuthorByLine();
			}
		},
		$addLearnMoreAboutTableauPublicLink: function PublicInfoView$AddLearnMoreAboutTableauPublicLink() {
			this.get_dom().moreAboutPublicSection.attr('href', this.$publicInfoViewModel.get_publicLogoLink());
			this.get_dom().moreAboutPublicSection.text(tab.Strings.ToolbarLearnMoreAboutTableau);
		},
		$addViewCountLine: function PublicInfoView$AddViewCountLine() {
			var viewCountText = $('<span>').text(tab.Strings.ToolbarViewCount($tab_PublicInfoViewModel.get_localizedViewCount()));
			this.get_dom().viewAndAuthorInfoSection.append(viewCountText);
		},
		$addDivider: function PublicInfoView$AddDivider() {
			var dividerText = $('<span>');
			dividerText.addClass('tab-belowPublicDivider');
			dividerText.text('|');
			this.get_dom().viewAndAuthorInfoSection.append(dividerText);
		},
		$addAuthorByLine: function PublicInfoView$AddAuthorByLine() {
			var authorBylineText = $('<span>').html(this.$publicInfoViewModel.get_authorProfileLink());
			this.get_dom().viewAndAuthorInfoSection.append(authorBylineText);
		},
		onAddedToDom: function PublicInfoView$OnAddedToDom() {
			this.$updatePublicInfo();
			spiff.Widget.prototype.onAddedToDom.call(this);
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_PublicInfoViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_PublicInfoViewModel])]);
	ss.initClass($tab_PublicInfoViewModel, $asm, {
		add_hideDialogRequested: function PublicInfoViewModel$add_HideDialogRequested(value) {
		},
		remove_hideDialogRequested: function PublicInfoViewModel$remove_HideDialogRequested(value) {
		},
		add_propsUpdated: function PublicInfoViewModel$add_PropsUpdated(value) {
		},
		remove_propsUpdated: function PublicInfoViewModel$remove_PropsUpdated(value) {
		},
		get_props: function PublicInfoViewModel$get_Props() {
			var $t1 = new $tab_PublicInfoProps();
			$t1.viewModel = this;
			return { children: React.createElement($tab_PublicInfoComponent, $t1), dialogWidth: 260, isGlassTransparent: false, isModal: true, positioningBehavior: 0, shouldAdjustPositionOnWindowResize: !tsConfig.is_mobile, shouldRecenterOnUpdate: true, shouldReturnFocusOnClose: true, showCloseButton: true, showFooter: false, testId: 'public-info', title: tab.Strings.ToolbarMoreInfo, type: 0 };
		},
		get_shouldShowAuthorByLine: function PublicInfoViewModel$get_ShouldShowAuthorByLine() {
			return $tab_ToolbarViewModel.get_$isPublic() && tsConfig.show_byline;
		},
		get_shouldShowViewCount: function PublicInfoViewModel$get_ShouldShowViewCount() {
			return $tab_ToolbarViewModel.get_$isPublic() && tsConfig.showViewCount && $tab_PublicInfoViewModel.get_viewCount() > tsConfig.viewCountThreshold;
		},
		get_publicLogoLink: function PublicInfoViewModel$get_PublicLogoLink() {
			var parentLocation = (ss.isValue(tabBootstrap.ViewerBootstrap.get_instance().location) ? tabBootstrap.ViewerBootstrap.get_instance().location.toString() : '');
			return tsConfig.watermarklink + '?ref=' + parentLocation.split('?')[0];
		},
		get_authorProfileLink: function PublicInfoViewModel$get_AuthorProfileLink() {
			var location = window.location;
			var link = ss.formatString('{0}//{1}/profile/app/rdr/repo?workbook={2}', location.protocol, location.hostname, tsConfig.workbook_repo_url);
			return ss.formatString('<a class="tab-toolbarAuthorByText" target="_blank" href="{0}">{1}</a>', tab.EscapingUtil.escapeHtml(link), tab.EscapingUtil.escapeHtml(tab.Strings.ToolbarMoreByAuthor));
		},
		onDialogHidden: function PublicInfoViewModel$OnDialogHidden() {
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object]), spiff.IDialogContent]);
	ss.initClass($tab_QuickFilterConstants, $asm, {});
	ss.initClass($tab_QuickFilterNoninteractiveDropdownComponent, $asm, {
		render: function QuickFilterNoninteractiveDropdownComponent$Render() {
			var containerClass = [$tab_QuickFilterNoninteractiveDropdownComponent.containerClass, $tab_QuickFilterNoninteractiveDropdownComponent.containerBorderClass].join(' ');
			var containerStyle = { borderColor: this.props.borderColor };
			return spiff.DOMElements.div({ className: containerClass, style: containerStyle }, spiff.DOMElements.div({ className: $tab_QuickFilterNoninteractiveDropdownComponent.summaryClass }, this.props.children), (!this.props.hideIcon ? ss.mkdel(this, this.renderIcon)() : null));
		},
		renderIcon: function QuickFilterNoninteractiveDropdownComponent$RenderIcon() {
			var iconContainerStyle = { borderColor: this.props.borderColor };
			return spiff.DOMElements.div({ className: $tab_QuickFilterNoninteractiveDropdownComponent.iconContainerClass, style: iconContainerStyle }, spiff.DOMElements.div({ className: $tab_QuickFilterNoninteractiveDropdownComponent.iconClass }));
		}
	}, spiff.PureRenderComponent);
	ss.initClass($tab_QuickFilterReadoutComponent, $asm, {
		render: function QuickFilterReadoutComponent$Render() {
			var containerClass = [$tab_QuickFilterReadoutComponent.containerClass, $tab_QuickFilterReadoutComponent.containerBorderClass].join(' ');
			var containerStyle = { borderColor: this.props.borderColor };
			return spiff.DOMElements.div({ className: containerClass, style: containerStyle }, this.$renderText(), (!this.props.hideIcon ? ss.mkdel(this, this.$renderIcon)() : null));
		},
		$renderText: function QuickFilterReadoutComponent$RenderText() {
			var formattedText = (ss.isNullOrEmptyString(this.props.text) ? ' ' : this.props.text);
			var textElementClass = [$tab_QuickFilterReadoutComponent.textClass, this.props.textClass].join(' ');
			var textStyle = { textDecoration: (this.props.strikethroughText ? 'line-through' : 'none') };
			return spiff.DOMElements.div({ className: textElementClass, style: textStyle }, formattedText);
		},
		$renderIcon: function QuickFilterReadoutComponent$RenderIcon() {
			var iconElementClass = [$tab_QuickFilterReadoutComponent.iconClass, this.props.iconClass].join(' ');
			return spiff.DOMElements.div({ className: iconElementClass });
		}
	}, spiff.PureRenderComponent);
	ss.initClass($tab_RecipientPillComponent, $asm, {
		render: function RecipientPillComponent$Render() {
			var $t1 = new EventUtils.EventHandleSpec();
			$t1.tap = ss.mkdel(this, function(evt) {
				this.props.removeRecipientByIndex(this.props.recipientIndex);
			});
			var removeButtonClickedSpec = $t1;
			var removeUserSpan = EventUtils.EventForwarder.span(removeButtonClickedSpec, { className: 'tabUserPillRemove' }, '×');
			var userNameSpan = spiff.DOMElements.span({ className: 'tabUserPillName' }, this.props.recipientName);
			return spiff.DOMElements.div(this.$recipientPillProps(), userNameSpan, removeUserSpan);
		},
		$recipientPillProps: function RecipientPillComponent$RecipientPillProps() {
			var pillClass = 'tabUserPill';
			if (this.props.pillStatus === 1) {
				pillClass += ' error';
			}
			return { className: pillClass, title: ((this.props.pillStatus === 0) ? this.props.recipientName : this.props.errorText) };
		}
	}, React.Component);
	ss.initClass($tab_RecipientPillsComponent, $asm, {
		render: function RecipientPillsComponent$Render() {
			var pills = null;
			if (this.props.isUsers) {
				pills = _.map(this.props.users, ss.mkdel(this, function(item, index) {
					return React.createElement($tab_RecipientPillComponent, { removeRecipientByIndex: this.props.removeRecipientByIndex, recipientIndex: index, recipientName: item.friendlyName, pillStatus: (ss.staticEquals(this.props.userValidator, null) ? 0 : this.props.userValidator(item)), errorText: (ss.staticEquals(this.props.invalidUserTextGenerator, null) ? null : this.props.invalidUserTextGenerator(item)), key: item.id });
				}));
			}
			else {
				pills = _.map(this.props.groups, ss.mkdel(this, function(item1, index1) {
					return React.createElement($tab_RecipientPillComponent, { removeRecipientByIndex: this.props.removeRecipientByIndex, recipientIndex: index1, recipientName: item1.name, pillStatus: 0, errorText: (ss.staticEquals(this.props.invalidGroupTextGenerator, null) ? null : this.props.invalidGroupTextGenerator(item1)), key: item1.id });
				}));
			}
			var searchBox = React.createElement(SharedWidgets.OutlineTextFieldWidget, {
				text: this.props.searchText,
				handleChange: this.props.newSearch,
				maxLength: 50,
				containerStyle: { minWidth: '25px', maxWidth: '100px' },
				inputStyle: { border: '0px' },
				inputRef: function(e) {
					if (ss.isValue(e)) {
						e.focus();
					}
				},
				key: 'input-search',
				testId: 'subscriber-search-input'
			});
			pills.push(searchBox);
			return spiff.DOMElements.div({ className: 'tabUserPillsComponent', onKeyDown: this.props.handleInputKeyDown, style: { overflowY: 'auto' } }, pills);
		}
	}, React.Component);
	ss.initClass($tab_RecipientSearchComponent, $asm, {
		add_disposed: function RecipientSearchComponent$add_Disposed(value) {
			this.$3$DisposedField = ss.delegateCombine(this.$3$DisposedField, value);
		},
		remove_disposed: function RecipientSearchComponent$remove_Disposed(value) {
			this.$3$DisposedField = ss.delegateRemove(this.$3$DisposedField, value);
		},
		add_propertyChanged: function RecipientSearchComponent$add_PropertyChanged(value) {
			this.$3$PropertyChangedField = ss.delegateCombine(this.$3$PropertyChangedField, value);
		},
		remove_propertyChanged: function RecipientSearchComponent$remove_PropertyChanged(value) {
			this.$3$PropertyChangedField = ss.delegateRemove(this.$3$PropertyChangedField, value);
		},
		createNewDefaultState: function RecipientSearchComponent$CreateNewDefaultState() {
			return { activeItemIndex: 0, moreRecipients: false, firstVisibleIndex: 0, users: [], groups: [], activeUser: null, activeGroup: null };
		},
		dispose: function RecipientSearchComponent$Dispose() {
			tab.Log.get(this).debug('Dispose', []);
			if (ss.isValue(this.$3$DisposedField)) {
				this.$3$DisposedField(this);
				this.$3$DisposedField = null;
			}
			this.$3$PropertyChangedField = null;
			this.disposables.dispose();
			this.$searchDebouncer.dispose();
		},
		notifyPropertyChanged: function RecipientSearchComponent$NotifyPropertyChanged(propertyName) {
			if (!ss.staticEquals(this.$3$PropertyChangedField, null)) {
				this.$3$PropertyChangedField(this, new tab.PropertyChangedEventArgs(propertyName));
			}
		},
		$clearSearchInputUsers: function RecipientSearchComponent$ClearSearchInputUsers(user) {
			this.$clearSearchInputRecipients();
		},
		$clearSearchInputGroups: function RecipientSearchComponent$ClearSearchInputGroups(groups) {
			this.$clearSearchInputRecipients();
		},
		$clearSearchInputRecipients: function RecipientSearchComponent$ClearSearchInputRecipients() {
			var $t1 = ReactDOM.findDOMNode(this.refs['tabUserSearchInputRef']);
			var searchInput = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'INPUT'));
			if (ss.isValue(searchInput)) {
				searchInput.value = null;
			}
			this.setState(this.createNewDefaultState());
			this.props.emptySearch(true);
		},
		handleInputKeyUp: function RecipientSearchComponent$HandleInputKeyUp(e) {
			var keyCode = e.keyCode;
			if (keyCode === 40 || keyCode === 38 || keyCode === 13) {
				return;
			}
			this.$searchText = ss.cast(e.target, ss.isValue(e.target) && (ss.isInstanceOfType(e.target, Element) && e.target.tagName === 'INPUT')).value;
			this.$searchDebouncer.invokeActionDelayed();
			if (this.props.isUsers) {
				this.searchUsers();
			}
			else {
				this.searchGroups();
			}
		},
		handleInputKeyDown: function RecipientSearchComponent$HandleInputKeyDown(e) {
			var previousFocusedIndex = this.state.activeItemIndex;
			switch (e.keyCode) {
				case 40: {
					this.state.activeItemIndex = this.$getNewIndexToFocus(1);
					if (previousFocusedIndex !== this.state.activeItemIndex) {
						this.updateActiveRecipient(this.state.activeItemIndex);
					}
					e.preventDefault();
					break;
				}
				case 38: {
					this.state.activeItemIndex = this.$getNewIndexToFocus(-1);
					if (previousFocusedIndex !== this.state.activeItemIndex) {
						this.updateActiveRecipient(this.state.activeItemIndex);
					}
					e.preventDefault();
					break;
				}
				case 13: {
					if (this.props.isUsers) {
						var activeItem = this.state.users[this.state.activeItemIndex];
						if (ss.isValue(activeItem)) {
							this.props.onUserSelected(activeItem.data);
							this.$clearSearchInputUsers(activeItem.data);
						}
					}
					else {
						var activeItem1 = this.state.groups[this.state.activeItemIndex];
						if (ss.isValue(activeItem1)) {
							this.props.onGroupSelected(activeItem1.data);
							this.$clearSearchInputGroups(activeItem1.data);
						}
					}
					e.preventDefault();
					break;
				}
			}
		},
		updateActiveRecipient: function RecipientSearchComponent$UpdateActiveRecipient(recipientIndex) {
			if (this.props.isUsers) {
				var listItem = this.state.users[recipientIndex];
				if (ss.isNullOrUndefined(listItem) || ss.referenceEquals(this.state.activeUser, listItem.data)) {
					this.setState(this.state);
					return;
				}
				this.state.activeUser = listItem.data;
			}
			else {
				var listItem1 = this.state.groups[recipientIndex];
				if (ss.isNullOrUndefined(listItem1) || ss.referenceEquals(this.state.activeGroup, listItem1.data)) {
					this.setState(this.state);
					return;
				}
				this.state.activeGroup = listItem1.data;
			}
			if (ss.Nullable$1.lt(recipientIndex, this.state.firstVisibleIndex)) {
				this.state.firstVisibleIndex = ss.Nullable$1.sub(this.state.firstVisibleIndex, 1);
			}
			else if (ss.Nullable$1.ge(recipientIndex, ss.Nullable$1.add(this.state.firstVisibleIndex, $tab_RecipientSearchComponent.numberOfRowsInViewport))) {
				this.state.firstVisibleIndex = ss.Nullable$1.add(this.state.firstVisibleIndex, 1);
			}
			this.setState(this.state);
		},
		$getNewIndexToFocus: function RecipientSearchComponent$GetNewIndexToFocus(change) {
			var newIndex = this.state.activeItemIndex + change;
			var length = (this.props.isUsers ? this.state.users.length : this.state.groups.length);
			if (newIndex < 0 || newIndex >= length) {
				return this.state.activeItemIndex;
			}
			return newIndex;
		},
		resultsAvailable: function RecipientSearchComponent$ResultsAvailable() {
			this.$searchInProgress = false;
		},
		checkCurrentSearchHasNoResults: function RecipientSearchComponent$CheckCurrentSearchHasNoResults() {
			var isEmpty = this.searchFieldIsEmpty();
			var length = (this.props.isUsers ? this.state.users.length : this.state.groups.length);
			this.props.noResults(length === 0 && !isEmpty && !this.$searchInProgress);
		},
		searchFieldIsEmpty: function RecipientSearchComponent$SearchFieldIsEmpty() {
			var $t1 = ReactDOM.findDOMNode(this.refs['tabUserSearchInputRef']);
			var empty = ss.isNullOrEmptyString(ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'INPUT')).value);
			this.props.emptySearch(empty);
			return empty;
		},
		searchUsers: function RecipientSearchComponent$SearchUsers() {
			var deferred = tab.WorkgroupServerCommands.fetchPageOfSiteUsers(this.$searchText, 0);
			deferred.done(ss.mkdel(this, function(pageOfUsers) {
				this.state.users = [];
				this.state.firstVisibleIndex = 0;
				this.state.activeItemIndex = 0;
				this.$appendPageOfUsers(pageOfUsers);
			}));
		},
		searchMoreUsers: function RecipientSearchComponent$SearchMoreUsers() {
			if (!this.state.moreRecipients) {
				return;
			}
			var deferred = tab.WorkgroupServerCommands.fetchPageOfSiteUsers(this.$searchText, this.state.users.length);
			deferred.done(ss.mkdel(this, this.$appendPageOfUsers));
		},
		$appendPageOfUsers: function RecipientSearchComponent$AppendPageOfUsers(pageOfUsers) {
			this.state.moreRecipients = pageOfUsers.moreItems;
			_.map(pageOfUsers.items, ss.mkdel(this, function(u) {
				return this.state.users.push({ data: u });
			}));
			this.updateActiveRecipient(this.state.activeItemIndex);
			this.resultsAvailable();
			this.checkCurrentSearchHasNoResults();
		},
		searchGroups: function RecipientSearchComponent$SearchGroups() {
			var deferred = tab.WorkgroupServerCommands.fetchPageOfGroups(this.$searchText, 0);
			deferred.done(ss.mkdel(this, function(pageOfGroups) {
				this.state.groups = [];
				this.state.firstVisibleIndex = 0;
				this.state.activeItemIndex = 0;
				this.$appendPageOfGroups(pageOfGroups);
			}));
		},
		searchMoreGroups: function RecipientSearchComponent$SearchMoreGroups() {
			if (!this.state.moreRecipients) {
				return;
			}
			var deferred = tab.WorkgroupServerCommands.fetchPageOfGroups(this.$searchText, this.state.groups.length);
			deferred.done(ss.mkdel(this, this.$appendPageOfGroups));
		},
		$appendPageOfGroups: function RecipientSearchComponent$AppendPageOfGroups(pageOfGroups) {
			this.state.moreRecipients = pageOfGroups.moreItems;
			_.map(pageOfGroups.items, ss.mkdel(this, function(g) {
				return this.state.groups.push({ data: g });
			}));
			this.updateActiveRecipient(this.state.activeItemIndex);
			this.resultsAvailable();
			this.checkCurrentSearchHasNoResults();
		},
		render: function RecipientSearchComponent$Render() {
			return spiff.DOMElements.div({ className: 'tabUserSearchComponent' }, this.$renderSearchBox(), this.$renderPagableRecipientList());
		},
		$renderSearchBox: function RecipientSearchComponent$RenderSearchBox() {
			return spiff.DOMElements.input({ type: 'text', className: 'tabUserSearchInput', placeholder: this.props.placeholderMessage, onKeyUp: ss.mkdel(this, this.handleInputKeyUp), onKeyDown: ss.mkdel(this, this.handleInputKeyDown), tabIndex: 0, autoFocus: true, ref: 'tabUserSearchInputRef' });
		},
		$renderPagableRecipientList: function RecipientSearchComponent$RenderPagableRecipientList() {
			if (this.props.isUsers) {
				return React.createElement($tab_PagableUserListComponent, { startingY: ss.Nullable$1.mul(this.state.firstVisibleIndex, $tab_RecipientSearchComponent.rowHeight), onUserSelected: ss.delegateCombine(this.props.onUserSelected, ss.mkdel(this, this.$clearSearchInputUsers)), fetchNextPage: ss.mkdel(this, this.searchMoreUsers), items: this.state.users, activeUser: this.state.activeUser });
			}
			return React.createElement($tab_PagableGroupListComponent, { startingY: ss.Nullable$1.mul(this.state.firstVisibleIndex, $tab_RecipientSearchComponent.rowHeight), onGroupSelected: ss.delegateCombine(this.props.onGroupSelected, ss.mkdel(this, this.$clearSearchInputGroups)), fetchNextPage: ss.mkdel(this, this.searchMoreUsers), items: this.state.groups, activeGroup: this.state.activeGroup });
		}
	}, React.Component, [ss.IDisposable]);
	ss.initClass($tab_RecipientSearchSelectorComponent, $asm, {
		createNewDefaultState: function RecipientSearchSelectorComponent$CreateNewDefaultState() {
			this.$searchText = '';
			return { activeItemIndex: 0, moreRecipients: false, firstVisibleIndex: 0, users: [], groups: [], activeUser: null, activeGroup: null, searchText: '' };
		},
		$clearSearchInputUsers: function RecipientSearchSelectorComponent$ClearSearchInputUsers(user) {
			this.$clearSearchInputRecipients();
		},
		$clearSearchInputGroups: function RecipientSearchSelectorComponent$ClearSearchInputGroups(groups) {
			this.$clearSearchInputRecipients();
		},
		$clearSearchInputRecipients: function RecipientSearchSelectorComponent$ClearSearchInputRecipients() {
			if (!this.props.shouldHideSearchComponent) {
				var $t1 = ReactDOM.findDOMNode(this.refs['tabUserSearchInputRef']);
				var searchInput = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'INPUT'));
				if (ss.isValue(searchInput)) {
					searchInput.value = null;
				}
			}
			this.setState(this.createNewDefaultState());
			this.props.emptySearch(true);
		},
		newSearch: function RecipientSearchSelectorComponent$NewSearch(search) {
			this.setState(function(prevState, prevProps) {
				return { searchText: search };
			});
			this.$searchText = search;
			this.$searchIfInputTextIsNotEmpty();
		},
		handleInputKeyUp: function RecipientSearchSelectorComponent$HandleInputKeyUp(e) {
			var keyCode = e.keyCode;
			if (keyCode === 40 || keyCode === 38 || keyCode === 13 || keyCode === 27) {
				return;
			}
			this.$searchText = ss.cast(e.target, ss.isValue(e.target) && (ss.isInstanceOfType(e.target, Element) && e.target.tagName === 'INPUT')).value;
			this.$searchIfInputTextIsNotEmpty();
		},
		$searchIfInputTextIsNotEmpty: function RecipientSearchSelectorComponent$SearchIfInputTextIsNotEmpty() {
			if (ss.isNullOrEmptyString(this.$searchText)) {
				this.$clearSearchInputRecipients();
				return;
			}
			if (this.props.isUsers) {
				this.searchUsers();
			}
			else {
				this.searchGroups();
			}
		},
		handleInputKeyDown: function RecipientSearchSelectorComponent$HandleInputKeyDown(e) {
			var previousFocusedIndex = this.state.activeItemIndex;
			switch (e.keyCode) {
				case 40: {
					this.state.activeItemIndex = this.$getNewIndexToFocus(1);
					if (previousFocusedIndex !== this.state.activeItemIndex) {
						this.updateActiveRecipient(this.state.activeItemIndex);
					}
					e.preventDefault();
					break;
				}
				case 38: {
					this.state.activeItemIndex = this.$getNewIndexToFocus(-1);
					if (previousFocusedIndex !== this.state.activeItemIndex) {
						this.updateActiveRecipient(this.state.activeItemIndex);
					}
					e.preventDefault();
					break;
				}
				case 13: {
					if (this.props.isUsers) {
						var activeItem = this.state.users[this.state.activeItemIndex];
						if (ss.isValue(activeItem)) {
							this.props.addUser(activeItem.data);
							this.$clearSearchInputUsers(activeItem.data);
						}
					}
					else {
						var activeItem1 = this.state.groups[this.state.activeItemIndex];
						if (ss.isValue(activeItem1)) {
							this.props.addGroup(activeItem1.data);
							this.$clearSearchInputGroups(activeItem1.data);
						}
					}
					e.preventDefault();
					break;
				}
			}
		},
		updateActiveRecipient: function RecipientSearchSelectorComponent$UpdateActiveRecipient(recipientIndex) {
			if (this.props.isUsers) {
				var listItem = this.state.users[recipientIndex];
				if (ss.isNullOrUndefined(listItem) || ss.referenceEquals(this.state.activeUser, listItem.data)) {
					this.setState(this.state);
					return;
				}
				this.state.activeUser = listItem.data;
			}
			else {
				var listItem1 = this.state.groups[recipientIndex];
				if (ss.isNullOrUndefined(listItem1) || ss.referenceEquals(this.state.activeGroup, listItem1.data)) {
					this.setState(this.state);
					return;
				}
				this.state.activeGroup = listItem1.data;
			}
			if (ss.Nullable$1.lt(recipientIndex, this.state.firstVisibleIndex)) {
				this.state.firstVisibleIndex = ss.Nullable$1.sub(this.state.firstVisibleIndex, 1);
			}
			else if (ss.Nullable$1.ge(recipientIndex, ss.Nullable$1.add(this.state.firstVisibleIndex, this.numberOfRowsInViewport))) {
				this.state.firstVisibleIndex = ss.Nullable$1.add(this.state.firstVisibleIndex, 1);
			}
			this.setState(this.state);
		},
		$getNewIndexToFocus: function RecipientSearchSelectorComponent$GetNewIndexToFocus(change) {
			var newIndex = this.state.activeItemIndex + change;
			var length = (this.props.isUsers ? this.state.users.length : this.state.groups.length);
			if (newIndex < 0 || newIndex >= length) {
				return this.state.activeItemIndex;
			}
			return newIndex;
		},
		resultsAvailable: function RecipientSearchSelectorComponent$ResultsAvailable() {
			this.$searchInProgress = false;
		},
		checkCurrentSearchHasNoResults: function RecipientSearchSelectorComponent$CheckCurrentSearchHasNoResults() {
			var isEmpty = this.searchFieldIsEmpty();
			var length = (this.props.isUsers ? this.state.users.length : this.state.groups.length);
			this.props.noResults(length === 0 && !isEmpty && !this.$searchInProgress);
		},
		searchFieldIsEmpty: function RecipientSearchSelectorComponent$SearchFieldIsEmpty() {
			var $t1 = ReactDOM.findDOMNode(this.refs['tabUserSearchInputRef']);
			var empty = ss.isNullOrEmptyString(ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'INPUT')).value);
			this.props.emptySearch(empty);
			return empty;
		},
		searchUsers: function RecipientSearchSelectorComponent$SearchUsers() {
			var deferred = tab.WorkgroupServerCommands.fetchPageOfSiteUsers(this.$searchText, 0);
			this.$searchInProgress = true;
			deferred.done(ss.mkdel(this, function(pageOfUsers) {
				this.state.users = [];
				this.state.firstVisibleIndex = 0;
				this.state.activeItemIndex = 0;
				this.$appendPageOfUsers(pageOfUsers);
			}));
		},
		searchMoreUsers: function RecipientSearchSelectorComponent$SearchMoreUsers() {
			if (!this.state.moreRecipients) {
				return;
			}
			var deferred = tab.WorkgroupServerCommands.fetchPageOfSiteUsers(this.$searchText, this.state.users.length);
			deferred.done(ss.mkdel(this, this.$appendPageOfUsers));
		},
		$appendPageOfUsers: function RecipientSearchSelectorComponent$AppendPageOfUsers(pageOfUsers) {
			this.state.moreRecipients = pageOfUsers.moreItems;
			_.map(pageOfUsers.items, ss.mkdel(this, function(u) {
				return this.state.users.push({ data: u });
			}));
			this.updateActiveRecipient(this.state.activeItemIndex);
			this.resultsAvailable();
			if (!this.props.shouldHideSearchComponent) {
				this.checkCurrentSearchHasNoResults();
			}
		},
		searchGroups: function RecipientSearchSelectorComponent$SearchGroups() {
			var deferred = tab.WorkgroupServerCommands.fetchPageOfGroups(this.$searchText, 0);
			this.$searchInProgress = true;
			deferred.done(ss.mkdel(this, function(pageOfGroups) {
				this.state.groups = [];
				this.state.firstVisibleIndex = 0;
				this.state.activeItemIndex = 0;
				this.$appendPageOfGroups(pageOfGroups);
			}));
		},
		searchMoreGroups: function RecipientSearchSelectorComponent$SearchMoreGroups() {
			if (!this.state.moreRecipients) {
				return;
			}
			var deferred = tab.WorkgroupServerCommands.fetchPageOfGroups(this.$searchText, this.state.groups.length);
			deferred.done(ss.mkdel(this, this.$appendPageOfGroups));
		},
		$appendPageOfGroups: function RecipientSearchSelectorComponent$AppendPageOfGroups(pageOfGroups) {
			this.state.moreRecipients = pageOfGroups.moreItems;
			_.map(pageOfGroups.items, ss.mkdel(this, function(g) {
				return this.state.groups.push({ data: g });
			}));
			this.updateActiveRecipient(this.state.activeItemIndex);
			this.resultsAvailable();
			if (!this.props.shouldHideSearchComponent) {
				this.checkCurrentSearchHasNoResults();
			}
		},
		render: function RecipientSearchSelectorComponent$Render() {
			return spiff.DOMElements.div({ className: 'tab-UserSearchSelectorComponent' }, this.$renderPillsComponent(), this.$renderResults());
		},
		$renderPillsComponent: function RecipientSearchSelectorComponent$RenderPillsComponent() {
			if (this.props.shouldHideSearchComponent) {
				return React.createElement($tab_RecipientPillsComponent, { groups: this.props.groups, users: this.props.users, isUsers: this.props.isUsers, removeRecipientByIndex: this.props.removeRecipientByIndex, userValidator: this.props.userValidator, invalidGroupTextGenerator: this.props.groupErrorMessageGenerator, invalidUserTextGenerator: this.props.userErrorMessageGenerator, searchText: this.state.searchText, handleInputKeyDown: ss.mkdel(this, this.handleInputKeyDown), newSearch: ss.mkdel(this, this.newSearch) });
			}
			else {
				return React.createElement($tab_UserPillsComponent, { users: this.props.users, addUser: this.props.addUser, removeUser: this.props.removeUser, userValidator: this.props.userValidator, invalidUserTextGenerator: this.props.userErrorMessageGenerator });
			}
		},
		$renderResults: function RecipientSearchSelectorComponent$RenderResults() {
			if (this.props.shouldHideSearchComponent) {
				var list = spiff.DOMElements.div({ className: ((this.state.users.length !== 0 || this.state.groups.length !== 0) ? 'has-items' : '') }, this.$renderPagableRecipientList());
				return spiff.DOMElements.div({ className: 'results-area' }, list);
			}
			else {
				return this.renderRecipientSearch();
			}
		},
		renderRecipientSearch: function RecipientSearchSelectorComponent$RenderRecipientSearch() {
			return spiff.DOMElements.div({ className: 'tabUserSearchComponent' }, this.$renderSearchBox(), this.$renderPagableRecipientList());
		},
		$renderSearchBox: function RecipientSearchSelectorComponent$RenderSearchBox() {
			return spiff.DOMElements.input({ type: 'text', className: 'tabUserSearchInput', placeholder: this.props.placeholderMessage, onKeyUp: ss.mkdel(this, this.handleInputKeyUp), onKeyDown: ss.mkdel(this, this.handleInputKeyDown), tabIndex: 0, autoFocus: true, ref: 'tabUserSearchInputRef' });
		},
		$renderPagableRecipientList: function RecipientSearchSelectorComponent$RenderPagableRecipientList() {
			if (this.props.isUsers) {
				return React.createElement($tab_PagableUserListComponent, { startingY: ss.Nullable$1.mul(this.state.firstVisibleIndex, $tab_RecipientSearchComponent.rowHeight), onUserSelected: ss.delegateCombine(this.props.addUser, ss.mkdel(this, this.$clearSearchInputUsers)), fetchNextPage: ss.mkdel(this, this.searchMoreUsers), items: this.state.users, activeUser: this.state.activeUser });
			}
			return React.createElement($tab_PagableGroupListComponent, { startingY: ss.Nullable$1.mul(this.state.firstVisibleIndex, $tab_RecipientSearchComponent.rowHeight), onGroupSelected: ss.delegateCombine(this.props.addGroup, ss.mkdel(this, this.$clearSearchInputGroups)), fetchNextPage: ss.mkdel(this, this.searchMoreUsers), items: this.state.groups, activeGroup: this.state.activeGroup });
		}
	}, React.Component);
	ss.initClass($tab_RectangleGeom, $asm, {
		get_type: function RectangleGeom$get_Type() {
			return 0;
		},
		get_geom: function RectangleGeom$get_Geom() {
			return this.$geom;
		}
	}, null, [$tab_IHitTargetGeom]);
	ss.initClass($tab_UndoRedoKeyboardShortcut, $asm, {
		onValidKeyCombo: function UndoRedoKeyboardShortcut$OnValidKeyCombo(e) {
			if (!tab.KeyboardUtilities.isTargetTextInput(e)) {
				tab.KeyboardUtilities.stopPropagationAndDefault(e);
			}
		}
	}, tab.CommandKeyboardShortcut, [tab.IKeyboardShortcut]);
	ss.initClass($tab_RedoKeyboardShortcut, $asm, {
		get_keyCombos: function RedoKeyboardShortcut$get_KeyCombos() {
			var ctrlY = new tab.KeyCombo.$ctor3(new tab.KeyModifiers(false, false, false, true, false, false, false, false, false), 89, []);
			var ctrlShift = new tab.KeyModifiers(false, false, false, true, false, false, true, false, false);
			var ctrlShiftZ = new tab.KeyCombo.$ctor3(ctrlShift, 90, []);
			return new tab.KeyCombos(ctrlY, [ctrlShiftZ]);
		},
		get_commandId: function RedoKeyboardShortcut$get_CommandId() {
			return { ns: 'tabdoc', cmd: 'redo' };
		}
	}, $tab_UndoRedoKeyboardShortcut, [tab.IKeyboardShortcut]);
	ss.initClass($tab_RenderAndCheckFontLoader, $asm, {
		add_fontsReady: function RenderAndCheckFontLoader$add_FontsReady(value) {
			this.$1$FontsReadyField = ss.delegateCombine(this.$1$FontsReadyField, value);
		},
		remove_fontsReady: function RenderAndCheckFontLoader$remove_FontsReady(value) {
			this.$1$FontsReadyField = ss.delegateRemove(this.$1$FontsReadyField, value);
		},
		add_fontDownloading: function RenderAndCheckFontLoader$add_FontDownloading(value) {
			this.$1$FontDownloadingField = ss.delegateCombine(this.$1$FontDownloadingField, value);
		},
		remove_fontDownloading: function RenderAndCheckFontLoader$remove_FontDownloading(value) {
			this.$1$FontDownloadingField = ss.delegateRemove(this.$1$FontDownloadingField, value);
		},
		reset: function RenderAndCheckFontLoader$Reset() {
			this.$cancelPolling();
		},
		addFonts: function RenderAndCheckFontLoader$AddFonts(fonts) {
			for (var $t1 = 0; $t1 < fonts.length; $t1++) {
				var font = fonts[$t1];
				if (!ss.keyExists(this.$fontList, font.woffLocation)) {
					var fontDiv = this.$buildFontMeasurementElement(font);
					this.$fontList[font.woffLocation] = new $tab_$RenderAndCheckFontLoader$DownloadableFontState(fontDiv);
				}
				var fontState = this.$fontList[font.woffLocation];
				if (!_.contains(fontState.$fontsToRegister, font) && !_.contains(fontState.$fontsAlreadyRegistered, font)) {
					this.$fontList[font.woffLocation].$fontsToRegister.push(font);
				}
			}
		},
		downloadFonts: function RenderAndCheckFontLoader$DownloadFonts() {
			this.updateMeasurementDivs();
		},
		finishDownloadingFonts: function RenderAndCheckFontLoader$FinishDownloadingFonts() {
			this.updateMeasurementDivs();
			this.$startPolling();
		},
		updateMeasurementDivs: function RenderAndCheckFontLoader$UpdateMeasurementDivs() {
			if (ss.isNullOrUndefined(this.$baselineFontMeasurementDiv)) {
				this.$baselineFontMeasurementDiv = $tab_RenderAndCheckFontLoader.$buildMeasurementElement($tab_RenderAndCheckFontLoader.baselineFontClass, [$tab_RenderAndCheckFontLoader.baselineFontName]);
				this.$baselineFontMeasurementDiv.appendTo(document.body);
			}
			if (ss.isNullOrUndefined(this.$canvasElement)) {
				var $t1 = $('<canvas/>').css($tab_RenderAndCheckFontLoader.$hiddenProps).appendTo(document.body)[0];
				this.$canvasElement = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
				this.$canvasContext = ss.cast(this.$canvasElement.getContext('2d'), CanvasRenderingContext2D);
			}
			var $t2 = _.values(this.$fontList);
			for (var $t3 = 0; $t3 < $t2.length; $t3++) {
				var fontState = $t2[$t3];
				if (ss.isValue(fontState.$measurementDiv) && !ss.referenceEquals(fontState.$measurementDiv[0].parentElement, document.body)) {
					fontState.$measurementDiv.appendTo(document.body);
				}
			}
		},
		updateFontState: function RenderAndCheckFontLoader$UpdateFontState() {
			var $t1 = _.values(this.$fontList);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var fontState = $t1[$t2];
				if (ss.isNullOrUndefined(fontState.$measurementDiv)) {
					continue;
				}
				this.$canvasContext.font = '100% ' + fontState.$fakeFontFamily;
				var measureWidth = tab.DoubleUtil.roundToInt(this.$canvasContext.measureText($tab_RenderAndCheckFontLoader.measurementElementText).width);
				if (!$tab_RenderAndCheckFontLoader.$rectsAreIdentical(fontState.$measurementDiv, this.$baselineFontMeasurementDiv) && measureWidth === tab.DoubleUtil.roundToInt(fontState.$measurementDiv.width())) {
					fontState.$measurementDiv = null;
				}
				else {
					this.$raiseFontDownloading();
				}
			}
		},
		isDownloadingDone: function RenderAndCheckFontLoader$IsDownloadingDone() {
			var $t1 = _.values(this.$fontList);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var fontState = $t1[$t2];
				if (ss.isValue(fontState.$measurementDiv)) {
					return false;
				}
			}
			return true;
		},
		$buildFontMeasurementElement: function RenderAndCheckFontLoader$BuildFontMeasurementElement(font) {
			var fakeFamilyName = "'" + font.woffLocation.substr(font.woffLocation.lastIndexOf('/') + 1) + "'";
			var $t1 = new tab.DownloadableFontProperties();
			$t1.set_fontFamily(fakeFamilyName);
			$t1.woffLocation = font.woffLocation;
			var invisibleProperties = $t1;
			tab.StyleUtil.appendCSSRuleToStyleSheet$1($tab_RenderAndCheckFontLoader.stylesheetId, '@font-face', invisibleProperties.toCSSRules());
			var currentFontDiv = $tab_RenderAndCheckFontLoader.$buildMeasurementElement($tab_RenderAndCheckFontLoader.hiddenDivClass, [invisibleProperties.get_fontFamily(), $tab_RenderAndCheckFontLoader.baselineFontName]);
			return currentFontDiv;
		},
		$startPolling: function RenderAndCheckFontLoader$StartPolling() {
			this.$cancelPolling();
			var alreadyDone = this.$poll();
			if (alreadyDone) {
				return;
			}
			this.$pollingIntervalId = window.setInterval(ss.mkdel(this, function() {
				this.$poll();
			}), $tab_RenderAndCheckFontLoader.fontLoadedCheckDelayPerTryMilliseconds);
		},
		$poll: function RenderAndCheckFontLoader$Poll() {
			this.$pollingLoopCallCount++;
			this.updateFontState();
			var doneDownloading = this.isDownloadingDone();
			if (doneDownloading || this.$pollingLoopCallCount > $tab_RenderAndCheckFontLoader.maxNumberOfTriesToDownloadFont) {
				this.$cancelPolling();
				this.$removeMeasurementDivs();
				if (doneDownloading) {
					this.$addRealFontFaceRules();
				}
				return true;
			}
			return false;
		},
		$cancelPolling: function RenderAndCheckFontLoader$CancelPolling() {
			window.clearInterval(this.$pollingIntervalId);
			this.$pollingIntervalId = 0;
			this.$pollingLoopCallCount = 0;
		},
		$removeMeasurementDivs: function RenderAndCheckFontLoader$RemoveMeasurementDivs() {
			if (ss.isValue(this.$baselineFontMeasurementDiv)) {
				this.$baselineFontMeasurementDiv.remove();
				this.$baselineFontMeasurementDiv = null;
			}
			if (ss.isValue(this.$canvasElement)) {
				this.$canvasContext = null;
				this.$canvasElement.parentNode.removeChild(this.$canvasElement);
				this.$canvasElement = null;
			}
			$('body > .tab-hiddenFontMeasurer').remove();
		},
		$raiseFontDownloading: function RenderAndCheckFontLoader$RaiseFontDownloading() {
			if (!ss.staticEquals(this.$1$FontDownloadingField, null)) {
				this.$1$FontDownloadingField();
			}
		},
		$raiseFontsReady: function RenderAndCheckFontLoader$RaiseFontsReady() {
			if (!ss.staticEquals(this.$1$FontsReadyField, null)) {
				this.$1$FontsReadyField();
			}
		},
		$addRealFontFaceRules: function RenderAndCheckFontLoader$AddRealFontFaceRules() {
			var $t1 = _.values(this.$fontList);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var fontState = $t1[$t2];
				while (fontState.$fontsToRegister.length > 0) {
					var font = fontState.$fontsToRegister.pop();
					fontState.$fontsAlreadyRegistered.push(font);
					tab.StyleUtil.appendCSSRuleToStyleSheet$1($tab_RenderAndCheckFontLoader.stylesheetId, '@font-face', font.toCSSRules());
				}
			}
			this.$raiseFontsReady();
		}
	}, null, [$tab_IFontLoader]);
	ss.initClass($tab_RenderUtil, $asm, {});
	ss.initClass($tab_RightAreaDrawerModuleLoader, $asm, {
		loadCommentingModule: function RightAreaDrawerModuleLoader$LoadCommentingModule() {
			if (ss.isValue(this.$commentingModuleViewModel)) {
				return this.$commentingModuleViewModel;
			}
			var deferred = $.Deferred();
			this.$commentingModuleViewModel = deferred;
			tab.ModuleManager.load(tab.ICommentingFactory).call(null, []).done(ss.mkdel(this, function(module) {
				var commentingModuleViewModel = module.createCommentingModuleViewModel();
				commentingModuleViewModel.updateForSheet(tsConfig.current_sheet_name);
				this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
					commentingModuleViewModel.disposeViewModel();
					this.$commentingModuleViewModel = null;
				})));
				deferred.resolve(commentingModuleViewModel);
			}));
			return this.$commentingModuleViewModel;
		},
		loadDataAlertsPanelModule: function RightAreaDrawerModuleLoader$LoadDataAlertsPanelModule() {
			if (ss.isValue(this.$dataAlertsPanelModuleViewModel)) {
				return this.$dataAlertsPanelModuleViewModel;
			}
			var deferred = $.Deferred();
			this.$dataAlertsPanelModuleViewModel = deferred;
			var mc = tabBootstrap.MetricsController.createContext('Alerts Panel Load', 4, null);
			tab.ModuleManager.load(tab.IDataAlertsPanelFactory).call(null, []).done(ss.mkdel(this, function(module) {
				var $t1 = $tab_Application.get_instance().get_rightAreaDrawerViewModel();
				var dataAlertsPanelModuleViewModel = module.createDataAlertsPanelModuleViewModel(ss.mkdel($t1, $t1.closeDrawer));
				this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
					dataAlertsPanelModuleViewModel.disposeViewModel();
					this.$dataAlertsPanelModuleViewModel = null;
				})));
				deferred.resolve(dataAlertsPanelModuleViewModel);
				mc.dispose();
			}));
			return this.$dataAlertsPanelModuleViewModel;
		},
		loadLineageModule: function RightAreaDrawerModuleLoader$LoadLineageModule() {
			if (ss.isValue(this.$lineagePanelViewModel)) {
				return this.$lineagePanelViewModel;
			}
			var deferred = $.Deferred();
			this.$lineagePanelViewModel = deferred;
			tab.ModuleManager.load(tab.IDataCatalogClientComponentsFactory).call(null, []).done(ss.mkdel(this, function(module) {
				var $t1 = $tab_Application.get_instance().get_rightAreaDrawerViewModel();
				var lineageModuleViewModel = module.createVizClientLineagePanelViewModel(ss.mkdel($t1, $t1.closeDrawer));
				this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
					lineageModuleViewModel.disposeViewModel();
					this.$lineagePanelViewModel = null;
				})));
				deferred.resolve(lineageModuleViewModel);
			}));
			return this.$lineagePanelViewModel;
		},
		dispose: function RightAreaDrawerModuleLoader$Dispose() {
			this.disposables.dispose();
		}
	}, null, [ss.IDisposable]);
	ss.initClass($tab_RightAreaDrawerModuleLoaderTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_RightAreaDrawerModuleLoaderView, $asm, {
		get_dom: function RightAreaDrawerModuleLoaderView$get_Dom() {
			return ss.cast(this.get_template(), $tab_RightAreaDrawerModuleLoaderTemplate);
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_RightAreaDrawerModuleLoaderViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_RightAreaDrawerModuleLoaderViewModel])]);
	ss.initClass($tab_RightAreaDrawerModuleLoaderViewModel, $asm, {
		get_$rightAreaDrawerModuleLoader: function RightAreaDrawerModuleLoaderViewModel$get_RightAreaDrawerModuleLoader() {
			if (ss.isNullOrUndefined(this.$rightAreaDrawerModuleLoader)) {
				this.$rightAreaDrawerModuleLoader = new $tab_RightAreaDrawerModuleLoader();
				this.disposables.add$1(this.$rightAreaDrawerModuleLoader);
			}
			return this.$rightAreaDrawerModuleLoader;
		},
		get_viewModel: function RightAreaDrawerModuleLoaderViewModel$get_ViewModel() {
			return this;
		},
		get_viewType: function RightAreaDrawerModuleLoaderViewModel$get_ViewType() {
			return $tab_RightAreaDrawerModuleLoaderView;
		},
		disposeViewModel: function RightAreaDrawerModuleLoaderViewModel$DisposeViewModel() {
			this.dispose();
		},
		get_typeOfContentBeingLoaded: function RightAreaDrawerModuleLoaderViewModel$get_TypeOfContentBeingLoaded() {
			return this.$rightAreaDrawerModel.get_typeOfContentBeingLoaded();
		},
		loadDataAlertsModule: function RightAreaDrawerModuleLoaderViewModel$LoadDataAlertsModule() {
			return this.$loadModule(tab.IDataAlertsPanelModuleViewModel).call(this, 2, this.get_$rightAreaDrawerModuleLoader().loadDataAlertsPanelModule());
		},
		loadCommentingModule: function RightAreaDrawerModuleLoaderViewModel$LoadCommentingModule() {
			return this.$loadModule(tab.ICommentingModuleViewModel).call(this, 1, this.get_$rightAreaDrawerModuleLoader().loadCommentingModule());
		},
		loadLineageModule: function RightAreaDrawerModuleLoaderViewModel$LoadLineageModule() {
			return this.$loadModule(tab.IVizClientLineagePanelViewModel).call(this, 3, this.get_$rightAreaDrawerModuleLoader().loadLineageModule());
		},
		$loadModule: function(T) {
			return function RightAreaDrawerModuleLoaderViewModel$LoadModule(contentType, contentLoader) {
				tab.RightAreaDrawerCommands.setTypeOfContentBeingLoaded(contentType);
				contentLoader.then(function(content) {
					$tab_Application.get_instance().get_rightAreaDrawerViewModel().set_content(content);
				}, null);
				return this;
			};
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel, spiff.IContent]);
	ss.initClass($tab_RightAreaDrawerTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_RightAreaDrawerView, $asm, {
		get_dom: function RightAreaDrawerView$get_Dom() {
			return ss.cast(this.get_template(), $tab_RightAreaDrawerTemplate);
		},
		$openPanel: function RightAreaDrawerView$OpenPanel() {
			this.$refreshContent();
			this.$positionDrawer();
		},
		$closePanel: function RightAreaDrawerView$ClosePanel() {
			this.$positionDrawer();
		},
		$updatePanel: function RightAreaDrawerView$UpdatePanel() {
			this.$refreshContent();
			this.$positionDrawer();
		},
		$positionDrawer: function RightAreaDrawerView$PositionDrawer() {
			if (tsConfig.is_authoring) {
				this.get_dom().drawerContainer.css({ position: 'absolute', top: this.get_viewModel().get_drawerTopOffset() + 'px', right: this.get_viewModel().get_drawerRightOffset() + 'px', width: this.get_viewModel().get_drawerWidth() + 'px', bottom: this.get_viewModel().get_drawerBottomOffset() + 'px' });
			}
			else if (tab.FeatureFlags.isEnabled('IframeSizedToWindow')) {
				this.get_dom().drawerContainer.css({ 'flex-grow': '0', 'flex-shrink': '0', 'flex-basis': this.get_viewModel().get_drawerWidth() + 'px', order: '2', position: 'relative' });
			}
			else {
				this.get_dom().drawerContainer.css({ position: 'absolute', top: this.get_viewModel().get_drawerTopOffset() + 'px', right: this.get_viewModel().get_drawerRightOffset() + 'px', width: this.get_viewModel().get_drawerWidth() + 'px', height: this.get_viewModel().get_drawerHeight() + 'px', visibility: 'visible' });
			}
		},
		$refreshContent: function RightAreaDrawerView$RefreshContent() {
			if (ss.isValue(this.get_viewModel().get_content())) {
				this.get_dom().drawerContainer.empty();
				var contentView = tab.ObjectRegistry.newView$1(ss.makeGenericType(tab.IView$1, [tab.IViewModel])).call(null, this.get_viewModel().get_content().get_viewType(), [this.get_viewModel().get_content().get_viewModel()]);
				contentView.addToDom(this.get_dom().drawerContainer);
			}
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_RightAreaDrawerViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_RightAreaDrawerViewModel])]);
	ss.initClass($tab_RightAreaDrawerViewModel, $asm, {
		add_open: function RightAreaDrawerViewModel$add_Open(value) {
			this.$2$OpenField = ss.delegateCombine(this.$2$OpenField, value);
		},
		remove_open: function RightAreaDrawerViewModel$remove_Open(value) {
			this.$2$OpenField = ss.delegateRemove(this.$2$OpenField, value);
		},
		add_close: function RightAreaDrawerViewModel$add_Close(value) {
			this.$2$CloseField = ss.delegateCombine(this.$2$CloseField, value);
		},
		remove_close: function RightAreaDrawerViewModel$remove_Close(value) {
			this.$2$CloseField = ss.delegateRemove(this.$2$CloseField, value);
		},
		add_update: function RightAreaDrawerViewModel$add_Update(value) {
			this.$2$UpdateField = ss.delegateCombine(this.$2$UpdateField, value);
		},
		remove_update: function RightAreaDrawerViewModel$remove_Update(value) {
			this.$2$UpdateField = ss.delegateRemove(this.$2$UpdateField, value);
		},
		get_content: function RightAreaDrawerViewModel$get_Content() {
			return this.$content;
		},
		set_content: function RightAreaDrawerViewModel$set_Content(value) {
			this.$content = value;
			this.$updateDrawer();
		},
		get_drawerWidth: function RightAreaDrawerViewModel$get_DrawerWidth() {
			return tabBootstrap.ViewerBootstrap.get_instance().get_rightAreaDrawerWidth();
		},
		get_drawerHeight: function RightAreaDrawerViewModel$get_DrawerHeight() {
			return (tab.FeatureFlags.isEnabled('IframeSizedToWindow') ? $tab_ApplicationViewModel.calculateDashboardViewportBounds().h : ($tab_ApplicationSizeCalculator.calculateClientBounds().h + this.get_$tabHeight()));
		},
		get_drawerTopOffset: function RightAreaDrawerViewModel$get_DrawerTopOffset() {
			return (tab.FeatureFlags.isEnabled('IframeSizedToWindow') ? $tab_ApplicationViewModel.calculateDashboardViewportBounds().t : ($tab_ApplicationSizeCalculator.calculateClientBounds().t - this.get_$tabHeight()));
		},
		get_drawerRightOffset: function RightAreaDrawerViewModel$get_DrawerRightOffset() {
			return 0;
		},
		get_drawerBottomOffset: function RightAreaDrawerViewModel$get_DrawerBottomOffset() {
			return (tsConfig.is_authoring ? tabBootstrap.VizLayoutConstants.get_authoringTabsHeight() : 0);
		},
		get_$tabHeight: function RightAreaDrawerViewModel$get_TabHeight() {
			var tabHeight = 0;
			if (tabBootstrap.VizLayoutConstants.get_shouldShowTabs() && ss.isValue($tab_Application.get_instance().get_tabbedNavigation())) {
				tabHeight = $tab_Application.get_instance().get_tabHeight();
			}
			return tabHeight;
		},
		get_isOpen: function RightAreaDrawerViewModel$get_IsOpen() {
			return this.$rightAreaDrawerModel.get_isOpen();
		},
		set_isOpen: function RightAreaDrawerViewModel$set_IsOpen(value) {
			this.$rightAreaDrawerModel.set_isOpen(value);
		},
		get_typeOfContentBeingLoaded: function RightAreaDrawerViewModel$get_TypeOfContentBeingLoaded() {
			return this.$rightAreaDrawerModel.get_typeOfContentBeingLoaded();
		},
		openDrawer: function RightAreaDrawerViewModel$OpenDrawer(contentType) {
			tab.RightAreaDrawerCommands.showRightAreaDrawer(contentType);
		},
		closeDrawer: function RightAreaDrawerViewModel$CloseDrawer() {
			tab.RightAreaDrawerCommands.hideRightAreaDrawer();
		},
		$isContentOfType: function(T) {
			return function RightAreaDrawerViewModel$IsContentOfType() {
				return ss.isValue(this.get_content()) && ss.isInstanceOfType(this.get_content().get_viewModel(), T);
			};
		},
		$getToggleType: function(T) {
			return function RightAreaDrawerViewModel$GetToggleType(contentType) {
				if (!this.get_isOpen()) {
					return 0;
				}
				if (this.$isContentOfType(T).call(this)) {
					return 1;
				}
				if (this.$isContentOfType($tab_RightAreaDrawerModuleLoaderViewModel).call(this) && ss.cast(this.get_content().get_viewModel(), $tab_RightAreaDrawerModuleLoaderViewModel).get_typeOfContentBeingLoaded() === contentType) {
					return 1;
				}
				return 2;
			};
		},
		$updateDrawer: function RightAreaDrawerViewModel$UpdateDrawer() {
			if (this.$rightAreaDrawerModel.get_isOpen()) {
				this.raiseActionEvent(this.$2$UpdateField);
			}
		},
		toggleCommenting: function RightAreaDrawerViewModel$ToggleCommenting() {
			this.togglePanel(tab.ICommentingModuleViewModel).call(this, 1);
		},
		toggleDataAlertsPanel: function RightAreaDrawerViewModel$ToggleDataAlertsPanel() {
			this.togglePanel(tab.IDataAlertsPanelModuleViewModel).call(this, 2);
		},
		toggleLineagePanel: function RightAreaDrawerViewModel$ToggleLineagePanel() {
			this.togglePanel(tab.IVizClientLineagePanelViewModel).call(this, 3);
		},
		togglePanel: function(T) {
			return function RightAreaDrawerViewModel$TogglePanel(contentType) {
				switch (this.$getToggleType(T).call(this, contentType)) {
					case 0: {
						tab.RightAreaDrawerCommands.setTypeOfContentBeingLoaded(contentType);
						this.openDrawer(contentType);
						break;
					}
					case 1: {
						this.closeDrawer();
						break;
					}
					case 2: {
						if (ss.isValue(this.get_content())) {
							this.get_content().disposeViewModel();
						}
						this.set_content($tab_RightAreaDrawerModuleLoaderViewModel.getContentFromType(contentType));
						break;
					}
					default: {
						return;
					}
				}
			};
		},
		$setPanelVisibilityAndContent: function RightAreaDrawerViewModel$SetPanelVisibilityAndContent() {
			if (this.get_isOpen()) {
				tabBootstrap.ViewerBootstrap.get_instance().set_rightAreaDrawerWidth($tab_RightAreaDrawerViewModel.drawerWidthOpen);
				this.raiseActionEvent(this.$2$OpenField);
				this.set_content($tab_RightAreaDrawerModuleLoaderViewModel.getContentFromType(this.get_typeOfContentBeingLoaded()));
			}
			else {
				tabBootstrap.ViewerBootstrap.get_instance().set_rightAreaDrawerWidth($tab_RightAreaDrawerViewModel.drawerWidthClosed);
				if (ss.isValue(this.get_content())) {
					this.get_content().disposeViewModel();
					this.set_content(null);
				}
				this.raiseActionEvent(this.$2$CloseField);
			}
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initEnum($tab_RightAreaDrawerViewModel$ToggleType, $asm, { OPEN: 0, CLOSE: 1, REPLACE: 2 });
	ss.initClass($tab_SelectActionResolver, $asm, {});
	ss.initEnum($tab_SelectActionResolverEvent, $asm, { dragEnd: 0, markTap: 1, other: 2 });
	ss.initClass($tab_ServerFontLoader, $asm, {
		add_fontPreparationComplete: function ServerFontLoader$add_FontPreparationComplete(value) {
			this.$1$FontPreparationCompleteField = ss.delegateCombine(this.$1$FontPreparationCompleteField, value);
		},
		remove_fontPreparationComplete: function ServerFontLoader$remove_FontPreparationComplete(value) {
			this.$1$FontPreparationCompleteField = ss.delegateRemove(this.$1$FontPreparationCompleteField, value);
		},
		get_fontsLoadedPromise: function ServerFontLoader$get_FontsLoadedPromise() {
			return this.$fontsLoadedDeferred;
		},
		initialize: function ServerFontLoader$Initialize(useLogging) {
			this.$internalFontLoader.reset();
			this.$wereAllFontsFound = false;
			this.$fontsLoadedDeferred = $.Deferred();
			if (useLogging) {
				this.$completionToken = $tab_CompletionMonitor.get_instance().hold(1);
			}
		},
		registerServerLoadedFonts: function ServerFontLoader$RegisterServerLoadedFonts(fonts) {
			for (var $t1 = 0; $t1 < fonts.length; $t1++) {
				var font = fonts[$t1];
				var hash = font.get_hash();
				if (!ss.keyExists(this.$knownFonts, hash)) {
					this.$knownFonts[hash] = font;
				}
			}
		},
		notifyDownloadableFont: function ServerFontLoader$NotifyDownloadableFont(fonts) {
			if (this.$wereAllFontsFound) {
				return;
			}
			var onlyKnownfonts = [];
			for (var $t1 = 0; $t1 < fonts.length; $t1++) {
				var font = fonts[$t1];
				var hash = font.get_hash();
				if (ss.keyExists(this.$knownFonts, hash)) {
					onlyKnownfonts.push(this.$knownFonts[hash]);
				}
			}
			if (ss.isValue(onlyKnownfonts) && onlyKnownfonts.length > 0) {
				this.$internalFontLoader.addFonts(onlyKnownfonts);
			}
		},
		downloadFonts: function ServerFontLoader$DownloadFonts() {
			var mc = tabBootstrap.MetricsController.createContext('DownloadFonts', 128, null);
			try {
				this.$internalFontLoader.downloadFonts();
			}
			finally {
				if (ss.isValue(mc)) {
					mc.dispose();
				}
			}
		},
		allFontsFound: function ServerFontLoader$AllFontsFound() {
			this.$wereAllFontsFound = true;
			this.$internalFontLoader.finishDownloadingFonts();
		},
		$handleFontDownloading: function ServerFontLoader$HandleFontDownloading() {
			this.$raiseNotificationWhenFontsReady = true;
		},
		$handleFontsReady: function ServerFontLoader$HandleFontsReady() {
			$tab_FontMetricsLogger.logFontsLoaded();
			if (this.$raiseNotificationWhenFontsReady) {
				this.$raiseFontPreparationComplete();
				this.$raiseNotificationWhenFontsReady = false;
			}
			if (ss.isValue(this.$completionToken)) {
				this.$completionToken.dispose();
			}
			this.$fontsLoadedDeferred.resolve();
		},
		$raiseFontPreparationComplete: function ServerFontLoader$RaiseFontPreparationComplete() {
			tab.WindowHelper.requestAnimationFrame(ss.mkdel(this, function() {
				tab.WindowHelper.setTimeout(ss.mkdel(this, function() {
					if (!ss.staticEquals(this.$1$FontPreparationCompleteField, null)) {
						this.$1$FontPreparationCompleteField();
					}
				}), $tab_ServerFontLoader.raiseFontPreparationCompleteDelay);
			}));
		}
	});
	ss.initClass($tab_SessionViewModel, $asm, {});
	ss.initClass($tab_ShareComponent, $asm, {
		handleWidgetPropertyChanged: function ShareComponent$HandleWidgetPropertyChanged(sender, propertyChangedEventArgs) {
		},
		updateWidgetState: function ShareComponent$UpdateWidgetState(newProps) {
		}
	}, ss.makeGenericType(spiff.ReactSpiffAdapter$3, [$tab_ShareView, $tab_ShareProps, Object]));
	ss.initClass($tab_ShareProps, $asm, {});
	ss.initClass($tab_ShareTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_ShareToggleButtonViewModel, $asm, {
		add_originalViewSelected: function ShareToggleButtonViewModel$add_OriginalViewSelected(value) {
			this.$3$OriginalViewSelectedField = ss.delegateCombine(this.$3$OriginalViewSelectedField, value);
		},
		remove_originalViewSelected: function ShareToggleButtonViewModel$remove_OriginalViewSelected(value) {
			this.$3$OriginalViewSelectedField = ss.delegateRemove(this.$3$OriginalViewSelectedField, value);
		},
		createUpdatedProps: function ShareToggleButtonViewModel$CreateUpdatedProps() {
			return { selectedToggle: this.$selectedToggle, leftToggleText: tab.Strings.ToolbarCurrentView, rightToggleText: tab.Strings.ToolbarOriginalView, handleLeftToggleSelected: ss.mkdel(this, function() {
				this.$toggleChanged(false);
			}), handleRightToggleSelected: ss.mkdel(this, function() {
				this.$toggleChanged(true);
			}), testId: 'ShareToggleButton', ariaLabel: tab.Strings.ShareViewOptions };
		},
		$toggleChanged: function ShareToggleButtonViewModel$ToggleChanged(rightSelected) {
			this.$selectedToggle = (rightSelected ? 1 : 0);
			this.incrementProps();
			this.raiseActionEvent$1(Boolean).call(this, this.$3$OriginalViewSelectedField, rightSelected);
		}
	}, ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object])]);
	ss.initClass($tab_ShareView, $asm, {
		get_dom: function ShareView$get_Dom() {
			return ss.cast(this.get_template(), $tab_ShareTemplate);
		},
		$buildShareContent: function ShareView$BuildShareContent() {
			var linkDiv = $($tab_ShareTemplate.linkTemplate);
			var embedDiv = $($tab_ShareTemplate.embedTemplate);
			if (this.$shareViewModel.get_allowSharingDifferentViews()) {
				this.get_dom().shareArea.append($($tab_ShareTemplate.viewStateTemplate));
				this.get_dom().shareStateArea = this.get_dom().getElementBySelector('.tab-shareViewStateSection');
			}
			this.get_dom().shareArea.append(embedDiv);
			this.get_dom().shareArea.append(linkDiv);
			this.get_dom().shareLinkSection = this.get_dom().getElementBySelector('.tab-shareLinkSection');
			this.get_dom().shareLinkTitle = this.get_dom().getElementBySelector('.tab-shareLinkTitle');
			this.get_dom().shareLinkButtons = this.get_dom().getElementBySelector('.tab-shareLinkButtons');
			this.get_dom().shareLinkInput = this.$createTextInput().get_inputElement();
			this.get_dom().getElementBySelector('.tab-shareLinkInput').replaceWith(this.get_dom().shareLinkInput);
			this.get_dom().shareEmbedTitle = this.get_dom().getElementBySelector('.tab-shareEmbedTitle');
			this.get_dom().shareEmbedInput = this.$createTextInput().get_inputElement();
			this.get_dom().getElementBySelector('.tab-shareEmbedInput').replaceWith(this.get_dom().shareEmbedInput);
			if (!tsConfig.is_mobile) {
				this.get_dom().shareLinkInput.click(ss.mkdel(this, function(e) {
					this.get_dom().shareLinkInput.focus();
					this.get_dom().shareLinkInput.select();
				}));
				this.get_dom().shareEmbedInput.click(ss.mkdel(this, function(e1) {
					this.get_dom().shareEmbedInput.focus();
					this.get_dom().shareEmbedInput.select();
				}));
			}
			this.get_dom().shareLinkButtons.empty();
			if (this.$shareViewModel.get_shouldShowSocialShareOptions()) {
				var emailButton = new spiff.IconButton();
				emailButton.addClass('tab-shareIconButton');
				emailButton.addClass('tab-shareSocialMail');
				this.$applyAccessibilityAttributesToButton(emailButton.element, tab.Strings.ShareDialogEmailLink);
				emailButton.setIcon('tab-shareMailIcon');
				emailButton.onClick(ss.mkdel(this, function(e2) {
					this.$shareViewModel.doSendEmailAction();
				}));
				this.get_dom().shareLinkButtons.append(emailButton.element);
				var twitter = new spiff.IconButton();
				twitter.addClass('tab-shareIconButton');
				twitter.addClass('tab-shareSocialTwitter');
				this.$applyAccessibilityAttributesToButton(twitter.element, tab.Strings.ShareDialogTwitterLink);
				twitter.onClick(ss.mkdel(this, function(e3) {
					this.$shareViewModel.doTwitterShareAction();
				}));
				this.get_dom().shareLinkButtons.append(twitter.element);
				var facebook = new spiff.IconButton();
				facebook.addClass('tab-shareIconButton');
				facebook.addClass('tab-shareSocialFacebook');
				this.$applyAccessibilityAttributesToButton(facebook.element, tab.Strings.ShareDialogFacebookLink);
				facebook.onClick(ss.mkdel(this, function(e4) {
					this.$shareViewModel.doFacebookShareAction();
				}));
				this.get_dom().shareLinkButtons.append(facebook.element);
			}
			else {
				var wrapperSpan = $('<span/>').appendTo(this.get_dom().shareLinkButtons);
				this.$emailButtonWrapper = this.$createEmailButton();
				ReactDOM.render(this.$emailButtonWrapper, wrapperSpan.get(0));
			}
		},
		$applyAccessibilityAttributesToButton: function ShareView$ApplyAccessibilityAttributesToButton(button, title) {
			button.attr('tabindex', '0');
			button.attr('title', title);
			button.attr('role', 'link');
		},
		$createEmailButton: function ShareView$CreateEmailButton() {
			var emailButton = React.createElement(SharedWidgets.ButtonWidget, { handleClick: ss.mkdel(this, function(e) {
				this.$shareViewModel.doSendEmailAction();
			}), buttonType: 5, testId: 'EmailButton', children: tab.Strings.ShareDialogEmailLink });
			var buttonWrapper = React.createElement(SharedWidgets.InlineBlock, { children: emailButton });
			return buttonWrapper;
		},
		$updateShareData: function ShareView$UpdateShareData() {
			this.get_dom().shareLinkTitle.html(this.$shareViewModel.get_linkLabel());
			this.get_dom().shareEmbedTitle.html(this.$shareViewModel.get_embedLabel());
			if (this.$shareViewModel.get_allowSharingDifferentViews()) {
				this.$toggleButton = tab.ObjectRegistry.newView(ss.makeGenericType(spiff.ReactHostView$3, [$tab_ShareToggleButtonViewModel, SharedWidgets.ToggleTextWidget, Object])).call(null, [this.$shareViewModel.shareToggleButtonViewModel]);
				this.$toggleButton.addToDom(this.get_dom().shareStateArea);
			}
			this.$shareViewModel.set_shouldShareOriginalView(false);
			this.$updateShareLinks();
		},
		$updateShareLinks: function ShareView$UpdateShareLinks() {
			var baseUrl = this.$shareViewModel.generateShareBaseUrl();
			if (ss.isNullOrEmptyString(baseUrl)) {
				this.get_dom().shareLinkSection.hide();
			}
			else {
				var shareUrl = this.$shareViewModel.generateShareUrl();
				this.get_dom().shareLinkInput.val(shareUrl);
				this.get_dom().shareLinkSection.show();
			}
			this.$shareViewModel.generateEmbedCode().always(ss.mkdel(this, function(embedCode) {
				this.get_dom().shareEmbedInput.val(embedCode);
			}));
		},
		onAddedToDom: function ShareView$OnAddedToDom() {
			this.$updateShareData();
			spiff.Widget.prototype.onAddedToDom.call(this);
		},
		$createTextInput: function ShareView$CreateTextInput() {
			var tiv = spiff.TextInputView.newTextInputView('', '', null, !tsConfig.is_mobile);
			tiv.get_inputElement().addClass('tab-shareInput');
			return tiv;
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_ShareViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_ShareViewModel])]);
	ss.initClass($tab_ShareViewModel, $asm, {
		add_hideDialogRequested: function ShareViewModel$add_HideDialogRequested(value) {
		},
		remove_hideDialogRequested: function ShareViewModel$remove_HideDialogRequested(value) {
		},
		add_propsUpdated: function ShareViewModel$add_PropsUpdated(value) {
		},
		remove_propsUpdated: function ShareViewModel$remove_PropsUpdated(value) {
		},
		add_selectedViewChanged: function ShareViewModel$add_SelectedViewChanged(value) {
			this.$2$SelectedViewChangedField = ss.delegateCombine(this.$2$SelectedViewChangedField, value);
		},
		remove_selectedViewChanged: function ShareViewModel$remove_SelectedViewChanged(value) {
			this.$2$SelectedViewChangedField = ss.delegateRemove(this.$2$SelectedViewChangedField, value);
		},
		get_props: function ShareViewModel$get_Props() {
			var $t1 = new $tab_ShareProps();
			$t1.viewModel = this;
			return { children: React.createElement($tab_ShareComponent, $t1), dialogWidth: 260, isGlassTransparent: false, isModal: true, positioningBehavior: 0, shouldAdjustPositionOnWindowResize: !tsConfig.is_mobile, shouldRecenterOnUpdate: true, shouldReturnFocusOnClose: true, showCloseButton: true, showFooter: false, testId: 'share', title: tab.Strings.ToolbarShare, type: 0 };
		},
		get_allowSharingDifferentViews: function ShareViewModel$get_AllowSharingDifferentViews() {
			if (!$tab_ToolbarViewModel.get_$isPublic() || !tsConfig.statefulURL) {
				return false;
			}
			if (this.get_$isBaseViewASharedView()) {
				return true;
			}
			return tab.ApplicationModel.get_instance().get_workbook().get_isCurrentDashboardModified();
		},
		get_shouldShareOriginalView: function ShareViewModel$get_ShouldShareOriginalView() {
			return this.$shareOriginalView;
		},
		set_shouldShareOriginalView: function ShareViewModel$set_ShouldShareOriginalView(value) {
			this.$shareOriginalView = value;
		},
		get_shouldShowSocialShareOptions: function ShareViewModel$get_ShouldShowSocialShareOptions() {
			return $tab_ToolbarViewModel.get_$isPublic();
		},
		get_linkLabel: function ShareViewModel$get_LinkLabel() {
			return tab.Strings.ToolbarSendTitle;
		},
		get_embedLabel: function ShareViewModel$get_EmbedLabel() {
			return tab.Strings.ToolbarEmbedTitle;
		},
		get_currentViewLabel: function ShareViewModel$get_CurrentViewLabel() {
			return tab.Strings.ToolbarCurrentView;
		},
		get_originalViewLabel: function ShareViewModel$get_OriginalViewLabel() {
			return tab.Strings.ToolbarOriginalView;
		},
		get_$isBaseViewASharedView: function ShareViewModel$get_IsBaseViewASharedView() {
			return !tab.MiscUtil.isNullOrEmpty$3(tsConfig.guid);
		},
		saveSharedView: function ShareViewModel$SaveSharedView() {
			if (!this.get_allowSharingDifferentViews()) {
				return;
			}
			tab.XhrUtil.guid = null;
			if (tsConfig.statefulURL) {
				var primaryContentUrl = this.$getPrimaryContentUrl();
				if (primaryContentUrl === 'null' || ss.isNullOrUndefined(primaryContentUrl)) {
					primaryContentUrl = '';
				}
				tab.CommandController.get().legacySession.saveSharedView('', primaryContentUrl, function() {
				});
			}
		},
		$handleToggleButtonUpdated: function ShareViewModel$HandleToggleButtonUpdated(shouldShareOriginalView) {
			this.set_shouldShareOriginalView(shouldShareOriginalView);
			this.raiseActionEvent(this.$2$SelectedViewChangedField);
		},
		generateShareUrl: function ShareViewModel$GenerateShareUrl() {
			var uri = this.generateShareBaseUrl();
			uri = $tab_ShareViewModel.$fixURIParam(uri, tsConfig.toolbarvis, tsConfig.toolbarvisDefault, 'toolbar', null);
			uri = $tab_ShareViewModel.$fixURIParam(uri, tabBootstrap.VizLayoutConstants.get_shouldShowTabs(), tsConfig.showTabsDefault, 'tabs', null);
			uri = $tab_ShareViewModel.$fixURIParam(uri, $tab_ToolbarViewModel.get_$isPublic() && tsConfig.showViewCount, tsConfig.showViewCountDefault, 'display_count', null);
			uri = $tab_ShareViewModel.$fixURIParam(uri, false, false, 'size', null);
			uri = $tab_ShareViewModel.$fixURIParam(uri, false, false, 'commentingEnabled', null);
			uri = $tab_ShareViewModel.$fixURIParam(uri, false, false, 'isVizPortal', null);
			uri = $tab_ShareViewModel.$fixURIParam(uri, tab.MiscUtil.sanatizeBoolean(tsConfig.showVizHome), true, 'showVizHome', null);
			uri = $tab_ShareViewModel.$fixURIParam(uri, true, false, 'origin', 'viz_share_link');
			return uri;
		},
		$removeSessionRecoveryParams: function ShareViewModel$RemoveSessionRecoveryParams(uri) {
			uri = $tab_ShareViewModel.$fixURIParam(uri, false, false, 'jsonOnly', null);
			uri = $tab_ShareViewModel.$fixURIParam(uri, false, false, 'ignore_sticky_session', null);
			return uri;
		},
		generateShareBaseUrl: function ShareViewModel$GenerateShareBaseUrl() {
			var uri = tsConfig.requestURI;
			uri = this.$removeSessionRecoveryParams(uri);
			if (!this.get_shouldShareOriginalView() && this.get_allowSharingDifferentViews()) {
				var xhrGuid = tab.XhrUtil.guid;
				var base_location = window.location;
				var protocol = (tsConfig.forceHttpsForPublicEmbed ? 'https:' : base_location.protocol);
				var base_url = protocol + '//' + base_location.hostname + $tab_ShareViewModel.currentViewPath;
				if (!tab.MiscUtil.isNullOrEmpty$3(xhrGuid)) {
					uri = base_url + xhrGuid;
				}
				else if (!tab.MiscUtil.isNullOrEmpty$3(tsConfig.guid)) {
					uri = base_url + tsConfig.guid;
				}
			}
			return uri;
		},
		generateApiBasedEmbedCode: function ShareViewModel$GenerateApiBasedEmbedCode() {
			var currentWindowLocation = tab.VizUriModel.createForCurrentWindowLocation(null);
			var uriParts = tableau.util.parseUri(currentWindowLocation.get_absoluteUri());
			var scriptLocation = $tab_ShareViewModel.$getEmbedScriptLocation(uriParts);
			var noscriptMarkup = this.$buildNoScriptMarkup(this.$getStaticImageUrl());
			var divId = tab.EscapingUtil.escapeHtml($tab_ShareViewModel.$generateRandomId());
			var sizingAsync;
			var dashboardMode = tab.ModelUtils.findContentDashboard(null);
			if (dashboardMode.get_isDashboard() && dashboardMode.get_deviceLayouts().length > 0) {
				sizingAsync = $tab_ShareViewModel.$buildSizingJSForDSD();
			}
			else {
				var getSizing = tab.DashboardClientCommands.getCurrentSheetSizeConstraints().pipe(function(sizing) {
					return $tab_ShareViewModel.$calculateEmbedSize(sizing, $tab_ShareViewModel.$automaticVizDesktopAspectRatio);
				}, function(sizing1) {
					return '';
				});
				sizingAsync = getSizing;
			}
			return sizingAsync.pipe(ss.mkdel(this, function(sizingJs) {
				return this.$buildFinalEmbedCode(scriptLocation, noscriptMarkup, divId, sizingJs);
			}), function(sizingJs1) {
				return '';
			});
		},
		$buildNoScriptMarkup: function ShareViewModel$BuildNoScriptMarkup(staticImageUrl) {
			var noscriptMarkup = '';
			if (!tab.MiscUtil.isNullOrEmpty$3(staticImageUrl)) {
				var esc = tab.EscapingUtil.escapeHtml;
				var hrefTarget = ss.coalesce(this.$getPrimaryContentUrl(), '#');
				noscriptMarkup = "<noscript><a href='" + esc(hrefTarget) + "'>" + "<img alt='" + esc(tsConfig.embeddedTitle) + " ' src='" + esc(staticImageUrl) + "' style='border: none' /></a></noscript>";
			}
			return noscriptMarkup;
		},
		$buildFinalEmbedCode: function ShareViewModel$BuildFinalEmbedCode(scriptLocation, noscriptMarkup, divId, sizingJs) {
			var embedCodeTemplate = "\n                <script type='text/javascript'>\n                    var divElement = document.getElementById('{0}');\n                    var vizElement = divElement.getElementsByTagName('object')[0];\n                    {1}\n                    var scriptElement = document.createElement('script');\n                    scriptElement.src = '{2}';\n                    vizElement.parentNode.insertBefore(scriptElement, vizElement);\n                </script>";
			var apiInvocationJs = ss.formatString(embedCodeTemplate, divId, sizingJs, scriptLocation);
			var baseLocation = window.location;
			var objectHtml = this.$getVizObjectHtml(baseLocation, this.$getStaticImageUrl(), '');
			var placeholderMarkup = ss.formatString("<div class='tableauPlaceholder' id='{0}' style='position: relative'>{1}{2}</div>", divId, noscriptMarkup, objectHtml);
			return placeholderMarkup + apiInvocationJs;
		},
		generateEmbedCode: function ShareViewModel$GenerateEmbedCode() {
			if ($tab_ToolbarViewModel.get_$isPublic()) {
				return this.generateApiBasedEmbedCode();
			}
			var result = $.Deferred();
			var embedCode = this.generateEmbedCodeForServerAndOnline();
			return result.resolve(embedCode).promise();
		},
		generateEmbedCodeForServerAndOnline: function ShareViewModel$GenerateEmbedCodeForServerAndOnline() {
			var baseLocation = window.location;
			var esc = tab.EscapingUtil.escapeHtml;
			var blog_uri = this.$getPrimaryContentUrl();
			var title = tsConfig.embeddedTitle;
			var static_image = this.$getStaticImageUrl();
			var size = this.$calculateEmbedSize();
			var scrstr = $tab_ShareViewModel.$getV1ScriptTag(baseLocation);
			var dimstr = "width='" + size.w + "' height='" + size.h + "'";
			var objstr = this.$getVizObjectHtml(baseLocation, static_image, dimstr);
			var lnktar = ss.coalesce(blog_uri, '#');
			var imgstr = '';
			if (!tab.MiscUtil.isNullOrEmpty$3(static_image)) {
				imgstr = "<noscript><a href='" + esc(lnktar) + "'>" + "<img alt='" + esc(title) + " ' src='" + esc(static_image) + "' style='border: none' /></a></noscript>";
			}
			var placeholder_str = ss.formatString("<div class='tableauPlaceholder' style='width: {0}px; height: {1}px;'>{2}{3}</div>", size.w, size.h, imgstr, objstr);
			return scrstr + placeholder_str;
		},
		$getVizObjectHtml: function ShareViewModel$GetVizObjectHtml(baseLocation, static_image, dimstr) {
			var search = tabBootstrap.ViewerBootstrap.get_instance().location.search;
			var controller_id = tsConfig.repositoryUrl;
			var site_root = tsConfig.site_root;
			var esc = tab.EscapingUtil.escapeHtml;
			var objstr = "<object class='tableauViz' " + dimstr + " style='display:none;'>";
			var ignoreParams = ss.arrayClone($tab_ShareViewModel.$defaultKnownOptionsShareIgnore);
			ignoreParams.push('embed');
			ignoreParams.push('show_tabs');
			ignoreParams.push('loadOrderID');
			var protocol = (tsConfig.forceHttpsForPublicEmbed ? 'https:' : baseLocation.protocol);
			objstr += "<param name='host_url' value='" + esc(encodeURIComponent(protocol + '//' + baseLocation.host + '/')) + "' /> ";
			ignoreParams.push('host_url');
			objstr += "<param name='embed_code_version' value='" + this.embedCodeVersion + "' /> ";
			ignoreParams.push('embed_code_version');
			if (!this.get_allowSharingDifferentViews()) {
				objstr += "<param name='site_root' value='" + esc(site_root) + "' />";
				objstr += "<param name='name' value='" + esc(controller_id) + "' />";
				ignoreParams.push('site_root');
				ignoreParams.push('name');
				objstr += "<param name='tabs' value='" + (tabBootstrap.VizLayoutConstants.get_shouldShowTabs() ? 'yes' : 'no') + "' />";
				ignoreParams.push('tabs');
			}
			else {
				var noParamsLink = this.generateShareBaseUrl();
				objstr += "<param name='path' value='" + esc(ss.replaceAllString(noParamsLink, protocol + '//' + baseLocation.hostname + '/', '')) + "' /> ";
				ignoreParams.push('path');
			}
			objstr += "<param name='toolbar' value='" + (tsConfig.toolbarvis ? 'yes' : 'no') + "' />";
			ignoreParams.push('toolbar');
			if ($tab_ToolbarViewModel.get_$isPublic()) {
				if (!tab.MiscUtil.isNullOrEmpty$3(static_image)) {
					var noRssStaticImage = ss.replaceAllString(static_image, '_rss.png', '.png');
					objstr += "<param name='static_image' value='" + esc(noRssStaticImage) + "' /> ";
				}
				objstr += "<param name='animate_transition' value='yes' />";
				objstr += "<param name='display_static_image' value='yes' />";
				objstr += "<param name='display_spinner' value='yes' />";
				objstr += "<param name='display_overlay' value='yes' />";
				objstr += "<param name='display_count' value='yes' />";
				ignoreParams.push('animate_transition');
				ignoreParams.push('display_static_image');
				ignoreParams.push('display_spinner');
				ignoreParams.push('display_overlay');
				ignoreParams.push('display_count');
			}
			if (search.length > 0) {
				var vizargs = search.substr(1).split('&');
				for (var i = 0; i < vizargs.length; i++) {
					var args = vizargs[i].match(new RegExp('^(:|%3A)([^=]+)=(.+)'));
					var name;
					var value;
					if (ss.isValue(args) && args.length === 4) {
						name = args[2];
						value = args[3];
					}
					else {
						name = 'filter';
						value = vizargs[i];
					}
					if (!tab.MiscUtil.isNullOrEmpty$3(name) && !ss.contains(ignoreParams, name)) {
						objstr += "<param name='" + esc(name) + "' value='" + esc(value) + "' />";
					}
				}
			}
			objstr += '</object>';
			return objstr;
		},
		onDialogHidden: function ShareViewModel$OnDialogHidden() {
		},
		doSendEmailAction: function ShareViewModel$DoSendEmailAction() {
			$tab_Social.mailTo(this.generateShareUrl(), tsConfig.shareDescription);
		},
		doFacebookShareAction: function ShareViewModel$DoFacebookShareAction() {
			$tab_Social.facebookPopup(tsConfig.facebookAppID, this.generateShareUrl(), this.$getFacebookThumbnailUrl(), tsConfig.shareDescription, tsConfig.facebookDescription, $tab_ShareViewModel.$getFacebookRedirectUri());
		},
		doTwitterShareAction: function ShareViewModel$DoTwitterShareAction() {
			$tab_Social.twitterPopup(this.generateShareUrl(), tsConfig.shareDescription);
		},
		$getStaticImageUrl: function ShareViewModel$GetStaticImageUrl() {
			var xhrGuid = tab.XhrUtil.guid;
			var staticImageUrl = tsConfig.staticImage;
			if (!ss.isValue(staticImageUrl)) {
				return '';
			}
			if (!this.get_shouldShareOriginalView() && this.get_allowSharingDifferentViews() && ss.isValue(xhrGuid)) {
				var base_endIdx = staticImageUrl.indexOf('/images/') + 8;
				var static_image_base = staticImageUrl.substr(0, base_endIdx);
				staticImageUrl = static_image_base + xhrGuid.substr(0, 2) + '/' + xhrGuid + '/1_rss.png';
			}
			if (tsConfig.forceHttpsForPublicEmbed && !ss.startsWithString(staticImageUrl, 'https')) {
				staticImageUrl.replace('http', 'https');
			}
			return staticImageUrl;
		},
		$getPrimaryContentUrl: function ShareViewModel$GetPrimaryContentUrl() {
			if (!ss.isNullOrEmptyString(tsConfig.primaryContentUrl)) {
				return tsConfig.primaryContentUrl;
			}
			if (ss.referenceEquals(window.self, window.top)) {
				return null;
			}
			var embeddingUri = tableau.util.parseUri(document.referrer);
			if (!ss.isValue(embeddingUri) || ss.isValue(embeddingUri['hostname']) && ss.referenceEquals(embeddingUri['hostname'], window.location.hostname)) {
				return null;
			}
			return document.referrer;
		},
		$calculateEmbedSize: function ShareViewModel$CalculateEmbedSize() {
			var width = tab.ApplicationModel.get_instance().get_workbook().get_outerDashboardSize().w;
			var height = tab.ApplicationModel.get_instance().get_workbook().get_outerDashboardSize().h;
			height += $tab_ShareViewModel.$getAddedHeightForToolbarAndTabs();
			return { w: width, h: height };
		},
		$getFacebookThumbnailUrl: function ShareViewModel$GetFacebookThumbnailUrl() {
			var xhrGuid = tab.XhrUtil.guid;
			if (!this.get_shouldShareOriginalView() && this.get_allowSharingDifferentViews() && ss.isValue(xhrGuid)) {
				var staticImageUrl = this.$getStaticImageUrl();
				var arr = staticImageUrl.split(String.fromCharCode(47));
				arr[arr.length - 1] = 'thumb.png';
				var thumbImageUrl = arr.join('/');
				thumbImageUrl += '?vizqlid=' + tab.CommandController.get().legacySession.get_id();
				return thumbImageUrl;
			}
			return tsConfig.baseViewThumbLink;
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object]), spiff.IDialogContent]);
	ss.initClass($tab_ShownEventArgs, $asm, {}, ss.EventArgs);
	ss.initClass($tab_ShownTooltipEventArgs, $asm, {}, $tab_ShownEventArgs);
	ss.initClass($tab_SimpleTextContentDialog, $asm, {
		render: function SimpleTextContentDialog$Render() {
			var dialogProps = this.buildCommonDialogProps();
			var el = React.createElement(SharedWidgets.DialogWidget, dialogProps);
			return el;
		},
		closeDialog: function SimpleTextContentDialog$CloseDialog() {
			_.defer(this.props.onDialogCloseRequested);
		},
		buildCommonDialogProps: function SimpleTextContentDialog$BuildCommonDialogProps() {
			var sharedDialogProps = { testId: 'Dialog-Provider', isModal: true, title: this.props.title, showCloseButton: true, type: 0, positioningBehavior: 0, dialogStyle: { maxWidth: $tab_SimpleTextContentDialog.maxDialogWidth }, dialogWidth: this.props.dialogWidth, onCloseRequest: ss.mkdel(this, function() {
				this.closeDialog();
			}), zIndex: tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex };
			var children = [];
			var domElement = spiff.DOMElements.div({ children: this.$formatAndSanitizeInput(this.props.content), className: spiff.Widget.selectableNodeClass, key: '0' });
			children.push(domElement);
			if (!ss.isNullOrEmptyString(this.props.detailsContent)) {
				var detailProps = { isExpanded: this.state.detailsAreExpanded, onExpand: ss.mkdel(this, function() {
					var $t1 = new $tab_SimpleTextContentDialogState();
					$t1.detailsAreExpanded = true;
					this.setState($t1);
				}), onCollapse: ss.mkdel(this, function() {
					var $t2 = new $tab_SimpleTextContentDialogState();
					$t2.detailsAreExpanded = false;
					this.setState($t2);
				}), direction: 1, testId: 'Dialog-Provider-Details' };
				var detailsLabel = (this.state.detailsAreExpanded ? this.props.hideDetailsLabel : this.props.showDetailsLabel);
				detailProps.label = (ss.isValue(detailsLabel) ? detailsLabel : '');
				var detailsElement = React.createElement(SharedWidgets.ExpandoWidget, detailProps, [spiff.DOMElements.div({ children: this.$formatAndSanitizeInput(this.props.detailsContent), className: spiff.Widget.selectableNodeClass, key: '1' })]);
				children.push(detailsElement);
			}
			if (ss.isValue(this.props.additionalLinks)) {
				var keyIndex = 2;
				for (var $t3 = 0; $t3 < this.props.additionalLinks.length; $t3++) {
					var link = this.props.additionalLinks[$t3];
					children.push(spiff.DOMElements.p({}, spiff.DOMElements.a({ href: link.url, target: '_blank', children: link.displayText, key: keyIndex })));
					keyIndex++;
				}
			}
			sharedDialogProps.children = children;
			this.$buildFooterContent(sharedDialogProps);
			return sharedDialogProps;
		},
		$formatAndSanitizeInput: function SimpleTextContentDialog$FormatAndSanitizeInput(content) {
			if (ss.isNullOrEmptyString(content)) {
				return null;
			}
			var LineBreak = '<br/>';
			content = ss.replaceAllString(content, '<br>', LineBreak);
			content = ss.replaceAllString(content, '\n', LineBreak);
			var lines = content.split(LineBreak);
			var result = [];
			var areaElement = $tab_SimpleTextContentDialog.textArea.value();
			for (var $t1 = 0; $t1 < lines.length; $t1++) {
				var line = lines[$t1];
				areaElement.innerHTML = line;
				var p = spiff.DOMElements.p({ children: areaElement.textContent, key: line });
				result.push(p);
			}
			return result;
		},
		$buildFooterContent: function SimpleTextContentDialog$BuildFooterContent(sharedDialogProps) {
			var footerButtonProps = { buttons: [], testId: 'DialogButtons' };
			if (ss.isValue(this.props.dialogButtons)) {
				for (var $t1 = 0; $t1 < this.props.dialogButtons.length; $t1++) {
					var dialogButton = this.props.dialogButtons[$t1];
					this.$addSingleButton(dialogButton, footerButtonProps);
				}
			}
			if (footerButtonProps.buttons.length > 0) {
				var footer = React.createElement(SharedWidgets.DialogFooterButtonsWidget, footerButtonProps);
				sharedDialogProps.footerContent = footer;
				sharedDialogProps.showFooter = true;
			}
		},
		$addSingleButton: function SimpleTextContentDialog$AddSingleButton(dialogButton, footerButtonProps) {
			ss.Debug.assert(!ss.isNullOrEmptyString(dialogButton.buttonText), 'No Dialog Button Text');
			var btnProp = { handleClick: ss.mkdel(this, function(e) {
				if (!ss.staticEquals(dialogButton.buttonClickHandler, null)) {
					dialogButton.buttonClickHandler();
				}
				this.closeDialog();
			}), buttonType: dialogButton.buttonType, testId: dialogButton.testId, children: dialogButton.buttonText };
			footerButtonProps.buttons.push(btnProp);
		}
	}, React.Component);
	ss.initClass($tab_SimpleTextContentDialogState, $asm, {});
	ss.initClass($tab_SmoothTooltipBehavior, $asm, {
		add_onMouseStop: function SmoothTooltipBehavior$add_OnMouseStop(value) {
			this.$1$OnMouseStopField = ss.delegateCombine(this.$1$OnMouseStopField, value);
		},
		remove_onMouseStop: function SmoothTooltipBehavior$remove_OnMouseStop(value) {
			this.$1$OnMouseStopField = ss.delegateRemove(this.$1$OnMouseStopField, value);
		},
		attach: function SmoothTooltipBehavior$Attach() {
			this.$tooltip.add_showed(ss.mkdel(this, this.$onShowed));
			this.$tooltip.add_closed(ss.mkdel(this, this.$onClose));
			this.$tooltip.add_disposed(ss.mkdel(this, this.$tooltipDisposed));
		},
		detach: function SmoothTooltipBehavior$Detach() {
			this.$disposables.dispose();
			if (ss.isValue(this.$tooltip)) {
				this.$tooltip.remove_showed(ss.mkdel(this, this.$onShowed));
				this.$tooltip.remove_closed(ss.mkdel(this, this.$onClose));
				this.$tooltip.remove_disposed(ss.mkdel(this, this.$tooltipDisposed));
			}
		},
		dispose: function SmoothTooltipBehavior$Dispose() {
			this.detach();
		},
		disposeTooltip: function SmoothTooltipBehavior$DisposeTooltip() {
			this.dispose();
		},
		shownTooltipIsSticky: function SmoothTooltipBehavior$ShownTooltipIsSticky() {
			return false;
		},
		isHoverAllowed: function SmoothTooltipBehavior$IsHoverAllowed(pageCoords) {
			return true;
		},
		shouldShowCommandButtons: function SmoothTooltipBehavior$ShouldShowCommandButtons() {
			return false;
		},
		handleUbertipMenuToggle: function SmoothTooltipBehavior$HandleUbertipMenuToggle(areMenuItemsVisible) {
		},
		handleUbertipMenuClose: function SmoothTooltipBehavior$HandleUbertipMenuClose() {
		},
		hoverOverObject: function SmoothTooltipBehavior$HoverOverObject(pageCoords, isSelected, isEmpty, isSameObject) {
			if (isEmpty) {
				this.$tooltip.close();
			}
			else if (ss.isValue(isSameObject) && isSameObject && this.$tooltip.get_isShown()) {
				this.$tooltip.move(pageCoords);
			}
			else {
				this.showTooltip(pageCoords);
			}
		},
		hoverOverWhitespace: function SmoothTooltipBehavior$HoverOverWhitespace(pageCoords) {
			if (this.$tooltip.get_isShown()) {
				this.$tooltip.close();
			}
		},
		multiSelectComplete: function SmoothTooltipBehavior$MultiSelectComplete(pageAnchorPoint) {
			this.showTooltip(pageAnchorPoint);
		},
		singleSelectComplete: function SmoothTooltipBehavior$SingleSelectComplete(pageCoords) {
			this.showTooltip(pageCoords);
		},
		selectionMoved: function SmoothTooltipBehavior$SelectionMoved(pageCoords) {
		},
		repositionWithinRegion: function SmoothTooltipBehavior$RepositionWithinRegion(pageRegion) {
		},
		onPanningOrDragging: function SmoothTooltipBehavior$OnPanningOrDragging() {
			if (this.$tooltip.get_isShown()) {
				this.$tooltip.close();
			}
		},
		onScroll: function SmoothTooltipBehavior$OnScroll() {
			if (this.$tooltip.get_isShown()) {
				this.$tooltip.close();
			}
		},
		mouseDown: function SmoothTooltipBehavior$MouseDown(pageCoords, objectUnderMouse) {
		},
		showTooltip: function SmoothTooltipBehavior$ShowTooltip(pageCoords) {
			tab.Log.get(this).debug('ShowTooltip: position=%o', [pageCoords]);
			if (EventUtils.DragDropManager.get_isDragging()) {
				return;
			}
			if (this.$tooltip.get_isShown() && tab.PointUtil.equals(this.$tooltip.get_location(), pageCoords)) {
				return;
			}
			this.$tooltip.show(this.$tooltip.get_body().children()[0], pageCoords);
		},
		$onShowed: function SmoothTooltipBehavior$OnShowed() {
			tab.Log.get(this).debug('OnShowed', []);
			this.$cancelTimeouts();
			this.$detectMouseStop({ x: this.$tooltip.get_calculatedShownArgs().origX, y: this.$tooltip.get_calculatedShownArgs().origY });
			this.$timeTooltipShown = new Date();
		},
		$onClose: function SmoothTooltipBehavior$OnClose() {
			this.$tooltip.element.off($tab_SmoothTooltipBehavior.$bindingNamespace);
			this.$timeTooltipShown = null;
			this.$cancelTimeouts();
			tab.Log.get(this).debug('OnClose', []);
		},
		onMouseMove: function SmoothTooltipBehavior$OnMouseMove(e) {
			var te = $.fn.getTouchEvent(e);
			var ne = EventUtils.NormalizedEvent.Create(te, e.target, null);
			var touch = ne.touches[0];
			var prevLocation = this.$tooltip.get_lastLocation() || { x: 0, y: 0 };
			var location = { x: touch.pageX, y: touch.pageY };
			this.$tooltip.set_lastLocation(location);
			this.$tooltip.move(location);
			var moveDistance = tab.PointUtil.distance(prevLocation, this.$tooltip.get_lastLocation());
			if (moveDistance > 0) {
				this.$mouseStopTimeoutHandle = tab.MiscUtil.clearTimeout(this.$mouseStopTimeoutHandle);
				this.$detectMouseStop(location);
				if (!tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
					var leftOffset = ss.Int32.trunc(tab.DomUtil.getPageOffset$1($(e.target)).left);
					var topOffset = ss.Int32.trunc(tab.DomUtil.getPageOffset$1($(e.target)).top);
					if (!ss.isValue(this.serverMarkBounds) || !tab.RectXYUtil.inRect(this.serverMarkBounds, { x: touch.pageX - leftOffset, y: touch.pageY - topOffset })) {
						this.$tooltip.close();
					}
				}
			}
		},
		$detectMouseStop: function SmoothTooltipBehavior$DetectMouseStop(stopLocation) {
			this.$mouseStopTimeoutHandle = tab.MiscUtil.clearTimeout(this.$mouseStopTimeoutHandle);
			this.$mouseStopTimeoutHandle = window.setTimeout(ss.mkdel(this, function() {
				if (ss.isValue(this.$1$OnMouseStopField)) {
					this.$1$OnMouseStopField(stopLocation);
				}
			}), this.$mouseStopDetectionTime);
		},
		$tooltipDisposed: function SmoothTooltipBehavior$TooltipDisposed(sender, e) {
			this.dispose();
		},
		$cancelTimeouts: function SmoothTooltipBehavior$CancelTimeouts() {
			this.$mouseStopTimeoutHandle = tab.MiscUtil.clearTimeout(this.$mouseStopTimeoutHandle);
		}
	}, null, [$tab_ITooltipBehavior, ss.IDisposable]);
	ss.initClass($tab_Social, $asm, {});
	ss.initClass($tab_SubscribeComponent, $asm, {
		componentWillReceiveProps: function SubscribeComponent$ComponentWillReceiveProps(nextProps) {
			if (ss.isValue(nextProps.selfServiceSchedulesModule) && ss.isNullOrUndefined(this.state.recurrenceModel)) {
				this.setState({ recurrenceModel: nextProps.selfServiceSchedulesModule.get_defaultRecurrence() });
			}
		},
		handleIncludeSelection: function SubscribeComponent$HandleIncludeSelection(newSelection) {
			this.setState(function(prevState, prevProps) {
				return _.extend({}, prevState, { includeValue: newSelection });
			});
		},
		handleScheduleSelection: function SubscribeComponent$HandleScheduleSelection(newSelection) {
			this.setState(function(prevState, prevProps) {
				return _.extend({}, prevState, { scheduleValue: newSelection });
			});
		},
		handleFormatSelection: function SubscribeComponent$HandleFormatSelection(newSelection) {
			this.setState(function(prevState, prevProps) {
				return _.extend({}, prevState, { formatValue: newSelection });
			});
		},
		$handleUsersChanged: function SubscribeComponent$HandleUsersChanged(users) {
			var name = ((users.length === 0) ? '' : users[0].friendlyName);
			this.setState(ss.mkdel(this, function(prevState, prevProps) {
				return _.extend({}, prevState, { mode: 0, users: users, usersText: this.$getSubscribersText(users.length, name, tab.Strings.ToolbarSubscribeAddUsersPlaceholder) });
			}));
		},
		$handleGroupsChanged: function SubscribeComponent$HandleGroupsChanged(groups) {
			var name = ((groups.length === 0) ? '' : groups[0].name);
			this.setState(ss.mkdel(this, function(prevState, prevProps) {
				return _.extend({}, prevState, { mode: 0, groups: groups, groupsText: this.$getSubscribersText(groups.length, name, tab.Strings.ToolbarSubscribeAddGroupsPlaceholder) });
			}));
		},
		$getSubscribersText: function SubscribeComponent$GetSubscribersText(numSubscribers, firstSubscriber, placeholderText) {
			var addSubscribersText = new ss.StringBuilder();
			if (numSubscribers > 0) {
				addSubscribersText.append(firstSubscriber);
				if (numSubscribers > 1) {
					addSubscribersText.append(' + ');
					addSubscribersText.append(numSubscribers - 1);
				}
			}
			else {
				addSubscribersText.append(placeholderText);
			}
			return addSubscribersText.toString();
		},
		$handleSendWhenDataPresentChange: function SubscribeComponent$HandleSendWhenDataPresentChange(isChecked) {
			this.setState(function(prevState, prevProps) {
				return _.extend({}, prevState, { sendOnlyWhenDataPresent: isChecked });
			});
		},
		isSubscribeEnabled: function SubscribeComponent$IsSubscribeEnabled() {
			if (!this.props.isSelfServiceSchedulesEnabled && (ss.isNullOrUndefined(this.props.schedules) || this.props.schedules.length === 0)) {
				return false;
			}
			if (ss.isNullOrUndefined(this.state.subject) || this.state.subject.trim().length === 0) {
				return false;
			}
			if (ss.isNullOrEmptyString(this.state.email) || !this.props.emailIsValid(this.state.email)) {
				return false;
			}
			if (tsConfig.allow_subscribe_others) {
				return this.state.users.length > 0 || this.state.groups.length > 0 || this.state.selfSubscribe;
			}
			else {
				return true;
			}
		},
		$onSubscribeClicked: function SubscribeComponent$OnSubscribeClicked() {
			if (ss.isNullOrEmptyString(this.props.email)) {
				var failure = function(errorCode) {
				};
				var successAndRemember = ss.mkdel(this, function() {
					this.props.setEmail(this.state.email);
					this.$subscribeUsers();
				});
				tab.WorkgroupServerCommands.setUserEmail(this.state.email, successAndRemember, failure);
			}
			else {
				this.$subscribeUsers();
			}
		},
		$subscribeUsers: function SubscribeComponent$SubscribeUsers() {
			var subscriptionMessage = (!tab.MiscUtil.isNullOrEmpty$3(this.state.message) ? this.state.message : null);
			var subscriptionsParams = new $tab_CreateSubscriptionsCheckboxOptions(this.state.selfSubscribe, this.state.sendOnlyWhenDataPresent);
			var subscriptionFormat = new $tab_CreateSubscriptionFormat(ss.referenceEquals(this.state.formatValue, tab.Strings.ToolbarSubscribeToImage) || ss.referenceEquals(this.state.formatValue, tab.Strings.ToolbarSubscribeToImageAndPdf), ss.referenceEquals(this.state.formatValue, tab.Strings.ToolbarSubscribeToPdf) || ss.referenceEquals(this.state.formatValue, tab.Strings.ToolbarSubscribeToImageAndPdf));
			if (this.props.isSelfServiceSchedulesEnabled) {
				this.props.createSubscriptionsWithSelfServiceSchedule(this.state.subject, this.state.includeValue === '1', this.state.recurrenceModel, subscriptionMessage, this.state.users, this.state.groups, subscriptionsParams, subscriptionFormat);
			}
			else {
				this.props.createSubscriptions(this.state.subject, this.state.includeValue === '1', parseInt(this.state.scheduleValue), subscriptionMessage, this.state.users, this.state.groups, subscriptionsParams, subscriptionFormat);
			}
		},
		render: function SubscribeComponent$Render() {
			return spiff.DOMElements.div({ className: 'tab-subscribeView', style: { padding: '0px' } }, this.$renderContent());
		},
		$renderContent: function SubscribeComponent$RenderContent() {
			switch (this.state.mode) {
				case 0: {
					return this.$renderMain();
				}
				case 1: {
					return this.$renderMessage();
				}
				case 2: {
					return this.$renderAddSubscribers(true);
				}
				case 3: {
					return this.$renderAddSubscribers(false);
				}
				default: {
					return this.$renderMain();
				}
			}
		},
		$renderMain: function SubscribeComponent$RenderMain() {
			return spiff.DOMElements.div({ className: '' }, (tsConfig.allow_subscribe_others ? this.$renderUsersTextField() : null), (tsConfig.allow_subscribe_others ? this.$renderGroupsTextField() : null), this.$renderIncludeDropdown(), (this.props.isFormatDropdownEnabled ? this.$renderFormatDropdown() : null), this.$renderScheduleContainer(), (ss.isNullOrEmptyString(this.props.email) ? this.renderEmail() : null), this.$renderSubjectTextField(), this.$renderMessageTextField(), (this.props.sendOnlyWhenDataPresentCheckboxVisible ? this.$renderEmptyViewCheckbox() : null), (this.props.isSelfSubscribeCheckboxEnabled ? this.$renderSelfSubscribeCheckbox() : null), (tsConfig.is_mobile ? null : this.$renderManageLink()), this.$renderButtons());
		},
		$renderSelfSubscribeCheckbox: function SubscribeComponent$RenderSelfSubscribeCheckbox() {
			return React.createElement(SharedWidgets.CheckBoxWithLabelWidget, { checked: this.state.selfSubscribe, label: tab.Strings.SubscribeSelf, handleChange: ss.mkdel(this, function(check) {
				this.setState({ selfSubscribe: check });
			}), testId: 'self-subscribe-checkbox', removeLeftMargin: true, containerStyle: { marginTop: SharedWidgets.TabStyles.Spacing.DefaultSpace, marginBottom: SharedWidgets.TabStyles.Spacing.MediumSpace } });
		},
		$renderFormatDropdown: function SubscribeComponent$RenderFormatDropdown() {
			var menuData = [{ value: tab.Strings.ToolbarSubscribeToImage, displayValue: tab.Strings.ToolbarSubscribeToImage }, { value: tab.Strings.ToolbarSubscribeToPdf, displayValue: tab.Strings.ToolbarSubscribeToPdf }, { value: tab.Strings.ToolbarSubscribeToImageAndPdf, displayValue: tab.Strings.ToolbarSubscribeToImageAndPdf }];
			var handleSelection = ss.mkdel(this, this.handleFormatSelection);
			var dropdown = React.createElement(SharedWidgets.DropdownWidget, { dropdownType: 1, label: tab.Strings.ToolbarSubscribeFormat, menuItemInfos: ss.arrayClone(menuData), onSelect: handleSelection, selectedValue: this.state.formatValue, testId: 'subscribe-format-dropdown' });
			return spiff.DOMElements.div({ className: 'tab-subscribeFormat dropdown', style: { marginTop: SharedWidgets.TabStyles.Spacing.DefaultSpace, marginBottom: SharedWidgets.TabStyles.Spacing.MediumSpace } }, dropdown);
		},
		$renderScheduleContainer: function SubscribeComponent$RenderScheduleContainer() {
			if (this.props.isSelfServiceSchedulesEnabled) {
				if (ss.isNullOrUndefined(this.props.selfServiceSchedulesModule) || ss.isNullOrUndefined(this.state.recurrenceModel)) {
					return null;
				}
				var labelProps = { testId: 'subscription-schedule-label', style: { fontSize: SharedWidgets.TabStyles.Typography.Sizing.Small, lineHeight: '19px' } };
				var label = React.createElement(SharedWidgets.InputLabelWidget, labelProps, tab.Strings.ToolbarSubscribeSchedule);
				var selfServiceSchedulePaneProps = { recurrenceModel: this.state.recurrenceModel };
				var timeZoneDetails = { timeZonesEnabled: tab.FeatureFlags.isEnabled('UserTimeZone'), timeZoneDisplayName: tsConfig.userTimeZoneDisplayName, linkToUserSettings: this.props.userSettingsPageUrl };
				selfServiceSchedulePaneProps.timeZoneDetails = timeZoneDetails;
				selfServiceSchedulePaneProps.recurrenceModelChangedCallback = ss.mkdel(this, function(newRecurrenceModel) {
					this.setState({ recurrenceModel: newRecurrenceModel });
				});
				var dropdown = React.createElement(this.props.selfServiceSchedulesModule.get_selfServiceSchedulePaneComponent(), selfServiceSchedulePaneProps);
				return spiff.DOMElements.div({ className: 'tab-subscribeSchedule dropdown', style: { marginTop: SharedWidgets.TabStyles.Spacing.MediumSpace, marginBottom: SharedWidgets.TabStyles.Spacing.DefaultSpace } }, label, dropdown);
			}
			else {
				var handleSelection = ss.mkdel(this, this.handleScheduleSelection);
				var scrollBuffer = 2;
				var dropdown1 = React.createElement(SharedWidgets.DropdownWidget, { dropdownType: 1, containerStyle: { color: SharedWidgets.TabStyles.Typography.Color.PrimaryLight }, label: tab.Strings.ToolbarSubscribeSchedule, menuItemInfos: this.props.schedules, onSelect: handleSelection, selectedValue: this.state.scheduleValue, testId: 'subscribe-schedule-dropdown', maxHeight: 10 * SharedWidgets.TabStyles.Sizing.ListRowHeight + 2 * SharedWidgets.TabStyles.Spacing.DefaultSpace + scrollBuffer });
				return spiff.DOMElements.div({ className: 'tab-subscribeSchedule dropdown', style: { marginTop: SharedWidgets.TabStyles.Spacing.MediumSpace, marginBottom: SharedWidgets.TabStyles.Spacing.DefaultSpace } }, dropdown1);
			}
		},
		$renderUsersTextField: function SubscribeComponent$RenderUsersTextField() {
			var onClick = ss.mkdel(this, function() {
				this.setState(function(prevState, prevProps) {
					return _.extend({}, prevState, { mode: 2 });
				});
			});
			var usersField = this.$renderClickableTextField(onClick, tab.Strings.ToolbarSubscribeAddUsersLabel, this.state.usersText, 'subscribe-users-input');
			return spiff.DOMElements.div({
				className: 'tab-subscribeUsers',
				onClick: function(e) {
					onClick();
				}
			}, usersField);
		},
		$renderGroupsTextField: function SubscribeComponent$RenderGroupsTextField() {
			var onClick = ss.mkdel(this, function() {
				this.setState(function(prevState, prevProps) {
					return _.extend({}, prevState, { mode: 3 });
				});
			});
			var groupsField = this.$renderClickableTextField(onClick, tab.Strings.ToolbarSubscribeAddGroupsLabel, this.state.groupsText, 'subscribe-groups-input');
			return spiff.DOMElements.div({
				className: 'tab-subscribeGroups',
				onClick: function(e) {
					onClick();
				}
			}, groupsField);
		},
		$renderIncludeDropdown: function SubscribeComponent$RenderIncludeDropdown() {
			var menuData = [{ value: '0', displayValue: tab.Strings.ToolbarSubscribeThisView }, { value: '1', displayValue: tab.Strings.ToolbarSubscribeAllView }];
			var handleSelection = ss.mkdel(this, this.handleIncludeSelection);
			var dropdown = React.createElement(SharedWidgets.DropdownWidget, { dropdownType: 1, label: tab.Strings.ToolbarSubscribeInclude, menuItemInfos: ss.arrayClone(menuData), onSelect: handleSelection, selectedValue: this.state.includeValue, testId: 'subscribe-include-dropdown' });
			return spiff.DOMElements.div({ className: 'tab-subscribeViews dropdown', style: { marginTop: SharedWidgets.TabStyles.Spacing.DefaultSpace, marginBottom: SharedWidgets.TabStyles.Spacing.MediumSpace } }, dropdown);
		},
		renderEmail: function SubscribeComponent$RenderEmail() {
			var emailInput = React.createElement(SharedWidgets.LineTextFieldWidget, {
				handleChange: ss.mkdel(this, function(text) {
					this.setState({ email: text });
				}),
				text: this.state.email,
				maxLength: $tab_SubscribeViewModel.maxSubscriptionEmailLength,
				floatingLabel: tab.Strings.ToolbarSubscribeEmailPlaceholder,
				floatingLabelStyle: { color: SharedWidgets.TabStyles.Typography.Color.Primary, display: 'inline' },
				inputStyle: { color: SharedWidgets.TabStyles.Typography.Color.PrimaryLight },
				testId: 'subscribe-email-input',
				handleEnter: function() {
				}
			});
			return spiff.DOMElements.div({ className: 'tab-subscribeEmail' }, emailInput);
		},
		$renderSubjectTextField: function SubscribeComponent$RenderSubjectTextField() {
			var subjectInput = React.createElement(SharedWidgets.LineTextFieldWidget, {
				handleChange: ss.mkdel(this, function(text) {
					this.setState(function(prevState, prevProps) {
						return _.extend({}, prevState, { subject: text });
					});
				}),
				text: this.state.subject,
				floatingLabel: tab.Strings.ToolbarSubscribeSubjectPlaceholder,
				floatingLabelStyle: { color: SharedWidgets.TabStyles.Typography.Color.Primary, display: 'inline' },
				inputStyle: { color: SharedWidgets.TabStyles.Typography.Color.PrimaryLight },
				testId: 'subscribe-subject-text',
				handleEnter: function() {
				}
			});
			return spiff.DOMElements.div({ className: 'tab-subscribeSubject' }, subjectInput);
		},
		$renderMessageTextField: function SubscribeComponent$RenderMessageTextField() {
			var onClick = ss.mkdel(this, function() {
				this.setState(function(prevState, prevProps) {
					return _.extend({}, prevState, { mode: 1 });
				});
			});
			var messageText = (tab.MiscUtil.isNullOrEmpty$3(this.state.message) ? tab.Strings.ToolbarSubscribeMessagePlaceholder : this.state.message);
			messageText = ss.replaceAllString(messageText, '\n', ' ');
			var messageField = this.$renderClickableTextField(onClick, tab.Strings.ToolbarSubscribeMessageLabel, messageText, 'subscribe-message-input');
			return spiff.DOMElements.div({
				className: 'tab-subscribeMessage',
				onClick: function(e) {
					onClick();
				}
			}, messageField);
		},
		$renderClickableTextField: function SubscribeComponent$RenderClickableTextField(onClick, label, text, testId) {
			return React.createElement(SharedWidgets.LineTextFieldWidget, {
				handleChange: function(t) {
				},
				text: text,
				floatingLabel: label,
				testId: testId,
				readOnly: true,
				hideErrorDiv: true,
				handleEnter: onClick,
				shouldSelectTextOnFocus: false,
				floatingLabelStyle: { color: SharedWidgets.TabStyles.Typography.Color.Primary, display: 'inline' },
				inputStyle: { color: SharedWidgets.TabStyles.Typography.Color.Disabled, fontStyle: 'italic', textOverflow: 'ellipsis' }
			});
		},
		$renderAddSubscribers: function SubscribeComponent$RenderAddSubscribers(isUsers) {
			var $t1 = $tab_AddSubscribersComponentProps.$ctor();
			$t1.users = ss.arrayClone(this.state.users);
			$t1.groups = ss.arrayClone(this.state.groups);
			$t1.isUsers = isUsers;
			$t1.cancelSelection = ss.mkdel(this, function() {
				this.setState(function(prevState, prevProps) {
					return _.extend({}, prevState, { mode: 0 });
				});
			});
			$t1.confirmSelection = function() {
			};
			$t1.confirmUsersSelection = ss.mkdel(this, function(users) {
				this.$handleUsersChanged(users);
			});
			$t1.confirmGroupsSelection = ss.mkdel(this, function(groups) {
				this.$handleGroupsChanged(groups);
			});
			return React.createElement($tab_AddSubscribersComponent, $t1);
		},
		$renderMessage: function SubscribeComponent$RenderMessage() {
			return React.createElement($tab_SubscriptionMessageEditor, { message: this.state.message, onCancelButtonClick: ss.mkdel(this, function() {
				this.setState(function(prevState, prevProps) {
					return _.extend({}, prevState, { mode: 0 });
				});
			}), onDoneButtonClick: ss.mkdel(this, function(message) {
				this.setState(function(prevState1, prevProps1) {
					return _.extend({}, prevState1, { mode: 0, message: message });
				});
			}) });
		},
		$renderEmptyViewCheckbox: function SubscribeComponent$RenderEmptyViewCheckbox() {
			return React.createElement(SharedWidgets.CheckBoxWithLabelWidget, { checked: this.state.sendOnlyWhenDataPresent, label: tab.Strings.ToolbarSubscribeDataPresentCheckbox, handleChange: ss.mkdel(this, this.$handleSendWhenDataPresentChange), testId: 'send-when-data-checkbox', disabled: this.state.includeValue === '1', removeLeftMargin: true, containerStyle: { marginTop: SharedWidgets.TabStyles.Spacing.DefaultSpace, marginBottom: SharedWidgets.TabStyles.Spacing.MediumSpace } });
		},
		$renderManageLink: function SubscribeComponent$RenderManageLink() {
			return spiff.DOMElements.a({ className: 'tab-manageSubscribers', href: this.props.subscriptionsPageUrl, target: '_tab', style: { color: SharedWidgets.TabStyles.Colors.ServerBlue, textDecoration: 'none', marginTop: SharedWidgets.TabStyles.Spacing.DefaultSpace, marginBottom: SharedWidgets.TabStyles.Spacing.MediumSpace }, tabIndex: 0 }, tab.Strings.ManageSubscriptions);
		},
		$renderButtons: function SubscribeComponent$RenderButtons() {
			var disabled = !this.isSubscribeEnabled();
			return spiff.DOMElements.div({ className: 'tabSubscribeButtonContainer' }, React.createElement(SharedWidgets.ButtonWidget, { handleClick: ss.mkdel(this, function(e) {
				this.props.onCancel();
			}), buttonType: 3, testId: 'subscription-dialog-cancel', children: tab.Strings.SubscribeCancel, style: { marginRight: 12 } }), React.createElement(SharedWidgets.ButtonWidget, { handleClick: ss.mkdel(this, function(e1) {
				this.$onSubscribeClicked();
			}), buttonType: 2, testId: 'subscription-dialog-subscribe', children: tab.Strings.ToolbarSubscribeSubmitButton, disabled: disabled }));
		}
	}, React.Component);
	ss.initClass($tab_SubscribeComponentContainer, $asm, {
		fetchAsyncDependencies: function SubscribeComponentContainer$FetchAsyncDependencies() {
			return (this.props.isSelfServiceSchedulesEnabled ? tab.ModuleManager.load(tab.ISelfServiceSchedulesModule).call(null, []) : $.when.apply(null, null));
		},
		renderWhileWaiting: function SubscribeComponentContainer$RenderWhileWaiting() {
			return this.$renderWrappedComponent(this.props);
		},
		renderWithDependencies: function SubscribeComponentContainer$RenderWithDependencies(deps) {
			var newProps = this.props;
			if (ss.isValue(deps)) {
				newProps = _.clone(this.props);
				newProps.selfServiceSchedulesModule = deps;
			}
			return this.$renderWrappedComponent(newProps);
		},
		$renderWrappedComponent: function SubscribeComponentContainer$RenderWrappedComponent(p) {
			return React.createElement($tab_SubscribeComponent, p);
		}
	}, ss.makeGenericType($tab_PureComponentWithAsyncDependencies$3, [tab.ISelfServiceSchedulesModule, $tab_SubscribeProps, Object]));
	ss.initClass($tab_SubscribeProps, $asm, {});
	ss.initClass($tab_SubscribeViewModel, $asm, {
		add_schedulesChanged: function SubscribeViewModel$add_SchedulesChanged(value) {
			this.$3$SchedulesChangedField = ss.delegateCombine(this.$3$SchedulesChangedField, value);
		},
		remove_schedulesChanged: function SubscribeViewModel$remove_SchedulesChanged(value) {
			this.$3$SchedulesChangedField = ss.delegateRemove(this.$3$SchedulesChangedField, value);
		},
		add_subscribeSuccess: function SubscribeViewModel$add_SubscribeSuccess(value) {
			this.$3$SubscribeSuccessField = ss.delegateCombine(this.$3$SubscribeSuccessField, value);
		},
		remove_subscribeSuccess: function SubscribeViewModel$remove_SubscribeSuccess(value) {
			this.$3$SubscribeSuccessField = ss.delegateRemove(this.$3$SubscribeSuccessField, value);
		},
		add_subscribeCancel: function SubscribeViewModel$add_SubscribeCancel(value) {
			this.$3$SubscribeCancelField = ss.delegateCombine(this.$3$SubscribeCancelField, value);
		},
		remove_subscribeCancel: function SubscribeViewModel$remove_SubscribeCancel(value) {
			this.$3$SubscribeCancelField = ss.delegateRemove(this.$3$SubscribeCancelField, value);
		},
		add_usersChanged: function SubscribeViewModel$add_UsersChanged(value) {
			this.$3$UsersChangedField = ss.delegateCombine(this.$3$UsersChangedField, value);
		},
		remove_usersChanged: function SubscribeViewModel$remove_UsersChanged(value) {
			this.$3$UsersChangedField = ss.delegateRemove(this.$3$UsersChangedField, value);
		},
		add_groupsChanged: function SubscribeViewModel$add_GroupsChanged(value) {
			this.$3$GroupsChangedField = ss.delegateCombine(this.$3$GroupsChangedField, value);
		},
		remove_groupsChanged: function SubscribeViewModel$remove_GroupsChanged(value) {
			this.$3$GroupsChangedField = ss.delegateRemove(this.$3$GroupsChangedField, value);
		},
		add_sendOnlyWhenDataPresentCheckboxStateChanged: function SubscribeViewModel$add_SendOnlyWhenDataPresentCheckboxStateChanged(value) {
			this.$3$SendOnlyWhenDataPresentCheckboxStateChangedField = ss.delegateCombine(this.$3$SendOnlyWhenDataPresentCheckboxStateChangedField, value);
		},
		remove_sendOnlyWhenDataPresentCheckboxStateChanged: function SubscribeViewModel$remove_SendOnlyWhenDataPresentCheckboxStateChanged(value) {
			this.$3$SendOnlyWhenDataPresentCheckboxStateChangedField = ss.delegateRemove(this.$3$SendOnlyWhenDataPresentCheckboxStateChangedField, value);
		},
		add_addSubscribersPopupStateChanged: function SubscribeViewModel$add_AddSubscribersPopupStateChanged(value) {
			this.$3$AddSubscribersPopupStateChangedField = ss.delegateCombine(this.$3$AddSubscribersPopupStateChangedField, value);
		},
		remove_addSubscribersPopupStateChanged: function SubscribeViewModel$remove_AddSubscribersPopupStateChanged(value) {
			this.$3$AddSubscribersPopupStateChangedField = ss.delegateRemove(this.$3$AddSubscribersPopupStateChangedField, value);
		},
		add_hideDialogRequested: function SubscribeViewModel$add_HideDialogRequested(value) {
			this.add_subscribeSuccess(value);
			this.add_subscribeCancel(value);
		},
		remove_hideDialogRequested: function SubscribeViewModel$remove_HideDialogRequested(value) {
			this.remove_subscribeSuccess(value);
			this.remove_subscribeCancel(value);
		},
		add_dialogHidden: function SubscribeViewModel$add_DialogHidden(value) {
			this.$3$DialogHiddenField = ss.delegateCombine(this.$3$DialogHiddenField, value);
		},
		remove_dialogHidden: function SubscribeViewModel$remove_DialogHidden(value) {
			this.$3$DialogHiddenField = ss.delegateRemove(this.$3$DialogHiddenField, value);
		},
		add_modeChanged: function SubscribeViewModel$add_ModeChanged(value) {
			this.$3$ModeChangedField = ss.delegateCombine(this.$3$ModeChangedField, value);
		},
		remove_modeChanged: function SubscribeViewModel$remove_ModeChanged(value) {
			this.$3$ModeChangedField = ss.delegateRemove(this.$3$ModeChangedField, value);
		},
		get_mode: function SubscribeViewModel$get_Mode() {
			return this.$mode;
		},
		get_schedules: function SubscribeViewModel$get_Schedules() {
			return this.$schedules;
		},
		get_subscribeProps: function SubscribeViewModel$get_SubscribeProps() {
			this.createAddSubscribersViewModel(true);
			var $t1 = new $tab_SubscribeProps();
			$t1.addSubscribersComponentProps = this.addSubscribersViewModel.get_props();
			$t1.users = this.get_users();
			$t1.groups = this.get_groups();
			$t1.email = this.get_email();
			$t1.emailIsValid = ss.mkdel(this, this.$emailIsValid);
			$t1.schedules = this.generateSchedules();
			$t1.defaultSubject = this.get_defaultSubject();
			$t1.onCancel = this.$3$SubscribeCancelField;
			$t1.createSubscriptions = ss.mkdel(this, function(subject, subscribeAllViews, schedule, message, subscriptionUsers, subscriptionGroups, subscriptionParams, subscriptionFormat) {
				this.setDataAndCreateSubscriptions(subject, subscribeAllViews, schedule, message, subscriptionUsers, subscriptionGroups, subscriptionParams, subscriptionFormat);
			});
			$t1.createSubscriptionsWithSelfServiceSchedule = ss.mkdel(this, function(subject1, subscribeAllViews1, recurrence, message1, subscriptionUsers1, subscriptionGroups1, subscriptionParams1, subscriptionFormat1) {
				this.setDataAndCreateSubscriptionsSelfService(subject1, subscribeAllViews1, recurrence, message1, subscriptionUsers1, subscriptionGroups1, subscriptionParams1, subscriptionFormat1);
			});
			$t1.setEmail = ss.mkdel(this, function(email) {
				this.set_email(email);
			});
			$t1.subscriptionsPageUrl = this.get_subscriptionsPageUrl();
			$t1.userSettingsPageUrl = this.get_userSettingsPageUrl();
			$t1.sendOnlyWhenDataPresentCheckboxVisible = this.get_sendOnlyWhenDataPresentCheckboxVisible();
			$t1.isFormatDropdownEnabled = tab.FeatureFlags.isEnabled('PDFSubscriptionsSP1') && tsConfig.allow_subscription_attachments;
			$t1.isSelfSubscribeCheckboxEnabled = tsConfig.allow_subscribe_others;
			$t1.isSelfServiceSchedulesEnabled = $tab_SubscribeViewModel.isSelfServiceSchedulesEnabled();
			return $t1;
		},
		get_shouldSubscribeAllViews: function SubscribeViewModel$get_ShouldSubscribeAllViews() {
			return this.$shouldSubscribeAllViews;
		},
		set_shouldSubscribeAllViews: function SubscribeViewModel$set_ShouldSubscribeAllViews(value) {
			this.$shouldSubscribeAllViews = value;
			if (ss.staticEquals(this.$3$SendOnlyWhenDataPresentCheckboxStateChangedField, null)) {
				return;
			}
			this.$3$SendOnlyWhenDataPresentCheckboxStateChangedField();
		},
		get_attachImage: function SubscribeViewModel$get_AttachImage() {
			return this.$attachImage;
		},
		set_attachImage: function SubscribeViewModel$set_AttachImage(value) {
			this.$attachImage = value;
		},
		get_attachPdf: function SubscribeViewModel$get_AttachPdf() {
			return this.$attachPdf;
		},
		set_attachPdf: function SubscribeViewModel$set_AttachPdf(value) {
			this.$attachPdf = value;
		},
		get_sendOnlyWhenDataPresentCheckboxEnabled: function SubscribeViewModel$get_SendOnlyWhenDataPresentCheckboxEnabled() {
			return !this.$shouldSubscribeAllViews;
		},
		get_sendOnlyWhenDataPresentCheckboxSelected: function SubscribeViewModel$get_SendOnlyWhenDataPresentCheckboxSelected() {
			return this.$3$SendOnlyWhenDataPresentCheckboxSelectedField;
		},
		set_sendOnlyWhenDataPresentCheckboxSelected: function SubscribeViewModel$set_SendOnlyWhenDataPresentCheckboxSelected(value) {
			this.$3$SendOnlyWhenDataPresentCheckboxSelectedField = value;
		},
		get_addPdfAttachmentCheckboxSelected: function SubscribeViewModel$get_AddPdfAttachmentCheckboxSelected() {
			return this.$3$AddPdfAttachmentCheckboxSelectedField;
		},
		set_addPdfAttachmentCheckboxSelected: function SubscribeViewModel$set_AddPdfAttachmentCheckboxSelected(value) {
			this.$3$AddPdfAttachmentCheckboxSelectedField = value;
		},
		get_sendOnlyWhenDataPresentCheckboxVisible: function SubscribeViewModel$get_SendOnlyWhenDataPresentCheckboxVisible() {
			if (!tsConfig.allow_subscribe_on_data_present) {
				return false;
			}
			return tsConfig.current_sheet_type === 'dashboard' || tsConfig.current_sheet_type === 'worksheet';
		},
		get_defaultSubject: function SubscribeViewModel$get_DefaultSubject() {
			return tsConfig.current_sheet_name;
		},
		get_email: function SubscribeViewModel$get_Email() {
			return this.$3$EmailField;
		},
		set_email: function SubscribeViewModel$set_Email(value) {
			this.$3$EmailField = value;
		},
		get_message: function SubscribeViewModel$get_Message() {
			return this.$3$MessageField;
		},
		set_message: function SubscribeViewModel$set_Message(value) {
			this.$3$MessageField = value;
		},
		get_subscriptionsPageUrl: function SubscribeViewModel$get_SubscriptionsPageUrl() {
			return this.$3$SubscriptionsPageUrlField;
		},
		set_subscriptionsPageUrl: function SubscribeViewModel$set_SubscriptionsPageUrl(value) {
			this.$3$SubscriptionsPageUrlField = value;
		},
		get_userSettingsPageUrl: function SubscribeViewModel$get_UserSettingsPageUrl() {
			return this.$3$UserSettingsPageUrlField;
		},
		set_userSettingsPageUrl: function SubscribeViewModel$set_UserSettingsPageUrl(value) {
			this.$3$UserSettingsPageUrlField = value;
		},
		get_users: function SubscribeViewModel$get_Users() {
			return this.$users;
		},
		set_users: function SubscribeViewModel$set_Users(value) {
			this.$users = value;
			this.raiseActionEvent(this.$3$UsersChangedField);
		},
		get_groups: function SubscribeViewModel$get_Groups() {
			return this.$groups;
		},
		set_groups: function SubscribeViewModel$set_Groups(value) {
			this.$groups = value;
			this.raiseActionEvent(this.$3$GroupsChangedField);
		},
		get_sendOnlyWhenDataPresent: function SubscribeViewModel$get_SendOnlyWhenDataPresent() {
			return this.get_sendOnlyWhenDataPresentCheckboxSelected() && !this.get_shouldSubscribeAllViews();
		},
		get_$dataConditionType: function SubscribeViewModel$get_DataConditionType() {
			return (this.get_sendOnlyWhenDataPresent() ? 'DataPresent' : 'Always');
		},
		createUpdatedProps: function SubscribeViewModel$CreateUpdatedProps() {
			this.createAddSubscribersViewModel(true);
			var child = React.createElement($tab_SubscribeComponentContainer, this.get_subscribeProps());
			return { children: child, dialogWidth: 400, isGlassTransparent: false, isModal: true, positioningBehavior: 0, shouldAdjustPositionOnWindowResize: !tsConfig.is_mobile, shouldRecenterOnUpdate: true, shouldReturnFocusOnClose: true, showCloseButton: false, showFooter: false, testId: 'subscribe', title: tab.Strings.SubscribeTitle, type: 0 };
		},
		onDialogHidden: function SubscribeViewModel$OnDialogHidden() {
			this.set_users([]);
			this.set_groups([]);
			this.raiseActionEvent(this.$3$DialogHiddenField);
			this.set_message(null);
		},
		createAddSubscribersViewModel: function SubscribeViewModel$CreateAddSubscribersViewModel(isUsers) {
			if (ss.isValue(this.addSubscribersViewModel)) {
				this.addSubscribersViewModel.originalGroups = this.get_groups();
				this.addSubscribersViewModel.originalUsers = this.get_users();
				this.addSubscribersViewModel.groups = this.get_groups();
				this.addSubscribersViewModel.users = this.get_users();
				this.addSubscribersViewModel.isUsers = isUsers;
				this.addSubscribersViewModel.updateProps();
				return;
			}
			var viewModel = new $tab_AddSubscribersViewModel(this.get_users(), this.get_groups(), isUsers);
			this.addSubscribersViewModel = viewModel;
		},
		createAddSubscribersPopup: function SubscribeViewModel$CreateAddSubscribersPopup(relativeElement, isUsers) {
			if (ss.isValue(this.addSubscribersViewModel)) {
				this.addSubscribersViewModel.originalGroups = this.get_groups();
				this.addSubscribersViewModel.originalUsers = this.get_users();
				this.addSubscribersViewModel.groups = this.get_groups();
				this.addSubscribersViewModel.users = this.get_users();
				this.addSubscribersViewModel.isUsers = isUsers;
				this.addSubscribersViewModel.updateProps();
				return;
			}
			var viewModel = new $tab_AddSubscribersViewModel(this.get_users(), this.get_groups(), isUsers);
			this.addSubscribersViewModel = viewModel;
			var popup = spiff.UberPopupViewModel.createForContent$1(this.addSubscribersViewModel, relativeElement, ss.mkdel(this, this.$disposeAddSubscribersViewModel), true);
			popup.options.horizontalAlign = 1;
			popup.options.isToolbarFlyout = false;
			popup.options.isBeingPositionedRelativeToASharedDialogWidget = true;
			popup.options.preferUp = $tab_ToolbarViewModel.get_toolbarIsBottom();
			popup.options.horizontalAttach = 1;
			popup.options.coverRelativeElement = true;
			var handleCancelAction = function() {
				popup.hide(false);
			};
			viewModel.add_selectionCanceled(handleCancelAction);
			var handleConfirmSelectionUsers = ss.mkdel(this, function(users) {
				this.set_users(users);
				popup.hide(false);
			});
			var handleConfirmSelectionGroups = ss.mkdel(this, function(groups) {
				this.set_groups(groups);
				popup.hide(false);
			});
			viewModel.add_selectionConfirmedUser(handleConfirmSelectionUsers);
			viewModel.add_selectionConfirmedGroup(handleConfirmSelectionGroups);
			popup.addDisposables(new tab.CallOnDispose(ss.mkdel(this, function() {
				viewModel.remove_selectionCanceled(handleCancelAction);
				viewModel.remove_selectionConfirmedUser(handleConfirmSelectionUsers);
				viewModel.remove_selectionConfirmedGroup(handleConfirmSelectionGroups);
				this.raiseActionEvent(this.$3$AddSubscribersPopupStateChangedField);
			})));
			var handleHidden = function() {
				popup.hide(false);
			};
			this.add_dialogHidden(handleHidden);
			popup.addDisposables(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.remove_dialogHidden(handleHidden);
			})));
			popup.show();
			this.raiseActionEvent(this.$3$AddSubscribersPopupStateChangedField);
			$('.tabUserSearchInput').focus();
		},
		shouldSubscribeButtonBeEnabled: function SubscribeViewModel$ShouldSubscribeButtonBeEnabled(email, subject, subscribeSelf) {
			if (ss.isNullOrUndefined(this.get_schedules()) || this.get_schedules().length === 0) {
				return false;
			}
			if (ss.isNullOrUndefined(subject) || subject.trim().length === 0) {
				return false;
			}
			if (ss.isNullOrEmptyString(this.get_email()) && !this.$emailIsValid(email)) {
				return false;
			}
			if (ss.isValue(this.addSubscribersViewModel)) {
				return false;
			}
			return subscribeSelf || this.get_users().length > 0 || this.get_groups().length > 0;
		},
		generateScheduleViewModel: function SubscribeViewModel$GenerateScheduleViewModel() {
			var $t1 = new spiff.ComboBoxViewModel();
			$t1.set_additionalMenuClass($tab_SubscribeViewModel.$scheduleDropdownClass);
			var comboBoxViewModel = $t1;
			var $t2 = this.get_schedules();
			for (var $t3 = 0; $t3 < $t2.length; $t3++) {
				var schedule = $t2[$t3];
				var display = schedule.get_schedulePresModel().name;
				if (tsConfig.display_schedule_description_as_name) {
					display = schedule.get_scheduleFrequencyDescription();
				}
				comboBoxViewModel.addItem(new spiff.ComboBoxItem(null, display, schedule, null, null));
			}
			if (comboBoxViewModel.get_items().length > 0) {
				comboBoxViewModel.set_selectedItem(comboBoxViewModel.get_items()[0]);
			}
			return comboBoxViewModel;
		},
		generateSchedules: function SubscribeViewModel$GenerateSchedules() {
			if ($tab_SubscribeViewModel.isSelfServiceSchedulesEnabled()) {
				return null;
			}
			var len = this.get_schedules().length;
			var scheduleData = new Array(len);
			for (var i = 0; i < this.get_schedules().length; i++) {
				var schedule = this.get_schedules()[i];
				var display = schedule.get_schedulePresModel().name;
				if (tsConfig.display_schedule_description_as_name) {
					display = schedule.get_scheduleFrequencyDescription();
				}
				scheduleData[i] = { value: i.toString(), displayValue: display };
			}
			return ss.arrayClone(scheduleData);
		},
		setDataAndCreateSubscriptions: function SubscribeViewModel$SetDataAndCreateSubscriptions(subject, subscribeAllViews, scheduleIndex, message, subscriptionUsers, subscriptionGroups, subscriptionParams, subscriptionFormat) {
			this.set_shouldSubscribeAllViews(subscribeAllViews);
			this.set_sendOnlyWhenDataPresentCheckboxSelected(subscriptionParams.sendOnlyWhenDataPresent);
			this.set_users(subscriptionUsers);
			this.set_groups(subscriptionGroups);
			this.set_attachImage(subscriptionFormat.attachImage);
			this.set_attachPdf(subscriptionFormat.attachPdf);
			this.createSubscriptions(subject, this.get_schedules()[scheduleIndex], subscriptionParams.subscribeSelf, message);
		},
		setDataAndCreateSubscriptionsSelfService: function SubscribeViewModel$SetDataAndCreateSubscriptionsSelfService(subject, subscribeAllViews, recurrenceModel, message, subscriptionUsers, subscriptionGroups, subscriptionParams, subscriptionFormat) {
			this.set_shouldSubscribeAllViews(subscribeAllViews);
			this.set_sendOnlyWhenDataPresentCheckboxSelected(subscriptionParams.sendOnlyWhenDataPresent);
			this.set_users(subscriptionUsers);
			this.set_groups(subscriptionGroups);
			this.set_attachImage(subscriptionFormat.attachImage);
			this.set_attachPdf(subscriptionFormat.attachPdf);
			this.createSubscriptionsWithSelfServiceSchedule(subject, recurrenceModel, subscriptionParams.subscribeSelf, message);
		},
		createSubscription: function SubscribeViewModel$CreateSubscription(subject, schedule) {
			var success = ss.mkdel(this, function() {
				this.raiseActionEvent(this.$3$SubscribeSuccessField);
				$tab_NotificationViewModel.showNotification(tab.Strings.SubscribeSuccess, null);
			});
			var failure = function() {
				$tab_NotificationViewModel.showNotification(tab.Strings.SubscribeFailure, null);
			};
			tab.WorkgroupServerCommands.createSubscription(subject, this.get_shouldSubscribeAllViews(), schedule, this.get_$dataConditionType(), success, failure);
		},
		createSubscriptionWithSelfServiceSchedule: function SubscribeViewModel$CreateSubscriptionWithSelfServiceSchedule(subject, recurrenceModel) {
			tab.ModuleManager.load(tab.ISelfServiceSchedulesModule).call(null, []).done(ss.mkdel(this, function(module) {
				module.createSubscriptionWithSelfServiceSchedule(subject, this.get_shouldSubscribeAllViews(), recurrenceModel, this.get_$dataConditionType(), this.$3$SubscribeSuccessField);
			}));
		},
		createSubscriptions: function SubscribeViewModel$CreateSubscriptions(subject, schedule, subscribeSelf, message) {
			this.$createSubscriptionsGeneric(subject, subscribeSelf, schedule, false, message);
		},
		createSubscriptionsWithSelfServiceSchedule: function SubscribeViewModel$CreateSubscriptionsWithSelfServiceSchedule(subject, recurrenceModel, subscribeSelf, message) {
			this.$createSubscriptionsGeneric(subject, subscribeSelf, recurrenceModel, true, message);
		},
		showMessageEditor: function SubscribeViewModel$ShowMessageEditor() {
			this.$switchMode($tab_SubscribeViewModel.modeMessage);
		},
		showMainDialog: function SubscribeViewModel$ShowMainDialog() {
			this.$switchMode($tab_SubscribeViewModel.modeMainDialog);
		},
		$createSubscriptionsGeneric: function SubscribeViewModel$CreateSubscriptionsGeneric(subject, subscribeSelf, payload, isSelfService, message) {
			var success = ss.mkdel(this, function(result) {
				var numSuccessfulSubscriptions = (ss.keyExists(result, 'results') ? result['results'].length : 0);
				$tab_NotificationViewModel.showNotification(tab.Strings.SubscribeOthersSuccess(numSuccessfulSubscriptions), null);
				this.raiseActionEvent(this.$3$SubscribeSuccessField);
			});
			var failure = ss.mkdel(this, function(result1) {
				var errors = ss.cast(result1['errors'], Array);
				if (errors.length === 1 && ss.isNullOrUndefined(errors[0]['id'])) {
					$tab_NotificationViewModel.showNotification(tab.Strings.SubscribeFailure, null);
				}
				else {
					$tab_NotificationViewModel.showNotification(tab.Strings.SubscribeOthersFailed(errors.length), null);
					this.raiseActionEvent(this.$3$SubscribeSuccessField);
				}
			});
			var error = function(errorCode) {
				$tab_NotificationViewModel.showNotification(tab.Strings.SubscribeFailure, null);
			};
			var userIds = _.map(this.get_users(), function(user) {
				return user.id.toString();
			});
			var groupIds = _.map(this.get_groups(), function(group) {
				return group.id.toString();
			});
			if (groupIds.length === 0) {
				groupIds = null;
			}
			if (subscribeSelf && !_.contains(userIds, tsConfig.current_user_id.toString())) {
				userIds.push(tsConfig.current_user_id.toString());
			}
			if (isSelfService) {
				tab.ModuleManager.load(tab.ISelfServiceSchedulesModule).call(null, []).done(ss.mkdel(this, function(module) {
					module.createSubscriptionsWithSelfServiceSchedule(subject, this.get_shouldSubscribeAllViews(), payload, this.get_$dataConditionType(), userIds, groupIds, success, failure, error, message, this.get_attachImage(), this.get_attachPdf());
				}));
			}
			else {
				this.set_users([]);
				this.set_groups([]);
				tab.WorkgroupServerCommands.createSubscriptions(subject, this.get_shouldSubscribeAllViews(), userIds, ss.cast(payload, tab.Schedule), this.get_$dataConditionType(), success, failure, error, message, groupIds, this.get_attachImage(), this.get_attachPdf());
			}
		},
		$disposeAddSubscribersViewModel: function SubscribeViewModel$DisposeAddSubscribersViewModel() {
			this.addSubscribersViewModel = tab.MiscUtil.dispose$1(this.addSubscribersViewModel);
		},
		$emailIsValid: function SubscribeViewModel$EmailIsValid(email) {
			return $tab_EmailValidator.validate(email);
		},
		$switchMode: function SubscribeViewModel$SwitchMode(newMode) {
			this.$mode = newMode;
			this.$onModeChanged();
		},
		$onModeChanged: function SubscribeViewModel$OnModeChanged() {
			if (ss.isValue(this.$3$ModeChangedField)) {
				this.$3$ModeChangedField(this, ss.EventArgs.Empty);
			}
		}
	}, ss.makeGenericType(spiff.BaseReactViewModel$1, [Object]), [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object]), spiff.IDialogContent]);
	ss.initClass($tab_SubscriptionMessageEditor, $asm, {
		render: function SubscriptionMessageEditor$Render() {
			return spiff.DOMElements.div({}, spiff.DOMElements.textarea(this.$buildEditorProps()), this.$getCharacterLimitMessageDiv(), spiff.DOMElements.div({ className: 'tabSubscribeMessageEditorButtonContainer' }, React.createElement(SharedWidgets.ButtonWidget, this.$buildCancelButtonProps()), React.createElement(SharedWidgets.ButtonWidget, this.$buildDoneButtonProps())));
		},
		$getCharacterLimitMessageDiv: function SubscriptionMessageEditor$GetCharacterLimitMessageDiv() {
			return (this.state.isWarning ? spiff.DOMElements.div({ className: $tab_SubscriptionMessageEditor.errorMessageClass + ' ' + (this.state.isError ? 'error' : 'warning') }, this.state.warningMessage) : null);
		},
		$buildEditorProps: function SubscriptionMessageEditor$BuildEditorProps() {
			return { rows: this.$textAreaRows, placeholder: tab.Strings.ToolbarSubscribeMessageEditorPlaceholder, className: $tab_SubscriptionMessageEditor.messageEditorClass, ref: this.$boundDomElemRef, defaultValue: this.props.message, autoFocus: true, onChange: ss.mkdel(this, this.onChangeMessageHandler) };
		},
		onChangeMessageHandler: function SubscriptionMessageEditor$OnChangeMessageHandler(event) {
			if (this.textAreaElement.value.length >= $tab_SubscriptionMessageEditor.characterWarningLimit) {
				this.setState({ isError: this.textAreaElement.value.length > $tab_SubscriptionMessageEditor.characterLimit, isWarning: true, warningMessage: tab.Strings.MessageCharacterLimit(this.textAreaElement.value.length, $tab_SubscriptionMessageEditor.characterLimit) });
			}
			else if (this.state.isError || this.state.isWarning) {
				this.setState({ isError: false, isWarning: false, warningMessage: null });
			}
		},
		$buildCancelButtonProps: function SubscriptionMessageEditor$BuildCancelButtonProps() {
			return { handleClick: ss.mkdel(this, function(e) {
				this.props.onCancelButtonClick();
			}), buttonType: 3, testId: 'subscription-message-editor-cancel', key: 'messageEditorCancel', children: tab.Strings.SubscribeCancel, style: { marginRight: 12 } };
		},
		$buildDoneButtonProps: function SubscriptionMessageEditor$BuildDoneButtonProps() {
			return { handleClick: ss.mkdel(this, function(e) {
				this.$bindDoneButtonClick(e);
			}), buttonType: 2, testId: 'subscription-message-editor-done', key: 'messageEditorDone', children: tab.Strings.SubscribeDone, disabled: this.state.isError };
		}
	}, React.Component);
	ss.initClass($tab_TabEventArgs, $asm, {}, ss.EventArgs);
	ss.initClass($tab_TableauServerReconnectWidget, $asm, {
		createEditConnectionButtonProps: function TableauServerReconnectWidget$CreateEditConnectionButtonProps() {
			var editConnection = function() {
				tab.VizClientCommands.setUIMode('data-tab', 'ReconnectEditConnection', '');
			};
			return {
				handleClick: function(e) {
					editConnection();
				},
				buttonType: 3,
				testId: $tab_SheetReconnectWidget.editConnectionTestID,
				children: tab.Strings.SheetReconnectEditConnectionLabel,
				style: { marginTop: 18 + 'px', marginBottom: 'auto', marginLeft: 'auto', marginRight: 30 + 'px' }
			};
		},
		determineIfConnectionClassSupported: function TableauServerReconnectWidget$DetermineIfConnectionClassSupported() {
			var result = $.Deferred();
			tab.DataConnectionUtils.isTableauServerSupportedInReconnectFlow(this.props.connectionClass).done(function(supported) {
				result.resolve(supported);
			});
			return result.promise();
		}
	}, $tab_SheetReconnectWidget);
	ss.initClass($tab_TabRenderContext2D, $asm, {
		get_textAngle: function TabRenderContext2D$get_TextAngle() {
			return this.$textAngle;
		},
		set_textAngle: function TabRenderContext2D$set_TextAngle(value) {
			this.$textAngle = value;
		},
		get_isTextAngleHorizontal: function TabRenderContext2D$get_IsTextAngleHorizontal() {
			return Math.abs(this.get_textAngle()) < $tab_TabRenderContext2D.$textAngleEpsilon;
		},
		get_numberSavedStates: function TabRenderContext2D$get_NumberSavedStates() {
			return this.$numSavedStates;
		},
		get_alpha: function TabRenderContext2D$get_Alpha() {
			return this.$baseContext.globalAlpha;
		},
		set_alpha: function TabRenderContext2D$set_Alpha(value) {
			if (value !== this.$baseContext.globalAlpha) {
				this.$baseContext.globalAlpha = value;
			}
		},
		get_globalCompositeOperation: function TabRenderContext2D$get_GlobalCompositeOperation() {
			return this.$baseContext.globalCompositeOperation;
		},
		set_globalCompositeOperation: function TabRenderContext2D$set_GlobalCompositeOperation(value) {
			this.$baseContext.globalCompositeOperation = value;
		},
		get_font: function TabRenderContext2D$get_Font() {
			return this.$baseContext.font;
		},
		set_font: function TabRenderContext2D$set_Font(value) {
			var normalizedValue = this.$fontNormalizer.normalizeFont(value);
			if (!ss.referenceEquals(normalizedValue, this.$baseContext.font)) {
				this.$baseContext.font = normalizedValue;
			}
			this.$fontSize = $tab_TabRenderContext2D.$findFontSize(normalizedValue);
		},
		get_lineCap: function TabRenderContext2D$get_LineCap() {
			return this.$baseLineCap;
		},
		set_lineCap: function TabRenderContext2D$set_LineCap(value) {
			if (value !== this.$baseLineCap) {
				this.$baseContext.lineCap = value;
				this.$baseLineCap = value;
			}
		},
		get_lineJoin: function TabRenderContext2D$get_LineJoin() {
			return this.$baseLineJoin;
		},
		set_lineJoin: function TabRenderContext2D$set_LineJoin(value) {
			if (value !== this.$baseLineJoin) {
				this.$baseContext.lineJoin = value;
				this.$baseLineJoin = value;
			}
		},
		get_lineWidth: function TabRenderContext2D$get_LineWidth() {
			return this.$baseContext.lineWidth;
		},
		set_lineWidth: function TabRenderContext2D$set_LineWidth(value) {
			if (value !== this.$baseContext.lineWidth) {
				this.$baseContext.lineWidth = value;
				if (this.$linePattern !== 'solid') {
					this.$updateLinePattern();
				}
			}
		},
		get_linePattern: function TabRenderContext2D$get_LinePattern() {
			return this.$linePattern;
		},
		set_linePattern: function TabRenderContext2D$set_LinePattern(value) {
			if (value !== this.$linePattern) {
				this.$linePattern = value;
				this.$updateLinePattern();
			}
		},
		get_transformation: function TabRenderContext2D$get_Transformation() {
			return this.$transformMatrix;
		},
		set_transformation: function TabRenderContext2D$set_Transformation(value) {
			this.$transformMatrix.setTransform(value);
		},
		get_strokeStyle: function TabRenderContext2D$get_StrokeStyle() {
			return this.$baseStrokeStyle;
		},
		set_strokeStyle: function TabRenderContext2D$set_StrokeStyle(value) {
			if (!ss.referenceEquals(value, this.$baseStrokeStyle)) {
				this.$baseContext.strokeStyle = value;
				this.$baseStrokeStyle = value;
			}
		},
		get_shapeFillStyle: function TabRenderContext2D$get_ShapeFillStyle() {
			return this.$shapeFillStyle;
		},
		set_shapeFillStyle: function TabRenderContext2D$set_ShapeFillStyle(value) {
			this.$shapeFillStyle = value;
			this.$setBaseFillStyle(value);
		},
		get_shouldAntialias: function TabRenderContext2D$get_ShouldAntialias() {
			return this.$shouldAntialias;
		},
		set_shouldAntialias: function TabRenderContext2D$set_ShouldAntialias(value) {
			this.$shouldAntialias = value;
		},
		get_shouldUnderlineText: function TabRenderContext2D$get_ShouldUnderlineText() {
			return this.$shouldUnderlineText;
		},
		set_shouldUnderlineText: function TabRenderContext2D$set_ShouldUnderlineText(value) {
			this.$shouldUnderlineText = value;
		},
		get_textFillStyle: function TabRenderContext2D$get_TextFillStyle() {
			return this.$textFillStyle;
		},
		set_textFillStyle: function TabRenderContext2D$set_TextFillStyle(value) {
			this.$textFillStyle = value;
		},
		get_textAlign: function TabRenderContext2D$get_TextAlign() {
			return this.$baseContext.textAlign;
		},
		set_textAlign: function TabRenderContext2D$set_TextAlign(value) {
			this.$baseContext.textAlign = value;
		},
		get_textBaseline: function TabRenderContext2D$get_TextBaseline() {
			return this.$baseContext.textBaseline;
		},
		set_textBaseline: function TabRenderContext2D$set_TextBaseline(value) {
			this.$baseContext.textBaseline = value;
		},
		get_currentClipRect: function TabRenderContext2D$get_CurrentClipRect() {
			return this.$currentClipRect;
		},
		clearDirtyRect: function TabRenderContext2D$ClearDirtyRect() {
			this.dirtyRect = { x: 0, y: 0, w: 0, h: 0 };
		},
		setDefaultPropertyValues: function TabRenderContext2D$SetDefaultPropertyValues() {
			this.set_alpha(1);
			this.set_strokeStyle($tab_TabRenderContext2D.defaultColor);
			this.set_linePattern($tab_TabRenderContext2D.defaultLinePattern);
			this.set_lineWidth($tab_TabRenderContext2D.defaultLineWidth);
			this.set_lineJoin($tab_TabRenderContext2D.defaultLineJoin);
			this.set_lineCap($tab_TabRenderContext2D.defaultLineCap);
			this.set_shapeFillStyle($tab_TabRenderContext2D.defaultColor);
			this.set_textFillStyle($tab_TabRenderContext2D.defaultTextColor);
			this.set_textBaseline($tab_TabRenderContext2D.defaultTextBaseline);
			this.set_textAlign($tab_TabRenderContext2D.defaultTextAlign);
			this.set_textAngle($tab_TabRenderContext2D.defaultTextAngle);
			this.set_font($tab_TabRenderContext2D.defaultFontSize + 'pt ' + $tab_TabRenderContext2D.defaultFontName);
			this.$shouldAntialias = true;
			this.$shouldUnderlineText = $tab_TabRenderContext2D.defaultTextUnderline;
		},
		setClip: function TabRenderContext2D$SetClip(clipRect) {
			this.beginPath();
			this.$currentClipRect = clipRect;
			this.rect(clipRect.x, clipRect.y, clipRect.w, clipRect.h);
			this.$clip();
		},
		arc: function TabRenderContext2D$Arc(x, y, radius, startAngle, endAngle, anticlockwise) {
			this.$baseContext.arc(x, y, radius, startAngle, endAngle, anticlockwise);
		},
		beginPath: function TabRenderContext2D$BeginPath() {
			this.$baseContext.beginPath();
		},
		bezierCurveTo: function TabRenderContext2D$BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
			this.$baseContext.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
		},
		clearRect: function TabRenderContext2D$ClearRect(x, y, w, h) {
			this.$baseContext.clearRect(x, y, w, h);
		},
		closePath: function TabRenderContext2D$ClosePath() {
			this.$baseContext.closePath();
		},
		createLinearGradient: function TabRenderContext2D$CreateLinearGradient(x0, y0, x1, y1) {
			return this.$baseContext.createLinearGradient(x0, y0, x1, y1);
		},
		drawImage1: function TabRenderContext2D$DrawImage1(image, dx, dy) {
			this.$baseContext.drawImage(image, dx, dy);
		},
		drawImage3: function TabRenderContext2D$DrawImage3(image, dx, dy, dw, dh) {
			this.$baseContext.drawImage(image, dx, dy, dw, dh);
		},
		drawImage4: function TabRenderContext2D$DrawImage4(image, dx, dy, dw, dh) {
			this.$baseContext.drawImage(image, dx, dy, dw, dh);
		},
		drawImage5: function TabRenderContext2D$DrawImage5(image, sx, sy, sw, sh, dx, dy, dw, dh) {
			this.$baseContext.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
		},
		fill: function TabRenderContext2D$Fill() {
			this.$baseContext.fill();
		},
		fillRect: function TabRenderContext2D$FillRect(x, y, w, h) {
			this.$baseContext.fillRect(x, y, w, h);
		},
		fillText1: function TabRenderContext2D$FillText1(text, x, y) {
			if (this.$shouldWrapTextCalls()) {
				var drawText = ss.mkdel(this, function(s) {
					this.$baseContext.fillText(s, 0, 0);
				});
				this.$executeTextDrawCommand(drawText, text, x, y);
			}
			else {
				this.$baseContext.fillText(text, x, y);
			}
		},
		fillText2: function TabRenderContext2D$FillText2(text, x, y, maxWidth) {
			if (this.$shouldWrapTextCalls()) {
				var drawText = ss.mkdel(this, function(s) {
					this.$baseContext.fillText(s, 0, 0, maxWidth);
				});
				this.$executeTextDrawCommand(drawText, text, x, y);
			}
			else {
				this.$baseContext.fillText(text, x, y, maxWidth);
			}
		},
		lineTo: function TabRenderContext2D$LineTo(x, y) {
			this.$baseContext.lineTo(x, y);
		},
		measureText: function TabRenderContext2D$MeasureText(text) {
			return this.$baseContext.measureText(text);
		},
		moveTo: function TabRenderContext2D$MoveTo(x, y) {
			this.$baseContext.moveTo(x, y);
		},
		rect: function TabRenderContext2D$Rect(x, y, w, h) {
			this.$baseContext.rect(x, y, w, h);
		},
		reset: function TabRenderContext2D$Reset() {
			while (this.$numSavedStates > 0) {
				this.restore();
			}
			this.setDefaultPropertyValues();
			this.resetTransform();
			this.pixelRatio = 1;
			this.save();
		},
		restore: function TabRenderContext2D$Restore() {
			this.$baseContext.restore();
			this.$baseLineCap = this.$baseContext.lineCap;
			this.$baseLineJoin = this.$baseContext.lineJoin;
			this.$baseStrokeStyle = this.$baseContext.strokeStyle;
			this.$baseFillStyle = this.$baseContext.fillStyle;
			var restoreState = this.$extraStateStack.pop();
			restoreState.$applyState(this);
			--this.$numSavedStates;
		},
		rotate: function TabRenderContext2D$Rotate(angle) {
			this.$transformMatrix.rotate(angle);
			this.$applyCurrentTransform();
		},
		save: function TabRenderContext2D$Save() {
			var saveState = new $tab_$ExtraContextState(this.$linePattern, this.$textAngle, this.$shapeFillStyle, this.$textFillStyle, this.$shouldAntialias, this.$shouldUnderlineText, this.$transformMatrix);
			this.$extraStateStack.push(saveState);
			this.$baseContext.save();
			++this.$numSavedStates;
		},
		scale: function TabRenderContext2D$Scale(x, y) {
			if (x === 1 && y === 1) {
				return;
			}
			this.$transformMatrix.scale(x, y);
			this.$applyCurrentTransform();
		},
		setTransform: function TabRenderContext2D$SetTransform(m) {
			this.$transformMatrix.setTransform(m);
			this.$applyCurrentTransform();
		},
		resetTransform: function TabRenderContext2D$ResetTransform() {
			this.$transformMatrix.reset();
			this.$applyCurrentTransform();
		},
		stroke: function TabRenderContext2D$Stroke() {
			this.$baseContext.stroke();
		},
		strokeRect: function TabRenderContext2D$StrokeRect(x, y, w, h) {
			this.$baseContext.strokeRect(x, y, w, h);
		},
		strokeText1: function TabRenderContext2D$StrokeText1(text, x, y) {
			ss.Debug.fail('Not implemented. This requires the same handling as fill color to multiplex the stroke color for lines and text');
		},
		strokeText2: function TabRenderContext2D$StrokeText2(text, x, y, maxWidth) {
			ss.Debug.fail('Not implemented. This requires the same handling as fill color to multiplex the stroke color for lines and text');
		},
		translate: function TabRenderContext2D$Translate(x, y) {
			if (x === 0 && y === 0) {
				return;
			}
			this.$transformMatrix.translate(x, y);
			this.$applyCurrentTransform();
		},
		$applyCurrentTransform: function TabRenderContext2D$ApplyCurrentTransform() {
			var m = this.$transformMatrix.get_matrix();
			this.$baseContext.setTransform(m[0], m[1], m[2], m[3], m[4], m[5]);
		},
		$clip: function TabRenderContext2D$Clip() {
			this.$baseContext.clip();
		},
		$shouldWrapTextCalls: function TabRenderContext2D$ShouldWrapTextCalls() {
			return !this.get_isTextAngleHorizontal() || ss.isNullOrUndefined(this.$shapeFillStyle) || !ss.referenceEquals(this.$shapeFillStyle, this.$textFillStyle) || this.$shouldUnderlineText;
		},
		$executeTextDrawCommand: function TabRenderContext2D$ExecuteTextDrawCommand(textDrawingAction, text, x, y) {
			this.$baseContext.save();
			var savedTransform = this.$transformMatrix.clone();
			this.translate(x, y);
			if (!this.get_isTextAngleHorizontal()) {
				this.rotate(this.get_textAngle());
			}
			this.$setBaseFillStyle(this.$textFillStyle);
			textDrawingAction(text);
			if (this.$shouldUnderlineText) {
				var textWidth = this.measureText(text).width;
				var underlineStrokeWidth = Math.round(Math.max(1, (this.$fontSize - 5) / 10));
				var yOffset = Math.round((this.$fontSize - 5) / 10);
				var xOffset = 0;
				if (this.get_textAlign() === 'center') {
					xOffset -= textWidth / 2;
				}
				else if (this.get_textAlign() === 'end') {
					xOffset -= textWidth;
				}
				this.$baseContext.fillRect(xOffset, yOffset, textWidth, underlineStrokeWidth);
			}
			this.$baseContext.restore();
			this.$transformMatrix.setTransform(savedTransform);
			this.$baseFillStyle = null;
		},
		$setBaseFillStyle: function TabRenderContext2D$SetBaseFillStyle(val) {
			if (!ss.referenceEquals(val, this.$baseFillStyle)) {
				this.$baseContext.fillStyle = val;
				this.$baseFillStyle = val;
			}
		},
		$updateLinePattern: function TabRenderContext2D$UpdateLinePattern() {
			var dashedLineArguments = null;
			var lineWidth = 0;
			switch (this.$linePattern) {
				case 'solid': {
					dashedLineArguments = [];
					break;
				}
				case 'dashed': {
					lineWidth = this.$baseContext.lineWidth;
					dashedLineArguments = [$tab_TabRenderContext2D.defaultLineDashDashed[0] * lineWidth, $tab_TabRenderContext2D.defaultLineDashDashed[1] * lineWidth];
					break;
				}
				case 'dotted': {
					lineWidth = this.$baseContext.lineWidth;
					dashedLineArguments = [$tab_TabRenderContext2D.defaultLineDashDotted[0] * lineWidth, $tab_TabRenderContext2D.defaultLineDashDotted[1] * lineWidth];
					break;
				}
			}
			if (typeof(this.$baseContext['setLineDash']) === 'function') {
				this.$baseContext.setLineDash(dashedLineArguments);
			}
			else if ('mozDash' in this.$baseContext) {
				this.$baseContext['mozDash'] = dashedLineArguments;
			}
			else if ('webkitLineDash' in this.$baseContext) {
				this.$baseContext['webkitLineDash'] = dashedLineArguments;
			}
		}
	});
	ss.initClass($tab_TextRegionOptions, $asm, {});
	ss.initClass($tab_TextRegionTemplate, $asm, {
		showFormatIndicator: function TextRegionTemplate$ShowFormatIndicator() {
			this.formatIndicatorElem.show();
		},
		hideFormatIndicator: function TextRegionTemplate$HideFormatIndicator() {
			this.formatIndicatorElem.hide();
			if (ss.isValue(this.chevron) && this.chevron.get_selected()) {
				this.chevron.set_selected(false);
			}
		},
		minSizeHint: function TextRegionTemplate$MinSizeHint() {
			if (ss.isValue(this.chevron)) {
				var top = parseInt(this.chevron.element.css('top'));
				var right = parseInt(this.chevron.element.css('right'));
				var height = parseInt(this.chevron.element.css('height'));
				var width = parseInt(this.chevron.element.css('width'));
				return { w: width + 2 * right, h: height + 2 * top };
			}
			return { w: 0, h: 0 };
		},
		addChevron: function TextRegionTemplate$AddChevron(handleChevronClick) {
			if (ss.isNullOrUndefined(this.chevron)) {
				this.chevron = new spiff.ToggleButton($("<span class='tabAuthoringTitleEditArrow'/>"), null);
				this.chevron.add_click(handleChevronClick);
				this.formatIndicatorElem.append(this.chevron.element);
			}
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_TextRegionView, $asm, {
		get_$textRegionViewModel: function TextRegionView$get_TextRegionViewModel() {
			return this.get_viewModel();
		},
		get_$textRegionTemplate: function TextRegionView$get_TextRegionTemplate() {
			return ss.cast(this.get_template(), $tab_TextRegionTemplate);
		},
		minSizeHint: function TextRegionView$MinSizeHint() {
			return this.get_$textRegionTemplate().minSizeHint();
		},
		onAddedToDom: function TextRegionView$OnAddedToDom() {
			spiff.Widget.prototype.onAddedToDom.call(this);
			if (tsConfig.is_mobile && tsConfig.current_sheet_type === 'dashboard') {
				this.element.addClass(spiff.ClickBuster.suppressClickBustingClass);
			}
			if (this.get_$textRegionViewModel().options.textSelectable) {
				this.get_$textRegionTemplate().contentElem.addClass('tab-selectable');
			}
			this.handleNewTextRegion();
			$tab_ServerFontLoader.get_instance().add_fontPreparationComplete(ss.mkdel(this, this.handleNewTextRegion));
			this.disposables.add(ss.mkdel(this, function() {
				$tab_ServerFontLoader.get_instance().remove_fontPreparationComplete(ss.mkdel(this, this.handleNewTextRegion));
			}));
		},
		handleNewTextRegion: function TextRegionView$HandleNewTextRegion() {
			if (!this.get_$textRegionViewModel().hasPresModel()) {
				return;
			}
			this.$createBoundaryDiv(this.get_$textRegionTemplate().textRegionBoundaryElem);
			this.$createContentDiv(this.get_$textRegionTemplate().contentElem);
		},
		$handleChevronClick: function TextRegionView$HandleChevronClick() {
			var $t1 = new spiff.ShowMenuOptions(this.get_$textRegionTemplate().chevron.element, false);
			$t1.activatedBy = $tab_FormattingTelemetryClient.richTextEditorOpenedByChevron;
			$t1.openedFrom = this.$openedFromLocation();
			var showMenuOptions = $t1;
			this.$showContextMenu(showMenuOptions);
		},
		handleRightClick: function TextRegionView$HandleRightClick(e) {
			var $t1 = new spiff.ShowMenuOptions(this.element, false);
			$t1.cursorPosition = { left: e.clientX, top: e.clientY };
			$t1.activatedBy = $tab_FormattingTelemetryClient.richTextEditorOpenedByContextMenu;
			$t1.openedFrom = this.$openedFromLocation();
			var showMenuOptions = $t1;
			this.$showContextMenu(showMenuOptions);
		},
		$showContextMenu: function TextRegionView$ShowContextMenu(options) {
			var showContextMenuCallback = ss.mkdel(this, function(showMenuOptions) {
				this.$contextMenuVisible = true;
				this.get_$textRegionTemplate().showFormatIndicator();
			});
			var hideContextMenuCallback = ss.mkdel(this, function() {
				this.$contextMenuVisible = false;
				this.get_$textRegionTemplate().hideFormatIndicator();
			});
			this.get_viewModel().showContextMenu(options, showContextMenuCallback, hideContextMenuCallback);
		},
		handleDoubleClick: function TextRegionView$HandleDoubleClick(e) {
			this.get_viewModel().openRichTextEditorDialogForTitle();
			$tab_FormattingTelemetryClient.logRichTextEditorEvent(ss.mkdict([$tab_FormattingTelemetryClient.richTextEditorOpenedBy, $tab_FormattingTelemetryClient.richTextEditorOpenedByDoubleClick, $tab_FormattingTelemetryClient.richTextEditorOpenedFrom, this.$openedFromLocation()]));
		},
		$openedFromLocation: function TextRegionView$OpenedFromLocation() {
			return ((tsConfig.current_sheet_type === 'worksheet') ? $tab_FormattingTelemetryClient.worksheetTitle : $tab_FormattingTelemetryClient.worksheetTitleOnDashboard);
		},
		handleHover: function TextRegionView$HandleHover() {
			this.get_$textRegionTemplate().showFormatIndicator();
		},
		handleMouseLeave: function TextRegionView$HandleMouseLeave() {
			if (!this.$contextMenuVisible) {
				this.get_$textRegionTemplate().hideFormatIndicator();
			}
		},
		$createContentDiv: function TextRegionView$CreateContentDiv(contentRootElem) {
			var elementCss = {};
			contentRootElem.removeAttr('style');
			contentRootElem.html(this.get_$textRegionViewModel().get_html());
			tab.FormattingConverters.cleanUpFontFamilyStyles(contentRootElem);
			if (!tsConfig.is_mobile_device) {
				var handler = function(e) {
					e.stopPropagation();
				};
				contentRootElem.on(this.createNamespacedEventName('touchstart'), handler).on(this.createNamespacedEventName('touchend'), handler);
			}
			var orientation = this.get_$textRegionViewModel().get_orientation();
			var rotatedRight = $tab_TextRegionView.$isRotatedRight(orientation);
			var rotatedLeft = $tab_TextRegionView.$isRotatedLeft(orientation);
			if (rotatedRight || rotatedLeft) {
				var parentWidth = tab.DoubleUtil.roundToInt(contentRootElem.parent().width());
				var parentHeight = tab.DoubleUtil.roundToInt(contentRootElem.parent().height());
				elementCss['width'] = parentHeight + 'px';
				var yTransformOrigin = '0%';
				if (rotatedRight) {
					elementCss['bottom'] = '100%';
					yTransformOrigin = '100%';
				}
				else if (rotatedLeft) {
					elementCss['top'] = '100%';
					yTransformOrigin = '0%';
				}
				contentRootElem.css(elementCss);
				elementCss['left'] = $tab_TextRegionView.$getCssLeftForRotatedText(parentWidth, tab.DoubleUtil.roundToInt(contentRootElem.height()), this.get_$textRegionViewModel().get_hAlign(), orientation);
				$tab_TextRegionView.$addCssTransform(contentRootElem, '0% ' + yTransformOrigin, orientation.toString());
			}
			else {
				var styledbox = this.get_$textRegionViewModel().get_styledBox();
				contentRootElem.width('calc(100% - ' + 2 * styledbox.padding + 'px)');
				var parentHeight1 = tab.DoubleUtil.roundToInt(this.get_$textRegionTemplate().domRoot.height());
				if (parentHeight1 <= tab.DoubleUtil.roundToInt(contentRootElem.height()) && !this.$isAnyTextTallerThanZone(contentRootElem, parentHeight1)) {
					elementCss['top'] = '0%';
				}
				else {
					switch (this.get_$textRegionViewModel().get_vAlign()) {
						case 'v-align-center': {
							elementCss['top'] = '50%';
							elementCss['margin-top'] = ss.Int32.div(-tab.DoubleUtil.roundToInt(contentRootElem.height()), 2) + 'px';
							break;
						}
						case 'v-align-bottom': {
							elementCss['bottom'] = '0%';
							break;
						}
						case 'v-align-top': {
							elementCss['top'] = '0%';
							break;
						}
						default: {
							ss.Debug.fail('bad text alignment');
							break;
						}
					}
				}
			}
			contentRootElem.css(elementCss);
		},
		$isAnyTextTallerThanZone: function TextRegionView$IsAnyTextTallerThanZone(localRoot, parentHeight) {
			var toRet = false;
			localRoot.find('span').each(function(index, element) {
				if (!toRet && ss.isValue(element.style.lineHeight)) {
					toRet = parseInt(element.style.lineHeight) >= parentHeight;
				}
			});
			return toRet;
		},
		$createBoundaryDiv: function TextRegionView$CreateBoundaryDiv(boundaryRootElem) {
			var styledBox = this.get_$textRegionViewModel().get_styledBox();
			var borderStyle = tab.FormattingConverters.getCSSBorderStyle(styledBox.borderStyle);
			var elementCss = ss.mkdict(['border-width', styledBox.uw + 'px', 'border-color', styledBox.borderColor, 'border-style', borderStyle, 'padding', styledBox.padding + 'px']);
			if (this.get_$textRegionViewModel().get_styledBox().hasFill) {
				this.$applyFill(elementCss);
			}
			boundaryRootElem.css(elementCss);
		},
		$applyFill: function TextRegionView$ApplyFill(elementCss) {
			var backgroundFillColor = tab.ColorModel.fromColorCode(this.get_$textRegionViewModel().get_styledBox().fillColor);
			if (backgroundFillColor.get_a() < 1) {
				elementCss['background-color'] = backgroundFillColor.toString();
			}
			else {
				elementCss['background-color'] = backgroundFillColor.toString();
			}
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_TextRegionViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_TextRegionViewModel])]);
	$tab_TextRegionView.$ctor1.prototype = $tab_TextRegionView.prototype;
	ss.initClass($tab_TextRegionViewModel, $asm, {
		add_newTextRegion: function TextRegionViewModel$add_NewTextRegion(value) {
			this.$2$NewTextRegionField = ss.delegateCombine(this.$2$NewTextRegionField, value);
		},
		remove_newTextRegion: function TextRegionViewModel$remove_NewTextRegion(value) {
			this.$2$NewTextRegionField = ss.delegateRemove(this.$2$NewTextRegionField, value);
		},
		get_hAlign: function TextRegionViewModel$get_HAlign() {
			return this.$textRegionModel.get_hAlign();
		},
		get_html: function TextRegionViewModel$get_Html() {
			return this.$textRegionModel.get_html();
		},
		get_orientation: function TextRegionViewModel$get_Orientation() {
			return this.$textRegionModel.get_orientation();
		},
		get_vAlign: function TextRegionViewModel$get_VAlign() {
			return this.$textRegionModel.get_vAlign();
		},
		get_styledBox: function TextRegionViewModel$get_StyledBox() {
			return this.$textRegionModel.get_styledBox();
		},
		get_presModelKey: function TextRegionViewModel$get_PresModelKey() {
			return this.$textRegionModel.presModelKey;
		},
		handleNewTextRegion: function TextRegionViewModel$HandleNewTextRegion() {
			this.$raiseNewTextRegion();
		},
		hasPresModel: function TextRegionViewModel$HasPresModel() {
			return !ss.isNullOrUndefined(this.$textRegionModel.pm);
		},
		isTitle: function TextRegionViewModel$IsTitle() {
			return ss.referenceEquals(this.get_presModelKey().name, 'visualTitle'.toString()) && (tsConfig.current_sheet_type === 'worksheet' || tsConfig.current_sheet_type === 'dashboard');
		},
		openRichTextEditorDialogForTitle: function TextRegionViewModel$OpenRichTextEditorDialogForTitle() {
			tab.RichTextClientCommands.createWorksheetTitleRichTextEditor(this.$textRegionModel.get_sheetName());
		},
		showContextMenu: function TextRegionViewModel$ShowContextMenu(options, showAction, hideAction) {
			if (!tsConfig.is_authoring) {
				return;
			}
			if (this.isTitle()) {
				var showContextMenu = ss.mkdel(this, function(response) {
					var commands = response.$$cmdParams['commands'];
					var menuViewModel = this.$createMenuViewModel(options, commands, showAction, hideAction);
					menuViewModel.show(options);
				});
				var dashboard = ((tsConfig.current_sheet_type === 'dashboard') ? tsConfig.current_sheet_name : null);
				tab.SheetClientCommands.getTitleContextMenu(this.$textRegionModel.get_sheetName(), dashboard, showContextMenu);
			}
			if (ss.referenceEquals(this.get_presModelKey().name, 'visualCaption'.toString()) && tsConfig.current_sheet_type === 'worksheet') {
				var showContextMenu1 = ss.mkdel(this, function(response1) {
					var commands1 = response1.$$cmdParams['commands'];
					var menuViewModel1 = this.$createMenuViewModel(options, commands1, showAction, hideAction);
					menuViewModel1.show(options);
				});
				tab.SheetClientCommands.getCaptionContextMenu(tsConfig.current_sheet_name, showContextMenu1);
			}
		},
		$createMenuViewModel: function TextRegionViewModel$CreateMenuViewModel(options, commands, onShowAction, menuHidden) {
			tab.Param.verifyValue(commands, 'commands');
			var commandsWrapper = tab.CommandsPresModelWrapper.create(commands);
			if (tab.MiscUtil.isNullOrEmpty$1(commandsWrapper.get_commandItems())) {
				if (ss.isValue(menuHidden)) {
					menuHidden();
				}
				return null;
			}
			var items = [];
			$tab_WidgetUtil.newMenuItemsFromCommands(items, commands, ss.mkdel(this, function(commandModel) {
				return this.$createDropdownMenuCommandHandler(options, commandModel);
			}), null);
			return spiff.MenuViewModel.createForMenu(new spiff.Menu(items), $tab_WidgetUtil.commandMenuItemClicked, null, menuHidden, onShowAction, true);
		},
		$createDropdownMenuCommandHandler: function TextRegionViewModel$CreateDropdownMenuCommandHandler(options, commandModel) {
			var cmdAction = $tab_WidgetUtil.createDropdownMenuCommandHandler(commandModel);
			return function() {
				var c = tab.CommandSerializer.deserialize(tab.CommandItemWrapper.create(commandModel).get_command(), false);
				if (tab.RichTextClientCommands.isRichTextEditingCommand(c)) {
					$tab_FormattingTelemetryClient.logRichTextEditorEvent(ss.mkdict([$tab_FormattingTelemetryClient.richTextEditorOpenedBy, options.activatedBy, $tab_FormattingTelemetryClient.richTextEditorOpenedFrom, options.openedFrom]));
				}
				cmdAction();
			};
		},
		$raiseNewTextRegion: function TextRegionViewModel$RaiseNewTextRegion() {
			if (ss.isValue(this.$2$NewTextRegionField)) {
				this.$2$NewTextRegionField();
			}
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_TiledImageTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_TiledImageView, $asm, {
		get_canScrollX: function TiledImageView$get_CanScrollX() {
			return this.get_docSize().w - this.get_actualViewSize().w > 0;
		},
		get_canScrollY: function TiledImageView$get_CanScrollY() {
			return this.get_docSize().h - this.get_actualViewSize().h > 0;
		},
		get_docSize: function TiledImageView$get_DocSize() {
			return { w: tab.DoubleUtil.roundToInt(this.element.width()), h: tab.DoubleUtil.roundToInt(this.element.height()) };
		},
		get_actualViewSize: function TiledImageView$get_ActualViewSize() {
			return { w: 0, h: 0 };
		},
		set_actualViewSize: function TiledImageView$set_ActualViewSize(value) {
			throw new ss.NotSupportedException('Setting ActualViewSize is not supported.');
		},
		get_effectiveViewSize: function TiledImageView$get_EffectiveViewSize() {
			return this.get_actualViewSize();
		},
		get_scrollPos: function TiledImageView$get_ScrollPos() {
			return { x: this.element.scrollLeft(), y: tab.DoubleUtil.roundToInt(this.element.scrollTop()) };
		},
		set_scrollPos: function TiledImageView$set_ScrollPos(value) {
			this.setXPos(value.x);
			this.setYPos(value.y);
		},
		setXPos: function TiledImageView$SetXPos(xPos) {
			this.element.scrollLeft(xPos);
		},
		setYPos: function TiledImageView$SetYPos(yPos) {
			this.element.scrollTop(yPos);
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_TiledImageViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_TiledImageViewModel]), spiff.IScrollable]);
	ss.initClass($tab_TiledImageViewModel, $asm, {}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_ToggleFullScreenKeyboardShortcut, $asm, {
		get_keyCombos: function ToggleFullScreenKeyboardShortcut$get_KeyCombos() {
			return tab.KeyCombos.op_Implicit((BrowserSupport.BrowserSupport.IsMac() ? new tab.KeyCombo.$ctor3(new tab.KeyModifiers(false, true, false, false, true, false, false, false, false), 70, []) : new tab.KeyCombo.$ctor2(122, [])));
		},
		isAllowed: function ToggleFullScreenKeyboardShortcut$IsAllowed(e) {
			return $tab_ToolbarView.shouldAllowFullScreen() && tab.GlobalKeyboardShortcut.prototype.isAllowed.call(this, e);
		},
		executeShortcut: function ToggleFullScreenKeyboardShortcut$ExecuteShortcut(e) {
			if (spiff.FullscreenUtil.get_inFullscreenMode()) {
				spiff.FullscreenUtil.exitFullscreen();
			}
			else {
				spiff.FullscreenUtil.requestFullscreen(document.documentElement);
			}
		}
	}, tab.GlobalKeyboardShortcut, [tab.IKeyboardShortcut]);
	ss.initClass($tab_ToolbarButtonTemplate, $asm, {
		get_image: function ToolbarButtonTemplate$get_Image() {
			return this.$2$ImageField;
		},
		set_image: function ToolbarButtonTemplate$set_Image(value) {
			this.$2$ImageField = value;
		},
		get_text: function ToolbarButtonTemplate$get_Text() {
			return this.$2$TextField;
		},
		set_text: function ToolbarButtonTemplate$set_Text(value) {
			this.$2$TextField = value;
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_ToolbarButtonView, $asm, {
		get_dom: function ToolbarButtonView$get_Dom() {
			return ss.cast(this.get_template(), $tab_ToolbarButtonTemplate);
		},
		get_toolbarButton: function ToolbarButtonView$get_ToolbarButton() {
			return this.$3$ToolbarButtonField;
		},
		set_toolbarButton: function ToolbarButtonView$set_ToolbarButton(value) {
			this.$3$ToolbarButtonField = value;
		},
		$setupButton: function ToolbarButtonView$SetupButton() {
			this.set_toolbarButton(new spiff.LabelButton(this.get_dom().domRoot, '.tabToolbarButtonText'));
			this.disposables.add$1(this.get_toolbarButton());
			this.get_toolbarButton().add_click(ss.mkdel(this, this.onClicked));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.get_toolbarButton().remove_click(ss.mkdel(this, this.onClicked));
			})));
			this.element.attr('aria-label', this.get_viewModel().get_text());
			this.element.addClass(this.get_viewModel().get_iconClass().substring(this.get_viewModel().get_iconClass().lastIndexOf('-') + 1));
			this.onViewModelPropertyChanged(this, new tab.PropertyChangedEventArgs('isActive'));
			this.onViewModelPropertyChanged(this, new tab.PropertyChangedEventArgs('enabled'));
			this.onViewModelPropertyChanged(this, new tab.PropertyChangedEventArgs('text'));
			this.onViewModelPropertyChanged(this, new tab.PropertyChangedEventArgs('tooltipText'));
			this.onViewModelPropertyChanged(this, new tab.PropertyChangedEventArgs('iconClass'));
		},
		onViewModelPropertyChanged: function ToolbarButtonView$OnViewModelPropertyChanged(sender, e) {
			switch (e.get_propertyName()) {
				case 'isActive': {
					this.get_toolbarButton().element.toggleClass('tabActive', this.get_viewModel().get_isActive());
					this.get_dom().get_image().toggleClass(this.get_viewModel().get_iconClass() + '-active', this.get_viewModel().get_isActive());
					this.get_dom().get_image().toggleClass(this.get_viewModel().get_iconClass(), !this.get_viewModel().get_isActive());
					break;
				}
				case 'enabled': {
					var enabled = this.get_viewModel().get_enabled();
					this.get_toolbarButton().set_disabled(!enabled);
					if (!enabled) {
						this.element.attr('aria-disabled', 'true');
					}
					else {
						this.element.removeAttr('aria-disabled');
					}
					var tabIndex = '-1';
					if (tsConfig.is_authoring && enabled) {
						tabIndex = '0';
					}
					this.element.attr('tabindex', tabIndex);
					break;
				}
				case 'text': {
					this.get_dom().get_text().text(ss.coalesce(this.get_viewModel().get_text(), ''));
					break;
				}
				case 'tooltipText': {
					this.get_toolbarButton().set_hoverTooltipText(ss.coalesce(this.get_viewModel().get_tooltipText(), ''));
					break;
				}
				case 'iconClass': {
					if (ss.isValue(this.$previousIconClass)) {
						this.get_dom().get_image().removeClass(this.$previousIconClass);
					}
					this.get_dom().get_image().addClass(this.get_viewModel().get_iconClass());
					this.$previousIconClass = this.get_viewModel().get_iconClass();
					break;
				}
			}
		},
		onClicked: function ToolbarButtonView$OnClicked() {
			if (ss.isValue(this.get_toolbarButton()) && !ss.staticEquals(this.get_viewModel().get_buttonAction(), null)) {
				this.get_viewModel().execute();
			}
			this.get_viewModel().showDialog();
		},
		$show: function ToolbarButtonView$Show() {
			this.get_dom().domRoot.show();
			this.get_viewModel().set_isHidden(false);
		},
		$hide: function ToolbarButtonView$Hide() {
			this.get_dom().domRoot.hide();
			this.get_viewModel().set_isHidden(true);
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_ToolbarButtonViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_ToolbarButtonViewModel])]);
	ss.initClass($tab_ToolbarButtonViewModel, $asm, {
		add_showDialogRequested: function ToolbarButtonViewModel$add_ShowDialogRequested(value) {
			this.$2$ShowDialogRequestedField = ss.delegateCombine(this.$2$ShowDialogRequestedField, value);
		},
		remove_showDialogRequested: function ToolbarButtonViewModel$remove_ShowDialogRequested(value) {
			this.$2$ShowDialogRequestedField = ss.delegateRemove(this.$2$ShowDialogRequestedField, value);
		},
		add_clickButtonRequested: function ToolbarButtonViewModel$add_ClickButtonRequested(value) {
			this.$2$ClickButtonRequestedField = ss.delegateCombine(this.$2$ClickButtonRequestedField, value);
		},
		remove_clickButtonRequested: function ToolbarButtonViewModel$remove_ClickButtonRequested(value) {
			this.$2$ClickButtonRequestedField = ss.delegateRemove(this.$2$ClickButtonRequestedField, value);
		},
		add_showButtonRequested: function ToolbarButtonViewModel$add_ShowButtonRequested(value) {
			this.$2$ShowButtonRequestedField = ss.delegateCombine(this.$2$ShowButtonRequestedField, value);
		},
		remove_showButtonRequested: function ToolbarButtonViewModel$remove_ShowButtonRequested(value) {
			this.$2$ShowButtonRequestedField = ss.delegateRemove(this.$2$ShowButtonRequestedField, value);
		},
		add_hideButtonRequested: function ToolbarButtonViewModel$add_HideButtonRequested(value) {
			this.$2$HideButtonRequestedField = ss.delegateCombine(this.$2$HideButtonRequestedField, value);
		},
		remove_hideButtonRequested: function ToolbarButtonViewModel$remove_HideButtonRequested(value) {
			this.$2$HideButtonRequestedField = ss.delegateRemove(this.$2$HideButtonRequestedField, value);
		},
		get_buttonAction: function ToolbarButtonViewModel$get_ButtonAction() {
			return this.action;
		},
		get_itemWrapper: function ToolbarButtonViewModel$get_ItemWrapper() {
			return this.$2$ItemWrapperField;
		},
		set_itemWrapper: function ToolbarButtonViewModel$set_ItemWrapper(value) {
			this.$2$ItemWrapperField = value;
		},
		get_hintText: function ToolbarButtonViewModel$get_HintText() {
			var shortcut = tab.KeyboardShortcutManager.findAssociatedShortcut(this.get_itemWrapper());
			return (ss.isNullOrUndefined(shortcut) ? null : shortcut.get_hintText());
		},
		get_enabled: function ToolbarButtonViewModel$get_Enabled() {
			return this.$enabled;
		},
		set_enabled: function ToolbarButtonViewModel$set_Enabled(value) {
			if (!this.get_isSeparator() && this.$enabled !== value) {
				this.$enabled = value;
				this.notifyPropertyChanged('enabled');
			}
		},
		get_iconClass: function ToolbarButtonViewModel$get_IconClass() {
			return this.$iconClass;
		},
		set_iconClass: function ToolbarButtonViewModel$set_IconClass(value) {
			if (!this.get_isSeparator() && !(ss.compareStrings(this.$iconClass, value, false) === 0)) {
				this.$iconClass = value;
				this.notifyPropertyChanged('iconClass');
			}
		},
		get_iconType: function ToolbarButtonViewModel$get_IconType() {
			return this.$2$IconTypeField;
		},
		set_iconType: function ToolbarButtonViewModel$set_IconType(value) {
			this.$2$IconTypeField = value;
		},
		get_isActive: function ToolbarButtonViewModel$get_IsActive() {
			return this.$isActive;
		},
		set_isActive: function ToolbarButtonViewModel$set_IsActive(value) {
			if (!this.get_isSeparator() && this.$isActive !== value) {
				this.$isActive = value;
				this.notifyPropertyChanged('isActive');
			}
		},
		get_text: function ToolbarButtonViewModel$get_Text() {
			return this.$text;
		},
		set_text: function ToolbarButtonViewModel$set_Text(value) {
			if (!this.get_isSeparator() && !(ss.compareStrings(this.$text, value, false) === 0)) {
				this.$text = value;
				this.notifyPropertyChanged('text');
			}
		},
		get_tooltipText: function ToolbarButtonViewModel$get_TooltipText() {
			return this.$tooltipText;
		},
		set_tooltipText: function ToolbarButtonViewModel$set_TooltipText(value) {
			if (!this.get_isSeparator() && !ss.referenceEquals(this.$tooltipText, value)) {
				this.$tooltipText = value;
				this.notifyPropertyChanged('tooltipText');
			}
		},
		get_description: function ToolbarButtonViewModel$get_Description() {
			return this.$description;
		},
		set_description: function ToolbarButtonViewModel$set_Description(value) {
			if (!this.get_isSeparator() && !ss.referenceEquals(this.$description, value)) {
				this.$description = value;
				this.notifyPropertyChanged('description');
			}
		},
		get_isSeparator: function ToolbarButtonViewModel$get_IsSeparator() {
			return this.$2$IsSeparatorField;
		},
		set_isSeparator: function ToolbarButtonViewModel$set_IsSeparator(value) {
			this.$2$IsSeparatorField = value;
		},
		get_isHidden: function ToolbarButtonViewModel$get_IsHidden() {
			return this.$2$IsHiddenField;
		},
		set_isHidden: function ToolbarButtonViewModel$set_IsHidden(value) {
			this.$2$IsHiddenField = value;
		},
		dispose: function ToolbarButtonViewModel$Dispose() {
			spiff.BaseViewModel.prototype.dispose.call(this);
		},
		execute: function ToolbarButtonViewModel$Execute() {
			if (!ss.staticEquals(this.action, null)) {
				this.action();
			}
		},
		showDialog: function ToolbarButtonViewModel$ShowDialog() {
			if (ss.staticEquals(this.$2$ShowDialogRequestedField, null)) {
				return;
			}
			this.$fetchDialogContent().done(ss.mkdel(this, function(content) {
				if (!ss.staticEquals(this.$2$ShowDialogRequestedField, null) && ss.isValue(content)) {
					this.$2$ShowDialogRequestedField(content);
				}
			}));
		},
		clickButton: function ToolbarButtonViewModel$ClickButton() {
			this.raiseActionEvent(this.$2$ClickButtonRequestedField);
		},
		showButton: function ToolbarButtonViewModel$ShowButton() {
			if (this.get_isHidden()) {
				this.raiseActionEvent(this.$2$ShowButtonRequestedField);
			}
		},
		hideButton: function ToolbarButtonViewModel$HideButton() {
			this.raiseActionEvent(this.$2$HideButtonRequestedField);
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_ToolbarDropdownButtonViewModel, $asm, {
		createMenu: function ToolbarDropdownButtonViewModel$CreateMenu() {
			return this.$menuBuilder(null);
		},
		execute: function ToolbarDropdownButtonViewModel$Execute() {
		},
		dropdownClicked: function ToolbarDropdownButtonViewModel$DropdownClicked(relativeTo, subItemClicked) {
			var dropdownMenu = this.createMenu();
			if (!dropdownMenu.menuItems.some(function(item) {
				return item.enabled;
			})) {
				return null;
			}
			var menuViewModel = spiff.MenuViewModel.createForMenu(dropdownMenu, ss.mkdel(this, function(menuItem) {
				this.raiseActionEvent$1(spiff.MenuItem).call(this, subItemClicked, menuItem);
				$tab_WidgetUtil.commandMenuItemClicked(menuItem);
			}), null, ss.mkdel(this, function() {
				this.set_isActive(false);
			}), null, true);
			var $t1 = new spiff.ShowMenuOptions(relativeTo, true);
			$t1.additionalMenuClass = 'tabToolbarDropdownMenu ' + this.get_iconClass() + 'ContextMenu';
			var options = $t1;
			menuViewModel.show(options);
			this.set_isActive(true);
			return menuViewModel;
		}
	}, $tab_ToolbarButtonViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_ToolbarDropdownMenuViewModel, $asm, {
		add_propsUpdated: function ToolbarDropdownMenuViewModel$add_PropsUpdated(value) {
			this.$3$PropsUpdatedField = ss.delegateCombine(this.$3$PropsUpdatedField, value);
		},
		remove_propsUpdated: function ToolbarDropdownMenuViewModel$remove_PropsUpdated(value) {
			this.$3$PropsUpdatedField = ss.delegateRemove(this.$3$PropsUpdatedField, value);
		},
		get_props: function ToolbarDropdownMenuViewModel$get_Props() {
			return this.$3$PropsField;
		},
		set_props: function ToolbarDropdownMenuViewModel$set_Props(value) {
			this.$3$PropsField = value;
		},
		createMenu: function ToolbarDropdownMenuViewModel$CreateMenu() {
			return this.$menuBuilder(null);
		},
		$handleSelection: function ToolbarDropdownMenuViewModel$HandleSelection(newSelection) {
			if (ss.compare(newSelection, this.get_props().selectedValue) !== 0) {
				this.get_props().selectedValue = newSelection;
				this.raiseActionEvent(this.$3$PropsUpdatedField);
				var selectedIndex = parseInt(newSelection);
				var selectedItem = this.$menu.menuItems[selectedIndex];
				spiff.MenuViewModel.handleMenuActionItemClicked(selectedItem);
			}
		}
	}, $tab_ToolbarButtonViewModel, [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object])]);
	ss.initClass($tab_ToolbarTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_ToolbarToggleButtonViewModel, $asm, {
		get_toggleToText: function ToolbarToggleButtonViewModel$get_ToggleToText() {
			return this.$toggleToText;
		},
		set_toggleToText: function ToolbarToggleButtonViewModel$set_ToggleToText(value) {
			this.$toggleToText = value;
		}
	}, $tab_ToolbarButtonViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_ToolbarView, $asm, {
		get_dom: function ToolbarView$get_Dom() {
			return ss.cast(this.get_template(), $tab_ToolbarTemplate);
		},
		get_$customViewsButton: function ToolbarView$get_CustomViewsButton() {
			return this.$3$CustomViewsButtonField;
		},
		set_$customViewsButton: function ToolbarView$set_CustomViewsButton(value) {
			this.$3$CustomViewsButtonField = value;
		},
		get_$redoButton: function ToolbarView$get_RedoButton() {
			return this.$3$RedoButtonField;
		},
		set_$redoButton: function ToolbarView$set_RedoButton(value) {
			this.$3$RedoButtonField = value;
		},
		get_$editButton: function ToolbarView$get_EditButton() {
			return this.$3$EditButtonField;
		},
		set_$editButton: function ToolbarView$set_EditButton(value) {
			this.$3$EditButtonField = value;
		},
		get_$shareButton: function ToolbarView$get_ShareButton() {
			return this.$3$ShareButtonField;
		},
		set_$shareButton: function ToolbarView$set_ShareButton(value) {
			this.$3$ShareButtonField = value;
		},
		get_$alertButton: function ToolbarView$get_AlertButton() {
			return this.$3$AlertButtonField;
		},
		set_$alertButton: function ToolbarView$set_AlertButton(value) {
			this.$3$AlertButtonField = value;
		},
		get_$subscribeOthersButton: function ToolbarView$get_SubscribeOthersButton() {
			return this.$3$SubscribeOthersButtonField;
		},
		set_$subscribeOthersButton: function ToolbarView$set_SubscribeOthersButton(value) {
			this.$3$SubscribeOthersButtonField = value;
		},
		get_$fullScreenButton: function ToolbarView$get_FullScreenButton() {
			return this.$3$FullScreenButtonField;
		},
		set_$fullScreenButton: function ToolbarView$set_FullScreenButton(value) {
			this.$3$FullScreenButtonField = value;
		},
		get_$customViewsViewModel: function ToolbarView$get_CustomViewsViewModel() {
			return this.$toolbarViewModel.get_customViewsViewModel();
		},
		set_$useHorizontalLabels: function ToolbarView$set_UseHorizontalLabels(value) {
			this.get_dom().toolbar.toggleClass($tab_ToolbarView.$horizontalLabelsClass, value);
			this.get_dom().toolbar.toggleClass($tab_ToolbarView.$stackedLabelsClass, !value);
		},
		set_$useNarrowWatermark: function ToolbarView$set_UseNarrowWatermark(value) {
			this.get_dom().leftItems.toggleClass($tab_ToolbarView.$narrowClass, value);
		},
		$updateLayout: function ToolbarView$UpdateLayout() {
			var forceStackedLabels = this.$toolbarViewModel.get_shouldForceLabelsBelowIcons();
			var canStackLabels = this.$toolbarViewModel.get_canPutLabelsUnderneath();
			var toolbarWidth = this.get_dom().toolbar.width();
			var vizItems = this.get_dom().leftItems;
			var nonVizItems = this.get_dom().rightItems;
			this.set_$useHorizontalLabels(!forceStackedLabels);
			this.set_$useNarrowWatermark(false);
			$tab_ToolbarView.$showIfNotNull(this.get_$customViewsButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$editButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$redoButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$alertButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$shareButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$subscribeOthersButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$fullScreenButton());
			if (spiff.FullscreenUtil.get_inFullscreenMode() || $tab_ToolbarViewModel.get_$isPublic()) {
				$tab_ToolbarView.$hideLabels(vizItems);
				$tab_ToolbarView.$hideLabels(nonVizItems);
				var leftWidth = this.$vizItemsSmallWidth;
				var rightWidth = this.$nonVizItemsSmallWidth;
				if (!this.$checkFit(toolbarWidth, leftWidth, rightWidth)) {
					this.set_$useNarrowWatermark(true);
				}
				if (ss.isValue(this.get_$redoButton())) {
					if (!this.$checkFit(toolbarWidth, leftWidth, rightWidth)) {
						this.get_$redoButton().element.hide();
						leftWidth -= this.$buttonNoTextWidth;
					}
				}
				if (ss.isValue(this.get_$fullScreenButton())) {
					if (!this.$checkFit(toolbarWidth, leftWidth, rightWidth)) {
						this.get_$fullScreenButton().element.hide();
					}
				}
				return;
			}
			if (forceStackedLabels) {
				if (this.$checkFit(toolbarWidth, this.$vizItemsStackedWidth, this.$nonVizItemsStackedWidth)) {
					$tab_ToolbarView.$showLabels(vizItems);
					$tab_ToolbarView.$showLabels(nonVizItems);
				}
				else {
					$tab_ToolbarView.$hideLabels(vizItems);
					$tab_ToolbarView.$hideLabels(nonVizItems);
				}
				return;
			}
			if (this.$checkFit(toolbarWidth, this.$vizItemsWidth, this.$nonVizItemsWidth)) {
				$tab_ToolbarView.$showLabels(vizItems);
				$tab_ToolbarView.$showLabels(nonVizItems);
			}
			else if (this.$checkFit(toolbarWidth, this.$vizItemsStackedWidth, this.$nonVizItemsStackedWidth) && canStackLabels) {
				this.set_$useHorizontalLabels(false);
				$tab_ToolbarView.$showLabels(vizItems);
				$tab_ToolbarView.$showLabels(nonVizItems);
			}
			else if (this.$checkFit(toolbarWidth, this.$vizItemsSmallWidth, this.$nonVizItemsWidth)) {
				$tab_ToolbarView.$hideLabels(vizItems);
				$tab_ToolbarView.$showLabels(nonVizItems);
			}
			else if (this.$checkFit(toolbarWidth, this.$vizItemsWidth, this.$nonVizItemsSmallWidth)) {
				$tab_ToolbarView.$showLabels(vizItems);
				$tab_ToolbarView.$hideLabels(nonVizItems);
			}
			else {
				$tab_ToolbarView.$hideLabels(vizItems);
				$tab_ToolbarView.$hideLabels(nonVizItems);
				var leftWidth1 = this.$vizItemsSmallWidth;
				var rightWidth1 = this.$nonVizItemsSmallWidth;
				if (ss.isValue(this.get_$redoButton())) {
					if (!this.$checkFit(toolbarWidth, leftWidth1, rightWidth1)) {
						this.get_$redoButton().element.hide();
						leftWidth1 -= this.$buttonNoTextWidth;
					}
				}
				if (ss.isValue(this.get_$customViewsButton())) {
					if (!this.$checkFit(toolbarWidth, leftWidth1, rightWidth1)) {
						this.get_$customViewsButton().element.hide();
						rightWidth1 -= this.$buttonNoTextWidth;
					}
				}
				if (ss.isValue(this.get_$editButton())) {
					if (!this.$checkFit(toolbarWidth, leftWidth1, rightWidth1)) {
						this.get_$editButton().element.hide();
						rightWidth1 -= this.$buttonNoTextWidth;
					}
				}
				if (ss.isValue(this.get_$alertButton())) {
					if (!this.$checkFit(toolbarWidth, leftWidth1, rightWidth1)) {
						this.get_$alertButton().element.hide();
						rightWidth1 -= this.$buttonNoTextWidth;
					}
				}
				if (ss.isValue(this.get_$subscribeOthersButton())) {
					if (!this.$checkFit(toolbarWidth, leftWidth1, rightWidth1)) {
						this.get_$subscribeOthersButton().element.hide();
						rightWidth1 -= this.$buttonNoTextWidth;
					}
				}
				if (ss.isValue(this.get_$shareButton())) {
					if (!this.$checkFit(toolbarWidth, leftWidth1, rightWidth1)) {
						this.get_$shareButton().element.hide();
					}
				}
			}
		},
		$rebuildToolbarButtons: function ToolbarView$RebuildToolbarButtons() {
			var height = $tab_ToolbarViewModel.get_toolbarHeight();
			if (this.get_viewModel().get_shouldShowCommenting()) {
				height -= 1;
			}
			this.get_dom().toolbar.height(height);
			this.rebuildVizItems();
			this.rebuildNonVizItems();
			this.element.find('.tabToolbarButton:not(.disabled)').first().attr('tabindex', '0');
			this.$measureToolbarItemsAndHandleResize();
		},
		rebuildVizItems: function ToolbarView$RebuildVizItems() {
			this.get_dom().leftItems.empty();
			if ($tab_ToolbarViewModel.get_$isPublic()) {
				this.$addPublicLogoToDomObject(this.get_dom().leftItems);
			}
			else {
				this.$addVizItemsToDomObject(this.get_dom().leftItems);
			}
		},
		$addPublicLogoToDomObject: function ToolbarView$AddPublicLogoToDomObject(domObject) {
			var $t1 = ss.getEnumerator(this.$toolbarViewModel.get_nonVizItems());
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					if (ss.equalsT($tab_ToolbarButtonViewModel.iconTypePublicLogo, item.get_iconType())) {
						var b = $tab_ToolbarButtonView.create(item);
						domObject.append(b.element);
					}
				}
			}
			finally {
				$t1.dispose();
			}
		},
		$addVizItemsToDomObject: function ToolbarView$AddVizItemsToDomObject(domObject) {
			this.set_$redoButton(null);
			var $t1 = ss.getEnumerator(this.$toolbarViewModel.get_vizItems());
			try {
				while ($t1.moveNext()) {
					var item = $t1.current();
					var b = $tab_ToolbarButtonView.create(item);
					domObject.append(b.element);
					if (ss.equalsT($tab_ToolbarButtonViewModel.iconTypeRedo, item.get_iconType())) {
						this.set_$redoButton(b);
					}
				}
			}
			finally {
				$t1.dispose();
			}
			if (tsConfig.is_metrics_enabled) {
				var performanceViewModel = new $tab_ToolbarButtonViewModel(tab.Strings.ToolbarShowPerformanceRecording, 'tab-icon-performance', ss.mkdel(this.$toolbarViewModel, this.$toolbarViewModel.showPerformanceMetrics));
				var performanceMetricsButton = $tab_ToolbarButtonView.create(performanceViewModel);
				domObject.append(performanceMetricsButton.element);
			}
		},
		rebuildNonVizItems: function ToolbarView$RebuildNonVizItems() {
			this.get_dom().rightItems.empty();
			if ($tab_ToolbarViewModel.get_$isPublic()) {
				this.$addVizItemsToDomObject(this.get_dom().rightItems);
				this.$addNonVizItemsToDomObject(this.get_dom().rightItems);
			}
			else {
				this.$addNonVizItemsToDomObject(this.get_dom().rightItems);
			}
		},
		$addNonVizItemsToDomObject: function ToolbarView$AddNonVizItemsToDomObject(domObject) {
			if (!spiff.FullscreenUtil.get_inFullscreenMode()) {
				this.set_$customViewsButton(null);
				this.set_$editButton(null);
				domObject.append(this.$toolbarViewModel.generateDebugRenderModeFlag());
				if (tab.FeatureParamsLookup.getBool(46)) {
					var debugToolsButton = null;
					var debugToolsButtonViewModel = new $tab_ToolbarButtonViewModel('', 'tab-icon-debug-tools', ss.mkdel(this, function() {
						this.$toolbarViewModel.showDebugToolsMenu(debugToolsButton.element);
					}));
					debugToolsButton = $tab_ToolbarButtonView.create(debugToolsButtonViewModel);
					domObject.append(debugToolsButton.element);
				}
				var $t1 = ss.getEnumerator(this.$toolbarViewModel.get_nonVizItems());
				try {
					while ($t1.moveNext()) {
						var item = $t1.current();
						var b = $tab_ToolbarButtonView.create(item);
						if (!ss.equalsT($tab_ToolbarButtonViewModel.iconTypePublicLogo, item.get_iconType()) && !_.contains(this.$toolbarButtonsForSidePanes, item.get_iconType())) {
							domObject.append(b.element);
						}
						if (ss.equalsT($tab_ToolbarButtonViewModel.iconTypeCustomViews, item.get_iconType())) {
							b.get_dom().get_text().css('max-width', $tab_ToolbarView.$customViewsLabelMaxWidth);
							this.set_$customViewsButton(b);
						}
						else if (ss.equalsT($tab_ToolbarButtonViewModel.iconTypeEdit, item.get_iconType())) {
							this.set_$editButton(b);
						}
						else if (ss.equalsT($tab_ToolbarButtonViewModel.iconTypeShare, item.get_iconType())) {
							this.set_$shareButton(b);
						}
						else if (ss.equalsT('alert', item.get_iconType())) {
							this.$displayAlertButton(domObject, b);
						}
						else if (ss.equalsT('lineage', item.get_iconType())) {
							this.$createLineageSidePanelButton(domObject);
						}
						else if (ss.equalsT($tab_ToolbarButtonViewModel.iconTypeSubscribe, item.get_iconType())) {
							this.set_$subscribeOthersButton(b);
						}
					}
				}
				finally {
					$t1.dispose();
				}
			}
			if (this.get_viewModel().get_shouldShowCommenting()) {
				this.$createCommentingButton(domObject);
			}
			if (ss.isValue(this.$toolbarViewModel.get_deviceLayoutItem()) && !spiff.FullscreenUtil.get_inFullscreenMode()) {
				this.$createDeviceLayoutSelectorButton(domObject);
			}
			if ($tab_ToolbarView.shouldAllowFullScreen()) {
				this.$createFullscreenButton(domObject);
			}
			this.updateCustomViewsButton();
		},
		$displayAlertButton: function ToolbarView$DisplayAlertButton(domObject, button) {
			if (tab.FeatureFlags.isEnabled('AlertSidePanel')) {
				this.$createAlertsSidePanelButton(domObject);
			}
			else {
				domObject.append(button.element);
				this.set_$alertButton(button);
			}
		},
		$handleFullscreenChange: function ToolbarView$HandleFullscreenChange() {
			this.$resetMeasurements();
			this.$rebuildToolbarButtons();
		},
		$createCommentingButton: function ToolbarView$CreateCommentingButton(domObject) {
			var handleClick = function() {
				var rightAreaDrawerViewModel = $tab_Application.get_instance().get_rightAreaDrawerViewModel();
				rightAreaDrawerViewModel.toggleCommenting();
			};
			var commentingButtonViewModel = new $tab_ToolbarButtonViewModel(tab.Strings.CommentingToolbarButtonLabel, 'tab-icon-commenting', handleClick);
			var commentingButton = $tab_ToolbarButtonView.create(commentingButtonViewModel);
			domObject.append(commentingButton.element);
			this.disposables.add$1(new tab.CallOnDispose(function() {
				tab.MiscUtil.dispose$1(commentingButton);
			}));
		},
		$createAlertsSidePanelButton: function ToolbarView$CreateAlertsSidePanelButton(domObject) {
			var handleClick = function() {
				var rightAreaDrawerViewModel = $tab_Application.get_instance().get_rightAreaDrawerViewModel();
				rightAreaDrawerViewModel.toggleDataAlertsPanel();
			};
			var alertPanelButtonViewModel = new $tab_ToolbarButtonViewModel(tab.Strings.DataAlertToolbarButtonLabel, 'tab-icon-alert', handleClick);
			var alertPanelButton = $tab_ToolbarButtonView.create(alertPanelButtonViewModel);
			domObject.append(alertPanelButton.element);
			this.disposables.add$1(new tab.CallOnDispose(function() {
				tab.MiscUtil.dispose$1(alertPanelButton);
			}));
		},
		$createLineageSidePanelButton: function ToolbarView$CreateLineageSidePanelButton(domObject) {
			var handleClick = function() {
				var rightAreaDrawerViewModel = $tab_Application.get_instance().get_rightAreaDrawerViewModel();
				rightAreaDrawerViewModel.toggleLineagePanel();
			};
			var lineagePanelButtonViewModel = new $tab_ToolbarButtonViewModel(tab.Strings.DataDetailsToolbarButtonLabel, 'tab-icon-lineage', handleClick);
			var lineagePanelButton = $tab_ToolbarButtonView.create(lineagePanelButtonViewModel);
			domObject.append(lineagePanelButton.element);
			this.disposables.add$1(new tab.CallOnDispose(function() {
				tab.MiscUtil.dispose$1(lineagePanelButton);
			}));
		},
		$createDeviceLayoutSelectorButton: function ToolbarView$CreateDeviceLayoutSelectorButton(domObject) {
			var deviceLayoutSelectorButton = $tab_ToolbarButtonView.create(this.$toolbarViewModel.get_deviceLayoutItem());
			domObject.append(deviceLayoutSelectorButton.element);
			this.disposables.add$1(new tab.CallOnDispose(function() {
				tab.MiscUtil.dispose$1(deviceLayoutSelectorButton);
			}));
		},
		$createFullscreenButton: function ToolbarView$CreateFullscreenButton(domObject) {
			var fullScreenButtonViewModel = (spiff.FullscreenUtil.get_inFullscreenMode() ? new $tab_ToolbarButtonViewModel(tab.Strings.ToolbarExitFullscreen, 'tab-icon-exitFullscreen', spiff.FullscreenUtil.exitFullscreen) : new $tab_ToolbarButtonViewModel(tab.Strings.ToolbarEnterFullscreen, 'tab-icon-enterFullscreen', function() {
				spiff.FullscreenUtil.requestFullscreen(document.documentElement);
			}));
			this.set_$fullScreenButton($tab_ToolbarButtonView.create(fullScreenButtonViewModel));
			domObject.append(this.get_$fullScreenButton().element);
		},
		updateCustomViewsButton: function ToolbarView$UpdateCustomViewsButton() {
			if (ss.isNullOrUndefined(this.get_$customViewsButton())) {
				return;
			}
			var viewName = this.get_$customViewsViewModel().get_currentCustomViewName();
			if (ss.isNullOrUndefined(viewName)) {
				this.get_$customViewsButton().element.css('visibility', 'hidden');
			}
			else {
				this.get_$customViewsButton().element.css('visibility', '');
				this.get_$customViewsButton().element.toggleClass($tab_ToolbarView.$customViewsModifiedClass, this.get_$customViewsViewModel().get_dirty());
				var buttonLabel = tab.Strings.ToolbarCustomViewsTemplate(viewName);
				if (!ss.equalsT(this.get_$customViewsButton().get_toolbarButton().get_label(), buttonLabel)) {
					this.get_$customViewsButton().get_toolbarButton().set_label(buttonLabel);
				}
			}
		},
		$measureToolbarItemsAndHandleResize: function ToolbarView$MeasureToolbarItemsAndHandleResize() {
			if (tsConfig.is_mobile) {
				this.get_dom().toolbar.css('left', '-10000px');
			}
			this.get_dom().toolbar.width('10000px');
			$tab_ToolbarView.$relaxButtonWidths(this.get_dom().rightItems);
			$tab_ToolbarView.$showIfNotNull(this.get_$customViewsButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$editButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$redoButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$alertButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$shareButton());
			$tab_ToolbarView.$showIfNotNull(this.get_$subscribeOthersButton());
			if (this.$buttonNoTextWidth === 0) {
				this.set_$useHorizontalLabels(!this.$toolbarViewModel.get_shouldForceLabelsBelowIcons());
				$tab_ToolbarView.$hideLabels(this.get_dom().leftItems);
				$tab_ToolbarView.$hideLabels(this.get_dom().rightItems);
				this.$vizItemsSmallWidth = this.get_dom().leftItems.outerWidth(true);
				this.$nonVizItemsSmallWidth = this.get_dom().rightItems.outerWidth(true);
				this.$buttonNoTextWidth = ss.coalesce(ss.Int32.trunc(this.get_dom().leftItems.children().first().outerWidth(true)), 0);
			}
			$tab_ToolbarView.$showLabels(this.get_dom().leftItems);
			$tab_ToolbarView.$showLabels(this.get_dom().rightItems);
			if (this.$toolbarViewModel.get_canPutLabelsUnderneath()) {
				this.set_$useHorizontalLabels(false);
				this.$vizItemsStackedWidth = this.get_dom().leftItems.outerWidth(true);
				this.$nonVizItemsStackedWidth = this.get_dom().rightItems.outerWidth(true);
			}
			if (!this.$toolbarViewModel.get_shouldForceLabelsBelowIcons()) {
				this.set_$useHorizontalLabels(true);
				this.$vizItemsWidth = this.get_dom().leftItems.outerWidth(true);
				this.$nonVizItemsWidth = this.get_dom().rightItems.outerWidth(true);
			}
			this.get_dom().toolbar.width('');
			if (tsConfig.is_mobile) {
				this.get_dom().toolbar.css('left', '');
			}
			this.$handleResize();
		},
		$resetMeasurements: function ToolbarView$ResetMeasurements() {
			this.$vizItemsWidth = 0;
			this.$vizItemsStackedWidth = 0;
			this.$vizItemsSmallWidth = 0;
			this.$nonVizItemsWidth = 0;
			this.$nonVizItemsStackedWidth = 0;
			this.$nonVizItemsSmallWidth = 0;
			this.$buttonNoTextWidth = 0;
		},
		forceResizeToolbar: function ToolbarView$ForceResizeToolbar() {
			this.$handleResize();
		},
		$handleResize: function ToolbarView$HandleResize() {
			var $t1 = tabBootstrap.MetricsController.createContext('TBRHRE'.toString(), 64, null);
			try {
				var vizItems = this.get_dom().leftItems;
				var nonVizItems = this.get_dom().rightItems;
				if (vizItems.children().length === 0 && nonVizItems.children().length === 0) {
					return;
				}
				$tab_ToolbarView.$relaxButtonWidths(nonVizItems);
				this.$updateLayout();
			}
			finally {
				if (ss.isValue($t1)) {
					$t1.dispose();
				}
			}
		},
		$onKeyDown: function ToolbarView$OnKeyDown(e) {
			switch (e.which) {
				case 37: {
					this.$moveFocus(-1);
					break;
				}
				case 39: {
					this.$moveFocus(1);
					break;
				}
				default: {
					return;
				}
			}
			e.preventDefault();
			e.stopPropagation();
		},
		$moveFocus: function ToolbarView$MoveFocus(increment) {
			var enabledButtons = this.element.find('.tabToolbarButton:not(.disabled):focusable');
			var currentButton = this.element.find('.tabToolbarButton:focus');
			if (ss.isValue(currentButton[0])) {
				var currentIndex = enabledButtons.index(currentButton[0]);
				enabledButtons.eq((currentIndex + increment) % enabledButtons.length).focus();
			}
		},
		$checkFit: function ToolbarView$CheckFit(totalWidth, leftWidth, rightWidth) {
			return !(leftWidth + rightWidth >= totalWidth);
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_ToolbarViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_ToolbarViewModel])]);
	ss.initClass($tab_ToolbarViewModel, $asm, {
		add_newToolbar: function ToolbarViewModel$add_NewToolbar(value) {
			this.$2$NewToolbarField = ss.delegateCombine(this.$2$NewToolbarField, value);
		},
		remove_newToolbar: function ToolbarViewModel$remove_NewToolbar(value) {
			this.$2$NewToolbarField = ss.delegateRemove(this.$2$NewToolbarField, value);
		},
		get_shouldForceLabelsBelowIcons: function ToolbarViewModel$get_ShouldForceLabelsBelowIcons() {
			return this.get_canPutLabelsUnderneath() && tsConfig.is_mobile;
		},
		get_shouldShowCommenting: function ToolbarViewModel$get_ShouldShowCommenting() {
			return this.$2$ShouldShowCommentingField;
		},
		set_shouldShowCommenting: function ToolbarViewModel$set_ShouldShowCommenting(value) {
			this.$2$ShouldShowCommentingField = value;
		},
		get_canPutLabelsUnderneath: function ToolbarViewModel$get_CanPutLabelsUnderneath() {
			return $tab_ToolbarViewModel.get_toolbarHeight() > 40;
		},
		get_vizCommandItems: function ToolbarViewModel$get_VizCommandItems() {
			return this.$toolbarModel.get_vizCommandItems();
		},
		get_nonVizCommandItems: function ToolbarViewModel$get_NonVizCommandItems() {
			return this.$toolbarModel.get_nonVizCommandItems();
		},
		get_vizItems: function ToolbarViewModel$get_VizItems() {
			return this.$vizItems;
		},
		get_nonVizItems: function ToolbarViewModel$get_NonVizItems() {
			return this.$nonVizItems;
		},
		get_deviceLayoutItem: function ToolbarViewModel$get_DeviceLayoutItem() {
			return this.$2$DeviceLayoutItemField;
		},
		set_deviceLayoutItem: function ToolbarViewModel$set_DeviceLayoutItem(value) {
			this.$2$DeviceLayoutItemField = value;
		},
		get_customViewsViewModel: function ToolbarViewModel$get_CustomViewsViewModel() {
			return this.$customViewsViewModel;
		},
		get_dialogHostViewModel: function ToolbarViewModel$get_DialogHostViewModel() {
			return this.$2$DialogHostViewModelField;
		},
		set_dialogHostViewModel: function ToolbarViewModel$set_DialogHostViewModel(value) {
			this.$2$DialogHostViewModelField = value;
		},
		get_forceHideCustomViewsButton: function ToolbarViewModel$get_ForceHideCustomViewsButton() {
			return this.$forceHideCustomViews;
		},
		get_useSmallScreenToolbar: function ToolbarViewModel$get_UseSmallScreenToolbar() {
			var screen = window.screen;
			return screen.width < $tab_ToolbarViewModel.$sizeToAssumePhonePx || screen.height < $tab_ToolbarViewModel.$sizeToAssumePhonePx;
		},
		dispose: function ToolbarViewModel$Dispose() {
			this.$customViewsViewModel.dispose();
			this.get_dialogHostViewModel().dispose();
			this.$disposeItems();
			spiff.BaseViewModel.prototype.dispose.call(this);
		},
		$buildToolbarItems: function ToolbarViewModel$BuildToolbarItems(commands, itemList) {
			for (var $t1 = 0; $t1 < commands.length; $t1++) {
				var commandItem = commands[$t1];
				var itemWrapper = tab.CommandItemWrapper.create(commandItem);
				tab.Param.verifyValue(commandItem, 'commandItem');
				switch (itemWrapper.get_commandsType()) {
					case 'separator': {
						itemList.push($tab_ToolbarButtonViewModel.createSeparator());
						break;
					}
					case 'item': {
						if ($tab_ToolbarButtonViewModel.shouldShowButton(itemWrapper, this)) {
							this.$addToolbarButton(commandItem, itemList);
						}
						break;
					}
					case 'subcommands': {
						if (ss.referenceEquals(itemWrapper.get_iconRes(), $tab_ToolbarViewModel.$toggleUpdatesSuffix)) {
							var button = { $: this.$addToolbarToggleButton(tab.CommandsPresModelWrapper.create(itemWrapper.get_commands()).get_commandItems(), itemList) };
							var workbook = { $: tab.ApplicationModel.get_instance().get_workbook() };
							workbook.$.withDashboard(ss.mkdel({ workbook: workbook, button: button }, function() {
								if (this.workbook.$.get_isCurrentSheetStoryboard()) {
									this.button.$.set_enabled(false);
								}
							}));
						}
						break;
					}
				}
			}
		},
		$disposeItems: function ToolbarViewModel$DisposeItems() {
			for (var $t1 = 0; $t1 < this.$vizItems.length; $t1++) {
				var item = this.$vizItems[$t1];
				item.dispose();
			}
			ss.clear(this.$vizItems);
			for (var $t2 = 0; $t2 < this.$nonVizItems.length; $t2++) {
				var item1 = this.$nonVizItems[$t2];
				item1.dispose();
			}
			ss.clear(this.$nonVizItems);
		},
		$onCustomViewListChanged: function ToolbarViewModel$OnCustomViewListChanged(sender, args) {
			if (this.$forceHideCustomViews && this.$customViewsViewModel.get_hasCustomViews()) {
				this.$forceHideCustomViews = false;
				this.$handleNewToolbar(null);
			}
		},
		$onNewDeviceLayouts: function ToolbarViewModel$OnNewDeviceLayouts() {
			this.set_deviceLayoutItem($tab_DeviceLayoutToolbarButtonBuilder.buildViewModel(this.$deviceLayoutViewModel.get_deviceLayouts(), this.$deviceLayoutViewModel.get_autoGeneratedDeviceLayouts(), this.get_dialogHostViewModel()));
		},
		$addToolbarButton: function ToolbarViewModel$AddToolbarButton(commandItem, itemList) {
			var item = $tab_ToolbarButtonViewModel.createFromCommandItem(commandItem, $tab_ToolbarViewModel.$iconClassPrefix, this);
			var $t1 = this.get_dialogHostViewModel();
			item.add_showDialogRequested(ss.mkdel($t1, $t1.show));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				var $t2 = this.get_dialogHostViewModel();
				item.remove_showDialogRequested(ss.mkdel($t2, $t2.show));
			})));
			itemList.push(item);
		},
		$addToolbarToggleButton: function ToolbarViewModel$AddToolbarToggleButton(commandItems, itemList) {
			if (commandItems.length !== 2) {
				tab.Log.get(this).warn('Invalid command count. Toggle button for %s not created.', [commandItems.toString()]);
				return null;
			}
			var toggleButton = $tab_ToolbarToggleButtonViewModel.createFromCommandItems(commandItems[0], commandItems[1], $tab_ToolbarViewModel.$iconClassPrefix);
			if (ss.isValue(toggleButton)) {
				itemList.push(toggleButton);
			}
			return toggleButton;
		},
		$handleNewToolbar: function ToolbarViewModel$HandleNewToolbar(oldNewSheetNames) {
			var $t1 = tabBootstrap.MetricsController.createContext('TBRHNT'.toString(), 64, null);
			try {
				this.$disposeItems();
				if (tsConfig.toolbarvis) {
					this.$buildToolbarItems(this.$toolbarModel.get_vizCommandItems(), this.$vizItems);
				}
				this.$buildToolbarItems(this.$toolbarModel.get_nonVizCommandItems(), this.$nonVizItems);
				this.raiseActionEvent(this.$2$NewToolbarField);
			}
			finally {
				if (ss.isValue($t1)) {
					$t1.dispose();
				}
			}
		},
		generateDebugRenderModeFlag: function ToolbarViewModel$GenerateDebugRenderModeFlag() {
			this.$renderModelLabel = $('<span>').addClass('tab-debugRenderMode');
			this.$renderModelLabel.get(0).title = $tab_ToolbarViewModel.$renderingIndicatorExplanation;
			this.updateRenderModeText(tab.ApplicationModel.get_instance().get_isLocalRenderMode());
			return this.$renderModelLabel;
		},
		updateRenderModeText: function ToolbarViewModel$UpdateRenderModeText(localRenderMode) {
			if (ss.isValue(this.$renderModelLabel)) {
				var renderModeText = 'R' + (localRenderMode ? 'B' : 'S');
				this.$renderModelLabel.text(renderModeText);
			}
		},
		isLegacyMenuItemEnabled: function ToolbarViewModel$IsLegacyMenuItemEnabled(name) {
			return this.$toolbarModel.isLegacyMenuItemEnabled(name);
		},
		showPerformanceMetrics: function ToolbarViewModel$ShowPerformanceMetrics() {
			tab.CommandController.get().legacySession.saveAndOpenMetricsView();
		},
		showDebugToolsMenu: function ToolbarViewModel$ShowDebugToolsMenu(relativeDom) {
			tab.ModuleManager.load(tab.IDebugToolsModule).call(null, []).done(function(module) {
				module.initTools();
				var menu = module.createDebugToolsMenu();
				var options = new spiff.ShowMenuOptions(relativeDom, false);
				spiff.MenuViewModel.createForMenu(menu, $tab_WidgetUtil.commandMenuItemClicked, null, null, null, true).show(options);
			});
		},
		showDialog: function ToolbarViewModel$ShowDialog(iconType) {
			var $t1 = ss.getEnumerator(this.get_nonVizItems());
			try {
				while ($t1.moveNext()) {
					var button = $t1.current();
					if (ss.equalsT(iconType, button.get_iconType())) {
						if (iconType === 'alert') {
							button.execute();
						}
						else {
							button.showDialog();
						}
					}
				}
			}
			finally {
				$t1.dispose();
			}
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_Tooltip, $asm, {
		add_closed: function Tooltip$add_Closed(value) {
			this.$2$ClosedField = ss.delegateCombine(this.$2$ClosedField, value);
		},
		remove_closed: function Tooltip$remove_Closed(value) {
			this.$2$ClosedField = ss.delegateRemove(this.$2$ClosedField, value);
		},
		add_prePosition: function Tooltip$add_PrePosition(value) {
			this.$2$PrePositionField = ss.delegateCombine(this.$2$PrePositionField, value);
		},
		remove_prePosition: function Tooltip$remove_PrePosition(value) {
			this.$2$PrePositionField = ss.delegateRemove(this.$2$PrePositionField, value);
		},
		add_positionCalculated: function Tooltip$add_PositionCalculated(value) {
			this.$2$PositionCalculatedField = ss.delegateCombine(this.$2$PositionCalculatedField, value);
		},
		remove_positionCalculated: function Tooltip$remove_PositionCalculated(value) {
			this.$2$PositionCalculatedField = ss.delegateRemove(this.$2$PositionCalculatedField, value);
		},
		add_showed: function Tooltip$add_Showed(value) {
			this.$2$ShowedField = ss.delegateCombine(this.$2$ShowedField, value);
		},
		remove_showed: function Tooltip$remove_Showed(value) {
			this.$2$ShowedField = ss.delegateRemove(this.$2$ShowedField, value);
		},
		add_positioned: function Tooltip$add_Positioned(value) {
			this.$2$PositionedField = ss.delegateCombine(this.$2$PositionedField, value);
		},
		remove_positioned: function Tooltip$remove_Positioned(value) {
			this.$2$PositionedField = ss.delegateRemove(this.$2$PositionedField, value);
		},
		get_isShown: function Tooltip$get_IsShown() {
			return this.$isShown;
		},
		get_body: function Tooltip$get_Body() {
			return this.$domTemplate.get_body();
		},
		get_location: function Tooltip$get_Location() {
			return this.$showPosition;
		},
		set_location: function Tooltip$set_Location(value) {
			this.move(value);
		},
		get_horizontalOffset: function Tooltip$get_HorizontalOffset() {
			return this.$horizontalOffset;
		},
		set_horizontalOffset: function Tooltip$set_HorizontalOffset(value) {
			this.$horizontalOffset = value;
		},
		get_verticalOffset: function Tooltip$get_VerticalOffset() {
			return this.$verticalOffset;
		},
		set_verticalOffset: function Tooltip$set_VerticalOffset(value) {
			this.$verticalOffset = value;
		},
		get_lastLocation: function Tooltip$get_LastLocation() {
			return this.$lastLocation;
		},
		set_lastLocation: function Tooltip$set_LastLocation(value) {
			this.$lastLocation = value;
		},
		get_calculatedShownArgs: function Tooltip$get_CalculatedShownArgs() {
			return this.$calculatedShownArgs;
		},
		get_showAbove: function Tooltip$get_ShowAbove() {
			return this.$showAbove;
		},
		set_showAbove: function Tooltip$set_ShowAbove(value) {
			this.$showAbove = value;
		},
		get_freezePositionWhileOpen: function Tooltip$get_FreezePositionWhileOpen() {
			return this.$2$FreezePositionWhileOpenField;
		},
		set_freezePositionWhileOpen: function Tooltip$set_FreezePositionWhileOpen(value) {
			this.$2$FreezePositionWhileOpenField = value;
		},
		setTooltipBodyAndReposition: function Tooltip$SetTooltipBodyAndReposition(body, beforePositioningAction) {
			this.requestLayout(ss.mkdel(this, function() {
				if (!ss.staticEquals(beforePositioningAction, null)) {
					beforePositioningAction();
				}
				this.get_body().empty().append(body);
			}), false);
		},
		allowMouseEventPassthrough: function Tooltip$AllowMouseEventPassthrough(allow) {
			this.element.toggleClass('tab-allowMouseEventPassthrough', allow);
		},
		isInSafeZone: function Tooltip$IsInSafeZone(position, applyOffset) {
			var tooltipPosition = this.element.position();
			var width = tab.DoubleUtil.roundToInt(this.element.outerWidth());
			var height = tab.DoubleUtil.roundToInt(this.element.outerHeight());
			var horizontalBuffer = $tab_Tooltip.$safeAreaPxBuffer;
			var verticalBuffer = $tab_Tooltip.$safeAreaPxBuffer;
			if (applyOffset) {
				horizontalBuffer += this.get_horizontalOffset();
				verticalBuffer += this.get_verticalOffset();
			}
			return position.x >= tooltipPosition.left - horizontalBuffer && position.x <= tooltipPosition.left + width + horizontalBuffer && position.y >= tooltipPosition.top - verticalBuffer && position.y <= tooltipPosition.top + height + verticalBuffer;
		},
		show: function Tooltip$Show(body, position) {
			if (ss.isNullOrUndefined(position) || this.$suppressTooltip) {
				this.close();
				return;
			}
			tab.Log.get(this).debug('Show: position=(%dx, %dy), body=%o', [position.x, position.y, body]);
			this.set_lastLocation(position);
			this.ensureAttachedAndSized();
			this.$showTooltipAfterPositioning = true;
			if (this.get_isShown()) {
				this.setTooltipBodyAndReposition(body, null);
			}
			else {
				this.get_body().empty().append(body);
				this.requestLayout(null, false);
			}
		},
		move: function Tooltip$Move(position) {
			if (!this.$isShown || ss.isNullOrUndefined(position) || ss.isValue(this.$showPosition) && this.$showPosition.x === position.x && this.$showPosition.y === position.y) {
				return;
			}
			this.$lastLocation = position;
			this.requestLayout(null, false);
		},
		close: function Tooltip$Close() {
			this.set_freezePositionWhileOpen(false);
			this.$showTooltipAfterPositioning = false;
			if (!this.$isShown) {
				return;
			}
			tab.Log.get(this).debug('Close', []);
			this.detach();
			this.$isShown = false;
			this.onClosed();
		},
		hideUntilReposition: function Tooltip$HideUntilReposition() {
			this.element.hide();
			this.$showTooltipAfterPositioning = true;
		},
		dispose: function Tooltip$Dispose() {
			tab.Log.get(this).debug('Dispose', []);
			this.close();
			if (!tsConfig.is_mobile) {
				$(window).off(this.createNamespacedEventName('resize'));
			}
			spiff.Widget.prototype.dispose.call(this);
		},
		forceLayout: function Tooltip$ForceLayout() {
			this.$calculatedShownArgs = null;
			this.set_freezePositionWhileOpen(false);
			this.requestLayout(null, false);
		},
		requestLayout: function Tooltip$RequestLayout(callback, justPosition) {
			if (!ss.staticEquals(callback, null)) {
				this.$prePositionActions.push(callback);
			}
			$tab_BrowserViewport.getViewport(ss.mkdel(this, function(v) {
				this.layoutTooltip(v, justPosition);
			}));
		},
		onShowed: function Tooltip$OnShowed() {
			if (!ss.staticEquals(this.$2$ShowedField, null)) {
				this.$2$ShowedField();
			}
		},
		onPrePosition: function Tooltip$OnPrePosition() {
			if (!ss.staticEquals(this.$2$PrePositionField, null)) {
				this.$2$PrePositionField();
			}
		},
		onPositionCalculated: function Tooltip$OnPositionCalculated() {
			if (!ss.staticEquals(this.$2$PositionCalculatedField, null)) {
				this.$2$PositionCalculatedField();
			}
		},
		onPositioned: function Tooltip$OnPositioned() {
			if (!ss.staticEquals(this.$2$PositionedField, null)) {
				this.$2$PositionedField();
			}
		},
		onClosed: function Tooltip$OnClosed() {
			if (!ss.staticEquals(this.$2$ClosedField, null)) {
				this.$2$ClosedField();
			}
		},
		ensureAttachedAndSized: function Tooltip$EnsureAttachedAndSized() {
			if (!this.element.parent().is(document.body)) {
				this.element.appendTo(document.body);
			}
		},
		$removeTextSelectionIfExists: function Tooltip$RemoveTextSelectionIfExists() {
			ss.Debug.assert(this.element.length !== 0, 'paranoid, a widget should always have an underlying element');
			if (tab.DomUtil.nodeHasTextSelection(this.element.get(0))) {
				window.getSelection().removeAllRanges();
			}
		},
		detach: function Tooltip$Detach() {
			this.$removeTextSelectionIfExists();
			this.element.hide();
			this.element.detach();
			this.element.off(this.get_eventNamespace());
			this.element.find('*').off(this.get_eventNamespace()).removeClass('hover');
		},
		$calculateTooltipPosition: function Tooltip$CalculateTooltipPosition(position, viewportRect) {
			if (ss.isNullOrUndefined(position) || ss.isNullOrUndefined(viewportRect)) {
				tab.Log.get(this).debug('An input to calculate tooltip postion was null: positionIsNull=' + ss.isNullOrUndefined(position) + ', viewportRectIsNull=' + ss.isNullOrUndefined(viewportRect), []);
				return null;
			}
			this.$showPosition = position;
			var forceAbove = ss.isValue(this.$verticalCutoffForAbovePositioning) && position.y >= ss.unbox(this.$verticalCutoffForAbovePositioning) - $tab_Tooltip.$verticalCutoffBuffer;
			var tooltipHeight = tab.DoubleUtil.roundToInt(this.element.height());
			var tooltipWidth = tab.DoubleUtil.roundToInt(this.element.width());
			var room = viewportRect.getVisibleRoom(position, 1);
			var heightPlusOffset = tooltipHeight + this.get_verticalOffset();
			var widthPlusOffset = tooltipWidth + this.get_horizontalOffset();
			tab.Log.get(this).debug('Calculating X position: roomRight=%d, roomLeft=%d, width+offset=%d', [room.roomRight, room.roomLeft, widthPlusOffset]);
			var right;
			var x;
			if (room.roomRight >= widthPlusOffset) {
				tab.Log.get(this).debug('right', []);
				right = true;
				x = position.x + this.get_horizontalOffset();
			}
			else if (room.roomLeft >= widthPlusOffset) {
				tab.Log.get(this).debug('left', []);
				right = false;
				if (room.roomAbove >= heightPlusOffset || room.roomBelow >= heightPlusOffset) {
					x = position.x + ss.Int32.trunc(room.roomRight) - tooltipWidth;
				}
				else {
					x = position.x - widthPlusOffset;
				}
			}
			else {
				tab.Log.get(this).debug('horizontal fit', []);
				right = true;
				x = Math.max(0, position.x - tooltipWidth + ss.Int32.trunc(room.roomRight));
			}
			tab.Log.get(this).debug('Calculating Y position: roomAbove=%d, roomBelow=%d, height+offset=%d', [room.roomAbove, room.roomBelow, heightPlusOffset]);
			var y = (this.get_showAbove() ? this.$calculateVerticalPositionPreferAbove(position, room, heightPlusOffset, widthPlusOffset) : this.$calculateVerticalPositionPreferBelow(position, room, heightPlusOffset, widthPlusOffset, forceAbove));
			var above = y <= position.y;
			tab.Log.get(this).debug('open at (%d, %d)', [x, y]);
			var showArgs = new $tab_ShownTooltipEventArgs();
			if (above) {
				if (right) {
					showArgs.position = 'AR';
				}
				else {
					showArgs.position = 'AL';
				}
			}
			else if (right) {
				showArgs.position = 'BR';
			}
			else {
				showArgs.position = 'BL';
			}
			showArgs.shownX = x;
			showArgs.shownY = y;
			showArgs.tooltipAnchorY = y;
			showArgs.origX = position.x;
			showArgs.origY = position.y;
			showArgs.viewport = viewportRect;
			return showArgs;
		},
		$storeCalculatedPosition: function Tooltip$StoreCalculatedPosition(showArgs) {
			if (ss.isValue(showArgs)) {
				var positionClass = this.$positionClassFromRelativePosition(showArgs.position);
				if (!this.element.hasClass(positionClass)) {
					this.element.removeClass($tab_Tooltip.$allRelativePositionClasses);
					this.element.addClass(positionClass);
				}
				this.$calculatedShownArgs = showArgs;
			}
		},
		$positionTooltip: function Tooltip$PositionTooltip() {
			if (ss.isValue(this.$calculatedShownArgs)) {
				this.element.css(ss.mkdict(['left', this.$calculatedShownArgs.shownX + 'px', 'top', this.$calculatedShownArgs.shownY + 'px']));
			}
		},
		$positionClassFromRelativePosition: function Tooltip$PositionClassFromRelativePosition(relativePosition) {
			var positionClass;
			switch (relativePosition) {
				case 'AR': {
					positionClass = $tab_Tooltip.aboveRightClass;
					break;
				}
				case 'AL': {
					positionClass = $tab_Tooltip.aboveLeftClass;
					break;
				}
				case 'BL': {
					positionClass = $tab_Tooltip.belowLeftClass;
					break;
				}
				case 'BR':
				default: {
					positionClass = $tab_Tooltip.belowRightClass;
					break;
				}
			}
			return positionClass;
		},
		layoutTooltip: function Tooltip$LayoutTooltip(viewport, justPosition) {
			this.element.css(ss.mkdict(['top', '0', 'left', '0']));
			if (this.get_freezePositionWhileOpen()) {
				tab.Log.get(this).debug('About to layout the frozen tooltip.', []);
				this.$layoutFrozenTooltip();
			}
			else if (justPosition) {
				tab.Log.get(this).debug('About to layout the tooltip without triggering events.', []);
				var shownArgs = this.$calculateTooltipPosition(this.get_lastLocation(), viewport);
				if (ss.isNullOrUndefined(shownArgs)) {
					tab.Log.get(this).debug($tab_Tooltip.$tooltipNullDebugMessage, []);
					return;
				}
				this.$storeCalculatedPosition(shownArgs);
				this.$positionTooltip();
			}
			else {
				tab.Log.get(this).debug('About to layout the tooltip.', []);
				this.$invokePrePositionActions();
				this.onPrePosition();
				var shownArgs1 = this.$calculateTooltipPosition(this.get_lastLocation(), viewport);
				if (ss.isNullOrUndefined(shownArgs1)) {
					tab.Log.get(this).debug($tab_Tooltip.$tooltipNullDebugMessage, []);
				}
				if (!this.$shouldChangeTooltipPosition(shownArgs1)) {
					this.$positionTooltip();
					tab.Log.get(this).debug('Tooltip layout was requested, but we are not changing position.', []);
					return;
				}
				this.$storeCalculatedPosition(shownArgs1);
				this.onPositionCalculated();
				if (this.$showTooltipAfterPositioning) {
					this.$showTooltipAfterPositioning = false;
					this.$showTooltip();
				}
				this.$positionTooltip();
				this.onPositioned();
			}
		},
		$layoutFrozenTooltip: function Tooltip$LayoutFrozenTooltip() {
			this.$invokePrePositionActions();
			this.$showTooltip();
			this.$positionTooltip();
			this.onPositioned();
		},
		$showTooltip: function Tooltip$ShowTooltip() {
			this.element.show();
			this.$isShown = true;
			this.onShowed();
		},
		$invokePrePositionActions: function Tooltip$InvokePrePositionActions() {
			for (var $t1 = 0; $t1 < this.$prePositionActions.length; $t1++) {
				var prePositionAction = this.$prePositionActions[$t1];
				prePositionAction();
			}
			ss.clear(this.$prePositionActions);
		},
		$shouldChangeTooltipPosition: function Tooltip$ShouldChangeTooltipPosition(showArgs) {
			if (ss.isNullOrUndefined(showArgs)) {
				return false;
			}
			if (this.$showTooltipAfterPositioning) {
				return true;
			}
			if ($tab_ShownTooltipEventArgs.areShownArgsSame(showArgs, this.$calculatedShownArgs)) {
				return false;
			}
			return true;
		},
		$calculateVerticalPositionPreferBelow: function Tooltip$CalculateVerticalPositionPreferBelow(position, room, heightPlusOffset, widthPlusOffset, forceAbove) {
			var y;
			if (!forceAbove && room.roomBelow >= heightPlusOffset) {
				tab.Log.get(this).debug('below', []);
				y = position.y + this.get_verticalOffset();
				this.$verticalCutoffForAbovePositioning = null;
			}
			else if (!forceAbove && room.roomAbove >= heightPlusOffset && room.roomRight >= widthPlusOffset) {
				tab.Log.get(this).debug('side', []);
				y = position.y + (ss.Int32.trunc(room.roomBelow) - heightPlusOffset + this.get_verticalOffset());
			}
			else if (room.roomAbove >= heightPlusOffset) {
				tab.Log.get(this).debug('above', []);
				y = position.y - heightPlusOffset;
				if (!ss.isValue(this.$verticalCutoffForAbovePositioning)) {
					this.$verticalCutoffForAbovePositioning = position.y;
				}
			}
			else {
				tab.Log.get(this).debug('vertical fit', []);
				y = Math.max(0, position.y - ss.Int32.trunc(room.roomAbove));
			}
			return y;
		},
		$calculateVerticalPositionPreferAbove: function Tooltip$CalculateVerticalPositionPreferAbove(position, room, heightPlusOffset, widthPlusOffset) {
			var y;
			if (room.roomAbove >= heightPlusOffset) {
				tab.Log.get(this).debug('above', []);
				y = position.y - heightPlusOffset;
				if (!ss.isValue(this.$verticalCutoffForAbovePositioning)) {
					this.$verticalCutoffForAbovePositioning = position.y;
				}
			}
			else if (room.roomBelow >= heightPlusOffset) {
				tab.Log.get(this).debug('below', []);
				y = position.y + this.get_verticalOffset();
				this.$verticalCutoffForAbovePositioning = null;
			}
			else if (room.roomAbove >= heightPlusOffset && room.roomRight >= widthPlusOffset) {
				tab.Log.get(this).debug('side', []);
				y = position.y + (ss.Int32.trunc(room.roomBelow) - heightPlusOffset + this.get_verticalOffset());
			}
			else {
				tab.Log.get(this).debug('vertical fit', []);
				y = Math.max(0, position.y - ss.Int32.trunc(room.roomAbove));
			}
			return y;
		},
		setSuppressTooltip: function Tooltip$SetSuppressTooltip(suppress) {
			this.$suppressTooltip = suppress;
			if (this.$suppressTooltip && this.$isShown && !this.isInSafeZone(this.get_lastLocation(), false)) {
				this.close();
			}
		}
	}, spiff.Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable, $tab_IMovable]);
	ss.initClass($tab_TooltipBaseMode, $asm, {
		add_tooltipClosed: function TooltipBaseMode$add_TooltipClosed(value) {
			this.$1$TooltipClosedField = ss.delegateCombine(this.$1$TooltipClosedField, value);
		},
		remove_tooltipClosed: function TooltipBaseMode$remove_TooltipClosed(value) {
			this.$1$TooltipClosedField = ss.delegateRemove(this.$1$TooltipClosedField, value);
		},
		add_mouseExitedTooltip: function TooltipBaseMode$add_MouseExitedTooltip(value) {
			this.$1$MouseExitedTooltipField = ss.delegateCombine(this.$1$MouseExitedTooltipField, value);
		},
		remove_mouseExitedTooltip: function TooltipBaseMode$remove_MouseExitedTooltip(value) {
			this.$1$MouseExitedTooltipField = ss.delegateRemove(this.$1$MouseExitedTooltipField, value);
		},
		add_ubertipUpdated: function TooltipBaseMode$add_UbertipUpdated(value) {
			this.$1$UbertipUpdatedField = ss.delegateCombine(this.$1$UbertipUpdatedField, value);
		},
		remove_ubertipUpdated: function TooltipBaseMode$remove_UbertipUpdated(value) {
			this.$1$UbertipUpdatedField = ss.delegateRemove(this.$1$UbertipUpdatedField, value);
		},
		add_ubertipActionExecuted: function TooltipBaseMode$add_UbertipActionExecuted(value) {
			this.$1$UbertipActionExecutedField = ss.delegateCombine(this.$1$UbertipActionExecutedField, value);
		},
		remove_ubertipActionExecuted: function TooltipBaseMode$remove_UbertipActionExecuted(value) {
			this.$1$UbertipActionExecutedField = ss.delegateRemove(this.$1$UbertipActionExecutedField, value);
		},
		add_ubertipCommandExecuted: function TooltipBaseMode$add_UbertipCommandExecuted(value) {
			this.$1$UbertipCommandExecutedField = ss.delegateCombine(this.$1$UbertipCommandExecutedField, value);
		},
		remove_ubertipCommandExecuted: function TooltipBaseMode$remove_UbertipCommandExecuted(value) {
			this.$1$UbertipCommandExecutedField = ss.delegateRemove(this.$1$UbertipCommandExecutedField, value);
		},
		get_isTooltipShown: function TooltipBaseMode$get_IsTooltipShown() {
			return this.get_tooltip().get_isShown();
		},
		get_visualIDPresModel: function TooltipBaseMode$get_VisualIDPresModel() {
			return this.$1$VisualIDPresModelField;
		},
		set_visualIDPresModel: function TooltipBaseMode$set_VisualIDPresModel(value) {
			this.$1$VisualIDPresModelField = value;
		},
		get_tooltip: function TooltipBaseMode$get_Tooltip() {
			return this.$1$TooltipField;
		},
		set_tooltip: function TooltipBaseMode$set_Tooltip(value) {
			this.$1$TooltipField = value;
		},
		get_ubertip: function TooltipBaseMode$get_Ubertip() {
			return this.$1$UbertipField;
		},
		set_ubertip: function TooltipBaseMode$set_Ubertip(value) {
			this.$1$UbertipField = value;
		},
		get_currentBehavior: function TooltipBaseMode$get_CurrentBehavior() {
			return this.$getTooltipBehavior(this.get_currentBehaviorType());
		},
		get_currentBehaviorType: function TooltipBaseMode$get_CurrentBehaviorType() {
			return this.$1$CurrentBehaviorTypeField;
		},
		set_currentBehaviorType: function TooltipBaseMode$set_CurrentBehaviorType(value) {
			this.$1$CurrentBehaviorTypeField = value;
		},
		get_defaultBehaviorType: function TooltipBaseMode$get_DefaultBehaviorType() {
			return this.$1$DefaultBehaviorTypeField;
		},
		set_defaultBehaviorType: function TooltipBaseMode$set_DefaultBehaviorType(value) {
			this.$1$DefaultBehaviorTypeField = value;
		},
		get_ubertipShouldEnforceButtonOrdering: function TooltipBaseMode$get_UbertipShouldEnforceButtonOrdering() {
			return false;
		},
		get_currentTooltipMode: null,
		get_multiSelectCompleteBehavior: function TooltipBaseMode$get_MultiSelectCompleteBehavior() {
			return 'sticky';
		},
		get_hasContextProvider: function TooltipBaseMode$get_HasContextProvider() {
			return ss.isValue(this.$contextProvider);
		},
		get_$tooltipFailureCallback: function TooltipBaseMode$get_TooltipFailureCallback() {
			return ss.mkdel(this, this.$handleUbertipRemoteFailure);
		},
		get_testUseOnlyLastHoveredObjectID: function TooltipBaseMode$get_TestUseOnlyLastHoveredObjectID() {
			return $tab_TooltipBaseMode.$lastHoveredObjectIds;
		},
		set_testUseOnlyLastHoveredObjectID: function TooltipBaseMode$set_TestUseOnlyLastHoveredObjectID(value) {
			$tab_TooltipBaseMode.$lastHoveredObjectIds = value;
		},
		close: function TooltipBaseMode$Close() {
			this.get_tooltip().close();
		},
		hoverOverObject: function TooltipBaseMode$HoverOverObject(pageCoords, regionCoords, hoveredObjectId, isObjectSelected, paneDescriptorKey, targetType, regionPart) {
			if (!this.readyForHover) {
				return;
			}
			if (ss.isNullOrUndefined(hoveredObjectId)) {
				tab.Log.get(this).debug('HoverOverObject requires hoveredObject to be specified. Returning early.', []);
				return;
			}
			var requiredBehavior = this.getHoverBehavior(targetType);
			this.switchTooltipMode(requiredBehavior);
			var isSameObject = ss.referenceEquals(hoveredObjectId.toString(), $tab_TooltipBaseMode.$lastHoveredObjectIds);
			var behaviorCallback = ss.mkdel(this, function(model) {
				var isVizTooltipEmpty = regionPart === 'viz' && $tab_TooltipBaseMode.isUbertipHtmlEmpty(model);
				this.get_currentBehavior().hoverOverObject(pageCoords, isObjectSelected, isVizTooltipEmpty, isSameObject);
			});
			if (targetType === 'mark' && tab.ApplicationModel.get_instance().get_isLocalRenderMode() && ss.isValue(paneDescriptorKey) && !this.shouldForceRemoteTooltipForObject(targetType, hoveredObjectId)) {
				if (isSameObject) {
					behaviorCallback(this.get_ubertip().get_model());
				}
				else {
					var affectedObjects = this.getAffectedObjects('mark', hoveredObjectId);
					this.runBehaviorWithLocalUbertip(behaviorCallback, hoveredObjectId, affectedObjects, regionCoords, paneDescriptorKey, regionPart, targetType, 'on-hover');
				}
			}
			else {
				this.runBehaviorWithRemoteUbertip(behaviorCallback, { x: regionCoords.x, y: regionCoords.y, w: 0, h: 0 }, regionPart, 'on-hover', targetType, null, this.getAffectedObjects('mark', hoveredObjectId), false, null);
			}
		},
		hoverOverWhitespace: function TooltipBaseMode$HoverOverWhitespace(pageCoords, regionPart) {
			if (!this.readyForHover) {
				return;
			}
			var whitespaceBefore = ss.referenceEquals($tab_TooltipBaseMode.whitespaceObjectId, $tab_TooltipBaseMode.$lastHoveredObjectIds);
			this.get_currentBehavior().hoverOverWhitespace(pageCoords);
			if (this.get_currentBehavior().isHoverAllowed(pageCoords)) {
				if (!whitespaceBefore) {
					var needRemoteTooltip = this.needRemoteCommand(regionPart, 'whitespace', 'on-hover', tab.VizDataUtils.invalidTupleId, null);
					if (needRemoteTooltip === 1 || needRemoteTooltip === 2) {
						$tab_TooltipBaseMode.$lastHoveredObjectIds = $tab_TooltipBaseMode.whitespaceObjectId;
						this.runBehaviorWithRemoteUbertip(null, { x: -1, y: -1, w: 0, h: 0 }, regionPart, 'on-hover', 'whitespace', null, null, false, null);
					}
				}
			}
			else if (this.get_tooltip().get_isShown()) {
				$tab_TooltipBaseMode.$lastHoveredObjectIds = $tab_TooltipBaseMode.whitespaceObjectId;
				this.get_tooltip().close();
			}
		},
		hoverOverHeader: function TooltipBaseMode$HoverOverHeader(pageCoords, regionCoords, targetType, regionPart, interactedTupleIds) {
			if (!this.readyForHover) {
				return;
			}
			var executeUrlActions = interactedTupleIds.length > 0 && tab.ActionUtils.getApplicableActions(this.get_visualIDPresModel().worksheet, 'on-hover', 'url').length > 0;
			if (executeUrlActions) {
				var isDiffHeader = !ss.referenceEquals(interactedTupleIds.toString(), $tab_TooltipBaseMode.$lastHoveredObjectIds);
				this.hoverOverCoordinates(pageCoords, regionCoords, targetType, regionPart, null, interactedTupleIds, isDiffHeader);
			}
			else {
				this.hoverOverCoordinates(pageCoords, regionCoords, targetType, regionPart, null, null, false);
			}
		},
		hoverOverCoordinates: function TooltipBaseMode$HoverOverCoordinates(pageCoords, regionCoords, targetType, regionPart, fieldNames, interactedTupleIds, executeUrlActions) {
			if (!this.readyForHover) {
				return;
			}
			$tab_TooltipBaseMode.$lastHoveredObjectIds = (ss.isValue(interactedTupleIds) ? interactedTupleIds.toString() : $tab_TooltipBaseMode.unknownObjectId);
			var requiredBehavior = this.getHoverBehavior(targetType);
			this.switchTooltipMode(requiredBehavior);
			var behaviorCallback = ss.mkdel(this, function(model) {
				var isVizTooltipEmpty = regionPart === 'viz' && $tab_TooltipBaseMode.isUbertipHtmlEmpty(model);
				this.get_currentBehavior().hoverOverObject(pageCoords, false, isVizTooltipEmpty, false);
			});
			this.runBehaviorWithRemoteUbertip(behaviorCallback, { x: regionCoords.x, y: regionCoords.y, w: 0, h: 0 }, regionPart, 'on-hover', targetType, fieldNames, interactedTupleIds, executeUrlActions, null);
		},
		singleSelectComplete: function TooltipBaseMode$SingleSelectComplete(pageCoords, regionCoords, selectedObjectId, paneDescriptorKey, targetType, regionPart) {
			var requiredBehavior = this.getSingleSelectBehavior(targetType);
			this.switchTooltipMode(requiredBehavior);
			this.suppressHoverIfNecesary();
			var behaviorCallback = this.getSingleSelectBehaviorCallback(pageCoords);
			if (tab.ApplicationModel.get_instance().get_isLocalRenderMode() && targetType === 'mark') {
				var affectedTupleIds = this.getAffectedObjects(targetType, selectedObjectId);
				this.runBehaviorWithLocalUbertip(behaviorCallback, selectedObjectId, affectedTupleIds, regionCoords, paneDescriptorKey, regionPart, targetType, 'on-select');
			}
			else {
				var regionSelectionRect = { x: regionCoords.x, y: regionCoords.y, w: 0, h: 0 };
				this.runBehaviorWithRemoteUbertip(behaviorCallback, regionSelectionRect, regionPart, 'on-select', targetType, null, null, false, null);
			}
		},
		singleSelectCoordinates: function TooltipBaseMode$SingleSelectCoordinates(pageCoords, regionCoords, regionPart, targetType, fieldNames) {
			var requiredBehavior = this.getSingleSelectBehavior(targetType);
			this.switchTooltipMode(requiredBehavior);
			var behaviorCallback = ss.mkdel(this, function(_) {
				this.$singleSelectCoordinates_BehaviorCallback(pageCoords);
			});
			this.runBehaviorWithRemoteUbertip(behaviorCallback, { x: regionCoords.x, y: regionCoords.y, w: 0, h: 0 }, regionPart, 'on-select', targetType, fieldNames, null, false, null);
		},
		$singleSelectCoordinates_BehaviorCallback: function TooltipBaseMode$SingleSelectCoordinates_BehaviorCallback(pageCoords) {
			this.get_currentBehavior().singleSelectComplete(pageCoords);
			if (this.get_tooltip().get_isShown()) {
				this.triggerUbertipButtonUpdate();
			}
		},
		multiSelectComplete: function TooltipBaseMode$MultiSelectComplete(pageAnchorPoint, regionSelectionRect, regionPart) {
			this.switchTooltipMode(this.get_multiSelectCompleteBehavior());
			this.suppressHoverIfNecesary();
			var behaviorCallback = ss.mkdel(this, function() {
				this.get_currentBehavior().multiSelectComplete(pageAnchorPoint);
				$tab_TooltipBaseMode.$lastHoveredObjectIds = $tab_TooltipBaseMode.unknownObjectId;
				if (this.get_tooltip().get_isShown()) {
					this.triggerUbertipButtonUpdate();
				}
			});
			this.runBehaviorWithRemoteUbertip(behaviorCallback, regionSelectionRect, regionPart, 'on-select', 'unspecified', null, null, false, null);
		},
		selectionMoved: function TooltipBaseMode$SelectionMoved(pageCoords) {
			this.get_currentBehavior().selectionMoved(pageCoords);
		},
		repositionWithinRegion: function TooltipBaseMode$RepositionWithinRegion(pageRegion) {
			this.get_currentBehavior().repositionWithinRegion(pageRegion);
		},
		onTap: function TooltipBaseMode$OnTap() {
		},
		onScroll: function TooltipBaseMode$OnScroll() {
			this.get_currentBehavior().onScroll();
		},
		onMoving: function TooltipBaseMode$OnMoving() {
		},
		onDragEnd: function TooltipBaseMode$OnDragEnd(regionDimension) {
		},
		onPanOrDragStart: function TooltipBaseMode$OnPanOrDragStart(regionDimension) {
			this.get_currentBehavior().onPanningOrDragging();
		},
		onPinchEnd: function TooltipBaseMode$OnPinchEnd(regionDimension) {
		},
		onPress: function TooltipBaseMode$OnPress() {
		},
		onMouseLeaveTheView: function TooltipBaseMode$OnMouseLeaveTheView() {
			$tab_TooltipBaseMode.$lastHoveredObjectIds = $tab_TooltipBaseMode.unknownObjectId;
		},
		dispose: function TooltipBaseMode$Dispose() {
			if (ss.keyExists(this.tooltipBehaviors, this.get_currentBehaviorType())) {
				this.tooltipBehaviors[this.get_currentBehaviorType()].detach();
			}
			this.disposables.dispose();
			this.get_tooltip().get_body().off($tab_TooltipBaseMode.$tooltipMouseLeaveListener);
			this.get_tooltip().dispose();
			this.get_tooltip().remove_closed(ss.mkdel(this, this.$onClose));
			this.get_tooltip().remove_prePosition(ss.mkdel(this, this.$allowHoverIfShown));
			this.get_tooltip().remove_showed(ss.mkdel(this, this.$allowHoverIfShown));
			this.get_ubertip().remove_commandExecuted(ss.mkdel(this, this.$onUbertipCommandExecuted));
			this.get_ubertip().remove_actionExecuted(ss.mkdel(this, this.$onUbertipActionExecuted));
			this.get_ubertip().remove_ubertipMenuToggled(ss.mkdel(this, this.$onUbertipMenuToggle));
			this.get_ubertip().remove_ubertipMenuClosed(ss.mkdel(this, this.$onUbertipMenuClose));
			this.get_ubertip().dispose();
		},
		shownTooltipIsStatic: function TooltipBaseMode$ShownTooltipIsStatic() {
			return this.get_currentBehavior().shownTooltipIsSticky();
		},
		isHoverAllowed: function TooltipBaseMode$IsHoverAllowed(pageCoords) {
			return this.get_currentBehavior().isHoverAllowed(pageCoords);
		},
		clearTooltipWithFakeHover: function TooltipBaseMode$ClearTooltipWithFakeHover() {
			if (!this.get_tooltip().get_isShown() || ss.isNullOrUndefined(this.get_tooltip().get_lastLocation()) || !this.get_tooltip().isInSafeZone(this.get_tooltip().get_lastLocation(), false)) {
				this.hoverOverWhitespace({ x: -1, y: -1 }, 'viz');
			}
		},
		suppress: function TooltipBaseMode$Suppress(doSuppress) {
			this.get_tooltip().setSuppressTooltip(doSuppress);
			this.readyForHover = !doSuppress;
		},
		buildBehaviorsDictionary: null,
		getSingleSelectBehaviorCallback: null,
		getSingleSelectBehavior: function TooltipBaseMode$GetSingleSelectBehavior(targetType) {
			return this.get_defaultBehaviorType();
		},
		getHoverBehavior: function TooltipBaseMode$GetHoverBehavior(targetType) {
			return this.get_defaultBehaviorType();
		},
		shouldForceRemoteTooltipForObject: function TooltipBaseMode$ShouldForceRemoteTooltipForObject(targetType, interactedObject) {
			return false;
		},
		suppressHoverIfNecesary: function TooltipBaseMode$SuppressHoverIfNecesary() {
			this.readyForHover = false;
		},
		onBehaviorSwitch: function TooltipBaseMode$OnBehaviorSwitch() {
		},
		modelUpdateCallback: function TooltipBaseMode$ModelUpdateCallback(ubertipModel) {
			$tab_TooltipBaseMode.$latestTupleId = ubertipModel.tupleId;
			if (!tab.ApplicationModel.get_instance().get_isLocalRenderMode() && this.get_currentBehaviorType() === 'smooth' && ss.isValue(ubertipModel.markBounds)) {
				ss.cast(this.get_currentBehavior(), $tab_SmoothTooltipBehavior).serverMarkBounds = ubertipModel.markBounds;
			}
			this.get_tooltip().setTooltipBodyAndReposition(this.get_ubertip().element, ss.mkdel(this, function() {
				this.$modelUpdateCallback_BeforePositioning(ubertipModel);
			}));
		},
		$modelUpdateCallback_BeforePositioning: function TooltipBaseMode$ModelUpdateCallback_BeforePositioning(ubertipModel) {
			var isMultiSelect = ss.isValue(ubertipModel) && ubertipModel.tupleId === tab.VizDataUtils.invalidTupleId;
			if (!isMultiSelect && !ss.referenceEquals(ubertipModel.tupleId, $tab_TooltipBaseMode.$latestTupleId)) {
				tab.Log.get(this).debug('Ubertip model is out of date', []);
				return;
			}
			var previousUbertipModel = this.get_ubertip().get_model();
			this.updateTooltipFromModel(ubertipModel);
			this.updateUbertipFromModel(ubertipModel);
			if (!ss.staticEquals(this.$1$UbertipUpdatedField, null)) {
				this.$1$UbertipUpdatedField(ubertipModel);
			}
			if (ss.isValue(previousUbertipModel) && previousUbertipModel.requestId === ubertipModel.requestId) {
				this.get_ubertip().updatePartiallyFromRemote(previousUbertipModel);
			}
		},
		updateModelFromServerResponse: function TooltipBaseMode$UpdateModelFromServerResponse(ubertipModel) {
			this.get_ubertip().updatePartiallyFromRemote(ubertipModel);
		},
		updateUbertipFromModel: function TooltipBaseMode$UpdateUbertipFromModel(ubertipModel) {
			ubertipModel.tooltipOffset = (ss.isValue(this.get_ubertip().get_model()) ? this.get_ubertip().get_model().tooltipOffset : null);
			if (!_.isEqual(ubertipModel, this.get_ubertip().get_model())) {
				this.get_ubertip().set_model(ubertipModel);
			}
		},
		updateTooltipFromModel: function TooltipBaseMode$UpdateTooltipFromModel(ubertipModel) {
			this.get_tooltip().tupleId = ubertipModel.tupleId;
			if (ss.isValue(ubertipModel.tooltipOffset)) {
				if (ss.isValue(ubertipModel.tooltipOffset.x)) {
					this.get_tooltip().set_horizontalOffset($tab_Tooltip.defaultHorizonalOffset + ubertipModel.tooltipOffset.x);
				}
				if (ss.isValue(ubertipModel.tooltipOffset.y)) {
					this.get_tooltip().set_verticalOffset($tab_Tooltip.defaultVerticalOffset + ubertipModel.tooltipOffset.y);
				}
			}
			else {
				this.get_tooltip().set_horizontalOffset($tab_Tooltip.defaultHorizonalOffset);
				this.get_tooltip().set_verticalOffset($tab_Tooltip.defaultVerticalOffset);
			}
		},
		switchTooltipMode: function TooltipBaseMode$SwitchTooltipMode(tooltipBehaviorType) {
			if (this.get_currentBehaviorType() === tooltipBehaviorType) {
				return false;
			}
			tab.Log.get(this).debug('CurrentBehavior: ' + this.get_currentBehaviorType().toString(), []);
			var oldBehavior = this.get_currentBehavior();
			oldBehavior.detach();
			var newBehavior = this.$getTooltipBehavior(tooltipBehaviorType);
			newBehavior.attach();
			this.set_currentBehaviorType(tooltipBehaviorType);
			this.onBehaviorSwitch();
			tab.Log.get(this).debug('CurrentBehavior: ' + this.get_currentBehaviorType(), []);
			return true;
		},
		prepareForPositioning: function TooltipBaseMode$PrepareForPositioning() {
			this.get_ubertip().prepareForPositioning(this.shouldShowCommandButtons() && this.get_ubertip().hasActionsOrSummaryOrCommands());
		},
		triggerUbertipButtonUpdate: function TooltipBaseMode$TriggerUbertipButtonUpdate() {
			if (this.shouldShowCommandButtons() && this.get_ubertip().hasActionsOrSummaryOrCommands() && this.get_ubertip().get_isShowingFullUbertip()) {
				return;
			}
			this.get_tooltip().forceLayout();
		},
		handleUbertipButtons: function TooltipBaseMode$HandleUbertipButtons() {
			if (this.shouldShowCommandButtons() && this.get_ubertip().hasActionsOrSummaryOrCommands()) {
				this.get_ubertip().showCommandAreaAndActions();
			}
			else {
				this.get_ubertip().hideMenuActionsAndCommandButtons(true);
			}
		},
		shouldShowCommandButtons: function TooltipBaseMode$ShouldShowCommandButtons() {
			return this.get_currentBehavior().shouldShowCommandButtons();
		},
		shouldAddCommandButtonsAndActions: function TooltipBaseMode$ShouldAddCommandButtonsAndActions() {
			return true;
		},
		getAffectedObjects: function TooltipBaseMode$GetAffectedObjects(targetType, interactedObject) {
			var affectedObjects = null;
			if (this.get_hasContextProvider()) {
				if (ss.contains(this.$contextProvider.getSelectedObjects(targetType), interactedObject)) {
					affectedObjects = this.$contextProvider.getSelectedObjects(targetType);
				}
				else {
					affectedObjects = [interactedObject];
				}
			}
			return affectedObjects;
		},
		isUbertipObjectSelected: function TooltipBaseMode$IsUbertipObjectSelected(ubertipModel) {
			if (ss.isNullOrUndefined(ubertipModel)) {
				return false;
			}
			var tupleSelected = ((this.get_hasContextProvider() && ubertipModel.interactedTupleId !== tab.VizDataUtils.invalidTupleId) ? this.$contextProvider.isMarkSelected(ubertipModel.interactedTupleId) : ubertipModel.tupleSelected);
			if (tupleSelected) {
				return true;
			}
			var visualPartsSelected = ubertipModel.refLineSelected || ubertipModel.trendLineSelected;
			if (visualPartsSelected) {
				return true;
			}
			var imageRegion = ubertipModel.imageRegion;
			var axisSelected = imageRegion === 'bottomaxis' || imageRegion === 'leftaxis' || imageRegion === 'rightaxis' || imageRegion === 'topaxis';
			if (axisSelected) {
				return true;
			}
			var headerSelected = imageRegion === 'xheader' || imageRegion === 'yheader';
			return headerSelected;
		},
		runBehaviorWithLocalUbertip: function TooltipBaseMode$RunBehaviorWithLocalUbertip(tooltipUiBehavior, interactedObjectId, affectedObjectIds, regionCoords, paneDescriptorKey, regionPart, targetType, activationMethod) {
			var currentHoveredObjectIds = interactedObjectId.toString();
			if (!ss.referenceEquals($tab_TooltipBaseMode.$lastHoveredObjectIds, currentHoveredObjectIds)) {
				this.$vizInTooltipDelayTimer = tab.MiscUtil.clearTimeout(this.$vizInTooltipDelayTimer);
			}
			$tab_TooltipBaseMode.$tooltipRequestId += 1;
			$tab_TooltipBaseMode.$requestVizId = this.get_visualIDPresModel();
			var requestId = $tab_TooltipBaseMode.$tooltipRequestId;
			var localCallback = ss.mkdel(this, function(model) {
				this.$runBehaviorWithLocalUbertip_LocalCallback(tooltipUiBehavior, interactedObjectId, regionPart, requestId, model, currentHoveredObjectIds);
			});
			var remoteCallback = ss.mkdel(this, function(model1) {
				this.$runBehaviorWithLocalUbertip_RemoteCallback(requestId, model1);
			});
			var info = new tab.LocalUbertipInfo(interactedObjectId, affectedObjectIds, paneDescriptorKey, false);
			var needRemote = this.needRemoteCommand(regionPart, targetType, activationMethod, interactedObjectId, paneDescriptorKey);
			if (needRemote === 1) {
				tab.UberTipClientCommands.localAndRemoteUberTipCommand(regionPart, this.get_visualIDPresModel(), { x: regionCoords.x, y: regionCoords.y, w: 0, h: 0 }, interactedObjectId, info, localCallback, remoteCallback, ss.cast(this.get_$tooltipFailureCallback(), Function), activationMethod);
			}
			else {
				tab.UberTipClientCommands.localOnlyUbertipCommand(this.get_visualIDPresModel(), info, localCallback);
			}
			if (needRemote === 2) {
				this.$vizInTooltipDelayTimer = window.setTimeout(ss.mkdel(this, function() {
					tab.UberTipClientCommands.remoteOnlyUbertipCommand(regionPart, this.get_visualIDPresModel(), { x: regionCoords.x, y: regionCoords.y, w: 0, h: 0 }, remoteCallback, this.get_$tooltipFailureCallback(), activationMethod, null, null, false, $tab_TooltipBaseMode.$latestTupleId);
				}), $tab_TooltipBaseMode.vizInTooltipDelayTimerMs);
			}
		},
		$runBehaviorWithLocalUbertip_RemoteCallback: function TooltipBaseMode$RunBehaviorWithLocalUbertip_RemoteCallback(requestId, model) {
			if (!this.$isCurrentRequestId(requestId.toString()) || !ss.isValue(model)) {
				return;
			}
			model.requestId = requestId;
			this.updateModelFromServerResponse(model);
		},
		$runBehaviorWithLocalUbertip_LocalCallback: function TooltipBaseMode$RunBehaviorWithLocalUbertip_LocalCallback(tooltipUiBehavior, interactedObjectId, regionPart, requestId, model, currentHoveredObjectIds) {
			if (!this.$isCurrentRequestId(requestId.toString())) {
				if (!ss.referenceEquals(this.get_visualIDPresModel(), $tab_TooltipBaseMode.$requestVizId)) {
					this.readyForHover = true;
				}
				return;
			}
			if (!ss.isValue(model)) {
				return;
			}
			this.$handleFreshUbertipModelUpdate(model, tooltipUiBehavior, requestId, regionPart, function() {
				$tab_TooltipBaseMode.$lastHoveredObjectIds = currentHoveredObjectIds;
				$tab_TooltipBaseMode.$latestTupleId = interactedObjectId;
			});
		},
		runBehaviorWithRemoteUbertip: function TooltipBaseMode$RunBehaviorWithRemoteUbertip(tooltipUiBehavior, regionSelectionRect, regionPart, activationMethod, targetType, fieldNames, interactedTupleIds, executeUrlActions, latestTupleId) {
			var currentHoveredObjectIds = (ss.isValue(interactedTupleIds) ? interactedTupleIds.toString() : ((targetType === 'whitespace') ? $tab_TooltipBaseMode.whitespaceObjectId : $tab_TooltipBaseMode.unknownObjectId));
			if (!ss.referenceEquals($tab_TooltipBaseMode.$lastHoveredObjectIds, currentHoveredObjectIds)) {
				this.$vizInTooltipDelayTimer = tab.MiscUtil.clearTimeout(this.$vizInTooltipDelayTimer);
			}
			$tab_TooltipBaseMode.$tooltipRequestId += 1;
			$tab_TooltipBaseMode.$requestVizId = this.get_visualIDPresModel();
			var requestId = $tab_TooltipBaseMode.$tooltipRequestId;
			var callback = ss.mkdel(this, function(model) {
				this.$runBehaviorWithRemoteUbertip_Callback(tooltipUiBehavior, regionPart, requestId, model, currentHoveredObjectIds);
			});
			tab.UberTipClientCommands.remoteOnlyUbertipCommand(regionPart, this.get_visualIDPresModel(), regionSelectionRect, callback, this.get_$tooltipFailureCallback(), activationMethod, fieldNames, interactedTupleIds, executeUrlActions, latestTupleId);
		},
		$runBehaviorWithRemoteUbertip_Callback: function TooltipBaseMode$RunBehaviorWithRemoteUbertip_Callback(tooltipUiBehavior, regionPart, requestId, model, currentHoveredObjectIds) {
			if (!this.$isCurrentRequestId(requestId.toString())) {
				if (!ss.referenceEquals(this.get_visualIDPresModel(), $tab_TooltipBaseMode.$requestVizId)) {
					this.readyForHover = true;
				}
				return;
			}
			if (ss.isValue(model)) {
				this.$handleFreshUbertipModelUpdate(model, tooltipUiBehavior, requestId, regionPart, null);
			}
			else {
				this.$closeTooltipAndAllowHover();
				$tab_TooltipBaseMode.$lastHoveredObjectIds = currentHoveredObjectIds;
			}
		},
		needRemoteCommand: function TooltipBaseMode$NeedRemoteCommand(regionPart, targetType, activationMethod, interactedObjectId, paneDescriptorKey) {
			if (tsConfig.is_authoring && this.get_currentBehaviorType() === 'sticky' || !tab.ApplicationModel.get_instance().get_isLocalRenderMode() || regionPart !== 'viz' || targetType !== 'mark' && targetType !== 'whitespace' || activationMethod !== 'on-hover' || this.$hasHoverOrMenuAction || ss.isNullOrUndefined(this.$contextProvider) || this.$contextProvider.isMarkSelected(interactedObjectId)) {
				return 1;
			}
			return (this.hasViT(paneDescriptorKey) ? 2 : 0);
		},
		hasViT: function TooltipBaseMode$HasViT(paneDescriptorKey) {
			return tab.FeatureFlags.isEnabled('VizInTooltip') && tab.UbertipSerializer.paneContainsViT(tab.ModelUtils.getVisualModelFromVisualId(this.get_visualIDPresModel(), null), paneDescriptorKey);
		},
		$handleUbertipRemoteFailure: function TooltipBaseMode$HandleUbertipRemoteFailure() {
			this.get_ubertip().handleRemoteFailure();
			this.readyForHover = true;
		},
		$isCurrentSheetSame: function TooltipBaseMode$IsCurrentSheetSame() {
			if (!ss.isValue(tsConfig.current_sheet_name)) {
				return true;
			}
			var tooltipOriginSheetName = null;
			switch (tsConfig.current_sheet_type) {
				case 'dashboard': {
					tooltipOriginSheetName = this.get_visualIDPresModel().dashboard;
					break;
				}
				case 'worksheet': {
					tooltipOriginSheetName = this.get_visualIDPresModel().worksheet;
					break;
				}
				case 'story': {
					tooltipOriginSheetName = this.get_visualIDPresModel().storyboard;
					break;
				}
				default: {
					break;
				}
			}
			return ss.isValue(tooltipOriginSheetName) && ss.referenceEquals(tooltipOriginSheetName, tsConfig.current_sheet_name);
		},
		$handleFreshUbertipModelUpdate: function TooltipBaseMode$HandleFreshUbertipModelUpdate(model, tooltipUiBehavior, requestId, regionPart, updateInteractedObjectState) {
			if (!this.$isCurrentSheetSame()) {
				this.$closeTooltipAndAllowHover();
				return;
			}
			model.requestId = requestId;
			this.modelUpdateCallback(model);
			if (!ss.staticEquals(updateInteractedObjectState, null)) {
				updateInteractedObjectState();
			}
			if (regionPart === 'viz' && model.isExplicitlyEmpty) {
				var noCommandButtonsOrActions = tab.MiscUtil.isNullOrEmpty(model.buttonModels) && tab.MiscUtil.isNullOrEmpty$1(model.actions) && tab.MiscUtil.isNullOrEmpty$1(model.actionPMs);
				var selectedMarkIds = this.$contextProvider.getSelectedObjects('mark');
				var markSelected = ss.isValue(selectedMarkIds) && ss.isValue(this.get_tooltip().tupleId) && ss.contains(selectedMarkIds, ss.unbox(this.get_tooltip().tupleId));
				if (!markSelected || noCommandButtonsOrActions) {
					this.$closeTooltipAndAllowHover();
					return;
				}
			}
			if (ss.isValue(tooltipUiBehavior)) {
				tooltipUiBehavior(model);
			}
		},
		$closeTooltipAndAllowHover: function TooltipBaseMode$CloseTooltipAndAllowHover() {
			this.get_tooltip().close();
			this.readyForHover = true;
		},
		$allowHoverIfShown: function TooltipBaseMode$AllowHoverIfShown() {
			if (this.get_isTooltipShown()) {
				this.readyForHover = true;
			}
		},
		$getTooltipBehavior: function TooltipBaseMode$GetTooltipBehavior(tooltipBehaviorType) {
			return this.tooltipBehaviors[tooltipBehaviorType];
		},
		$onClose: function TooltipBaseMode$OnClose() {
			this.readyForHover = true;
			if (!ss.staticEquals(this.$1$TooltipClosedField, null)) {
				this.$1$TooltipClosedField();
			}
		},
		$onUbertipActionExecuted: function TooltipBaseMode$OnUbertipActionExecuted(senderUbertip, args) {
			this.get_tooltip().close();
			if (!ss.staticEquals(this.$1$UbertipActionExecutedField, null)) {
				this.$1$UbertipActionExecutedField(senderUbertip, args);
			}
		},
		$onUbertipCommandExecuted: function TooltipBaseMode$OnUbertipCommandExecuted(senderUbertip, args) {
			var keepOpen = ss.isValue(args.command) && args.command.get_commandType() === 23;
			if (!keepOpen) {
				this.get_tooltip().close();
			}
			if (!ss.staticEquals(this.$1$UbertipCommandExecutedField, null)) {
				this.$1$UbertipCommandExecutedField(senderUbertip, args);
			}
			if (keepOpen) {
				this.$updateOpenedUbertip();
			}
		},
		$updateOpenedUbertip: function TooltipBaseMode$UpdateOpenedUbertip() {
			this.get_tooltip().set_freezePositionWhileOpen(true);
			var tupleId = null;
			var isValidTupleId = ss.isValue($tab_TooltipBaseMode.$latestTupleId) && ss.unbox($tab_TooltipBaseMode.$latestTupleId) !== tab.VizDataUtils.invalidTupleId;
			if (!isValidTupleId) {
				ss.Debug.assert(false, 'Fail to have a valid tupleId');
				return;
			}
			tupleId = $tab_TooltipBaseMode.$latestTupleId;
			this.runBehaviorWithRemoteUbertip(null, { x: -1, y: -1, w: 0, h: 0 }, 'viz', 'on-select', 'mark', null, null, false, tupleId);
		},
		$onUbertipMenuToggle: function TooltipBaseMode$OnUbertipMenuToggle(areMenuItemsVisible) {
			this.$isMenuOpen = areMenuItemsVisible;
			this.get_currentBehavior().handleUbertipMenuToggle(areMenuItemsVisible);
		},
		$onUbertipMenuClose: function TooltipBaseMode$OnUbertipMenuClose() {
			this.$isMenuOpen = false;
			this.get_currentBehavior().handleUbertipMenuClose();
		},
		$onMobileVizReduceTransform: function TooltipBaseMode$OnMobileVizReduceTransform() {
			this.get_tooltip().close();
		},
		$isCurrentRequestId: function TooltipBaseMode$IsCurrentRequestId(requestId) {
			tab.Log.get(this).debug('response rid: ' + requestId + ' | current rid: ' + $tab_TooltipBaseMode.$tooltipRequestId.toString(), []);
			if (ss.isValue(requestId) && !ss.referenceEquals($tab_TooltipBaseMode.$tooltipRequestId.toString(), requestId)) {
				return false;
			}
			return true;
		},
		$onMouseLeave: function TooltipBaseMode$OnMouseLeave(e) {
			if (!this.get_tooltip().get_isShown() || ss.staticEquals(this.$1$MouseExitedTooltipField, null) || this.$isMenuOpen) {
				return;
			}
			var c = tab.DomUtil.getRectXY(this.get_tooltip().get_body());
			if (c.x > e.pageX || c.x + c.w <= e.pageX || c.y > e.pageY || c.y + c.h <= e.pageY) {
				this.$1$MouseExitedTooltipField({ x: e.pageX, y: e.pageY });
			}
		}
	});
	ss.initClass($tab_TooltipBaseLegacyMode, $asm, {
		get_currentTooltipMode: function TooltipBaseLegacyMode$get_CurrentTooltipMode() {
			return 'sticky';
		},
		onTap: function TooltipBaseLegacyMode$OnTap() {
			this.get_tooltip().close();
		},
		onPress: function TooltipBaseLegacyMode$OnPress() {
			this.get_tooltip().close();
		},
		dispose: function TooltipBaseLegacyMode$Dispose() {
			this.get_tooltip().remove_showed(ss.mkdel(this, this.$removeMousePassthrough));
			$tab_TooltipBaseMode.prototype.dispose.call(this);
		},
		getSingleSelectBehaviorCallback: function TooltipBaseLegacyMode$GetSingleSelectBehaviorCallback(pageCoords) {
			return ss.mkdel(this, function() {
				this.get_currentBehavior().singleSelectComplete(pageCoords);
			});
		},
		shouldForceRemoteTooltipForObject: function TooltipBaseLegacyMode$ShouldForceRemoteTooltipForObject(targetType, interactedObject) {
			var affectedObjects = this.getAffectedObjects(targetType, interactedObject);
			return targetType === 'mark' && ss.isValue(affectedObjects) && affectedObjects.length > 1 || tab.ActionUtils.doesWorksheetContainHoverActionsThatInvalidateVisualPresModelAndRunRemotely(this.get_visualIDPresModel().worksheet);
		},
		showCommandAreaAndActions: function TooltipBaseLegacyMode$ShowCommandAreaAndActions() {
			this.get_ubertip().showCommandAreaAndActions();
		},
		$removeMousePassthrough: function TooltipBaseLegacyMode$RemoveMousePassthrough() {
			this.get_tooltip().allowMouseEventPassthrough(false);
		}
	}, $tab_TooltipBaseMode);
	ss.initEnum($tab_TooltipBehaviorType, $asm, { unspecified: 'unspecified', sticky: 'sticky', smooth: 'smooth', disabled: 'disabled' }, true);
	ss.initClass($tab_TooltipContextProvider, $asm, {
		getSelectedObjects: function TooltipContextProvider$GetSelectedObjects(targetType) {
			if (targetType === 'mark') {
				return this.$selectionsModel.tupleSelection.get_ids();
			}
			else {
				return null;
			}
		},
		isMarkSelected: function TooltipContextProvider$IsMarkSelected(objectId) {
			return this.$selectionsModel.tupleSelection.isObjectSelected(objectId);
		}
	});
	ss.initClass($tab_TooltipTemplate, $asm, {
		get_body: function TooltipTemplate$get_Body() {
			return this.getElementBySelector($tab_TooltipTemplate.$bodySelector);
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_Ubertip, $asm, {
		add_commandExecuted: function Ubertip$add_CommandExecuted(value) {
			this.$2$CommandExecutedField = ss.delegateCombine(this.$2$CommandExecutedField, value);
		},
		remove_commandExecuted: function Ubertip$remove_CommandExecuted(value) {
			this.$2$CommandExecutedField = ss.delegateRemove(this.$2$CommandExecutedField, value);
		},
		add_actionExecuted: function Ubertip$add_ActionExecuted(value) {
			this.$2$ActionExecutedField = ss.delegateCombine(this.$2$ActionExecutedField, value);
		},
		remove_actionExecuted: function Ubertip$remove_ActionExecuted(value) {
			this.$2$ActionExecutedField = ss.delegateRemove(this.$2$ActionExecutedField, value);
		},
		add_ubertipMenuToggled: function Ubertip$add_UbertipMenuToggled(value) {
			this.$2$UbertipMenuToggledField = ss.delegateCombine(this.$2$UbertipMenuToggledField, value);
		},
		remove_ubertipMenuToggled: function Ubertip$remove_UbertipMenuToggled(value) {
			this.$2$UbertipMenuToggledField = ss.delegateRemove(this.$2$UbertipMenuToggledField, value);
		},
		add_ubertipMenuClosed: function Ubertip$add_UbertipMenuClosed(value) {
			this.$2$UbertipMenuClosedField = ss.delegateCombine(this.$2$UbertipMenuClosedField, value);
		},
		remove_ubertipMenuClosed: function Ubertip$remove_UbertipMenuClosed(value) {
			this.$2$UbertipMenuClosedField = ss.delegateRemove(this.$2$UbertipMenuClosedField, value);
		},
		get_model: function Ubertip$get_Model() {
			return this.$model;
		},
		set_model: function Ubertip$set_Model(value) {
			this.$model = value;
			this.$initializeFromModel();
		},
		get_isShowingFullUbertip: function Ubertip$get_IsShowingFullUbertip() {
			return this.$commandAreaElt.is(':visible') || this.$actionsElt.is(':visible');
		},
		get_$shouldEnforceButtonOrdering: function Ubertip$get_ShouldEnforceButtonOrdering() {
			return this.$enforceButtonOrderingInMultiselect && this.hasSummary();
		},
		dispose: function Ubertip$Dispose() {
			this.element.detach();
			this.$tooltip.remove_showed(ss.mkdel(this, this.handleTooltipShowed));
			this.$tooltip.remove_positionCalculated(ss.mkdel(this, this.handleTooltipPositionCalculated));
			tab.MiscUtil.dispose(this.$selectionRelaxationHandlers);
			this.$clearButtonAnimationAction();
			this.$clearDisposeOnClose();
			spiff.Widget.prototype.dispose.call(this);
		},
		$clearButtonAnimationAction: function Ubertip$ClearButtonAnimationAction() {
			if (!ss.staticEquals(this.$buttonAnimationAction, null)) {
				this.$tooltip.remove_positioned(this.$buttonAnimationAction);
				this.$buttonAnimationAction = null;
			}
		},
		hasActions: function Ubertip$HasActions() {
			if (ss.isNullOrUndefined(this.$model)) {
				return false;
			}
			var hasActionPMs = ss.isValue(this.$model.actionPMs) && this.$model.actionPMs.length > 0;
			var hasActions = ss.isValue(this.$model.actions) && this.$model.actions.length > 0;
			return hasActionPMs || hasActions;
		},
		hasCommands: function Ubertip$HasCommands() {
			if (ss.isNullOrUndefined(this.$model)) {
				return false;
			}
			return ss.isValue(this.$model.buttonModels) && this.$model.buttonModels.length > 0;
		},
		hasSummary: function Ubertip$HasSummary() {
			if (ss.isNullOrUndefined(this.$model)) {
				return false;
			}
			return ss.isValue(this.$model.selectionHtml);
		},
		hasActionsOrSummaryOrCommands: function Ubertip$HasActionsOrSummaryOrCommands() {
			return this.hasActions() || this.hasSummary() || this.hasCommands();
		},
		hideMenuActionsAndCommandButtons: function Ubertip$HideMenuActionsAndCommandButtons(shouldRefresh) {
			if (this.get_isShowingFullUbertip() && shouldRefresh) {
				this.$tooltip.requestLayout(ss.mkdel(this, function() {
					this.$stopAnimationsAndHideActionsAndCommandArea();
					this.$commandsElt.css('min-width', '');
				}), false);
			}
			else {
				this.$stopAnimationsAndHideActionsAndCommandArea();
				this.$commandsElt.css('min-width', '');
			}
		},
		prepareForPositioning: function Ubertip$PrepareForPositioning(shouldShowCommandButtons) {
			if (shouldShowCommandButtons) {
				if (!this.$tooltip.get_isShown()) {
					this.element.css('width', '');
					this.$showCommandAreaAndActionsElements(false);
				}
			}
			else {
				this.hideMenuActionsAndCommandButtons(false);
				this.$handleWidth();
			}
		},
		showCommandAreaAndActions: function Ubertip$ShowCommandAreaAndActions() {
			if (ss.isNullOrUndefined(this.$tooltip.get_calculatedShownArgs())) {
				return;
			}
			if (this.$isShowingNonFrozenFullUbertip()) {
				this.updateTooltipAnchor();
			}
			else {
				this.$showNewCommandAreaAndActions();
			}
		},
		$isShowingNonFrozenFullUbertip: function Ubertip$IsShowingNonFrozenFullUbertip() {
			return this.get_isShowingFullUbertip() && !this.$tooltip.get_freezePositionWhileOpen();
		},
		updateTooltipAnchor: function Ubertip$UpdateTooltipAnchor() {
			if (!this.$areCommandButtonsAbove()) {
				return;
			}
			var shownInfo = this.$tooltip.get_calculatedShownArgs();
			if (shownInfo.shownY === shownInfo.tooltipAnchorY) {
				var commandAreaHeight = tab.DoubleUtil.roundToInt(this.$commandAreaElt.outerHeight());
				shownInfo.tooltipAnchorY = shownInfo.shownY + commandAreaHeight;
			}
		},
		$showNewCommandAreaAndActions: function Ubertip$ShowNewCommandAreaAndActions() {
			this.$clearElementWidth();
			var wasShowingFullUbertip = this.get_isShowingFullUbertip();
			this.$stopAnimationsAndHideActionsAndCommandArea();
			var hasNoVisibleContent = !this.$tooltip.get_isShown() || tab.DoubleUtil.roundToInt(this.element.outerHeight()) === 0;
			if (hasNoVisibleContent) {
				this.$showCommandAreaAndActionsElements(false);
			}
			else {
				this.$showUbertipContentWithNewCommandAreaAndActions(wasShowingFullUbertip);
			}
		},
		$showUbertipContentWithNewCommandAreaAndActions: function Ubertip$ShowUbertipContentWithNewCommandAreaAndActions(wasShowingFullUbertip) {
			var shownInfo = this.$tooltip.get_calculatedShownArgs();
			var shownTooltipAnchor = { x: shownInfo.shownX, y: shownInfo.tooltipAnchorY };
			var room = shownInfo.viewport.getVisibleRoom(shownTooltipAnchor, 1);
			var roomBelow = ss.Int32.trunc(room.roomBelow);
			var roomRight = ss.Int32.trunc(room.roomRight);
			this.$showCommandAreaAndActionsElements(false);
			this.$commandsElt.css('min-width', this.$computeMinimumWidthOfCommandBar() + 'px');
			var roomNeededRight = this.$getAdjustedTooltipWidthToAvoidBadScenarios();
			if (roomNeededRight > this.$prevWidth) {
				this.$prevWidth = roomNeededRight;
			}
			this.$setElementWidth(this.$prevWidth);
			var ubertipHeight = tab.DoubleUtil.roundToInt(this.element.outerHeight());
			var commandAreaHeight = tab.DoubleUtil.roundToInt(this.$commandAreaElt.outerHeight());
			var roomNeededBelow = this.$getRoomNeededBelow(ubertipHeight, commandAreaHeight);
			if (!wasShowingFullUbertip) {
				if (roomNeededBelow > roomBelow || roomNeededRight > roomRight) {
					this.$repositionInBottomRightCorner(commandAreaHeight);
					roomNeededBelow = this.$getRoomNeededBelow(ubertipHeight, commandAreaHeight);
				}
			}
			else if (roomNeededRight > roomRight) {
				this.$repositionToTheLeft(roomNeededRight, roomRight);
			}
			if (roomNeededBelow > roomBelow && this.$actionsElt.outerHeight() > 0) {
				this.$updateShownYWithoutAnimation(roomBelow, roomNeededBelow, shownTooltipAnchor.y);
			}
			else {
				this.$createPostPositioningUbertipUpdates(commandAreaHeight, roomBelow, roomNeededBelow, shownTooltipAnchor.y, !wasShowingFullUbertip);
			}
		},
		$getRoomNeededBelow: function Ubertip$GetRoomNeededBelow(ubertipHeight, commandAreaHeight) {
			return $tab_Ubertip.$dropShadowPixels + (this.$areCommandButtonsAbove() ? (ubertipHeight - commandAreaHeight) : ubertipHeight);
		},
		$repositionInBottomRightCorner: function Ubertip$RepositionInBottomRightCorner(commandAreaHeight) {
			this.$tooltip.layoutTooltip(this.$tooltip.get_calculatedShownArgs().viewport, true);
			this.handleTooltipPositionCalculated();
			if (this.$position === 'AL' || this.$tooltipCanFitRightOfMouse()) {
				this.$tooltip.get_calculatedShownArgs().shownY = this.$tooltip.get_calculatedShownArgs().shownY + commandAreaHeight;
				this.$tooltip.get_calculatedShownArgs().tooltipAnchorY = this.$tooltip.get_calculatedShownArgs().shownY;
			}
		},
		$repositionToTheLeft: function Ubertip$RepositionToTheLeft(roomNeededRight, roomRight) {
			var shownX = this.$tooltip.get_calculatedShownArgs().shownX;
			var spaceNeeded = $tab_Ubertip.$dropShadowPixels + roomNeededRight - roomRight;
			this.$tooltip.get_calculatedShownArgs().shownX = Math.max(0, shownX - spaceNeeded);
		},
		$updateShownYWithoutAnimation: function Ubertip$UpdateShownYWithoutAnimation(roomBelow, roomNeededBelow, shownTooltipAnchorY) {
			var spaceNeeded = $tab_Ubertip.$dropShadowPixels + roomNeededBelow - roomBelow;
			var newTop = shownTooltipAnchorY - spaceNeeded;
			this.$tooltip.get_calculatedShownArgs().shownY = newTop;
			if (!this.$areCommandButtonsAbove()) {
				this.$tooltip.get_calculatedShownArgs().tooltipAnchorY = newTop;
			}
		},
		$createPostPositioningUbertipUpdates: function Ubertip$CreatePostPositioningUbertipUpdates(commandAreaHeight, roomBelow, roomNeededBelow, shownTooltipAnchorY, needsAnimation) {
			var tooltipTop = this.$tooltip.get_calculatedShownArgs().tooltipAnchorY;
			if (this.$areCommandButtonsAbove()) {
				tooltipTop -= commandAreaHeight;
			}
			var bottomOfVisibleScreen = shownTooltipAnchorY + roomBelow;
			var newTop = Math.min(tooltipTop, bottomOfVisibleScreen - roomNeededBelow);
			this.$stopAnimationsAndHideActionsAndCommandArea();
			this.$clearButtonAnimationAction();
			this.$buttonAnimationAction = ss.mkdel(this, function() {
				this.$showUbertipPartsAndUpdateTop(roomBelow, roomNeededBelow, newTop, shownTooltipAnchorY, needsAnimation);
			});
			this.$tooltip.add_positioned(this.$buttonAnimationAction);
		},
		$showUbertipPartsAndUpdateTop: function Ubertip$ShowUbertipPartsAndUpdateTop(roomBelow, roomNeededBelow, newTop, shownTooltipAnchorY, needsAnimation) {
			this.$clearButtonAnimationAction();
			this.$showCommandAreaAndActionsElements(needsAnimation);
			switch (this.$position) {
				case 'BR': {
					if (needsAnimation) {
						this.$updateTooltipTop(shownTooltipAnchorY - tab.DoubleUtil.roundToInt(this.$commandAreaElt.height()), false);
					}
					this.$updateTooltipTop(newTop, needsAnimation);
					break;
				}
				case 'AR': {
					if (roomBelow < roomNeededBelow || !this.$tooltipCanFitRightOfMouse()) {
						this.$updateTooltipTop(newTop, needsAnimation);
					}
					break;
				}
				case 'BL':
				case 'AL': {
					this.$updateTooltipTop(newTop, needsAnimation);
					break;
				}
				default: {
					ss.Debug.fail('Unknown relative position in ShowUbertipPartsAndUpdateTop');
					break;
				}
			}
		},
		$updateTooltipTop: function Ubertip$UpdateTooltipTop(newTop, needsAnimation) {
			if (needsAnimation) {
				this.$tooltip.element.animate(ss.mkdict(['top', newTop + 'px']), 'fast');
			}
			else {
				this.$tooltip.element.css('top', newTop + 'px');
			}
		},
		$areCommandButtonsAbove: function Ubertip$AreCommandButtonsAbove() {
			return this.$position === 'BL' || this.$position === 'BR';
		},
		$tooltipCanFitRightOfMouse: function Ubertip$TooltipCanFitRightOfMouse() {
			return (this.$position === 'AR' || this.$position === 'BR') && this.$tooltip.get_calculatedShownArgs().shownX > this.$tooltip.get_calculatedShownArgs().origX;
		},
		handleRemoteFailure: function Ubertip$HandleRemoteFailure() {
			if (this.$isActionClicked) {
				this.$isActionClicked = false;
				if (tab.BaseSession.get_waitHandler().isBusy()) {
					tab.BaseSession.get_waitHandler().reset();
				}
			}
		},
		hideSpinner: function Ubertip$HideSpinner() {
			if (tab.BaseSession.get_waitHandler().isBusy()) {
				tab.BaseSession.get_waitHandler().reset();
			}
		},
		handleTooltipPositionCalculated: function Ubertip$HandleTooltipPositionCalculated() {
			if (ss.isValue(this.$position) && this.$position === this.$tooltip.get_calculatedShownArgs().position) {
				return;
			}
			tab.Log.get(this).debug('Update ubertip position: pos=%s', [this.$tooltip.get_calculatedShownArgs().position]);
			switch (this.$tooltip.get_calculatedShownArgs().position) {
				case 'AL':
				case 'AR': {
					this.$contentAreaElt.after(this.$commandAreaElt);
					this.$commandsElt.before(this.element.find($tab_Ubertip.$selectedSelector));
					break;
				}
				case 'BL':
				case 'BR': {
					this.$contentAreaElt.before(this.$commandAreaElt);
					this.element.find($tab_Ubertip.$commandsClearSelector).after(this.element.find($tab_Ubertip.$selectedSelector));
					break;
				}
			}
			this.$position = this.$tooltip.get_calculatedShownArgs().position;
		},
		handleTooltipShowed: function Ubertip$HandleTooltipShowed() {
			this.$adjustTooltipWidthToAvoidBadScenarios();
		},
		$adjustTooltipWidthToAvoidBadScenarios: function Ubertip$AdjustTooltipWidthToAvoidBadScenarios() {
			if (this.element.width() === 0) {
				return;
			}
			var widthForIE = this.$getAdjustedTooltipWidthToAvoidBadScenarios();
			this.$setElementWidth(widthForIE);
		},
		$getAdjustedTooltipWidthToAvoidBadScenarios: function Ubertip$GetAdjustedTooltipWidthToAvoidBadScenarios() {
			return Math.ceil(Math.min(this.element.width(), $(document.body).width() - 2));
		},
		updatePartiallyFromRemote: function Ubertip$UpdatePartiallyFromRemote(remoteModel) {
			if (ss.isNullOrUndefined(remoteModel)) {
				return;
			}
			if (ss.isNullOrUndefined(this.$model)) {
				this.set_model(remoteModel);
				return;
			}
			this.$model.requestId = remoteModel.requestId;
			this.$updateSummaryFromRemote(remoteModel);
			this.$updateActionsFromRemote(remoteModel);
			this.$updateButtonCommandsFromRemote(remoteModel);
			if (tab.VizDataUtils.objectContainsVizInTooltip(this.element)) {
				this.$updateTooltipFromRemote(remoteModel);
			}
		},
		$updateButtonCommandsFromRemote: function Ubertip$UpdateButtonCommandsFromRemote(remoteModel) {
			var buttonModelIndicesThatNeedTransition = [];
			var realGroupButtonModel = null;
			var placeholderGroupButtonModel = null;
			if (ss.isValue(this.$model)) {
				realGroupButtonModel = $tab_Ubertip.$getGroupButtonModelFromRemoteModel(remoteModel) || $tab_Ubertip.$getGroupMenuButtonModelFromRemoteModel(remoteModel);
				placeholderGroupButtonModel = $tab_Ubertip.$findPlaceholderButtonModel(this.$model, 10);
			}
			if (ss.isValue(realGroupButtonModel)) {
				if (!this.get_$shouldEnforceButtonOrdering()) {
					remoteModel.buttonModels = _.without(remoteModel.buttonModels, realGroupButtonModel);
					remoteModel.buttonModels.push(realGroupButtonModel);
					buttonModelIndicesThatNeedTransition.push(remoteModel.buttonModels.length - 1);
				}
			}
			else if (ss.isValue(placeholderGroupButtonModel)) {
				remoteModel.buttonModels.push(placeholderGroupButtonModel);
			}
			this.$model.buttonModels = remoteModel.buttonModels;
			this.$updateButtonCommands(buttonModelIndicesThatNeedTransition);
		},
		$updateSummaryFromRemote: function Ubertip$UpdateSummaryFromRemote(remoteModel) {
			this.$model.selectionHtml = remoteModel.selectionHtml;
			this.$updateSelected();
			if (ss.isValue(this.$model.selectionHtml) && this.get_isShowingFullUbertip()) {
				this.$handleWidth();
				this.$adjustTooltipWidthToAvoidBadScenarios();
			}
		},
		$updateActionsFromRemote: function Ubertip$UpdateActionsFromRemote(remoteModel) {
			this.$model.actionPMs = remoteModel.actionPMs;
			this.$model.actions = remoteModel.actions;
			this.$updateActions();
			this.$handlePreviousClickOnLocalAction();
		},
		$updateTooltipFromRemote: function Ubertip$UpdateTooltipFromRemote(remoteModel) {
			if (ss.referenceEquals(this.$model.tooltipHtml, remoteModel.tooltipHtml)) {
				return;
			}
			this.$handlePotentialVizInTooltipSizeChange(remoteModel.tooltipHtml);
			this.$model.tooltipHtml = remoteModel.tooltipHtml;
			this.$updateTooltip();
			this.$updateContentCommands();
			this.$tooltip.requestLayout(null, false);
		},
		$handlePreviousClickOnLocalAction: function Ubertip$HandlePreviousClickOnLocalAction() {
			if (this.$isActionClicked) {
				this.$isActionClicked = false;
				if (ss.isValue(this.$model)) {
					ss.Debug.assert(ss.isValue(this.$model.actions), 'model.Actions must exist since this function should only be used after handling a remote ubertip');
					for (var $t1 = 0; $t1 < this.$model.actions.length; $t1++) {
						var action = this.$model.actions[$t1];
						tab.Logger.getLogger($tab_Ubertip, null).debug('Remote Ubertip complete. Action name=%s', [action.get_name()]);
						if (ss.referenceEquals(action.get_name(), this.$actionDisplayName)) {
							var $t2 = new $tab_ActionExecutedEventArgs();
							$t2.action = action;
							var args = $t2;
							this.onActionExecuted(args);
						}
					}
				}
			}
		},
		onCommandExecuted: function Ubertip$OnCommandExecuted(args) {
			if (!ss.staticEquals(this.$2$CommandExecutedField, null)) {
				this.$2$CommandExecutedField(this, args);
			}
		},
		onActionExecuted: function Ubertip$OnActionExecuted(args) {
			if (!ss.staticEquals(this.$2$ActionExecutedField, null)) {
				this.$2$ActionExecutedField(this, args);
			}
		},
		$clearDisposeOnClose: function Ubertip$ClearDisposeOnClose() {
			this.$disposables.dispose();
		},
		$setElementWidth: function Ubertip$SetElementWidth(width) {
			this.element.css('min-width', width + 'px');
			this.$prevWidth = width;
		},
		$clearElementWidth: function Ubertip$ClearElementWidth() {
			this.element.css('min-width', '');
		},
		$initializeFromModel: function Ubertip$InitializeFromModel() {
			this.$clearDisposeOnClose();
			this.element.show();
			this.$updateTooltip();
			this.$updateActions();
			this.$updateButtonCommands(null);
			this.$updateContentCommands();
			this.$updateSelected();
			this.$handleWidth();
			var noServerRenderedAction = tab.MiscUtil.isNullOrEmpty$1(this.$model.actions);
			var noBrowserRenderedAction = tab.MiscUtil.isNullOrEmpty$1(this.$model.actionPMs);
			var noTooltipHtml = ss.isNullOrEmptyString(this.$model.tooltipHtml);
			var shouldHideContent = noServerRenderedAction && noBrowserRenderedAction && noTooltipHtml;
			if (shouldHideContent) {
				this.$contentAreaElt.addClass('hide');
			}
			else {
				this.$contentAreaElt.removeClass('hide');
			}
		},
		$handleWidth: function Ubertip$HandleWidth() {
			this.$clearElementWidth();
			this.$contentAreaElt.css('height', '');
			this.$commandAreaElt.css('height', '');
			var width = this.computeAdjustedTooltipWidth();
			if (width > 0) {
				this.$setElementWidth(width);
			}
			else if (this.element.width() > 0) {
				this.$prevWidth = tab.DoubleUtil.roundToInt(this.element.width());
			}
			else {
				this.$prevWidth = 0;
			}
		},
		computeAdjustedTooltipWidth: function Ubertip$ComputeAdjustedTooltipWidth() {
			var width = tab.DoubleUtil.roundToInt(this.element.width());
			var newWidth = -1;
			var maxWhitespace = tab.FeatureParamsLookup.getInt(18);
			if (!ss.isValue(maxWhitespace)) {
				maxWhitespace = $tab_Ubertip.$defaultMaxWhitespace;
			}
			if (width > 0 && this.$prevWidth > 0 && this.$prevWidth >= width && this.$prevWidth - width <= ss.unbox(maxWhitespace)) {
				newWidth = this.$prevWidth;
			}
			return newWidth;
		},
		$computeMinimumWidthOfCommandBar: function Ubertip$ComputeMinimumWidthOfCommandBar() {
			var totalButtonWidth = 0;
			this.$commandsElt.find('li').each(function(index, e) {
				totalButtonWidth += ss.cast(e.firstChild, HTMLElement).offsetWidth;
			});
			return totalButtonWidth;
		},
		$stopAnimationsAndHideActionsAndCommandArea: function Ubertip$StopAnimationsAndHideActionsAndCommandArea() {
			this.$tooltip.element.stop();
			this.$actionsElt.stop();
			this.$commandAreaElt.stop();
			this.$actionsElt.hide();
			this.$commandAreaElt.hide();
		},
		$showCommandAreaAndActionsElements: function Ubertip$ShowCommandAreaAndActionsElements(needsAnimation) {
			if (ss.isNullOrUndefined(this.get_model())) {
				return;
			}
			if (this.hasActions()) {
				if (needsAnimation) {
					this.$actionsElt.show();
				}
				else {
					this.$actionsElt.show();
				}
			}
			if (this.hasCommands() || this.hasSummary()) {
				if (needsAnimation) {
					this.$commandAreaElt.slideDown('fast');
				}
				else {
					this.$commandAreaElt.show();
				}
			}
		},
		$updateTooltip: function Ubertip$UpdateTooltip() {
			var tooltipHtml = $(this.$model.tooltipHtml);
			var previousTooltipHtml = this.element.find($tab_Ubertip.$tooltipSelector);
			var activeSelectedLinkIndex = $tab_Ubertip.$getActiveSelectedLinkIndex(previousTooltipHtml);
			this.$buildUpSelectionRelaxationLinksFromTooltipHtml(tooltipHtml, activeSelectedLinkIndex);
			previousTooltipHtml.html('').append(tooltipHtml);
			this.$updateTooltipMaxWidth();
		},
		$handlePotentialVizInTooltipSizeChange: function Ubertip$HandlePotentialVizInTooltipSizeChange(tooltipHtml) {
			var room = tab.DomUtil.roomAroundPosition(this.$tooltip.element.position());
			var uberTip = $(tooltipHtml);
			var vizInTooltips = uberTip.find('span[data-tableau="VizInTooltip"] img');
			var length = vizInTooltips.length;
			var totalHeight = $tab_Ubertip.$dropShadowPixels + SharedWidgets.TabStyles.Spacing.MediumSpace * 2;
			for (var i = 0; i < length; i++) {
				var width = parseInt(vizInTooltips[i].getAttribute('width')) + $tab_Ubertip.$dropShadowPixels + SharedWidgets.TabStyles.Spacing.MediumSpace * 2;
				totalHeight += parseInt(vizInTooltips[i].getAttribute('height'));
				if (width >= room.roomRight || totalHeight >= room.roomBelow) {
					this.$tooltip.hideUntilReposition();
					return;
				}
			}
			var oldUberTip = $(this.$model.tooltipHtml);
			var oldUberTipVizInTooltipSpans = oldUberTip.find(tab.VizDataUtils.vizInTooltipSpanTag);
			var oldTotalHeight = $tab_Ubertip.$dropShadowPixels + SharedWidgets.TabStyles.Spacing.MediumSpace * 2;
			for (var i1 = 0; i1 < oldUberTipVizInTooltipSpans.length; i1++) {
				var oldUberTipVizInTooltipSpan = oldUberTipVizInTooltipSpans[i1];
				oldTotalHeight += parseInt(oldUberTipVizInTooltipSpan.style.height);
			}
			if (tab.DoubleUtil.roundToInt(this.$tooltip.element.outerHeight()) - oldTotalHeight + totalHeight >= room.roomBelow) {
				this.$tooltip.hideUntilReposition();
			}
		},
		$updateTooltipMaxWidth: function Ubertip$UpdateTooltipMaxWidth() {
			this.$tooltip.get_body().css('max-width', '');
			this.$tooltip.element.css('max-width', '');
			tab.VizDataUtils.updateLastVizInTooltipSizes(this.$model.tooltipHtml);
			var padding = SharedWidgets.TabStyles.Spacing.MediumSpace * 2;
			var widestTooltipAndPadding = tab.VizDataUtils.widestVizInTooltip + padding;
			if (widestTooltipAndPadding > $tab_Ubertip.$tooltipDefaultMaxWdith) {
				this.$tooltip.get_body().css('max-width', (widestTooltipAndPadding + 'px').toString());
				this.$tooltip.element.css('max-width', (widestTooltipAndPadding + $tab_Ubertip.$dropShadowPixels + 'px').toString());
			}
		},
		$buildUpSelectionRelaxationLinksFromTooltipHtml: function Ubertip$BuildUpSelectionRelaxationLinksFromTooltipHtml(tooltipHtml, targetIndex) {
			ss.clear(this.$selectionRelaxationInfo);
			var links = tooltipHtml.find('a.relax-selection');
			for (var i = 0; i < links.length; i++) {
				this.$modifySelectionRelaxationLink(links, i, targetIndex);
			}
		},
		$modifySelectionRelaxationLink: function Ubertip$ModifySelectionRelaxationLink(links, curIndex, targetIndex) {
			var link = links.eq(curIndex);
			var linkContent = link.children().eq(0);
			linkContent.unwrap().unwrap();
			if (tab.MiscUtil.isNullOrEmpty$3(linkContent.eq(0).html())) {
				linkContent.remove();
				return;
			}
			if (tsConfig.allow_select) {
				if (linkContent.css('text-decoration') === 'underline') {
					linkContent.addClass('tab-selection-relaxation-underlined');
				}
				linkContent.addClass('tab-selection-relaxation');
				linkContent.css('text-decoration', '');
				if (curIndex === targetIndex) {
					linkContent.addClass($tab_Ubertip.$selectedSelectionRelaxationSelector);
				}
				var commandName = link.attr('href');
				this.$selectionRelaxationInfo.push(new $tab_$SrInfo(commandName, linkContent));
			}
		},
		$updateSelected: function Ubertip$UpdateSelected() {
			if (ss.isNullOrUndefined(this.$model.selectionHtml)) {
				this.element.find($tab_Ubertip.$selectedSelector).html('').addClass('hide');
			}
			else {
				this.element.find($tab_Ubertip.$selectedSelector).html('').append(this.$model.selectionHtml).removeClass('hide');
			}
		},
		$appendMenu: function Ubertip$AppendMenu(buttonMenuModel, allCommandsObj, hasVisibleCommand, isTransitionNeeded) {
			if (!buttonMenuModel.get_hasItems()) {
				return false;
			}
			var subItems = [];
			$tab_WidgetUtil.newMenuItemsFromCommands(subItems, buttonMenuModel.get_wrappedCommandItemPresModel().get_commands(), $tab_WidgetUtil.createDropdownMenuCommandHandler, tab.PermissionManager.buildCommandPermission());
			if (subItems.length === 0) {
				return false;
			}
			var b = this.$createMenuButton(buttonMenuModel);
			var $t1 = new spiff.MenuViewModel(true);
			$t1.set_menu(new spiff.Menu(subItems));
			var menuViewModel = $t1;
			var menuButtonClickHandler = ss.mkdel(this, function() {
				this.$handleMenuButtonClick(menuViewModel, b);
			});
			b.add_click(menuButtonClickHandler);
			menuViewModel.add_menuItemClicked(spiff.MenuViewModel.handleMenuActionItemClicked);
			var tooltipCloseHandler = function() {
				menuViewModel.hide();
			};
			this.$tooltip.add_closed(tooltipCloseHandler);
			this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				b.remove_click(menuButtonClickHandler);
				menuViewModel.remove_menuItemClicked(spiff.MenuViewModel.handleMenuActionItemClicked);
				menuViewModel.remove_hidden(ss.mkdel(this, this.$handleMenuClosed));
				this.$tooltip.remove_closed(tooltipCloseHandler);
			})));
			if (isTransitionNeeded) {
				b.element.fadeIn();
			}
			if (hasVisibleCommand) {
				allCommandsObj.append($($tab_Ubertip.$buttonSeparatorHtml));
			}
			var commandObj = $('<li></li>');
			commandObj.append(b.element);
			allCommandsObj.append(commandObj);
			this.$disposables.add$1(menuViewModel);
			tab.ObjectRegistry.newView(spiff.MenuView).call(null, [menuViewModel]);
			return true;
		},
		$handleMenuClosed: function Ubertip$HandleMenuClosed() {
			if (!ss.staticEquals(this.$2$UbertipMenuClosedField, null)) {
				this.$2$UbertipMenuClosedField();
			}
		},
		$handleMenuButtonClick: function Ubertip$HandleMenuButtonClick(menuViewModel, menuButton) {
			if (menuViewModel.get_visible()) {
				menuViewModel.remove_hidden(ss.mkdel(this, this.$handleMenuClosed));
				menuViewModel.hide();
				if (!ss.staticEquals(this.$2$UbertipMenuToggledField, null)) {
					this.$2$UbertipMenuToggledField(false);
				}
			}
			else {
				menuViewModel.add_hidden(ss.mkdel(this, this.$handleMenuClosed));
				var options = new spiff.ShowMenuOptions(menuButton.element, true);
				menuViewModel.show(options);
				if (!ss.staticEquals(this.$2$UbertipMenuToggledField, null)) {
					this.$2$UbertipMenuToggledField(true);
				}
			}
		},
		$updateButtonCommands: function Ubertip$UpdateButtonCommands(buttonModelIndicesThatNeedTransition) {
			if (!this.$addCommandButtonsAndActions) {
				return;
			}
			var hasVisibleCommand = false;
			var allCommandsObj = $('<ul></ul>');
			if (ss.isValue(this.$model.buttonModels)) {
				for (var index = 0; index < this.$model.buttonModels.length; ++index) {
					var buttonModel = this.$model.buttonModels[index];
					if (buttonModel.get_isPlaceholder()) {
						continue;
					}
					if (buttonModel.get_isMenuButton()) {
						var isTransitionNeeded = ss.isValue(buttonModelIndicesThatNeedTransition) && ss.contains(buttonModelIndicesThatNeedTransition, index);
						hasVisibleCommand = this.$appendMenu(buttonModel.get_asMenuButton(), allCommandsObj, hasVisibleCommand, isTransitionNeeded) || hasVisibleCommand;
					}
					else if (buttonModel.get_status() !== 'hidden') {
						var isTransitionNeeded1 = ss.isValue(buttonModelIndicesThatNeedTransition) && ss.contains(buttonModelIndicesThatNeedTransition, index);
						this.$appendButton(buttonModel, allCommandsObj, hasVisibleCommand, isTransitionNeeded1);
						hasVisibleCommand = true;
					}
				}
			}
			this.$addDomForCommandPlaceholders(allCommandsObj, hasVisibleCommand);
			if (hasVisibleCommand) {
				this.$commandsElt.html('').append(allCommandsObj).removeClass('hide');
			}
			else {
				this.$commandsElt.html('').addClass('hide');
			}
		},
		$appendButton: function Ubertip$AppendButton(buttonModel, allCommandsObj, hasVisibleCommand, isTransitionNeeded) {
			var b = this.$createCommandButton(buttonModel);
			b.set_context(buttonModel.get_legacyCommandModel());
			this.$addClickHandler(b, ss.mkdel(this, this.$handleCommandClick));
			if (ss.keyExists($tab_Ubertip.$placeholderWidth, buttonModel.get_commandType())) {
				b.element.width($tab_Ubertip.$placeholderWidth[buttonModel.get_commandType()]);
			}
			if (isTransitionNeeded) {
				b.element.fadeIn();
			}
			if (hasVisibleCommand) {
				allCommandsObj.append($($tab_Ubertip.$buttonSeparatorHtml));
			}
			var commandObj = $('<li></li>');
			commandObj.append(b.element);
			allCommandsObj.append(commandObj);
		},
		$createCommandButton: function Ubertip$CreateCommandButton(buttonModel) {
			var b = spiff.LabelButton.newNativeButton();
			if (tsConfig.is_mobile) {
				var labelHtmlContent = $tab_Ubertip.$getMobileLabel($tab_Ubertip.$getCommandKeyFromCommand(buttonModel), buttonModel.get_name());
				var labelHtml = $('<div>' + labelHtmlContent + '</div>');
				b.setLabelContents(labelHtml);
			}
			else {
				b.set_label(buttonModel.get_name());
				b.set_hoverTooltipText(buttonModel.get_description());
			}
			var classSb = new ss.StringBuilder('tab-command');
			if (ss.isNullOrEmptyString(buttonModel.get_imageRes())) {
				classSb.append(buttonModel.get_commandType());
			}
			else {
				classSb.append($tab_Ubertip.$getCommandKeyFromCommand(buttonModel));
			}
			classSb.append(' ').append(buttonModel.get_status());
			b.element.addClass(classSb.toString());
			if (buttonModel.get_status() === 'disabled') {
				b.set_disabled(true);
			}
			this.$disposables.add$1(b);
			return b;
		},
		$createMenuButton: function Ubertip$CreateMenuButton(buttonMenuModel) {
			var b = (ss.isValue(buttonMenuModel.get_imageRes()) ? this.$createMenuButtonWithIcon(buttonMenuModel) : $tab_Ubertip.$createSimpleMenuButton(buttonMenuModel));
			$tab_Ubertip.$enableMenuButtonCommand(b);
			this.$disposables.add$1(b);
			return b;
		},
		$createMenuButtonWithIcon: function Ubertip$CreateMenuButtonWithIcon(buttonModel) {
			var b = spiff.LabelButton.newMenuButton();
			b.set_hoverTooltipText(buttonModel.get_description());
			var iconResourceName = $tab_Ubertip.$getIconResourceName(buttonModel.get_wrappedCommandItemPresModel().get_iconRes());
			$tab_Ubertip.$addCommandIcon(b, iconResourceName);
			$tab_Ubertip.$setMenuButtonLabel(b, buttonModel, iconResourceName);
			return b;
		},
		$addDomForCommandPlaceholders: function Ubertip$AddDomForCommandPlaceholders(allCommandsObj, hasVisibleCommand) {
			if (ss.isValue(this.get_model().buttonModels)) {
				var $t1 = this.get_model().buttonModels;
				for (var $t2 = 0; $t2 < $t1.length; $t2++) {
					var buttonModel = $t1[$t2];
					if (!buttonModel.get_isPlaceholder()) {
						continue;
					}
					ss.Debug.assert(buttonModel.get_commandType() !== 99, 'placeholder buttons are expected to have a command type so it is identifiable');
					var separator = $($tab_Ubertip.$buttonSeparatorHtml);
					var b = $tab_Ubertip.$createPlaceholderButton(buttonModel);
					this.$disposables.add$1(b);
					var commandObj = $('<li></li>');
					commandObj.append(b.element);
					if (buttonModel.get_commandType() === 10 && this.get_$shouldEnforceButtonOrdering() && hasVisibleCommand) {
						var keepOnlyExclude = _.filter(this.$model.buttonModels, function(button) {
							return button.get_commandType() === 2;
						});
						if (ss.isValue(keepOnlyExclude)) {
							var exclude = allCommandsObj.children().get(2);
							separator.insertAfter(exclude);
							commandObj.insertAfter(separator);
						}
						else {
							var firstButton = allCommandsObj.children().get(0);
							commandObj.insertBefore(firstButton);
							separator.insertBefore(firstButton);
						}
					}
					else {
						if (hasVisibleCommand) {
							allCommandsObj.append(separator);
						}
						allCommandsObj.append(commandObj);
					}
					document.documentElement.appendChild(allCommandsObj.first().get(0));
					$tab_Ubertip.$placeholderWidth[buttonModel.get_commandType()] = tab.DoubleUtil.roundToInt(b.element.innerWidth());
					b.element.width($tab_Ubertip.$placeholderWidth[buttonModel.get_commandType()]);
					document.documentElement.removeChild(allCommandsObj.first().get(0));
				}
			}
		},
		$addClickHandler: function Ubertip$AddClickHandler(b, handler) {
			var clickHandler = function() {
				handler(b);
			};
			b.add_click(clickHandler);
			this.$disposables.add$1(new tab.CallOnDispose(function() {
				b.remove_click(clickHandler);
			}));
		},
		$handleCommandClick: function Ubertip$HandleCommandClick(button) {
			var $t1 = new $tab_CommandExecutedEventArgs();
			$t1.command = ss.cast(button.get_context(), tab.CommandModel);
			var commandArgs = $t1;
			this.onCommandExecuted(commandArgs);
		},
		$handleActionClick: function Ubertip$HandleActionClick(button) {
			var $t1 = new $tab_ActionExecutedEventArgs();
			$t1.action = ss.cast(button.get_context(), tab.CommandModel);
			var actionArgs = $t1;
			this.onActionExecuted(actionArgs);
		},
		$handleActionPMClick: function Ubertip$HandleActionPMClick(button) {
			var actionPM = button.get_context();
			if (tab.ActionUtils.ubertipActionNeedsToWaitForServerPresModel(actionPM)) {
				tab.BaseSession.get_waitHandler().showAndLock();
				this.$isActionClicked = true;
				this.$actionDisplayName = button.get_labelElement().text();
				tab.Logger.getLogger($tab_Ubertip, null).debug('User cliked on Action name=%s', [this.$actionDisplayName]);
			}
			else {
				var visualModel = tab.ModelUtils.getVisualModelFromVisualId(this.$model.visualId, null);
				var tupleIds = [ss.unbox(this.$model.tupleId)];
				tab.UberTipClientCommands.executeUbertipAction(actionPM, tupleIds, visualModel);
			}
		},
		$updateActions: function Ubertip$UpdateActions() {
			if (tab.MiscUtil.isNullOrEmpty$1(this.$model.actions) && tab.MiscUtil.isNullOrEmpty$1(this.$model.actionPMs)) {
				this.$actionsElt.html('').removeClass('invisible').addClass('hide');
			}
			else if (ss.isValue(this.$model.actions)) {
				this.$updateActionsRemotely();
			}
			else {
				this.$updateActionsLocally();
			}
		},
		$updateActionsRemotely: function Ubertip$UpdateActionsRemotely() {
			var allActionsObj = $('<ul></ul>');
			for (var $t1 = 0; $t1 < this.$model.actions.length; $t1++) {
				var action = this.$model.actions[$t1];
				this.$createActionButton(allActionsObj, action.get_name(), action, ss.mkdel(this, this.$handleActionClick));
			}
			var tooltipHeightBefore = tab.DoubleUtil.roundToInt(this.element.height());
			this.$actionsElt.html('').append(allActionsObj).removeClass('hide invisible');
			var tooltipHeightAfter = tab.DoubleUtil.roundToInt(this.element.height());
			if (tooltipHeightAfter !== tooltipHeightBefore) {
				this.$tooltip.requestLayout(null, true);
			}
		},
		$updateActionsLocally: function Ubertip$UpdateActionsLocally() {
			var allActionsObj = $('<ul></ul>');
			var visualModel = tab.ModelUtils.getVisualModelFromVisualId(this.$model.visualId, null);
			if (!ss.isValue(visualModel)) {
				tab.Log.get(this).warn("Unable to get visual model when performing action. Ubertip's visual id may be stale.", []);
				return;
			}
			var hasFilterOrUrlAction = false;
			var actionCanRunLocally = true;
			for (var $t1 = 0; $t1 < this.$model.actionPMs.length; $t1++) {
				var actionPM = this.$model.actionPMs[$t1];
				var actionType = tab.ActionUtils.getActionType(actionPM);
				if (!this.$addCommandButtonsAndActions && actionType !== 'highlight') {
					continue;
				}
				var vizDataModel = visualModel.get_vizDataModel();
				var tupleIds = [ss.unbox(this.$model.tupleId)];
				var dataDictionary = tab.ApplicationModel.get_instance().get_dataDictionary();
				var delimiter = (ss.isValue(actionPM.linkSpec) ? actionPM.linkSpec.delimiter : null);
				var buttonLabel = tab.VizDataUtils.constructUrlFromString(dataDictionary, actionPM.name, vizDataModel, tupleIds, visualModel.get_worksheetName(), delimiter);
				var skipButtonCreation = false;
				if (actionType === 'url') {
					var urlPresModelTuple = tab.ActionUtils.getUrlActionPm(actionPM, visualModel, tupleIds);
					skipButtonCreation = urlPresModelTuple.item2 === 'urlConstructionFail';
					if (ss.isNullOrUndefined(urlPresModelTuple.item1) || ss.isNullOrEmptyString(buttonLabel)) {
						actionCanRunLocally = false;
					}
				}
				if (!skipButtonCreation) {
					this.$createActionButton(allActionsObj, buttonLabel, actionPM, ss.mkdel(this, this.$handleActionPMClick));
				}
				if (actionType === 'filter' || actionType === 'url') {
					hasFilterOrUrlAction = true;
				}
			}
			if (allActionsObj.find('li').length > 0) {
				var paneDescriptorCount = -1;
				if (ss.isValue(visualModel.get_sceneModel())) {
					paneDescriptorCount = visualModel.get_sceneModel().get_paneDescriptorCount();
				}
				else {
					tab.Log.get(this).warn('Creating local action for ubertip but SceneModel does not exist.', []);
				}
				if (paneDescriptorCount > 1 && hasFilterOrUrlAction || !actionCanRunLocally) {
					this.$actionsElt.html('').append(allActionsObj).removeClass('hide').addClass('invisible');
				}
				else {
					this.$actionsElt.html('').append(allActionsObj).removeClass('hide invisible');
				}
			}
		},
		$createActionButton: function Ubertip$CreateActionButton(allActionsObj, label, context, click) {
			var b = spiff.LabelButton.newAnchorButton();
			b.set_label(label);
			b.element.addClass('tab-action');
			b.set_context(context);
			this.$addClickHandler(b, click);
			this.$disposables.add$1(b);
			var actionObj = $('<li></li>');
			actionObj.append(b.element);
			allActionsObj.append(actionObj);
		},
		$updateContentCommands: function Ubertip$UpdateContentCommands() {
			tab.MiscUtil.dispose(this.$selectionRelaxationHandlers);
			if (ss.isNullOrUndefined(this.$model.contentCommands)) {
				return;
			}
			var commandLookup = {};
			for (var $t1 = 0; $t1 < this.$model.contentCommands.length; $t1++) {
				var command = this.$model.contentCommands[$t1];
				commandLookup[command.get_name()] = command;
			}
			for (var $t2 = 0; $t2 < this.$selectionRelaxationInfo.length; $t2++) {
				var info = this.$selectionRelaxationInfo[$t2];
				if (ss.keyExists(commandLookup, info.get_$commandName())) {
					this.$createTapHandlerForSelectionRelaxation(info, commandLookup);
				}
			}
		},
		$createTapHandlerForSelectionRelaxation: function Ubertip$CreateTapHandlerForSelectionRelaxation(info, commandLookup) {
			var linkContent = info.get_$linkContent();
			var $t1 = new EventUtils.EventHandleSpec();
			$t1.tap = ss.mkdel(this, function() {
				if (!linkContent.hasClass($tab_Ubertip.$selectedSelectionRelaxationSelector)) {
					var command = commandLookup[info.get_$commandName()];
					this.$executeSelectionRelaxationCommand(linkContent, command);
				}
			});
			var spec = $t1;
			this.$selectionRelaxationHandlers.push(new EventUtils.TableauEventHandler(linkContent.get(0), spec));
		},
		$executeSelectionRelaxationCommand: function Ubertip$ExecuteSelectionRelaxationCommand(linkContent, command) {
			var dict = ss.mkdict(['isSelected', true]);
			linkContent.data(dict);
			linkContent.addClass($tab_Ubertip.$selectedSelectionRelaxationSelector);
			var $t1 = new $tab_CommandExecutedEventArgs();
			$t1.command = command;
			this.onCommandExecuted($t1);
		}
	}, spiff.Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
	ss.initClass($tab_UndoKeyboardShortcut, $asm, {
		get_keyCombos: function UndoKeyboardShortcut$get_KeyCombos() {
			return tab.KeyCombos.op_Implicit(new tab.KeyCombo.$ctor3(new tab.KeyModifiers(false, false, false, true, false, false, false, false, false), 90, []));
		},
		get_commandId: function UndoKeyboardShortcut$get_CommandId() {
			return { ns: 'tabdoc', cmd: 'undo' };
		}
	}, $tab_UndoRedoKeyboardShortcut, [tab.IKeyboardShortcut]);
	ss.initClass($tab_URIUtil, $asm, {});
	ss.initClass($tab_UserPillComponent, $asm, {
		render: function UserPillComponent$Render() {
			var $t1 = new EventUtils.EventHandleSpec();
			$t1.tap = ss.mkdel(this, function(evt) {
				this.props.removeUser(this.props.user);
			});
			var removeButtonClickedSpec = $t1;
			var removeUserSpan = EventUtils.EventForwarder.span(removeButtonClickedSpec, { className: 'tabUserPillRemove' }, '×');
			var userNameSpan = spiff.DOMElements.span({ className: 'tabUserPillName' }, this.props.user.friendlyName);
			var userPill = spiff.DOMElements.div(this.$userPillProps(), userNameSpan, removeUserSpan);
			if (this.props.pillStatus === 1) {
				return React.createElement(SharedWidgets.Tooltip, { getContent: ss.mkdel(this, this.$getTooltipContent), position: 'Bottom', maxWidth: 232 }, [userPill]);
			}
			else {
				return userPill;
			}
		},
		$userPillProps: function UserPillComponent$UserPillProps() {
			var pillClass = 'tabUserPill';
			var pillTitle = this.props.user.friendlyName;
			var status = this.props.pillStatus;
			if (status === 1) {
				pillClass += ' error';
				pillTitle = null;
			}
			else if (status === 2) {
				pillClass += ' pending';
			}
			return { className: pillClass, title: pillTitle };
		},
		$getTooltipContent: function UserPillComponent$GetTooltipContent() {
			return spiff.DOMElements.div({ className: 'userPillErrorTooltip' }, this.props.errorText);
		}
	}, React.Component);
	ss.initClass($tab_UserPillsComponent, $asm, {
		render: function UserPillsComponent$Render() {
			var items = _.map(this.props.users, ss.mkdel(this, function(user) {
				return React.createElement($tab_UserPillComponent, { removeUser: this.props.removeUser, addUser: this.props.addUser, user: user, pillStatus: (ss.staticEquals(this.props.userValidator, null) ? 0 : this.props.userValidator(user)), errorText: (!ss.staticEquals(this.props.invalidUserTextGenerator, null) ? this.props.invalidUserTextGenerator(user) : '') });
			}));
			var $t1 = new spiff.ScrollingProps();
			$t1.scrollY = true;
			$t1.scrollbars = true;
			$t1.alwaysShowScrollbarsIfScrollable = true;
			var scrollingProps = $t1;
			var scrollingItems = spiff.ScrollingComponent.createScroller(scrollingProps, items);
			return spiff.DOMElements.div({ className: 'tabUserPillsComponent' }, scrollingItems);
		}
	}, React.Component);
	ss.initClass($tab_UserPillsViewModel, $asm, {
		add_propsUpdated: function UserPillsViewModel$add_PropsUpdated(value) {
			this.$2$PropsUpdatedField = ss.delegateCombine(this.$2$PropsUpdatedField, value);
		},
		remove_propsUpdated: function UserPillsViewModel$remove_PropsUpdated(value) {
			this.$2$PropsUpdatedField = ss.delegateRemove(this.$2$PropsUpdatedField, value);
		},
		get_props: function UserPillsViewModel$get_Props() {
			return this.$2$PropsField;
		},
		set_props: function UserPillsViewModel$set_Props(value) {
			this.$2$PropsField = value;
		},
		addUser: function UserPillsViewModel$AddUser(user) {
			if (_.any(this.get_props().users, function(value) {
				return value.id === user.id;
			})) {
				return;
			}
			this.get_props().users.push(user);
			this.raiseActionEvent(this.$2$PropsUpdatedField);
		},
		removeUser: function UserPillsViewModel$RemoveUser(user) {
			var removed = ss.remove(this.get_props().users, user);
			if (removed) {
				this.raiseActionEvent(this.$2$PropsUpdatedField);
			}
		},
		setUsers: function UserPillsViewModel$SetUsers(users) {
			_.each(this.get_props().users, ss.mkdel(this, function(user) {
				this.removeUser(user);
			}));
			_.each(users, ss.mkdel(this, function(user1) {
				this.addUser(user1);
			}));
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel, ss.makeGenericType(spiff.IPropsProvider$1, [Object])]);
	ss.initClass($tab_VerticalIteratorButtonTemplate, $asm, {
		$setArrows: function VerticalIteratorButtonTemplate$SetArrows() {
			this.prevButton.addClass('tabCatLegendScrollUp');
			this.nextButton.addClass('tabCatLegendScrollDown');
		}
	}, $tab_IteratorButtonTemplate, [ss.IDisposable]);
	ss.initClass($tab_ViewController, $asm, {
		add_refreshLegacyLegendImages: function ViewController$add_RefreshLegacyLegendImages(value) {
			this.$1$RefreshLegacyLegendImagesField = ss.delegateCombine(this.$1$RefreshLegacyLegendImagesField, value);
		},
		remove_refreshLegacyLegendImages: function ViewController$remove_RefreshLegacyLegendImages(value) {
			this.$1$RefreshLegacyLegendImagesField = ss.delegateRemove(this.$1$RefreshLegacyLegendImagesField, value);
		},
		get_cacheVersion: function ViewController$get_CacheVersion() {
			return this.$imageCacheVersion;
		},
		get_viewWidget: function ViewController$get_ViewWidget() {
			return this.$viewWidget;
		},
		get_viewSession: function ViewController$get_ViewSession() {
			return this.$viewSession;
		},
		get_sheetName: function ViewController$get_SheetName() {
			return this.$viewSession.sheetId;
		},
		dispose: function ViewController$Dispose() {
			tab.Log.get(this).debug('Dispose: %s', [this.get_sheetName()]);
			this.$viewWidget = null;
			this.$disposables.dispose();
		},
		setTiledViewer: function ViewController$SetTiledViewer(paneTableView) {
			this.$viewWidget = paneTableView;
		},
		$doMinorUpdate: function ViewController$DoMinorUpdate(selectionLayoutStatus) {
			if (ss.isNullOrUndefined(selectionLayoutStatus)) {
				return;
			}
			var layoutStatus = selectionLayoutStatus.layoutStatus;
			if (ss.isNullOrUndefined(layoutStatus)) {
				tab.Log.get(this).warn('UpdateCacheUrl: Layout Status not found. This might be a legacy selection json object!', []);
				return;
			}
			if (!tab.CommandController.get().processingRenderModeChange && !tab.CommandController.get().processingStoryPointChange) {
				this.incrementCacheVersion();
				var vm = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), this.get_sheetName());
				if (vm.get_isVisualValid()) {
					this.$viewWidget.doTiledViewerRefreshImages(vm.get_tileCacheUrl());
					if (!ss.staticEquals(this.$1$RefreshLegacyLegendImagesField, null)) {
						this.$1$RefreshLegacyLegendImagesField();
					}
				}
			}
		},
		$fireSelectionChanged: function ViewController$FireSelectionChanged(data) {
			tab.Log.get(this).debug('Firing SelectionChanged', []);
			if (!ss.staticEquals($tab_ViewController.$1$SelectionChangedField, null)) {
				$tab_ViewController.$1$SelectionChangedField(this.get_sheetName(), data);
			}
			this.$doMinorUpdate(data);
		},
		incrementCacheVersion: function ViewController$IncrementCacheVersion() {
			this.$imageCacheVersion += 1;
		}
	}, null, [ss.IDisposable, tab.IViewController]);
	ss.initClass($tab_ViewingToolbarCommands, $asm, {
		get_toolbarViewModel: function ViewingToolbarCommands$get_ToolbarViewModel() {
			return this.$app.get_toolbarViewModel();
		},
		exportImage: function ViewingToolbarCommands$ExportImage() {
			var storyPointId = tab.ApplicationModel.get_instance().get_workbook().get_currentSheetStoryPointId();
			var dialogData = tableau.types.ExportDialogType['ExportImage'];
			var sheetNameList = [];
			var scrollPoints = [];
			if (this.$app.get_isDashboard()) {
				var scrollData = {};
				var viewControllers = this.$app.get_viewControllers();
				if (ss.isValue(viewControllers)) {
					$.each(viewControllers, function(index, viewController) {
						var scrollPos = viewController.get_viewWidget().get_scrollPosition();
						var x = scrollPos.x;
						var y = scrollPos.y;
						if (x !== 0 || y !== 0) {
							scrollData[viewController.get_sheetName() + '-x'] = x;
							scrollData[viewController.get_sheetName() + '-y'] = y;
							scrollPoints.push({ x: x, y: y });
							sheetNameList.push(viewController.get_sheetName());
						}
					});
				}
			}
			tab.ExportServerCommands.exportImage(tsConfig.current_sheet_name, storyPointId, dialogData, sheetNameList, scrollPoints);
		},
		exportPdf: function ViewingToolbarCommands$ExportPdf() {
			var exportHelper = new $tab_ExportHelper();
			exportHelper.triggerExportPdfUI();
		},
		$pauseAutoUpdate: function ViewingToolbarCommands$PauseAutoUpdate() {
			if (this.$app.get_autoUpdate()) {
				this.$toggleAutoUpdate();
			}
		},
		$resumeAutoUpdate: function ViewingToolbarCommands$ResumeAutoUpdate() {
			if (!this.$app.get_autoUpdate()) {
				this.$toggleAutoUpdate();
			}
		},
		$isAutoUpdate: function ViewingToolbarCommands$IsAutoUpdate() {
			return this.$app.get_autoUpdate();
		},
		$toggleAutoUpdate: function ViewingToolbarCommands$ToggleAutoUpdate() {
			this.$app.set_autoUpdate(!this.$app.get_autoUpdate());
			tab.ToolbarServerCommands.setAutoUpdate(this.$app.get_autoUpdate());
			tab.BaseSession.autoUpdate = this.$app.get_autoUpdate();
			if (this.$app.get_autoUpdate() && this.$app.get_invalid()) {
				tab.CommandController.get().refreshLayout();
			}
		},
		$isDownloadAllowed: function ViewingToolbarCommands$IsDownloadAllowed() {
			return !tsConfig.previewMode && !ss.isNullOrEmptyString(tsConfig.downloadURI) || tsConfig.is_metrics_view;
		},
		$downloadWorkbookForApi: function ViewingToolbarCommands$DownloadWorkbookForApi(url) {
			var downloadUrl;
			if (tsConfig.is_metrics_view) {
				downloadUrl = this.$app.get_session().metricsViewDownloadUrl();
			}
			else {
				downloadUrl = this.$rewriteDownloadUri(url);
			}
			window.open(downloadUrl);
		},
		$refreshData: function ViewingToolbarCommands$RefreshData() {
			tab.ToolbarServerCommands.refreshData();
		},
		$showShareDialog: function ViewingToolbarCommands$ShowShareDialog() {
			if (ss.isValue(this.$app.get_toolbarViewModel())) {
				this.$app.get_toolbarViewModel().showDialog($tab_ToolbarButtonViewModel.iconTypeShare);
			}
		},
		$showCustomViewsDialog: function ViewingToolbarCommands$ShowCustomViewsDialog() {
			if (ss.isValue(this.$app.get_toolbarViewModel())) {
				this.$app.get_toolbarViewModel().showDialog($tab_ToolbarButtonViewModel.iconTypeCustomViews);
			}
		},
		$showDataAlertDialog: function ViewingToolbarCommands$ShowDataAlertDialog() {
			if (ss.isValue(this.$app.get_toolbarViewModel())) {
				this.$app.get_toolbarViewModel().showDialog('alert');
			}
		},
		$showSubscribeDialog: function ViewingToolbarCommands$ShowSubscribeDialog() {
			if (ss.isValue(this.$app.get_toolbarViewModel())) {
				this.$app.get_toolbarViewModel().showDialog($tab_ToolbarButtonViewModel.iconTypeSubscribe);
			}
		},
		$showPerformanceDialog: function ViewingToolbarCommands$ShowPerformanceDialog() {
			if (ss.isValue(this.$app.get_toolbarViewModel())) {
				this.$app.get_toolbarViewModel().showPerformanceMetrics();
			}
		},
		$showDownloadDialog: function ViewingToolbarCommands$ShowDownloadDialog() {
			if (ss.isValue(this.$app.get_toolbarViewModel())) {
				this.$app.get_toolbarViewModel().showDialog($tab_ToolbarButtonViewModel.iconTypeDownload);
			}
		},
		$selectMarksKeepOnly: function ViewingToolbarCommands$SelectMarksKeepOnly() {
		},
		$selectMarksExclude: function ViewingToolbarCommands$SelectMarksExclude() {
		},
		$rewriteDownloadUri: function ViewingToolbarCommands$RewriteDownloadUri(uri) {
			if (ss.isValue(uri)) {
				var matches = uri.match($tab_ViewingToolbarCommands.$uriPattern);
				if (ss.isValue(matches) && matches.length >= 2) {
					return tabBootstrap.ViewerBootstrap.get_instance().location.protocol + '//' + tabBootstrap.ViewerBootstrap.get_instance().location.host + matches[1];
				}
			}
			return uri;
		}
	});
	ss.initClass($tab_ViewportChangeDetector, $asm, {
		add_viewportChanged: function ViewportChangeDetector$add_ViewportChanged(value) {
			var noPreviousListeners = ss.staticEquals(this.$1$ViewportChangedInternalField, null);
			this.add_$viewportChangedInternal(value);
			if (noPreviousListeners) {
				this.$startListeningForViewportChanges();
			}
		},
		remove_viewportChanged: function ViewportChangeDetector$remove_ViewportChanged(value) {
			this.remove_$viewportChangedInternal(value);
			if (ss.staticEquals(this.$1$ViewportChangedInternalField, null)) {
				this.$stopListeningForViewportChanges();
			}
		},
		add_$viewportChangedInternal: function ViewportChangeDetector$add_ViewportChangedInternal(value) {
			this.$1$ViewportChangedInternalField = ss.delegateCombine(this.$1$ViewportChangedInternalField, value);
		},
		remove_$viewportChangedInternal: function ViewportChangeDetector$remove_ViewportChangedInternal(value) {
			this.$1$ViewportChangedInternalField = ss.delegateRemove(this.$1$ViewportChangedInternalField, value);
		},
		get_lastViewportRect: function ViewportChangeDetector$get_LastViewportRect() {
			return this.$1$LastViewportRectField;
		},
		set_lastViewportRect: function ViewportChangeDetector$set_LastViewportRect(value) {
			this.$1$LastViewportRectField = value;
		},
		get_$viewportScrollEventSource: function ViewportChangeDetector$get_ViewportScrollEventSource() {
			return (ss.isValue(tab.WindowHelper.get_windowParent().visualViewport) ? tab.WindowHelper.get_windowParent().visualViewport : tab.WindowHelper.get_windowParent());
		},
		$startListeningForViewportChanges: function ViewportChangeDetector$StartListeningForViewportChanges() {
			if (tabBootstrap.EmbedAndViewportCalculator.get_embedMode() !== 'crossDomainEmbedded') {
				try {
					this.get_$viewportScrollEventSource().addEventListener('scroll', ss.mkdel(this, this.$checkForViewportChange));
					this.$checkForViewportChange();
					return;
				}
				catch ($t1) {
					tab.Log.get(this).warn('Unable to add event listener to window parent, even though we are not cross-domain. Review cross-domain detection logic.', []);
				}
			}
			this.$pollForViewportChangeRequestId = tab.WindowHelper.requestAnimationFrame(ss.mkdel(this, this.$pollViewport));
		},
		$stopListeningForViewportChanges: function ViewportChangeDetector$StopListeningForViewportChanges() {
			if (tabBootstrap.EmbedAndViewportCalculator.get_embedMode() !== 'crossDomainEmbedded') {
				try {
					this.get_$viewportScrollEventSource().removeEventListener('scroll', ss.mkdel(this, this.$checkForViewportChange));
					return;
				}
				catch ($t1) {
					tab.Log.get(this).warn('Unable to remove event listener from window parent, even though we are not cross-domain. Review cross-domain detection logic.', []);
				}
			}
			tab.WindowHelper.cancelAnimationFrame(this.$pollForViewportChangeRequestId);
		},
		$checkForViewportChange: function ViewportChangeDetector$CheckForViewportChange() {
			if (this.$isWaitingForViewportCheck) {
				this.$hasDeferredViewportCheck = true;
				return;
			}
			this.$isWaitingForViewportCheck = true;
			$tab_BrowserViewport.getViewport(ss.mkdel(this, this.$handleNewViewport));
		},
		$handleNewViewport: function ViewportChangeDetector$HandleNewViewport(viewport) {
			var viewportDimensions = viewport.get_dimensions();
			var viewportChanged = ss.isNullOrUndefined(this.get_lastViewportRect()) || !tab.RectUtil.isEqual(this.get_lastViewportRect(), viewportDimensions);
			if (viewportChanged) {
				this.set_lastViewportRect(viewportDimensions);
				if (!ss.staticEquals(this.$1$ViewportChangedInternalField, null)) {
					this.$1$ViewportChangedInternalField();
				}
			}
			this.$isWaitingForViewportCheck = false;
			if (this.$hasDeferredViewportCheck) {
				this.$hasDeferredViewportCheck = false;
				this.$checkForViewportChange();
			}
		},
		$pollViewport: function ViewportChangeDetector$PollViewport() {
			this.$checkForViewportChange();
			this.$pollForViewportChangeRequestId = tab.WindowHelper.requestAnimationFrame(ss.mkdel(this, this.$pollViewport));
		}
	});
	ss.initClass($tab_VisibleSheetAndRepositoryUrl, $asm, {});
	ss.initClass($tab_VizEvent, $asm, {});
	ss.initClass($tab_WaitDialog, $asm, {
		handleCommandCompleted: function WaitDialog$HandleCommandCompleted() {
			this.$closeAndResetDialog();
		},
		handleCommandError: function WaitDialog$HandleCommandError() {
			this.$closeAndResetDialog();
		},
		handleCommandStarted: function WaitDialog$HandleCommandStarted(command) {
			this.$currentCommand = command;
			this.$showDialog();
		},
		$showDialog: function WaitDialog$ShowDialog() {
			if (ss.isNullOrUndefined(this.$currentCommand) || ss.isNullOrUndefined(this.$currentCommand.get_remoteCommands())) {
				return;
			}
			var remoteCommands = this.$currentCommand.get_remoteCommands();
			ss.Debug.assert(remoteCommands.length === 1, 'Waiting requires exactly 1 remote command.');
			if (remoteCommands.length !== 1) {
				return;
			}
			if (ss.isNullOrUndefined($tab_WaitDialog.$instanceElement)) {
				this.parentNode = document.createElement('div');
				var props = this.$dialogProps || { waitingTitle: tab.Strings.WaitDialogDefaultTitleStatus };
				$tab_WaitDialog.$instanceElement = React.createElement($tab_WaitDialogComponent, props);
				ReactDOM.render($tab_WaitDialog.$instanceElement, this.parentNode);
			}
		},
		$closeAndResetDialog: function WaitDialog$CloseAndResetDialog() {
			if (!ss.staticEquals(this.$onDialogCloseEvent, null)) {
				this.$onDialogCloseEvent();
			}
			$tab_WaitDialog.$instanceElement = null;
			this.$currentCommand = null;
			_.defer(ss.mkdel(this, this.dispose));
		}
	}, $tab_BaseDisposableDialog, [ss.IDisposable, tab.IWaitForCommands]);
	ss.initClass($tab_WaitDialogComponent, $asm, {
		render: function WaitDialogComponent$Render() {
			return React.createElement(SharedWidgets.DialogWidget, {
				children: this.$getContent(),
				isModal: true,
				dialogBodyStyle: { height: 200 + 'px', width: 375 + 'px', overflow: 'visible', padding: 0 },
				disableAutoFocus: true,
				onCloseRequest: function() {
				},
				positioningBehavior: 0,
				shouldAdjustPositionOnWindowResize: true,
				shouldRecenterOnUpdate: true,
				shouldReturnFocusOnClose: false,
				showFooter: false,
				testId: 'WaitingDialog',
				type: 2,
				zIndex: tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex
			});
		},
		$getContent: function WaitDialogComponent$GetContent() {
			return React.createElement(Cancel.WaitingComponent, { message: this.props.waitingMessage, showButton: false, title: this.props.waitingTitle });
		}
	}, spiff.PureRenderComponent);
	ss.initClass($tab_WebZoneTemplate, $asm, {
		updateContentTemplate: function WebZoneTemplate$UpdateContentTemplate(template) {
			this.domRoot.children().detach();
			this.domRoot.append(template.domRoot);
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_WebZoneView, $asm, {
		get_zoneModel: function WebZoneView$get_ZoneModel() {
			return this.$webZoneViewModel.get_webZoneModel().get_zoneModel();
		},
		get_webZonePresModel: function WebZoneView$get_WebZonePresModel() {
			return this.$webZoneViewModel.get_webZoneModel().pm;
		},
		get_domRoot: function WebZoneView$get_DomRoot() {
			return this.get_template().domRoot;
		},
		get_$dom: function WebZoneView$get_Dom() {
			return this.get_template();
		},
		onAddedToDom: function WebZoneView$OnAddedToDom() {
			spiff.Widget.prototype.onAddedToDom.call(this);
			this.$handleNewWebZone();
		},
		$parentZoneChanged: function WebZoneView$ParentZoneChanged(source, args) {
			if (ss.referenceEquals(args.get_propertyName(), $tab_ZoneViewModel.isActiveZonePropertyName)) {
				this.$updateGlass();
			}
		},
		$handleNewWebZone: function WebZoneView$HandleNewWebZone() {
			var url = $tab_URIUtil.absolutizeURI(this.get_webZonePresModel().url, true);
			var protocol = tab.WindowHelper.getLocation(window.window).protocol;
			if (protocol === 'https:' && ss.startsWithString(url, 'http:')) {
				this.$showHttpsEmbedHttpMessage(url);
			}
			else {
				this.$updateAndShowFrame(this.get_webZonePresModel().url);
			}
			this.$updateGlass();
		},
		$showHttpsEmbedHttpMessage: function WebZoneView$ShowHttpsEmbedHttpMessage(url) {
			var template = (tsConfig.is_authoring ? new $tab_HttpsEmbedHttpAuthoringMessage(url) : new $tab_HttpsEmbedHttpViewMessage(url));
			this.get_$dom().updateContentTemplate(template);
		},
		$updateAndShowFrame: function WebZoneView$UpdateAndShowFrame(rawUrl) {
			if (ss.isNullOrUndefined(this.$frameTemplate)) {
				this.$frameTemplate = new $tab_IFrameTemplate('frame_' + this.get_zoneModel().get_zoneId(), this.$parentZoneViewModel);
			}
			tab.DomUtil.resize(this.$frameTemplate.get_frame()[0], { l: 0, t: 0, w: this.get_zoneModel().get_contentWidth(), h: this.get_zoneModel().get_contentHeight() });
			var url = $tab_URIUtil.absolutizeURI(rawUrl, true);
			this.$frameTemplate.setSrc(url, rawUrl);
			if (this.$frameTemplate.domRoot.parent().length === 0) {
				this.get_$dom().updateContentTemplate(this.$frameTemplate);
			}
		},
		$glassClicked: function WebZoneView$GlassClicked() {
			this.$parentZoneViewModel.setActive('replace');
		},
		$updateGlass: function WebZoneView$UpdateGlass() {
			if (!tsConfig.is_authoring || tsConfig.is_mobile) {
				return;
			}
			if (ss.isNullOrUndefined(this.$glass)) {
				var $t1 = new spiff.Glass(this.element[0], false);
				$t1.set_opaque(false);
				this.$glass = $t1;
				this.$glass.add_click(ss.mkdel(this, this.$glassClicked));
				this.disposables.add$1(this.$glass);
			}
			if (this.$parentZoneViewModel.get_isActiveZone()) {
				this.$glass.hide();
			}
			else {
				this.$glass.show();
			}
		},
		$handleResizeZone: function WebZoneView$HandleResizeZone() {
			this.$handleNewWebZone();
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_WebZoneViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_WebZoneViewModel])]);
	ss.initClass($tab_WebZoneViewModel, $asm, {
		add_newWebZone: function WebZoneViewModel$add_NewWebZone(value) {
			this.$2$NewWebZoneField = ss.delegateCombine(this.$2$NewWebZoneField, value);
		},
		remove_newWebZone: function WebZoneViewModel$remove_NewWebZone(value) {
			this.$2$NewWebZoneField = ss.delegateRemove(this.$2$NewWebZoneField, value);
		},
		get_webZoneModel: function WebZoneViewModel$get_WebZoneModel() {
			return this.$webZoneModel;
		},
		get_url: function WebZoneViewModel$get_Url() {
			return this.get_webZoneModel().get_url();
		},
		handleNewWebZone: function WebZoneViewModel$HandleNewWebZone() {
			this.$raiseNewWebZone();
		},
		$raiseNewWebZone: function WebZoneViewModel$RaiseNewWebZone() {
			if (ss.isValue(this.$2$NewWebZoneField)) {
				this.$2$NewWebZoneField();
			}
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_WidgetPluginContainer, $asm, {
		componentDidMount: function WidgetPluginContainer$ComponentDidMount() {
			this.$componentTypePromise.done(ss.mkdel(this, function(moduleType) {
				var $t1 = new $tab_WidgetPluginContainerState();
				$t1.componentType = moduleType;
				this.setState($t1);
			}));
		},
		render: function WidgetPluginContainer$Render() {
			if (ss.isNullOrUndefined(this.state.componentType)) {
				return null;
			}
			return React.createElement(this.state.componentType, this.props.initialProps);
		}
	}, React.PureComponent);
	ss.initClass($tab_WidgetPluginContainerProps, $asm, {});
	ss.initClass($tab_WidgetPluginContainerState, $asm, {});
	ss.initClass($tab_WidgetUtil, $asm, {});
	ss.initClass($tab_WorkbookTemplate, $asm, {}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_WorkbookView, $asm, {
		get_dom: function WorkbookView$get_Dom() {
			return ss.cast(this.get_template(), $tab_WorkbookTemplate);
		},
		get_containerNode: function WorkbookView$get_ContainerNode() {
			return this.$dashboardView.get_containerNode();
		},
		get_dashboardView: function WorkbookView$get_DashboardView() {
			return this.$dashboardView;
		},
		get_dashboardSpacerSize: function WorkbookView$get_DashboardSpacerSize() {
			return (ss.isNullOrUndefined(this.get_dashboardView()) ? null : tab.DashboardSizeCalculator.calculateContainerSize(this.get_dashboardView().get_dashboardSize()));
		},
		dispose: function WorkbookView$Dispose() {
			this.$removeTabs();
			this.$dashboardView = tab.MiscUtil.dispose$1(this.$dashboardView);
			this.$connectionPromptView = tab.MiscUtil.dispose$1(this.$connectionPromptView);
			ss.makeGenericType(spiff.BaseView$1, [$tab_WorkbookViewModel]).prototype.dispose.call(this);
		},
		$removeTabs: function WorkbookView$RemoveTabs() {
			var tabContainer = $($tab_ApplicationView.tabContainerSelector);
			tabContainer.appendTo(this.get_dom().centeringContainer);
		},
		onAddedToDom: function WorkbookView$OnAddedToDom() {
			spiff.Widget.prototype.onAddedToDom.call(this);
			this.$addTabs();
			this.$handleDashboardUpdated();
			this.get_dom().dashboardSpacer.scroll(ss.mkdel(this, function(evnt) {
				this.$handleStoryDashboardRepositioned();
			}));
			this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
				this.get_dom().dashboardSpacer.off('scroll');
			})));
		},
		$addTabs: function WorkbookView$AddTabs() {
			var tabContainer = $($tab_ApplicationView.tabContainerSelector);
			tabContainer.appendTo(this.get_dom().dashboardSpacer);
		},
		$handleDashboardUpdated: function WorkbookView$HandleDashboardUpdated() {
			if (ss.isValue(this.$workbookViewModel.get_dashboardViewModel())) {
				if (tab.NaturalLanguageUtil.isNlpView()) {
					tab.ModuleManager.load$1($tab_ModulesRegistration.naturalLanguageLayoutLibFileName, []).done(function(module) {
						$tab_NaturalLanguageModuleUtil.whenNaturalLanguageLayoutModuleLoaded(module);
					});
				}
				this.$workbookViewModel.get_dashboardViewModel().add_sizeChanged(ss.mkdel(this, this.$handleResize));
				this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
					this.$workbookViewModel.get_dashboardViewModel().remove_sizeChanged(ss.mkdel(this, this.$handleResize));
				})));
				this.$dashboardView = tab.ObjectRegistry.newView($tab_DashboardView).call(null, [this.$workbookViewModel.get_dashboardViewModel()]);
				this.$dashboardView.addToDom(this.get_dom().dashboardSpacer);
				this.colorDashboardSpacer();
				this.get_dom().dashboardSpacer.css('visibility', (tab.NaturalLanguageUtil.isNlpView() ? 'hidden' : 'visible'));
			}
			this.resizeDashboardSpacer();
		},
		$handleResize: function WorkbookView$HandleResize() {
			this.resizeDashboardSpacer();
			this.get_viewModel().raiseWorkbookResized();
		},
		resizeDashboardSpacer: function WorkbookView$ResizeDashboardSpacer() {
			if (tab.FeatureFlags.isEnabled('IframeSizedToWindow')) {
				var dashboardSpacerSize = this.get_dashboardSpacerSize();
				if (ss.isValue(dashboardSpacerSize)) {
					var dashboardSpacerCss = null;
					dashboardSpacerCss = (tsConfig.is_authoring ? { overflow: (this.get_viewModel().get_scrollDashboardArea() ? 'auto' : '') } : { margin: 'auto' });
					this.get_dom().dashboardSpacer.css(dashboardSpacerCss);
					var bounds = (tsConfig.is_authoring ? this.$workbookViewModel.get_dashboardContainerBounds() : tab.DashboardSizeCalculator.asRect(dashboardSpacerSize));
					tab.DomUtil.setContentBox(this.get_dom().dashboardSpacer.get(0), bounds);
					var isDevicePreviewMode = tab.FeatureParamsLookup.getBool(57);
					if (isDevicePreviewMode) {
						var dashboardViewportCss = { overflow: 'hidden' };
						$($tab_ApplicationView.dashboardViewportSelector).css(dashboardViewportCss);
					}
					else if (BrowserSupport.BrowserSupport.IsIE()) {
						var dashboardViewportSize = tab.DashboardSizeCalculator.get_dashboardViewportSizeWithTabs();
						var dashboardViewportCss1 = { overflow: 'hidden' };
						if (dashboardViewportSize.w < dashboardSpacerSize.w || dashboardViewportSize.h < dashboardSpacerSize.h) {
							dashboardViewportCss1.overflow = 'auto';
						}
						$($tab_ApplicationView.dashboardViewportSelector).css(dashboardViewportCss1);
					}
				}
				else {
					var bounds1 = this.$workbookViewModel.get_dashboardContainerBounds();
					tab.Log.get(this).debug('Position dashboard: Scroll=%s, Bounds=%o', [this.get_viewModel().get_scrollDashboardArea(), bounds1]);
					var css = { overflow: '' };
					if (this.get_viewModel().get_scrollDashboardArea()) {
						css.overflow = 'auto';
					}
					this.get_dom().dashboardSpacer.css(css);
					tab.DomUtil.setContentBox(this.get_dom().dashboardSpacer.get(0), bounds1);
					this.$updateCenteringContainerHeight();
				}
				if (tsConfig.is_authoring) {
					this.$handleStoryDashboardRepositioned();
				}
			}
		},
		$handleStoryDashboardRepositioned: function WorkbookView$HandleStoryDashboardRepositioned() {
			if (ss.isValue(this.get_viewModel().get_dashboardViewModel()) && this.get_viewModel().get_dashboardViewModel().get_isStory()) {
				tab.ModuleManager.load(tab.IStoryModule).call(null, []).done(function(module) {
					module.fireCloseStoryUberMenu();
				});
			}
		},
		handleFullScreenChanged: function WorkbookView$HandleFullScreenChanged() {
			if (tab.FeatureFlags.isEnabled('IframeSizedToWindow')) {
				if (tsConfig.isPublic) {
					spiff.FullscreenUtil.add_fullscreenStateChanged(ss.mkdel(this, this.$handleResize));
					this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
						spiff.FullscreenUtil.remove_fullscreenStateChanged(ss.mkdel(this, this.$handleResize));
					})));
				}
			}
			else {
				spiff.FullscreenUtil.add_fullscreenStateChanged(ss.mkdel(this, this.$updateCenteringContainerHeight));
				this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
					spiff.FullscreenUtil.remove_fullscreenStateChanged(ss.mkdel(this, this.$updateCenteringContainerHeight));
				})));
			}
		},
		$updateCenteringContainerHeight: function WorkbookView$UpdateCenteringContainerHeight() {
			if (BrowserSupport.BrowserSupport.IsIE() && BrowserSupport.BrowserSupport.BrowserVersion() <= 11) {
				this.get_dom().centeringContainer.css('height', '');
				if (spiff.FullscreenUtil.get_inFullscreenMode()) {
					var height = this.$workbookViewModel.get_dashboardContainerBounds().h;
					height += tabBootstrap.VizLayoutConstants.get_tabsHeight();
					height += (tsConfig.toolbarContainerVis ? tabBootstrap.VizLayoutConstants.get_vizToolbarHeight() : 0);
					this.get_dom().centeringContainer.css('height', height + 'px');
				}
			}
		},
		colorDashboardSpacer: function WorkbookView$ColorDashboardSpacer() {
			var dashboardSpacerColorStr = this.$workbookViewModel.get_dashboardBackgroundColor();
			if (ss.isValue(this.$workbookViewModel.get_dashboardViewModel()) && this.$workbookViewModel.get_dashboardViewModel().get_hasGutter()) {
				dashboardSpacerColorStr = '';
			}
			this.get_dom().dashboardSpacer.css('background-color', dashboardSpacerColorStr);
		},
		$handleNewDataConnectionPrompt: function WorkbookView$HandleNewDataConnectionPrompt() {
			tab.ModuleManager.load(tab.IDataConnectionModule).call(null, []).done(ss.mkdel(this, function(module) {
				this.$connectionPromptView = module.createDataConnectionPromptView(this.$workbookViewModel.get_connectionPromptViewModel());
			}));
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_WorkbookViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_WorkbookViewModel])]);
	ss.initClass($tab_WorkbookViewModel, $asm, {
		add_dashboardUpdated: function WorkbookViewModel$add_DashboardUpdated(value) {
			this.$2$DashboardUpdatedField = ss.delegateCombine(this.$2$DashboardUpdatedField, value);
		},
		remove_dashboardUpdated: function WorkbookViewModel$remove_DashboardUpdated(value) {
			this.$2$DashboardUpdatedField = ss.delegateRemove(this.$2$DashboardUpdatedField, value);
		},
		add_newDataConnectionPrompt: function WorkbookViewModel$add_NewDataConnectionPrompt(value) {
			this.$2$NewDataConnectionPromptField = ss.delegateCombine(this.$2$NewDataConnectionPromptField, value);
		},
		remove_newDataConnectionPrompt: function WorkbookViewModel$remove_NewDataConnectionPrompt(value) {
			this.$2$NewDataConnectionPromptField = ss.delegateRemove(this.$2$NewDataConnectionPromptField, value);
		},
		get_hasPrompt: function WorkbookViewModel$get_HasPrompt() {
			return this.$workbookModel.get_hasPrompt();
		},
		get_dashboardViewModel: function WorkbookViewModel$get_DashboardViewModel() {
			return this.$dashboardViewModel;
		},
		get_connectionPromptViewModel: function WorkbookViewModel$get_ConnectionPromptViewModel() {
			return this.$connectionPromptViewModel;
		},
		get_scrollDashboardArea: function WorkbookViewModel$get_ScrollDashboardArea() {
			if (!tsConfig.is_authoring || this.$workbookModel.get_sheetType() === 'worksheet') {
				return false;
			}
			var dashboardSameSizeAsContainter = false;
			if (ss.isValue(this.get_dashboardViewModel())) {
				var dashboardSize = this.get_dashboardViewModel().get_size();
				var dashboardPortMetricSize = this.get_dashboardPortSizeContainer();
				dashboardSameSizeAsContainter = dashboardSize.w === dashboardPortMetricSize.w && dashboardSize.h === dashboardPortMetricSize.h;
			}
			return !dashboardSameSizeAsContainter;
		},
		get_contentDashboardViewModel: function WorkbookViewModel$get_ContentDashboardViewModel() {
			if (!this.$workbookModel.get_isCurrentSheetStoryboard()) {
				return this.$dashboardViewModel;
			}
			var zoneViewModels = this.$dashboardViewModel.get_zoneViewModels();
			var $t1 = _.keys(zoneViewModels);
			for (var $t2 = 0; $t2 < $t1.length; $t2++) {
				var key = $t1[$t2];
				var zoneVM = zoneViewModels[key];
				if (zoneVM.get_zoneType() === 'flipboard') {
					if (ss.isNullOrUndefined(zoneVM.get_zoneContentViewModel())) {
						return null;
					}
					return ss.cast(zoneVM.get_zoneContentViewModel(), $tab_IFlipboardViewModel).get_dashboardViewModel();
				}
			}
			return null;
		},
		get_dashboardPortSizeContainer: function WorkbookViewModel$get_DashboardPortSizeContainer() {
			var portSize = tabBootstrap.ViewerBootstrap.get_instance().getWebClientPortSize(tsConfig.current_sheet_type);
			var bounds = { l: 0, t: 0, w: portSize.w, h: portSize.h };
			return bounds;
		},
		get_dashboardContainerBounds: function WorkbookViewModel$get_DashboardContainerBounds() {
			var clientBounds = $tab_ApplicationSizeCalculator.calculateClientBounds();
			return { l: 0, t: 0, w: clientBounds.w, h: clientBounds.h };
		},
		get_dashboardBackgroundColor: function WorkbookViewModel$get_DashboardBackgroundColor() {
			return this.get_dashboardViewModel().get_backgroundColor();
		},
		dispose: function WorkbookViewModel$Dispose() {
			if (ss.isValue(this.$dashboardViewModel)) {
				this.$dashboardViewModel.dispose();
			}
			if (ss.isValue(this.$connectionPromptViewModel)) {
				this.$connectionPromptViewModel.dispose();
			}
			this.$workbookModel.remove_dashboardUpdated(ss.mkdel(this, this.$handleDashboardUpdated));
			spiff.BaseViewModel.prototype.dispose.call(this);
		},
		$handleDashboardUpdated: function WorkbookViewModel$HandleDashboardUpdated(dashboardModel) {
			tab.Log.get(this).debug('New dashboard: %o', [dashboardModel]);
			if (ss.isValue(this.$dashboardViewModel)) {
				this.$dashboardViewModel.dispose();
			}
			this.$dashboardViewModel = $tab_DashboardViewModel.new$1(dashboardModel);
			this.raiseActionEvent(this.$2$DashboardUpdatedField);
		},
		$handleNewDataConnectionPrompt: function WorkbookViewModel$HandleNewDataConnectionPrompt(connectionPromptModel) {
			if (ss.isNullOrUndefined(this.get_connectionPromptViewModel())) {
				tab.Log.get(this).debug('New data connection prompt: %o', [connectionPromptModel]);
				tab.ModuleManager.load(tab.IDataConnectionModule).call(null, []).done(ss.mkdel(this, function(module) {
					this.$connectionPromptViewModel = module.createDataConnectionPromptViewModel(connectionPromptModel);
					this.raiseActionEvent(this.$2$NewDataConnectionPromptField);
				}));
			}
			else {
				tab.Log.get(this).debug('Update existing data connection prompt: %o', [connectionPromptModel]);
				this.get_connectionPromptViewModel().get_promptUpdated()(connectionPromptModel);
			}
		},
		$onDataConnectionPromptDismissed: function WorkbookViewModel$OnDataConnectionPromptDismissed() {
			this.$connectionPromptViewModel = tab.MiscUtil.dispose$1(this.get_connectionPromptViewModel());
		},
		raiseWorkbookResized: function WorkbookViewModel$RaiseWorkbookResized() {
			this.raiseActionEvent($tab_WorkbookViewModel.$2$WorkbookResizedField);
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel]);
	ss.initClass($tab_ZoneTemplate, $asm, {
		get_zoneExtension: function ZoneTemplate$get_ZoneExtension() {
			return this.domRoot.children('.tab-zoneExtension');
		},
		get_zoneMargin: function ZoneTemplate$get_ZoneMargin() {
			return this.domRoot.children('.tab-zone-margin');
		},
		get_zonePadding: function ZoneTemplate$get_ZonePadding() {
			return this.get_zoneMargin().children('.tab-zone-padding');
		},
		get_contentHolder: function ZoneTemplate$get_ContentHolder() {
			return this.get_zonePadding();
		}
	}, spiff.Template, [ss.IDisposable]);
	ss.initClass($tab_ZoneView, $asm, {
		get_$zoneContentView: function ZoneView$get_ZoneContentView() {
			return this.$zoneContentView;
		},
		set_$zoneContentView: function ZoneView$set_ZoneContentView(value) {
			ss.Debug.assert(ss.isNullOrUndefined(this.$zoneContentView), "shouldn't be set already. that would be bad");
			this.$zoneContentView = value;
			this.$doAfterDeferredZoneTypeIsReady(ss.mkdel(this, function() {
				this.$zoneContentView.addToDom(this.get_dom().get_contentHolder());
			}));
		},
		get_$zoneVM: function ZoneView$get_ZoneVM() {
			return this.get_viewModel();
		},
		get_parameterControlView: function ZoneView$get_ParameterControlView() {
			return ss.cast(this.get_$zoneContentView(), ss.makeGenericType(tab.IParameterControlView$1, [tab.IParameterControlViewModel]));
		},
		get_dom: function ZoneView$get_Dom() {
			return this.get_template();
		},
		dispose: function ZoneView$Dispose() {
			this.get_$zoneVM().remove_updateZone(ss.mkdel(this, this.$handleUpdateZone));
			this.get_$zoneVM().remove_resizeZone(ss.mkdel(this, this.$handleResizeZone));
			this.get_$zoneVM().remove_updateZIndex(ss.mkdel(this, this.$handleUpdateZIndex));
			this.get_$zoneVM().remove_newZoneContent(ss.mkdel(this, this.$handleNewZoneContent));
			this.get_$zoneVM().remove_validStateChanged(ss.mkdel(this, this.$refreshValidState));
			if (ss.isValue(this.$zoneContentView)) {
				this.$zoneContentView.dispose();
				this.$zoneContentView = null;
			}
			this.$removeGlass();
			ss.makeGenericType(spiff.BaseView$1, [$tab_ZoneViewModel]).prototype.dispose.call(this);
		},
		$removeGlass: function ZoneView$RemoveGlass() {
			if (ss.isValue(this.$glass)) {
				this.$glass.dispose();
				this.$glass.remove_click(ss.mkdel(this, this.$glassClicked));
				this.$glass = null;
			}
		},
		onViewModelPropertyChanged: function ZoneView$OnViewModelPropertyChanged(sender, e) {
			ss.makeGenericType(spiff.BaseView$1, [$tab_ZoneViewModel]).prototype.onViewModelPropertyChanged.call(this, sender, e);
			if (ss.referenceEquals(e.get_propertyName(), $tab_ZoneViewModel.isActiveZonePropertyName)) {
				this.$updateActiveZone();
			}
			if (ss.referenceEquals(e.get_propertyName(), $tab_ZoneViewModel.isReadyZonePropertyName)) {
				this.$updateReadyZone();
			}
		},
		$disable: function ZoneView$Disable() {
			if (this.get_template().domRoot.get(0).offsetHeight === 0 || this.get_template().domRoot.get(0).offsetWidth === 0) {
				return;
			}
			if (ss.isNullOrUndefined(this.$glass)) {
				this.$glass = new spiff.Glass(this.get_template().domRoot.get(0), true);
				this.$glass.setColor(this.get_$zoneVM().get_model().get_dashboardModel().get_backgroundColor());
				this.$glass.set_opaque(true);
				this.$glass.set_preventWebPageScroll(true);
				this.$glass.add_click(ss.mkdel(this, this.$glassClicked));
			}
			this.$glass.show();
		},
		$glassClicked: function ZoneView$GlassClicked() {
			this.get_$zoneVM().zoneGlassClicked();
		},
		$waitingForUpdate: function ZoneView$WaitingForUpdate() {
			if (ss.isValue(this.$glass) && tab.ApplicationModel.get_instance().get_autoUpdate()) {
				this.$glass.element.css('cursor', 'progress');
			}
		},
		$enable: function ZoneView$Enable() {
			this.$removeGlass();
		},
		onAddedToDom: function ZoneView$OnAddedToDom() {
			spiff.Widget.prototype.onAddedToDom.call(this);
			if (ss.isNullOrUndefined(this.get_$zoneContentView())) {
				this.$handleUpdateZone();
				this.$handleResizeZone();
				if (ss.isValue(this.get_$zoneVM().get_zoneContentViewModel())) {
					this.$handleNewZoneContent(this.get_$zoneVM().get_zoneContentViewModel());
				}
				this.$doAfterDeferredZoneTypeIsReady(ss.mkdel(this, this.$refreshValidState));
			}
			this.$doAfterDeferredZoneTypeIsReady(ss.mkdel(this, function() {
				if (ss.contains($tab_ZoneView.$suppressTooltipOverZones, this.get_$zoneVM().get_zoneType())) {
					this.element.addClass($tab_Application.suppressVizTooltipsAndOverlays);
				}
				this.element.addClass('tabZone-' + this.get_$zoneVM().get_zoneType());
				if (tab.ProgressiveLoader.get_progressiveLoadEnabled() && !BrowserSupport.BrowserSupport.IsIE()) {
					this.get_template().domRoot.addClass('fade-bg');
				}
				if (this.get_viewModel().get_isSetActiveZoneSupported()) {
					var clickHandler = spiff.TableauClickHandler.targetAndClick(this.element[0], ss.mkdel(this, function(e) {
						if (tab.FeatureFlags.isEnabled('MultiSelect') && $tab_DashboardView.canMultiSelectZones(e)) {
							this.get_viewModel().setActive('add');
						}
						else {
							this.get_viewModel().setActive('replace');
						}
					}));
					clickHandler.set_stopPropagationOnEvent(false);
					this.disposables.add$1(clickHandler);
				}
			}));
			this.element.click(ss.mkdel(this, this.$popupPresModelBrowser));
		},
		$popupPresModelBrowser: function ZoneView$PopupPresModelBrowser(e) {
			if (e.altKey) {
				this.get_viewModel().setActive('replace');
				var model = this.get_$zoneVM().get_model().pm;
				var title = this.get_$zoneVM().get_zoneType() + ' zone ' + this.get_$zoneVM().get_zoneId();
				title = String.fromCharCode(title.charCodeAt(0)).toUpperCase() + title.substr(1);
				if (this.get_$zoneVM().get_zoneType() === 'viz') {
					model = ss.mkdict(['zonePresModel', model, 'applicationPresModel', tab.ApplicationModel.get_instance().get_appPresModel()]);
				}
				var treeData = new $tab_PresModelBrowserViewModel(title, model, ss.mkdel(this, function() {
					this.get_viewModel().setActive('replace');
				}));
				tab.ModuleManager.load$1($tab_PresModelBrowserView.jsTreeName, []).done(function() {
					new $tab_PresModelBrowserView(treeData);
				});
			}
		},
		$updateActiveZone: function ZoneView$UpdateActiveZone() {
			this.get_template().domRoot.toggleClass('tabZoneSelected', this.get_viewModel().get_isActiveZone());
		},
		$updateReadyZone: function ZoneView$UpdateReadyZone() {
			this.get_template().domRoot.toggleClass($tab_ZoneView.$classReadyZone, this.get_viewModel().get_isReadyZone());
		},
		$handleUpdateZone: function ZoneView$HandleUpdateZone() {
			this.$handleUpdateZIndex();
			this.get_template().domRoot.attr('id', $tab_ZoneView.$makeZoneElementId(this.get_viewModel().get_zoneId()));
			this.$updateActiveZone();
			var zoneType = this.get_$zoneVM().get_zoneType();
			var addLayoutContainer = zoneType === 'layout-flow' || zoneType === 'layout-free-form' || zoneType === 'empty';
			this.get_template().domRoot.toggleClass('wcLayoutContainer', addLayoutContainer);
			this.get_dom().get_zoneMargin().css(this.get_$zoneVM().get_marginCss());
			this.get_dom().get_zoneMargin().css(this.get_$zoneVM().get_borderCss());
			this.get_dom().get_zonePadding().css(this.get_$zoneVM().get_paddingCss());
			if (ss.contains($tab_ZoneView.zonesThatUseStyledBox, zoneType)) {
				this.get_dom().get_contentHolder().css(this.get_$zoneVM().get_contentContainerCss());
			}
			else {
				var newBackgroundColor = this.get_$zoneVM().get_backgroundColor();
				if (!ss.referenceEquals(newBackgroundColor, this.$bgColor)) {
					this.get_dom().get_contentHolder().css('background-color', newBackgroundColor);
					this.$bgColor = newBackgroundColor;
				}
			}
			this.get_dom().get_contentHolder().toggleClass(spiff.UnificationClassNames.darkBackground, this.get_$zoneVM().get_contentHasDarkBackground());
			if (ss.isValue(this.get_$zoneContentView()) && zoneType === 'paramctrl') {
				this.get_parameterControlView().updateViewProperties();
			}
			this.$refreshValidState();
		},
		$handleUpdateZIndex: function ZoneView$HandleUpdateZIndex() {
			var newZIndex = this.get_$zoneVM().get_zoneZIndex();
			if (newZIndex !== this.$zIndex) {
				this.$zIndex = newZIndex;
				this.get_template().domRoot.css('z-index', newZIndex.toString());
			}
		},
		$handleResizeZone: function ZoneView$HandleResizeZone() {
			var zoneVm = this.get_$zoneVM();
			var zoneCss = { width: zoneVm.get_width() + 'px', height: zoneVm.get_height() + 'px', top: zoneVm.get_y() + 'px', left: zoneVm.get_x() + 'px' };
			this.get_template().domRoot.css(zoneCss);
		},
		$refreshValidState: function ZoneView$RefreshValidState() {
			if (!this.get_$zoneVM().get_valid()) {
				this.$disable();
				if (tab.ApplicationModel.get_instance().get_isOffline()) {
					return;
				}
				if (this.get_$zoneVM().get_isVisualValid()) {
					this.$waitingForUpdate();
				}
			}
			else {
				if (ss.isValue(this.$glass)) {
					if (!ss.staticEquals($tab_ZoneView.$3$ZoneBecameValidField, null)) {
						$tab_ZoneView.$3$ZoneBecameValidField();
					}
				}
				this.$enable();
			}
		},
		$handleNewZoneContentForTitleZone: function ZoneView$HandleNewZoneContentForTitleZone(textEdit, zoneContentViewModel) {
			var textEditDashboardTitle = tsConfig.current_sheet_type === 'dashboard';
			var textEditStoryTitle = tsConfig.current_sheet_type === 'story' && this.$isStoryTitle();
			if (textEdit && (textEditDashboardTitle || textEditStoryTitle)) {
				var $t3 = this.disposables;
				var $t2 = this.get_dom().domRoot[0];
				var $t1 = this.get_viewModel();
				$t3.add$1(spiff.TableauClickHandler.targetAndDoubleClick($t2, ss.mkdel($t1, $t1.openRichTextEditorDialog)));
			}
			var titleView = new $tab_TextRegionView.$ctor1(ss.cast(zoneContentViewModel, $tab_TextRegionViewModel), 1);
			this.set_$zoneContentView(titleView);
		},
		$handleNewZoneContentForTextZone: function ZoneView$HandleNewZoneContentForTextZone(textEdit, zoneContentViewModel) {
			var textEditDashboardTextZone = tsConfig.current_sheet_type === 'dashboard';
			var textEditStoryDescription = tsConfig.current_sheet_type === 'story' && this.get_$zoneVM().get_model().get_isStorySpecific();
			if (textEdit && (textEditDashboardTextZone || textEditStoryDescription)) {
				var $t3 = this.disposables;
				var $t2 = this.get_dom().domRoot[0];
				var $t1 = this.get_viewModel();
				$t3.add$1(spiff.TableauClickHandler.targetAndDoubleClick($t2, ss.mkdel($t1, $t1.openRichTextEditorDialog)));
			}
			var textZoneView = new $tab_TextRegionView.$ctor1(ss.cast(zoneContentViewModel, $tab_TextRegionViewModel), -1);
			this.set_$zoneContentView(textZoneView);
		},
		$handleNewZoneContentForSupportingZones: function ZoneView$HandleNewZoneContentForSupportingZones(zoneContentViewModel) {
			if (tab.FeatureFlags.isEnabled('WebDropServerRenderedLegends') || tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
				if (ss.isInstanceOfType(zoneContentViewModel, tab.ICategoricalLegendViewModel)) {
					this.set_$zoneContentView(tab.ObjectRegistry.resolve(ss.makeGenericType(tab.ICategoricalLegendView$1, [tab.ICategoricalLegendViewModel])).call(null, [zoneContentViewModel]));
				}
				else if (ss.isInstanceOfType(zoneContentViewModel, tab.IQuantitativeColorLegendViewModel)) {
					tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(module) {
						this.set_$zoneContentView(module.createQuantitativeColorLegendView(zoneContentViewModel));
					}));
				}
			}
			else {
				tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(module1) {
					var llv = module1.createLegacyLegendView(zoneContentViewModel);
					this.set_$zoneContentView(llv);
				}));
			}
		},
		$handleNewZoneContentForFlipboardNavZone: function ZoneView$HandleNewZoneContentForFlipboardNavZone(zoneContentViewModel) {
			tab.ModuleManager.load(tab.IStoryModule).call(null, []).done(ss.mkdel(this, function(module) {
				this.$deferredZoneContentView = module.newFlipboardNavigatorView(ss.cast(zoneContentViewModel, tab.IFlipboardNavigatorViewModel)).pipe(function(x) {
					return x;
				});
				this.$deferredZoneType.resolve(this.get_$zoneVM().get_zoneType());
				this.$deferredZoneContentView.done(ss.mkdel(this, function(view) {
					var flipboardNav = view;
					this.set_$zoneContentView(flipboardNav);
					this.$animateTransition();
				}));
			}));
		},
		$handleNewZoneContentForDashboardObjectZone: function ZoneView$HandleNewZoneContentForDashboardObjectZone(zoneContentViewModel) {
			if (this.get_$zoneVM().get_objectType() === 'button') {
				this.set_$zoneContentView(tab.ObjectRegistry.newView(ss.makeGenericType(spiff.ReactHostView$3, [$tab_ButtonZoneViewModel, $tab_ButtonZoneComponent, Object])).call(null, [zoneContentViewModel]));
			}
			else if (this.get_$zoneVM().get_objectType() === 'extension') {
				this.set_$zoneContentView(new $tab_ExtensionZoneView(ss.cast(zoneContentViewModel, $tab_ExtensionZoneViewModel), this.get_$zoneVM()));
			}
		},
		$handleNewZoneContent: function ZoneView$HandleNewZoneContent(zoneContentViewModel) {
			tab.Log.get(this).debug('New zone content: %o', [zoneContentViewModel]);
			var zoneType = this.get_$zoneVM().get_zoneType();
			var textEdit = tsConfig.is_authoring && !tsConfig.is_mobile;
			switch (zoneType) {
				case 'title': {
					this.$handleNewZoneContentForTitleZone(textEdit, zoneContentViewModel);
					break;
				}
				case 'text': {
					this.$handleNewZoneContentForTextZone(textEdit, zoneContentViewModel);
					break;
				}
				case 'size':
				case 'shape':
				case 'color':
				case 'map': {
					this.$handleNewZoneContentForSupportingZones(zoneContentViewModel);
					break;
				}
				case 'current-page': {
					tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(module) {
						this.set_$zoneContentView(module.createPageView(zoneContentViewModel));
					}));
					break;
				}
				case 'filter': {
					tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(module1) {
						this.set_$zoneContentView(module1.createLegacyQuickFilterDisplayView(zoneContentViewModel));
					}));
					break;
				}
				case 'highlighter': {
					this.set_$zoneContentView(tab.ObjectRegistry.newView($tab_DataHighlighterView).call(null, [zoneContentViewModel]));
					break;
				}
				case 'paramctrl': {
					tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(module2) {
						this.set_$zoneContentView(module2.createParameterControlView(zoneContentViewModel));
					}));
					break;
				}
				case 'flipboard-nav': {
					this.$handleNewZoneContentForFlipboardNavZone(zoneContentViewModel);
					break;
				}
				case 'flipboard': {
					tab.ModuleManager.load(tab.IStoryModule).call(null, []).done(ss.mkdel(this, function(module3) {
						this.set_$zoneContentView(module3.newFlipboardView(zoneContentViewModel));
					}));
					break;
				}
				case 'web': {
					this.set_$zoneContentView(new $tab_WebZoneView(ss.cast(zoneContentViewModel, $tab_WebZoneViewModel), this.get_$zoneVM()));
					break;
				}
				case 'dashboard-object': {
					this.$handleNewZoneContentForDashboardObjectZone(zoneContentViewModel);
					break;
				}
				case 'bitmap': {
					this.set_$zoneContentView(new $tab_ImageZoneView(ss.cast(zoneContentViewModel, $tab_ImageZoneViewModel), this.get_$zoneVM()));
					break;
				}
				case 'viz': {
					tab.ModuleManager.load(tab.IVizZoneModule).call(null, []).done(ss.mkdel(this, function(module4) {
						this.set_$zoneContentView(module4.createPaneTableView(zoneContentViewModel));
					}));
					break;
				}
				case 'layout-flow': {
					this.set_$zoneContentView(tab.ObjectRegistry.newView($tab_EmptyFloatingLayoutView).call(null, [zoneContentViewModel]));
					break;
				}
				default: {
					tab.Log.get(this).warn('Unknown zone type: %s', [zoneType]);
					break;
				}
			}
			this.$animateTransition();
		},
		$isStoryTitle: function ZoneView$IsStoryTitle() {
			return ss.referenceEquals(this.get_$zoneVM().get_dashboardSheetName(), tsConfig.current_sheet_name);
		},
		$animateTransition: function ZoneView$AnimateTransition() {
			if (tab.ProgressiveLoader.get_progressiveLoadEnabled() && !BrowserSupport.BrowserSupport.IsIE()) {
				if (ss.isValue(this.get_$zoneContentView())) {
					this.get_$zoneContentView().get_rootElement().addClass('fade-in');
				}
			}
		},
		$handleZoneEnter: function ZoneView$HandleZoneEnter(e) {
			this.get_$zoneVM().zoneEntered(true);
		},
		$doAfterDeferredZoneTypeIsReady: function ZoneView$DoAfterDeferredZoneTypeIsReady(toDoAction) {
			if (ss.contains($tab_ZoneView.$deferredLoadedZones, this.get_$zoneVM().get_zoneType())) {
				this.$deferredZoneType.done(ss.mkdel(this, function() {
					this.$deferredZoneContentView.done(toDoAction);
				}));
			}
			else {
				toDoAction();
			}
		}
	}, ss.makeGenericType(spiff.BaseView$1, [$tab_ZoneViewModel]), [tab.IWidget, tab.IAppendableView, ss.IDisposable, ss.makeGenericType(tab.IView$1, [$tab_ZoneViewModel])]);
	ss.initClass($tab_ZoneViewModel, $asm, {
		add_updateZone: function ZoneViewModel$add_UpdateZone(value) {
			this.$2$UpdateZoneField = ss.delegateCombine(this.$2$UpdateZoneField, value);
		},
		remove_updateZone: function ZoneViewModel$remove_UpdateZone(value) {
			this.$2$UpdateZoneField = ss.delegateRemove(this.$2$UpdateZoneField, value);
		},
		add_updateZIndex: function ZoneViewModel$add_UpdateZIndex(value) {
			this.$2$UpdateZIndexField = ss.delegateCombine(this.$2$UpdateZIndexField, value);
		},
		remove_updateZIndex: function ZoneViewModel$remove_UpdateZIndex(value) {
			this.$2$UpdateZIndexField = ss.delegateRemove(this.$2$UpdateZIndexField, value);
		},
		add_resizeZone: function ZoneViewModel$add_ResizeZone(value) {
			this.$2$ResizeZoneField = ss.delegateCombine(this.$2$ResizeZoneField, value);
		},
		remove_resizeZone: function ZoneViewModel$remove_ResizeZone(value) {
			this.$2$ResizeZoneField = ss.delegateRemove(this.$2$ResizeZoneField, value);
		},
		add_zoneResized: function ZoneViewModel$add_ZoneResized(value) {
			this.$2$ZoneResizedField = ss.delegateCombine(this.$2$ZoneResizedField, value);
		},
		remove_zoneResized: function ZoneViewModel$remove_ZoneResized(value) {
			this.$2$ZoneResizedField = ss.delegateRemove(this.$2$ZoneResizedField, value);
		},
		add_newZoneContent: function ZoneViewModel$add_NewZoneContent(value) {
			this.$2$NewZoneContentField = ss.delegateCombine(this.$2$NewZoneContentField, value);
		},
		remove_newZoneContent: function ZoneViewModel$remove_NewZoneContent(value) {
			this.$2$NewZoneContentField = ss.delegateRemove(this.$2$NewZoneContentField, value);
		},
		add_validStateChanged: function ZoneViewModel$add_ValidStateChanged(value) {
			this.$2$ValidStateChangedField = ss.delegateCombine(this.$2$ValidStateChangedField, value);
		},
		remove_validStateChanged: function ZoneViewModel$remove_ValidStateChanged(value) {
			this.$2$ValidStateChangedField = ss.delegateRemove(this.$2$ValidStateChangedField, value);
		},
		get_zoneContentViewModel: function ZoneViewModel$get_ZoneContentViewModel() {
			return this.zoneContentViewModel;
		},
		get_zoneType: function ZoneViewModel$get_ZoneType() {
			return this.$zoneModel.get_zoneType();
		},
		get_objectType: function ZoneViewModel$get_ObjectType() {
			return this.$zoneModel.get_objectType();
		},
		get_x: function ZoneViewModel$get_X() {
			return this.$zoneModel.get_x();
		},
		get_y: function ZoneViewModel$get_Y() {
			return this.$zoneModel.get_y();
		},
		get_width: function ZoneViewModel$get_Width() {
			return this.$zoneModel.get_width();
		},
		get_height: function ZoneViewModel$get_Height() {
			return this.$zoneModel.get_height();
		},
		get_contentHeight: function ZoneViewModel$get_ContentHeight() {
			return this.$zoneModel.get_contentHeight();
		},
		get_contentWidth: function ZoneViewModel$get_ContentWidth() {
			return this.$zoneModel.get_contentWidth();
		},
		get_contentX: function ZoneViewModel$get_ContentX() {
			return this.$zoneModel.get_contentX();
		},
		get_contentY: function ZoneViewModel$get_ContentY() {
			return this.$zoneModel.get_contentY();
		},
		get_model: function ZoneViewModel$get_Model() {
			return this.$zoneModel;
		},
		get_styledBoxModel: function ZoneViewModel$get_StyledBoxModel() {
			return this.get_model().get_styledBoxModel();
		},
		get_isInDashboard: function ZoneViewModel$get_IsInDashboard() {
			return this.$zoneModel.get_dashboardModel().get_isDashboard();
		},
		get_contentContainerStyle: function ZoneViewModel$get_ContentContainerStyle() {
			return this.$zoneModel.get_zoneCommonModel().get_contentStyle();
		},
		get_titleSize: function ZoneViewModel$get_TitleSize() {
			if (this.$zoneModel.get_hasTitle()) {
				return { w: this.$zoneModel.pm.titleWidth, h: this.$zoneModel.pm.titleHeight };
			}
			return { w: 0, h: 0 };
		},
		get_valid: function ZoneViewModel$get_Valid() {
			if (tab.ApplicationModel.get_instance().get_isOffline() && !ss.contains($tab_ZoneViewModel.$whitelistOfflineModeZones, this.get_zoneType())) {
				return false;
			}
			return this.$isValid;
		},
		get_isVisualValid: function ZoneViewModel$get_IsVisualValid() {
			return (ss.isValue(this.$vizModel) ? this.$vizModel.get_isVisualValid() : false);
		},
		get_zoneZIndex: function ZoneViewModel$get_ZoneZIndex() {
			return $tab_ZoneViewModel.calculateZoneZIndex(this.$zoneModel);
		},
		get_zoneId: function ZoneViewModel$get_ZoneId() {
			return this.$zoneModel.get_zoneId();
		},
		get_associatedSheet: function ZoneViewModel$get_AssociatedSheet() {
			return this.$zoneModel.get_associatedSheet();
		},
		get_backgroundColor: function ZoneViewModel$get_BackgroundColor() {
			var zoneBackgroundColor = '';
			if (this.$isAwaitingContent()) {
				zoneBackgroundColor = this.$zoneModel.get_dashboardModel().get_zonePlaceholderColor();
			}
			return zoneBackgroundColor;
		},
		get_isActiveZone: function ZoneViewModel$get_IsActiveZone() {
			return this.$isActiveZone;
		},
		set_isActiveZone: function ZoneViewModel$set_IsActiveZone(value) {
			if (this.$isActiveZone !== value) {
				this.$isActiveZone = value;
				this.notifyPropertyChanged($tab_ZoneViewModel.isActiveZonePropertyName);
			}
		},
		get_isReadyZone: function ZoneViewModel$get_IsReadyZone() {
			return this.$isReadyZone;
		},
		set_isReadyZone: function ZoneViewModel$set_IsReadyZone(value) {
			if (this.$isReadyZone !== value) {
				this.$isReadyZone = value;
				this.notifyPropertyChanged($tab_ZoneViewModel.isReadyZonePropertyName);
			}
		},
		get_isSetActiveZoneSupported: function ZoneViewModel$get_IsSetActiveZoneSupported() {
			if (!tsConfig.is_authoring || tsConfig.current_sheet_type === 'worksheet') {
				return false;
			}
			return this.get_zoneType() === 'viz' || !tsConfig.is_mobile;
		},
		get_containsNewStyleQuickFilter: function ZoneViewModel$get_ContainsNewStyleQuickFilter() {
			return this.$containsNewStyleQuickFilter;
		},
		get_$isEmptyFloatingLayout: function ZoneViewModel$get_IsEmptyFloatingLayout() {
			var isFloatingLayout = this.$zoneModel.get_isFloating() && this.$zoneModel.get_zoneType() === 'layout-flow';
			var isUnstyled = ss.isNullOrUndefined(this.get_styledBoxModel()) || !this.get_styledBoxModel().get_hasFill() && this.get_styledBoxModel().get_borderStyle() === 'bs-none';
			return isFloatingLayout && isUnstyled && this.$zoneModel.get_dashboardModel().zonesModel.getChildren(this.get_zoneId()).length === 0;
		},
		get_containsNewStyleParameterFilter: function ZoneViewModel$get_ContainsNewStyleParameterFilter() {
			return this.$containsNewStyleParameterFilter;
		},
		get_hasTitle: function ZoneViewModel$get_HasTitle() {
			return this.$zoneModel.get_hasTitle();
		},
		get_marginCss: function ZoneViewModel$get_MarginCss() {
			var result = { top: this.get_styledBoxModel().get_marginTop() + 'px', left: this.get_styledBoxModel().get_marginLeft() + 'px', bottom: this.get_styledBoxModel().get_marginBottom() + 'px', right: this.get_styledBoxModel().get_marginRight() + 'px', position: 'absolute', 'background-color': 'rgba(0, 0, 0, 0)' };
			if (ss.isValue(this.get_model().get_drawnZoneColor())) {
				result['background-color'] = this.get_model().get_drawnZoneColor();
			}
			return result;
		},
		get_paddingCss: function ZoneViewModel$get_PaddingCss() {
			return { top: this.get_styledBoxModel().get_paddingTop() + 'px', left: this.get_styledBoxModel().get_paddingLeft() + 'px', bottom: this.get_styledBoxModel().get_paddingBottom() + 'px', right: this.get_styledBoxModel().get_paddingRight() + 'px', position: 'absolute' };
		},
		get_borderCss: function ZoneViewModel$get_BorderCss() {
			return $.extend({}, this.get_styledBoxModel().get_borderTop().get_cssDictionary(), this.get_styledBoxModel().get_borderLeft().get_cssDictionary(), this.get_styledBoxModel().get_borderBottom().get_cssDictionary(), this.get_styledBoxModel().get_borderRight().get_cssDictionary());
		},
		get_contentContainerCss: function ZoneViewModel$get_ContentContainerCss() {
			var styleDict = tab.FormattingConverters.makeStyledBoxCssDict(this.get_contentContainerStyle().get_styledBoxPresModel(), true);
			if (!this.get_contentContainerStyle().get_hasFill()) {
				styleDict['background-color'] = '';
			}
			if (this.$isAwaitingContent()) {
				var backColor = tab.ColorModel.fromColorCode(this.$zoneModel.get_dashboardModel().get_zonePlaceholderColor());
				styleDict['background-color'] = backColor.toString();
			}
			return styleDict;
		},
		get_contentHasDarkBackground: function ZoneViewModel$get_ContentHasDarkBackground() {
			if (ss.contains($tab_ZoneView.zonesThatUseStyledBox, this.get_zoneType())) {
				return this.get_contentContainerStyle().get_hasFill() && !tab.ColorModel.fromColorCode(this.get_contentContainerStyle().get_fillColor()).isLuminanceAboveThreshold(0.314999997615814);
			}
			else {
				return !ss.isNullOrEmptyString(this.$zoneModel.get_drawnZoneColor()) && !tab.ColorModel.fromColorCode(this.$zoneModel.get_drawnZoneColor()).isLuminanceAboveThreshold(0.314999997615814);
			}
		},
		get_dashboardSheetName: function ZoneViewModel$get_DashboardSheetName() {
			return this.get_model().get_dashboardModel().pm.sheetPath.sheetName;
		},
		setActive: function ZoneViewModel$SetActive(zoneSelectionType) {
			tab.SelectionClientCommands.setActiveZone(this.get_zoneId(), zoneSelectionType, this.$zoneModel.get_dashboardModel().get_sheetPath());
		},
		zoneEntered: function ZoneViewModel$ZoneEntered(entering) {
			this.$zoneModel.get_dashboardModel().set_readyZoneID((entering ? this.get_zoneId() : 0));
		},
		zoneGlassClicked: function ZoneViewModel$ZoneGlassClicked() {
			tabBootstrap.Utility.sendCommandWithContext('tableau.selectedDisabledZone');
		},
		dispose: function ZoneViewModel$Dispose() {
			if (ss.isValue(this.zoneContentViewModel)) {
				this.zoneContentViewModel.dispose();
				this.zoneContentViewModel = null;
			}
			if (ss.isValue(this.$vizModel)) {
				this.$vizModel.remove_visualValidStateChanged(ss.mkdel(this, this.$refreshZoneValidState));
			}
			this.$zoneModel.remove_updateZone(ss.mkdel(this, this.$handleUpdateZone));
			this.$zoneModel.get_zoneCommonModel().remove_resizeZone(ss.mkdel(this, this.$handleResizeZone));
			this.$zoneModel.remove_newZoneContent(ss.mkdel(this, this.$handleNewZoneContent));
			this.$zoneModel.remove_removeZoneContent(ss.mkdel(this, this.$handleRemovedZoneContent));
			this.$zoneModel.get_zoneCommonModel().remove_changeZoneTitleVisibility(ss.mkdel(this, this.$handleTitleVisibiltyChanged));
			spiff.BaseViewModel.prototype.dispose.call(this);
		},
		openRichTextEditorDialog: function ZoneViewModel$OpenRichTextEditorDialog(e) {
			switch (this.get_zoneType()) {
				case 'title':
				case 'text': {
					tab.RichTextClientCommands.createTextObjectRichTextEditor(this.get_zoneId(), false);
					break;
				}
				default: {
					break;
				}
			}
			$tab_FormattingTelemetryClient.logRichTextEditorEvent(ss.mkdict([$tab_FormattingTelemetryClient.richTextEditorOpenedBy, $tab_FormattingTelemetryClient.richTextEditorOpenedByDoubleClick, $tab_FormattingTelemetryClient.richTextEditorOpenedFrom, this.get_zoneType() + '-zone']));
		},
		$refreshVisualModelReference: function ZoneViewModel$RefreshVisualModelReference() {
			var newVizModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), this.$zoneModel.get_associatedSheet());
			if (!ss.referenceEquals(this.$vizModel, newVizModel)) {
				if (ss.isValue(this.$vizModel)) {
					this.$vizModel.remove_visualValidStateChanged(ss.mkdel(this, this.$refreshZoneValidState));
				}
				this.$vizModel = newVizModel;
				if (ss.isValue(this.$vizModel)) {
					this.$vizModel.add_visualValidStateChanged(ss.mkdel(this, this.$refreshZoneValidState));
				}
			}
		},
		$handleUpdateZone: function ZoneViewModel$HandleUpdateZone() {
			tab.ModuleManager.registerModulesLoadedCallback(ss.mkdel(this, function() {
				this.$refreshVisualModelReference();
				this.$refreshZoneValidState();
				this.raiseActionEvent(this.$2$UpdateZoneField);
				if (this.get_zoneType() === 'filter' && ss.isNullOrUndefined(this.zoneContentViewModel) && ss.isValue(this.get_model().get_model())) {
					this.$handleNewZoneContent(this.get_model().get_model());
				}
			}));
		},
		$handleResizeZone: function ZoneViewModel$HandleResizeZone() {
			this.raiseActionEvent(this.$2$ResizeZoneField);
			this.raiseActionEvent(this.$2$ZoneResizedField);
		},
		$handleUpdateZIndex: function ZoneViewModel$HandleUpdateZIndex() {
			this.raiseActionEvent(this.$2$UpdateZIndexField);
		},
		$refreshZoneValidState: function ZoneViewModel$RefreshZoneValidState() {
			var newValid = true;
			if (this.$zoneModel.get_isDependentOnViz() && ss.isValue(this.$vizModel)) {
				newValid = this.$vizModel.get_isVisualValidAndUpToDate();
			}
			if (newValid !== this.$isValid) {
				this.$isValid = newValid;
				this.raiseActionEvent(this.$2$ValidStateChangedField);
			}
		},
		forceZoneValidState: function ZoneViewModel$ForceZoneValidState(forcedState) {
			if (forcedState !== this.$isValid) {
				this.$isValid = forcedState;
				this.raiseActionEvent(this.$2$ValidStateChangedField);
			}
		},
		$addAuthoringContent: function ZoneViewModel$AddAuthoringContent() {
			ss.Debug.assert(ss.isNullOrUndefined(this.zoneContentViewModel), "There shouldn't be a view model before here");
			if (this.get_$isEmptyFloatingLayout()) {
				this.zoneContentViewModel = new $tab_EmptyFloatingLayoutViewModel(this.$zoneModel);
				this.$raiseNewZoneContent(this.zoneContentViewModel);
			}
		},
		$handleNewZoneContentForFilterZone: function ZoneViewModel$HandleNewZoneContentForFilterZone(worksheetName, zoneContentModel) {
			var callAfterContentViewModelSet = ss.mkdel(this, function() {
				this.$raiseNewZoneContent(this.zoneContentViewModel);
				this.raiseActionEvent(this.$2$UpdateZoneField);
			});
			var visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), worksheetName);
			var quickFilterDisplayModel = ss.cast(zoneContentModel, tab.LegacyQuickFilterDisplayModel);
			if (!ss.isValue(quickFilterDisplayModel.get_quickFilterDisplayPresModel().quickFilter)) {
				return;
			}
			var filterModel = tab.ModelUtils.findMatchingFilterModel(visualModel, quickFilterDisplayModel);
			if (ss.isValue(filterModel)) {
				tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(module) {
					this.zoneContentViewModel = module.createLegacyQuickFilterDisplayViewModel(quickFilterDisplayModel, filterModel);
					callAfterContentViewModelSet();
				}));
			}
			else {
				try {
					tab.Log.get(this).debug(ss.formatString('Invalid filter on dashboard. Worksheet: {0} Field Name: {1}', worksheetName, quickFilterDisplayModel.get_fieldName()), []);
				}
				catch ($t1) {
				}
			}
		},
		$handleNewZoneContentForDashboardObjectZone: function ZoneViewModel$HandleNewZoneContentForDashboardObjectZone(zoneContentModel) {
			var callAfterContentViewModelSet = ss.mkdel(this, function() {
				this.$raiseNewZoneContent(this.zoneContentViewModel);
				this.raiseActionEvent(this.$2$UpdateZoneField);
			});
			if (this.$zoneModel.get_objectType() === 'button') {
				this.zoneContentViewModel = new $tab_ButtonZoneViewModel(ss.cast(zoneContentModel, tab.ButtonZoneModel), this);
				callAfterContentViewModelSet();
			}
			else if (this.$zoneModel.get_objectType() === 'extension') {
				var extensionVM = new $tab_ExtensionZoneViewModel(ss.cast(zoneContentModel, tab.ExtensionZoneModel), this);
				if (extensionVM.get_isInitialized()) {
					this.zoneContentViewModel = extensionVM;
					callAfterContentViewModelSet();
					return;
				}
				var extensionReadyHandler = null;
				extensionReadyHandler = ss.mkdel(this, function() {
					this.zoneContentViewModel = extensionVM;
					callAfterContentViewModelSet();
					extensionVM.remove_extensionZoneReady(extensionReadyHandler);
				});
				extensionVM.add_extensionZoneReady(extensionReadyHandler);
			}
		},
		$handleNewZoneContentForCurrentPageZone: function ZoneViewModel$HandleNewZoneContentForCurrentPageZone(zoneContentModel) {
			var callAfterContentViewModelSet = ss.mkdel(this, function() {
				this.$raiseNewZoneContent(this.zoneContentViewModel);
				this.raiseActionEvent(this.$2$UpdateZoneField);
			});
			if (tsConfig.allow_filter) {
				tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(module) {
					this.zoneContentViewModel = module.createPageViewModel(ss.cast(zoneContentModel, tab.PageModel));
					callAfterContentViewModelSet();
				}));
			}
		},
		$handleNewZoneContent: function ZoneViewModel$HandleNewZoneContent(zoneContentModel) {
			this.$containsNewStyleQuickFilter = false;
			this.$containsNewStyleParameterFilter = false;
			var zoneType = this.$zoneModel.get_zoneType();
			ss.Debug.assert(ss.isNullOrUndefined(this.zoneContentViewModel), "There shouldn't be a view model before here");
			var callAfterContentViewModelSet = ss.mkdel(this, function() {
				this.$raiseNewZoneContent(this.zoneContentViewModel);
				this.raiseActionEvent(this.$2$UpdateZoneField);
			});
			var worksheetName = this.$zoneModel.get_worksheetName();
			switch (zoneType) {
				case 'title': {
					this.zoneContentViewModel = new $tab_TextRegionViewModel(ss.cast(zoneContentModel, tab.TextRegionModel));
					break;
				}
				case 'text': {
					var $t1 = new $tab_TextRegionViewModel(ss.cast(zoneContentModel, tab.TextRegionModel));
					$t1.options = new $tab_TextRegionOptions(false);
					this.zoneContentViewModel = $t1;
					break;
				}
				case 'color':
				case 'size':
				case 'shape':
				case 'map': {
					tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(module) {
						if (tab.FeatureFlags.isEnabled('WebDropServerRenderedLegends') || tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
							if (ss.isInstanceOfType(zoneContentModel, tab.CategoricalLegendModel)) {
								this.zoneContentViewModel = module.createCategoricalLegendViewModel(ss.cast(zoneContentModel, tab.CategoricalLegendModel), zoneType, worksheetName, this);
							}
							else if (ss.isInstanceOfType(zoneContentModel, tab.QuantitativeColorLegendModel)) {
								this.zoneContentViewModel = module.createQuantitativeColorLegendViewModel(ss.cast(zoneContentModel, tab.QuantitativeColorLegendModel), worksheetName, this);
							}
						}
						else {
							this.zoneContentViewModel = module.createLegacyLegendViewModel(ss.cast(zoneContentModel, tab.LegacyLegendModel), worksheetName, this);
						}
						callAfterContentViewModelSet();
					}));
					return;
				}
				case 'current-page': {
					this.$handleNewZoneContentForCurrentPageZone(zoneContentModel);
					return;
				}
				case 'web': {
					this.zoneContentViewModel = new $tab_WebZoneViewModel(ss.cast(zoneContentModel, tab.WebZoneModel));
					break;
				}
				case 'dashboard-object': {
					this.$handleNewZoneContentForDashboardObjectZone(zoneContentModel);
					return;
				}
				case 'bitmap': {
					this.zoneContentViewModel = new $tab_ImageZoneViewModel(ss.cast(zoneContentModel, tab.ImageZoneModel));
					break;
				}
				case 'flipboard-nav': {
					tab.ModuleManager.load(tab.IStoryModule).call(null, []).done(ss.mkdel(this, function(module1) {
						this.zoneContentViewModel = module1.newFlipboardNavigatorViewModel(ss.cast(zoneContentModel, tab.FlipboardNavigatorModel));
						callAfterContentViewModelSet();
					}));
					return;
				}
				case 'flipboard': {
					tab.ModuleManager.load(tab.IStoryModule).call(null, []).done(ss.mkdel(this, function(module2) {
						this.zoneContentViewModel = module2.newFlipboardViewModel(ss.cast(zoneContentModel, tab.FlipboardModel), this);
						callAfterContentViewModelSet();
					}));
					return;
				}
				case 'filter': {
					this.$handleNewZoneContentForFilterZone(worksheetName, zoneContentModel);
					return;
				}
				case 'highlighter': {
					this.zoneContentViewModel = new $tab_DataHighlighterViewModel(ss.cast(zoneContentModel, tab.DataHighlighterModel), tab.ModelUtils.getVisualId(worksheetName), this);
					break;
				}
				case 'paramctrl': {
					tab.ModuleManager.load(tab.ILegacyDojoUIModule).call(null, []).done(ss.mkdel(this, function(module3) {
						this.zoneContentViewModel = module3.createParameterControlViewModel(ss.cast(zoneContentModel, tab.ParameterCtrlModel));
						callAfterContentViewModelSet();
					}));
					return;
				}
				case 'viz': {
					if (tsConfig.is_metrics_authoring) {
						return;
					}
					tab.ModuleManager.load(tab.IVizZoneModule).call(null, []).done(ss.mkdel(this, function(module4) {
						this.zoneContentViewModel = module4.createPaneTableViewModel(ss.cast(zoneContentModel, tab.VisualModel));
					}));
					break;
				}
				case 'layout-basic':
				default: {
					tab.Log.get(this).warn('Unknown zone type: %s', [zoneType]);
					return;
				}
			}
			ss.Debug.assert(ss.isValue(this.zoneContentViewModel), 'The view model should now be set.');
			callAfterContentViewModelSet();
		},
		$handleTitleVisibiltyChanged: function ZoneViewModel$HandleTitleVisibiltyChanged() {
			this.notifyPropertyChanged($tab_ZoneViewModel.titleVisiblePropertyName);
		},
		$handleRemovedZoneContent: function ZoneViewModel$HandleRemovedZoneContent() {
			this.dispose();
		},
		$raiseNewZoneContent: function ZoneViewModel$RaiseNewZoneContent(newZoneContentViewModel) {
			if (!ss.staticEquals(this.$2$NewZoneContentField, null)) {
				this.$2$NewZoneContentField(newZoneContentViewModel);
			}
		},
		$isAwaitingContent: function ZoneViewModel$IsAwaitingContent() {
			var awaitingContent = tab.ProgressiveLoader.get_progressiveLoadEnabled() && ss.contains(tab.ProgressiveLoader.zonesThatDeferContentCreation, this.get_zoneType()) && ss.isNullOrUndefined(this.zoneContentViewModel);
			awaitingContent = awaitingContent && this.$zoneModel.get_hasContent();
			return awaitingContent;
		}
	}, spiff.BaseViewModel, [ss.IDisposable, tab.IViewModel, tab.IZoneViewModel]);
	ss.initClass($tableau_ApiCommandExecutor, $asm, {});
	(function() {
		$tab_DataAlertErrorComponent.$genericMessageClass = 'tab-dataAlertGenericErrorMessage';
		$tab_DataAlertErrorComponent.$errorContentClass = 'tab-dataAlertErrorDialogContent';
	})();
	(function() {
		tab.ObjectRegistry.registerType($tab_NotificationView, $tab_NotificationView).call(null);
	})();
	(function() {
		tab.ObjectRegistry.registerType($tab_GeoLocationNotificationView, $tab_GeoLocationNotificationView).call(null);
	})();
	(function() {
		$tab_EmailValidator.maxEmailLength = 100;
	})();
	(function() {
		$tab_DataAlertTelemetryConstants.warningToastTelemetryEventName = 'DataAlert_CreateAlertButtonClicked';
		$tab_DataAlertTelemetryConstants.closeOrSubmitButtonClickedEventName = 'DataAlert_CloseOrSubmitButtonClicked';
		$tab_DataAlertTelemetryConstants.errorMessageTypeProperty = 'ErrorMessageType';
		$tab_DataAlertTelemetryConstants.errorMessageStringProperty = 'ErrorMessageString';
		$tab_DataAlertTelemetryConstants.alertButtonClickedType = 'createAlertButtonClicked';
		$tab_DataAlertTelemetryConstants.datasourceNoPasswordErrorType = 'datasourceNoEmbeddedPasswordError';
		$tab_DataAlertTelemetryConstants.platformPropagatedErrorType = 'platformPropagatedError';
		$tab_DataAlertTelemetryConstants.genericDataAlertInitErrorType = 'genericDataAlertInitError';
		$tab_DataAlertTelemetryConstants.getDataSourcesApiFailedErrorType = 'getDataSourcesApiFailedError';
		$tab_DataAlertTelemetryConstants.submitButtonPressedProperty = 'SubmitButtonPressed';
		$tab_DataAlertTelemetryConstants.totalRecipientCountProperty = 'TotalRecipientCount';
		$tab_DataAlertTelemetryConstants.invalidUnlicensedRecipientCountProperty = 'InvalidUnlicensedRecipientCount';
		$tab_DataAlertTelemetryConstants.invalidViewPermissionsRecipientCountProperty = 'InvalidViewPermissionsRecipientCount';
		$tab_DataAlertTelemetryConstants.invalidDownloadPermissionRecipientCountProperty = 'InvalidDownloadPermissionRecipientCount';
		$tab_DataAlertTelemetryConstants.invalidEmailRecipientCountProperty = 'InvalidEmailRecipientCount';
		$tab_DataAlertTelemetryConstants.operatorTypeProperty = 'OperatorType';
		$tab_DataAlertTelemetryConstants.conditionMetProperty = 'ConditionMet';
		$tab_DataAlertTelemetryConstants.emailFrequencyProperty = 'EmailFrequency';
		$tab_DataAlertTelemetryConstants.submitButtonEnabledProperty = 'SubmitButtonEnabled';
		$tab_DataAlertTelemetryConstants.currentUserHasEmailProperty = 'CurrentUserHasEmail';
		$tab_DataAlertTelemetryConstants.editModeProperty = 'EditMode';
	})();
	(function() {
		$tab_DataAlertCreateViewModel.debounceTimeout = 300;
		$tab_DataAlertCreateViewModel.maxTitleLength = 256;
		$tab_DataAlertCreateViewModel.$maxThresholdLength = 18;
	})();
	(function() {
		$tab_RecipientSearchComponent.autoCompleteDebounceTime = 200;
		$tab_RecipientSearchComponent.rowHeight = 26;
		$tab_RecipientSearchComponent.numberOfRowsInViewport = 6;
	})();
	(function() {
		$tab_RecipientSearchSelectorComponent.autoCompleteDebounceTime = 200;
		$tab_RecipientSearchSelectorComponent.rowHeight = 26;
		$tab_RecipientSearchSelectorComponent.numberOfRowsInViewportWithoutSearchComponent = 11;
	})();
	(function() {
		$tab_DataAlertEditUrlHelper.editDataAlertUrlParam = ':editDataAlert';
		$tab_DataAlertEditUrlHelper.resumeDataAlertUrlParam = ':resumeDataAlert';
		$tab_DataAlertEditUrlHelper.instanceIdUrlParam = ':iid';
	})();
	(function() {
		$tab_ShareTemplate.linkTemplate = "\n            <div class='tab-shareLinkSection'>\n                <label>\n                    <span class='tab-shareLinkTitle tab-shareTitle'/>\n                    <span class='tab-shareLinkInput'/>\n                </label>\n                <div class='tab-shareLinkButtons'/>\n            </div>";
		$tab_ShareTemplate.embedTemplate = "\n            <div class='tab-shareEmbedSection'>\n                <label>\n                    <span class='tab-shareEmbedTitle tab-shareTitle'/>\n                    <span class='tab-shareEmbedInput'/>\n                </label>\n            </div>";
		$tab_ShareTemplate.viewStateTemplate = "\n            <div class='tab-shareViewStateSection'>\n            </div>";
		$tab_ShareTemplate.$htmlTemplate = "\n            <div class='tab-shareView tab-toolbarDialog'>\n            </div>";
	})();
	(function() {
		$tab_SubscriptionMessageEditor.characterLimit = 2000;
		$tab_SubscriptionMessageEditor.characterWarningLimit = 1800;
		$tab_SubscriptionMessageEditor.messageEditorClass = 'tabSubscribeMessageEditor';
		$tab_SubscriptionMessageEditor.errorMessageClass = 'tabSubscribeMessageEditorErrorMessage';
	})();
	(function() {
		$tab_PublicInfoTemplate.$htmlTemplate = "<div class='tab-publicInfoView tab-toolbarDialog'><a class='tab-moreAboutPublicSection' target='_blank' /></a><div class='tab-viewAndAuthorInfoSection'></div></div>";
	})();
	(function() {
		$tab_WidgetUtil.colorSwatchMenuItemClass = 'colorSwatchMenuItem';
		$tab_WidgetUtil.$blockingNoneCommands = ['format-workbook'];
	})();
	(function() {
		$tab_CustomViewsTemplate.$htmlTemplate = "\n<div class='tab-customViewsView tab-toolbarDialog'>\n    <div class='tab-cv-flyoutSection tab-customViews-saveView' />\n    <div class='tab-cv-flyoutSection tab-cv-myViews'>\n        <div class='tab-toolbarDialogTitle'/>\n        <div class='tab-cv-listWrapper'>\n            <div class='tab-cv-viewsList'/>\n        </div>\n    </div>\n    <div class='tab-cv-flyoutSection tab-cv-otherViews'>\n        <div class='tab-toolbarDialogTitle'/>\n        <div class='tab-cv-listWrapper'>\n            <div class='tab-cv-viewsList'/>\n        </div>\n    </div>\n    <div class='tab-cv-flyoutSection tab-cv-manageModeControls' />\n</div>";
	})();
	(function() {
		$tab_AreYouSureTemplate.$htmlTemplate = "<div class='tab-areYouSure-container'><div class='tab-areYouSure-outer'><div class='tab-areYouSure-inner'><span class='tab-areYouSure-label'></span><div class='tab-areYouSure-no tab-areYouSure-button'></div><div class='tab-areYouSure-yes tab-areYouSure-button'></div></div></div></div>";
	})();
	(function() {
		$tab_CustomViewsView.$renameContainerDivClassName = 'tab-customViews-rename-container';
		$tab_CustomViewsView.renameCancelIconClassName = 'tab-icons-canceledit';
		$tab_CustomViewsView.renameInputDivClassName = 'tab-customView-rename-textInput';
		tab.ObjectRegistry.registerType($tab_CustomViewsView, $tab_CustomViewsView).call(null);
	})();
	(function() {
		$tab_CustomViewsViewModel.maxCustomViewNameLength = 255;
		$tab_CustomViewsViewModel.modeSelect = 0;
		$tab_CustomViewsViewModel.modeManage = 1;
		$tab_CustomViewsViewModel.$log = tab.Logger.getLogger($tab_CustomViewsViewModel, null);
	})();
	(function() {
		$tab_DashboardTemplate.$htmlTemplateGutter = "<div class='tab-gutter'><div id='tab-dashboard-region' class='tab-dashboard'/></div>";
		$tab_DashboardTemplate.$htmlTemplateNoGutter = "<div id='tab-dashboard-region' class='tab-dashboard'/>";
	})();
	(function() {
		$tab_TextRegionTemplate.contentElemClassName = 'tab-textRegion-content';
		$tab_TextRegionTemplate.formatIndicatorElemClassName = 'tab-formatThisZone';
		$tab_TextRegionTemplate.$titleEditArrowClassName = 'tabAuthoringTitleEditArrow';
		$tab_TextRegionTemplate.$htmlTemplate = "<div {0} class='tab-textRegion'>\n            <div class='tab-textRegion-boundary'>\n                <div class='tab-textRegion-content'></div>\n            </div>\n            <div class='tab-formatThisZone'></div>\n        </div>";
	})();
	(function() {
		$tab_CompletionMonitor.$monitoringInstance = null;
	})();
	(function() {
		$tab_FontMetricsLogger.fontsReadyMetricName = 'AllFontsDownloaded';
		$tab_FontMetricsLogger.uiStabilizedMetricName = 'UI Stabilized';
	})();
	(function() {
		$tab_RenderAndCheckFontLoader.stylesheetId = 'tab-renderAndCheckFontLoader';
		$tab_RenderAndCheckFontLoader.hiddenDivClass = 'tab-hiddenFontMeasurer';
		$tab_RenderAndCheckFontLoader.baselineFontClass = 'tab-baselineFontMeasurer';
		$tab_RenderAndCheckFontLoader.baselineFontName = "'Courier New', Monaco, monospace";
		$tab_RenderAndCheckFontLoader.measurementElementText = 'The quick brown fox jumps over the lazy dog iiilllest';
		$tab_RenderAndCheckFontLoader.$hiddenProps = ss.mkdict(['z-index', '-1', 'position', 'absolute', 'top', '0', 'right', '0', 'visibility', 'hidden']);
		$tab_RenderAndCheckFontLoader.maxLengthToWaitForFontsToDownloadMilliseconds = 120000;
		$tab_RenderAndCheckFontLoader.fontLoadedCheckDelayPerTryMilliseconds = 100;
		$tab_RenderAndCheckFontLoader.ensureFirstRenderPassCompletedDelayMilliseconds = 5;
		$tab_RenderAndCheckFontLoader.maxNumberOfTriesToDownloadFont = 1200;
	})();
	(function() {
		$tab_ServerFontLoader.raiseFontPreparationCompleteDelay = 200;
		var $t1 = new tab.DownloadableFontProperties();
		$t1.set_fontFamily('Benton Sans');
		$t1.set_weight('100');
		$t1.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansLight];
		var $t2 = new tab.DownloadableFontProperties();
		$t2.set_fontFamily('Benton Sans');
		$t2.set_weight('bold');
		$t2.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansMedium];
		$tab_ServerFontLoader.drawerFontNames = [$t1, $t2];
		var $t1 = new tab.DownloadableFontProperties();
		$t1.set_fontFamily('Benton Sans Low-DPI');
		$t1.set_weight('100');
		$t1.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansBook];
		var $t2 = new tab.DownloadableFontProperties();
		$t2.set_fontFamily('Benton Sans Low-DPI');
		$t2.set_weight('bold');
		$t2.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansMedium];
		$tab_ServerFontLoader.drawerLowDpiFontNames = [$t1, $t2];
		var $t1 = new tab.DownloadableFontProperties();
		$t1.set_fontFamily('Benton Sans');
		$t1.set_weight('100');
		$t1.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansLight];
		var $t2 = new tab.DownloadableFontProperties();
		$t2.set_fontFamily('Benton Sans');
		$t2.set_weight('bold');
		$t2.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansMedium];
		var $t3 = new tab.DownloadableFontProperties();
		$t3.set_fontFamily('Benton Sans');
		$t3.set_style('italic');
		$t3.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansBookItalic];
		$tab_ServerFontLoader.nlpFontNames = [$t1, $t2, $t3];
		var $t1 = new tab.DownloadableFontProperties();
		$t1.set_fontFamily('Benton Sans Low-DPI');
		$t1.set_weight('100');
		$t1.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansBook];
		var $t2 = new tab.DownloadableFontProperties();
		$t2.set_fontFamily('Benton Sans Low-DPI');
		$t2.set_weight('bold');
		$t2.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansMedium];
		var $t3 = new tab.DownloadableFontProperties();
		$t3.set_fontFamily('Benton Sans Low-DPI');
		$t3.set_style('italic');
		$t3.woffLocation = tab.ServerFonts.bentonSansWoffPaths[tab.ServerFonts.bentonSansSemiDemiItalic];
		$tab_ServerFontLoader.nlpLowDpiFontNames = [$t1, $t2, $t3];
		$tab_ServerFontLoader.$internalServerLoader = null;
	})();
	(function() {
		$tab_FormattingTelemetryClient.richTextEditingEventType = 'Formatting.RichTextEditing';
		$tab_FormattingTelemetryClient.richTextEditorOpenedBy = 'RichTextEditorOpenedBy';
		$tab_FormattingTelemetryClient.richTextEditorOpenedByDoubleClick = 'DoubleClick';
		$tab_FormattingTelemetryClient.richTextEditorOpenedByContextMenu = 'ContextMenu';
		$tab_FormattingTelemetryClient.richTextEditorOpenedByChevron = 'Chevron';
		$tab_FormattingTelemetryClient.richTextEditorOpenedFrom = 'RichTextEditorOpenedFrom';
		$tab_FormattingTelemetryClient.dashboard = 'Dashboard';
		$tab_FormattingTelemetryClient.annotation = 'Annotation';
		$tab_FormattingTelemetryClient.worksheetTitle = 'WorksheetTitle';
		$tab_FormattingTelemetryClient.worksheetTitleOnDashboard = 'WorksheetTitleOnDashboard';
		$tab_FormattingTelemetryClient.richTextEditorControl = 'EditorControl';
		$tab_FormattingTelemetryClient.performanceEventType = 'Formatting_Performance';
		$tab_FormattingTelemetryClient.performanceKeyMetric = 'PerformanceMetric';
		$tab_FormattingTelemetryClient.performanceKeyIsInitial = 'IsInitial';
		$tab_FormattingTelemetryClient.performanceKeyItemCount = 'ItemCount';
		$tab_FormattingTelemetryClient.performanceKeyWidgetIdentifiers = 'WidgetIdentifiers';
		$tab_FormattingTelemetryClient.performanceKeyElapsedTime = 'ElapsedTime';
	})();
	(function() {
		$tab_TextRegionView.formatIndicatorClass = 'tab-formatThisZone';
	})();
	(function() {
		$tab_DashboardAuthoringButtonTelemetry.$authoringMode = 'Authoring';
		$tab_DashboardAuthoringButtonTelemetry.$viewMode = 'View';
		$tab_DashboardAuthoringButtonTelemetry.$altClick = 'AltClick';
		$tab_DashboardAuthoringButtonTelemetry.$singleClick = 'SingleClick';
		$tab_DashboardAuthoringButtonTelemetry.$buttonNavTelemetry = 'DashboardAuthoring_ButtonNav';
		$tab_DashboardAuthoringButtonTelemetry.$enterSpaceKey = 'EnterSpaceKey';
		$tab_DashboardAuthoringButtonTelemetry.$buttonActionTelemetry = 'DashboardAuthoring_ButtonAction';
		$tab_DashboardAuthoringButtonTelemetry.$openButtonConfigDialogTelemetry = 'DashboardAuthoring_OpenButtonConfigDialog';
		$tab_DashboardAuthoringButtonTelemetry.$openButtonPermissionsErrorDialogTelemetry = 'DashboardAuthoring_OpenButtonPermissionsErrorDialog';
		$tab_DashboardAuthoringButtonTelemetry.altSingleMouseClickType = 'AltClick';
		$tab_DashboardAuthoringButtonTelemetry.singleMouseClickType = 'SingleClick';
		$tab_DashboardAuthoringButtonTelemetry.enterSpaceKeyClickType = 'EnterSpaceKey';
		$tab_DashboardAuthoringButtonTelemetry.doubleMouseClickType = 'DoubleClick';
	})();
	(function() {
		$tab_ButtonZoneComponent.defaultHoverBorderWidth = 1;
		$tab_ButtonZoneComponent.textButtonHoverOverlayColorDark = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.blackHoverColor, 0.400000005960464);
		$tab_ButtonZoneComponent.textButtonHoverOverlayColorLight = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.whiteHoverColor, 0.400000005960464);
	})();
	(function() {
		$tab_ExtensionLoadErrorTemplate.$htmlTemplate = "<div class='tab-extension-error tab-selectable'>{0}</div>";
	})();
	(function() {
		$tab_EmptyExtensionTemplate.$htmlTemplate = "<div class='tab-extension-empty'></div>";
	})();
	(function() {
		$tab_ExtensionIFrameTemplate.$htmlTemplate = '<div><iframe></iframe></div>';
	})();
	(function() {
		$tab_ExtensionZoneTemplate.$htmlTemplate = "<div class='tab-extension'></div>";
	})();
	(function() {
		$tab_DataHighlighterView.$popupMaxHeight = 312;
		$tab_DataHighlighterView.widgetClassName = 'tabDataHighlighterView';
		$tab_DataHighlighterView.searchResultsListClassName = 'tabDataHighlighterViewSearchResultList';
		$tab_DataHighlighterView.searchResultsListItemClassName = 'tab-list-item';
		$tab_DataHighlighterView.searchResultsListItemLabelClassName = 'tab-list-item-label';
		$tab_DataHighlighterView.inactiveTextClassName = 'tabDataHighlighterViewInactiveText';
		$tab_DataHighlighterView.queryDelayTimerMs = 200;
		tab.ObjectRegistry.registerType($tab_DataHighlighterView, $tab_DataHighlighterView).call(null);
	})();
	(function() {
		$tab_HttpsEmbedHttpAuthoringMessage.$htmlTemplate = "<div class='webZoneHttpsEmbedHttpAuthoring'><div class='message'></div><div class='url'><span>(</span><span class='scheme'>http://</span><span class='path'></span><span>)</span></div></div>";
	})();
	(function() {
		$tab_HttpsEmbedHttpViewMessage.$htmlTemplate = "<div class='webZoneHttpsEmbedHttpView'><div class='message'></div><a target='_blank'></a></div>";
	})();
	(function() {
		$tab_IFrameTemplate.$htmlTemplate = '<div><iframe></iframe></div>';
	})();
	(function() {
		$tab_WebZoneTemplate.$htmlTemplate = "<div class='tab-web'></div>";
	})();
	(function() {
		$tab_ImageUtil.$scaleErrorResetThreshold = Math.pow(2, -23);
	})();
	(function() {
		$tab_ImageZoneTemplate.$htmlTemplate = "<div class='tab-image'></div>";
	})();
	(function() {
		$tab_ImageZoneView.emptyImageClass = 'tab-emptyImagePlaceholder';
		$tab_ImageZoneView.$centeredImageWrapperClass = 'tab-centeredImageWrapper';
	})();
	(function() {
		$tab_EmptyFloatingLayoutTemplate.$htmlTemplate = "<div class='tab-EmptyFloatingLayout'></div>";
	})();
	(function() {
		tab.ObjectRegistry.registerType($tab_EmptyFloatingLayoutView, $tab_EmptyFloatingLayoutView).call(null);
	})();
	(function() {
		$tab_ZoneTemplate.$htmlTemplate = "<div class='tab-zone'><div class='tab-zone-margin'><div class='tab-zone-padding'></div></div></div>";
	})();
	(function() {
		$tab_ViewController.$1$SelectionChangedField = null;
	})();
	(function() {
		$tab_AppBannerViewModel.hideAppBannerCookie = 'hideAppBanner';
		$tab_AppBannerViewModel.redirectToAppStoreDelayInMS = 1000;
		$tab_AppBannerViewModel.playStoreUrl = 'https://play.google.com/store/apps/details?id=com.Tableau.TableauApp';
		$tab_AppBannerViewModel.appStoreUrl = 'https://itunes.apple.com/app/tableau-mobile/id434633927';
	})();
	(function() {
		$tab_WorkbookTemplate.centeringContainerSelector = '#centeringContainer';
		$tab_WorkbookTemplate.$htmlTemplate = "<div class='tab-workbook' role='application'><div class='dashboardSpacer'/></div>";
		$tab_WorkbookTemplate.$workbookHtmlTemplate = "<div id='dashboard-spacer' class='dashboardSpacer' role='application'></div>";
	})();
	(function() {
		$tab_PluginFilePicker.$instance = null;
	})();
	(function() {
		$tab_ToolbarButtonTemplate.$imageClassName = 'tabToolbarButtonImg';
		$tab_ToolbarButtonTemplate.$textClassName = 'tabToolbarButtonText';
		$tab_ToolbarButtonTemplate.$htmlTemplate = "<div class='tabToolbarButton' role='button'><span class='tabToolbarButtonImg' /><span class='tabToolbarButtonText' /></div>";
	})();
	(function() {
		$tab_$ApplicationViewModelsClickDetector.$moveSlop = 10;
		$tab_$ApplicationViewModelsClickDetector.$timeoutPeriod = 600;
	})();
	(function() {
		$tab_RightAreaDrawerModuleLoaderTemplate.$htmlTemplate = "<div class='tab-right-area-drawer-module-loader'></div>";
	})();
	(function() {
		$tab_RightAreaDrawerTemplate.$oldHtmlTemplate = "<div class='tab-right-area-drawer'></div>";
		$tab_RightAreaDrawerTemplate.$htmlTemplate = "<div id='right-panel'></div>";
	})();
	(function() {
		$tab_CancelDialogTelemetry.$cancelDialogEventType = 'Cancel_Dialog';
		$tab_CancelDialogTelemetry.$cancelDialogElapsedTimeBeforeCanceledMS = 'ElapsedTimeBeforeCancelledMS';
		$tab_CancelDialogTelemetry.$cancelDialogElapsedTotalTimeShownMS = 'ElapsedTotalTimeShownMS';
		$tab_CancelDialogTelemetry.$cancelCommandName = 'CommandName';
		$tab_CancelDialogTelemetry.$cancelStatus = 'CancelStatus';
		$tab_CancelDialogTelemetry.$cancelStatusFailure = 'Failure';
		$tab_CancelDialogTelemetry.$cancelStatusCompletedBeforeCancel = 'CompletedBeforeCancel';
	})();
	(function() {
		$tab_CancelDialog.instanceElement = null;
		$tab_CancelDialog.$focusId = null;
	})();
	(function() {
		$tab_BrowserViewport.$layoutInfoCallbacks = new Array();
		$tab_BrowserViewport.$isVisibleRectCommunicationEnabled = false;
		$tab_BrowserViewport.$vizOffset = null;
		$tab_BrowserViewport.$isMessageHandlerAttached = false;
		if (tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
			$tab_BrowserViewport.get_$log().debug('Adding layoutinfo message handler', []);
			var addEventListener = window.addEventListener;
			if (ss.isValue(addEventListener)) {
				addEventListener('message', $tab_BrowserViewport.$handleMessage, false);
			}
			else {
				var handler = $tab_BrowserViewport.$handleMessage;
				window.self.attachEvent('onmessage', handler);
			}
			$tab_BrowserViewport.$isMessageHandlerAttached = true;
		}
		$tab_BrowserViewport.$isVisibleRectCommunicationEnabled = tabBootstrap.ViewerBootstrap.get_instance().isVisibleRectCommunicationEnabled;
		if (BrowserSupport.BrowserSupport.IsIE()) {
			$tab_BrowserViewport.$addUnloadHandler();
		}
	})();
	(function() {
		$tab_ModifierKeyState.$1$ModifierKeysChangedField = null;
	})();
	(function() {
		$tab_SimpleTextContentDialog.maxDialogWidth = 600;
		$tab_SimpleTextContentDialog.textArea = new ss.Lazy(function() {
			var $t1 = document.createElement('textarea');
			return ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'TEXTAREA'));
		});
	})();
	(function() {
		$tab_LegacyErrorDialog.maxDialogWidth = 600;
		$tab_LegacyErrorDialog.$detailCssProps = { position: 'relative', borderColor: SharedWidgets.TabStyles.Colors.F6, borderWidth: SharedWidgets.TabStyles.Sizing.BorderWidth, borderStyle: 'solid', padding: SharedWidgets.TabStyles.Spacing.DefaultSpace, maxHeight: '500px', overflowY: 'auto', wordWrap: 'break-word' };
		$tab_LegacyErrorDialog.textArea = new ss.Lazy(function() {
			var $t1 = document.createElement('textarea');
			return ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'TEXTAREA'));
		});
	})();
	(function() {
		$tab_BaseDataSourceConnectionErrorWidget.dashboardContainerSelector = '.dashboardSpacer';
		$tab_BaseDataSourceConnectionErrorWidget.overlayId = 'auth-overlay';
		$tab_BaseDataSourceConnectionErrorWidget.messageEventName = 'message';
		$tab_BaseDataSourceConnectionErrorWidget.frameTestHook = 'dse-frame';
	})();
	(function() {
		$tab_SheetReconnectWidget.editConnectionTestID = 'SheetReconnectEditConnection';
		$tab_SheetReconnectWidget.$signInButtonTestID = 'SheetReconnectSignIn';
	})();
	(function() {
		$tab_GenericDataSourceErrorWidget.genericErrorTemplateHtml = '<div class="auth-box ocontent tb-data-source-error-container" role="alert"> \n                                                              <div class="tb-data-source-error"></div>\n                                                              <div class="tb-data-source-error-sub"></div>\n                                                              <div class="tab-UnifiedButton bordered tb-data-source-btn tb-data-source-button-retry" tabindex="0" role="button"></div>\n                                                              <div class="tab-data-source-msg"><textarea readonly class="tb-data-source-error-message"></textarea></div>\n                                                            </div>';
	})();
	(function() {
		$tab_FileReconnectWidget.$locateFileButtonTestID = 'FileReconnectLocateFile';
	})();
	(function() {
		$tab_DynamicallyLoadedContentDialog.bodyContainer = '<span></span>';
	})();
	(function() {
		$tab_ConnectionMissingFileDialog.$replaceFileDialogCalled = false;
	})();
	(function() {
		tab.ObjectRegistry.registerType($tab_RightAreaDrawerView, $tab_RightAreaDrawerView).call(null);
	})();
	(function() {
		tab.ObjectRegistry.registerType($tab_RightAreaDrawerModuleLoaderView, $tab_RightAreaDrawerModuleLoaderView).call(null);
	})();
	(function() {
		$tab_ViewingToolbarCommands.$uriPattern = new RegExp('^https?://[^/]+(.*)$');
	})();
	(function() {
		$tab_ToolbarTemplate.$defaultHtmlTemplate = "\n            <div class='tab-toolbar tab-fill'>\n                <div class='tab-vizItems tab-fill-left' />\n                <div class='tab-nonVizItems tab-fill-right' />\n            <div/>";
		$tab_ToolbarTemplate.$publicHtmlTemplate = "\n            <div class='tab-toolbar public tab-fill'>\n                <div class='tab-vizItems tab-fill-left' />\n                <div class='tab-nonVizItems tab-fill-right' />\n            <div/>";
	})();
	(function() {
		$tab_ToolbarView.$hideLabelsClass = 'hideLabels';
		$tab_ToolbarView.$showLabelsClass = 'showLabels';
		$tab_ToolbarView.$horizontalLabelsClass = 'horizontalLabels';
		$tab_ToolbarView.$stackedLabelsClass = 'stackedLabels';
		$tab_ToolbarView.$narrowClass = 'narrow';
		$tab_ToolbarView.$customViewsModifiedClass = 'tab-customviews-modified';
		$tab_ToolbarView.$toolbarButtonSelector = '.tabToolbarButton';
		$tab_ToolbarView.$customViewsLabelMaxWidth = '160px';
		$tab_ToolbarView.$toolbarThrottleTimeMs = 50;
		tab.ObjectRegistry.registerType($tab_ToolbarView, $tab_ToolbarView).call(null);
		tab.KeyboardShortcutManager.registerShortcut(new $tab_UndoKeyboardShortcut());
		tab.KeyboardShortcutManager.registerShortcut(new $tab_RedoKeyboardShortcut());
		tab.KeyboardShortcutManager.registerShortcut(new $tab_ToggleFullScreenKeyboardShortcut());
	})();
	(function() {
		$tab_WorkbookView.dashboardSpacerSelector = tab.DomUtil.asClassSelector('dashboardSpacer');
		tab.ObjectRegistry.registerType($tab_WorkbookView, $tab_WorkbookView).call(null);
	})();
	(function() {
		$tab_ToolbarViewModel.$iconClassPrefix = 'tab-icon-';
		$tab_ToolbarViewModel.$toggleUpdatesSuffix = 'toggle-updates';
		$tab_ToolbarViewModel.$sizeToAssumePhonePx = 430;
		$tab_ToolbarViewModel.$renderingIndicatorExplanation = 'Debug mode: The text of this button indicates if we are rendering locally on the web browser (B), or if rendering is occuring server side (S). If you are using the runtime, this becomes (RB) or (RS).';
	})();
	(function() {
		$tab_ApplicationViewModel.vizClientContainerSelector = '.tab-viz-client-container';
		$tab_ApplicationViewModel.$2$ApplicationSizeChangedField = null;
	})();
	(function() {
		$tab_Application.suppressVizTooltipsAndOverlays = 'tabSuppressVizTooltipsAndOverlays';
		$tab_Application.$commonDialogProvider = null;
		$tab_Application.$commonBannerProvider = null;
		$tab_Application.$instance = null;
		$tab_Application.$started = false;
		$tab_Application.$1$StartingField = null;
		$tab_Application.$1$StartedField = null;
		$tab_Application.$1$OnTabSelectField = null;
		$tab_$ApplicationStartupUtil.$prepareApplicationStartup();
	})();
	(function() {
		$tab_ApplicationView.vizContainerSelector = tab.DomUtil.asIDSelector('viz-client-container');
		$tab_ApplicationView.toolbarContainerSelector = tab.DomUtil.asIDSelector('toolbar-container');
		$tab_ApplicationView.tabContainerSelector = tab.DomUtil.asIDSelector('tab-container');
		$tab_ApplicationView.applicationContainerSelector = tab.DomUtil.asIDSelector('main-content');
		$tab_ApplicationView.dashboardViewportSelector = tab.DomUtil.asIDSelector('dashboard-viewport');
		tab.ObjectRegistry.registerType($tab_ApplicationView, $tab_ApplicationView).call(null);
	})();
	(function() {
		$tab_NaturalLanguageModuleUtil.$saveController = null;
		$tab_NaturalLanguageModuleUtil.$parentClass = 'tab-nlbox-layout';
	})();
	(function() {
		$tab_PresModelBrowserView.$viewTemplate = "<div class='pres_model_browser'><div class='pres_model_controls'><input type='text' class='pres_model_search_text' /><button class='pres_model_search'>Search</button><button class='pres_model_expand'>Expand all</button></div><div class='pres_model_tree_scroll'><div class='tree'></div></div></div>";
		$tab_PresModelBrowserView.$initialWidth = 375;
		$tab_PresModelBrowserView.$initialHeight = 250;
		$tab_PresModelBrowserView.jsTreeName = 'jquery.jstree';
		tab.ObjectRegistry.registerType($tab_PresModelBrowserView, $tab_PresModelBrowserView).call(null);
	})();
	(function() {
		$tab_ModulesRegistration.leafletLibFileName = 'leaflet';
		$tab_ModulesRegistration.dataCatalogClientComponentsLibFileName = 'data-catalog-client-components';
		$tab_ModulesRegistration.mapboxGLLibFileName = 'mapbox-gl';
		$tab_ModulesRegistration.nestedProjectExplorerLibFileName = 'nested-project-explorer';
		$tab_ModulesRegistration.rsaLibFilename = 'rsa';
		$tab_ModulesRegistration.naturalLanguageLayoutLibFileName = 'natural-language-layout';
		$tab_ModulesRegistration.naturalLanguageInputBoxLibFileName = 'natural-language-input-box';
		$tab_ModulesRegistration.naturalLanguageFieldsPanelLibFileName = 'natural-language-fields-panel';
		$tab_ModulesRegistration.extensionBootstrapLibFileName = 'api-platform-js';
		$tab_ModulesRegistration.dataAlertsPanelLibFileName = 'data-alerts-panel';
		$tab_ModulesRegistration.schemaViewerLibFileName = 'schema-viewer';
		$tab_ModulesRegistration.minSuffix = '.min';
		$tab_ModulesRegistration.dataGridModuleDependency = new tab.JsModuleInfo(ss.getTypeFullName(tab.ISharedWidgetsDataGrid), null);
		$tab_ModulesRegistration.storyAuthoringDependency = new tab.JsModuleInfo(ss.getTypeFullName(tab.IStoryModule), null);
		$tab_ModulesRegistration.fileUploadDependency = new tab.JsModuleInfo(ss.getTypeFullName(tab.IFileUploadModule), null);
		var onDemandModuleLoadEnabled = !tsConfig.isUnitTestRun;
		tab.ModuleManager.register(tab.IFileUploadModule).call(null, 'FileUploadModule', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		var connectionDialogModule = tab.ModuleManager.register(tab.IConnectionDialogModule).call(null, 'ConnectionDialogModule', null).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
		connectionDialogModule.addDependency($tab_ModulesRegistration.dataGridModuleDependency);
		connectionDialogModule.addDependency($tab_ModulesRegistration.fileUploadDependency);
		tab.ModuleManager.register(tab.IPdfExportDialogModule).call(null, 'PdfExportDialog', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		if (tsConfig.is_authoring) {
			tab.ModuleManager.register(tab.IStoryModule).call(null, 'Story', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
			tab.ModuleManager.register(tab.IStoryAuthoringModule).call(null, 'StoryAuthoring', 'StoryAuthoring').andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured.addDependency($tab_ModulesRegistration.storyAuthoringDependency);
			tab.ModuleManager.register(tab.IResizeHeadersModule).call(null, 'ResizeHeadersModule', null).andLoadOnDemandIf(false);
			$tab_ModulesRegistration.$registerRichTextEditingModule();
		}
		else {
			tab.ModuleManager.register(tab.IStoryModule).call(null, 'Story', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		}
		$tab_ModulesRegistration.$registerCommentingModule(onDemandModuleLoadEnabled);
		tab.ModuleManager.register(tab.IGroupDialogModule).call(null, 'GroupDialog', null).andLoadOnDemandIf(true).moduleBeingConfigured.addDependency($tab_ModulesRegistration.dataGridModuleDependency);
		tab.ModuleManager.register(tab.IBinDialogModule).call(null, 'BinDialog', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		tab.ModuleManager.register(tab.IAliasDialogModule).call(null, 'AliasDialog', null).andLoadOnDemandIf(true).moduleBeingConfigured.addDependency($tab_ModulesRegistration.dataGridModuleDependency);
		tab.ModuleManager.register(tab.ITrendLineDialogModule).call(null, 'TrendLineDialog', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		$tab_ModulesRegistration.$registerBackgroundMapModules(onDemandModuleLoadEnabled);
		tab.ModuleManager.registerTypicalRawJsModule($tab_ModulesRegistration.rsaLibFilename).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		tab.ModuleManager.register(tab.IDataConnectionModule).call(null, 'DataConnection', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		tab.ModuleManager.register(tab.ISelfServiceSchedulesModule).call(null, 'SelfServiceSchedulesModule', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		tab.ModuleManager.register(tab.ISharedWidgetsDataGrid).call(null, 'SharedWidgetsDataGridModule', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		tab.ModuleManager.register(tab.ISharedWidgetsPlayground).call(null, 'SharedWidgetsPlayground', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		tab.ModuleManager.register(tab.IDownloadDialogModule).call(null, 'DownloadDialog', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		tab.ModuleManager.register(tab.IDownloadAsVersionDialogModule).call(null, 'DownloadAsVersionDialog', null).andLoadOnDemandIf(true);
		tab.ModuleManager.register(tab.IDeviceLayoutSelectorModule).call(null, 'DeviceLayoutSelector', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		if (tab.NaturalLanguageUtil.isNlpView()) {
			$tab_ModulesRegistration.$registerNaturalLanguageModules(onDemandModuleLoadEnabled);
		}
		$tab_ModulesRegistration.$registerSchemaViewerModules(onDemandModuleLoadEnabled);
		tab.ModuleManager.registerTypicalRawJsModule($tab_ModulesRegistration.nestedProjectExplorerLibFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured.addDependency($tab_ModulesRegistration.dataGridModuleDependency);
		if (tab.FeatureFlags.isEnabled('ShowLineageButton')) {
			var dataCatalogLibJsModuleInfo = tab.ModuleManager.registerTypicalRawJsModule($tab_ModulesRegistration.dataCatalogClientComponentsLibFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled).andExportResultAs('DataCatalogClientComponents').moduleBeingConfigured;
			var dataCatalogJsModuleInfo = tab.ModuleManager.register(tab.IDataCatalogClientComponentsFactory).call(null, 'DataCatalogClientComponents', null).andLoadOnDemandIf(onDemandModuleLoadEnabled).moduleBeingConfigured;
			dataCatalogJsModuleInfo.addDependency(dataCatalogLibJsModuleInfo);
		}
		tab.ModuleManager.registerRawJsModule('@tableau/api-platform-js', $tab_ModulesRegistration.extensionBootstrapLibFileName, $tab_ModulesRegistration.extensionBootstrapLibFileName).andLoadOnDemandIf(onDemandModuleLoadEnabled).andExportResultAs('ExtensionsApi');
		$tab_ModulesRegistration.$registerLegacyDojoUI(onDemandModuleLoadEnabled);
		if (tsConfig.is_mobile) {
			tab.ModuleManager.register(tab.IVizZoneModule).call(null, 'VizZoneMobile', null).andLoadOnDemandIf(false);
		}
		else {
			tab.ModuleManager.register(tab.IVizZoneModule).call(null, 'VizZoneWeb', null).andLoadOnDemandIf(false);
		}
		tab.ModuleManager.register(tab.ISavingModule).call(null, 'Saving', null).andLoadOnDemandIf(onDemandModuleLoadEnabled);
		if (tab.RuntimeUtil.isRuntimeSupported()) {
			tab.ModuleManager.registerRawJsModule('runtimeweb', 'runtimeweb', 'runtimeweb.pretty').andLoadOnDemandIf(true);
		}
		$tab_ModulesRegistration.$registerDataAlertModules(onDemandModuleLoadEnabled);
		$tab_ModulesRegistration.$registerSharingModule(onDemandModuleLoadEnabled);
		if (tab.FeatureFlags.isEnabled('MarkAnimation')) {
			tab.ModuleManager.registerRawJsModule('runtimeanimweb', 'runtimeanimweb', 'runtimeanimweb.pretty').andLoadOnDemandIf(true);
		}
		tab.ModuleManager.register(tab.IDebugToolsModule).call(null, 'DebugTools', null).andLoadOnDemandIf(true);
		var DebugModuleName = $tab_PresModelBrowserView.jsTreeName;
		tab.ModuleManager.registerRawJsModule(DebugModuleName, $tab_PresModelBrowserView.jsTreeName, DebugModuleName);
		var $t1 = new Object();
		$t1.Instance = tab.PluginPresentationLayer.get_instance();
		var preslayer = $t1;
		if (tsConfig.isUnitTestRun) {
			window['PresLayerAPIContract'] = preslayer;
		}
		$(function() {
			define('$', function() {
				return $;
			});
			define('jquery', function() {
				return $;
			});
			define('React', function() {
				return React;
			});
			define('ReactDOM', function() {
				return ReactDOM;
			});
			define('react', function() {
				return React;
			});
			define('react-dom', function() {
				return ReactDOM;
			});
			define('SharedWidgets', function() {
				return SharedWidgets;
			});
			define('@tableau/preslayer-api-contract', function() {
				return preslayer;
			});
			define('@tableau/file-picker-api-contract', function() {
				var $t2 = new Object();
				$t2.Instance = $tab_PluginFilePicker.get_instance();
				return $t2;
			});
			define('@tableau/telemetry-api-contract', function() {
				var $t3 = new Object();
				$t3.Instance = tab.PluginTelemetry.get_instance();
				return $t3;
			});
			define('@tableau/shared-widgets', function() {
				return SharedWidgets;
			});
			define('@tableau/widgets', function() {
				return SharedWidgets;
			});
			define('@tableau/natural-language-input-box', function() {
				return NaturalLanguageInputBox;
			});
			define('@tableau/natural-language-fields-panel', function() {
				return NaturalLanguageFieldsPanel;
			});
			define('@tableau/browser-support', function() {
				return BrowserSupport;
			});
			define('@tableau/eventutils', function() {
				return EventUtils;
			});
			define('@tableau/drag-drop-api-contract', function() {
				return null;
			});
		});
	})();
	(function() {
		$tab_ApplicationTemplate.$htmlTemplate = "<div id='tabViewer' class='wcBody' style='visibility: hidden;'></div>";
		$tab_ApplicationTemplate.$applicationHtmlTemplate = "<div id='dashboard-viewport'></div>";
	})();
	(function() {
		$tab_DashboardView.dashboardRegionId = 'tab-dashboard-region';
		$tab_DashboardView.dashboardGutterCssSelector = '.tab-gutter';
		tab.ObjectRegistry.registerType($tab_DashboardView, $tab_DashboardView).call(null);
	})();
	(function() {
		$tab_ZoneView.$classReadyZone = 'tabZoneReady';
		$tab_ZoneView.zonesThatUseStyledBox = ['layout-flow', 'map', 'color', 'size', 'shape', 'filter', 'highlighter', 'paramctrl'];
		$tab_ZoneView.$suppressTooltipOverZones = ['bitmap', 'color', 'shape', 'size', 'map', 'text', 'web', 'dashboard-object', 'paramctrl', 'filter', 'highlighter', 'empty', 'current-page'];
		$tab_ZoneView.$deferredLoadedZones = ['flipboard-nav'];
		$tab_ZoneView.$3$ZoneBecameValidField = null;
		tab.ObjectRegistry.registerType($tab_ZoneView, $tab_ZoneView).call(null);
	})();
	(function() {
		$tab_ZoneViewModel.isActiveZonePropertyName = 'isActiveZone';
		$tab_ZoneViewModel.isReadyZonePropertyName = 'isReadyZone';
		$tab_ZoneViewModel.titleVisiblePropertyName = 'titleVisible';
		$tab_ZoneViewModel.$whitelistOfflineModeZones = ['viz', 'color', 'shape', 'size', 'map', 'text', 'title', 'bitmap', 'highlighter', 'empty', 'flipboard'];
	})();
	(function() {
		$tab_DataAlertDialogViewModel.$instance = null;
		tab.StartupUtils.callOnceAfterInitialBootstrap(function() {
			tab.ApplicationModel.get_holder().addEventBinding(function(newModel) {
				$tab_DataAlertDialogViewModel.$instance = $tab_DataAlertDialogViewModel.new$1(tab.DataAlertDialogModel.get_instance(), $tab_DataAlertEditUrlHelper.editDataAlertId(), $tab_DataAlertEditUrlHelper.isResumeDataAlert());
			}, function(oldModel) {
				$tab_DataAlertDialogViewModel.$instance = tab.MiscUtil.dispose$1($tab_DataAlertDialogViewModel.$instance);
			});
		});
	})();
	(function() {
		$tab_ShareViewModel.currentViewPath = '/shared/';
		$tab_ShareViewModel.$defaultFacebookUrl = 'http://facebook.com';
		$tab_ShareViewModel.$automaticVizDesktopAspectRatio = 0.75;
		$tab_ShareViewModel.$automaticVizTabletAspectRatio = 0.75;
		$tab_ShareViewModel.$automaticVizPhoneAspectRatio = 1.77;
		var $t1 = [];
		$t1.push('from_wg');
		$t1.push('host_url');
		$t1.push('debug');
		$t1.push('wb');
		$t1.push('vw');
		$t1.push('prefix');
		$t1.push('cvu');
		$t1.push('cvn');
		$t1.push('delay');
		$t1.push('preview');
		$t1.push('site');
		$t1.push('ds');
		$t1.push('project');
		$t1.push('aux');
		$t1.push('guid');
		$t1.push('mobile');
		$t1.push('app');
		$t1.push('showVizHome');
		$t1.push('showShareOptions');
		$t1.push('record_client_performance');
		$t1.push('bootstrapWhenNotified');
		$t1.push('apiID');
		$t1.push('reloadOnCustomViewSave');
		$t1.push('openAuthoringInTopWindow');
		$t1.push('browserBackButtonUndo');
		$t1.push('commentingEnabled');
		$t1.push('size');
		$t1.push('isVizPortal');
		$tab_ShareViewModel.$defaultKnownOptionsShareIgnore = $t1;
	})();
	(function() {
		$tab_SubscribeViewModel.maxSubscriptionSubjectLength = 256;
		$tab_SubscribeViewModel.maxSubscriptionEmailLength = 100;
		$tab_SubscribeViewModel.$scheduleDropdownClass = 'tabSubscriptionScheduleDropdown';
		$tab_SubscribeViewModel.modeMainDialog = 0;
		$tab_SubscribeViewModel.modeMessage = 1;
		$tab_SubscribeViewModel.modeSubscribeUsers = 2;
		$tab_SubscribeViewModel.modeSubscribeGroups = 3;
	})();
	(function() {
		$tab_PublicInfoViewModel.$2$ViewCountField = 0;
	})();
	(function() {
		$tab_ToolbarButtonViewModel.iconTypeDownload = 'download';
		$tab_ToolbarButtonViewModel.iconTypeShare = 'share';
		$tab_ToolbarButtonViewModel.iconTypeCustomViews = 'customviews';
		$tab_ToolbarButtonViewModel.iconTypeSubscribe = 'subscribe';
		$tab_ToolbarButtonViewModel.iconTypeEdit = 'edit';
		$tab_ToolbarButtonViewModel.iconTypeRedo = 'redo';
		$tab_ToolbarButtonViewModel.iconTypeUndo = 'undo';
		$tab_ToolbarButtonViewModel.iconTypeRevert = 'revert';
		$tab_ToolbarButtonViewModel.iconTypeToggleDataUpdates = 'toggle-updates';
		$tab_ToolbarButtonViewModel.iconTypeRefreshData = 'refresh';
		$tab_ToolbarButtonViewModel.iconTypePublicLogo = 'public-logo';
		$tab_ToolbarButtonViewModel.pauseButton = 'Pause';
	})();
	(function() {
		$tab_DeviceLayoutToolbarButtonBuilder.desktopLayoutIconClass = 'tab-icon-desktopLayout';
		$tab_DeviceLayoutToolbarButtonBuilder.tabletLayoutIconClass = 'tab-icon-tabletLayout';
		$tab_DeviceLayoutToolbarButtonBuilder.phoneLayoutIconClass = 'tab-icon-phoneLayout';
	})();
	(function() {
		tab.ObjectRegistry.registerType($tab_PublicInfoView, $tab_PublicInfoView).call(null);
	})();
	(function() {
		tab.ObjectRegistry.registerType($tab_ShareView, $tab_ShareView).call(null);
	})();
	(function() {
		$tab_WorkbookViewModel.$2$WorkbookResizedField = null;
	})();
	(function() {
		$tab_RightAreaDrawerViewModel.drawerWidthOpen = 320;
		$tab_RightAreaDrawerViewModel.drawerWidthClosed = 0;
	})();
	(function() {
		$tab_FontNormalizer.$instance = null;
		$tab_FontNormalizer.$fontMap = null;
	})();
	(function() {
		$tab_TabRenderContext2D.defaultLinePattern = 'solid';
		$tab_TabRenderContext2D.defaultLineJoin = 'bevel';
		$tab_TabRenderContext2D.defaultLineCap = 'butt';
		$tab_TabRenderContext2D.defaultTextBaseline = 'alphabetic';
		$tab_TabRenderContext2D.defaultTextAlign = 'start';
		$tab_TabRenderContext2D.defaultLineDashDashed = [3, 1];
		$tab_TabRenderContext2D.defaultLineDashDotted = [1, 1];
		$tab_TabRenderContext2D.defaultLineWidth = 1;
		$tab_TabRenderContext2D.defaultColor = 'rgb(0,0,0)';
		$tab_TabRenderContext2D.defaultTextColor = 'rgb(0,0,0)';
		$tab_TabRenderContext2D.defaultTextAngle = 0;
		$tab_TabRenderContext2D.defaultFontName = 'Arial';
		$tab_TabRenderContext2D.defaultFontSize = 8;
		$tab_TabRenderContext2D.defaultTextUnderline = false;
		$tab_TabRenderContext2D.$textAngleEpsilon = 0.01;
	})();
	(function() {
		$tab_CanvasRenderer.halfPI = 0.5 * Math.PI;
		$tab_CanvasRenderer.onePI = Math.PI;
		$tab_CanvasRenderer.oneAndHalfPI = 1.5 * Math.PI;
		$tab_CanvasRenderer.twoPI = 2 * Math.PI;
		$tab_CanvasRenderer.angleEpsilon = 0.000174000000697561;
	})();
	(function() {
		$tab_CommandsTelemetryUtils.$readIdDelimiter = ':';
	})();
	(function() {
		$tab_DashboardAuthoringObjectsPaneTelemetry.$dashboardAuthoringAddNewObjectToDashboardEvent = 'DashboardAuthoring_AddNewObjectToDashboard';
		$tab_DashboardAuthoringObjectsPaneTelemetry.$methodAddedColumnName = 'MethodAdded';
		$tab_DashboardAuthoringObjectsPaneTelemetry.$isTiledColumnName = 'IsTiled';
		$tab_DashboardAuthoringObjectsPaneTelemetry.$addedObjectTypeColumnName = 'AddedObjectType';
	})();
	(function() {
		$tab_DashboardLoadCompleteEventProperties.type = 'Dashboard_LoadComplete';
		$tab_DashboardLoadCompleteEventProperties.bothScrollableVizCount = 'BothScrollableVizCount';
		$tab_DashboardLoadCompleteEventProperties.currentDeviceLayout = 'CurrentDeviceType';
		$tab_DashboardLoadCompleteEventProperties.dashboardWidth = 'DashboardWidth';
		$tab_DashboardLoadCompleteEventProperties.dashboardHeight = 'DashboardHeight';
		$tab_DashboardLoadCompleteEventProperties.detectedDeviceType = 'DetectedDeviceType';
		$tab_DashboardLoadCompleteEventProperties.filterZonesCount = 'FilterZonesCount';
		$tab_DashboardLoadCompleteEventProperties.floatingZonesCount = 'FloatingZonesCount';
		$tab_DashboardLoadCompleteEventProperties.highlighterZonesCount = 'HighlighterZonesCount';
		$tab_DashboardLoadCompleteEventProperties.imageZonesCount = 'ImageZonesCount';
		$tab_DashboardLoadCompleteEventProperties.isAutoGenerated = 'IsAutoGenerated';
		$tab_DashboardLoadCompleteEventProperties.legendZonesCount = 'LegendZonesCount';
		$tab_DashboardLoadCompleteEventProperties.pannableMapCount = 'PannableMapCount';
		$tab_DashboardLoadCompleteEventProperties.parameterZonesCount = 'ParameterZonesCount';
		$tab_DashboardLoadCompleteEventProperties.sheetType = 'SheetType';
		$tab_DashboardLoadCompleteEventProperties.textZonesCount = 'TextZonesCount';
		$tab_DashboardLoadCompleteEventProperties.vizCount = 'VizCount';
		$tab_DashboardLoadCompleteEventProperties.xScrollableVizCount = 'XScrollableVizCount';
		$tab_DashboardLoadCompleteEventProperties.yScrollableVizCount = 'YScrollableVizCount';
		$tab_DashboardLoadCompleteEventProperties.viewId = 'ViewId';
	})();
	(function() {
		if (tsConfig.isUnitTestRun) {
			return;
		}
		tab.WorldUpdateInterceptor.get().add_onDashboardLoadComplete(function() {
			$tab_DashboardLoadCompleteTelemetry.track(tab.ModelUtils.findContentDashboard(null));
		});
	})();
	(function() {
		tab.StartupUtils.callOnceAfterInitialBootstrap(function() {
			tab.ApplicationModel.get_holder().addEventBinding(function(newModel) {
				$tab_DataAlertPageReloadHandler.removeLeftoverRefline(tab.DataAlertDialogModel.get_instance());
			}, function(oldModel) {
			});
		});
	})();
	(function() {
		$tab_DataHighlighterViewTemplate.$htmlTemplate = "\n            <div class='tabDataHighlighterContainer'>\n                <div class='tab-zone-titleregion' />\n                <div class='tabDataHighlighterContent'>\n                    <div class='tabDataHighlighterView'/>\n                </div>\n            </div>";
	})();
	(function() {
		$tab_DatePicker.$maxWeeks = 6;
	})();
	(function() {
		$tab_HitTargetColliders.simpleRectangleCollider = null;
		$tab_HitTargetColliders.simpleRectangleCollider = function(geom, selectionRect) {
			var left1 = geom.get_geom().x;
			var right1 = geom.get_geom().x + geom.get_geom().w;
			var top1 = geom.get_geom().y;
			var bottom1 = geom.get_geom().y + geom.get_geom().h;
			var left2 = selectionRect.x;
			var right2 = selectionRect.x + selectionRect.w;
			var top2 = selectionRect.y;
			var bottom2 = selectionRect.y + selectionRect.h;
			if (bottom1 < top2) {
				return false;
			}
			if (top1 > bottom2) {
				return false;
			}
			if (right1 < left2) {
				return false;
			}
			if (left1 > right2) {
				return false;
			}
			return true;
		};
	})();
	(function() {
		$tab_HorizontalIteratorButtonTemplate.$htmlTemplate = "<div class='tabCatLegendScrollButtonHolder'><span class='tabCatLegendScrollPrev'/><span class='tabCatLegendScrollNext'/></div>";
	})();
	(function() {
		$tab_VerticalIteratorButtonTemplate.$htmlTemplate = "<div class='tabCatLegendScrollButtonHolder'><span class='tabCatLegendScrollPrev'/><br><span class='tabCatLegendScrollNext'/></div>";
	})();
	(function() {
		$tab_IteratorButtons.$minScrollOffset = 0;
		$tab_IteratorButtons.$disabledButtonClass = 'tabIterButtonDisabled';
		$tab_IteratorButtons.$defaultScrollIncrememnt = 100;
	})();
	(function() {
		$tab_MapScaleViewModel.$defaultProps = { width: 0, readoutText: '', readoutColor: '', borderColor: '', shouldShowMapScale: false, marginOfError: 0, tooltipText: '' };
	})();
	(function() {
		$tab_OverlayImage.$htmlTemplate = "<img class='tab-overlayImage'/>";
	})();
	(function() {
		$tab_QuickFilterNoninteractiveDropdownComponent.containerClass = 'tab-legacy-dropdown-container';
		$tab_QuickFilterNoninteractiveDropdownComponent.containerBorderClass = 'tab-legacy-qf-bordered';
		$tab_QuickFilterNoninteractiveDropdownComponent.summaryClass = 'tab-legacy-dropdown-summary';
		$tab_QuickFilterNoninteractiveDropdownComponent.iconContainerClass = 'tab-legacy-dropdown-icon-container';
		$tab_QuickFilterNoninteractiveDropdownComponent.iconClass = 'tab-legacy-dropdown-icon';
	})();
	(function() {
		$tab_QuickFilterReadoutComponent.containerClass = 'tab-legacy-qf-readout-container';
		$tab_QuickFilterReadoutComponent.containerBorderClass = 'tab-legacy-qf-bordered';
		$tab_QuickFilterReadoutComponent.textClass = 'tab-legacy-qf-readout-text';
		$tab_QuickFilterReadoutComponent.iconClass = 'tab-legacy-qf-readout-icon';
	})();
	(function() {
		$tab_SmoothTooltipBehavior.$bindingNamespace = '.SmoothTooltipBehavior';
	})();
	(function() {
		$tab_TiledImageTemplate.$htmlTemplate = "<div class='tvimagesContainer'></div>";
	})();
	(function() {
		$tab_TooltipTemplate.$bodySelector = '.tab-tooltipContent';
		$tab_TooltipTemplate.$htmlTemplate = "\n<div class='tab-tooltip'>\n  <div class='tab-tooltipContainer'>\n    <div class='tab-tooltipContent' waiRole='alert'></div>\n  </div>\n  <div class='tab-tooltipConnector'></div>\n</div>";
	})();
	(function() {
		$tab_Tooltip.defaultVerticalOffset = 16;
		$tab_Tooltip.defaultHorizonalOffset = 16;
		$tab_Tooltip.$verticalCutoffBuffer = 16;
		$tab_Tooltip.$safeAreaPxBuffer = 10;
		$tab_Tooltip.belowRightClass = 'tab-tooltipBR';
		$tab_Tooltip.belowLeftClass = 'tab-tooltipBL';
		$tab_Tooltip.aboveRightClass = 'tab-tooltipAR';
		$tab_Tooltip.aboveLeftClass = 'tab-tooltipAL';
		$tab_Tooltip.$allRelativePositionClasses = 'tab-tooltipAR tab-tooltipAL tab-tooltipBL tab-tooltipBR';
		$tab_Tooltip.$tooltipElement = null;
		$tab_Tooltip.$tooltipNullDebugMessage = 'Tooltip layout was requested, but tooltip position cannot be calulated (shownArgs is null).';
	})();
	(function() {
		$tab_Ubertip.$htmlTemplate = "\n<div class='tab-ubertip'>\n  <div class='tab-ubertipContent'>\n    <div class='tab-ubertipTooltip'></div>\n    <div class='tab-ubertipActions'></div>\n  </div>\n  <div class='tab-ubertipCommandArea'>\n    <div class='tab-ubertipSelected'></div>\n    <div class='tab-ubertipCommands'></div>\n    <div class='tab-clear'></div>\n  </div>\n</div>";
		$tab_Ubertip.$tooltipSelector = '.tab-ubertipTooltip';
		$tab_Ubertip.$vizInTooltipSelector = '.tab-ubertipTooltip span[data-tableau="VizInTooltip"]';
		$tab_Ubertip.$contentAreaSelector = '.tab-ubertipContent';
		$tab_Ubertip.$actionsSelector = '.tab-ubertipActions';
		$tab_Ubertip.$commandAreaSelector = '.tab-ubertipCommandArea';
		$tab_Ubertip.$commandsSelector = '.tab-ubertipCommands';
		$tab_Ubertip.$commandsClearSelector = '.tab-clear';
		$tab_Ubertip.$selectedSelector = '.tab-ubertipSelected';
		$tab_Ubertip.$selectedSelectionRelaxationSelector = 'tab-selection-relaxation-selected';
		$tab_Ubertip.$buttonSeparatorHtml = "<li><div class='tab-separator'>&nbsp;</div></li>";
		$tab_Ubertip.$defaultMaxWhitespace = 70;
		$tab_Ubertip.$dropShadowPixels = 2;
		$tab_Ubertip.$tooltipDefaultMaxWdith = 740;
		$tab_Ubertip.$placeholderWidth = null;
		$tab_Ubertip.$placeholderWidth = {};
	})();
	(function() {
		$tab_VizEvent.$1$MobileVizExpandTransformField = null;
		$tab_VizEvent.$1$MobileVizReduceTransformField = null;
	})();
	(function() {
		$tab_TooltipBaseMode.whitespaceObjectId = 'W';
		$tab_TooltipBaseMode.unknownObjectId = 'U';
		$tab_TooltipBaseMode.$tooltipMouseLeaveListener = 'mouseleave.basemode';
		$tab_TooltipBaseMode.$tooltipRequestId = 0;
		$tab_TooltipBaseMode.$requestVizId = null;
		$tab_TooltipBaseMode.$latestTupleId = null;
		$tab_TooltipBaseMode.$lastHoveredObjectIds = $tab_TooltipBaseMode.unknownObjectId;
		$tab_TooltipBaseMode.vizInTooltipDelayTimerMs = 200;
	})();
	(function() {
		$tab_ViewportChangeDetector.$instance = null;
	})();
	(function() {
		$tab_WaitDialog.$instanceElement = null;
	})();
})();
// END UI
